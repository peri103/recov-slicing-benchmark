{
    "java_code": "import org.apache.commons.compress.compressors.gzip.GzipParameters;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        GzipParameters gzipParams = new GzipParameters();\n        /* write */ gzipParams.setCRC32(123456789L);\n\n        // Create a map to hold some data\n        Map<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"first\", 100);\n        dataMap.put(\"second\", 200);\n        dataMap.put(\"third\", 300);\n\n        // Perform some operations on the map\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n\n        // Modify the map\n        dataMap.put(\"fourth\", 400);\n        dataMap.remove(\"second\");\n\n        // Access the original GzipParameters object\n        /* read */ long crc32Value = gzipParams.getCRC32();\n        System.out.println(\"CRC32 Value: \" + crc32Value);\n\n        // Further operations on the map\n        int product = 1;\n        for (Integer value : dataMap.values()) {\n            product *= value;\n        }\n        System.out.println(\"Product of values in map: \" + product);\n\n        // Create another GzipParameters instance and perform operations\n        GzipParameters anotherGzipParams = new GzipParameters();\n        anotherGzipParams.setCompressionLevel(5);\n        System.out.println(\"Compression Level: \" + anotherGzipParams.getCompressionLevel());\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.compressors.gzip.GzipParameters;\n\npublic class Main {\n    public static void main(String[] args) {\n        GzipParameters gzipParams = new GzipParameters();\n        /* write */ gzipParams.setCRC32(123456789L);\n        /* read */ long crc32Value = gzipParams.getCRC32();\n        System.out.println(crc32Value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.compressors.gzip.GzipParameters",
        "write_method": "setCRC32",
        "read_class": "org.apache.commons.compress.compressors.gzip.GzipParameters",
        "read_method": "getCRC32"
    }
}