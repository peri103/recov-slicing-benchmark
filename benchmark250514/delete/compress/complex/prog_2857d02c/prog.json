{
    "java_code": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArArchiveEntry entry = new ArArchiveEntry(\"example\", 1000);\n        byte[] extraData = new byte[]{1, 2, 3, 4, 5};\n        \n        Map<String, Integer> itemMap = new HashMap<>();\n        itemMap.put(\"item1\", 10);\n        itemMap.put(\"item2\", 20);\n        itemMap.put(\"item3\", 30);\n        \n        /* write */ entry.setExtra(extraData);\n\n        for (Map.Entry<String, Integer> entrySet : itemMap.entrySet()) {\n            System.out.println(\"Key: \" + entrySet.getKey() + \", Value: \" + entrySet.getValue());\n        }\n\n        int sum = 0;\n        for (Integer value : itemMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values: \" + sum);\n        \n        // Additional unrelated complex logic\n        int factorial = 1;\n        for (int i = 1; i <= 5; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"Factorial of 5: \" + factorial);\n\n        /* read */ byte[] readExtraData = entry.getExtra();\n        \n        System.out.print(\"Extra data: \");\n        for (byte b : readExtraData) {\n            System.out.print(b + \" \");\n        }\n        System.out.println();\n\n        // More complex logic\n        int fibonacci[] = new int[10];\n        fibonacci[0] = 0;\n        fibonacci[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n        }\n        System.out.print(\"Fibonacci series: \");\n        for (int num : fibonacci) {\n            System.out.print(num + \" \");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArArchiveEntry entry = new ArArchiveEntry(\"example\", 1000);\n        byte[] extraData = new byte[]{1, 2, 3, 4, 5};\n        \n        /* write */ entry.setExtra(extraData);\n        /* read */ byte[] readExtraData = entry.getExtra();\n        \n        for (byte b : readExtraData) {\n            System.out.print(b + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
        "write_method": "setExtra",
        "read_class": "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
        "read_method": "getExtra"
    }
}