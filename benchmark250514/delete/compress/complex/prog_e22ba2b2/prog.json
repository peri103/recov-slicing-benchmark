{
    "java_code": "import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a ByteArrayOutputStream and DeflateCompressorOutputStream\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n            DeflateCompressorOutputStream deflateStream = new DeflateCompressorOutputStream(byteArrayOutputStream);\n\n            // Initialize some collections for complexity\n            List<Integer> numberList = new ArrayList<>();\n            Map<String, String> stringMap = new HashMap<>();\n\n            // Fill the collections with some data\n            for (int i = 1; i <= 5; i++) {\n                numberList.add(i * 10);\n            }\n            stringMap.put(\"Key1\", \"Value1\");\n            stringMap.put(\"Key2\", \"Value2\");\n\n            // Set sync flush mode\n            /* write */ deflateStream.setSyncFlush(true);\n\n            // Perform some operations on the collections\n            for (int number : numberList) {\n                System.out.println(\"Number: \" + number);\n            }\n\n            for (Map.Entry<String, String> entry : stringMap.entrySet()) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n            }\n\n            // More operations to increase complexity\n            int sum = 0;\n            for (int number : numberList) {\n                sum += number;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // Retrieve the sync flush value\n            /* read */ boolean syncFlushValue = deflateStream.getSyncFlush();\n            System.out.println(\"Sync Flush: \" + syncFlushValue);\n\n            // Close the deflate stream\n            deflateStream.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n            DeflateCompressorOutputStream deflateStream = new DeflateCompressorOutputStream(byteArrayOutputStream);\n\n            /* write */ deflateStream.setSyncFlush(true);\n            /* read */ boolean syncFlushValue = deflateStream.getSyncFlush();\n            \n            System.out.println(syncFlushValue);\n            \n            deflateStream.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream",
        "write_method": "setSyncFlush",
        "read_class": "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream",
        "read_method": "getSyncFlush"
    }
}