{
    "files": {
        "ArchiveHandler.java": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\nimport java.util.HashMap;\n\npublic class ArchiveHandler {\n    private ArArchiveEntry entry;\n    private HashMap<String, Long> archiveMap;\n\n    public ArchiveHandler(String fileName, long fileSize) {\n        entry = new ArArchiveEntry(fileName, fileSize);\n        archiveMap = new HashMap<>();\n    }\n\n    public void setGroupId(long groupId) {\n        /* write */ entry.setGroupId(groupId);\n    }\n\n    public long getEntrySize() {\n        return entry.getSize();\n    }\n\n    public void addToArchiveMap() {\n        archiveMap.put(entry.getName(), entry.getSize());\n    }\n\n    public HashMap<String, Long> getArchiveMap() {\n        return archiveMap;\n    }\n\n    public long getGroupId() {\n        return entry.getGroupId();\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Long> groupIds;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.groupIds = new ArrayList<>();\n    }\n\n    public void addGroupId(long groupId) {\n        groupIds.add(groupId);\n    }\n\n    public ArrayList<Long> getGroupIds() {\n        return groupIds;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArchiveHandler archiveHandler = new ArchiveHandler(\"example.txt\", 1000);\n        archiveHandler.setGroupId(12345);\n        archiveHandler.addToArchiveMap();\n\n        Course course = new Course(\"Computer Science\");\n        course.addGroupId(10001L);\n        course.addGroupId(10002L);\n\n        // Perform some operations with the Course object\n        System.out.println(\"Course Name: \" + course.getCourseName());\n        for (Long id : course.getGroupIds()) {\n            System.out.println(\"Course Group ID: \" + id);\n        }\n\n        // Retrieve the group ID using the read method from ArchiveHandler\n        /* read */ long groupId = archiveHandler.getGroupId();\n        course.addGroupId(groupId);\n\n        // Print the updated group IDs\n        System.out.println(\"Updated Group IDs in Course: \" + course.getGroupIds());\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
        "write_method": "setGroupId",
        "read_class": "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
        "read_method": "getGroupId"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an ArArchiveEntry object\n        ArArchiveEntry entry = new ArArchiveEntry(\"example.txt\", 1000);\n        \n        // Set the group ID using the write method\n        /* write */ entry.setGroupId(12345);\n        \n        // Retrieve the group ID using the read method\n        /* read */ long groupId = entry.getGroupId();\n        \n        // Print the group ID to verify the operation\n        System.out.println(\"Group ID: \" + groupId);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an ArArchiveEntry object\n        ArArchiveEntry entry = new ArArchiveEntry(\"example.txt\", 1000);\n        \n        // Initialize a ZipArchiveEntry object\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.zip\");\n        \n        // Use a HashMap to store archive entries and their sizes\n        HashMap<String, Long> archiveMap = new HashMap<>();\n        \n        // Set the group ID using the write method\n        /* write */ entry.setGroupId(12345);\n        \n        // Add entries to the HashMap\n        archiveMap.put(entry.getName(), entry.getSize());\n        archiveMap.put(zipEntry.getName(), zipEntry.getSize());\n\n        // Perform some calculations with the HashMap\n        long totalSize = 0;\n        for (Long size : archiveMap.values()) {\n            totalSize += size;\n        }\n        System.out.println(\"Total size: \" + totalSize);\n\n        // Initialize an ArrayList to store group IDs\n        ArrayList<Long> groupIds = new ArrayList<>();\n        \n        // Add some arbitrary group IDs to the list\n        groupIds.add(10001L);\n        groupIds.add(10002L);\n        \n        // Retrieve the group ID using the read method\n        /* read */ long groupId = entry.getGroupId();\n        \n        // Add the retrieved group ID to the list\n        groupIds.add(groupId);\n        \n        // Print all group IDs to verify the operation\n        System.out.println(\"Group IDs: \" + groupIds);\n        \n        // Perform some operations with the ZipArchiveEntry\n        zipEntry.setMethod(ZipArchiveEntry.DEFLATED);\n        System.out.println(\"Zip Entry Method: \" + zipEntry.getMethod());\n    }\n}"
}