{
    "files": {
        "DumpUser.java": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\n\npublic class DumpUser {\n    private DumpArchiveEntry entry;\n\n    public DumpUser() {\n        this.entry = new DumpArchiveEntry();\n    }\n\n    public void setUserId(long userId) {\n        /* write */ entry.setUserId(userId);\n    }\n\n    public long getUserId() {\n        return entry.getUserId();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public double calculateAverage() {\n        if (grades.isEmpty()) return 0;\n        int sum = 0;\n        for (int grade : grades) {\n            sum += grade;\n        }\n        return sum / (double) grades.size();\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        DumpUser dumpUser = new DumpUser();\n        dumpUser.setUserId(1001);\n\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n\n        student1.addGrade(85);\n        student1.addGrade(90);\n        student2.addGrade(78);\n        student2.addGrade(82);\n\n        HashMap<String, Student> studentMap = new HashMap<>();\n        studentMap.put(student1.getName(), student1);\n        studentMap.put(student2.getName(), student2);\n\n        for (String name : studentMap.keySet()) {\n            Student student = studentMap.get(name);\n            System.out.println(\"Student: \" + name + \", Average Grade: \" + student.calculateAverage());\n        }\n\n        /* read */ long userId = dumpUser.getUserId();\n        System.out.println(\"User ID: \" + userId);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
        "write_method": "setUserId",
        "read_class": "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
        "read_method": "getUserId"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n        /* write */ entry.setUserId(1001);\n        /* read */ long userId = entry.getUserId();\n        System.out.println(userId);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n        ArrayList<Integer> numbers = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n\n        // Populate the ArrayList with some numbers\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 2);\n        }\n\n        // Populate the HashMap with some key-value pairs\n        map.put(\"One\", 1);\n        map.put(\"Two\", 2);\n        map.put(\"Three\", 3);\n\n        // Perform some operations on the ArrayList\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Modify the DumpArchiveEntry\n        /* write */ entry.setUserId(1001);\n\n        // Perform some operations on the HashMap\n        if (map.containsKey(\"Two\")) {\n            map.put(\"Two\", map.get(\"Two\") + 5);\n        }\n\n        // Output the updated HashMap\n        System.out.println(\"Updated Map: \" + map);\n\n        // Read the userId from DumpArchiveEntry\n        /* read */ long userId = entry.getUserId();\n        System.out.println(\"User ID: \" + userId);\n\n        // Additional operations to increase complexity\n        numbers.add(userId > 1000 ? 10 : 5);\n        for (int num : numbers) {\n            System.out.println(\"Number: \" + num);\n        }\n    }\n}"
}