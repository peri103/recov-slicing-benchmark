{
    "files": {
        "ArchiveEntryManager.java": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\nimport java.util.ArrayList;\n\npublic class ArchiveEntryManager {\n    private ArrayList<ArArchiveEntry> entries = new ArrayList<>();\n\n    public void addEntry(String name, long size) {\n        ArArchiveEntry entry = new ArArchiveEntry(name, size);\n        /* write */ entry.setLastModified(System.currentTimeMillis());\n        entries.add(entry);\n    }\n\n    public ArArchiveEntry getEntry(int index) {\n        return entries.get(index);\n    }\n}\n",
        "ArchiveProcessor.java": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\nimport java.util.ArrayList;\n\npublic class ArchiveProcessor {\n    private ArchiveEntryManager manager = new ArchiveEntryManager();\n\n    public void processEntries() {\n        manager.addEntry(\"example.txt\", 100);\n        manager.addEntry(\"another_example.txt\", 200);\n    }\n\n    public long getLastModified(int index) {\n        ArArchiveEntry entry = manager.getEntry(index);\n        /* read */ return entry.getLastModified();\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        ArchiveProcessor processor = new ArchiveProcessor();\n        processor.processEntries();\n        long lastModified = processor.getLastModified(0);\n        System.out.println(\"Last modified of first entry: \" + lastModified);\n\n        // Additional unrelated complexity\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Entry number: \" + i);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
        "write_method": "setLastModified",
        "read_class": "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
        "read_method": "getLastModified"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArArchiveEntry entry = new ArArchiveEntry(\"example.txt\", 100);\n        /* write */ entry.setLastModified(123456789L);\n        /* read */ long lastModified = entry.getLastModified();\n        System.out.println(lastModified);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\nimport org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArArchiveEntry entry = new ArArchiveEntry(\"example.txt\", 100);\n        \n        // Unrelated code to make the program more complex\n        ArrayList<String> fileNames = new ArrayList<>();\n        fileNames.add(\"example.txt\");\n        fileNames.add(\"another_example.txt\");\n        \n        for (String fileName : fileNames) {\n            ArArchiveEntry tempEntry = new ArArchiveEntry(fileName, 200);\n            tempEntry.setLastModified(System.currentTimeMillis());\n            System.out.println(\"File: \" + fileName + \", Last Modified: \" + tempEntry.getLastModified());\n        }\n        \n        /* write */ entry.setLastModified(123456789L);\n        \n        // More unrelated code\n        ArArchiveOutputStream archiveOutputStream = null; // Placeholder for additional complexity\n        int totalSize = 0;\n        for (String fileName : fileNames) {\n            ArArchiveEntry tempEntry = new ArArchiveEntry(fileName, 300);\n            totalSize += tempEntry.getSize();\n        }\n        System.out.println(\"Total size of entries: \" + totalSize);\n        \n        /* read */ long lastModified = entry.getLastModified();\n        System.out.println(\"Original entry last modified: \" + lastModified);\n        \n        // Further complexity with a loop and conditional statements\n        for (int i = 0; i < fileNames.size(); i++) {\n            if (fileNames.get(i).equals(\"example.txt\")) {\n                System.out.println(\"Processing file: \" + fileNames.get(i));\n            }\n        }\n    }\n}"
}