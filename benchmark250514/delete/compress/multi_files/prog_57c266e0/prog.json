{
    "files": {
        "BZip2Compressor.java": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n\npublic class BZip2Compressor {\n    private BZip2CompressorInputStream bzip2Stream;\n\n    public BZip2Compressor(BZip2CompressorInputStream stream) {\n        this.bzip2Stream = stream;\n    }\n\n    public void setBlockSize(int size) {\n        /* write */ bzip2Stream.setBlockSize(size);\n    }\n\n    public int getBlockSize() {\n        return bzip2Stream.getBlockSize();\n    }\n}",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> scores;\n\n    public Student(String name) {\n        this.name = name;\n        this.scores = new ArrayList<>();\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public ArrayList<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public ArrayList<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}",
        "Main.java": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the BZip2CompressorInputStream object with a dummy InputStream\n            BZip2CompressorInputStream stream = new BZip2CompressorInputStream(new java.io.ByteArrayInputStream(new byte[0]));\n            BZip2Compressor compressor = new BZip2Compressor(stream);\n\n            // Create students and courses\n            Student student1 = new Student(\"Alice\");\n            Student student2 = new Student(\"Bob\");\n\n            student1.addScore(85);\n            student2.addScore(90);\n\n            Course course = new Course(\"Mathematics\");\n            course.addStudent(student1);\n            course.addStudent(student2);\n\n            // Set the block size using the compressor\n            compressor.setBlockSize(9);\n\n            // Output student scores\n            for (Student student : course.getStudents()) {\n                System.out.println(\"Student: \" + student.getName());\n                for (Integer score : student.getScores()) {\n                    System.out.println(\"Score: \" + score);\n                }\n            }\n\n            // Read the block size using the compressor\n            /* read */ int blockSize = compressor.getBlockSize();\n            System.out.println(\"Block Size: \" + blockSize);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
        "write_method": "setBlockSize",
        "read_class": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
        "read_method": "getBlockSize"
    },
    "java_code_simple": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the BZip2CompressorInputStream object with a dummy InputStream\n            BZip2CompressorInputStream bzip2Stream = new BZip2CompressorInputStream(new java.io.ByteArrayInputStream(new byte[0]));\n\n            // Set the block size using the write method\n            /* write */ bzip2Stream.setBlockSize(9);\n\n            // Read the block size using the read method\n            /* read */ int blockSize = bzip2Stream.getBlockSize();\n\n            // Output the block size\n            System.out.println(\"Block Size: \" + blockSize);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the BZip2CompressorInputStream object with a dummy InputStream\n            BZip2CompressorInputStream bzip2Stream = new BZip2CompressorInputStream(new java.io.ByteArrayInputStream(new byte[0]));\n\n            // Unrelated complex code\n            ArrayList<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * 2);\n            }\n\n            HashMap<String, Integer> map = new HashMap<>();\n            map.put(\"A\", 1);\n            map.put(\"B\", 2);\n            map.put(\"C\", 3);\n\n            for (String key : map.keySet()) {\n                System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n            }\n\n            // Set the block size using the write method\n            /* write */ bzip2Stream.setBlockSize(9);\n\n            // More unrelated complex code\n            int sum = 0;\n            for (Integer num : numbers) {\n                sum += num;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // Read the block size using the read method\n            /* read */ int blockSize = bzip2Stream.getBlockSize();\n\n            // Output the block size\n            System.out.println(\"Block Size: \" + blockSize);\n\n            // Further unrelated complex code\n            ArrayList<String> words = new ArrayList<>();\n            words.add(\"Hello\");\n            words.add(\"World\");\n            words.add(\"Java\");\n\n            for (String word : words) {\n                System.out.println(\"Word: \" + word);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
}