{
    "files": {
        "ZipEntryManager.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.ArrayList;\n\npublic class ZipEntryManager {\n    private ArrayList<ZipArchiveEntry> zipEntries = new ArrayList<>();\n\n    public void addEntry(ZipArchiveEntry entry) {\n        zipEntries.add(entry);\n    }\n\n    public ZipArchiveEntry getEntry(int index) {\n        return zipEntries.get(index);\n    }\n\n    public ArrayList<ZipArchiveEntry> getAllEntries() {\n        return zipEntries;\n    }\n}\n",
        "ZipEntryUtility.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class ZipEntryUtility {\n    public static void setEntryCrc(ZipArchiveEntry entry, long crc) {\n        /* write */ entry.setCrc(crc);\n    }\n\n    public static long getEntryCrc(ZipArchiveEntry entry) {\n        return entry.getCrc();\n    }\n}\n",
        "Main.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipEntryManager manager = new ZipEntryManager();\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        ZipArchiveEntry zipEntry2 = new ZipArchiveEntry(\"example2.txt\");\n\n        ZipEntryUtility.setEntryCrc(zipEntry, 123456789L);\n        ZipEntryUtility.setEntryCrc(zipEntry2, 987654321L);\n\n        manager.addEntry(zipEntry);\n        manager.addEntry(zipEntry2);\n\n        ZipArchiveEntry firstEntry = manager.getEntry(0);\n        /* read */ long crcValue = ZipEntryUtility.getEntryCrc(firstEntry);\n        System.out.println(\"CRC of the first entry: \" + crcValue);\n\n        long totalCrc = 0;\n        for (ZipArchiveEntry entry : manager.getAllEntries()) {\n            totalCrc += ZipEntryUtility.getEntryCrc(entry);\n        }\n        System.out.println(\"Total CRC of all entries: \" + totalCrc);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setCrc",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getCrc"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ zipEntry.setCrc(123456789L);\n        /* read */ long crcValue = zipEntry.getCrc();\n        System.out.println(crcValue);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        ZipArchiveEntry zipEntry2 = new ZipArchiveEntry(\"example2.txt\");\n        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(System.out);\n\n        /* write */ zipEntry.setCrc(123456789L);\n        zipEntry2.setCrc(987654321L);\n\n        ArrayList<ZipArchiveEntry> zipEntries = new ArrayList<>();\n        zipEntries.add(zipEntry);\n        zipEntries.add(zipEntry2);\n\n        for (ZipArchiveEntry entry : zipEntries) {\n            try {\n                zipOutputStream.putArchiveEntry(entry);\n                zipOutputStream.closeArchiveEntry();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        long totalCrc = 0;\n        for (ZipArchiveEntry entry : zipEntries) {\n            totalCrc += entry.getCrc();\n        }\n\n        /* read */ long crcValue = zipEntry.getCrc();\n        System.out.println(\"CRC of the first entry: \" + crcValue);\n        System.out.println(\"Total CRC of all entries: \" + totalCrc);\n\n        ArrayList<Long> crcValues = new ArrayList<>();\n        for (ZipArchiveEntry entry : zipEntries) {\n            crcValues.add(entry.getCrc());\n        }\n\n        for (Long crc : crcValues) {\n            System.out.println(\"CRC Value: \" + crc);\n        }\n    }\n}"
}