{
    "files": {
        "BZip2StreamHandler.java": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n\npublic class BZip2StreamHandler {\n    private BZip2CompressorInputStream bzip2Stream;\n\n    public BZip2StreamHandler(BZip2CompressorInputStream bzip2Stream) {\n        this.bzip2Stream = bzip2Stream;\n    }\n\n    public void setBlockSize(int size) {\n        /* write */ bzip2Stream.setBlockSize(size);\n    }\n\n    public int getBlockSize() {\n        /* read */ return bzip2Stream.getBlockSize();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores;\n\n    public Student(String name) {\n        this.name = name;\n        this.scores = new ArrayList<>();\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public double getAverageScore() {\n        int totalScore = 0;\n        int count = 0;\n        for (Student student : students) {\n            for (int score : student.getScores()) {\n                totalScore += score;\n                count++;\n            }\n        }\n        return count == 0 ? 0 : (double) totalScore / count;\n    }\n}\n",
        "Main.java": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the BZip2CompressorInputStream with a dummy InputStream\n            BZip2CompressorInputStream bzip2Stream = new BZip2CompressorInputStream(System.in);\n\n            // Handle BZip2 Stream\n            BZip2StreamHandler streamHandler = new BZip2StreamHandler(bzip2Stream);\n            streamHandler.setBlockSize(900000);\n\n            // Create a course and add students\n            Course course = new Course(\"Mathematics\");\n            Student student1 = new Student(\"Alice\");\n            student1.addScore(85);\n            student1.addScore(90);\n            course.addStudent(student1);\n\n            Student student2 = new Student(\"Bob\");\n            student2.addScore(78);\n            student2.addScore(88);\n            course.addStudent(student2);\n\n            // Calculate and print the average score of the course\n            double averageScore = course.getAverageScore();\n            System.out.println(\"Average Score: \" + averageScore);\n\n            // Read and print block size\n            int blockSize = streamHandler.getBlockSize();\n            System.out.println(\"Block size: \" + blockSize);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
        "write_method": "setBlockSize",
        "read_class": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
        "read_method": "getBlockSize"
    },
    "java_code_simple": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the BZip2CompressorInputStream with a dummy InputStream\n            BZip2CompressorInputStream bzip2Stream = new BZip2CompressorInputStream(System.in);\n\n            // Set block size using the write method\n            /* write */ bzip2Stream.setBlockSize(900000);\n\n            // Read the block size using the read method\n            /* read */ int blockSize = bzip2Stream.getBlockSize();\n\n            // Print the block size\n            System.out.println(blockSize);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\nimport java.util.HashMap;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the BZip2CompressorInputStream with a dummy InputStream\n            BZip2CompressorInputStream bzip2Stream = new BZip2CompressorInputStream(System.in);\n\n            // Initialize additional data structures\n            HashMap<String, Integer> map = new HashMap<>();\n            ArrayList<Integer> list = new ArrayList<>();\n\n            // Set block size using the write method\n            /* write */ bzip2Stream.setBlockSize(900000);\n\n            // Populate the map with some data\n            map.put(\"one\", 1);\n            map.put(\"two\", 2);\n            map.put(\"three\", 3);\n\n            // Populate the list with some data\n            for (int i = 0; i < 5; i++) {\n                list.add(i * 10);\n            }\n\n            // Perform some operations on the map\n            int sum = 0;\n            for (String key : map.keySet()) {\n                sum += map.get(key);\n            }\n            System.out.println(\"Sum of map values: \" + sum);\n\n            // Perform some operations on the list\n            int product = 1;\n            for (int num : list) {\n                product *= num + 1; // Avoid multiplying by zero\n            }\n            System.out.println(\"Product of list values: \" + product);\n\n            // Read the block size using the read method\n            /* read */ int blockSize = bzip2Stream.getBlockSize();\n\n            // Print the block size\n            System.out.println(\"Block size: \" + blockSize);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
}