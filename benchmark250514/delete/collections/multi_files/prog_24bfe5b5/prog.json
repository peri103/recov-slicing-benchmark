{
    "files": {
        "Course.java": "import org.apache.commons.collections4.map.PredicatedMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Course {\n    private PredicatedMap<Object, Object> studentGrades;\n\n    public Course() {\n        Predicate<Object> keyPredicate = TruePredicate.truePredicate();\n        Predicate<Object> valuePredicate = TruePredicate.truePredicate();\n        studentGrades = PredicatedMap.predicatedMap(new HashMap<>(), keyPredicate, valuePredicate);\n    }\n\n    public void addStudentGrade(String studentName, String grade) {\n        /* write */ studentGrades.put(studentName, grade);\n    }\n\n    public Object getStudentGrade(String studentName) {\n        return studentGrades.get(studentName);\n    }\n\n    public Map<Object, Object> getAllGrades() {\n        return studentGrades;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"John Doe\");\n        Course course = new Course();\n\n        course.addStudentGrade(student.getName(), \"A\");\n        \n        // Additional logic to simulate complex operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Processing student data...\");\n        }\n        \n        /* read */ Object grade = course.getStudentGrade(student.getName());\n        System.out.println(\"Grade for \" + student.getName() + \": \" + grade);\n\n        // Additional logic after reading\n        for (Map.Entry<Object, Object> entry : course.getAllGrades().entrySet()) {\n            System.out.println(\"Course Entry: Student = \" + entry.getKey() + \", Grade = \" + entry.getValue());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.collections4.map.PredicatedMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.PredicatedMap",
        "read_method": "get"
    },
    "java_code_simple": "import org.apache.commons.collections4.map.PredicatedMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\n\npublic class Main {\n    public static void main(String[] args) {\n        Predicate<Object> keyPredicate = TruePredicate.truePredicate();\n        Predicate<Object> valuePredicate = TruePredicate.truePredicate();\n        \n        PredicatedMap<Object, Object> map = PredicatedMap.predicatedMap(new java.util.HashMap<>(), keyPredicate, valuePredicate);\n        \n        /* write */ map.put(\"key\", \"value\");\n        /* read */ Object value = map.get(\"key\");\n        \n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.collections4.map.PredicatedMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.map.TransformedMap;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original PredicatedMap setup\n        Predicate<Object> keyPredicate = TruePredicate.truePredicate();\n        Predicate<Object> valuePredicate = TruePredicate.truePredicate();\n        PredicatedMap<Object, Object> map = PredicatedMap.predicatedMap(new HashMap<>(), keyPredicate, valuePredicate);\n\n        // Additional PredicatedMap setup\n        Predicate<Object> keyPredicate2 = TruePredicate.truePredicate();\n        Predicate<Object> valuePredicate2 = TruePredicate.truePredicate();\n        PredicatedMap<Object, Object> map2 = PredicatedMap.predicatedMap(new HashMap<>(), keyPredicate2, valuePredicate2);\n        \n        // Additional TransformedMap setup\n        Map<String, Integer> baseMap = new HashMap<>();\n        Map<String, Integer> transformedMap = TransformedMap.transformingMap(baseMap, String::toUpperCase, i -> i + 1);\n\n        // Operations on transformedMap\n        transformedMap.put(\"a\", 1);\n        transformedMap.put(\"b\", 2);\n        Set<String> keys = transformedMap.keySet();\n        for (String key : keys) {\n            System.out.println(\"Key: \" + key + \", Value: \" + transformedMap.get(key));\n        }\n\n        /* write */ map.put(\"key\", \"value\");\n\n        // Perform operations on map2\n        map2.put(\"key2\", \"value2\");\n        map2.put(\"key3\", \"value3\");\n        System.out.println(\"Map2 contains key2: \" + map2.containsKey(\"key2\"));\n\n        // Additional logic\n        for (Map.Entry<Object, Object> entry : map2.entrySet()) {\n            System.out.println(\"Map2 Entry: Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n        }\n\n        /* read */ Object value = map.get(\"key\");\n        System.out.println(value);\n\n        // Additional logic\n        map2.remove(\"key2\");\n        System.out.println(\"Map2 contains key2 after removal: \" + map2.containsKey(\"key2\"));\n        \n        // Final operations\n        for (Map.Entry<Object, Object> entry : map.entrySet()) {\n            System.out.println(\"Map Entry: Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n        }\n    }\n}"
}