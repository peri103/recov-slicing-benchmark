{
    "files": {
        "BagOperations.java": "import org.apache.commons.collections4.bag.PredicatedBag;\nimport org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.Predicate;\n\npublic class BagOperations {\n    private PredicatedBag<Object> predicatedBag;\n\n    public BagOperations() {\n        // Define a predicate that allows all elements\n        Predicate<Object> predicate = obj -> true;\n        // Create a base bag and wrap it with the PredicatedBag\n        Bag<Object> baseBag = new HashBag<>();\n        predicatedBag = new PredicatedBag<>(baseBag, predicate);\n    }\n\n    public void addElement(Object element) {\n        /* write */ predicatedBag.add(element);\n    }\n\n    public PredicatedBag<Object> getPredicatedBag() {\n        return predicatedBag;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<String> courses;\n\n    public Student(String name) {\n        this.name = name;\n        this.courses = new ArrayList<>();\n    }\n\n    public void enrollCourse(String course) {\n        courses.add(course);\n    }\n\n    public List<String> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize BagOperations and add an element\n        BagOperations bagOps = new BagOperations();\n        bagOps.addElement(\"example\");\n\n        // Initialize a student and enroll in courses\n        Student student = new Student(\"John Doe\");\n        student.enrollCourse(\"Math\");\n        student.enrollCourse(\"Science\");\n\n        // Display student info\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Enrolled Courses: \" + student.getCourses());\n\n        // Perform some unrelated operations\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"Numbers: \" + Arrays.toString(numbers));\n\n        // Finally read the count from the PredicatedBag\n        /* read */ int count = bagOps.getPredicatedBag().getCount(\"example\");\n        System.out.println(\"Count of 'example': \" + count);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.collections4.bag.PredicatedBag",
        "write_method": "add",
        "read_class": "org.apache.commons.collections4.bag.PredicatedBag",
        "read_method": "getCount"
    },
    "java_code_simple": "import org.apache.commons.collections4.bag.PredicatedBag;\nimport org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.Predicate;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a predicate that allows all elements\n        Predicate<Object> predicate = obj -> true;\n\n        // Create a base bag\n        Bag<Object> baseBag = new HashBag<>();\n\n        // Wrap the base bag with the PredicatedBag\n        PredicatedBag<Object> predicatedBag = new PredicatedBag<>(baseBag, predicate);\n\n        /* write */ predicatedBag.add(\"example\");\n        /* read */ int count = predicatedBag.getCount(\"example\");\n\n        System.out.println(count);\n    }\n}",
    "java_code_complex": "import org.apache.commons.collections4.bag.PredicatedBag;\nimport org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.bag.TreeBag;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a predicate that allows all elements\n        Predicate<Object> predicate = obj -> true;\n\n        // Create a base bag\n        Bag<Object> baseBag = new HashBag<>();\n\n        // Wrap the base bag with the PredicatedBag\n        PredicatedBag<Object> predicatedBag = new PredicatedBag<>(baseBag, predicate);\n\n        /* write */ predicatedBag.add(\"example\");\n\n        // Create another bag for demonstration\n        Bag<String> treeBag = new TreeBag<>();\n        treeBag.add(\"apple\");\n        treeBag.add(\"banana\");\n        treeBag.add(\"orange\");\n\n        // Add multiple elements to the base bag\n        baseBag.addAll(Arrays.asList(\"one\", \"two\", \"three\"));\n\n        // Manipulate the treeBag\n        for (String fruit : treeBag) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n\n        // Add elements to the treeBag\n        treeBag.add(\"grape\");\n        treeBag.add(\"kiwi\");\n\n        // Check counts in treeBag\n        for (String fruit : Arrays.asList(\"apple\", \"banana\", \"grape\")) {\n            System.out.println(fruit + \" count: \" + treeBag.getCount(fruit));\n        }\n\n        // Perform some operations on baseBag\n        System.out.println(\"BaseBag size before clear: \" + baseBag.size());\n        baseBag.clear();\n        System.out.println(\"BaseBag size after clear: \" + baseBag.size());\n\n        // Finally read the count from the PredicatedBag\n        /* read */ int count = predicatedBag.getCount(\"example\");\n        System.out.println(count);\n    }\n}"
}