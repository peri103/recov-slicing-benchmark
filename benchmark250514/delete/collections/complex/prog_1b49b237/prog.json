{
    "java_code": "import org.apache.commons.collections4.multimap.PredicatedMultiValuedMap;\nimport org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the map with TruePredicate for both keys and values\n        MultiValuedMap<String, String> baseMap = new MultiValueMap<>();\n        Predicate<String> keyPredicate = TruePredicate.truePredicate();\n        Predicate<String> valuePredicate = TruePredicate.truePredicate();\n        \n        // Create a PredicatedMultiValuedMap\n        PredicatedMultiValuedMap<String, String> map = new PredicatedMultiValuedMap<>(baseMap, keyPredicate, valuePredicate);\n        \n        // Use the write method\n        /* write */ map.put(\"key\", \"value\");\n        \n        // Additional unrelated operations\n        Map<String, Integer> simpleMap = new HashMap<>();\n        simpleMap.put(\"A\", 1);\n        simpleMap.put(\"B\", 2);\n        \n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : simpleMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of values in simpleMap: \" + sum);\n        \n        // Create another PredicatedMultiValuedMap with different predicates\n        Predicate<String> customKeyPredicate = new Predicate<String>() {\n            @Override\n            public boolean evaluate(String object) {\n                return object.length() > 1;\n            }\n        };\n        \n        Predicate<String> customValuePredicate = new Predicate<String>() {\n            @Override\n            public boolean evaluate(String object) {\n                return object.startsWith(\"v\");\n            }\n        };\n        \n        MultiValuedMap<String, String> customBaseMap = new MultiValueMap<>();\n        PredicatedMultiValuedMap<String, String> customMap = new PredicatedMultiValuedMap<>(customBaseMap, customKeyPredicate, customValuePredicate);\n        customMap.put(\"key1\", \"value1\");\n        customMap.put(\"key2\", \"value2\");\n        \n        System.out.println(\"Values in customMap: \" + customMap.get(\"key1\"));\n        \n        // More complex operations\n        for (String key : customMap.keySet()) {\n            for (String value : customMap.get(key)) {\n                System.out.println(\"Key: \" + key + \", Value: \" + value);\n            }\n        }\n        \n        // Use the read method\n        /* read */ Object value = map.get(\"key\");\n        \n        // Print the value\n        System.out.println(value);\n    }\n}",
    "java_code_simple": "import org.apache.commons.collections4.multimap.PredicatedMultiValuedMap;\nimport org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the map with TruePredicate for both keys and values\n        MultiValuedMap<String, String> baseMap = new MultiValueMap<>();\n        Predicate<String> keyPredicate = TruePredicate.truePredicate();\n        Predicate<String> valuePredicate = TruePredicate.truePredicate();\n        \n        // Create a PredicatedMultiValuedMap\n        PredicatedMultiValuedMap<String, String> map = new PredicatedMultiValuedMap<>(baseMap, keyPredicate, valuePredicate);\n        \n        // Use the write method\n        /* write */ map.put(\"key\", \"value\");\n        \n        // Use the read method\n        /* read */ Object value = map.get(\"key\");\n        \n        // Print the value\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.collections4.multimap.PredicatedMultiValuedMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.multimap.PredicatedMultiValuedMap",
        "read_method": "get"
    }
}