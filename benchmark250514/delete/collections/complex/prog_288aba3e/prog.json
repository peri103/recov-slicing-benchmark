{
    "java_code": "import org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap;\nimport org.apache.commons.collections4.multimap.ArrayListValuedHashMap;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a modifiable MultiValuedMap\n        MultiValuedMap<String, String> modifiableMap = new ArrayListValuedHashMap<>();\n\n        // Wrap the modifiable map in an UnmodifiableMultiValuedMap\n        UnmodifiableMultiValuedMap<String, String> map = new UnmodifiableMultiValuedMap<>(modifiableMap);\n\n        // Directly modify the original map since UnmodifiableMultiValuedMap does not allow modification\n        modifiableMap.put(\"key\", \"value\"); // /* write */\n\n        // Additional unrelated code to increase complexity\n        Map<String, Integer> simpleMap = new HashMap<>();\n        simpleMap.put(\"alpha\", 1);\n        simpleMap.put(\"beta\", 2);\n        simpleMap.put(\"gamma\", 3);\n\n        Set<String> keys = simpleMap.keySet();\n        for (String key : keys) {\n            System.out.println(\"Key: \" + key + \", Value: \" + simpleMap.get(key));\n        }\n\n        // More complex logic involving the MultiValuedMap\n        modifiableMap.put(\"key\", \"anotherValue\");\n        modifiableMap.put(\"otherKey\", \"differentValue\");\n\n        // Operations that do not affect the original write-read pair\n        Collection<String> otherValues = map.get(\"otherKey\");\n        for (String value : otherValues) {\n            System.out.println(\"Other Key Value: \" + value);\n        }\n\n        // Read from the UnmodifiableMultiValuedMap\n        Collection<String> values = map.get(\"key\"); // /* read */\n\n        // Print the read values\n        for (String value : values) {\n            System.out.println(\"Key Value: \" + value);\n        }\n\n        // Additional unrelated code to increase complexity\n        int sum = 0;\n        for (Integer val : simpleMap.values()) {\n            sum += val;\n        }\n        System.out.println(\"Sum of simpleMap values: \" + sum);\n    }\n}",
    "java_code_simple": "import org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap;\nimport org.apache.commons.collections4.multimap.ArrayListValuedHashMap;\nimport java.util.Collection;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a modifiable MultiValuedMap\n        MultiValuedMap<String, String> modifiableMap = new ArrayListValuedHashMap<>();\n        \n        // Wrap the modifiable map in an UnmodifiableMultiValuedMap\n        UnmodifiableMultiValuedMap<String, String> map = new UnmodifiableMultiValuedMap<>(modifiableMap);\n        \n        // Since UnmodifiableMultiValuedMap does not allow modification, we directly modify the original map\n        modifiableMap.put(\"key\", \"value\"); // /* write */\n        \n        // Read from the UnmodifiableMultiValuedMap\n        Collection<String> values = map.get(\"key\"); // /* read */\n        \n        // Print the read values\n        for (String value : values) {\n            System.out.println(value);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap",
        "read_method": "get"
    }
}