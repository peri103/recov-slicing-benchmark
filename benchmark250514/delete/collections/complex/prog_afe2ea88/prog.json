{
    "java_code": "import org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a MultiValuedMap instance\n        MultiValuedMap<String, Integer> multiValuedMap = new MultiValueMap<>();\n        \n        // Wrap it with UnmodifiableMultiValuedMap\n        UnmodifiableMultiValuedMap<String, Integer> unmodifiableMap = new UnmodifiableMultiValuedMap<>(multiValuedMap);\n\n        // Since UnmodifiableMultiValuedMap does not allow modification, we need to directly use the original map to put values\n        multiValuedMap.put(\"key1\", 100);  // /* write */\n\n        // Create an additional map for more complexity\n        Map<String, List<Integer>> complexMap = new HashMap<>();\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        complexMap.put(\"numbers\", list);\n\n        // Perform some operations on the complex map\n        for (Map.Entry<String, List<Integer>> entry : complexMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Values: \" + entry.getValue());\n        }\n\n        // Read the value from the unmodifiable map\n        Integer value = unmodifiableMap.get(\"key1\").iterator().next();  // /* read */\n\n        System.out.println(value);\n\n        // Perform some additional operations on the list\n        for (Integer num : list) {\n            System.out.println(\"Number: \" + num);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a MultiValuedMap instance\n        MultiValuedMap<String, Integer> multiValuedMap = new MultiValueMap<>();\n        \n        // Wrap it with UnmodifiableMultiValuedMap\n        UnmodifiableMultiValuedMap<String, Integer> unmodifiableMap = new UnmodifiableMultiValuedMap<>(multiValuedMap);\n\n        // Since UnmodifiableMultiValuedMap does not allow modification, we need to directly use the original map to put values\n        multiValuedMap.put(\"key1\", 100);  // /* write */\n\n        // Read the value from the unmodifiable map\n        Integer value = unmodifiableMap.get(\"key1\").iterator().next();  // /* read */\n\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap",
        "read_method": "get"
    }
}