{
    "files": {
        "CSVConfig.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfig {\n    private CSVFormat format;\n\n    public CSVConfig() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void enableTrim() {\n        /* write */ format = format.withTrim();\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVRecordHandler.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordHandler {\n    private CSVRecord record;\n\n    public CSVRecordHandler(CSVFormat format) {\n        this.record = new CSVRecord(format, new String[]{\"value\"}, null, 0, 0);\n    }\n\n    public boolean isFieldMapped(String fieldName) {\n        /* read */ return record.isMapped(fieldName);\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Course> courses;\n\n    public Student(String name) {\n        this.name = name;\n        this.courses = new ArrayList<>();\n    }\n\n    public void enrollCourse(Course course) {\n        courses.add(course);\n    }\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "public class Course {\n    private String courseName;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVConfig and enable trim\n        CSVConfig csvConfig = new CSVConfig();\n        csvConfig.enableTrim();\n\n        // Create CSVRecordHandler with the configured format\n        CSVRecordHandler recordHandler = new CSVRecordHandler(csvConfig.getFormat());\n\n        // Create a student and enroll courses\n        Student student = new Student(\"Alice\");\n        Course math = new Course(\"Mathematics\");\n        Course science = new Course(\"Science\");\n        student.enrollCourse(math);\n        student.enrollCourse(science);\n\n        // Display student's courses\n        for (Course course : student.getCourses()) {\n            System.out.println(student.getName() + \" is enrolled in \" + course.getCourseName());\n        }\n\n        // Check if a field is mapped in CSVRecord\n        boolean isMapped = recordHandler.isFieldMapped(\"value\");\n        System.out.println(\"Is 'value' field mapped: \" + isMapped);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrim",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format instance\n        /* write */ format = format.withTrim();\n\n        // Simulate reading a record using CSVRecord (normally obtained by parsing CSV data)\n        CSVRecord record = new CSVRecord(format, new String[]{\"value\"}, null, 0, 0);\n\n        // Use the read method on CSVRecord\n        /* read */ boolean isMapped = record.isMapped(\"value\");\n\n        // Output the result\n        System.out.println(isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Use the write method to modify the format instance\n        /* write */ format = format.withTrim();\n\n        // Simulate reading a record using CSVRecord (normally obtained by parsing CSV data)\n        CSVRecord record = new CSVRecord(format, new String[]{\"value\"}, null, 0, 0);\n\n        // Initialize an ArrayList and a HashMap for unrelated operations\n        ArrayList<String> list = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n\n        // Populate the ArrayList\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n\n        // Populate the HashMap\n        map.put(\"apple\", 1);\n        map.put(\"banana\", 2);\n        map.put(\"cherry\", 3);\n\n        // Perform some operations on the ArrayList\n        for (String item : list) {\n            System.out.println(\"Item: \" + item);\n        }\n\n        // Perform some operations on the HashMap\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        // Further unrelated operations\n        int sum = 0;\n        for (int value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n\n        // Use the read method on CSVRecord\n        /* read */ boolean isMapped = record.isMapped(\"value\");\n\n        // Output the result\n        System.out.println(isMapped);\n    }\n}"
}