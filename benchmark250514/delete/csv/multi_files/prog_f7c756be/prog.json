{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void allowDuplicateHeaders() {\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVRecordHandler.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordHandler {\n    private CSVRecord record;\n\n    public CSVRecordHandler(CSVRecord record) {\n        this.record = record;\n    }\n\n    public boolean isHeaderMapped(String header) {\n        /* read */ return record.isMapped(header);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.enrolledStudents = new ArrayList<>();\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSV configuration\n        CSVConfiguration csvConfig = new CSVConfiguration();\n        csvConfig.allowDuplicateHeaders();\n\n        // Create a mock CSVRecord for demonstration\n        CSVRecord mockRecord = new CSVRecord(null, null, null, csvConfig.getFormat());\n        CSVRecordHandler recordHandler = new CSVRecordHandler(mockRecord);\n\n        // Unrelated code to make the program more complex\n        Course course = new Course(\"Advanced Programming\");\n        Student alice = new Student(\"Alice\", 1);\n        Student bob = new Student(\"Bob\", 2);\n        course.enrollStudent(alice);\n        course.enrollStudent(bob);\n\n        Map<String, Integer> headerMap = new HashMap<>();\n        headerMap.put(\"header1\", 1);\n        headerMap.put(\"header2\", 2);\n        headerMap.put(\"header3\", 3);\n\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : headerMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of header values: \" + sum);\n\n        // Use the read method\n        boolean isMapped = recordHandler.isHeaderMapped(\"someHeader\");\n        System.out.println(\"Is 'someHeader' mapped: \" + isMapped);\n\n        // Additional unrelated code\n        System.out.println(\"Enrolled students in \" + course.courseName + \":\");\n        for (Student student : course.getEnrolledStudents()) {\n            System.out.println(\"Student Name: \" + student.getName() + \", ID: \" + student.getId());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Create a mock CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"someHeader\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Create a mock CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Unrelated code to make the program more complex\n        Map<String, Integer> headerMap = new HashMap<>();\n        headerMap.put(\"header1\", 1);\n        headerMap.put(\"header2\", 2);\n        headerMap.put(\"header3\", 3);\n\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : headerMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of header values: \" + sum);\n\n        // More unrelated code\n        int maxValue = Integer.MIN_VALUE;\n        for (int value : headerMap.values()) {\n            if (value > maxValue) {\n                maxValue = value;\n            }\n        }\n        System.out.println(\"Maximum header value: \" + maxValue);\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"someHeader\");\n        \n        // Print the result\n        System.out.println(isMapped);\n\n        // Additional unrelated code\n        headerMap.put(\"header4\", 4);\n        int averageValue = sum / headerMap.size();\n        System.out.println(\"Average header value: \" + averageValue);\n    }\n}"
}