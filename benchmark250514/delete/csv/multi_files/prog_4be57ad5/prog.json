{
    "files": {
        "CSVFormatWrapper.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVFormatWrapper {\n    private CSVFormat format;\n\n    public CSVFormatWrapper() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ this.format = this.format.withIgnoreEmptyLines(true);\n    }\n\n    public CSVFormat getFormat() {\n        return this.format;\n    }\n}\n",
        "CSVRecordWrapper.java": "import org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.Arrays;\n\npublic class CSVRecordWrapper {\n    private CSVRecord record;\n\n    public CSVRecordWrapper(CSVFormatWrapper formatWrapper) {\n        String[] data = {\"value1\", \"value2\"};\n        try {\n            CSVParser parser = formatWrapper.getFormat().parse(Arrays.asList(data));\n            this.record = parser.iterator().next();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean isColumnSet(int index) {\n        /* read */ return this.record.isSet(index);\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Student {\n    private String name;\n    private Map<String, Integer> scores = new HashMap<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(String subject, int score) {\n        scores.put(subject, score);\n    }\n\n    public Map<String, Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Main.java": "import java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormatWrapper and configure it\n        CSVFormatWrapper formatWrapper = new CSVFormatWrapper();\n        formatWrapper.configureFormat();\n\n        // Create CSVRecordWrapper using the configured format\n        CSVRecordWrapper recordWrapper = new CSVRecordWrapper(formatWrapper);\n\n        // Check if the first column is set\n        boolean isSet = recordWrapper.isColumnSet(0);\n        System.out.println(\"Is column 0 set: \" + isSet);\n\n        // Demonstrate the use of Student class\n        Student student = new Student(\"John Doe\");\n        student.addScore(\"Math\", 95);\n        student.addScore(\"Science\", 89);\n\n        // Print student scores\n        Map<String, Integer> studentScores = student.getScores();\n        for (Map.Entry<String, Integer> entry : studentScores.entrySet()) {\n            System.out.println(\"Subject: \" + entry.getKey() + \", Score: \" + entry.getValue());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Write operation: configure the format to ignore empty lines\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Create a CSVRecord object for demonstration\n        String[] data = {\"value1\", \"value2\"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(Arrays.asList(data)).iterator().next();\n        \n        // Read operation: check if a certain column is set\n        /* read */ boolean isSet = record.isSet(0);\n        \n        // Output the result\n        System.out.println(\"Is column 0 set: \" + isSet);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Write operation: configure the format to ignore empty lines\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Create a CSVRecord object for demonstration\n        String[] data = {\"value1\", \"value2\"};\n        CSVParser parser = CSVFormat.DEFAULT.parse(Arrays.asList(data));\n        CSVRecord record = parser.iterator().next();\n\n        // Additional complex logic: using a HashMap\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"value1\", 1);\n        map.put(\"value2\", 2);\n\n        // Using another CSVFormat method for demonstration\n        CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(\"header1\", \"header2\");\n\n        // Process the map entries\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Additional loop logic using List\n        List<String> list = Arrays.asList(\"item1\", \"item2\", \"item3\");\n        for (String item : list) {\n            System.out.println(\"List item: \" + item);\n        }\n\n        // Read operation: check if a certain column is set\n        /* read */ boolean isSet = record.isSet(0);\n        \n        // Output the result\n        System.out.println(\"Is column 0 set: \" + isSet);\n    }\n}"
}