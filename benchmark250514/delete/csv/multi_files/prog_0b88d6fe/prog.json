{
    "files": {
        "CSVConfig.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfig {\n    private CSVFormat format;\n\n    public CSVConfig() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ format = format.withIgnoreSurroundingSpaces();\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVDataProcessor {\n    private List<CSVRecord> records;\n    \n    public void parseData(CSVConfig config, String csvData) {\n        try {\n            records = config.getFormat().parse(new StringReader(csvData)).getRecords();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<String> getNames() {\n        ArrayList<String> names = new ArrayList<>();\n        for (CSVRecord record : records) {\n            if (record.isSet(\"Name\")) {\n                names.add(record.get(\"Name\"));\n            }\n        }\n        return names;\n    }\n\n    public int getTotalAge() {\n        int totalAge = 0;\n        for (CSVRecord record : records) {\n            if (record.isSet(\"Age\")) {\n                totalAge += Integer.parseInt(record.get(\"Age\"));\n            }\n        }\n        return totalAge;\n    }\n\n    public CSVRecord getFirstRecord() {\n        return records.get(0);\n    }\n}\n",
        "Main.java": "import java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVConfig config = new CSVConfig();\n        config.configureFormat(); // This configures the format with surrounding spaces ignored\n\n        String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n        CSVDataProcessor processor = new CSVDataProcessor();\n        processor.parseData(config, csvData);\n\n        List<String> names = processor.getNames();\n        for (String name : names) {\n            System.out.println(\"Processing name: \" + name);\n        }\n\n        int totalAge = processor.getTotalAge();\n        System.out.println(\"Total age: \" + totalAge);\n\n        CSVRecord firstRecord = processor.getFirstRecord();\n        /* read */ boolean isSet = firstRecord.isSet(\"Name\");\n        System.out.println(\"Is 'Name' column set in the first record? \" + isSet);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVFormat object and configure it\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withIgnoreSurroundingSpaces();\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\";\n\n            // Parse the CSV data\n            List<CSVRecord> records = format.parse(new StringReader(csvData)).getRecords();\n\n            // Access a record and check if a column is set\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            System.out.println(\"Is 'Name' column set? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVFormat object and configure it\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withIgnoreSurroundingSpaces();\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n\n            // Parse the CSV data\n            List<CSVRecord> records = format.parse(new StringReader(csvData)).getRecords();\n\n            // Additional processing on CSV records\n            ArrayList<String> names = new ArrayList<>();\n            for (CSVRecord record : records) {\n                if (record.isSet(\"Name\")) {\n                    names.add(record.get(\"Name\"));\n                }\n            }\n\n            // Do some operations on the names list\n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n\n            // Access a record and check if a column is set\n            CSVRecord firstRecord = records.get(0);\n            // Some unrelated code to make the program more complex\n            int totalAge = 0;\n            for (CSVRecord record : records) {\n                if (record.isSet(\"Age\")) {\n                    totalAge += Integer.parseInt(record.get(\"Age\"));\n                }\n            }\n            System.out.println(\"Total age: \" + totalAge);\n\n            /* read */ boolean isSet = firstRecord.isSet(\"Name\");\n            System.out.println(\"Is 'Name' column set in the first record? \" + isSet);\n\n            // More complex operations\n            ArrayList<Integer> ages = new ArrayList<>();\n            for (CSVRecord record : records) {\n                if (record.isSet(\"Age\")) {\n                    ages.add(Integer.parseInt(record.get(\"Age\")));\n                }\n            }\n            for (int age : ages) {\n                System.out.println(\"Age: \" + age);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}