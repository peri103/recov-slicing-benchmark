{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        /* write */ this.format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVDataProcessor {\n    private List<CSVRecord> records = new ArrayList<>();\n\n    public void parseCSV(String csvData, CSVFormat format) {\n        try {\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            for (CSVRecord record : parser) {\n                records.add(record);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean isColumnSet(int recordIndex, int columnIndex) {\n        if (recordIndex < records.size()) {\n            /* read */ return records.get(recordIndex).isSet(columnIndex);\n        }\n        return false;\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create CSV configuration\n        CSVConfiguration csvConfig = new CSVConfiguration();\n\n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n        // Process CSV data\n        CSVDataProcessor dataProcessor = new CSVDataProcessor();\n        dataProcessor.parseCSV(csvData, csvConfig.getFormat());\n\n        // Check if a column is set\n        boolean isColumnSet = dataProcessor.isColumnSet(0, 1);\n        System.out.println(\"Is column set for first record: \" + isColumnSet);\n\n        // Create and process students\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"John\", 30));\n        students.add(new Student(\"Jane\", 25));\n\n        for (Student student : students) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat instance with allow missing column names\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n\n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n        try {\n            // Parse the CSV data using the CSVFormat instance\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            for (CSVRecord record : parser) {\n                // Check if a certain column index is set\n                /* read */ boolean isSet = record.isSet(1); // Check if the second column is set\n                System.out.println(\"Is column set: \" + isSet);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat instance with allow missing column names\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n\n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n        // Unrelated code: Create a list of integers\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i);\n        }\n\n        // Process the list of numbers\n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        try {\n            // Parse the CSV data using the CSVFormat instance\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = new ArrayList<>();\n            for (CSVRecord record : parser) {\n                records.add(record);\n            }\n\n            // Perform operations on the records\n            for (CSVRecord record : records) {\n                // Unrelated code: Print each record's content\n                System.out.println(\"Record: \" + record);\n            }\n\n            // Check if a certain column index is set for the first record\n            if (!records.isEmpty()) {\n                /* read */ boolean isSet = records.get(0).isSet(1); // Check if the second column is set\n                System.out.println(\"Is column set for first record: \" + isSet);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Unrelated code: Further process the list of numbers\n        int product = 1;\n        for (Integer number : numbers) {\n            product *= number + 1;\n        }\n        System.out.println(\"Product of numbers + 1: \" + product);\n    }\n}"
}