{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat csvFormat;\n\n    public CSVConfiguration() {\n        this.csvFormat = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ csvFormat = csvFormat.withIgnoreHeaderCase();\n    }\n\n    public CSVFormat getCsvFormat() {\n        return csvFormat;\n    }\n}\n",
        "CSVData.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class CSVData {\n    private CSVRecord record;\n\n    public CSVData(CSVFormat csvFormat) {\n        List<String> headers = Arrays.asList(\"Name\", \"Age\", \"Country\");\n        List<String> values = Arrays.asList(\"Alice\", \"30\", \"USA\");\n        this.record = new CSVRecord(null, values.toArray(new String[0]), headers.toArray(new String[0]), 0, 0);\n    }\n\n    public boolean checkMapping(String header) {\n        /* read */ return record.isMapped(header);\n    }\n\n    public void printRecord() {\n        List<String> headers = Arrays.asList(\"Name\", \"Age\", \"Country\");\n        for (String header : headers) {\n            System.out.println(\"Header: \" + header + \", Value: \" + record.get(header));\n        }\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public void printStudents() {\n        for (Student student : students) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // CSV Configuration and Data\n        CSVConfiguration csvConfig = new CSVConfiguration();\n        csvConfig.configureFormat();\n        CSVData csvData = new CSVData(csvConfig.getCsvFormat());\n        boolean isMapped = csvData.checkMapping(\"name\");\n        System.out.println(\"Is 'name' mapped: \" + isMapped);\n        csvData.printRecord();\n\n        // Student and Course example\n        Student student1 = new Student(\"Alice\", 20);\n        Student student2 = new Student(\"Bob\", 22);\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(student1);\n        course.addStudent(student2);\n        course.printStudents();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignore header case\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n        /* write */ csvFormat = csvFormat.withIgnoreHeaderCase();\n\n        // Simulate a CSVRecord\n        List<String> headers = Arrays.asList(\"Name\", \"Age\", \"Country\");\n        List<String> values = Arrays.asList(\"Alice\", \"30\", \"USA\");\n        CSVRecord record = new CSVRecord(null, values.toArray(new String[0]), headers.toArray(new String[0]), 0, 0);\n\n        // Check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"name\");\n        System.out.println(isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignore header case\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n        /* write */ csvFormat = csvFormat.withIgnoreHeaderCase();\n\n        // Simulate a CSVRecord\n        List<String> headers = Arrays.asList(\"Name\", \"Age\", \"Country\");\n        List<String> values = Arrays.asList(\"Alice\", \"30\", \"USA\");\n        CSVRecord record = new CSVRecord(null, values.toArray(new String[0]), headers.toArray(new String[0]), 0, 0);\n\n        // Additional code using Map for complexity\n        Map<String, Integer> ageMap = new HashMap<>();\n        ageMap.put(\"Alice\", 30);\n        ageMap.put(\"Bob\", 25);\n        ageMap.put(\"Charlie\", 35);\n\n        // Process and print age information\n        for (String name : ageMap.keySet()) {\n            System.out.println(name + \" is \" + ageMap.get(name) + \" years old.\");\n        }\n\n        // More complex operations\n        int sumOfAges = 0;\n        for (Integer age : ageMap.values()) {\n            sumOfAges += age;\n        }\n        System.out.println(\"Total sum of ages: \" + sumOfAges);\n\n        // Check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"name\");\n        System.out.println(\"Is 'name' mapped: \" + isMapped);\n\n        // Further operations on CSVRecord\n        for (String header : headers) {\n            System.out.println(\"Header: \" + header + \", Value: \" + record.get(header));\n        }\n    }\n}"
}