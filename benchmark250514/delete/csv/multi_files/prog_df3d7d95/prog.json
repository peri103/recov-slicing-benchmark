{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private StudentCourses courses = new StudentCourses();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void enrollCourse(String courseName) {\n        courses.addCourse(courseName);\n    }\n\n    public StudentCourses getCourses() {\n        return courses;\n    }\n}\n",
        "StudentCourses.java": "import java.util.ArrayList;\n\npublic class StudentCourses {\n    private ArrayList<String> courses = new ArrayList<>();\n\n    public void addCourse(String courseName) {\n        /* write */ courses.add(courseName);\n    }\n\n    public boolean isEnrolled(String courseName) {\n        return courses.contains(courseName);\n    }\n\n    public ArrayList<String> getCourses() {\n        return courses;\n    }\n}\n",
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVHandler {\n    private CSVFormat format;\n\n    public CSVHandler() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void enableAutoFlush() {\n        /* write */ format = format.withAutoFlush(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVHandler instance and enable auto-flush\n        CSVHandler csvHandler = new CSVHandler();\n        csvHandler.enableAutoFlush();\n\n        // Create a Student and enroll in a course\n        Student student = new Student(\"Bob\");\n        student.enrollCourse(\"Mathematics\");\n\n        // Check if the student is enrolled in a specific course\n        StudentCourses courses = student.getCourses();\n        boolean isEnrolled = courses.isEnrolled(\"Mathematics\");\n        System.out.println(\"Is enrolled in Mathematics: \" + isEnrolled);\n\n        // Simulate a CSVRecord (for demonstration purposes only)\n        CSVRecord record = new CSVRecord(null, new String[]{\"value1\", \"value2\"}, null, 0, 0);\n\n        // Use the read method\n        /* read */ boolean isConsistent = record.isConsistent();\n\n        // Output the result\n        System.out.println(\"Record consistency: \" + isConsistent);\n\n        // Additional operations with StudentCourses\n        ArrayList<String> enrolledCourses = courses.getCourses();\n        System.out.println(\"Enrolled courses: \" + enrolledCourses);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAutoFlush",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withAutoFlush(true);\n\n        // Simulate a CSVRecord (for demonstration purposes only)\n        CSVRecord record = new CSVRecord(null, new String[]{\"value1\", \"value2\"}, null, 0, 0);\n\n        // Use the read method\n        /* read */ boolean isConsistent = record.isConsistent();\n\n        // Output the result\n        System.out.println(isConsistent);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withAutoFlush(true);\n\n        // Simulate a CSVRecord (for demonstration purposes only)\n        CSVRecord record = new CSVRecord(null, new String[]{\"value1\", \"value2\"}, null, 0, 0);\n\n        // Create a HashMap and populate it with some data\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 10);\n        map.put(\"key2\", 20);\n        map.put(\"key3\", 30);\n\n        // Process data from HashMap\n        ArrayList<Integer> values = new ArrayList<>();\n        for (String key : map.keySet()) {\n            values.add(map.get(key));\n        }\n\n        // Perform some operations on the ArrayList\n        int sum = 0;\n        for (int value : values) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values: \" + sum);\n\n        // Simulate some unrelated operations\n        ArrayList<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        stringList.add(\"!\");\n\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n\n        // Use the read method\n        /* read */ boolean isConsistent = record.isConsistent();\n\n        // Output the result\n        System.out.println(\"Record consistency: \" + isConsistent);\n\n        // More unrelated operations\n        int maxValue = Integer.MIN_VALUE;\n        for (int value : values) {\n            if (value > maxValue) {\n                maxValue = value;\n            }\n        }\n        System.out.println(\"Maximum value: \" + maxValue);\n    }\n}"
}