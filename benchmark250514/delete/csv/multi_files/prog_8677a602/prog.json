{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat csvFormat;\n    private StringWriter writer;\n\n    public CSVHandler() {\n        this.csvFormat = CSVFormat.DEFAULT;\n        this.writer = new StringWriter();\n    }\n\n    public void addHeaderComment(String comment) {\n        /* write */ this.csvFormat = this.csvFormat.withHeaderComments(comment);\n    }\n\n    public void writeCSV() throws IOException {\n        CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n        csvPrinter.printRecord(\"Header1\", \"Header2\");\n        csvPrinter.printRecord(\"Value1\", \"Value2\");\n        csvPrinter.close();\n    }\n\n    public String getCSVContent() {\n        return writer.toString();\n    }\n}\n",
        "CSVReader.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVReader {\n    private CSVFormat csvFormat;\n\n    public CSVReader(CSVFormat csvFormat) {\n        this.csvFormat = csvFormat;\n    }\n\n    public String readComment(String csvContent) throws IOException {\n        Reader reader = new StringReader(csvContent);\n        CSVParser csvParser = new CSVParser(reader, csvFormat);\n        List<CSVRecord> records = csvParser.getRecords();\n        /* read */ String comment = records.get(0).getComment();\n        csvParser.close();\n        return comment;\n    }\n}\n",
        "Main.java": "import java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVHandler csvHandler = new CSVHandler();\n        csvHandler.addHeaderComment(\"This is a comment\");\n\n        try {\n            csvHandler.writeCSV();\n            String csvContent = csvHandler.getCSVContent();\n\n            CSVReader csvReader = new CSVReader(CSVFormat.DEFAULT);\n            String comment = csvReader.readComment(csvContent);\n            System.out.println(comment);\n\n            // Additional unrelated operations\n            Student student = new Student(\"John Doe\", 12345);\n            student.enrollInCourse(new Course(\"Math 101\", 3));\n            student.enrollInCourse(new Course(\"History 101\", 4));\n            student.printCourses();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private int studentId;\n    private List<Course> courses;\n\n    public Student(String name, int studentId) {\n        this.name = name;\n        this.studentId = studentId;\n        this.courses = new ArrayList<>();\n    }\n\n    public void enrollInCourse(Course course) {\n        courses.add(course);\n    }\n\n    public void printCourses() {\n        System.out.println(\"Courses for \" + name + \":\");\n        for (Course course : courses) {\n            System.out.println(course);\n        }\n    }\n}\n",
        "Course.java": "public class Course {\n    private String courseName;\n    private int credits;\n\n    public Course(String courseName, int credits) {\n        this.courseName = courseName;\n        this.credits = credits;\n    }\n\n    @Override\n    public String toString() {\n        return courseName + \" (\" + credits + \" credits)\";\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringWriter writer = new StringWriter();\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n        \n        try {\n            // Adding header comments\n            /* write */ csvFormat = csvFormat.withHeaderComments(\"This is a comment\");\n            \n            // Writing to CSV\n            CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n            csvPrinter.printRecord(\"Header1\", \"Header2\");\n            csvPrinter.printRecord(\"Value1\", \"Value2\");\n            csvPrinter.close();\n            \n            // Reading from CSV\n            Reader reader = new StringReader(writer.toString());\n            CSVParser csvParser = new CSVParser(reader, csvFormat);\n            List<CSVRecord> records = csvParser.getRecords();\n            \n            // Accessing the comment\n            /* read */ String comment = records.get(0).getComment();\n            System.out.println(comment);\n            \n            csvParser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringWriter writer = new StringWriter();\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n\n        try {\n            // Adding header comments\n            /* write */ csvFormat = csvFormat.withHeaderComments(\"This is a comment\");\n\n            // Writing to CSV\n            CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n            csvPrinter.printRecord(\"Header1\", \"Header2\");\n            csvPrinter.printRecord(\"Value1\", \"Value2\");\n            csvPrinter.close();\n\n            // Unrelated complex operations\n            ArrayList<Integer> numberList = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numberList.add(i * 2);\n            }\n\n            int sum = 0;\n            for (int num : numberList) {\n                sum += num;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // More complex operations with unrelated CSV parsing\n            StringWriter anotherWriter = new StringWriter();\n            CSVFormat anotherCSVFormat = CSVFormat.DEFAULT.withHeader(\"Col1\", \"Col2\");\n            CSVPrinter anotherCSVPrinter = new CSVPrinter(anotherWriter, anotherCSVFormat);\n            anotherCSVPrinter.printRecord(\"Data1\", \"Data2\");\n            anotherCSVPrinter.printRecord(\"Data3\", \"Data4\");\n            anotherCSVPrinter.close();\n\n            Reader anotherReader = new StringReader(anotherWriter.toString());\n            CSVParser anotherCSVParser = new CSVParser(anotherReader, anotherCSVFormat);\n            List<CSVRecord> anotherRecords = anotherCSVParser.getRecords();\n            for (CSVRecord record : anotherRecords) {\n                System.out.println(\"Record: \" + record);\n            }\n            anotherCSVParser.close();\n\n            // Reading from the original CSV\n            Reader reader = new StringReader(writer.toString());\n            CSVParser csvParser = new CSVParser(reader, csvFormat);\n            List<CSVRecord> records = csvParser.getRecords();\n\n            // Accessing the comment\n            /* read */ String comment = records.get(0).getComment();\n            System.out.println(comment);\n\n            csvParser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}