{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat csvFormat;\n    private List<CSVRecord> records;\n\n    public CSVHandler() {\n        // Initialize CSVFormat with the write method\n        /* write */ csvFormat = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n    }\n\n    public void parseCSV(String csvData) throws Exception {\n        records = csvFormat.parse(new StringReader(csvData)).getRecords();\n    }\n\n    public CSVRecord getFirstRecord() {\n        return records.get(0);\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Student {\n    private String name;\n    private Map<String, Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new HashMap<>();\n    }\n\n    public void addGrade(String course, int grade) {\n        grades.put(course, grade);\n    }\n\n    public Map<String, Integer> getGrades() {\n        return grades;\n    }\n\n    public void printGrades() {\n        for (Map.Entry<String, Integer> entry : grades.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n",
        "Main.java": "import java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // CSV handling\n            CSVHandler csvHandler = new CSVHandler();\n            String csvData = \"header1,header2\\nvalue1,value2\";\n            csvHandler.parseCSV(csvData);\n\n            // Access the first record\n            CSVRecord record = csvHandler.getFirstRecord();\n\n            // Unrelated code: Student operations\n            Student student = new Student(\"John Doe\");\n            student.addGrade(\"Math\", 95);\n            student.addGrade(\"Science\", 88);\n            student.printGrades();\n\n            // More unrelated code: Arithmetic operations\n            int result = 0;\n            for (int i = 0; i < 10; i++) {\n                result += i * 2;\n            }\n            System.out.println(\"Result of arithmetic operations: \" + result);\n\n            // Use the read method\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n\n            // Additional unrelated code: String manipulation\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Hello, \");\n            sb.append(\"world!\");\n            System.out.println(sb.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n\n            // Sample CSV data\n            String csvData = \"header1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data\n            List<CSVRecord> records = csvFormat.parse(new StringReader(csvData)).getRecords();\n\n            // Access the first record\n            CSVRecord record = records.get(0);\n\n            // Use the read method\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n\n            // Sample CSV data\n            String csvData = \"header1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data\n            List<CSVRecord> records = csvFormat.parse(new StringReader(csvData)).getRecords();\n\n            // Access the first record\n            CSVRecord record = records.get(0);\n\n            // Unrelated code: Initialize a map and perform some operations\n            Map<String, Integer> map = new HashMap<>();\n            map.put(\"key1\", 100);\n            map.put(\"key2\", 200);\n            map.put(\"key3\", 300);\n\n            // Loop through the map and print values\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n            }\n\n            // More unrelated code: Perform arithmetic operations\n            int result = 0;\n            for (int i = 0; i < 10; i++) {\n                result += i * 2;\n            }\n            System.out.println(\"Result of arithmetic operations: \" + result);\n\n            // Use the read method\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n\n            // Additional unrelated code: String manipulation\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Hello, \");\n            sb.append(\"world!\");\n            System.out.println(sb.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
}