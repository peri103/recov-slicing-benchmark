{
    "files": {
        "CSVConfig.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfig {\n    private CSVFormat format;\n\n    public CSVConfig() {\n        // Initialize CSVFormat object\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        // Apply write method\n        /* write */ format = format.withIgnoreHeaderCase(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVRecordHandler.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordHandler {\n    private CSVRecord record;\n\n    public CSVRecordHandler(CSVFormat format) {\n        // Create a mock CSVRecord for demonstration purposes\n        // Normally, CSVRecord is obtained by parsing a CSV file using CSVParser\n        record = new CSVRecord(null, null, null, null, format);\n    }\n\n    public boolean checkMapping(String header) {\n        // Use read method\n        /* read */ return record.isMapped(header);\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Student {\n    private String name;\n    private ArrayList<String> subjects = new ArrayList<>();\n    private HashMap<String, Integer> grades = new HashMap<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addSubject(String subject) {\n        subjects.add(subject);\n    }\n\n    public void setGrade(String subject, int grade) {\n        grades.put(subject, grade);\n    }\n\n    public void printGrades() {\n        for (String subject : subjects) {\n            System.out.println(subject + \": \" + grades.getOrDefault(subject, 0));\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Configure CSV format\n        CSVConfig csvConfig = new CSVConfig();\n        csvConfig.configureFormat();\n\n        // Handle CSV record\n        CSVRecordHandler recordHandler = new CSVRecordHandler(csvConfig.getFormat());\n        boolean isMapped = recordHandler.checkMapping(\"header\");\n        System.out.println(\"Is header mapped: \" + isMapped);\n\n        // Student operations\n        Student student = new Student(\"John Doe\");\n        student.addSubject(\"Math\");\n        student.addSubject(\"Science\");\n        student.setGrade(\"Math\", 90);\n        student.setGrade(\"Science\", 85);\n\n        // Print student grades\n        student.printGrades();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Apply write method\n        /* write */ format = format.withIgnoreHeaderCase(true);\n        \n        // Create a mock CSVRecord for demonstration purposes\n        // Normally, CSVRecord is obtained by parsing a CSV file using CSVParser\n        CSVRecord record = new CSVRecord(null, null, null, null, format);\n        \n        // Use read method\n        /* read */ boolean isMapped = record.isMapped(\"header\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Apply write method\n        /* write */ format = format.withIgnoreHeaderCase(true);\n        \n        // Create a mock CSVRecord for demonstration purposes\n        // Normally, CSVRecord is obtained by parsing a CSV file using CSVParser\n        CSVRecord record = new CSVRecord(null, null, null, null, format);\n        \n        // Unrelated complex code: Initialize a list and a map\n        ArrayList<String> stringList = new ArrayList<>();\n        HashMap<String, Integer> stringCountMap = new HashMap<>();\n        \n        // Populate the list with some strings\n        stringList.add(\"apple\");\n        stringList.add(\"banana\");\n        stringList.add(\"apple\");\n        stringList.add(\"orange\");\n        stringList.add(\"banana\");\n        \n        // Count occurrences of each string in the list\n        for (String str : stringList) {\n            stringCountMap.put(str, stringCountMap.getOrDefault(str, 0) + 1);\n        }\n        \n        // Print the string counts\n        for (String key : stringCountMap.keySet()) {\n            System.out.println(key + \": \" + stringCountMap.get(key));\n        }\n        \n        // Use read method\n        /* read */ boolean isMapped = record.isMapped(\"header\");\n        \n        // Print the result of the read method\n        System.out.println(\"Is header mapped: \" + isMapped);\n        \n        // Additional unrelated operations\n        // Create and manipulate another list\n        ArrayList<Integer> numberList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numberList.add(i * 2);\n        }\n        \n        // Print the numbers in the list\n        for (int number : numberList) {\n            System.out.print(number + \" \");\n        }\n        System.out.println();\n    }\n}"
}