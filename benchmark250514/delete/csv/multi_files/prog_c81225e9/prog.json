{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport java.io.IOException;\nimport java.io.StringWriter;\n\npublic class CSVHandler {\n    private StringWriter writer;\n    private CSVPrinter printer;\n\n    public CSVHandler() throws IOException {\n        writer = new StringWriter();\n        CSVFormat format = CSVFormat.DEFAULT /* write */ .withQuote('\"');\n        printer = new CSVPrinter(writer, format);\n    }\n\n    public void writeRecord(String... values) throws IOException {\n        printer.printRecord(values);\n        printer.flush();\n    }\n\n    public String getCSVContent() {\n        return writer.toString();\n    }\n}\n",
        "CSVReader.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\n\npublic class CSVReader {\n    private CSVRecord record;\n\n    public CSVReader(String csvContent) throws IOException {\n        record = CSVFormat.DEFAULT.parse(csvContent).getRecords().get(0);\n    }\n\n    public String readRecord() {\n        /* read */ return record.toString();\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public List<Integer> getGrades() {\n        return grades;\n    }\n}\n",
        "Main.java": "import java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVHandler and write a record\n            CSVHandler csvHandler = new CSVHandler();\n            csvHandler.writeRecord(\"Alice\", \"A\", \"Math\");\n\n            // Create a CSVReader to read the content\n            CSVReader csvReader = new CSVReader(csvHandler.getCSVContent());\n            String recordString = csvReader.readRecord();\n            System.out.println(\"CSV Record: \" + recordString);\n\n            // Create a Course and add Students\n            Course mathCourse = new Course(\"Mathematics\");\n            Student alice = new Student(\"Alice\");\n            alice.addGrade(95);\n            Student bob = new Student(\"Bob\");\n            bob.addGrade(88);\n\n            mathCourse.addStudent(alice);\n            mathCourse.addStudent(bob);\n\n            // Print students and their grades\n            for (Student student : mathCourse.getStudents()) {\n                System.out.println(\"Student: \" + student.getGrades());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withQuote",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVFormat instance and configure it\n            CSVFormat format = CSVFormat.DEFAULT /* write */ .withQuote('\"');\n            \n            // Create a CSVPrinter using the format\n            CSVPrinter printer = new CSVPrinter(writer, format);\n            \n            // Write data to the CSVPrinter\n            printer.printRecord(\"value1\", \"value2\", \"value3\");\n            \n            // Flush the printer to ensure all data is written\n            printer.flush();\n            \n            // Create a CSVRecord from the written data\n            CSVRecord record = CSVFormat.DEFAULT.parse(writer.toString()).getRecords().get(0);\n            \n            // Read the record using the toString method\n            /* read */ String recordString = record.toString();\n            \n            // Print the read value\n            System.out.println(recordString);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVFormat instance and configure it\n            CSVFormat format = CSVFormat.DEFAULT /* write */ .withQuote('\"');\n            \n            // Create a CSVPrinter using the format\n            CSVPrinter printer = new CSVPrinter(writer, format);\n            \n            // Write data to the CSVPrinter\n            printer.printRecord(\"value1\", \"value2\", \"value3\");\n            \n            // Flush the printer to ensure all data is written\n            printer.flush();\n            \n            // Create a CSVRecord from the written data\n            CSVRecord record = CSVFormat.DEFAULT.parse(writer.toString()).getRecords().get(0);\n\n            // Additional complex operations\n            List<String> complexList = new ArrayList<>();\n            complexList.add(\"ComplexValue1\");\n            complexList.add(\"ComplexValue2\");\n            complexList.add(\"ComplexValue3\");\n            \n            StringBuilder complexBuilder = new StringBuilder();\n            for (String s : complexList) {\n                complexBuilder.append(s).append(\";\");\n            }\n            \n            String complexString = complexBuilder.toString();\n            System.out.println(\"Complex String: \" + complexString);\n\n            // Intermediate operations\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum: \" + sum);\n            \n            // Read the record using the toString method\n            /* read */ String recordString = record.toString();\n            \n            // Print the read value\n            System.out.println(recordString);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}