{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class CSVHandler {\n    private CSVFormat format;\n\n    public CSVHandler() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void initializeFormat() {\n        /* write */ format = format.withHeaderComments(\"This is a comment\");\n    }\n\n    public CSVRecord createRecord() {\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        return new CSVRecord(format, recordValues, null, 0, 0);\n    }\n}\n",
        "CommentReader.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CommentReader {\n\n    public String readComment(CSVRecord record) {\n        /* read */ return record.getComment();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSV handling\n        CSVHandler csvHandler = new CSVHandler();\n        csvHandler.initializeFormat();\n        CSVRecord record = csvHandler.createRecord();\n\n        // Read the comment from the CSVRecord\n        CommentReader commentReader = new CommentReader();\n        String comment = commentReader.readComment(record);\n        System.out.println(\"CSV Comment: \" + comment);\n\n        // Create a course and add students\n        Course course = new Course(\"Computer Science\");\n        Student student1 = new Student(\"Alice\", 20);\n        Student student2 = new Student(\"Bob\", 22);\n\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        // Print course details\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a comment\");\n\n        // Simulate reading from CSVRecord\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        CSVRecord record = new CSVRecord(format, recordValues, null, 0, 0);\n\n        // Retrieve the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        System.out.println(comment);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a comment\");\n\n        // Simulate reading from CSVRecord\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        CSVRecord record = new CSVRecord(format, recordValues, null, 0, 0);\n\n        // Additional complex logic: create a map and perform operations\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"A\", 1);\n        map.put(\"B\", 2);\n        map.put(\"C\", 3);\n\n        // Iterate over map and perform calculations\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            sum += entry.getValue();\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Perform some unrelated operations\n        int[] numbers = {10, 20, 30, 40, 50};\n        for (int num : numbers) {\n            System.out.println(\"Number: \" + num);\n        }\n\n        // Retrieve the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        System.out.println(\"CSV Comment: \" + comment);\n\n        // Additional complex logic: manipulate a list\n        List<Integer> numberList = Arrays.asList(100, 200, 300);\n        int product = 1;\n        for (int number : numberList) {\n            product *= number;\n            System.out.println(\"Number in list: \" + number);\n        }\n        System.out.println(\"Product of numbers in list: \" + product);\n    }\n}"
}