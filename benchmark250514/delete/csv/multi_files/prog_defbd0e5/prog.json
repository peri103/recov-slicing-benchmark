{
    "files": {
        "CSVConfig.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfig {\n    private CSVFormat format;\n\n    public CSVConfig() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void enableTrim() {\n        /* write */ format = format.withTrim();\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVRecordChecker.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordChecker {\n    private CSVRecord record;\n\n    public CSVRecordChecker(CSVRecord record) {\n        this.record = record;\n    }\n\n    public boolean isColumnMapped(String column) {\n        /* read */ return record.isMapped(column);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n    private CSVConfig csvConfig;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.csvConfig = new CSVConfig();\n    }\n\n    public void configureCSV() {\n        csvConfig.enableTrim();\n    }\n\n    public CSVConfig getCSVConfig() {\n        return csvConfig;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a student and configure CSV\n        Student student = new Student(\"Alice\", 20);\n        student.configureCSV();\n\n        // Mock CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, student.getCSVConfig().getFormat());\n\n        // Check if the column is mapped\n        CSVRecordChecker checker = new CSVRecordChecker(record);\n        boolean isMapped = checker.isColumnMapped(\"column\");\n\n        // Output the result\n        System.out.println(\"Is 'column' mapped: \" + isMapped);\n\n        // Additional logic: Display student details\n        System.out.println(\"Student Name: \" + student.getName());\n        System.out.println(\"Student Age: \" + student.getAge());\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrim",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default format\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to create a new format with trim enabled\n        /* write */ format = format.withTrim();\n        \n        // Create a mock CSVRecord to demonstrate the read method\n        // In a real scenario, CSVRecord would be obtained from parsing a CSV file\n        CSVRecord record = new CSVRecord(null, null, null, format);\n        \n        // Use the read method to check if a specific header is mapped\n        // Assuming the header \"column\" exists in the CSVRecord\n        /* read */ boolean isMapped = record.isMapped(\"column\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default format\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Additional logic: Create a HashMap and populate it\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        \n        // Use the write method to create a new format with trim enabled\n        /* write */ format = format.withTrim();\n        \n        // Perform operations on the map\n        int sum = 0;\n        for (String key : map.keySet()) {\n            sum += map.get(key);\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n        \n        // Additional logic: Use a loop to manipulate values\n        int[] numbers = {1, 2, 3, 4, 5};\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of numbers array: \" + product);\n        \n        // Create a mock CSVRecord to demonstrate the read method\n        // In a real scenario, CSVRecord would be obtained from parsing a CSV file\n        CSVRecord record = new CSVRecord(null, null, null, format);\n        \n        // Use the read method to check if a specific header is mapped\n        // Assuming the header \"column\" exists in the CSVRecord\n        /* read */ boolean isMapped = record.isMapped(\"column\");\n        \n        // Print the result\n        System.out.println(\"Is 'column' mapped: \" + isMapped);\n        \n        // Additional logic: Perform string manipulation\n        String text = \"Hello, World!\";\n        String reversed = new StringBuilder(text).reverse().toString();\n        System.out.println(\"Reversed text: \" + reversed);\n    }\n}"
}