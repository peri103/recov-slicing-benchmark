{
    "files": {
        "CSVProcessor.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVProcessor {\n    private CSVFormat format;\n    private List<CSVRecord> records;\n\n    public CSVProcessor(String csvData) {\n        try {\n            /* write */ this.format = CSVFormat.DEFAULT.withTrim();\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            this.records = parser.getRecords();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Student {\n    private String name;\n    private int age;\n    private String location;\n\n    public Student(String name, int age, String location) {\n        this.name = name;\n        this.age = age;\n        this.location = location;\n    }\n\n    public static HashMap<String, Student> createStudents(List<CSVRecord> records) {\n        HashMap<String, Student> students = new HashMap<>();\n        for (CSVRecord record : records) {\n            String name = record.get(\"Name\");\n            int age = Integer.parseInt(record.get(\"Age\"));\n            String location = record.get(\"Location\");\n            students.put(name, new Student(name, age, location));\n        }\n        return students;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n}\n",
        "Main.java": "import java.util.HashMap;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        String csvData = \"Name, Age, Location\\nJohn Doe, 30, New York\\nJane Smith, 25, Los Angeles\";\n        \n        // Process CSV data\n        CSVProcessor processor = new CSVProcessor(csvData);\n        HashMap<String, Student> students = Student.createStudents(processor.getRecords());\n\n        // Access a specific student\n        Student john = students.get(\"John Doe\");\n        System.out.println(\"Name: \" + john.getName() + \", Age: \" + john.getAge() + \", Location: \" + john.getLocation());\n\n        // Check if a specific column is mapped\n        CSVRecord firstRecord = processor.getRecords().get(0);\n        /* read */ boolean isMapped = firstRecord.isMapped(\"Name\");\n        System.out.println(\"Is 'Name' column mapped: \" + isMapped);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrim",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with trim\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withTrim();\n\n            // Sample CSV data\n            String csvData = \"Name, Age, Location\\nJohn Doe, 30, New York\\nJane Smith, 25, Los Angeles\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if a particular column is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n            \n            System.out.println(\"Is 'Name' column mapped: \" + isMapped);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with trim\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withTrim();\n\n            // Sample CSV data\n            String csvData = \"Name, Age, Location\\nJohn Doe, 30, New York\\nJane Smith, 25, Los Angeles\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Unrelated complex logic\n            ArrayList<String> names = new ArrayList<>();\n            HashMap<String, Integer> ageMap = new HashMap<>();\n            List<String> locations = new ArrayList<>();\n\n            for (CSVRecord rec : parser) {\n                names.add(rec.get(\"Name\"));\n                ageMap.put(rec.get(\"Name\"), Integer.parseInt(rec.get(\"Age\")));\n                locations.add(rec.get(\"Location\"));\n            }\n\n            // Process and print the data\n            for (String name : names) {\n                System.out.println(\"Name: \" + name + \", Age: \" + ageMap.get(name) + \", Location: \" + locations.get(names.indexOf(name)));\n            }\n\n            // Check if a particular column is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n            \n            System.out.println(\"Is 'Name' column mapped: \" + isMapped);\n\n            // Additional complex logic\n            int totalAge = 0;\n            for (int age : ageMap.values()) {\n                totalAge += age;\n            }\n            System.out.println(\"Total Age: \" + totalAge);\n\n            if (isMapped) {\n                System.out.println(\"All names are mapped correctly.\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}