{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        // Initialize CSVFormat with default settings\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void enableDuplicateHeaders() {\n        // Use the write method to allow duplicate header names\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CSVDataProcessor {\n    private CSVRecord record;\n    private Map<String, String> csvData = new HashMap<>();\n\n    public CSVDataProcessor(CSVFormat format) {\n        // Create a mock CSVRecord for demonstration purposes\n        record = new CSVRecord(null, null, format, 0, null);\n        // Initialize some dummy CSV data\n        csvData.put(\"header1\", \"value1\");\n        csvData.put(\"header2\", \"value2\");\n        csvData.put(\"header3\", \"value3\");\n    }\n\n    public void processCSVData() {\n        // Simulate processing CSV data\n        for (String header : csvData.keySet()) {\n            System.out.println(\"Processing header: \" + header + \", value: \" + csvData.get(header));\n        }\n    }\n\n    public boolean checkHeaderMapping(String header) {\n        // Use the read method to check if the record is mapped\n        /* read */ return record.isMapped(header);\n    }\n\n    public void checkHeaderExistence(String header) {\n        if (csvData.containsKey(header)) {\n            System.out.println(\"Header \\\"\" + header + \"\\\" exists with value: \" + csvData.get(header));\n        } else {\n            System.out.println(\"Header \\\"\" + header + \"\\\" does not exist.\");\n        }\n    }\n\n    public int calculateTotalValueLength() {\n        int totalLength = 0;\n        for (String value : csvData.values()) {\n            totalLength += value.length();\n        }\n        return totalLength;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CSVConfiguration config = new CSVConfiguration();\n        config.enableDuplicateHeaders();\n\n        CSVDataProcessor processor = new CSVDataProcessor(config.getFormat());\n        processor.processCSVData();\n\n        boolean isMapped = processor.checkHeaderMapping(\"someHeader\");\n        System.out.println(\"Is the header mapped? \" + isMapped);\n\n        processor.checkHeaderExistence(\"header1\");\n        processor.checkHeaderExistence(\"header4\");\n\n        int totalLength = processor.calculateTotalValueLength();\n        System.out.println(\"Total length of all values: \" + totalLength);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default settings\n        CSVFormat format = CSVFormat.DEFAULT;\n        // Use the write method to allow duplicate header names\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Create a mock CSVRecord for demonstration purposes\n        CSVRecord record = new CSVRecord(null, null, format, 0, null);\n\n        // Use the read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"someHeader\");\n\n        // Output the result\n        System.out.println(\"Is the header mapped? \" + isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default settings\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Use the write method to allow duplicate header names\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Create a mock CSVRecord for demonstration purposes\n        CSVRecord record = new CSVRecord(null, null, format, 0, null);\n\n        // Additional complexity: Create a map to simulate CSV data\n        Map<String, String> csvData = new HashMap<>();\n        csvData.put(\"header1\", \"value1\");\n        csvData.put(\"header2\", \"value2\");\n        csvData.put(\"header3\", \"value3\");\n\n        // Simulate processing CSV data\n        for (String header : csvData.keySet()) {\n            System.out.println(\"Processing header: \" + header + \", value: \" + csvData.get(header));\n        }\n\n        // More complexity: Calculate the length of each value\n        for (String value : csvData.values()) {\n            System.out.println(\"Length of value \\\"\" + value + \"\\\": \" + value.length());\n        }\n\n        // Use the read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"someHeader\");\n\n        // Output the result\n        System.out.println(\"Is the header mapped? \" + isMapped);\n\n        // Additional processing: Check if certain headers exist\n        for (String header : new String[]{\"header1\", \"header4\"}) {\n            if (csvData.containsKey(header)) {\n                System.out.println(\"Header \\\"\" + header + \"\\\" exists with value: \" + csvData.get(header));\n            } else {\n                System.out.println(\"Header \\\"\" + header + \"\\\" does not exist.\");\n            }\n        }\n\n        // Further complexity: Aggregate lengths of all values\n        int totalLength = 0;\n        for (String value : csvData.values()) {\n            totalLength += value.length();\n        }\n        System.out.println(\"Total length of all values: \" + totalLength);\n    }\n}"
}