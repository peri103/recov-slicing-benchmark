{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat csvFormat;\n    private List<CSVRecord> consistentRecords = new ArrayList<>();\n\n    public CSVHandler() {\n        // Initialize CSVFormat with the write method\n        /* write */ csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines();\n    }\n\n    public void parseCSV(String csvData) throws IOException {\n        CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n\n        for (CSVRecord record : parser) {\n            boolean isConsistent = record.isConsistent();\n            if (isConsistent) {\n                consistentRecords.add(record);\n            }\n        }\n\n        parser.close();\n    }\n\n    public List<CSVRecord> getConsistentRecords() {\n        return consistentRecords;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a course and add students\n            Course course = new Course(\"Computer Science\");\n            course.addStudent(new Student(\"John Doe\", 20));\n            course.addStudent(new Student(\"Alice Smith\", 22));\n\n            System.out.println(\"Course: \" + course.getCourseName());\n            for (Student student : course.getStudents()) {\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n            }\n\n            // Handle CSV data\n            CSVHandler csvHandler = new CSVHandler();\n            String csvData = \"name,age\\nJohn,30\\n\\nAlice,25\";\n            csvHandler.parseCSV(csvData);\n\n            // Retrieve and display consistent records\n            for (CSVRecord record : csvHandler.getConsistentRecords()) {\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Consistent Record: \" + record + \", Is Consistent: \" + isConsistent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines();\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nAlice,25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n\n            // Iterate over CSV records\n            for (CSVRecord record : parser) {\n                // Use the read method\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Record is consistent: \" + isConsistent);\n            }\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines();\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nAlice,25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n\n            // Create a list to store consistent records\n            List<CSVRecord> consistentRecords = new ArrayList<>();\n\n            // Iterate over CSV records\n            for (CSVRecord record : parser) {\n                // Check if the record is consistent using the read method\n                boolean isConsistent = record.isConsistent();\n                if (isConsistent) {\n                    consistentRecords.add(record);\n                }\n            }\n\n            // Additional processing on consistent records\n            for (CSVRecord record : consistentRecords) {\n                System.out.println(\"Consistent Record: \" + record);\n            }\n\n            // Further unrelated complex logic\n            List<String> names = new ArrayList<>();\n            names.add(\"John\");\n            names.add(\"Alice\");\n            names.add(\"Bob\");\n\n            for (String name : names) {\n                if (name.startsWith(\"A\")) {\n                    System.out.println(\"Name starting with A: \" + name);\n                }\n            }\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}