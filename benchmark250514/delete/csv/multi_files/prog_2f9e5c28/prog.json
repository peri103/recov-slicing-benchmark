{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ format = format.withIgnoreHeaderCase(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CSVDataProcessor {\n    private CSVRecord record;\n\n    public CSVDataProcessor(CSVConfiguration configuration) {\n        Map<String, Integer> headerMap = new HashMap<>();\n        headerMap.put(\"headerName\", 1);\n        record = new CSVRecord(null, new String[]{\"value1\"}, headerMap, 0, configuration.getFormat());\n    }\n\n    public boolean isHeaderMapped(String headerName) {\n        /* read */ return record.isMapped(headerName);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Configure CSV format\n        CSVConfiguration csvConfig = new CSVConfiguration();\n        csvConfig.configureFormat();\n\n        // Process CSV data\n        CSVDataProcessor dataProcessor = new CSVDataProcessor(csvConfig);\n        boolean isMapped = dataProcessor.isHeaderMapped(\"headerName\");\n        System.out.println(\"Is header mapped: \" + isMapped);\n\n        // Create a course and enroll students\n        Course course = new Course(\"Computer Science\");\n        course.enrollStudent(new Student(\"Alice\", 20));\n        course.enrollStudent(new Student(\"Bob\", 22));\n\n        // Display enrolled students\n        List<Student> students = course.getStudents();\n        for (Student student : students) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use write method to configure the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n        \n        // Simulate a CSVRecord object (normally obtained after parsing a CSV file)\n        CSVRecord record = new CSVRecord(null, null, null, 0, format);\n        \n        // Use read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"headerName\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Create a map to simulate header mapping\n        Map<String, Integer> headerMap = new HashMap<>();\n        headerMap.put(\"headerName\", 1);\n\n        // Simulate a CSVRecord with a header map\n        CSVRecord record = new CSVRecord(null, new String[]{\"value1\"}, headerMap, 0, format);\n\n        // Unrelated complex operations\n        Map<String, String> dataMap = new HashMap<>();\n        dataMap.put(\"key1\", \"value1\");\n        dataMap.put(\"key2\", \"value2\");\n\n        for (Map.Entry<String, String> entry : dataMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Use write method to configure the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Additional logic to simulate complex operations\n        String concatenatedValues = \"\";\n        for (String value : dataMap.values()) {\n            concatenatedValues += value + \";\";\n        }\n        System.out.println(\"Concatenated Values: \" + concatenatedValues);\n\n        // Use read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"headerName\");\n\n        // Print the result\n        System.out.println(\"Is Mapped: \" + isMapped);\n\n        // Further unrelated operations\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of 1 to 10: \" + sum);\n    }\n}"
}