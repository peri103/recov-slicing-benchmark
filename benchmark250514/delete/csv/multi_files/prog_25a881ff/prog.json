{
    "files": {
        "CSVFormatWrapper.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVFormatWrapper {\n    private CSVFormat format;\n\n    public CSVFormatWrapper() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void applyIgnoreHeaderCase() {\n        /* write */ this.format = format.withIgnoreHeaderCase();\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVRecordWrapper.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordWrapper {\n    private CSVRecord record;\n\n    public CSVRecordWrapper(CSVRecord record) {\n        this.record = record;\n    }\n\n    public boolean checkHeaderMapped(String headerName) {\n        /* read */ return record.isMapped(headerName);\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Student {\n    private String name;\n    private Map<String, String> studentInfo;\n\n    public Student(String name, String age, String email) {\n        this.name = name;\n        studentInfo = new HashMap<>();\n        studentInfo.put(\"Name\", name);\n        studentInfo.put(\"Age\", age);\n        studentInfo.put(\"Email\", email);\n    }\n\n    public Map<String, String> getStudentInfo() {\n        return studentInfo;\n    }\n\n    public void printInfo() {\n        for (Map.Entry<String, String> entry : studentInfo.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Using CSVFormatWrapper\n        CSVFormatWrapper formatWrapper = new CSVFormatWrapper();\n        formatWrapper.applyIgnoreHeaderCase();\n\n        // Dummy CSVRecord object for demonstration\n        CSVRecord record = new CSVRecord() {\n            @Override\n            public boolean isMapped(String name) {\n                return true; // Simulate the record being mapped\n            }\n        };\n\n        // Using CSVRecordWrapper\n        CSVRecordWrapper recordWrapper = new CSVRecordWrapper(record);\n        boolean isMapped = recordWrapper.checkHeaderMapped(\"headerName\");\n        System.out.println(\"Is header mapped: \" + isMapped);\n\n        // Student information\n        Student student = new Student(\"Alice\", \"30\", \"alice@example.com\");\n        student.printInfo();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Create a dummy CSVRecord object for demonstration purposes\n        CSVRecord record = new CSVRecord() {\n            @Override\n            public boolean isMapped(String name) {\n                // Simulate the record being mapped\n                return true;\n            }\n\n            // Other overridden methods would go here, but are omitted for simplicity\n        };\n\n        // Use the read method to check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"headerName\");\n        \n        // Print the result\n        System.out.println(\"Is header mapped: \" + isMapped);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Create a dummy CSVRecord object for demonstration purposes\n        CSVRecord record = new CSVRecord() {\n            @Override\n            public boolean isMapped(String name) {\n                // Simulate the record being mapped\n                return true;\n            }\n\n            // Other overridden methods would go here, but are omitted for simplicity\n        };\n\n        // Additional complex logic\n        ArrayList<String> headers = new ArrayList<>();\n        headers.add(\"Name\");\n        headers.add(\"Age\");\n        headers.add(\"Email\");\n\n        Map<String, Integer> headerIndexMap = new HashMap<>();\n        for (int i = 0; i < headers.size(); i++) {\n            headerIndexMap.put(headers.get(i).toLowerCase(), i);\n        }\n\n        // Simulate processing of records\n        ArrayList<Map<String, String>> records = new ArrayList<>();\n        Map<String, String> record1 = new HashMap<>();\n        record1.put(\"Name\", \"Alice\");\n        record1.put(\"Age\", \"30\");\n        record1.put(\"Email\", \"alice@example.com\");\n        records.add(record1);\n\n        Map<String, String> record2 = new HashMap<>();\n        record2.put(\"Name\", \"Bob\");\n        record2.put(\"Age\", \"25\");\n        record2.put(\"Email\", \"bob@example.com\");\n        records.add(record2);\n\n        // Process each record\n        for (Map<String, String> rec : records) {\n            for (String header : headers) {\n                System.out.println(header + \": \" + rec.get(header));\n            }\n            System.out.println();\n        }\n\n        // Use the read method to check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"headerName\");\n        \n        // Print the result\n        System.out.println(\"Is header mapped: \" + isMapped);\n\n        // More complex logic\n        String searchHeader = \"email\";\n        if (headerIndexMap.containsKey(searchHeader)) {\n            System.out.println(\"Header '\" + searchHeader + \"' is present at index: \" + headerIndexMap.get(searchHeader));\n        } else {\n            System.out.println(\"Header '\" + searchHeader + \"' is not present.\");\n        }\n    }\n}"
}