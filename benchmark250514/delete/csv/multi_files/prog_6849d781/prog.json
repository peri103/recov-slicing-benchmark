{
    "files": {
        "CSVFormatHandler.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVFormatHandler {\n    private CSVFormat format;\n\n    public CSVFormatHandler() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ this.format = this.format.withIgnoreEmptyLines(true);\n    }\n\n    public CSVFormat getFormat() {\n        return this.format;\n    }\n}\n",
        "CSVRecordSimulator.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordSimulator {\n    private CSVRecord record;\n\n    public CSVRecordSimulator(CSVFormatHandler formatHandler) {\n        // Simulating a CSVRecord creation\n        this.record = new CSVRecord(formatHandler.getFormat(), new String[] {\"data1\", \"data2\", \"data3\"}, 0, 0);\n    }\n\n    public boolean checkConsistency() {\n        /* read */ return this.record.isConsistent();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> scores;\n\n    public Student(String name) {\n        this.name = name;\n        this.scores = new ArrayList<>();\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public ArrayList<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Using CSVFormatHandler and CSVRecordSimulator\n        CSVFormatHandler formatHandler = new CSVFormatHandler();\n        formatHandler.configureFormat();\n        CSVRecordSimulator recordSimulator = new CSVRecordSimulator(formatHandler);\n        boolean isConsistent = recordSimulator.checkConsistency();\n        System.out.println(\"Is CSV Record Consistent? \" + isConsistent);\n\n        // Working with Student class\n        Student student = new Student(\"John Doe\");\n        student.addScore(85);\n        student.addScore(90);\n        student.addScore(78);\n\n        System.out.println(\"Scores for \" + student.getName() + \":\");\n        for (int score : student.getScores()) {\n            System.out.println(score);\n        }\n\n        // Additional logic\n        int total = 0;\n        for (int score : student.getScores()) {\n            total += score;\n        }\n        System.out.println(\"Total Score: \" + total);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreEmptyLines(true);\n        \n        // Assuming we have a CSVRecord instance to demonstrate the read method.\n        // Since CSVRecord is typically obtained from parsing a CSV file, we will simulate this.\n        CSVRecord record = new CSVRecord(format, new String[] {\"data\"}, 0, 0); // Simulated record\n        \n        /* read */ boolean isConsistent = record.isConsistent();\n        System.out.println(isConsistent);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing CSVFormat\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Creating a simulated CSVRecord\n        CSVRecord record = new CSVRecord(format, new String[] {\"data1\", \"data2\", \"data3\"}, 0, 0);\n\n        // Unrelated complex operation using ArrayList and HashMap\n        ArrayList<Integer> numbers = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n            map.put(\"key\" + i, i * 2);\n        }\n\n        // Performing operations on ArrayList\n        for (int num : numbers) {\n            System.out.println(\"Number: \" + num);\n        }\n\n        // Performing operations on HashMap\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        // More complex logic\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Another unrelated operation\n        ArrayList<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        \n        for (String str : strings) {\n            System.out.println(\"String: \" + str);\n        }\n\n        // Finally reading the CSVRecord\n        /* read */ boolean isConsistent = record.isConsistent();\n        System.out.println(\"Is CSV Record Consistent? \" + isConsistent);\n    }\n}"
}