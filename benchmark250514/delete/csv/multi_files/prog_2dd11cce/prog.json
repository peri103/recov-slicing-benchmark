{
    "files": {
        "CSVUtils.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVUtils {\n    private CSVFormat format;\n\n    public CSVUtils() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ format = format.withNullString(\"NULL\");\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class CSVDataProcessor {\n    private CSVRecord record;\n\n    public CSVDataProcessor(List<String> data, CSVUtils csvUtils) {\n        record = csvUtils.getFormat().parse(data).iterator().next();\n    }\n\n    public boolean checkIsSet(int index) {\n        /* read */ return record.isSet(index);\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores;\n\n    public Student(String name) {\n        this.name = name;\n        this.scores = new ArrayList<>();\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Configure CSV format\n        CSVUtils csvUtils = new CSVUtils();\n        csvUtils.configureFormat();\n\n        // Create mock data and process it\n        String[] data = {\"value1\", \"NULL\", \"value3\"};\n        CSVDataProcessor processor = new CSVDataProcessor(Arrays.asList(data), csvUtils);\n        boolean isSet = processor.checkIsSet(1);\n        System.out.println(\"Is index 1 set: \" + isSet);\n\n        // Create students and courses\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n\n        student1.addScore(85);\n        student2.addScore(92);\n\n        Course course = new Course(\"Mathematics\");\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Scores: \" + student.getScores());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a specific null string\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withNullString(\"NULL\");\n\n        // Create a mock CSVRecord for demonstration purposes\n        String[] data = {\"value1\", \"NULL\", \"value3\"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(java.util.Arrays.asList(data)).iterator().next();\n\n        // Check if a specific index is set in the CSVRecord\n        /* read */ boolean isSet = record.isSet(1);\n        System.out.println(isSet);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a specific null string\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withNullString(\"NULL\");\n\n        // Create a mock CSVRecord for demonstration purposes\n        String[] data = {\"value1\", \"NULL\", \"value3\"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(java.util.Arrays.asList(data)).iterator().next();\n\n        // Additional complex code\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 10);\n        map.put(\"key2\", 20);\n        map.put(\"key3\", 30);\n\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        int sum = 0;\n        for (Integer value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values: \" + sum);\n\n        // Check if a specific index is set in the CSVRecord\n        /* read */ boolean isSet = record.isSet(1);\n        System.out.println(isSet);\n\n        // Additional complex code\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers 1 to 5: \" + product);\n\n        String[] moreData = {\"extra1\", \"extra2\", \"extra3\"};\n        for (String str : moreData) {\n            System.out.println(\"Processing: \" + str);\n        }\n    }\n}"
}