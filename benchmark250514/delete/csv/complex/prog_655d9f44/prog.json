{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a null string\n        CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n\n        // Create a map to store CSVRecords\n        Map<Integer, CSVRecord> recordMap = new HashMap<>();\n\n        // Create CSVRecords using the format\n        List<CSVRecord> records = format.parse(Arrays.asList(\"value1, NULL, value3\", \"valueA, valueB, NULL\")).getRecords();\n\n        // Populate the map with CSVRecords\n        for (int i = 0; i < records.size(); i++) {\n            recordMap.put(i, records.get(i));\n        }\n\n        // Perform operations on the records\n        for (CSVRecord rec : records) {\n            for (int i = 0; i < rec.size(); i++) {\n                System.out.println(\"Value at index \" + i + \": \" + rec.get(i));\n            }\n        }\n\n        // Create another CSVFormat with different null string\n        CSVFormat anotherFormat = CSVFormat.DEFAULT.withNullString(\"N/A\");\n\n        // More complex logic using anotherFormat\n        CSVRecord anotherRecord = anotherFormat.parse(Arrays.asList(\"data1, N/A, data3\")).get(0);\n        System.out.println(\"Another record value at index 1: \" + anotherRecord.get(1));\n\n        // Check if the second value is set (it should be null)\n        /* read */ boolean isSet = recordMap.get(0).isSet(1);\n\n        // Print the result\n        System.out.println(\"Is the second value set in the first record? \" + isSet);  // Expected to print false since \"NULL\" is considered as null\n\n        // Additional logic to manipulate and display data\n        for (Map.Entry<Integer, CSVRecord> entry : recordMap.entrySet()) {\n            System.out.println(\"Record \" + entry.getKey() + \":\");\n            CSVRecord rec = entry.getValue();\n            for (int i = 0; i < rec.size(); i++) {\n                System.out.println(\"Index \" + i + \": \" + rec.get(i));\n            }\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a null string\n        CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n        \n        // Create a CSVRecord using the format\n        CSVRecord record = format.parse(Arrays.asList(\"value1\", \"NULL\", \"value3\")).get(0);\n        \n        // Check if the second value is set (it should be null)\n        /* read */ boolean isSet = record.isSet(1);\n        \n        // Print the result\n        System.out.println(isSet);  // Expected to print false since \"NULL\" is considered as null\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}