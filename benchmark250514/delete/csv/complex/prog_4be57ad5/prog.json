{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Write operation: configure the format to ignore empty lines\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Create a CSVRecord object for demonstration\n        String[] data = {\"value1\", \"value2\"};\n        CSVParser parser = CSVFormat.DEFAULT.parse(Arrays.asList(data));\n        CSVRecord record = parser.iterator().next();\n\n        // Additional complex logic: using a HashMap\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"value1\", 1);\n        map.put(\"value2\", 2);\n\n        // Using another CSVFormat method for demonstration\n        CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(\"header1\", \"header2\");\n\n        // Process the map entries\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Additional loop logic using List\n        List<String> list = Arrays.asList(\"item1\", \"item2\", \"item3\");\n        for (String item : list) {\n            System.out.println(\"List item: \" + item);\n        }\n\n        // Read operation: check if a certain column is set\n        /* read */ boolean isSet = record.isSet(0);\n        \n        // Output the result\n        System.out.println(\"Is column 0 set: \" + isSet);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Write operation: configure the format to ignore empty lines\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Create a CSVRecord object for demonstration\n        String[] data = {\"value1\", \"value2\"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(Arrays.asList(data)).iterator().next();\n        \n        // Read operation: check if a certain column is set\n        /* read */ boolean isSet = record.isSet(0);\n        \n        // Output the result\n        System.out.println(\"Is column 0 set: \" + isSet);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}