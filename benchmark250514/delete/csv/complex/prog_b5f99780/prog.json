{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n        // Simulate a CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Create an unrelated ArrayList and manipulate it\n        ArrayList<String> names = new ArrayList<>();\n        names.add(\"Alice\");\n        names.add(\"Bob\");\n        names.add(\"Charlie\");\n        \n        // Process the names list\n        for (String name : names) {\n            System.out.println(\"Processing name: \" + name);\n        }\n\n        // Create a HashMap to simulate some complex data manipulation\n        Map<String, Integer> nameLengths = new HashMap<>();\n        for (String name : names) {\n            nameLengths.put(name, name.length());\n        }\n        \n        // Print out the name lengths\n        for (Map.Entry<String, Integer> entry : nameLengths.entrySet()) {\n            System.out.println(\"Name: \" + entry.getKey() + \", Length: \" + entry.getValue());\n        }\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"header\");\n        \n        System.out.println(\"Is 'header' mapped: \" + isMapped);\n\n        // Further manipulate the names list\n        for (int i = 0; i < names.size(); i++) {\n            names.set(i, names.get(i).toUpperCase());\n        }\n\n        // Print the modified names\n        for (String name : names) {\n            System.out.println(\"Modified name: \" + name);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n        // Simulate a CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"header\");\n        \n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}