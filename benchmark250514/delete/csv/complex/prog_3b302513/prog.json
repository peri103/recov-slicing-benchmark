{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n        // Simulate unrelated operations with ArrayList\n        ArrayList<String> stringList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            stringList.add(\"String \" + i);\n        }\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n\n        // Simulate reading a CSVRecord with a comment\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        CSVRecord record = new CSVRecord(recordValues, null, 0L, 0L, null, \"This is a header comment\");\n\n        // Perform some operations with CSVRecord values\n        for (String value : recordValues) {\n            System.out.println(\"Processing value: \" + value);\n        }\n        \n        // Initialize another CSVFormat and perform operations\n        CSVFormat anotherFormat = CSVFormat.DEFAULT.withQuote('\\'').withDelimiter(';');\n        System.out.println(\"Another format delimiter: \" + anotherFormat.getDelimiter());\n\n        // Read the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        System.out.println(comment);\n\n        // Perform additional operations with CSVFormat\n        CSVFormat customFormat = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true);\n        System.out.println(\"Custom format ignoring surrounding spaces: \" + customFormat.getIgnoreSurroundingSpaces());\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n        // Simulate reading a CSVRecord with a comment\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        CSVRecord record = new CSVRecord(recordValues, null, 0L, 0L, null, \"This is a header comment\");\n\n        // Read the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        System.out.println(comment);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}