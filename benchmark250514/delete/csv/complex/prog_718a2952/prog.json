{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a configuration\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Use the write method to configure the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Create a CSVRecord for demonstration purposes\n        // In a real scenario, CSVRecord would be obtained from parsing a CSV file\n        String[] values = {\"Header1\", \"Header2\"};\n        CSVRecord record = new CSVRecord(null, values, null, 0, format);\n\n        // Additional unrelated code to increase complexity\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"Header1\", 1);\n        map.put(\"Header2\", 2);\n\n        // Perform some operations on the map\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Further manipulation of the CSVRecord object\n        String header = \"header1\";\n        if (record.isMapped(header)) {\n            System.out.println(\"Header is mapped: \" + header);\n        }\n\n        // Use the read method to check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header1\");\n\n        // Output the result of the read operation\n        System.out.println(\"Is 'header1' mapped: \" + isMapped);\n\n        // Another unrelated operation to increase complexity\n        int sum = 0;\n        for (Integer value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a configuration\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to configure the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n        \n        // Create a CSVRecord for demonstration purposes\n        // In a real scenario, CSVRecord would be obtained from parsing a CSV file\n        String[] values = {\"Header1\", \"Header2\"};\n        CSVRecord record = new CSVRecord(null, values, null, 0, format);\n        \n        // Use the read method to check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header1\");\n        \n        // Output the result of the read operation\n        System.out.println(\"Is 'header1' mapped: \" + isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}