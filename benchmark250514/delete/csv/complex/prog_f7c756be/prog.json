{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Create a mock CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Unrelated code to make the program more complex\n        Map<String, Integer> headerMap = new HashMap<>();\n        headerMap.put(\"header1\", 1);\n        headerMap.put(\"header2\", 2);\n        headerMap.put(\"header3\", 3);\n\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : headerMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of header values: \" + sum);\n\n        // More unrelated code\n        int maxValue = Integer.MIN_VALUE;\n        for (int value : headerMap.values()) {\n            if (value > maxValue) {\n                maxValue = value;\n            }\n        }\n        System.out.println(\"Maximum header value: \" + maxValue);\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"someHeader\");\n        \n        // Print the result\n        System.out.println(isMapped);\n\n        // Additional unrelated code\n        headerMap.put(\"header4\", 4);\n        int averageValue = sum / headerMap.size();\n        System.out.println(\"Average header value: \" + averageValue);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Create a mock CSVRecord for demonstration\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"someHeader\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}