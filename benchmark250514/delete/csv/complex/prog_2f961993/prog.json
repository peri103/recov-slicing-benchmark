{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Create a Map to simulate data processing\n        Map<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"columnName\", 42);\n        dataMap.put(\"anotherColumn\", 100);\n\n        // More complex operations with the map\n        for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {\n            System.out.println(\"Processing: \" + entry.getKey() + \" = \" + entry.getValue());\n            if (entry.getValue() > 50) {\n                System.out.println(entry.getKey() + \" has a large value!\");\n            }\n        }\n\n        // Use the write method\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Simulate a CSVRecord object\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Perform additional operations\n        int sum = 0;\n        for (Integer value : dataMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Total sum of values: \" + sum);\n\n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"columnName\");\n\n        // Output the result\n        System.out.println(\"Is 'columnName' mapped: \" + isMapped);\n\n        // Additional unrelated operations\n        int threshold = 30;\n        for (String key : dataMap.keySet()) {\n            if (dataMap.get(key) < threshold) {\n                System.out.println(key + \" is below the threshold.\");\n            }\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ format = format.withIgnoreHeaderCase();\n        \n        // Simulate a CSVRecord object\n        CSVRecord record = new CSVRecord(null, null, null, format);\n        \n        // Use the read method\n        /* read */ boolean isMapped = record.isMapped(\"columnName\");\n        \n        // Output the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}