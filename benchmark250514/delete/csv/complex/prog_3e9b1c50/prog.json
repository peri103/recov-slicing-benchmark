{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the write class\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Simulate a data structure that uses CSVFormat\n        Map<String, String> data = new HashMap<>();\n        data.put(\"Name\", \"Alice\");\n        data.put(\"Age\", \"30\");\n        data.put(\"Location\", \"Wonderland\");\n\n        // Perform unrelated operations to increase complexity\n        Set<String> keys = data.keySet();\n        for (String key : keys) {\n            System.out.println(\"Key: \" + key + \", Value: \" + data.get(key));\n        }\n\n        // Initialize the read class\n        CSVRecord record = CSVRecord.EMPTY;\n\n        // Simulate the record being mapped according to the format\n        // For demonstration purposes, assuming the record is mapped as per the format\n        boolean isMapped = false;\n        if (format.getIgnoreHeaderCase()) {\n            isMapped = true;\n        }\n\n        // Additional unrelated logic\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        /* read */ boolean mappedStatus = record.isMapped();\n        System.out.println(\"Is the record mapped? \" + mappedStatus);\n\n        // More unrelated logic\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Complexity\");\n        builder.append(\" increased!\");\n        System.out.println(builder.toString());\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the write class\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Initialize the read class\n        CSVRecord record = CSVRecord.EMPTY;\n\n        // Simulate the record being mapped according to the format\n        // For demonstration purposes, assuming the record is mapped as per the format\n        boolean isMapped = false;\n        if (format.getIgnoreHeaderCase()) {\n            isMapped = true;\n        }\n\n        /* read */ boolean mappedStatus = record.isMapped();\n        System.out.println(mappedStatus);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}