{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default settings\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreSurroundingSpaces(true);\n        \n        // Create a mock CSVRecord to read from\n        CSVRecord record = new CSVRecord(null, null, format);\n\n        // Introduce additional complexity with unrelated code\n        List<String> dataList = new ArrayList<>();\n        dataList.add(\"Data 1\");\n        dataList.add(\"Data 2\");\n        dataList.add(\"Data 3\");\n        \n        for (String data : dataList) {\n            System.out.println(\"Processing: \" + data);\n        }\n        \n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n        \n        // Use the read method to check consistency\n        /* read */ boolean isConsistent = record.isConsistent();\n        \n        // Output the result\n        System.out.println(\"Is the CSVRecord consistent? \" + isConsistent);\n\n        // Additional unrelated code to increase complexity\n        List<Integer> numberList = new ArrayList<>();\n        for (int i = 1; i <= 5; i++) {\n            numberList.add(i * 100);\n        }\n        \n        for (Integer number : numberList) {\n            System.out.println(\"Number: \" + number);\n        }\n        \n        String message = \"Complexity added!\";\n        System.out.println(message);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default settings\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreSurroundingSpaces(true);\n        \n        // Create a mock CSVRecord to read from\n        CSVRecord record = new CSVRecord(null, null, format);\n        \n        // Use the read method to check consistency\n        /* read */ boolean isConsistent = record.isConsistent();\n        \n        // Output the result\n        System.out.println(\"Is the CSVRecord consistent? \" + isConsistent);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}