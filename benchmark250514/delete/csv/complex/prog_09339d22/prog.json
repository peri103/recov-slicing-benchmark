{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a trailing delimiter\n        /* write */\n        CSVFormat format = CSVFormat.DEFAULT.withTrailingDelimiter();\n\n        // Create a sample CSVRecord using the format\n        List<String> data = Arrays.asList(\"value1\", \"value2\", \"value3\");\n        CSVRecord record = new CSVRecord(data, null, format);\n\n        // Additional code to increase complexity\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 100);\n        map.put(\"key2\", 200);\n        map.put(\"key3\", 300);\n\n        int sum = 0;\n        for (String key : map.keySet()) {\n            sum += map.get(key);\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n\n        // More complex logic\n        int[] numbers = {1, 2, 3, 4, 5};\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of array values: \" + product);\n\n        // Read a value from the CSVRecord\n        /* read */\n        boolean isSet = record.isSet(1);\n        System.out.println(\"Is the second value set in CSVRecord? \" + isSet);\n\n        // Further complexity with string manipulations\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Hello\");\n        sb.append(\" \");\n        sb.append(\"World\");\n        String message = sb.toString();\n        System.out.println(message);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a trailing delimiter\n        /* write */\n        CSVFormat format = CSVFormat.DEFAULT.withTrailingDelimiter();\n\n        // Create a sample CSVRecord using the format\n        List<String> data = Arrays.asList(\"value1\", \"value2\", \"value3\");\n        CSVRecord record = new CSVRecord(data, null, format);\n\n        // Read a value from the CSVRecord\n        /* read */\n        boolean isSet = record.isSet(1);\n        System.out.println(isSet);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrailingDelimiter",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}