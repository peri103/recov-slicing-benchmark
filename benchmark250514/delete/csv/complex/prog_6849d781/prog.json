{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing CSVFormat\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Creating a simulated CSVRecord\n        CSVRecord record = new CSVRecord(format, new String[] {\"data1\", \"data2\", \"data3\"}, 0, 0);\n\n        // Unrelated complex operation using ArrayList and HashMap\n        ArrayList<Integer> numbers = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n            map.put(\"key\" + i, i * 2);\n        }\n\n        // Performing operations on ArrayList\n        for (int num : numbers) {\n            System.out.println(\"Number: \" + num);\n        }\n\n        // Performing operations on HashMap\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        // More complex logic\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Another unrelated operation\n        ArrayList<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        \n        for (String str : strings) {\n            System.out.println(\"String: \" + str);\n        }\n\n        // Finally reading the CSVRecord\n        /* read */ boolean isConsistent = record.isConsistent();\n        System.out.println(\"Is CSV Record Consistent? \" + isConsistent);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreEmptyLines(true);\n        \n        // Assuming we have a CSVRecord instance to demonstrate the read method.\n        // Since CSVRecord is typically obtained from parsing a CSV file, we will simulate this.\n        CSVRecord record = new CSVRecord(format, new String[] {\"data\"}, 0, 0); // Simulated record\n        \n        /* read */ boolean isConsistent = record.isConsistent();\n        System.out.println(isConsistent);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}