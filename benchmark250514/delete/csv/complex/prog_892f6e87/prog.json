{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n        // Unrelated code to make the program more complex\n        ArrayList<String> names = new ArrayList<>();\n        names.add(\"Alice\");\n        names.add(\"Bob\");\n        names.add(\"Charlie\");\n\n        HashMap<String, Integer> nameLengths = new HashMap<>();\n        for (String name : names) {\n            nameLengths.put(name, name.length());\n        }\n\n        for (String key : nameLengths.keySet()) {\n            System.out.println(\"Name: \" + key + \", Length: \" + nameLengths.get(key));\n        }\n\n        // Simulate reading the comment from a CSVRecord\n        // Normally, we'd parse a CSV file to get a CSVRecord, but since file operations are not allowed,\n        // we'll simulate this by creating a CSVRecord manually with the expected comment.\n        CSVRecord record = new CSVRecord(null, null, null, 0, format);\n        /* read */ String comment = record.getComment();\n        \n        // Print the comment\n        System.out.println(comment);\n\n        // Additional complex logic\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= 5; i++) {\n            numbers.add(i * i);\n        }\n\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of squares: \" + sum);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n        // Simulate reading the comment from a CSVRecord\n        // Normally, we'd parse a CSV file to get a CSVRecord, but since file operations are not allowed,\n        // we'll simulate this by creating a CSVRecord manually with the expected comment.\n        CSVRecord record = new CSVRecord(null, null, null, 0, format);\n        /* read */ String comment = record.getComment();\n        \n        // Print the comment\n        System.out.println(comment);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}