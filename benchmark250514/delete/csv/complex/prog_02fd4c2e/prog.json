{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with specific configuration\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Create a list to simulate additional complexity\n        List<String> dataList = new ArrayList<>();\n        dataList.add(\"First\");\n        dataList.add(\"Second\");\n        dataList.add(\"Third\");\n\n        // Iterate over the list and print each element\n        for (String data : dataList) {\n            System.out.println(\"Data: \" + data);\n        }\n\n        // Use the write method to configure the format\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Perform some unrelated calculations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n\n        // Create a mock CSVRecord to demonstrate the read method\n        CSVRecord record = new CSVRecord() {\n            @Override\n            public boolean isConsistent() {\n                // Simulate consistency check, assuming the configuration affects this\n                return true;\n            }\n        };\n\n        // Use the read method to check consistency\n        /* read */ boolean isConsistent = record.isConsistent();\n\n        // Output the result\n        System.out.println(\"Is the record consistent? \" + isConsistent);\n\n        // More complex logic with list manipulation\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= 5; i++) {\n            numbers.add(i * 10);\n        }\n        \n        for (int number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n\n        // Additional calculations\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of numbers: \" + product);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with specific configuration\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to configure the format\n        /* write */ format = format.withIgnoreEmptyLines(true);\n        \n        // Create a mock CSVRecord to demonstrate the read method\n        CSVRecord record = new CSVRecord() {\n            @Override\n            public boolean isConsistent() {\n                // Simulate consistency check, assuming the configuration affects this\n                return true;\n            }\n        };\n        \n        // Use the read method to check consistency\n        /* read */ boolean isConsistent = record.isConsistent();\n        \n        // Output the result\n        System.out.println(\"Is the record consistent? \" + isConsistent);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}