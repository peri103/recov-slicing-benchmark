{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n\n        // Additional complexity: Create a map to simulate storing CSV configuration\n        Map<String, CSVFormat> csvFormats = new HashMap<>();\n        csvFormats.put(\"default\", csvFormat);\n\n        // Use the write method\n        /* write */ csvFormat = csvFormat.withAllowDuplicateHeaderNames(true);\n\n        // Add the modified format to the map\n        csvFormats.put(\"modified\", csvFormat);\n\n        // Simulate creating a CSVRecord with headers and values\n        String[] headers = {\"header1\", \"header2\", \"header3\"};\n        String[] values = {\"value1\", \"value2\", \"value3\"};\n        CSVRecord csvRecord = new CSVRecord(null, values, headers, null, 0, 0);\n\n        // Additional complexity: Iterate over headers and check if they are mapped\n        for (String header : headers) {\n            boolean isMappedHeader = csvRecord.isMapped(header);\n            System.out.println(\"Header \" + header + \" is mapped: \" + isMappedHeader);\n        }\n\n        // Use the read method\n        /* read */ boolean isMapped = csvRecord.isMapped(\"header1\");\n\n        // Print the result\n        System.out.println(\"Is 'header1' mapped: \" + isMapped);\n\n        // Additional complexity: Manipulate values and headers\n        for (int i = 0; i < values.length; i++) {\n            System.out.println(\"Value at index \" + i + \": \" + values[i]);\n        }\n\n        // Additional complexity: Perform operations on the map\n        for (Map.Entry<String, CSVFormat> entry : csvFormats.entrySet()) {\n            System.out.println(\"CSVFormat key: \" + entry.getKey());\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n        \n        // Use the write method\n        /* write */ csvFormat = csvFormat.withAllowDuplicateHeaderNames(true);\n        \n        // Since CSVRecord is usually obtained by parsing a CSV file, we need to simulate a record.\n        // Let's create a dummy CSVRecord for demonstration purposes.\n        String[] headers = {\"header1\", \"header2\"};\n        String[] values = {\"value1\", \"value2\"};\n        CSVRecord csvRecord = new CSVRecord(null, values, headers, null, 0, 0);\n        \n        // Use the read method\n        /* read */ boolean isMapped = csvRecord.isMapped(\"header1\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}