{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a null string\n        CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n        \n        // Create a CSVRecord for demonstration, normally you would parse it from a CSV file\n        CSVRecord record = new CSVRecord(format, Arrays.asList(\"value1\", \"NULL\", \"value3\"), null, 0, 0);\n        \n        // Write operation: Configure the CSVFormat to use \"NULL\" as the null string\n        /* write */ format = format.withNullString(\"NULL\");\n        \n        // Additional complexity: Use a list to store and manipulate CSVRecords\n        List<CSVRecord> records = new ArrayList<>();\n        records.add(record);\n        \n        // Perform some operations on the list\n        for (CSVRecord rec : records) {\n            System.out.println(\"Record size: \" + rec.size());\n        }\n        \n        // Add more records to increase complexity\n        CSVRecord record2 = new CSVRecord(format, Arrays.asList(\"value4\", \"value5\", \"NULL\"), null, 1, 0);\n        records.add(record2);\n        \n        // Perform additional operations\n        int totalSize = 0;\n        for (CSVRecord rec : records) {\n            totalSize += rec.size();\n        }\n        System.out.println(\"Total size of all records: \" + totalSize);\n        \n        // Read operation: Check if a specific index is set in the CSVRecord\n        /* read */ boolean isSet = record.isSet(1); // Check if the second element is set\n        \n        System.out.println(\"Is the second element set? \" + isSet);\n        \n        // Further complexity: Modify the records list\n        records.remove(record2);\n        System.out.println(\"Records count after removal: \" + records.size());\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with a null string\n        CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n        \n        // Create a CSVRecord for demonstration, normally you would parse it from a CSV file\n        CSVRecord record = new CSVRecord(format, Arrays.asList(\"value1\", \"NULL\", \"value3\"), null, 0, 0);\n        \n        // Write operation: Configure the CSVFormat to use \"NULL\" as the null string\n        /* write */ format = format.withNullString(\"NULL\");\n        \n        // Read operation: Check if a specific index is set in the CSVRecord\n        /* read */ boolean isSet = record.isSet(1); // Check if the second element is set\n        \n        System.out.println(\"Is the second element set? \" + isSet);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}