{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignoring header case\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Create a mock CSVRecord for demonstration purposes\n        CSVRecord record = new CSVRecord(null, null, format);\n\n        // Additional complex code\n        ArrayList<String> dataList = new ArrayList<>();\n        dataList.add(\"Data1\");\n        dataList.add(\"Data2\");\n\n        HashMap<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"Key1\", 100);\n        dataMap.put(\"Key2\", 200);\n\n        for (String data : dataList) {\n            System.out.println(\"Processing: \" + data);\n            if (dataMap.containsKey(data)) {\n                System.out.println(\"Found in map: \" + dataMap.get(data));\n            }\n        }\n\n        // Adding more complexity with nested loops\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 2; j++) {\n                System.out.println(\"Nested Loop i: \" + i + \", j: \" + j);\n            }\n        }\n\n        // Check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped();\n        System.out.println(\"Is record mapped: \" + isMapped);\n\n        // Further operations with data structures\n        ArrayList<Integer> intList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            intList.add(i * 10);\n        }\n\n        for (int num : intList) {\n            System.out.println(\"Number: \" + num);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignoring header case\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Create a mock CSVRecord for demonstration purposes\n        CSVRecord record = new CSVRecord(null, null, format);\n\n        // Check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped();\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}