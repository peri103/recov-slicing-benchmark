{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Create a list to demonstrate additional complexity\n        List<String> demoList = new ArrayList<>();\n        demoList.add(\"Hello\");\n        demoList.add(\"World\");\n\n        // Use the write method to configure the CSVFormat\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Additional operations with the demoList\n        for (String str : demoList) {\n            System.out.println(\"List item: \" + str);\n        }\n\n        // Create a CSVRecord instance (normally this would be obtained from parsing a CSV file)\n        // For demonstration purposes, we'll create a mock CSVRecord with a single column\n        String[] values = {\"value\"};\n        CSVRecord record = new CSVRecord(null, values, null, 0, 0);\n\n        // Perform some unrelated operations to increase complexity\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Use the read method to check if a column is set\n        /* read */ boolean isSet = record.isSet(0);\n        \n        // Output the result\n        System.out.println(\"Is column set: \" + isSet);\n\n        // Further operations to demonstrate complexity\n        List<Integer> numberList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numberList.add(i * 2);\n        }\n\n        for (Integer number : numberList) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to configure the CSVFormat\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Create a CSVRecord instance (normally this would be obtained from parsing a CSV file)\n        // For demonstration purposes, we'll create a mock CSVRecord with a single column\n        String[] values = {\"value\"};\n        CSVRecord record = new CSVRecord(null, values, null, 0, 0);\n\n        // Use the read method to check if a column is set\n        /* read */ boolean isSet = record.isSet(0);\n        \n        // Output the result\n        System.out.println(isSet);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}