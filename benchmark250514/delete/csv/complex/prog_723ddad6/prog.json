{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with trimming enabled\n        CSVFormat format = CSVFormat.DEFAULT.withTrim();\n\n        // Create a CSVRecord for demonstration purposes\n        // Normally, CSVRecord is obtained by parsing CSV data\n        // Here we simulate records with two fields: \" Name \" and \" Age \"\n        List<String> recordData = Arrays.asList(\" Name \", \" Age \");\n        List<CSVRecord> records = null;\n        try {\n            records = CSVFormat.DEFAULT.parse(recordData.iterator()).getRecords();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Additional CSV operations\n        CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(\"Name\", \"Age\");\n        CSVFormat formatWithQuote = formatWithHeader.withQuote('\"');\n\n        // Simulate additional records and operations\n        List<String> extraRecordData = Arrays.asList(\" John \", \" 30 \");\n        List<CSVRecord> extraRecords = null;\n        try {\n            extraRecords = formatWithQuote.parse(extraRecordData.iterator()).getRecords();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Perform operations on extraRecords\n        for (CSVRecord extraRecord : extraRecords) {\n            System.out.println(\"Extra Record - Name: \" + extraRecord.get(\"Name\") + \", Age: \" + extraRecord.get(\"Age\"));\n        }\n\n        /* write */ format = format.withTrim();\n\n        // Check if a field is mapped in the original record\n        if (records != null && !records.isEmpty()) {\n            CSVRecord record = records.get(0);\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n            System.out.println(\"Is 'Name' mapped: \" + isMapped);\n        }\n\n        // Unrelated complex logic\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // More complex logic with loops and conditions\n        for (int i = 0; i < numbers.length; i++) {\n            if (numbers[i] % 2 == 0) {\n                System.out.println(\"Even number: \" + numbers[i]);\n            } else {\n                System.out.println(\"Odd number: \" + numbers[i]);\n            }\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with trimming enabled\n        CSVFormat format = CSVFormat.DEFAULT.withTrim();\n\n        // Create a CSVRecord for demonstration purposes\n        // Normally, CSVRecord is obtained by parsing CSV data\n        // Here we simulate a record with two fields: \" Name \" and \" Age \"\n        String[] recordData = {\" Name \", \" Age \"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(Arrays.asList(recordData)).getRecords().get(0);\n\n        /* write */ format = format.withTrim();\n\n        // Check if a field is mapped\n        /* read */ boolean isMapped = record.isMapped(\"Name\");\n\n        // Output the result\n        System.out.println(\"Is 'Name' mapped: \" + isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrim",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}