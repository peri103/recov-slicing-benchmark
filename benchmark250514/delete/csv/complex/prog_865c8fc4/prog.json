{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a comment\");\n\n        // Simulate reading from CSVRecord\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        CSVRecord record = new CSVRecord(format, recordValues, null, 0, 0);\n\n        // Additional complex logic: create a map and perform operations\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"A\", 1);\n        map.put(\"B\", 2);\n        map.put(\"C\", 3);\n\n        // Iterate over map and perform calculations\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            sum += entry.getValue();\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Perform some unrelated operations\n        int[] numbers = {10, 20, 30, 40, 50};\n        for (int num : numbers) {\n            System.out.println(\"Number: \" + num);\n        }\n\n        // Retrieve the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        System.out.println(\"CSV Comment: \" + comment);\n\n        // Additional complex logic: manipulate a list\n        List<Integer> numberList = Arrays.asList(100, 200, 300);\n        int product = 1;\n        for (int number : numberList) {\n            product *= number;\n            System.out.println(\"Number in list: \" + number);\n        }\n        System.out.println(\"Product of numbers in list: \" + product);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a comment\");\n\n        // Simulate reading from CSVRecord\n        List<String> recordValues = Arrays.asList(\"value1\", \"value2\");\n        CSVRecord record = new CSVRecord(format, recordValues, null, 0, 0);\n\n        // Retrieve the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        System.out.println(comment);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}