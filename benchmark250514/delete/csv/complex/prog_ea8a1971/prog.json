{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing duplicate header names\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Simulate a CSVRecord (normally this would be obtained from parsing a CSV file)\n        CSVRecord record = new CSVRecord(null, null, format, 0, false);\n\n        // Create a list and a map to add complexity\n        ArrayList<String> list = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n\n        // Add elements to the list\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n\n        // Add elements to the map\n        map.put(\"apple\", 1);\n        map.put(\"banana\", 2);\n        map.put(\"cherry\", 3);\n\n        // Perform some operations\n        for (String fruit : list) {\n            if (map.containsKey(fruit)) {\n                System.out.println(fruit + \" is in the map with value \" + map.get(fruit));\n            }\n        }\n\n        // Check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped();\n\n        // Output the result\n        System.out.println(\"CSVRecord is mapped: \" + isMapped);\n\n        // Additional operations to increase complexity\n        list.add(\"date\");\n        map.put(\"date\", 4);\n        for (String fruit : list) {\n            if (map.containsKey(fruit)) {\n                System.out.println(fruit + \" is in the map with value \" + map.get(fruit));\n            }\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing duplicate header names\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowDuplicateHeaderNames(true);\n\n        // Simulate a CSVRecord (normally this would be obtained from parsing a CSV file)\n        CSVRecord record = new CSVRecord(null, null, format, 0, false);\n\n        // Check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped();\n        \n        // Output the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}