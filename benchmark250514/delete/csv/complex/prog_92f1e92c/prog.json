{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Create a CSVRecord object for demonstration purposes\n        // Normally, CSVRecord would be obtained from parsing a CSV file, but here we simulate it\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Create a list of CSV records for more complexity\n        ArrayList<CSVRecord> records = new ArrayList<>();\n        records.add(record);\n\n        // Introduce a HashMap to simulate some data processing\n        HashMap<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"header\", 1);\n        dataMap.put(\"anotherHeader\", 2);\n\n        // Iterate over the records and process them\n        for (CSVRecord rec : records) {\n            if (dataMap.containsKey(\"header\")) {\n                System.out.println(\"Processing record with header: \" + dataMap.get(\"header\"));\n            }\n        }\n\n        // Use the read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header\");\n\n        // Output the result\n        System.out.println(isMapped);\n\n        // Additional complexity: manipulate dataMap\n        for (String key : dataMap.keySet()) {\n            int value = dataMap.get(key);\n            System.out.println(\"Key: \" + key + \", Value: \" + value);\n            dataMap.put(key, value * 2);\n        }\n\n        // Print updated values\n        for (String key : dataMap.keySet()) {\n            System.out.println(\"Updated Key: \" + key + \", Updated Value: \" + dataMap.get(key));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Create a CSVRecord object for demonstration purposes\n        // Normally, CSVRecord would be obtained from parsing a CSV file, but here we simulate it\n        CSVRecord record = new CSVRecord(null, null, null, format);\n\n        // Use the read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header\");\n\n        // Output the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}