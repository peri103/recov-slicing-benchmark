{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Create a map to simulate header mapping\n        Map<String, Integer> headerMap = new HashMap<>();\n        headerMap.put(\"headerName\", 1);\n\n        // Simulate a CSVRecord with a header map\n        CSVRecord record = new CSVRecord(null, new String[]{\"value1\"}, headerMap, 0, format);\n\n        // Unrelated complex operations\n        Map<String, String> dataMap = new HashMap<>();\n        dataMap.put(\"key1\", \"value1\");\n        dataMap.put(\"key2\", \"value2\");\n\n        for (Map.Entry<String, String> entry : dataMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Use write method to configure the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n\n        // Additional logic to simulate complex operations\n        String concatenatedValues = \"\";\n        for (String value : dataMap.values()) {\n            concatenatedValues += value + \";\";\n        }\n        System.out.println(\"Concatenated Values: \" + concatenatedValues);\n\n        // Use read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"headerName\");\n\n        // Print the result\n        System.out.println(\"Is Mapped: \" + isMapped);\n\n        // Further unrelated operations\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of 1 to 10: \" + sum);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use write method to configure the format\n        /* write */ format = format.withIgnoreHeaderCase(true);\n        \n        // Simulate a CSVRecord object (normally obtained after parsing a CSV file)\n        CSVRecord record = new CSVRecord(null, null, null, 0, format);\n        \n        // Use read method to check if the record is mapped\n        /* read */ boolean isMapped = record.isMapped(\"headerName\");\n        \n        // Print the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}