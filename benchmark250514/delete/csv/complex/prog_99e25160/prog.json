{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing duplicate header names\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n        /* write */ csvFormat = csvFormat.withAllowDuplicateHeaderNames(true);\n\n        // Create a CSVRecord for demonstration\n        String[] values = {\"value1\", \"value2\"};\n        String[] headers = {\"header1\", \"header2\"};\n        CSVRecord record = new CSVRecord(null, values, headers, null, null);\n\n        // Create a complex data structure\n        HashMap<String, ArrayList<String>> dataMap = new HashMap<>();\n        dataMap.put(\"key1\", new ArrayList<>());\n        dataMap.get(\"key1\").add(\"element1\");\n        dataMap.get(\"key1\").add(\"element2\");\n\n        // Perform operations on the complex data structure\n        for (String key : dataMap.keySet()) {\n            ArrayList<String> list = dataMap.get(key);\n            for (String element : list) {\n                System.out.println(\"Processing: \" + element);\n            }\n        }\n\n        // More unrelated code for complexity\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum: \" + sum);\n\n        // Check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header1\");\n        System.out.println(isMapped);\n\n        // Further operations for complexity\n        ArrayList<Integer> numberList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numberList.add(i * 2);\n        }\n        for (int number : numberList) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing duplicate header names\n        CSVFormat csvFormat = CSVFormat.DEFAULT;\n        /* write */ csvFormat = csvFormat.withAllowDuplicateHeaderNames(true);\n\n        // Create a CSVRecord for demonstration\n        String[] values = {\"value1\", \"value2\"};\n        String[] headers = {\"header1\", \"header2\"};\n        CSVRecord record = new CSVRecord(null, values, headers, null, null);\n\n        // Check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header1\");\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}