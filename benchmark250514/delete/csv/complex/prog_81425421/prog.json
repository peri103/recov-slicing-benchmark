{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object with a specific delimiter\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withDelimiter(';');\n\n        // Unrelated complex code: Working with a list of integers\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Simulate a CSVRecord using the format with the delimiter\n        // Here we use a simple string to demonstrate the read operation\n        // In a real scenario, CSVRecord would be obtained from parsing a CSV file\n        String csvData = \"value1;value2;value3\";\n        CSVRecord record = format.parse(csvData).getRecords().get(0);\n\n        // More unrelated complex code: Manipulating a list of strings\n        List<String> strings = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        for (String str : strings) {\n            System.out.println(\"Fruit: \" + str);\n        }\n\n        // Read the CSVRecord\n        /* read */ String recordString = record.toString();\n\n        // Output the result\n        System.out.println(recordString);\n\n        // Additional complex code: Using a loop to perform calculations\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers 1 to 5: \" + product);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object with a specific delimiter\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withDelimiter(';');\n\n        // Simulate a CSVRecord using the format with the delimiter\n        // Here we use a simple string to demonstrate the read operation\n        // In a real scenario, CSVRecord would be obtained from parsing a CSV file\n        String csvData = \"value1;value2;value3\";\n        CSVRecord record = format.parse(csvData).getRecords().get(0);\n\n        // Read the CSVRecord\n        /* read */ String recordString = record.toString();\n\n        // Output the result\n        System.out.println(recordString);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withDelimiter",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    }
}