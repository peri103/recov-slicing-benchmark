{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignoring header case\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Create a mock CSVRecord to demonstrate isMapped\n        CSVRecord record = new CSVRecord(null, new String[]{\"Header1\", \"Header2\"}, null, 0, 0);\n\n        // Additional logic to make the program more complex\n        List<HashMap<String, String>> dataList = new ArrayList<>();\n        HashMap<String, String> map1 = new HashMap<>();\n        map1.put(\"header1\", \"value1\");\n        map1.put(\"header2\", \"value2\");\n        dataList.add(map1);\n\n        HashMap<String, String> map2 = new HashMap<>();\n        map2.put(\"header1\", \"value3\");\n        map2.put(\"header2\", \"value4\");\n        dataList.add(map2);\n\n        // Process dataList to simulate complex logic\n        for (HashMap<String, String> data : dataList) {\n            for (String key : data.keySet()) {\n                System.out.println(\"Processing key: \" + key + \", value: \" + data.get(key));\n            }\n        }\n\n        // Simulate some data transformation\n        List<String> transformedData = new ArrayList<>();\n        for (HashMap<String, String> data : dataList) {\n            transformedData.add(data.get(\"header1\") + \"-\" + data.get(\"header2\"));\n        }\n\n        // Further processing of transformed data\n        for (String data : transformedData) {\n            System.out.println(\"Transformed data: \" + data);\n        }\n\n        // Check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header1\");\n        System.out.println(isMapped);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignoring header case\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Create a mock CSVRecord to demonstrate isMapped\n        CSVRecord record = new CSVRecord(null, new String[]{\"Header1\", \"Header2\"}, null, 0, 0);\n\n        // Check if a header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"header1\");\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}