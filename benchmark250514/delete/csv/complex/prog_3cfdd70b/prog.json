{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default settings\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Simulate some unrelated operations to add complexity\n        Map<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"apple\", 10);\n        dataMap.put(\"banana\", 20);\n        dataMap.put(\"cherry\", 30);\n\n        int total = 0;\n        for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {\n            total += entry.getValue();\n        }\n        System.out.println(\"Total value: \" + total);\n\n        // Simulate a CSVRecord for demonstration\n        // Normally, CSVRecord is obtained by parsing a CSV file, but here we create a dummy object\n        CSVRecord record = new CSVRecord(null, null, format, 0, null);\n\n        // Perform more unrelated operations to increase complexity\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Use the read method to check if a specific header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"dummyHeader\");\n\n        // Output the result\n        System.out.println(\"Is 'dummyHeader' mapped: \" + isMapped);\n\n        // Additional complex logic\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of first 5 numbers: \" + product);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with default settings\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreHeaderCase();\n\n        // Simulate a CSVRecord for demonstration\n        // Normally, CSVRecord is obtained by parsing a CSV file, but here we create a dummy object\n        CSVRecord record = new CSVRecord(null, null, format, 0, null);\n\n        // Use the read method to check if a specific header is mapped\n        /* read */ boolean isMapped = record.isMapped(\"dummyHeader\");\n\n        // Output the result\n        System.out.println(isMapped);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}