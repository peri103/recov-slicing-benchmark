{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Initialize an unrelated ArrayList\n        ArrayList<String> unrelatedList = new ArrayList<>();\n        unrelatedList.add(\"Unrelated1\");\n        unrelatedList.add(\"Unrelated2\");\n\n        // Perform operations on unrelatedList\n        for (String item : unrelatedList) {\n            System.out.println(\"Processing unrelated item: \" + item);\n        }\n\n        /* write */\n        format = format.withIgnoreEmptyLines(true);\n\n        // Add some unrelated logic for complexity\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 10: \" + sum);\n\n        // Prepare a mock CSV record for reading\n        String[] recordValues = {\"value1\", \"value2\"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(java.util.Arrays.asList(recordValues)).iterator().next();\n\n        // Perform more unrelated operations\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 10);\n        }\n        for (int number : numbers) {\n            System.out.println(\"Number in unrelated list: \" + number);\n        }\n\n        /* read */\n        boolean isConsistent = record.isConsistent();\n\n        System.out.println(\"Is the CSV record consistent? \" + isConsistent);\n\n        // Additional unrelated logic\n        String message = \"Program has executed successfully!\";\n        System.out.println(message);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat object\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        /* write */\n        format = format.withIgnoreEmptyLines(true);\n\n        // Prepare a mock CSV record for reading\n        // Since CSVRecord is typically obtained from parsing a CSV file, we simulate it here\n        String[] recordValues = {\"value1\", \"value2\"};\n        CSVRecord record = CSVFormat.DEFAULT.parse(java.util.Arrays.asList(recordValues)).iterator().next();\n\n        /* read */\n        boolean isConsistent = record.isConsistent();\n\n        System.out.println(isConsistent);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}