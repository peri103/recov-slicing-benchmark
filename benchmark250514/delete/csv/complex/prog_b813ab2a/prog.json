{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing duplicate header names\n        CSVFormat csvFormat = CSVFormat.DEFAULT.withAllowDuplicateHeaderNames(true);\n\n        // Create a CSVRecord for demonstration purposes\n        // In a real scenario, this would be populated from a CSV file\n        String[] headers = {\"header1\", \"header1\", \"header2\"};\n        String[] values = {\"value1\", \"value2\", \"value3\"};\n        CSVRecord csvRecord = new CSVRecord(headers, values);\n\n        // Write operation\n        /* write */ csvFormat = csvFormat.withAllowDuplicateHeaderNames(true);\n\n        // Simulate some additional logic\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // More complex logic\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"apple\");\n        stringList.add(\"banana\");\n        stringList.add(\"cherry\");\n\n        for (String fruit : stringList) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n\n        boolean isSet = false;\n        // Read operation\n        /* read */ isSet = csvRecord.isSet(\"header1\");\n        \n        System.out.println(\"Is 'header1' set: \" + isSet);\n\n        // Additional operations\n        List<String> reversedList = new ArrayList<>();\n        for (int i = stringList.size() - 1; i >= 0; i--) {\n            reversedList.add(stringList.get(i));\n        }\n\n        for (String fruit : reversedList) {\n            System.out.println(\"Reversed Fruit: \" + fruit);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing duplicate header names\n        CSVFormat csvFormat = CSVFormat.DEFAULT.withAllowDuplicateHeaderNames(true);\n\n        // Create a CSVRecord for demonstration purposes\n        // In a real scenario, this would be populated from a CSV file\n        String[] headers = {\"header1\", \"header1\", \"header2\"};\n        String[] values = {\"value1\", \"value2\", \"value3\"};\n        CSVRecord csvRecord = new CSVRecord(headers, values);\n\n        // Write operation\n        /* write */ csvFormat = csvFormat.withAllowDuplicateHeaderNames(true);\n\n        // Read operation\n        /* read */ boolean isSet = csvRecord.isSet(\"header1\");\n        \n        System.out.println(isSet);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowDuplicateHeaderNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}