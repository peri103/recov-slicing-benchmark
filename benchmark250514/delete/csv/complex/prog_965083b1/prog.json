{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to allow missing column names\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Create a list of CSVRecords for demonstration purposes\n        ArrayList<CSVRecord> records = new ArrayList<>();\n\n        // Adding mock CSVRecords to the list\n        for (int i = 0; i < 5; i++) {\n            CSVRecord record = new CSVRecord(format, new Object[0], new String[0], i, i);\n            records.add(record);\n        }\n\n        // Perform some operations on the records\n        for (CSVRecord rec : records) {\n            // Check if a column is set using the read method\n            /* read */ boolean isColumnSet = rec.isSet(\"ColumnName\");\n            System.out.println(\"Record \" + rec.getRecordNumber() + \" column set: \" + isColumnSet);\n        }\n\n        // Additional complexity: manipulating a list of integers\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 10);\n        }\n\n        // Calculate the sum of numbers\n        int sum = 0;\n        for (Integer num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Find the maximum number\n        int maxNumber = Integer.MIN_VALUE;\n        for (Integer num : numbers) {\n            if (num > maxNumber) {\n                maxNumber = num;\n            }\n        }\n        System.out.println(\"Maximum number: \" + maxNumber);\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to allow missing column names\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Assuming we have a CSVRecord to read from, normally this would come from parsing a CSV file\n        // For demonstration purposes, we will create a mock CSVRecord\n        CSVRecord record = new CSVRecord(format, new Object[0], new String[0], 0, 0);\n\n        // Use the read method to check if a column is set\n        /* read */ boolean isColumnSet = record.isSet(\"ColumnName\");\n\n        // Print the result\n        System.out.println(isColumnSet);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}