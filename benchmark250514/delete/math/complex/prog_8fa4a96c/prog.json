{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an array to create a diagonal matrix\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n\n        // Create a diagonal matrix using the write method\n        /* write */ RealMatrix diagonalMatrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Additional matrix operations\n        double[][] data = {{1, 2}, {3, 4}};\n        RealMatrix matrixA = MatrixUtils.createRealMatrix(data);\n        RealVector vectorB = new ArrayRealVector(new double[]{5, 6});\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = matrixA.operate(vectorB);\n        System.out.println(\"Matrix-vector multiplication result:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Manipulate the diagonal matrix before reading\n        diagonalMatrix.setEntry(0, 0, 10.0);  // Modify one of the diagonal elements\n\n        // Read the diagonal matrix using the read method\n        /* read */ RealMatrix readMatrix = diagonalMatrix;  // In this context, the getDiagonalMatrix method is not explicitly provided by MatrixUtils. We assume the matrix created is the one we need to read.\n\n        // Print the diagonal values to verify\n        System.out.println(\"Diagonal matrix values:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, i));\n        }\n\n        // Additional calculations with the diagonal matrix\n        RealMatrix transposedMatrix = readMatrix.transpose();\n        System.out.println(\"Transposed diagonal matrix values:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an array to create a diagonal matrix\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n\n        // Create a diagonal matrix using the write method\n        /* write */ RealMatrix diagonalMatrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Read the diagonal matrix using the read method\n        /* read */ RealMatrix readMatrix = diagonalMatrix;  // In this context, the getDiagonalMatrix method is not explicitly provided by MatrixUtils. We assume the matrix created is the one we need to read.\n\n        // Print the diagonal values to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}