{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Step 1: Create a sparse real vector using MatrixUtils\n        double[] data = {1.0, 0.0, 3.0, 0.0, 5.0};\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Step 2: Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n\n        // Step 3: Create a dense real matrix\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n\n        // Step 4: Perform matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Step 5: Retrieve the sparse real vector\n        /* read */ RealVector retrievedVector = vector; // Directly using the created vector as there is no specific get method in MatrixUtils\n\n        // Step 6: Use the retrieved vector in a computation\n        double dotProduct = retrievedVector.dotProduct(scaledVector);\n        System.out.println(\"Dot Product of Retrieved and Scaled Vector: \" + dotProduct);\n\n        // Additional unrelated operations to increase complexity\n        RealVector sumVector = retrievedVector.add(scaledVector);\n        System.out.println(\"Sum Vector: \" + sumVector);\n\n        RealVector differenceVector = retrievedVector.subtract(scaledVector);\n        System.out.println(\"Difference Vector: \" + differenceVector);\n\n        // Print the retrieved vector\n        System.out.println(\"Retrieved Vector: \" + retrievedVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse real vector using MatrixUtils\n        double[] data = {1.0, 0.0, 3.0, 0.0, 5.0};\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n        \n        // Retrieve the sparse real vector using MatrixUtils\n        /* read */ RealVector retrievedVector = vector; // Directly using the created vector as there is no specific get method in MatrixUtils\n        \n        // Print the retrieved vector\n        System.out.println(\"Retrieved Vector: \" + retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}