{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix dimensions\n        int rows = 3;\n        int columns = 3;\n        \n        // Create a sparse matrix using the MatrixUtils class\n        /* write */ OpenMapRealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns);\n        \n        // Populate the sparse matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n        \n        // Create another matrix for demonstration\n        RealMatrix denseMatrix = new Array2DRowRealMatrix(rows, columns);\n        denseMatrix.setEntry(0, 1, 4.0);\n        denseMatrix.setEntry(1, 2, 5.0);\n        denseMatrix.setEntry(2, 0, 6.0);\n        \n        // Perform matrix addition\n        RealMatrix addedMatrix = sparseMatrix.add(denseMatrix);\n        \n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Create a vector for matrix-vector multiplication\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Perform matrix-vector multiplication\n        RealVector resultVector = denseMatrix.operate(vector);\n        \n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Retrieve the sparse matrix using the MatrixUtils class\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSparseMatrix(sparseMatrix);\n        \n        // Print the retrieved matrix values\n        System.out.println(\"Retrieved Sparse Matrix:\");\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix dimensions\n        int rows = 3;\n        int columns = 3;\n        \n        // Create a sparse matrix using the MatrixUtils class\n        /* write */ OpenMapRealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns);\n        \n        // Populate the sparse matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n        \n        // Retrieve the sparse matrix using the MatrixUtils class\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSparseMatrix(sparseMatrix);\n        \n        // Print the retrieved matrix values\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}