{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse matrix with dimensions and values\n        int numRows = 3;\n        int numCols = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 2.0, 0.0},\n            {0.0, 0.0, 3.0}\n        };\n\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n\n        // Creating another matrix for operations\n        double[][] otherData = {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        };\n        RealMatrix otherMatrix = MatrixUtils.createRealMatrix(otherData);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = sparseMatrix.add(otherMatrix);\n\n        // Create a vector\n        double[] vectorData = {1.0, 2.0, 3.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = resultMatrix.operate(vector);\n\n        // Print the resulting vector\n        System.out.println(\"Resulting Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Additional complex operations\n        double[][] transposedData = new double[numCols][numRows];\n        for (int i = 0; i < numRows; i++) {\n            for (int j = 0; j < numCols; j++) {\n                transposedData[j][i] = data[i][j];\n            }\n        }\n        RealMatrix transposedMatrix = MatrixUtils.createRealMatrix(transposedData);\n\n        // Perform matrix subtraction\n        RealMatrix subtractedMatrix = transposedMatrix.subtract(resultMatrix);\n\n        // Print the subtracted matrix\n        System.out.println(\"Subtracted Matrix:\");\n        for (int i = 0; i < subtractedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < subtractedMatrix.getColumnDimension(); j++) {\n                System.out.print(subtractedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Assuming getSparseMatrix is a method that retrieves the matrix\n        // Here, we simulate the retrieval by directly using the sparseMatrix reference\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix;\n\n        // Print the matrix to verify\n        System.out.println(\"Retrieved Sparse Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse matrix with dimensions and values\n        int numRows = 3;\n        int numCols = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 2.0, 0.0},\n            {0.0, 0.0, 3.0}\n        };\n\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n\n        // Assuming getSparseMatrix is a method that retrieves the matrix\n        // Here, we simulate the retrieval by directly using the sparseMatrix reference\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix;\n\n        // Print the matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}