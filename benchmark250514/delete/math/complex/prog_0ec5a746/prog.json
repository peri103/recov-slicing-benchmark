{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        \n        /* write */ BlockRealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        \n        // Manipulate the matrix using a visitor to add 1 to each element\n        matrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n            public double visit(int row, int column, double value) {\n                return value + 1;\n            }\n            public double end() {\n                return 0;\n            }\n        });\n        \n        // Calculate the sum of all elements using a preserving visitor\n        final double[] sum = {0};\n        matrix.walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n            public void visit(int row, int column, double value) {\n                sum[0] += value;\n            }\n            public double end() {\n                return sum[0];\n            }\n        });\n        \n        System.out.println(\"Sum of all elements: \" + sum[0]);\n        \n        // Create another matrix and perform matrix multiplication\n        double[][] data2 = { {5.0, 6.0}, {7.0, 8.0} };\n        BlockRealMatrix matrix2 = MatrixUtils.createBlockRealMatrix(data2);\n        RealMatrix resultMatrix = matrix.multiply(matrix2);\n        \n        System.out.println(\"Result of matrix multiplication:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Additional operations to make the program more complex\n        double[][] data3 = { {9.0, 10.0}, {11.0, 12.0} };\n        BlockRealMatrix matrix3 = MatrixUtils.createBlockRealMatrix(data3);\n        RealMatrix addedMatrix = matrix.add(matrix3);\n        \n        System.out.println(\"Result of matrix addition:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        /* read */ BlockRealMatrix readMatrix = MatrixUtils.getBlockRealMatrix(matrix.getData());\n        \n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        \n        /* write */ BlockRealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        \n        /* read */ BlockRealMatrix readMatrix = MatrixUtils.getBlockRealMatrix(matrix.getData());\n        \n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createBlockRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getBlockRealMatrix"
    }
}