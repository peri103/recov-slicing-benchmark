{
    "java_code": "import org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using MatrixUtils\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Create another vector for demonstration purposes\n        OpenMapRealVector anotherVector = MatrixUtils.createOpenMapRealVector(new double[]{4.0, 5.0, 6.0});\n        \n        // Perform some operations on the vectors\n        RealVector sumVector = vector.add(anotherVector);\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        \n        // Print the results of operations\n        System.out.println(\"Sum Vector: \" + sumVector);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n\n        // Insert unrelated code to make the program more complex\n        double[] complexArray = new double[10];\n        for (int i = 0; i < complexArray.length; i++) {\n            complexArray[i] = Math.random() * 100;\n        }\n\n        double totalSum = 0;\n        for (double num : complexArray) {\n            totalSum += num;\n        }\n\n        System.out.println(\"Total sum of complexArray: \" + totalSum);\n\n        // Read the OpenMapRealVector using the original read method\n        /* read */ double value = vector.getEntry(0);\n        \n        System.out.println(\"First entry of original vector: \" + value);\n        \n        // Perform more unrelated operations\n        for (int i = 0; i < complexArray.length; i++) {\n            complexArray[i] = Math.sqrt(complexArray[i]);\n        }\n\n        for (double num : complexArray) {\n            System.out.println(\"Square root: \" + num);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using MatrixUtils\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Read the OpenMapRealVector using a method (simulated here as there is no direct 'get' method in MatrixUtils)\n        /* read */ double value = vector.getEntry(0);\n        \n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    }
}