{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a data array for the sparse vector\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Initialize a 2x2 matrix\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        \n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n        \n        // Output the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Create the sparse vector\n        /* write */ SparseRealVector sparseVector = (SparseRealVector) MatrixUtils.createSparseRealVector(data);\n        \n        // Perform some unrelated operations\n        double[] additionalData = {4.0, 5.0, 6.0};\n        RealVector additionalVector = MatrixUtils.createRealVector(additionalData);\n        RealVector sumVector = sparseVector.add(additionalVector);\n        \n        // Output the sum vector\n        System.out.println(\"Sum Vector:\");\n        for (int i = 0; i < sumVector.getDimension(); i++) {\n            System.out.print(sumVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Read the sparse vector\n        /* read */ RealVector readVector = sparseVector;  // This assumes getSparseRealVector returns the same vector\n        \n        // Output the read vector\n        System.out.println(\"Read Sparse Vector:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.print(readVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Perform another operation on the read vector\n        RealVector scaledVector = readVector.mapMultiply(2.0);\n        \n        // Output the scaled vector\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ SparseRealVector sparseVector = (SparseRealVector) MatrixUtils.createSparseRealVector(data);\n        \n        /* read */ RealVector readVector = sparseVector;  // This assumes getSparseRealVector returns the same vector\n        \n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}