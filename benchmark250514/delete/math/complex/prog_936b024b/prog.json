{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Perform some operations on the matrix\n        RealVector vector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector resultVector = matrix.operate(vector);\n        \n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Modify the matrix using a visitor\n        matrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                return value + 1.0; // Increment each element by 1\n            }\n\n            @Override\n            public double end() {\n                return 0;\n            }\n        });\n\n        // Perform additional matrix operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix addedMatrix = matrix.add(identityMatrix);\n\n        // Print the added matrix\n        System.out.println(\"Matrix after addition with identity matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */ RealMatrix readMatrix = MatrixUtils.getDiagonalMatrix(matrix);\n        \n        // Print the diagonal entries of the read matrix\n        System.out.println(\"Diagonal entries of the read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n        /* read */ RealMatrix readMatrix = MatrixUtils.getDiagonalMatrix(matrix);\n        \n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}