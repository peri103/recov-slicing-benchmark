{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a dense matrix for additional complexity\n        double[][] data = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };\n        RealMatrix denseMatrix = new Array2DRowRealMatrix(data);\n        \n        // Perform some operations on the dense matrix\n        RealMatrix transposedMatrix = denseMatrix.transpose();\n        RealMatrix scaledMatrix = denseMatrix.scalarMultiply(2.0);\n        \n        // Initialize the sparse matrix\n        RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(3, 3);\n        \n        // Fill the sparse matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n        \n        // More operations on the dense matrix\n        RealMatrix sumMatrix = denseMatrix.add(transposedMatrix);\n        RealMatrix diffMatrix = denseMatrix.subtract(scaledMatrix);\n        \n        /* write */ MatrixUtils.createSparseMatrix(3, 3);\n\n        // Some calculations with results from dense matrix operations\n        double traceSum = sumMatrix.getTrace();\n        double traceDiff = diffMatrix.getTrace();\n        System.out.println(\"Trace of sum matrix: \" + traceSum);\n        System.out.println(\"Trace of diff matrix: \" + traceDiff);\n\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix;\n\n        // Print the retrieved sparse matrix to verify\n        System.out.println(\"Sparse Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Further operations on dense matrix\n        RealMatrix multipliedMatrix = denseMatrix.multiply(transposedMatrix);\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse matrix\n        RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(3, 3);\n        \n        // Fill the sparse matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n\n        /* write */ MatrixUtils.createSparseMatrix(3, 3);\n        \n        /* read */ RealMatrix retrievedMatrix = sparseMatrix;\n        \n        // Print the retrieved matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}