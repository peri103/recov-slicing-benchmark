{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        \n        // Create a random matrix for additional complexity\n        Random random = new Random();\n        double[][] randomMatrixData = new double[3][3];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                randomMatrixData[i][j] = random.nextDouble() * 10;\n            }\n        }\n        RealMatrix randomMatrix = new Array2DRowRealMatrix(randomMatrixData);\n        \n        // Perform some operations on the random matrix\n        RealMatrix transposedMatrix = randomMatrix.transpose();\n        RealMatrix multipliedMatrix = randomMatrix.multiply(transposedMatrix);\n        \n        // Print random matrix and its operations\n        System.out.println(\"Random Matrix:\");\n        printMatrix(randomMatrix);\n        System.out.println(\"Transposed Matrix:\");\n        printMatrix(transposedMatrix);\n        System.out.println(\"Multiplied Matrix:\");\n        printMatrix(multipliedMatrix);\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n        \n        // Some additional operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix addedMatrix = matrix.add(identityMatrix);\n        \n        // Print the identity matrix and the added result\n        System.out.println(\"Identity Matrix:\");\n        printMatrix(identityMatrix);\n        System.out.println(\"Added Matrix:\");\n        printMatrix(addedMatrix);\n        \n        /* read */ double[] readDiagonal = matrix.getRow(0); // Assuming getDiagonalMatrix is a method to read diagonal (this is hypothetical as MatrixUtils does not have such a method)\n\n        System.out.println(\"Read Diagonal:\");\n        for (double value : readDiagonal) {\n            System.out.print(value + \" \");\n        }\n    }\n    \n    private static void printMatrix(RealMatrix matrix) {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n        \n        /* read */ double[] readDiagonal = matrix.getRow(0); // Assuming getDiagonalMatrix is a method to read diagonal (this is hypothetical as MatrixUtils does not have such a method)\n\n        for (double value : readDiagonal) {\n            System.out.print(value + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}