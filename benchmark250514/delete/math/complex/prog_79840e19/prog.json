{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        // Additional operations to make the program more complex\n        double[] additionalData = {4.0, 5.0, 6.0};\n        ArrayRealVector additionalVector = new ArrayRealVector(additionalData);\n        \n        // Perform vector addition\n        RealVector resultVector = vector.add(additionalVector);\n        System.out.println(\"Result of vector addition: \" + Arrays.toString(resultVector.toArray()));\n        \n        // Scalar multiplication\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled vector: \" + Arrays.toString(scaledVector.toArray()));\n        \n        // Dot product\n        double dotProduct = vector.dotProduct(additionalVector);\n        System.out.println(\"Dot product: \" + dotProduct);\n        \n        // Normalize the vector\n        RealVector normalizedVector = vector.unitVector();\n        System.out.println(\"Normalized vector: \" + Arrays.toString(normalizedVector.toArray()));\n        \n        /* read */ ArrayRealVector readVector = MatrixUtils.getArrayRealVector(vector.getDataRef());\n        \n        System.out.println(\"Read vector: \" + Arrays.toString(readVector.toArray()));\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        /* read */ ArrayRealVector readVector = MatrixUtils.getArrayRealVector(vector.getDataRef());\n        \n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    }
}