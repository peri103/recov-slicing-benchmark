{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize some data\n        double[] rowData = {1.0, 2.0, 3.0};\n        double[][] matrixData = {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Create a matrix using another method\n        RealMatrix matrix2 = new Array2DRowRealMatrix(matrixData);\n\n        // Perform some operations on matrix2\n        RealMatrix transposedMatrix = matrix2.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Add a row to matrix2\n        RealMatrix extendedMatrix = matrix2.appendRow(rowData);\n\n        // Perform some operations on extendedMatrix\n        System.out.println(\"Extended matrix:\");\n        for (int i = 0; i < extendedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < extendedMatrix.getColumnDimension(); j++) {\n                System.out.print(extendedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Original write operation\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n\n        // Some unrelated calculations\n        double determinant = matrix2.getDeterminant();\n        System.out.println(\"Determinant of matrix2: \" + determinant);\n\n        // Perform an operation on the original matrix\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        System.out.println(\"Scaled matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Original read operation\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n\n        // Display retrieved matrix\n        System.out.println(\"Retrieved matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] rowData = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n        \n        for (int i = 0; i < retrievedMatrix.getColumnDimension(); i++) {\n            System.out.print(retrievedMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}