{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] row = {1.0, 2.0, 3.0};\n\n        // Create a vector for additional complexity\n        RealVector vector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector resultVector = vector.mapMultiply(2.0);\n\n        // Print the original vector and the result vector\n        System.out.println(\"Original Vector: \");\n        for (int i = 0; i < vector.getDimension(); i++) {\n            System.out.print(vector.getEntry(i) + \" \");\n        }\n        System.out.println(\"\\nResult Vector (after multiplication): \");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Create another matrix for more complexity\n        RealMatrix additionalMatrix = MatrixUtils.createRowRealMatrix(new double[]{7.0, 8.0, 9.0});\n        RealMatrix sumMatrix = additionalMatrix.add(MatrixUtils.createRowRealMatrix(new double[]{1.0, 1.0, 1.0}));\n\n        // Print the sum matrix\n        System.out.println(\"Sum Matrix: \");\n        for (int i = 0; i < sumMatrix.getColumnDimension(); i++) {\n            System.out.print(sumMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(row);\n\n        // Perform some operations on the matrix\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n\n        // Print the scaled matrix\n        System.out.println(\"Scaled Matrix: \");\n        for (int i = 0; i < scaledMatrix.getColumnDimension(); i++) {\n            System.out.print(scaledMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n\n        // Continue with other unrelated calculations\n        double[] anotherRow = {10.0, 11.0, 12.0};\n        RealMatrix anotherMatrix = MatrixUtils.createRowRealMatrix(anotherRow);\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(scaledMatrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix: \");\n        for (int i = 0; i < multipliedMatrix.getColumnDimension(); i++) {\n            System.out.print(multipliedMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n\n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix.getData(), 0);\n\n        // Print the read matrix\n        System.out.println(\"Read Matrix: \");\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] row = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(row);\n        \n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix.getData(), 0);\n        \n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}