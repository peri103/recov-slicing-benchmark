{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(3, 1);\n        \n        // Create another matrix and vector for additional complexity\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}};\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(matrixData);\n        RealVector anotherVector = anotherMatrix.getColumnVector(1);\n        System.out.println(\"Another Vector: \" + anotherVector);\n\n        // Perform some operations on anotherMatrix\n        RealMatrix transposedMatrix = anotherMatrix.transpose();\n        System.out.println(\"Transposed Matrix: \");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Original write operation\n        /* write */ RealVector columnVector = MatrixUtils.createColumnRealVector(columnData);\n        matrix.setColumnVector(0, columnVector);\n\n        // Some unrelated calculations\n        double sum = 0.0;\n        for (int i = 0; i < columnData.length; i++) {\n            sum += columnData[i];\n        }\n        System.out.println(\"Sum of columnData: \" + sum);\n\n        // Original read operation\n        /* read */ RealVector readVector = matrix.getColumnVector(0);\n        System.out.println(\"Read Vector: \" + readVector);\n\n        // More operations on the original matrix\n        double[][] newMatrixData = {{7.0, 8.0}, {9.0, 10.0}, {11.0, 12.0}};\n        RealMatrix newMatrix = new Array2DRowRealMatrix(newMatrixData);\n        RealMatrix resultMatrix = matrix.multiply(newMatrix);\n        System.out.println(\"Resultant Matrix: \");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(3, 1);\n        \n        /* write */ RealVector columnVector = MatrixUtils.createColumnRealVector(columnData);\n        matrix.setColumnVector(0, columnVector);\n        \n        /* read */ RealVector readVector = matrix.getColumnVector(0);\n        \n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealVector"
    }
}