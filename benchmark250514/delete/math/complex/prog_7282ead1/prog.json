{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 2.0},\n            {2.0, 3.0}\n        };\n\n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Create another matrix for additional operations\n        double[][] data2 = {\n            {4.0, 5.0},\n            {5.0, 6.0}\n        };\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(data2);\n\n        // Perform some matrix operations\n        RealMatrix sumMatrix = symmetricMatrix.add(anotherMatrix);\n        RealMatrix productMatrix = symmetricMatrix.multiply(anotherMatrix);\n\n        // Create a vector for vector-matrix operations\n        double[] vectorData = {1.0, 2.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Multiply vector with symmetric matrix\n        RealVector resultVector = symmetricMatrix.operate(vector);\n\n        // Retrieve the symmetric matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the retrieved matrix to verify\n        System.out.println(\"Retrieved Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the result of vector-matrix multiplication\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Print the sum matrix\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the product matrix\n        System.out.println(\"Product Matrix:\");\n        for (int i = 0; i < productMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < productMatrix.getColumnDimension(); j++) {\n                System.out.print(productMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 2.0},\n            {2.0, 3.0}\n        };\n\n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Retrieve the symmetric matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the retrieved matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}