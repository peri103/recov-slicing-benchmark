{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0, 0, 1},\n            {0, 2, 0},\n            {3, 0, 0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Create a real vector for additional operations\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Perform some matrix-vector multiplication\n        RealVector resultVector = sparseMatrix.operate(vector);\n\n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Calculate the transpose of the matrix\n        RealMatrix transposeMatrix = sparseMatrix.transpose();\n\n        // Perform operations on the transpose\n        RealVector resultVectorTranspose = transposeMatrix.operate(vector);\n\n        // Print the result of operations on the transpose\n        System.out.println(\"Result of transpose matrix-vector multiplication:\");\n        for (int i = 0; i < resultVectorTranspose.getDimension(); i++) {\n            System.out.print(resultVectorTranspose.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the sparse matrix\n        /* read */ RealMatrix readMatrix = sparseMatrix;  // In this context, we directly use the created matrix\n\n        // Print the read matrix to verify\n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform some additional calculations with the read matrix\n        RealMatrix matrixProduct = readMatrix.multiply(transposeMatrix);\n\n        // Print the matrix product\n        System.out.println(\"Matrix product:\");\n        for (int i = 0; i < matrixProduct.getRowDimension(); i++) {\n            for (int j = 0; j < matrixProduct.getColumnDimension(); j++) {\n                System.out.print(matrixProduct.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0, 0, 1},\n            {0, 2, 0},\n            {3, 0, 0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Read the sparse matrix\n        /* read */ RealMatrix readMatrix = sparseMatrix;  // In this context, we directly use the created matrix\n\n        // Print the read matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}