{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a sample 2D array to create a triangular matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {0.0, 4.0, 5.0},\n            {0.0, 0.0, 6.0}\n        };\n\n        // Use the MatrixUtils class to create a triangular matrix\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Create a vector for matrix-vector multiplication\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = triangularMatrix.operate(vector);\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Modify matrix using a visitor\n        triangularMatrix.walkInRowOrder(new RealMatrixChangingVisitor() {\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // Initialization before visiting entries\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                // Modify each entry by adding 1\n                return value + 1;\n            }\n\n            @Override\n            public double end() {\n                // Finalization after visiting entries\n                return 0;\n            }\n        });\n\n        // Use the MatrixUtils class to get the triangular matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Further operations on the matrix\n        double determinant = retrievedMatrix.getDeterminant();\n        System.out.println(\"Determinant of the retrieved matrix: \" + determinant);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a sample 2D array to create a triangular matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {0.0, 4.0, 5.0},\n            {0.0, 0.0, 6.0}\n        };\n\n        // Use the MatrixUtils class to create a triangular matrix\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Use the MatrixUtils class to get the triangular matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the retrieved matrix\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    }
}