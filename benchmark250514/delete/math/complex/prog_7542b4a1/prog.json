{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse matrix using MatrixUtils\n        RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(3, 3);\n\n        // Populate the sparse matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n\n        // Create another matrix for additional complexity\n        RealMatrix denseMatrix = MatrixUtils.createRealMatrix(3, 3);\n        denseMatrix.setEntry(0, 0, 4.0);\n        denseMatrix.setEntry(1, 1, 5.0);\n        denseMatrix.setEntry(2, 2, 6.0);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = sparseMatrix.add(denseMatrix);\n\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector resultVector = resultMatrix.operate(vector);\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Use a matrix visitor for additional complexity\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            @Override\n            public double visit(int row, int column, double value) {\n                return value * 2; // Double the value\n            }\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // No action needed on start\n            }\n\n            @Override\n            public double end() {\n                return 0; // No specific result needed\n            }\n        };\n\n        // Apply the visitor to the result matrix\n        resultMatrix.walkInOptimizedOrder(visitor);\n\n        // Print the modified matrix\n        System.out.println(\"Modified matrix after applying visitor:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* write */ MatrixUtils.createSparseMatrix(3, 3); // This line is executed once\n\n        // Perform some unrelated operations\n        double sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i * 2.5;\n        }\n        System.out.println(\"Sum of series: \" + sum);\n\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSparseMatrix(sparseMatrix); // This line is executed once\n\n        // Print the retrieved matrix to verify the read operation\n        System.out.println(\"Retrieved sparse matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse matrix using MatrixUtils\n        RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(3, 3);\n        \n        // Populate the sparse matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n\n        /* write */ MatrixUtils.createSparseMatrix(3, 3); // This line is executed once\n\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSparseMatrix(sparseMatrix); // This line is executed once\n\n        // Print the retrieved matrix to verify the read operation\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}