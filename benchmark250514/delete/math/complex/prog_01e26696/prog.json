{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a real vector with some data\n        double[] data = {1.0, 2.0, 3.0};\n\n        // Use the write method to create an OpenMapRealVector\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(data);\n\n        // Perform some operations on the vector\n        vector.setEntry(0, 5.0);  // Change the first element\n        vector.addToEntry(1, 2.0); // Add 2.0 to the second element\n\n        // Create another vector using a different constructor\n        RealVector anotherVector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n\n        // Perform vector addition\n        RealVector sumVector = vector.add(anotherVector);\n\n        // Output the sum vector values\n        System.out.println(\"Sum vector values:\");\n        for (int i = 0; i < sumVector.getDimension(); i++) {\n            System.out.println(sumVector.getEntry(i));\n        }\n\n        // Use a sparse vector for demonstration\n        SparseRealVector sparseVector = new OpenMapRealVector(3);\n        sparseVector.setEntry(0, 7.0);\n        sparseVector.setEntry(2, 9.0);\n\n        // Multiply sparse vector with a scalar\n        RealVector scaledSparseVector = sparseVector.mapMultiply(2.0);\n\n        // Output the scaled sparse vector values\n        System.out.println(\"Scaled sparse vector values:\");\n        for (int i = 0; i < scaledSparseVector.getDimension(); i++) {\n            System.out.println(scaledSparseVector.getEntry(i));\n        }\n\n        // Use the read method to retrieve the OpenMapRealVector\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vector);\n\n        // Output the values in the vector to verify correctness\n        System.out.println(\"Vector values:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.println(readVector.getEntry(i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a real vector with some data\n        double[] data = {1.0, 2.0, 3.0};\n\n        // Use the write method to create an OpenMapRealVector\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(data);\n\n        // Use the read method to retrieve the OpenMapRealVector\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vector);\n\n        // Output the values in the vector to verify correctness\n        System.out.println(\"Vector values:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.println(readVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    }
}