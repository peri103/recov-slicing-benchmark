{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with some data\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        \n        // Create a vector to write into the matrix\n        RealVector vector = MatrixUtils.createRowRealVector(new double[] {10.0, 11.0, 12.0});\n        \n        /* write */ matrix.setRowVector(1, vector);\n        \n        // Perform some unrelated operations\n        RealVector anotherVector = new ArrayRealVector(new double[] {3.0, 2.0, 1.0});\n        RealVector resultVector = vector.add(anotherVector);\n        System.out.println(\"Resultant Vector after addition: \" + resultVector);\n        \n        // Initialize another matrix and perform operations\n        double[][] anotherMatrixData = {\n            {2.0, 0.0, 1.0},\n            {0.0, 2.0, 1.0},\n            {1.0, 1.0, 0.0}\n        };\n        \n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(anotherMatrixData);\n        RealMatrix multipliedMatrix = matrix.multiply(anotherMatrix);\n        System.out.println(\"Multiplied Matrix: \");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            System.out.println(multipliedMatrix.getRowVector(i));\n        }\n        \n        // More complex operations\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n        \n        // Read the vector from the matrix\n        /* read */ RealVector readVector = matrix.getRowVector(1);\n        \n        // Print the read vector\n        System.out.println(\"Read Vector: \" + readVector);\n        \n        // Further matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix: \");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            System.out.println(transposedMatrix.getRowVector(i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with some data\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        \n        // Create a vector to write into the matrix\n        RealVector vector = MatrixUtils.createRowRealVector(new double[] {10.0, 11.0, 12.0});\n        \n        /* write */ matrix.setRowVector(1, vector);\n        \n        // Read the vector from the matrix\n        /* read */ RealVector readVector = matrix.getRowVector(1);\n        \n        // Print the read vector\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    }
}