{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Create a matrix from the 2D array\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Create a column real vector using the write method\n        /* write */ RealVector columnVector = MatrixUtils.createColumnRealVector(new double[]{10.0, 11.0, 12.0});\n\n        // Set the first column of the matrix to the created column vector\n        matrix.setColumnVector(0, columnVector);\n\n        // Perform some matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n\n        // Print the transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the column vector back using the read method\n        /* read */ RealVector readColumnVector = matrix.getColumnVector(0);\n\n        // Print the read column vector\n        System.out.println(\"Read Column Vector: \" + readColumnVector);\n\n        // Additional operations with another matrix\n        double[][] anotherData = {\n            {2.0, 0.0, 1.0},\n            {3.0, 5.0, 4.0},\n            {1.0, 1.0, 1.0}\n        };\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(anotherData);\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n\n        // Print the sum of the matrices\n        System.out.println(\"Sum of Matrices:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Create a matrix from the 2D array\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create a column real vector using the write method\n        /* write */ RealVector columnVector = MatrixUtils.createColumnRealVector(new double[]{10.0, 11.0, 12.0});\n\n        // Set the first column of the matrix to the created column vector\n        matrix.setColumnVector(0, columnVector);\n\n        // Read the column vector back using the read method\n        /* read */ RealVector readColumnVector = matrix.getColumnVector(0);\n\n        // Print the read column vector\n        System.out.println(\"Read Column Vector: \" + readColumnVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealVector"
    }
}