{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n        \n        // Create a vector and perform some operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        \n        // Display the scaled vector\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Apply a visitor to the identity matrix to change its values\n        identityMatrix.walkInRowOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n            public double visit(int row, int column, double value) {\n                return value + 1.0; // Increment each value by 1\n            }\n            public double end() { return 0; }\n        });\n\n        // Create another matrix using MatrixUtils\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(new double[][] {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        });\n\n        // Perform matrix addition\n        RealMatrix addedMatrix = identityMatrix.add(anotherMatrix);\n\n        // Read the identity matrix (in this context, assume getting the same matrix)\n        /* read */ RealMatrix readMatrix = identityMatrix;\n        \n        // Display the matrix\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Display the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n        \n        // Read the identity matrix (in this context, assume getting the same matrix)\n        /* read */ RealMatrix readMatrix = identityMatrix;\n        \n        // Display the matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createIdentityMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getIdentityMatrix"
    }
}