{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix using MatrixUtils\n        RealMatrix identityMatrix;\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Additional code to make the program more complex\n        RealVector vector1 = new ArrayRealVector(new double[]{1, 2, 3});\n        RealVector vector2 = new ArrayRealVector(new double[]{4, 5, 6});\n        \n        // Perform vector addition\n        RealVector resultVector = vector1.add(vector2);\n        System.out.println(\"Result of vector addition: \" + resultVector);\n\n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = identityMatrix.multiply(MatrixUtils.createRealMatrix(new double[][]{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}));\n        System.out.println(\"Multiplied matrix: \" + multipliedMatrix);\n\n        // More operations to increase complexity\n        RealMatrix transposedMatrix = multipliedMatrix.transpose();\n        System.out.println(\"Transposed matrix: \" + transposedMatrix);\n\n        // Read the identity matrix using MatrixUtils\n        RealMatrix readMatrix;\n        /* read */ readMatrix = identityMatrix;\n\n        // Print the read matrix to verify the operations\n        System.out.println(\"Read matrix: \" + readMatrix);\n\n        // Further operations on vectors\n        RealVector scaledVector = resultVector.mapMultiply(2);\n        System.out.println(\"Scaled vector: \" + scaledVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix using MatrixUtils\n        RealMatrix identityMatrix;\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Read the identity matrix using MatrixUtils\n        RealMatrix readMatrix;\n        /* read */ readMatrix = identityMatrix;\n\n        // Print the read matrix to verify the operations\n        System.out.println(readMatrix);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createIdentityMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getIdentityMatrix"
    }
}