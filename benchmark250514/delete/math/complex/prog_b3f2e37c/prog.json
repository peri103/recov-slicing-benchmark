{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize data for matrix\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        // Initialize data for vector\n        double[] vectorData = {5.0, 6.0};\n        \n        // Create a vector using ArrayRealVector\n        RealVector vector = new ArrayRealVector(vectorData);\n        \n        // Perform operations on vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        \n        // Create another matrix and perform operations\n        RealMatrix anotherMatrix = MatrixUtils.createArray2DRowRealMatrix(new double[][]{{7.0, 8.0}, {9.0, 10.0}});\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(MatrixUtils.createArray2DRowRealMatrix(data));\n        \n        // Display the scaled vector\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Display the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Original write operation\n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n        \n        // Perform matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        \n        // Display the transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Original read operation\n        /* read */ double[][] retrievedData = matrix.getData();\n        \n        // Display the retrieved data\n        System.out.println(\"Retrieved Data:\");\n        for (int i = 0; i < retrievedData.length; i++) {\n            for (int j = 0; j < retrievedData[i].length; j++) {\n                System.out.print(retrievedData[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n        /* read */ double[][] retrievedData = matrix.getData();\n        \n        for (int i = 0; i < retrievedData.length; i++) {\n            for (int j = 0; j < retrievedData[i].length; j++) {\n                System.out.print(retrievedData[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArray2DRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArray2DRowRealMatrix"
    }
}