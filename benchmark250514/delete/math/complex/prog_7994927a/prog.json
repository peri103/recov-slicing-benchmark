{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] rowData = {1.0, 2.0, 3.0};\n        double[] anotherRowData = {4.0, 5.0, 6.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        // Creating another matrix\n        RealMatrix anotherMatrix = MatrixUtils.createRowRealMatrix(anotherRowData);\n        \n        // Performing some operations on the matrices\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n        RealMatrix productMatrix = matrix.multiply(anotherMatrix.transpose());\n        \n        // Extracting a row as a vector\n        RealVector rowVector = matrix.getRowVector(0);\n        \n        // Performing operations on the vector\n        RealVector scaledVector = rowVector.mapMultiply(2.0);\n        \n        // Printing results of operations\n        System.out.println(\"Sum Matrix:\");\n        System.out.println(sumMatrix);\n        \n        System.out.println(\"Product Matrix:\");\n        System.out.println(productMatrix);\n        \n        System.out.println(\"Scaled Vector:\");\n        System.out.println(scaledVector);\n        \n        // Introducing a delay in accessing the original matrix\n        for (int i = 0; i < 1000000; i++) {\n            double dummyOperation = Math.sin(i);\n        }\n        \n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n        \n        System.out.println(\"Retrieved Matrix:\");\n        System.out.println(retrievedMatrix);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] rowData = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n        \n        System.out.println(retrievedMatrix);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}