{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize dimensions and values for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 2.0, 0.0},\n            {0.0, 0.0, 3.0}\n        };\n        \n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n        \n        // Initialize a vector for additional operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Perform matrix-vector multiplication\n        RealVector resultVector = sparseMatrix.operate(vector);\n        \n        // Output the result of matrix-vector multiplication\n        System.out.println(\"Matrix-Vector Multiplication Result:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Create another matrix for additional operations\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 1.0, 0.0},\n            {1.0, 0.0, 1.0},\n            {0.0, 1.0, 0.0}\n        });\n        \n        // Perform matrix addition\n        RealMatrix addedMatrix = sparseMatrix.add(anotherMatrix);\n        \n        // Output the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the sparse matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = sparseMatrix;  // Direct assignment as placeholder for demonstration\n        \n        // Output the matrix to verify\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Perform matrix subtraction\n        RealMatrix subtractedMatrix = sparseMatrix.subtract(anotherMatrix);\n        \n        // Output the subtracted matrix\n        System.out.println(\"Subtracted Matrix:\");\n        for (int i = 0; i < subtractedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < subtractedMatrix.getColumnDimension(); j++) {\n                System.out.print(subtractedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize dimensions and values for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 2.0, 0.0},\n            {0.0, 0.0, 3.0}\n        };\n        \n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n        \n        // Read the sparse matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = sparseMatrix;  // Direct assignment as placeholder for demonstration\n        \n        // Output the matrix to verify\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}