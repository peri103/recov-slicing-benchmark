{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the data for the diagonal matrix\n        double[] diagonalData = {1.0, 2.0, 3.0};\n\n        // Create the diagonal matrix using the write method\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalData);\n\n        // Initialize a vector for matrix operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 0.0, 1.0});\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = matrix.operate(vector);\n\n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Modify the matrix using a visitor\n        matrix.walkInRowOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // No initialization needed\n            }\n\n            public double visit(int row, int column, double value) {\n                return value + 1.0; // Increment each element by 1\n            }\n\n            public double end() {\n                return 0; // No final computation needed\n            }\n        });\n\n        // Read the diagonal matrix using the read method\n        /* read */ double[] readDiagonal = matrix.getColumn(0);\n\n        // Print the modified matrix diagonal to verify correctness\n        System.out.println(\"Modified matrix diagonal:\");\n        for (double value : readDiagonal) {\n            System.out.println(value);\n        }\n\n        // Additional matrix operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix sumMatrix = matrix.add(identityMatrix);\n\n        // Print the sum of the original matrix and identity matrix\n        System.out.println(\"Sum of matrix and identity matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the data for the diagonal matrix\n        double[] diagonalData = {1.0, 2.0, 3.0};\n\n        // Create the diagonal matrix using the write method\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalData);\n\n        // Read the diagonal matrix using the read method\n        /* read */ double[] readDiagonal = matrix.getColumn(0);\n\n        // Print the read values to verify correctness\n        for (double value : readDiagonal) {\n            System.out.println(value);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}