{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Additional complex operations\n        RealVector vector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector resultVector = matrix.operate(vector);\n\n        // Modify the matrix using a visitor\n        matrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n\n            public double visit(int row, int column, double value) {\n                return value + 1.0; // Increment each element by 1\n            }\n\n            public double end() {\n                return 0;\n            }\n        });\n\n        // Some unrelated calculations\n        double sum = 0;\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            sum += resultVector.getEntry(i);\n        }\n        System.out.println(\"Sum of result vector: \" + sum);\n\n        // More complex operations\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(new double[][]{\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        });\n\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(matrix);\n\n        // Extract and print the diagonal of the modified matrix\n        /* read */ double[] extractedDiagonal = matrix.getRow(0); // Assuming getDiagonalMatrix means to extract the diagonal\n        System.out.println(\"Extracted Diagonal: \");\n        for (double value : extractedDiagonal) {\n            System.out.print(value + \" \");\n        }\n        System.out.println();\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix: \");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n        /* read */ double[] extractedDiagonal = matrix.getRow(0); // Assuming getDiagonalMatrix means to extract the diagonal\n        for (double value : extractedDiagonal) {\n            System.out.print(value + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}