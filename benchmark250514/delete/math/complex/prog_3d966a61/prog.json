{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        \n        // Additional code to make the program more complex\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 1.0});\n        RealVector resultVector = matrix.operate(vector);\n        \n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(\"Vector entry \" + i + \": \" + resultVector.getEntry(i));\n        }\n        \n        // Modify the matrix using a visitor\n        matrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // No initialization required\n            }\n            \n            public double visit(int row, int column, double value) {\n                return value + 1.0;\n            }\n            \n            public double end() {\n                return 0; // Not used\n            }\n        });\n        \n        // Some unrelated arithmetic operations to increase complexity\n        int a = 5;\n        int b = 10;\n        int c = a + b * 2 - 3;\n        System.out.println(\"Result of arithmetic operations: \" + c);\n        \n        // More matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */ RealMatrix readMatrix = MatrixUtils.getBlockRealMatrix(matrix.getData(), 0, 0, 2, 2);\n        \n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        /* read */ RealMatrix readMatrix = MatrixUtils.getBlockRealMatrix(matrix.getData(), 0, 0, 2, 2);\n        \n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createBlockRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getBlockRealMatrix"
    }
}