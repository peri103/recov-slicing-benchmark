{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing data for matrix creation\n        double[] rowData = {1.0, 2.0, 3.0};\n        \n        // Creating a matrix using the write method\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        // Adding unrelated code for complexity\n        double[][] data = {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix2 = new Array2DRowRealMatrix(data);\n        \n        // Performing operations on the second matrix\n        RealMatrix transposedMatrix2 = matrix2.transpose();\n        double[] columnData = transposedMatrix2.getColumn(0);\n        \n        // Printing the column data from transposed matrix\n        System.out.println(\"Column data from transposed matrix2:\");\n        for (double value : columnData) {\n            System.out.print(value + \" \");\n        }\n        System.out.println();\n        \n        // Further operations on the first matrix\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        double[] scaledRowData = scaledMatrix.getRow(0);\n        \n        // Printing scaled row data\n        System.out.println(\"Scaled row data from matrix:\");\n        for (double value : scaledRowData) {\n            System.out.print(value + \" \");\n        }\n        System.out.println();\n        \n        // Reading the matrix using the read method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix.getData(), 0);\n        \n        // Printing the read matrix data\n        System.out.println(\"Read matrix data:\");\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n        \n        // More unrelated operations for complexity\n        RealMatrix multipliedMatrix = matrix2.multiply(transposedMatrix2);\n        double[][] multipliedData = multipliedMatrix.getData();\n        \n        // Printing the multiplied matrix data\n        System.out.println(\"Multiplied matrix data:\");\n        for (double[] row : multipliedData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] rowData = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix.getData(), 0);\n        \n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}