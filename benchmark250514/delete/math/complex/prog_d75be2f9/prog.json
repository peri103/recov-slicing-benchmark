{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Create a sparse real vector\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Perform some operations on the vector\n        vector.mapMultiplyToSelf(2.0);\n        vector.setEntry(1, 5.0);\n        \n        // Create a matrix for demonstration\n        double[][] matrixData = {{1, 2}, {3, 4}, {5, 6}};\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n\n        // Multiply vector with matrix\n        RealVector resultVector = matrix.operate(vector);\n        System.out.println(\"Result of matrix-vector multiplication: \" + resultVector);\n\n        // Another vector operation\n        RealVector anotherVector = MatrixUtils.createRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector addedVector = vector.add(anotherVector);\n        System.out.println(\"Result of vector addition: \" + addedVector);\n\n        // Read back the sparse real vector\n        /* read */ RealVector readVector = MatrixUtils.getSparseRealVector(vector);\n        \n        System.out.println(\"Read sparse real vector: \" + readVector);\n\n        // Perform a dot product operation\n        double dotProduct = vector.dotProduct(anotherVector);\n        System.out.println(\"Dot product of vectors: \" + dotProduct);\n        \n        // Scale the read vector and print\n        RealVector scaledVector = readVector.mapMultiply(0.5);\n        System.out.println(\"Scaled read vector: \" + scaledVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n        \n        /* read */ RealVector readVector = MatrixUtils.getSparseRealVector(vector);\n        \n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}