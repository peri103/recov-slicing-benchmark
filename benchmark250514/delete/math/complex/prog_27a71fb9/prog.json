{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a diagonal matrix\n        double[] diagonal = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonal);\n\n        // Perform some operations on the matrix\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 1.0, 1.0});\n        RealVector resultVector = matrix.operate(vector);\n        \n        // Print the result of the operation\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Create another matrix and perform a different operation\n        RealMatrix anotherMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n\n        // Print the sum of the matrices\n        System.out.println(\"Sum of the diagonal matrix and identity matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Retrieve the diagonal matrix\n        /* read */ RealMatrix readMatrix = MatrixUtils.getDiagonalMatrix(matrix);\n        \n        // Print the retrieved diagonal matrix\n        System.out.println(\"Retrieved diagonal matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional operations to increase complexity\n        RealMatrix transposedMatrix = readMatrix.transpose();\n        RealMatrix productMatrix = transposedMatrix.multiply(readMatrix);\n\n        // Print the product of the transposed matrix and the original matrix\n        System.out.println(\"Product of the transposed matrix and the original matrix:\");\n        for (int i = 0; i < productMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < productMatrix.getColumnDimension(); j++) {\n                System.out.print(productMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonal = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonal);\n        /* read */ RealMatrix readMatrix = MatrixUtils.getDiagonalMatrix(matrix);\n        \n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}