{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        // Create a triangular matrix using the given data\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n        \n        // Perform some operations on the matrix\n        RealMatrix matrixCopy = triangularMatrix.copy();\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Solve the system of linear equations\n        DecompositionSolver solver = new LUDecomposition(matrixCopy).getSolver();\n        if (solver.isNonSingular()) {\n            RealVector solution = solver.solve(vector);\n            System.out.println(\"Solution to the system: \" + solution);\n        } else {\n            System.out.println(\"Matrix is singular, cannot solve the system.\");\n        }\n        \n        // More operations\n        double[][] additionalData = {\n            {10.0, 11.0, 12.0},\n            {13.0, 14.0, 15.0},\n            {16.0, 17.0, 18.0}\n        };\n        RealMatrix additionalMatrix = MatrixUtils.createRealMatrix(additionalData);\n        RealMatrix resultMatrix = triangularMatrix.add(additionalMatrix);\n        \n        System.out.println(\"Resultant Matrix after addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Retrieve the triangular matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n        \n        // Print the retrieved matrix\n        System.out.println(\"Retrieved Triangular Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        // Create a triangular matrix using the given data\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n        \n        // Retrieve the triangular matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n        \n        // Print the retrieved matrix\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    }
}