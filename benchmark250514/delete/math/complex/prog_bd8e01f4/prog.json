{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse real vector using the write method\n        /* write */ SparseRealVector sparseVector = (SparseRealVector) MatrixUtils.createSparseRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Create another vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector sumVector = sparseVector.add(vector);\n\n        // Create a matrix and perform operations\n        RealMatrix matrix = new BlockRealMatrix(3, 3);\n        matrix.setRowVector(0, sumVector);\n        matrix.setRowVector(1, vector);\n        matrix.setRowVector(2, sparseVector);\n\n        // Calculate the product of matrix and vector\n        RealVector productVector = matrix.operate(vector);\n\n        // Print the product vector\n        System.out.println(\"Product Vector:\");\n        for (int i = 0; i < productVector.getDimension(); i++) {\n            System.out.println(productVector.getEntry(i));\n        }\n\n        // Perform a check and manipulate the vector\n        if (sumVector.getEntry(0) > sparseVector.getEntry(0)) {\n            sumVector.mapMultiplyToSelf(2.0);\n        }\n\n        // Read the sparse real vector using the read method\n        /* read */ RealVector readVector = sparseVector;\n\n        // Print the elements of the vector to verify\n        System.out.println(\"Read Sparse Vector:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.println(readVector.getEntry(i));\n        }\n\n        // Perform some additional operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealVector transposedProduct = transposedMatrix.operate(sumVector);\n\n        // Print the transposed product vector\n        System.out.println(\"Transposed Product Vector:\");\n        for (int i = 0; i < transposedProduct.getDimension(); i++) {\n            System.out.println(transposedProduct.getEntry(i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse real vector using the write method\n        /* write */ SparseRealVector sparseVector = (SparseRealVector) MatrixUtils.createSparseRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Read the sparse real vector using the read method\n        /* read */ RealVector readVector = sparseVector;\n\n        // Print the elements of the vector to verify\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.println(readVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}