{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {2.0, 4.0, 5.0},\n            {3.0, 5.0, 6.0}\n        };\n\n        // Create a symmetric matrix using the provided method\n        /* write */ RealMatrix matrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Create another matrix for additional operations\n        double[][] data2 = {\n            {7.0, 8.0, 9.0},\n            {8.0, 10.0, 11.0},\n            {9.0, 11.0, 12.0}\n        };\n        RealMatrix matrix2 = MatrixUtils.createSymmetricMatrix(data2);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = matrix.add(matrix2);\n\n        // Print the result of matrix addition\n        System.out.println(\"Result of matrix addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix-vector multiplication\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector resultVector = matrix.operate(vector);\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform LU decomposition\n        LUDecomposition luDecomposition = new LUDecomposition(matrix);\n        DecompositionSolver solver = luDecomposition.getSolver();\n        RealVector solution = solver.solve(vector);\n\n        // Print the solution of LU decomposition\n        System.out.println(\"Solution of LU decomposition:\");\n        for (int i = 0; i < solution.getDimension(); i++) {\n            System.out.print(solution.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform Singular Value Decomposition\n        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);\n        RealMatrix uMatrix = svd.getU();\n\n        // Print the U matrix from Singular Value Decomposition\n        System.out.println(\"U matrix from Singular Value Decomposition:\");\n        for (int i = 0; i < uMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < uMatrix.getColumnDimension(); j++) {\n                System.out.print(uMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the symmetric matrix using the provided method\n        /* read */ RealMatrix symmetricMatrix = MatrixUtils.getSymmetricMatrix(matrix);\n\n        // Print the symmetric matrix\n        System.out.println(\"Symmetric matrix:\");\n        for (int i = 0; i < symmetricMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < symmetricMatrix.getColumnDimension(); j++) {\n                System.out.print(symmetricMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {2.0, 4.0, 5.0},\n            {3.0, 5.0, 6.0}\n        };\n\n        // Create a symmetric matrix using the provided method\n        /* write */ RealMatrix matrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using the provided method\n        /* read */ RealMatrix symmetricMatrix = MatrixUtils.getSymmetricMatrix(matrix);\n\n        // Print the symmetric matrix\n        for (int i = 0; i < symmetricMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < symmetricMatrix.getColumnDimension(); j++) {\n                System.out.print(symmetricMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}