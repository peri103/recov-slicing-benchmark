{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix with sample data\n        double[][] data = {\n            {1.0, 0.5, 0.3},\n            {0.5, 1.0, 0.4},\n            {0.3, 0.4, 1.0}\n        };\n\n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Complex operation: Generate a random matrix and add it to symmetricMatrix\n        Random random = new Random();\n        double[][] randomData = new double[3][3];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                randomData[i][j] = random.nextDouble();\n            }\n        }\n        RealMatrix randomMatrix = new Array2DRowRealMatrix(randomData);\n        RealMatrix combinedMatrix = symmetricMatrix.add(randomMatrix);\n\n        // Perform some matrix operations: transpose and multiply\n        RealMatrix transposedMatrix = combinedMatrix.transpose();\n        RealMatrix multipliedMatrix = combinedMatrix.multiply(transposedMatrix);\n\n        // Complex operation: Calculate the determinant of the multiplied matrix\n        double determinant = new org.apache.commons.math3.linear.LUDecomposition(multipliedMatrix).getDeterminant();\n        System.out.println(\"Determinant of the multiplied matrix: \" + determinant);\n\n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify the read operation\n        System.out.println(\"Read Symmetric Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional complex operation: Invert the original symmetric matrix\n        RealMatrix invertedMatrix = new org.apache.commons.math3.linear.LUDecomposition(symmetricMatrix).getSolver().getInverse();\n        System.out.println(\"Inverted Symmetric Matrix:\");\n        for (int i = 0; i < invertedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < invertedMatrix.getColumnDimension(); j++) {\n                System.out.print(invertedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix with sample data\n        double[][] data = {\n            {1.0, 0.5, 0.3},\n            {0.5, 1.0, 0.4},\n            {0.3, 0.4, 1.0}\n        };\n\n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify the read operation\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}