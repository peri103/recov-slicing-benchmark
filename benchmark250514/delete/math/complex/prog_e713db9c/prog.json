{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a vector with some values\n        double[] values = {1.0, 2.0, 3.0};\n\n        // Use the MatrixUtils to create an OpenMapRealVector\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(values);\n\n        // Create a 3x3 matrix with some values\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Create an Array2DRowRealMatrix from the data\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n\n        // Perform some matrix operations\n        RealMatrix matrixTranspose = matrix.transpose();\n        RealMatrix matrixSum = matrix.add(matrixTranspose);\n\n        // Print the sum matrix\n        System.out.println(\"Matrix Sum:\");\n        for (int i = 0; i < matrixSum.getRowDimension(); i++) {\n            for (int j = 0; j < matrixSum.getColumnDimension(); j++) {\n                System.out.print(matrixSum.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform vector operations\n        OpenMapRealVector scaledVector = vector.mapMultiply(2.0);\n        RealVector addedVector = scaledVector.add(new OpenMapRealVector(new double[] {0.5, 0.5, 0.5}));\n\n        // Print the scaled and added vector\n        System.out.println(\"Scaled and Added Vector:\");\n        for (int i = 0; i < addedVector.getDimension(); i++) {\n            System.out.print(addedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Retrieve the vector using a method that represents 'getOpenMapRealVector'\n        // Since there is no direct 'getOpenMapRealVector' method, we will simply use the vector\n        /* read */ double value = vector.getEntry(0); // Read the first entry\n\n        // Print the value to ensure the read method works\n        System.out.println(\"Read Value: \" + value);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a vector with some values\n        double[] values = {1.0, 2.0, 3.0};\n\n        // Use the MatrixUtils to create an OpenMapRealVector\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(values);\n\n        // Retrieve the vector using a method that represents 'getOpenMapRealVector'\n        // Since there is no direct 'getOpenMapRealVector' method, we will simply use the vector\n        /* read */ double value = vector.getEntry(0); // Read the first entry\n\n        // Print the value to ensure the read method works\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    }
}