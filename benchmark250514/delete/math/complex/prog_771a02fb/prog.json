{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse matrix using MatrixUtils\n        double[][] data = {\n            {0, 0, 0},\n            {0, 1, 0},\n            {0, 0, 0}\n        };\n        \n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data.length, data[0].length);\n        \n        // Set the non-zero values in the sparse matrix\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data[i].length; j++) {\n                if (data[i][j] != 0) {\n                    sparseMatrix.setEntry(i, j, data[i][j]);\n                }\n            }\n        }\n\n        // Create another matrix for additional complexity\n        double[][] anotherData = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(anotherData);\n        \n        // Perform matrix addition\n        RealMatrix resultMatrix = sparseMatrix.add(anotherMatrix);\n\n        // Print the result of the matrix addition\n        System.out.println(\"Result of matrix addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix multiplication for added complexity\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(anotherMatrix);\n\n        // Print the result of the matrix multiplication\n        System.out.println(\"Result of matrix multiplication:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the sparse matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = sparseMatrix;\n        \n        // Print the read matrix\n        System.out.println(\"Sparse matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse matrix using MatrixUtils\n        double[][] data = {\n            {0, 0, 0},\n            {0, 1, 0},\n            {0, 0, 0}\n        };\n        \n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data.length, data[0].length);\n        \n        // Set the non-zero values in the sparse matrix\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data[i].length; j++) {\n                if (data[i][j] != 0) {\n                    sparseMatrix.setEntry(i, j, data[i][j]);\n                }\n            }\n        }\n        \n        // Read the sparse matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = sparseMatrix;\n        \n        // Print the read matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}