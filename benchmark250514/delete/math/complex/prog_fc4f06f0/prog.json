{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the vector\n        double[] data = {1.0, 2.0, 3.0, 4.0, 5.0};\n        \n        /* write */ RealVector sparseVector = MatrixUtils.createSparseRealVector(data);\n        \n        // Perform some operations on the vector\n        double norm = sparseVector.getNorm();\n        System.out.println(\"Norm of the sparse vector: \" + norm);\n        \n        // Create a matrix and perform operations\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Use the sparse vector in a matrix-vector multiplication\n        RealVector resultVector = matrix.operate(sparseVector);\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n        \n        // More operations on the matrix\n        double determinant = matrix.getDeterminant();\n        System.out.println(\"Determinant of the matrix: \" + determinant);\n        \n        /* read */ RealVector retrievedVector = MatrixUtils.getSparseRealVector(sparseVector);\n        \n        // Print the retrieved vector\n        System.out.println(\"Retrieved vector:\");\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(retrievedVector.getEntry(i));\n        }\n        \n        // Perform some operations on the retrieved vector\n        RealVector scaledVector = retrievedVector.mapMultiply(2.0);\n        System.out.println(\"Scaled vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.println(scaledVector.getEntry(i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the vector\n        double[] data = {1.0, 2.0, 3.0, 4.0, 5.0};\n        \n        /* write */ RealVector sparseVector = MatrixUtils.createSparseRealVector(data);\n        \n        /* read */ RealVector retrievedVector = MatrixUtils.getSparseRealVector(sparseVector);\n        \n        // Print the retrieved vector\n        System.out.println(retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}