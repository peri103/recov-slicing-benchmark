{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a square matrix with example data\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {0.0, 4.0, 5.0},\n            {0.0, 0.0, 6.0}\n        };\n\n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Perform some unrelated operations on another matrix\n        double[][] otherData = {\n            {7.0, 8.0, 9.0},\n            {0.0, 10.0, 11.0},\n            {0.0, 0.0, 12.0}\n        };\n        RealMatrix otherMatrix = MatrixUtils.createRealMatrix(otherData);\n\n        // Multiply the other matrix by a scalar\n        otherMatrix = otherMatrix.scalarMultiply(2.0);\n\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector resultVector = otherMatrix.operate(vector);\n\n        // Print the result vector\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Add a visitor to modify the original triangular matrix\n        triangularMatrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            @Override\n            public double visit(int row, int column, double value) {\n                return value * 1.5;\n            }\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n\n            @Override\n            public double end() {\n                return 0;\n            }\n        });\n\n        // Retrieve the triangular matrix using MatrixUtils\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved Triangular Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a square matrix with example data\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {0.0, 4.0, 5.0},\n            {0.0, 0.0, 6.0}\n        };\n        \n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n        \n        // Retrieve the triangular matrix using MatrixUtils\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n        \n        // Print the retrieved matrix\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    }
}