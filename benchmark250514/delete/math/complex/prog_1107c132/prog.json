{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse vector using MatrixUtils\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Perform some unrelated operations\n        RealVector anotherVector = new OpenMapRealVector(3);\n        anotherVector.setEntry(0, 10.0);\n        anotherVector.setEntry(1, 20.0);\n        anotherVector.setEntry(2, 30.0);\n        \n        double dotProduct = vector.dotProduct(anotherVector);\n        System.out.println(\"Dot product: \" + dotProduct);\n\n        RealVector sumVector = vector.add(anotherVector);\n        System.out.println(\"Sum vector: \" + sumVector);\n\n        // More unrelated operations\n        for (int i = 0; i < vector.getDimension(); i++) {\n            System.out.println(\"Original vector entry \" + i + \": \" + vector.getEntry(i));\n        }\n\n        // Retrieve the sparse vector using MatrixUtils\n        /* read */ OpenMapRealVector retrievedVector = MatrixUtils.getOpenMapRealVector(vector);\n        \n        // Print the retrieved vector to verify the operation\n        System.out.println(\"Retrieved vector: \" + retrievedVector);\n\n        // Additional complex operations\n        double norm = retrievedVector.getNorm();\n        System.out.println(\"Norm of retrieved vector: \" + norm);\n\n        OpenMapRealVector scaledVector = retrievedVector.mapMultiply(2.0);\n        System.out.println(\"Scaled vector: \" + scaledVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse vector using MatrixUtils\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Retrieve the sparse vector using MatrixUtils\n        /* read */ OpenMapRealVector retrievedVector = MatrixUtils.getOpenMapRealVector(vector);\n        \n        // Print the retrieved vector to verify the operation\n        System.out.println(retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    }
}