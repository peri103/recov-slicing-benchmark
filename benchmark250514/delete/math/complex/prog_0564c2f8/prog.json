{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {2.0, 4.0, 5.0},\n            {3.0, 5.0, 6.0}\n        };\n\n        // Create a symmetric matrix using the provided method\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Additional matrix operations to increase complexity\n        double[][] additionalData = {\n            {7.0, 8.0, 9.0},\n            {8.0, 10.0, 11.0},\n            {9.0, 11.0, 12.0}\n        };\n        RealMatrix additionalMatrix = MatrixUtils.createRealMatrix(additionalData);\n\n        // Perform matrix addition\n        RealMatrix sumMatrix = symmetricMatrix.add(additionalMatrix);\n\n        // Initialize a vector for multiplication\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n\n        // Multiply matrix with vector\n        RealVector resultVector = sumMatrix.operate(vector);\n\n        // Print the result of the vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Read the symmetric matrix using the provided method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the read matrix to verify\n        System.out.println(\"Read symmetric matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional operations to further increase complexity\n        RealMatrix transposedMatrix = readMatrix.transpose();\n\n        // Print the transposed matrix\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {2.0, 4.0, 5.0},\n            {3.0, 5.0, 6.0}\n        };\n\n        // Create a symmetric matrix using the provided method\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using the provided method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the read matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}