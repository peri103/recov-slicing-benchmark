{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize variables for sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 1.0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ SparseRealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n\n        // Initialize vector data\n        double[] vectorData = {1.0, 2.0, 3.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n\n        // Initialize another matrix\n        RealMatrix denseMatrix = MatrixUtils.createRealMatrix(new double[][]{\n            {2.0, 3.0, 4.0},\n            {5.0, 6.0, 7.0},\n            {8.0, 9.0, 10.0}\n        });\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = denseMatrix.add(sparseMatrix);\n        System.out.println(\"Result Matrix after addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the sparse matrix using MatrixUtils (assuming getSparseMatrix is a valid method, although it doesn't exist in reality)\n        /* read */ RealMatrix matrix = sparseMatrix; // Directly using the sparseMatrix as there is no getSparseMatrix method\n\n        // Print the sparse matrix to verify\n        System.out.println(\"Sparse Matrix:\");\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix-vector multiplication\n        RealVector productVector = matrix.operate(vector);\n        System.out.println(\"Matrix-Vector Product: \" + productVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize variables\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 1.0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ SparseRealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n\n        // Read the matrix using MatrixUtils (assuming getSparseMatrix is a valid method, although it doesn't exist in reality)\n        /* read */ RealMatrix matrix = sparseMatrix; // Directly using the sparseMatrix as there is no getSparseMatrix method\n\n        // Print the matrix to verify\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}