{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        // Create a column real vector using the write method\n        RealVector columnVector = MatrixUtils.createColumnRealVector(new double[]{5.0, 6.0});\n        \n        // Set the column vector to the matrix at column index 0\n        matrix.setColumnVector(0, columnVector);\n        \n        // Perform matrix operations\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            @Override\n            public double visit(int row, int column, double value) {\n                return value * 2; // Double each element\n            }\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // No initialization needed\n            }\n\n            @Override\n            public double end() {\n                return 0; // No final computation needed\n            }\n        };\n        \n        matrix.walkInOptimizedOrder(visitor);\n        \n        // Additional operations using RealMatrix and RealVector\n        RealVector rowVector = matrix.getRowVector(0);\n        RealVector resultVector = rowVector.mapAdd(10.0); // Add 10 to each element of the row vector\n        \n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(\"Result Vector Entry \" + i + \": \" + resultVector.getEntry(i));\n        }\n        \n        // Get the column real vector using the read method\n        /* read */ RealVector readColumnVector = matrix.getColumnVector(0);\n        \n        // Print the values of the read column vector\n        for (int i = 0; i < readColumnVector.getDimension(); i++) {\n            System.out.println(\"Read Column Vector Entry \" + i + \": \" + readColumnVector.getEntry(i));\n        }\n        \n        // Additional complex operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(2);\n        RealMatrix multipliedMatrix = matrix.multiply(identityMatrix);\n        \n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        // Create a column real vector using the write method\n        RealVector columnVector = MatrixUtils.createColumnRealVector(new double[]{5.0, 6.0});\n        \n        // Set the column vector to the matrix at column index 0\n        matrix.setColumnVector(0, columnVector);\n        \n        // Get the column real vector using the read method\n        /* read */ RealVector readColumnVector = matrix.getColumnVector(0);\n        \n        // Print the values of the read column vector\n        for (int i = 0; i < readColumnVector.getDimension(); i++) {\n            System.out.println(readColumnVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealVector"
    }
}