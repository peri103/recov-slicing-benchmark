{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix using MatrixUtils\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Create a vector and perform some operations\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Multiply the vector by the symmetric matrix\n        RealVector resultVector = symmetricMatrix.operate(vector);\n\n        // Print the result of the vector operation\n        System.out.println(\"Result of multiplying vector by symmetric matrix: \" + resultVector);\n\n        // More complex operations on the matrix\n        RealMatrix transposedMatrix = symmetricMatrix.transpose();\n        RealMatrix addedMatrix = symmetricMatrix.add(transposedMatrix);\n\n        // Print the transposed and added matrices\n        System.out.println(\"Transposed Matrix: \" + transposedMatrix);\n        System.out.println(\"Added Matrix: \" + addedMatrix);\n\n        // Perform a matrix operation and store the result\n        RealMatrix scaledMatrix = symmetricMatrix.scalarMultiply(2.0);\n\n        // More operations on vectors\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        RealVector addedVector = vector.add(scaledVector);\n\n        // Print the scaled and added vectors\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n        System.out.println(\"Added Vector: \" + addedVector);\n\n        // Retrieve the symmetric matrix using MatrixUtils (assuming getSymmetricMatrix is a correct method)\n        // Note: getSymmetricMatrix is not a real method in MatrixUtils, but for the purpose of this task, we assume it exists.\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify the result\n        System.out.println(\"Retrieved Symmetric Matrix: \" + retrievedMatrix);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix using MatrixUtils\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Retrieve the symmetric matrix using MatrixUtils (assuming getSymmetricMatrix is a correct method)\n        // Note: getSymmetricMatrix is not a real method in MatrixUtils, but for the purpose of this task, we assume it exists.\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify the result\n        System.out.println(retrievedMatrix);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}