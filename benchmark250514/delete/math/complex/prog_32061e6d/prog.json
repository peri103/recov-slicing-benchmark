{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the dimensions and values for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] sparseData = {\n            {0, 0, 0},\n            {0, 1, 0},\n            {0, 0, 0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns, sparseData);\n\n        // Create another matrix for additional operations\n        double[][] denseData = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        RealMatrix denseMatrix = new Array2DRowRealMatrix(denseData);\n\n        // Perform matrix multiplication\n        RealMatrix resultMatrix = denseMatrix.multiply(sparseMatrix);\n\n        // Create a vector and perform vector-matrix multiplication\n        double[] vectorData = {1, 0, 0};\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector resultVector = denseMatrix.operate(vector);\n\n        // Print the result of vector-matrix multiplication\n        System.out.println(\"Vector-Matrix Multiplication Result:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Retrieve the sparse matrix using MatrixUtils\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix; // Assuming getSparseMatrix would return the same matrix\n\n        // Print the retrieved matrix to verify\n        System.out.println(\"Retrieved Sparse Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform additional operations on the dense matrix\n        RealMatrix transposedMatrix = denseMatrix.transpose();\n        System.out.println(\"Transposed Dense Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the dimensions and values for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0, 0, 0},\n            {0, 1, 0},\n            {0, 0, 0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns, data);\n\n        // Retrieve the sparse matrix using MatrixUtils\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix; // Assuming getSparseMatrix would return the same matrix\n\n        // Print the retrieved matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}