{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using MatrixUtils\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Perform some operations on the vector to make the program more complex\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.println(scaledVector.getEntry(i));\n        }\n\n        // Create another vector and perform operations\n        ArrayRealVector arrayVector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector sumVector = vector.add(arrayVector);\n        System.out.println(\"Sum Vector: \");\n        for (int i = 0; i < sumVector.getDimension(); i++) {\n            System.out.println(sumVector.getEntry(i));\n        }\n\n        // Retrieve the OpenMapRealVector\n        /* read */ OpenMapRealVector retrievedVector = MatrixUtils.getOpenMapRealVector(vector);\n\n        // Print out the elements of the retrieved vector\n        System.out.println(\"Retrieved Vector: \");\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(retrievedVector.getEntry(i));\n        }\n\n        // Perform additional operations on the retrieved vector\n        RealVector negatedVector = retrievedVector.mapMultiply(-1.0);\n        System.out.println(\"Negated Retrieved Vector: \");\n        for (int i = 0; i < negatedVector.getDimension(); i++) {\n            System.out.println(negatedVector.getEntry(i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using MatrixUtils\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Retrieve the OpenMapRealVector\n        /* read */ OpenMapRealVector retrievedVector = MatrixUtils.getOpenMapRealVector(vector);\n\n        // Print out the elements of the retrieved vector\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(retrievedVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    }
}