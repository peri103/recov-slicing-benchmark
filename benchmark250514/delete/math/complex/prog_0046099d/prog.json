{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Create another vector for additional operations\n        double[] additionalData = {4.0, 5.0, 6.0};\n        ArrayRealVector additionalVector = new ArrayRealVector(additionalData);\n        \n        // Perform some operations with the additional vector\n        RealVector sumVector = additionalVector.mapAdd(10.0);\n\n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n\n        // Perform operations on the original vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n\n        // Create a matrix and perform operations\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        \n        // Add the scaled vector to the matrix\n        RealMatrix resultMatrix = matrix.add(scaledVector.outerProduct(additionalVector));\n\n        // Print the result of matrix operations\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform more operations on the sumVector\n        RealVector normalizedVector = sumVector.mapDivide(2.0);\n\n        /* read */ double[] readData = vector.toArray();\n        \n        System.out.println(\"Original Vector:\");\n        for (double value : readData) {\n            System.out.println(value);\n        }\n\n        // Print the normalized vector\n        System.out.println(\"Normalized Vector:\");\n        for (double value : normalizedVector.toArray()) {\n            System.out.println(value);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        /* read */ double[] readData = vector.toArray();\n        \n        for (double value : readData) {\n            System.out.println(value);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    }
}