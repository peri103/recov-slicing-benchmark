{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] row = {1.0, 2.0, 3.0};\n        double[] anotherRow = {4.0, 5.0, 6.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(row);\n        \n        // Create another matrix using a different method\n        RealMatrix anotherMatrix = MatrixUtils.createRowRealMatrix(anotherRow);\n        \n        // Perform some operations on the matrices\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n        RealMatrix productMatrix = matrix.multiply(anotherMatrix.transpose());\n        \n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 1.0, 1.0});\n        RealVector transformedVector = matrix.operate(vector);\n        \n        // Print results of operations\n        System.out.println(\"Sum matrix: \" + sumMatrix);\n        System.out.println(\"Product matrix: \" + productMatrix);\n        System.out.println(\"Transformed vector: \" + transformedVector);\n        \n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n        System.out.println(\"Row matrix: \" + readMatrix);\n        \n        // Further operations to increase complexity\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        RealMatrix subMatrix = matrix.subtract(scaledMatrix);\n        \n        System.out.println(\"Scaled matrix: \" + scaledMatrix);\n        System.out.println(\"Subtracted matrix: \" + subMatrix);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] row = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(row);\n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n        System.out.println(\"Row matrix: \" + readMatrix);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}