{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize data for matrix operations\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        double[][] additionalData = { {5.0, 6.0}, {7.0, 8.0} };\n\n        // Create a RealMatrix using the write method\n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n\n        // Perform some matrix operations\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalData);\n        RealMatrix resultMatrix = matrix.add(additionalMatrix);\n\n        // Initialize a RealVector for vector operations\n        double[] vectorData = { 9.0, 10.0 };\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Multiply matrix with vector\n        RealVector resultVector = matrix.operate(vector);\n\n        // Print the resulting vector\n        System.out.println(\"Resulting Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform more matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n\n        // Read data from the matrix using the read method\n        /* read */ double[][] array = matrix.getData();\n\n        // Print the matrix to verify the read operation\n        System.out.println(\"Original Matrix Data:\");\n        for (double[] row : array) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print additional matrix operations results\n        System.out.println(\"Resulting Matrix after addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n        /* read */ double[][] array = matrix.getData();\n        \n        // Print the matrix to verify the read operation\n        for (double[] row : array) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArray2DRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArray2DRowRealMatrix"
    }
}