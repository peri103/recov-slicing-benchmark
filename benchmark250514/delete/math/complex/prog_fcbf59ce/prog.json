{
    "java_code": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing data for vector creation\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Creating a 3x3 matrix for additional complexity\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        // Creating a matrix using BlockRealMatrix\n        RealMatrix matrix = new BlockRealMatrix(matrixData);\n\n        // Performing matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n        \n        // Creating and manipulating vectors\n        ArrayRealVector vector1 = MatrixUtils.createArrayRealVector(data);\n        ArrayRealVector vector2 = new ArrayRealVector(new double[] {4.0, 5.0, 6.0});\n        \n        // Adding vectors\n        RealVector addedVector = vector1.add(vector2);\n        \n        // Subtracting vectors\n        RealVector subtractedVector = vector1.subtract(vector2);\n\n        // Performing dot product\n        double dotProduct = vector1.dotProduct(vector2);\n        \n        // Performing scalar multiplication\n        RealVector scaledVector = vector1.mapMultiply(2.0);\n        \n        // Writing the original vector using MatrixUtils\n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        // Performing operations on the vector\n        double norm = vector.getNorm();\n        double[] vectorData = vector.toArray();\n        \n        // Retrieving the original vector using MatrixUtils\n        /* read */ ArrayRealVector retrievedVector = MatrixUtils.getArrayRealVector(vector);\n        \n        // Output the retrieved vector to verify\n        System.out.println(retrievedVector);\n\n        // Output additional results for complexity\n        System.out.println(\"Added Vector: \" + addedVector);\n        System.out.println(\"Subtracted Vector: \" + subtractedVector);\n        System.out.println(\"Dot Product: \" + dotProduct);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n        System.out.println(\"Matrix Transpose: \" + transposedMatrix);\n        System.out.println(\"Multiplied Matrix: \" + multipliedMatrix);\n        System.out.println(\"Vector Norm: \" + norm);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Using the MatrixUtils class to create and retrieve an ArrayRealVector\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        /* read */ ArrayRealVector retrievedVector = MatrixUtils.getArrayRealVector(vector);\n        \n        // Output the retrieved vector to verify\n        System.out.println(retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    }
}