{
    "java_code": "import org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array of doubles for the matrix\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        // Create a BlockRealMatrix using the MatrixUtils class\n        /* write */ BlockRealMatrix matrix = (BlockRealMatrix) MatrixUtils.createBlockRealMatrix(data);\n\n        // Perform some operations on the matrix\n        RealMatrix matrixTransposed = matrix.transpose();\n        RealVector vector = new ArrayRealVector(new double[] {5.0, 6.0});\n        RealVector resultVector = matrixTransposed.operate(vector);\n\n        // Print the result of the vector operation\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Initialize another 2D array of doubles for a different matrix\n        double[][] data2 = {\n            {7.0, 8.0},\n            {9.0, 10.0}\n        };\n\n        // Create another BlockRealMatrix using the MatrixUtils class\n        BlockRealMatrix anotherMatrix = (BlockRealMatrix) MatrixUtils.createBlockRealMatrix(data2);\n\n        // Add the two matrices\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n\n        // Print the sum matrix\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Retrieve the BlockRealMatrix using the MatrixUtils class\n        /* read */ BlockRealMatrix retrievedMatrix = (BlockRealMatrix) MatrixUtils.getBlockRealMatrix(matrix.getData());\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array of doubles\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        // Create a BlockRealMatrix using the MatrixUtils class\n        /* write */ BlockRealMatrix matrix = (BlockRealMatrix) MatrixUtils.createBlockRealMatrix(data);\n\n        // Retrieve the BlockRealMatrix using the MatrixUtils class\n        /* read */ BlockRealMatrix retrievedMatrix = (BlockRealMatrix) MatrixUtils.getBlockRealMatrix(matrix.getData());\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createBlockRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getBlockRealMatrix"
    }
}