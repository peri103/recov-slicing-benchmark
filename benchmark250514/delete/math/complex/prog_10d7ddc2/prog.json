{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse matrix with dimensions 3x3\n        int rows = 3;\n        int columns = 3;\n        OpenMapRealMatrix sparseMatrix = new OpenMapRealMatrix(rows, columns);\n\n        // Initialize the matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n\n        /* write */ MatrixUtils.createSparseMatrix(sparseMatrix.getData());\n\n        // Additional Matrix Operations\n        Array2DRowRealMatrix denseMatrix = new Array2DRowRealMatrix(new double[][]{\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        });\n\n        // Perform matrix addition\n        RealMatrix sumMatrix = denseMatrix.add(sparseMatrix);\n        System.out.println(\"Sum Matrix:\");\n        printMatrix(sumMatrix);\n\n        // Create a vector\n        RealVector vector = new ArrayRealVector(new double[]{1, 2, 3});\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = sumMatrix.operate(vector);\n        System.out.println(\"Result Vector:\");\n        printVector(resultVector);\n\n        // Some unrelated computations\n        double result = Math.pow(2, 3) + Math.sqrt(16) - Math.log(1);\n        System.out.println(\"Unrelated computation result: \" + result);\n\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSparseMatrix(sparseMatrix);\n\n        // Print the sparse matrix\n        System.out.println(\"Sparse Matrix:\");\n        printMatrix(readMatrix);\n    }\n\n    private static void printMatrix(RealMatrix matrix) {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    private static void printVector(RealVector vector) {\n        for (int i = 0; i < vector.getDimension(); i++) {\n            System.out.print(vector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse matrix with dimensions 3x3\n        int rows = 3;\n        int columns = 3;\n        OpenMapRealMatrix sparseMatrix = new OpenMapRealMatrix(rows, columns);\n\n        // Initialize the matrix with some values\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n        sparseMatrix.setEntry(2, 2, 3.0);\n\n        /* write */ MatrixUtils.createSparseMatrix(sparseMatrix.getData());\n\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSparseMatrix(sparseMatrix);\n\n        // Print the matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}