{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n\n        // Create another vector for additional operations\n        double[] data2 = {4.0, 5.0, 6.0};\n        RealVector vector2 = MatrixUtils.createRealVector(data2);\n\n        /* write */ SparseRealVector vector = (SparseRealVector) MatrixUtils.createSparseRealVector(data);\n        \n        // Perform some operations on vector2\n        RealVector addedVector = vector2.mapAdd(10);\n        System.out.println(\"Added Vector: \" + addedVector);\n\n        // Create a matrix and perform operations\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix: \" + transposedMatrix);\n\n        // Use the original vector in some calculations\n        RealVector scaledVector = vector.mapMultiply(2);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n\n        // More operations on vector2\n        RealVector subtractedVector = vector2.mapSubtract(1);\n        System.out.println(\"Subtracted Vector: \" + subtractedVector);\n\n        /* read */ RealVector readVector = vector;\n        \n        System.out.println(\"Original Sparse Vector: \" + readVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ SparseRealVector vector = (SparseRealVector) MatrixUtils.createSparseRealVector(data);\n        \n        /* read */ RealVector readVector = vector;\n        \n        System.out.println(\"Vector: \" + readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}