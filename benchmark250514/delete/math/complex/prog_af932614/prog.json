{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an array with some values\n        double[] values = {1.0, 2.0, 3.0};\n\n        // Create a RealVector using MatrixUtils\n        /* write */ RealVector vector = MatrixUtils.createRealVector(values);\n\n        // Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0); // Scale the vector\n        RealVector addedVector = scaledVector.add(vector); // Add the original vector to the scaled one\n\n        // Create a RealMatrix using MatrixUtils\n        double[][] matrixValues = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixValues);\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = matrix.operate(vector);\n\n        // Retrieve the RealVector using MatrixUtils\n        /* read */ RealVector retrievedVector = MatrixUtils.getRealVector(vector.toArray());\n\n        // Print the retrieved values to ensure it matches the original\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(\"Retrieved Vector Entry \" + i + \": \" + retrievedVector.getEntry(i));\n        }\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Matrix-Vector Multiplication Result:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(\"Result Vector Entry \" + i + \": \" + resultVector.getEntry(i));\n        }\n\n        // Additional operations for complexity\n        double norm = vector.getNorm(); // Calculate the norm of the original vector\n        double dotProduct = vector.dotProduct(scaledVector); // Calculate dot product\n\n        // Print additional results\n        System.out.println(\"Norm of Original Vector: \" + norm);\n        System.out.println(\"Dot Product with Scaled Vector: \" + dotProduct);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an array with some values\n        double[] values = {1.0, 2.0, 3.0};\n\n        // Create a RealVector using MatrixUtils\n        /* write */ RealVector vector = MatrixUtils.createRealVector(values);\n\n        // Retrieve the RealVector using MatrixUtils\n        /* read */ RealVector retrievedVector = MatrixUtils.getRealVector(vector.toArray());\n\n        // Print the retrieved values to ensure it matches the original\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(retrievedVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealVector"
    }
}