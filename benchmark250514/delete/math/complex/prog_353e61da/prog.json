{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the data for symmetric matrix\n        double[][] symmetricData = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        // Initialize a vector for unrelated operations\n        double[] vectorData = {1.0, 2.0, 3.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n        \n        // Perform some vector operations\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        double vectorNorm = scaledVector.getNorm();\n        System.out.println(\"Scaled Vector Norm: \" + vectorNorm);\n\n        // Initialize another matrix for operations\n        double[][] otherMatrixData = {\n            {10, 11, 12},\n            {13, 14, 15},\n            {16, 17, 18}\n        };\n        RealMatrix otherMatrix = MatrixUtils.createRealMatrix(otherMatrixData);\n        \n        // Perform matrix operations\n        RealMatrix transposedMatrix = otherMatrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(symmetricData);\n        \n        // Perform operations on symmetric matrix\n        RealMatrix multipliedMatrix = symmetricMatrix.scalarMultiply(2.0);\n        System.out.println(\"Multiplied Symmetric Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved symmetric matrix to verify\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}