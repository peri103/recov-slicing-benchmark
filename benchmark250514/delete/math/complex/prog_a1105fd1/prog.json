{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] matrixData = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(matrixData);\n\n        // Initialize another matrix for complex operations\n        double[][] anotherMatrixData = {\n            {4, 5, 6},\n            {5, 7, 8},\n            {6, 8, 10}\n        };\n\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(anotherMatrixData);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = symmetricMatrix.add(anotherMatrix);\n\n        // Print the result matrix\n        System.out.println(\"Resulting Matrix after Addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = symmetricMatrix.multiply(anotherMatrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Resulting Matrix after Multiplication:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Access the symmetric matrix value\n        /* read */ double value = symmetricMatrix.getEntry(0, 0);\n        System.out.println(\"Read Value: \" + value);\n\n        // Calculate the transpose of the result matrix\n        RealMatrix transposeMatrix = resultMatrix.transpose();\n\n        // Print the transpose matrix\n        System.out.println(\"Transpose of Resulting Matrix:\");\n        for (int i = 0; i < transposeMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposeMatrix.getColumnDimension(); j++) {\n                System.out.print(transposeMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] matrixData = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(matrixData);\n\n        /* read */ double value = symmetricMatrix.getEntry(0, 0);\n\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}