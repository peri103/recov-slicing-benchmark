{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 0.5, 0.3},\n            {0.5, 1.0, 0.2},\n            {0.3, 0.2, 1.0}\n        };\n        \n        // Use MatrixUtils to create a symmetric matrix\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Perform additional operations on the matrix\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(data.length);\n        RealMatrix multipliedMatrix = symmetricMatrix.multiply(identityMatrix);\n        \n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[] {2.0, 3.0, 4.0});\n        RealVector resultVector = multipliedMatrix.operate(vector);\n        \n        // Print the resulting vector\n        System.out.println(\"Resulting Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Use MatrixUtils to get the symmetric matrix (assuming getSymmetricMatrix is a valid method)\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix to verify the operation\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Perform additional matrix operations\n        RealMatrix transposedMatrix = retrievedMatrix.transpose();\n        RealMatrix addedMatrix = retrievedMatrix.add(transposedMatrix);\n        \n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1.0, 0.5, 0.3},\n            {0.5, 1.0, 0.2},\n            {0.3, 0.2, 1.0}\n        };\n        \n        // Use MatrixUtils to create a symmetric matrix\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Use MatrixUtils to get the symmetric matrix (assuming getSymmetricMatrix is a valid method)\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix to verify the operation\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}