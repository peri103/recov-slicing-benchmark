{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize matrix dimensions and values\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 10.0}\n        };\n        \n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n        \n        // Perform some unrelated matrix operations\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 0.5, 0.2});\n        \n        // Solve the system of equations using LU decomposition\n        LUDecomposition luDecomposition = new LUDecomposition(sparseMatrix);\n        DecompositionSolver solver = luDecomposition.getSolver();\n        RealVector solution = solver.solve(vector);\n        \n        // Print the solution vector\n        System.out.println(\"Solution to the system:\");\n        for (int i = 0; i < solution.getDimension(); i++) {\n            System.out.println(solution.getEntry(i));\n        }\n\n        // Continue with some more complex operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(rows);\n        RealMatrix multipliedMatrix = sparseMatrix.multiply(identityMatrix);\n        \n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the sparse matrix using MatrixUtils (in this case, we will access the matrix directly)\n        /* read */ RealMatrix readMatrix = sparseMatrix;\n        \n        // Print the matrix to verify\n        System.out.println(\"Sparse Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize matrix dimensions and values\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 1.0}\n        };\n        \n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data);\n        \n        // Read the sparse matrix using MatrixUtils (in this case, we will access the matrix directly)\n        /* read */ RealMatrix readMatrix = sparseMatrix;\n        \n        // Print the matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}