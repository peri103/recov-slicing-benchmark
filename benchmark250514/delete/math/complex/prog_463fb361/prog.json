{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse real vector using MatrixUtils\n        double[] data = {1.0, 2.0, 3.0}; // Example data for the vector\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Perform some operations on a dense vector\n        double[] denseData = {4.0, 5.0, 6.0};\n        RealVector denseVector = new ArrayRealVector(denseData);\n        double dotProduct = vector.dotProduct(denseVector);\n        System.out.println(\"Dot product of sparse and dense vectors: \" + dotProduct);\n\n        // Create a matrix and perform operations\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n        RealVector resultVector = matrix.operate(denseVector);\n        System.out.println(\"Result of matrix-vector multiplication: \" + resultVector);\n\n        // More operations with the original sparse vector\n        RealVector addedVector = vector.add(denseVector);\n        System.out.println(\"Addition of sparse and dense vectors: \" + addedVector);\n\n        // Retrieve the sparse real vector using MatrixUtils\n        /* read */ RealVector retrievedVector = MatrixUtils.getSparseRealVector(vector);\n\n        // Print the retrieved vector to verify the operation\n        System.out.println(\"Retrieved sparse vector: \" + retrievedVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse real vector using MatrixUtils\n        double[] data = {1.0, 2.0, 3.0}; // Example data for the vector\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Retrieve the sparse real vector using MatrixUtils\n        /* read */ RealVector retrievedVector = MatrixUtils.getSparseRealVector(vector);\n\n        // Print the retrieved vector to verify the operation\n        System.out.println(retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}