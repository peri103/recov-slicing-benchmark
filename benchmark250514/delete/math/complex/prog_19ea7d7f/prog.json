{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixDimensionMismatchException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse matrix with some values\n        double[][] data = {\n            {0, 0, 0},\n            {0, 1, 0},\n            {0, 0, 0}\n        };\n\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data.length, data[0].length);\n        \n        // Populate the sparse matrix with the given data\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data[i].length; j++) {\n                sparseMatrix.setEntry(i, j, data[i][j]);\n            }\n        }\n\n        // Create a dense matrix for additional operations\n        RealMatrix denseMatrix = MatrixUtils.createRealMatrix(new double[][] {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        });\n\n        // Perform some operations on the dense matrix\n        RealMatrix transposedMatrix = denseMatrix.transpose();\n        RealMatrix addedMatrix = denseMatrix.add(transposedMatrix);\n\n        // Vector operations\n        RealVector vector = new ArrayRealVector(new double[] {1, 2, 3});\n        RealVector resultVector = denseMatrix.operate(vector);\n\n        // Print results of vector operations\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Error handling for matrix operations\n        try {\n            RealMatrix invalidOperation = denseMatrix.multiply(sparseMatrix);\n        } catch (MatrixDimensionMismatchException e) {\n            System.out.println(\"Matrix dimensions do not match for multiplication.\");\n        }\n\n        // Retrieve the sparse matrix\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix;\n\n        // Print the retrieved matrix to verify the values\n        System.out.println(\"Sparse Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional operations on the dense matrix\n        RealMatrix scaledMatrix = denseMatrix.scalarMultiply(2);\n        System.out.println(\"Scaled Dense Matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse matrix with some values\n        double[][] data = {\n            {0, 0, 0},\n            {0, 1, 0},\n            {0, 0, 0}\n        };\n\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data.length, data[0].length);\n        \n        // Populate the sparse matrix with the given data\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data[i].length; j++) {\n                sparseMatrix.setEntry(i, j, data[i][j]);\n            }\n        }\n\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix;\n        \n        // Print the retrieved matrix to verify the values\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}