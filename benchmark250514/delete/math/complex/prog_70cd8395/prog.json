{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.MatrixDimensionMismatchException;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        double[][] additionalData = {{5.0, 6.0}, {7.0, 8.0}};\n\n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n\n        // Perform some matrix operations\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalData);\n        RealMatrix sumMatrix = matrix.add(additionalMatrix);\n\n        // Calculate the transpose of the sumMatrix\n        RealMatrix transposeMatrix = sumMatrix.transpose();\n        \n        // Create a vector and multiply with the transposeMatrix\n        RealVector vector = MatrixUtils.createRealVector(new double[]{1.0, 1.0});\n        RealVector resultVector = transposeMatrix.operate(vector);\n\n        // Print the result of vector multiplication\n        System.out.println(\"Result of vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Handling matrix dimension mismatch exception\n        try {\n            RealMatrix mismatchedMatrix = new Array2DRowRealMatrix(new double[][]{{1.0}, {2.0}, {3.0}});\n            RealMatrix result = matrix.add(mismatchedMatrix);\n        } catch (MatrixDimensionMismatchException e) {\n            System.out.println(\"Matrix dimension mismatch occurred.\");\n        }\n\n        // More complex operations\n        double determinant = matrix.determinant();\n        System.out.println(\"Determinant of the original matrix: \" + determinant);\n\n        /* read */ double[][] readData = matrix.getData();\n\n        // Print the original matrix data\n        System.out.println(\"Original matrix data:\");\n        for (int i = 0; i < readData.length; i++) {\n            for (int j = 0; j < readData[i].length; j++) {\n                System.out.print(readData[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n        /* read */ double[][] readData = matrix.getData();\n        \n        for (int i = 0; i < readData.length; i++) {\n            for (int j = 0; j < readData[i].length; j++) {\n                System.out.print(readData[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArray2DRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArray2DRowRealMatrix"
    }
}