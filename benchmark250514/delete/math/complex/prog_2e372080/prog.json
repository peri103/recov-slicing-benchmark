{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sample matrix\n        double[][] data = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create another matrix for additional operations\n        double[][] additionalData = {\n            {10, 11, 12},\n            {13, 14, 15},\n            {16, 17, 18}\n        };\n        RealMatrix additionalMatrix = MatrixUtils.createRealMatrix(additionalData);\n\n        // Write: Create a column real vector from the matrix\n        /* write */ RealVector columnVector = MatrixUtils.createColumnRealVector(matrix.getColumn(0));\n\n        // Perform some operations on the additional matrix\n        RealMatrix sumMatrix = matrix.add(additionalMatrix);\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Another operation: Transpose of the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read: Retrieve the column real vector from the matrix\n        /* read */ RealVector retrievedVector = matrix.getColumnVector(0);\n\n        // Print the retrieved vector\n        System.out.println(\"Retrieved Vector:\");\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.print(retrievedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform a dot product operation between two vectors\n        RealVector vectorA = MatrixUtils.createRealVector(new double[]{1, 2, 3});\n        RealVector vectorB = MatrixUtils.createRealVector(new double[]{4, 5, 6});\n        double dotProduct = vectorA.dotProduct(vectorB);\n        System.out.println(\"Dot Product of vectorA and vectorB: \" + dotProduct);\n\n        // Scale a vector\n        RealVector scaledVector = vectorA.mapMultiply(2);\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sample matrix\n        double[][] data = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Write: Create a column real vector from the matrix\n        /* write */ RealVector columnVector = MatrixUtils.createColumnRealVector(matrix.getColumn(0));\n\n        // Read: Retrieve the column real vector from the matrix\n        /* read */ RealVector retrievedVector = matrix.getColumnVector(0);\n\n        // Print the retrieved vector\n        System.out.println(retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealVector"
    }
}