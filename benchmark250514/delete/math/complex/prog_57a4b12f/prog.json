{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse matrix with dimensions 2x2 and some values\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 2.0}\n        };\n\n        // Create another matrix for additional operations\n        double[][] additionalData = {\n            {3.0, 1.0},\n            {1.0, 3.0}\n        };\n\n        RealMatrix additionalMatrix = MatrixUtils.createSparseMatrix(additionalData.length, additionalData[0].length, additionalData);\n\n        // Create a vector for matrix-vector multiplication\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0});\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = additionalMatrix.operate(vector);\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data.length, data[0].length, data);\n\n        // Perform matrix addition with the sparse matrix and additional matrix\n        RealMatrix addedMatrix = sparseMatrix.add(additionalMatrix);\n\n        // Print the result of matrix addition\n        System.out.println(\"Result of matrix addition:\");\n        for (int row = 0; row < addedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < addedMatrix.getColumnDimension(); col++) {\n                System.out.print(addedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Assuming getSparseMatrix is a hypothetical method for reading the matrix\n        // Since there's no actual `getSparseMatrix` method in MatrixUtils, we simulate reading the matrix\n        /* read */ RealMatrix readMatrix = sparseMatrix; // Directly using the matrix for demonstration\n\n        // Print the matrix to verify\n        System.out.println(\"Sparse matrix:\");\n        for (int row = 0; row < readMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < readMatrix.getColumnDimension(); col++) {\n                System.out.print(readMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse matrix with dimensions 2x2 and some values\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 2.0}\n        };\n        \n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data.length, data[0].length, data);\n\n        // Assuming getSparseMatrix is a hypothetical method for reading the matrix\n        // Since there's no actual `getSparseMatrix` method in MatrixUtils, we simulate reading the matrix\n        /* read */ RealMatrix readMatrix = sparseMatrix; // Directly using the matrix for demonstration\n\n        // Print the matrix to verify\n        for (int row = 0; row < readMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < readMatrix.getColumnDimension(); col++) {\n                System.out.print(readMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}