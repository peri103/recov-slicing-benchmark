{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n        \n        // Adding complexity: Transpose the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        \n        // Adding complexity: Create a vector and multiply it with the matrix\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 1.0, 1.0});\n        RealVector resultVector = transposedMatrix.operate(vector);\n        \n        // Print the result of the vector multiplication\n        System.out.println(\"Resulting vector after matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Adding more complexity: Apply a visitor to modify the matrix\n        matrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n            \n            public double visit(int row, int column, double value) {\n                return value + 1.0;  // Increment each element by 1\n            }\n            \n            public double end() {\n                return 0;\n            }\n        });\n        \n        // Perform some unrelated operations\n        double sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i * 2.5;\n        }\n        System.out.println(\"Sum of the first ten multiples of 2.5: \" + sum);\n        \n        // More unrelated operations\n        int factorial = 1;\n        for (int i = 1; i <= 5; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"Factorial of 5: \" + factorial);\n        \n        // Finally, read the matrix data back\n        /* read */ double[][] readData = matrix.getData();\n        \n        System.out.println(\"Matrix after all operations:\");\n        for (double[] row : readData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createArray2DRowRealMatrix(data);\n        \n        /* read */ double[][] readData = matrix.getData();\n        \n        for (double[] row : readData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArray2DRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArray2DRowRealMatrix"
    }
}