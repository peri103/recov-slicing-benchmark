{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix data\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {2.0, 4.0, 5.0},\n            {3.0, 5.0, 6.0}\n        };\n        \n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Initialize a vector\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Perform some operations with the matrix and vector\n        RealVector resultVector = symmetricMatrix.operate(vector);\n        \n        // Print the result of the vector operation\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // More operations to increase complexity\n        RealMatrix matrixSum = symmetricMatrix.add(symmetricMatrix);\n        System.out.println(\"Matrix after addition with itself:\");\n        for (int i = 0; i < matrixSum.getRowDimension(); i++) {\n            for (int j = 0; j < matrixSum.getColumnDimension(); j++) {\n                System.out.print(matrixSum.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the matrix to verify the read operation\n        System.out.println(\"Read symmetric matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional operation: matrix transpose\n        RealMatrix transposedMatrix = symmetricMatrix.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix data\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {2.0, 4.0, 5.0},\n            {3.0, 5.0, 6.0}\n        };\n        \n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the matrix to verify the read operation\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}