{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using the write method\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Additional complex code using RealVector\n        RealVector additionalVector = new OpenMapRealVector(3);\n        for (int i = 0; i < 3; i++) {\n            additionalVector.setEntry(i, new Random().nextDouble() * 10);\n        }\n\n        // Perform some operations on the additionalVector\n        RealVector scaledVector = additionalVector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n\n        // More operations on the original vector\n        vector.setEntry(0, 10.0);\n        vector.setEntry(1, 20.0);\n        vector.setEntry(2, 30.0);\n\n        // Compute the dot product of vector and additionalVector\n        double dotProduct = vector.dotProduct(additionalVector);\n        System.out.println(\"Dot Product: \" + dotProduct);\n\n        // Read the vector using the read method\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vector);\n\n        // Print the vector to verify the read operation\n        System.out.println(\"Read Vector: \" + readVector);\n\n        // Further operations on readVector\n        RealVector normalizedVector = readVector.mapDivide(readVector.getNorm());\n        System.out.println(\"Normalized Vector: \" + normalizedVector);\n\n        // Final operation to verify all steps\n        double finalDotProduct = readVector.dotProduct(normalizedVector);\n        System.out.println(\"Final Dot Product with Normalized Vector: \" + finalDotProduct);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using the write method\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Read the vector using the read method\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vector);\n\n        // Print the vector to verify the read operation\n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    }
}