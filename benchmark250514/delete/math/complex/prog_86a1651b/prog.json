{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        // Create a symmetric matrix using the MatrixUtils class\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Perform some unrelated operations to make the program more complex\n        double[][] matrixData = {\n            {1, 0, 0},\n            {0, 1, 0},\n            {0, 0, 1}\n        };\n        RealMatrix identityMatrix = new Array2DRowRealMatrix(matrixData);\n        RealVector vector = new ArrayRealVector(new double[]{1, 2, 3});\n        RealVector resultVector = identityMatrix.operate(vector);\n\n        // Print the result of the unrelated operations\n        System.out.println(\"Result of identity matrix operation on vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the symmetric matrix using the MatrixUtils class\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify the read operation\n        System.out.println(\"Read symmetric matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional complex operations\n        double determinant = readMatrix.getDeterminant();\n        System.out.println(\"Determinant of the symmetric matrix: \" + determinant);\n\n        RealMatrix transposedMatrix = readMatrix.transpose();\n        System.out.println(\"Transposed symmetric matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        // Create a symmetric matrix using the MatrixUtils class\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using the MatrixUtils class\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify the read operation\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}