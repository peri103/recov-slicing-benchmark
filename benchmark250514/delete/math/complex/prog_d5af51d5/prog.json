{
    "java_code": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixFormat;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealVectorFormat;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize data for ArrayRealVector\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Create a RealMatrix for demonstration\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = new BlockRealMatrix(matrixData);\n        \n        // Format matrix and print\n        RealMatrixFormat matrixFormat = new RealMatrixFormat();\n        System.out.println(\"Matrix:\");\n        System.out.println(matrixFormat.format(matrix));\n        \n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        System.out.println(matrixFormat.format(transposedMatrix));\n        \n        // Create another RealVector using MatrixUtils\n        double[] anotherData = {4.0, 5.0, 6.0};\n        ArrayRealVector anotherVector = MatrixUtils.createArrayRealVector(anotherData);\n        \n        // Format vector and print\n        RealVectorFormat vectorFormat = new RealVectorFormat();\n        System.out.println(\"Another Vector:\");\n        System.out.println(vectorFormat.format(anotherVector));\n        \n        // Perform operations on vectors\n        RealVector addedVector = anotherVector.add(new ArrayRealVector(data));\n        System.out.println(\"Added Vector:\");\n        System.out.println(vectorFormat.format(addedVector));\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        // Perform more operations on the original vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector:\");\n        System.out.println(vectorFormat.format(scaledVector));\n        \n        // Perform subtraction with another vector\n        RealVector subtractedVector = vector.subtract(anotherVector);\n        System.out.println(\"Subtracted Vector:\");\n        System.out.println(vectorFormat.format(subtractedVector));\n        \n        // Read the original vector data\n        /* read */ double[] readData = vector.toArray();\n        \n        // Print the read data\n        System.out.println(\"Read Data:\");\n        for (double value : readData) {\n            System.out.println(value);\n        }\n        \n        // Perform dot product operation\n        double dotProduct = vector.dotProduct(anotherVector);\n        System.out.println(\"Dot Product:\");\n        System.out.println(dotProduct);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        /* read */ double[] readData = vector.toArray();\n        \n        for (double value : readData) {\n            System.out.println(value);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    }
}