{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the diagonal values\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n\n        // Use MatrixUtils to create a diagonal matrix\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Create a vector to perform matrix-vector multiplication\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 1.0, 1.0});\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = matrix.operate(vector);\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Create another matrix for additional operations\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(new double[][]{\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        });\n\n        // Perform matrix addition\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n\n        // Print the result of matrix addition\n        System.out.println(\"Result of matrix addition:\");\n        for (int row = 0; row < sumMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < sumMatrix.getColumnDimension(); col++) {\n                System.out.print(sumMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Use MatrixUtils to read the diagonal values from the matrix\n        /* read */ double[] readDiagonalValues = matrix.getRow(0); // Assuming we want the first row which contains the diagonal values\n\n        // Print the read diagonal values\n        System.out.println(\"Read diagonal values:\");\n        for (double value : readDiagonalValues) {\n            System.out.println(value);\n        }\n\n        // Perform additional operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n\n        // Print the transposed matrix\n        System.out.println(\"Transposed matrix:\");\n        for (int row = 0; row < transposedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < transposedMatrix.getColumnDimension(); col++) {\n                System.out.print(transposedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the diagonal values\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n\n        // Use MatrixUtils to create a diagonal matrix\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Use MatrixUtils to read the diagonal values from the matrix\n        /* read */ double[] readDiagonalValues = matrix.getRow(0); // Assuming we want the first row which contains the diagonal values\n\n        // Print the read diagonal values\n        for (double value : readDiagonalValues) {\n            System.out.println(value);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}