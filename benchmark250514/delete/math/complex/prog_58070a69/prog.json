{
    "java_code": "import org.apache.commons.math3.linear.SymmetricMatrix;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix with a size of 3x3\n        SymmetricMatrix matrix = new SymmetricMatrix(3);\n\n        // Initialize a HashMap to store additional matrix entries\n        HashMap<String, Double> matrixEntries = new HashMap<>();\n\n        // Write a value to the matrix at position (1, 2)\n        /* write */ matrix.setEntry(1, 2, 5.0);\n\n        // Additional unrelated code: Add entries to the HashMap\n        matrixEntries.put(\"entry_0_1\", 2.5);\n        matrixEntries.put(\"entry_2_2\", 8.0);\n\n        // Simulate some complex operations\n        double sum = 0.0;\n        for (String key : matrixEntries.keySet()) {\n            sum += matrixEntries.get(key);\n        }\n        System.out.println(\"Sum of additional entries: \" + sum);\n\n        // More complex operations with matrix\n        matrix.setEntry(0, 0, 1.0);\n        matrix.setEntry(0, 1, 2.0);\n        matrix.setEntry(2, 2, 3.0);\n\n        double diagonalSum = matrix.getEntry(0, 0) + matrix.getEntry(2, 2);\n        System.out.println(\"Sum of diagonal entries: \" + diagonalSum);\n\n        // Read the value from the matrix at position (1, 2)\n        /* read */ double value = matrix.getEntry(1, 2);\n\n        // Print the read value\n        System.out.println(\"Read value: \" + value);\n\n        // Additional matrix operations\n        double trace = matrix.getEntry(0, 0) + matrix.getEntry(1, 1) + matrix.getEntry(2, 2);\n        System.out.println(\"Trace of matrix: \" + trace);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.SymmetricMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix with a size of 3x3\n        SymmetricMatrix matrix = new SymmetricMatrix(3);\n\n        // Write a value to the matrix at position (1, 2)\n        /* write */ matrix.setEntry(1, 2, 5.0);\n\n        // Read the value from the matrix at position (1, 2)\n        /* read */ double value = matrix.getEntry(1, 2);\n\n        // Print the read value\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.SymmetricMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.SymmetricMatrix",
        "read_method": "getEntry"
    }
}