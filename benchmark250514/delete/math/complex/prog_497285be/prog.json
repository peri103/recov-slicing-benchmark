{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a symmetric matrix using the write method\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Additional unrelated code to make the program more complex\n        RealVector vector = new ArrayRealVector(new double[]{1, 2, 3});\n        RealVector vector2 = new ArrayRealVector(new double[]{4, 5, 6});\n        RealVector resultVector = vector.add(vector2);\n        \n        System.out.println(\"Resultant Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform some operations on the matrix\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix multipliedMatrix = symmetricMatrix.multiply(identityMatrix);\n\n        // Perform a matrix operation\n        RealMatrix transposedMatrix = multipliedMatrix.transpose();\n\n        // Additional operations\n        double determinant = transposedMatrix.getDeterminant();\n        System.out.println(\"Determinant of Transposed Matrix: \" + determinant);\n\n        // Read the symmetric matrix using the read method\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // More complex operations\n        RealMatrix addedMatrix = retrievedMatrix.add(identityMatrix);\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a symmetric matrix using the write method\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using the read method\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}