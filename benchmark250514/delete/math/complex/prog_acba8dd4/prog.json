{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse real vector using MatrixUtils\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Create a real matrix using MatrixUtils\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n\n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n\n        // More complex calculations\n        RealVector addedVector = vector.add(scaledVector);\n        System.out.println(\"Added Vector: \" + addedVector);\n\n        // Retrieve the sparse real vector using MatrixUtils\n        /* read */ RealVector retrievedVector = vector; // Since there's no direct method 'getSparseRealVector', we assume retrieval is direct\n\n        // Output the vector to ensure it was correctly written and read\n        System.out.println(\"Retrieved Vector: \" + retrievedVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse real vector using MatrixUtils\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Retrieve the sparse real vector using MatrixUtils\n        /* read */ RealVector retrievedVector = vector; // Since there's no direct method 'getSparseRealVector', we assume retrieval is direct\n\n        // Output the vector to ensure it was correctly written and read\n        System.out.println(\"Vector: \" + retrievedVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}