{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse vector with a size and an initial value.\n        double[] initialValues = {1.0, 2.0, 3.0};\n        \n        /* write */\n        RealVector vector = MatrixUtils.createSparseRealVector(initialValues);\n        \n        // Perform some operations on the vector\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the vector: \" + norm);\n        \n        // Create a matrix and perform operations\n        double[][] matrixData = {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        };\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        \n        // Print the transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int row = 0; row < transposedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < transposedMatrix.getColumnDimension(); col++) {\n                System.out.print(transposedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Perform vector addition\n        RealVector anotherVector = MatrixUtils.createSparseRealVector(new double[]{3.0, 2.0, 1.0});\n        RealVector sumVector = vector.add(anotherVector);\n        \n        System.out.println(\"Sum of vectors:\");\n        for (int i = 0; i < sumVector.getDimension(); i++) {\n            System.out.print(sumVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Perform scalar multiplication\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        \n        System.out.println(\"Scaled vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // More operations to make the program complex\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix productMatrix = matrix.multiply(identityMatrix);\n        \n        System.out.println(\"Product with identity matrix:\");\n        for (int row = 0; row < productMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < productMatrix.getColumnDimension(); col++) {\n                System.out.print(productMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Now read the vector that was initially written\n        /* read */\n        RealVector readVector = MatrixUtils.getSparseRealVector(vector.toArray());\n        \n        // Print the values to verify they match the written values.\n        System.out.println(\"Read vector values:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.println(readVector.getEntry(i));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the sparse vector with a size and an initial value.\n        double[] initialValues = {1.0, 2.0, 3.0};\n        \n        /* write */\n        RealVector vector = MatrixUtils.createSparseRealVector(initialValues);\n        \n        /* read */\n        RealVector readVector = MatrixUtils.getSparseRealVector(vector.toArray());\n        \n        // Print the values to verify they match the written values.\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.println(readVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    }
}