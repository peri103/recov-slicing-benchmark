{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.DecompositionSolver;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a triangular matrix\n        double[][] data = {\n            {1, 2, 3},\n            {0, 4, 5},\n            {0, 0, 6}\n        };\n        \n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Create another matrix for unrelated operations\n        double[][] unrelatedData = {\n            {7, 8, 9},\n            {10, 11, 12},\n            {13, 14, 15}\n        };\n        RealMatrix unrelatedMatrix = new Array2DRowRealMatrix(unrelatedData);\n\n        // Perform LU decomposition on the unrelated matrix\n        LUDecomposition luDecomposition = new LUDecomposition(unrelatedMatrix);\n        DecompositionSolver solver = luDecomposition.getSolver();\n\n        // Solve a system of equations using the unrelated matrix\n        double[] b = {1, 2, 3};\n        double[] x = solver.solve(new Array2DRowRealMatrix(b)).getColumn(0);\n\n        // Print the solution to the system of equations\n        System.out.println(\"Solution to the system of equations:\");\n        for (double value : x) {\n            System.out.println(value);\n        }\n\n        // More unrelated operations\n        double[][] anotherData = {\n            {16, 17, 18},\n            {19, 20, 21},\n            {22, 23, 24}\n        };\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(anotherData);\n        RealMatrix multipliedMatrix = unrelatedMatrix.multiply(anotherMatrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the triangular matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the read matrix to verify\n        System.out.println(\"Read triangular matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a triangular matrix\n        double[][] data = {\n            {1, 2, 3},\n            {0, 4, 5},\n            {0, 0, 6}\n        };\n        \n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Read the triangular matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the read matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    }
}