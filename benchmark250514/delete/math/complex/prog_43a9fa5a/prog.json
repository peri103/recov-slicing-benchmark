{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the diagonal values\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n\n        // Create a diagonal matrix using MatrixUtils\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Additional code to make the program more complex\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector resultVector = matrix.operate(vector); // Multiply matrix with vector\n\n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Perform matrix addition with another matrix\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(new double[][]{{7.0, 8.0, 9.0}, {10.0, 11.0, 12.0}, {13.0, 14.0, 15.0}});\n        RealMatrix addedMatrix = matrix.add(anotherMatrix);\n\n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int row = 0; row < addedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < addedMatrix.getColumnDimension(); col++) {\n                System.out.print(addedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the diagonal matrix using MatrixUtils (assuming getDiagonalMatrix is a hypothetical method)\n        /* read */ double[] readValues = matrix.getColumn(0); // Using getColumn(0) to simulate reading diagonal values\n\n        // Print the read diagonal values\n        System.out.println(\"Read Diagonal Values:\");\n        for (double value : readValues) {\n            System.out.println(value);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the diagonal values\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n\n        // Create a diagonal matrix using MatrixUtils\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Read the diagonal matrix using MatrixUtils (assuming getDiagonalMatrix is a hypothetical method)\n        /* read */ double[] readValues = matrix.getColumn(0); // Using getColumn(0) to simulate reading diagonal values\n\n        // Print the read diagonal values\n        for (double value : readValues) {\n            System.out.println(value);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    }
}