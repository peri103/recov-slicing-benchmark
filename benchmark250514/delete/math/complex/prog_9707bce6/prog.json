{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 3x3 matrix with some values\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Create a RealMatrix using the data\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix squaredMatrix = matrix.multiply(transposedMatrix);\n\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector multipliedVector = squaredMatrix.operate(vector);\n\n        // Write: Create a triangular matrix from the given matrix\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(matrix);\n\n        // Perform some unrelated operations to increase complexity\n        double determinant = squaredMatrix.getDeterminant();\n        RealMatrix inverseMatrix = squaredMatrix.inverse();\n\n        // Print the determinant and inverse matrix\n        System.out.println(\"Determinant of squared matrix: \" + determinant);\n        System.out.println(\"Inverse of squared matrix:\");\n        for (int row = 0; row < inverseMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < inverseMatrix.getColumnDimension(); col++) {\n                System.out.print(inverseMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read: Get the triangular matrix\n        /* read */ RealMatrix readMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the matrix to verify the values\n        System.out.println(\"Triangular matrix:\");\n        for (int row = 0; row < readMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < readMatrix.getColumnDimension(); col++) {\n                System.out.print(readMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform additional operations on the vector\n        RealVector addedVector = multipliedVector.add(vector);\n        System.out.println(\"Resulting vector after addition:\");\n        for (int i = 0; i < addedVector.getDimension(); i++) {\n            System.out.print(addedVector.getEntry(i) + \" \");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 3x3 matrix with some values\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        // Create a RealMatrix using the data\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Write: Create a triangular matrix from the given matrix\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(matrix);\n\n        // Read: Get the triangular matrix\n        /* read */ RealMatrix readMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the matrix to verify the values\n        for (int row = 0; row < readMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < readMatrix.getColumnDimension(); col++) {\n                System.out.print(readMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    }
}