{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with one row\n        double[][] matrixData = {{1.0, 2.0, 3.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Create a vector to be written into the matrix\n        double[] vectorData = {4.0, 5.0, 6.0};\n        RealVector vector = MatrixUtils.createRowRealVector(vectorData);\n\n        // Additional matrix operations\n        double[][] additionalMatrixData = {{7.0, 8.0, 9.0}, {10.0, 11.0, 12.0}};\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalMatrixData);\n\n        // Perform a matrix multiplication\n        RealMatrix resultMatrix = matrix.multiply(additionalMatrix);\n\n        // Display the result of matrix multiplication\n        System.out.println(\"Result of matrix multiplication:\");\n        for (int row = 0; row < resultMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < resultMatrix.getColumnDimension(); col++) {\n                System.out.print(resultMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Write the vector into the original matrix\n        /* write */ matrix.setRowVector(0, vector);\n\n        // Perform some unrelated vector operations\n        RealVector anotherVector = vector.mapMultiply(2.0);\n        System.out.println(\"Another vector after multiplication:\");\n        for (int i = 0; i < anotherVector.getDimension(); i++) {\n            System.out.print(anotherVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // More matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int row = 0; row < transposedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < transposedMatrix.getColumnDimension(); col++) {\n                System.out.print(transposedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the vector back from the matrix\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n        System.out.println(\"Read vector from matrix:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.print(readVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with one row\n        double[][] matrixData = {{1.0, 2.0, 3.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Create a vector to be written into the matrix\n        double[] vectorData = {4.0, 5.0, 6.0};\n        RealVector vector = MatrixUtils.createRowRealVector(vectorData);\n\n        /* write */ matrix.setRowVector(0, vector);\n\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    }
}