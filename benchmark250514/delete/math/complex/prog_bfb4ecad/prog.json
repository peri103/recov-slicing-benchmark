{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize variables for matrix dimensions and data\n        int rows = 2;\n        int columns = 2;\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 1.0}\n        };\n\n        // Create a sparse matrix using the specified method\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = sparseMatrix.transpose();\n        RealVector vector = new ArrayRealVector(new double[]{1, 2});\n        RealVector resultVector = transposedMatrix.operate(vector);\n\n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n\n        // Additional unrelated complex logic\n        double[][] additionalData = {\n            {2.0, 3.0},\n            {4.0, 5.0}\n        };\n        RealMatrix additionalMatrix = MatrixUtils.createRealMatrix(additionalData);\n        RealMatrix multipliedMatrix = sparseMatrix.multiply(additionalMatrix);\n\n        // Perform some complex matrix operations\n        RealMatrix sumMatrix = multipliedMatrix.add(transposedMatrix);\n        RealMatrix scaledMatrix = sumMatrix.scalarMultiply(2.0);\n\n        // Print the scaled matrix\n        System.out.println(\"Scaled Matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the sparse matrix using the specified method\n        /* read */ RealMatrix readMatrix = sparseMatrix; // Since there is no getSparseMatrix method, use the created matrix directly\n\n        // Print the matrix to verify the content\n        System.out.println(\"Original Sparse Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize variables for matrix dimensions and data\n        int rows = 2;\n        int columns = 2;\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 1.0}\n        };\n\n        // Create a sparse matrix using the specified method\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Read the sparse matrix using the specified method\n        /* read */ RealMatrix readMatrix = sparseMatrix; // Since there is no getSparseMatrix method, use the created matrix directly\n\n        // Print the matrix to verify the content\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}