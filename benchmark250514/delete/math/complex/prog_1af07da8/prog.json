{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a symmetric matrix using MatrixUtils\n        double[][] data = {\n            {1.0, 0.5, 0.3},\n            {0.5, 1.0, 0.4},\n            {0.3, 0.4, 1.0}\n        };\n        \n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Create a vector and perform some operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector resultVector = symmetricMatrix.operate(vector);\n\n        // Modify the matrix using a visitor\n        symmetricMatrix.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n\n            @Override\n            public double visit(int row, int column, double value) {\n                return value * 2; // Double each element\n            }\n\n            @Override\n            public double end() {\n                return 0;\n            }\n        });\n\n        // Perform some unrelated computations\n        double sum = 0;\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            sum += resultVector.getEntry(i);\n        }\n        System.out.println(\"Sum of result vector: \" + sum);\n\n        // More complex operations\n        RealMatrix anotherMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix multipliedMatrix = symmetricMatrix.multiply(anotherMatrix);\n\n        // Finally read the symmetric matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix to verify the correct value\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a symmetric matrix using MatrixUtils\n        double[][] data = {\n            {1.0, 0.5, 0.3},\n            {0.5, 1.0, 0.4},\n            {0.3, 0.4, 1.0}\n        };\n        \n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix to verify the correct value\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    }
}