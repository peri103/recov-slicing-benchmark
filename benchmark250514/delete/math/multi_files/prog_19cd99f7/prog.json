{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public void createTriangularMatrix(double[][] data) {\n        /* write */ matrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public RealMatrix getTriangularMatrix() {\n        return matrix;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Course> courses = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void enrollCourse(Course course) {\n        courses.add(course);\n    }\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n}\n",
        "Course.java": "public class Course {\n    private String courseName;\n    private MatrixOperations matrixOps = new MatrixOperations();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void setCourseMatrix(double[][] data) {\n        matrixOps.createTriangularMatrix(data);\n    }\n\n    public RealMatrix getCourseMatrix() {\n        return matrixOps.getTriangularMatrix();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a student and enroll in courses\n        Student student = new Student(\"Alice\");\n        Course mathCourse = new Course(\"Mathematics\");\n        student.enrollCourse(mathCourse);\n\n        // Set matrix data for the course\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {2.0, 1.0, 0.0},\n            {3.0, 2.0, 1.0}\n        };\n        mathCourse.setCourseMatrix(data);\n\n        // Retrieve and print the matrix from the course\n        RealMatrix matrix = mathCourse.getCourseMatrix();\n        /* read */ System.out.println(\"Course Matrix:\");\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a square matrix with given dimensions\n        int dimension = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {2.0, 1.0, 0.0},\n            {3.0, 2.0, 1.0}\n        };\n\n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createRealMatrix(data);\n\n        // Read the triangular matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.createRealMatrix(triangularMatrix.getData());\n\n        // Print the matrix to verify the operations\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a square matrix with given dimensions\n        int dimension = 3;\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {2.0, 1.0, 0.0},\n            {3.0, 2.0, 1.0}\n        };\n\n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createRealMatrix(data);\n\n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = triangularMatrix.transpose();\n        RealMatrix multipliedMatrix = triangularMatrix.multiply(transposedMatrix);\n\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n        RealVector resultVector = multipliedMatrix.operate(vector);\n\n        // Print the result vector\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the triangular matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.createRealMatrix(triangularMatrix.getData());\n\n        // Print the matrix to verify the operations\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional complex operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(dimension);\n        RealMatrix addedMatrix = readMatrix.add(identityMatrix);\n\n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}