{
    "files": {
        "MatrixUtilsWrapper.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixUtilsWrapper {\n    private RealMatrix symmetricMatrix;\n\n    public void createSymmetricMatrix(double[][] data) {\n        /* write */ symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n    }\n\n    public RealMatrix getSymmetricMatrix() {\n        return symmetricMatrix;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a Course and add Students\n        Course course = new Course(\"Linear Algebra\");\n        course.addStudent(new Student(\"Alice\", 1));\n        course.addStudent(new Student(\"Bob\", 2));\n\n        // Print course details\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", ID: \" + student.getId());\n        }\n\n        // Initialize and use MatrixUtilsWrapper\n        MatrixUtilsWrapper matrixWrapper = new MatrixUtilsWrapper();\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        matrixWrapper.createSymmetricMatrix(data);\n\n        // Retrieve and print the symmetric matrix\n        /* read */ RealMatrix retrievedMatrix = matrixWrapper.getSymmetricMatrix();\n        System.out.println(\"Retrieved symmetric matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Retrieve the symmetric matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Create a vector for additional operations\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = symmetricMatrix.operate(vector);\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform matrix decomposition\n        LUDecomposition decomposition = new LUDecomposition(symmetricMatrix);\n        DecompositionSolver solver = decomposition.getSolver();\n        RealVector solution = solver.solve(vector);\n        System.out.println(\"Solution of the linear system:\");\n        for (int i = 0; i < solution.getDimension(); i++) {\n            System.out.print(solution.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Retrieve the symmetric matrix\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved symmetric matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform additional operations on the retrieved matrix\n        RealMatrix transposedMatrix = retrievedMatrix.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}