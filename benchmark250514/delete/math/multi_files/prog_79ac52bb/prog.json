{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[] columnData) {\n        /* write */ this.matrix = MatrixUtils.createColumnRealMatrix(columnData);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "ComplexCalculations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class ComplexCalculations {\n    private RealMatrix matrix;\n\n    public ComplexCalculations(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public RealVector performVectorOperations(double[] vectorData) {\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector resultVector = matrix.operate(vector);\n        return resultVector;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize column data\n        double[] columnData = {1.0, 2.0, 3.0};\n        \n        // Create a MatrixOperations instance\n        MatrixOperations matrixOps = new MatrixOperations(columnData);\n        \n        // Get the matrix from MatrixOperations\n        RealMatrix matrix = matrixOps.getMatrix();\n        \n        // Perform complex calculations on the matrix\n        ComplexCalculations calculations = new ComplexCalculations(matrix);\n        \n        // Initialize vector data\n        double[] vectorData = {4.0, 5.0, 6.0};\n        \n        // Perform vector operations\n        RealVector resultVector = calculations.performVectorOperations(vectorData);\n        \n        // Print the result vector\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n        \n        // Extract the column matrix using MatrixUtils\n        /* read */ RealMatrix columnMatrix = MatrixUtils.getColumnRealMatrix(matrix, 0);\n        \n        // Print the extracted column matrix\n        System.out.println(\"Extracted Column Matrix:\");\n        for (int i = 0; i < columnMatrix.getRowDimension(); i++) {\n            System.out.println(columnMatrix.getEntry(i, 0));\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0}, {2.0}, {3.0}};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createColumnRealMatrix(new double[]{1.0, 2.0, 3.0});\n        \n        /* read */ RealMatrix columnMatrix = MatrixUtils.getColumnRealMatrix(matrix, 0);\n        \n        for (int i = 0; i < columnMatrix.getRowDimension(); i++) {\n            System.out.println(columnMatrix.getEntry(i, 0));\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize some data for matrices and vectors\n        double[][] data = {{1.0}, {2.0}, {3.0}};\n        double[] vectorData = {4.0, 5.0, 6.0};\n        \n        // Create a column matrix using MatrixUtils\n        /* write */ RealMatrix matrix = MatrixUtils.createColumnRealMatrix(new double[]{1.0, 2.0, 3.0});\n        \n        // Create another matrix and perform some operations\n        RealMatrix matrix2 = MatrixUtils.createColumnRealMatrix(new double[]{4.0, 5.0, 6.0});\n        RealMatrix sumMatrix = matrix.add(matrix2);\n        \n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        \n        // Print the scaled vector\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.println(scaledVector.getEntry(i));\n        }\n        \n        // Perform matrix-vector multiplication\n        RealVector resultVector = sumMatrix.operate(vector);\n        \n        // Print the result vector\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n        \n        // Extract the column matrix using MatrixUtils\n        /* read */ RealMatrix columnMatrix = MatrixUtils.getColumnRealMatrix(matrix, 0);\n        \n        // Print the extracted column matrix\n        System.out.println(\"Extracted Column Matrix:\");\n        for (int i = 0; i < columnMatrix.getRowDimension(); i++) {\n            System.out.println(columnMatrix.getEntry(i, 0));\n        }\n    }\n}"
}