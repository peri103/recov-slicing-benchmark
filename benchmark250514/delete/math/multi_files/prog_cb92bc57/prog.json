{
    "files": {
        "VectorOperations.java": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorOperations {\n    private ArrayRealVector vector;\n\n    public void initializeVector(double[] data) {\n        /* write */ this.vector = MatrixUtils.createArrayRealVector(data);\n    }\n\n    public ArrayRealVector getVector() {\n        return this.vector;\n    }\n\n    public RealVector scaleVector(double scaleFactor) {\n        return this.vector.mapMultiply(scaleFactor);\n    }\n\n    public double calculateNorm() {\n        return this.vector.getNorm();\n    }\n}\n",
        "VectorAnalyzer.java": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorAnalyzer {\n    private ArrayRealVector vector;\n\n    public void setVector(ArrayRealVector vector) {\n        this.vector = vector;\n    }\n\n    public double calculateSum() {\n        double sum = 0;\n        for (int i = 0; i < this.vector.getDimension(); i++) {\n            sum += this.vector.getEntry(i);\n        }\n        return sum;\n    }\n\n    public double calculateDotProduct(RealVector otherVector) {\n        return this.vector.dotProduct(otherVector);\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        VectorOperations operations = new VectorOperations();\n        operations.initializeVector(data);\n        \n        VectorAnalyzer analyzer = new VectorAnalyzer();\n        \n        /* read */ ArrayRealVector readVector = operations.getVector();\n        \n        analyzer.setVector(readVector);\n        \n        double sum = analyzer.calculateSum();\n        System.out.println(\"Sum of vector elements: \" + sum);\n        \n        double norm = operations.calculateNorm();\n        System.out.println(\"Norm of the vector: \" + norm);\n        \n        RealVector scaledVector = operations.scaleVector(2.0);\n        double dotProduct = analyzer.calculateDotProduct(scaledVector);\n        System.out.println(\"Dot product of original and scaled vector: \" + dotProduct);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        /* read */ ArrayRealVector readVector = MatrixUtils.getArrayRealVector(vector);\n        \n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        // Adding complexity with additional operations\n        double[] additionalData = new double[10];\n        Random random = new Random();\n        for (int i = 0; i < additionalData.length; i++) {\n            additionalData[i] = random.nextDouble() * 10;\n        }\n        \n        ArrayRealVector additionalVector = new ArrayRealVector(additionalData);\n        RealVector combinedVector = vector.append(additionalVector);\n        \n        double sum = 0;\n        for (int i = 0; i < combinedVector.getDimension(); i++) {\n            sum += combinedVector.getEntry(i);\n        }\n        \n        System.out.println(\"Sum of combined vector elements: \" + sum);\n        \n        // Perform some operations on the original vector\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the original vector: \" + norm);\n        \n        // Now read the original vector\n        /* read */ ArrayRealVector readVector = MatrixUtils.getArrayRealVector(vector);\n        \n        System.out.println(\"Read vector: \" + readVector);\n        \n        // Further operations with the read vector\n        RealVector scaledVector = readVector.mapMultiply(2.0);\n        System.out.println(\"Scaled vector: \" + scaledVector);\n        \n        double dotProduct = readVector.dotProduct(scaledVector);\n        System.out.println(\"Dot product of read vector and scaled vector: \" + dotProduct);\n    }\n}"
}