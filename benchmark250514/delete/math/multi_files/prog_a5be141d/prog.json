{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class MatrixOperations {\n    private RealMatrix identityMatrix;\n\n    public void createIdentityMatrix(int size) {\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(size);\n    }\n\n    public RealMatrix getIdentityMatrix() {\n        return identityMatrix;\n    }\n\n    public RealVector multiplyWithVector(double[] vectorData) {\n        RealVector vector = new ArrayRealVector(vectorData);\n        return identityMatrix.operate(vector);\n    }\n\n    public RealMatrix addMatrix(RealMatrix matrixToAdd) {\n        return identityMatrix.add(matrixToAdd);\n    }\n}\n",
        "MatrixPrinter.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixPrinter {\n    public static void printMatrix(RealMatrix matrix) {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void printVector(RealVector vector) {\n        for (int i = 0; i < vector.getDimension(); i++) {\n            System.out.print(vector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        MatrixOperations matrixOps = new MatrixOperations();\n        \n        // Create and operate on identity matrix\n        matrixOps.createIdentityMatrix(3);\n        \n        // Multiply identity matrix by a vector\n        RealVector resultVector = matrixOps.multiplyWithVector(new double[] {1.0, 2.0, 3.0});\n        System.out.println(\"Result of multiplying identity matrix by vector:\");\n        MatrixPrinter.printVector(resultVector);\n\n        // Create another matrix and perform addition with the identity matrix\n        RealMatrix matrixToAdd = MatrixUtils.createRealMatrix(new double[][] {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        });\n\n        RealMatrix sumMatrix = matrixOps.addMatrix(matrixToAdd);\n        System.out.println(\"Resulting matrix after addition:\");\n        MatrixPrinter.printMatrix(sumMatrix);\n\n        // Read and print the identity matrix\n        /* read */ RealMatrix readMatrix = matrixOps.getIdentityMatrix();\n        System.out.println(\"Identity Matrix:\");\n        MatrixPrinter.printMatrix(readMatrix);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createIdentityMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getIdentityMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Read the identity matrix\n        /* read */ RealMatrix readMatrix = identityMatrix; // Since there's no getIdentityMatrix method, we use the created matrix directly\n\n        // Print the matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Additional operations\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n        \n        // Multiply the identity matrix by a vector\n        RealVector resultVector = identityMatrix.operate(vector);\n        \n        // Print the result of the multiplication\n        System.out.println(\"Result of multiplying identity matrix by vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Create another matrix and perform addition with the identity matrix\n        RealMatrix matrixToAdd = MatrixUtils.createRealMatrix(new double[][] {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        });\n        \n        RealMatrix sumMatrix = identityMatrix.add(matrixToAdd);\n        \n        // Print the resulting matrix after addition\n        System.out.println(\"Resulting matrix after addition:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the identity matrix\n        /* read */ RealMatrix readMatrix = identityMatrix; // Use the created matrix directly\n\n        // Print the matrix to verify\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}