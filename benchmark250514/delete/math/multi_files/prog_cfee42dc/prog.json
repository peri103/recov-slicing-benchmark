{
    "files": {
        "SymmetricMatrixWrapper.java": "import org.apache.commons.math3.linear.SymmetricMatrix;\n\npublic class SymmetricMatrixWrapper {\n    private SymmetricMatrix matrix;\n\n    public SymmetricMatrixWrapper(int size) {\n        matrix = new SymmetricMatrix(size);\n    }\n\n    public void setMatrixEntry(int row, int column, double value) {\n        /* write */ matrix.setEntry(row, column, value);\n    }\n\n    public double getMatrixEntry(int row, int column) {\n        return matrix.getEntry(row, column);\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String name;\n    private List<Student> students;\n\n    public Course(String name) {\n        this.name = name;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private SymmetricMatrixWrapper scoreMatrix;\n\n    public Student(String name, int matrixSize) {\n        this.name = name;\n        this.scoreMatrix = new SymmetricMatrixWrapper(matrixSize);\n    }\n\n    public void setScore(int subjectIndex1, int subjectIndex2, double score) {\n        scoreMatrix.setMatrixEntry(subjectIndex1, subjectIndex2, score);\n    }\n\n    public double getScore(int subjectIndex1, int subjectIndex2) {\n        return scoreMatrix.getMatrixEntry(subjectIndex1, subjectIndex2);\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Course course = new Course(\"Mathematics\");\n        Student student = new Student(\"Alice\", 3);\n        course.addStudent(student);\n\n        student.setScore(1, 2, 95.0);\n\n        // Perform some unrelated operations\n        double unrelatedCalculation = 1.0;\n        for (int i = 1; i <= 3; i++) {\n            unrelatedCalculation *= i;\n        }\n        System.out.println(\"Unrelated calculation result: \" + unrelatedCalculation);\n\n        double score = student.getScore(1, 2);\n        /* read */ System.out.println(\"Score for Alice in subject (1, 2): \" + score);\n\n        // More operations on the course\n        for (Student s : course.getStudents()) {\n            System.out.println(\"Student in course: \" + s.getName());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.SymmetricMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.SymmetricMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.SymmetricMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the symmetric matrix with a size of 3x3 for example\n        SymmetricMatrix matrix = new SymmetricMatrix(3);\n\n        // Write a value to the matrix at position (1, 2)\n        /* write */ matrix.setEntry(1, 2, 5.0);\n\n        // Read the value from the matrix at position (1, 2)\n        /* read */ double value = matrix.getEntry(1, 2);\n\n        // Print the value to verify it matches what was written\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.SymmetricMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the symmetric matrix with a size of 3x3 for example\n        SymmetricMatrix matrix = new SymmetricMatrix(3);\n\n        // Initialize another matrix for additional operations\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(3, 3);\n\n        // Populate the additional matrix with some values\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                additionalMatrix.setEntry(i, j, i + j);\n            }\n        }\n\n        // Perform some operations on the additional matrix\n        RealMatrix transposedMatrix = additionalMatrix.transpose();\n        double sum = 0;\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                sum += transposedMatrix.getEntry(i, j);\n            }\n        }\n        System.out.println(\"Sum of transposed matrix: \" + sum);\n\n        // Write a value to the symmetric matrix at position (1, 2)\n        /* write */ matrix.setEntry(1, 2, 5.0);\n\n        // Perform some unrelated calculations\n        double product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers from 1 to 5: \" + product);\n\n        // Read the value from the symmetric matrix at position (1, 2)\n        /* read */ double value = matrix.getEntry(1, 2);\n\n        // Print the value to verify it matches what was written\n        System.out.println(\"Matrix entry at (1, 2): \" + value);\n\n        // Perform more operations on the additional matrix\n        RealMatrix multipliedMatrix = additionalMatrix.scalarMultiply(2.0);\n        double trace = 0;\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            trace += multipliedMatrix.getEntry(i, i);\n        }\n        System.out.println(\"Trace of multiplied matrix: \" + trace);\n    }\n}"
}