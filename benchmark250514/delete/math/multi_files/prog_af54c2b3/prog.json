{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private BlockRealMatrix matrix;\n\n    public MatrixOperations(int rows, int columns) {\n        matrix = new BlockRealMatrix(rows, columns);\n    }\n\n    public void initializeMatrix() {\n        // Fill the matrix with some values\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                matrix.setEntry(i, j, i * matrix.getColumnDimension() + j);\n            }\n        }\n    }\n\n    public void setSpecificValue(int row, int column, double value) {\n        /* write */ matrix.setEntry(row, column, value);\n    }\n\n    public RealMatrix transposeMatrix() {\n        return matrix.transpose();\n    }\n\n    public RealMatrix scaleMatrix(double scalar) {\n        return matrix.scalarMultiply(scalar);\n    }\n\n    public double getMatrixEntry(int row, int column) {\n        return matrix.getEntry(row, column);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        MatrixOperations matrixOps = new MatrixOperations(3, 3);\n        \n        matrixOps.initializeMatrix();\n        \n        // Set a specific value in the matrix\n        matrixOps.setSpecificValue(0, 0, 42.0);\n        \n        // Perform some operations\n        double sum = 0;\n        RealMatrix transposedMatrix = matrixOps.transposeMatrix();\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                sum += transposedMatrix.getEntry(i, j);\n            }\n        }\n\n        double trace = 0;\n        RealMatrix scaledMatrix = matrixOps.scaleMatrix(2.0);\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            trace += scaledMatrix.getEntry(i, i);\n        }\n        \n        // Read the value from the matrix\n        /* read */ double value = matrixOps.getMatrixEntry(0, 0);\n        \n        // Output the results\n        System.out.println(\"Value at (0, 0): \" + value);\n        System.out.println(\"Sum of transposed matrix: \" + sum);\n        System.out.println(\"Trace of scaled matrix: \" + trace);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.BlockRealMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.BlockRealMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a BlockRealMatrix with 1 row and 1 column\n        BlockRealMatrix matrix = new BlockRealMatrix(1, 1);\n        \n        // Write a value to the matrix at position (0, 0)\n        /* write */ matrix.setEntry(0, 0, 42.0);\n        \n        // Read the value from the matrix at position (0, 0)\n        /* read */ double value = matrix.getEntry(0, 0);\n        \n        // Print the value\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a BlockRealMatrix with 3 rows and 3 columns\n        BlockRealMatrix matrix = new BlockRealMatrix(3, 3);\n        \n        // Fill the matrix with some values\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                matrix.setEntry(i, j, i * 3 + j);\n            }\n        }\n        \n        // Write a specific value to the matrix at position (0, 0)\n        /* write */ matrix.setEntry(0, 0, 42.0);\n        \n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        double sum = 0;\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                sum += transposedMatrix.getEntry(i, j);\n            }\n        }\n        \n        // Perform more operations, like multiplying the matrix by a scalar\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        double trace = 0;\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            trace += scaledMatrix.getEntry(i, i);\n        }\n        \n        // Read the value from the matrix at position (0, 0)\n        /* read */ double value = matrix.getEntry(0, 0);\n        \n        // Output the results\n        System.out.println(\"Value at (0, 0): \" + value);\n        System.out.println(\"Sum of transposed matrix: \" + sum);\n        System.out.println(\"Trace of scaled matrix: \" + trace);\n    }\n}"
}