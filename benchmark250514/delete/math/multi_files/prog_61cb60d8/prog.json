{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n\n    private RealMatrix matrix;\n\n    public void createDiagonalMatrix(double[] diagonalValues) {\n        /* write */ matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "MatrixReader.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixReader {\n\n    private RealMatrix matrix;\n\n    public MatrixReader(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public double[] retrieveDiagonal() {\n        // Assuming getDiagonalMatrix() returns the first row as diagonal\n        /* read */ return matrix.getRow(0);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int studentId;\n\n    public Student(String name, int studentId) {\n        this.name = name;\n        this.studentId = studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getStudentId() {\n        return studentId;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.enrolledStudents = new ArrayList<>();\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Matrix operations\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        MatrixOperations matrixOps = new MatrixOperations();\n        matrixOps.createDiagonalMatrix(diagonalValues);\n\n        MatrixReader matrixReader = new MatrixReader(matrixOps.getMatrix());\n        double[] retrievedDiagonal = matrixReader.retrieveDiagonal();\n        System.out.println(\"Retrieved Diagonal:\");\n        for (double value : retrievedDiagonal) {\n            System.out.println(value);\n        }\n\n        // Student and course operations\n        Student student1 = new Student(\"Alice\", 101);\n        Student student2 = new Student(\"Bob\", 102);\n\n        Course course = new Course(\"Mathematics\");\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        System.out.println(\"Enrolled Students in \" + course.getEnrolledStudents().size() + \" Mathematics:\");\n        for (Student student : course.getEnrolledStudents()) {\n            System.out.println(student.getName() + \" (ID: \" + student.getStudentId() + \")\");\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] diagonalValues = {1.0, 2.0, 3.0}; // Example diagonal values\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n        /* read */ double[] retrievedDiagonal = matrix.getRow(0); // Assuming getDiagonalMatrix() returns the first row as diagonal\n        for (double value : retrievedDiagonal) {\n            System.out.println(value);\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize diagonal values for the matrix\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        \n        // Create a diagonal matrix using MatrixUtils\n        /* write */ RealMatrix matrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n        \n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 0.5, 0.25});\n        RealVector resultVector = matrix.operate(vector);\n        \n        // Print the result of matrix-vector multiplication\n        System.out.println(\"Matrix-Vector Multiplication Result:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n        \n        // Perform additional matrix operations\n        RealMatrix matrix2 = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix addedMatrix = matrix.add(matrix2);\n        \n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Extract and print the diagonal values from the matrix\n        /* read */ double[] retrievedDiagonal = matrix.getRow(0); // Assuming getDiagonalMatrix() returns the first row as diagonal\n        System.out.println(\"Retrieved Diagonal:\");\n        for (double value : retrievedDiagonal) {\n            System.out.println(value);\n        }\n\n        // Perform scaling operation on the matrix\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        \n        // Print the scaled matrix\n        System.out.println(\"Scaled Matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}