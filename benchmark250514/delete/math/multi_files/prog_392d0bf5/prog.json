{
    "files": {
        "VectorUtils.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class VectorUtils {\n    private OpenMapRealVector vector;\n\n    public VectorUtils(int size) {\n        /* write */ this.vector = MatrixUtils.createOpenMapRealVector(size);\n    }\n\n    public void setEntry(int index, double value) {\n        vector.setEntry(index, value);\n    }\n\n    public OpenMapRealVector getVector() {\n        return vector;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(int rows, int cols) {\n        this.matrix = new Array2DRowRealMatrix(rows, cols);\n    }\n\n    public void setEntry(int row, int col, double value) {\n        matrix.setEntry(row, col, value);\n    }\n\n    public double[][] getTransposedData() {\n        return matrix.transpose().getData();\n    }\n\n    public void printMatrix() {\n        double[][] data = getTransposedData();\n        System.out.println(\"Matrix values:\");\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data[i].length; j++) {\n                System.out.print(data[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Work with vectors\n        VectorUtils vectorUtils = new VectorUtils(5);\n        vectorUtils.setEntry(0, 1.0);\n\n        // Work with matrices\n        MatrixOperations matrixOps = new MatrixOperations(3, 3);\n        matrixOps.setEntry(0, 0, 2.0);\n        matrixOps.setEntry(1, 1, 4.0);\n        matrixOps.setEntry(2, 2, 6.0);\n        matrixOps.printMatrix();\n\n        // Create another vector for operations\n        OpenMapRealVector anotherVector = new OpenMapRealVector(5);\n        anotherVector.setEntry(1, 3.5);\n\n        // Perform vector addition\n        OpenMapRealVector resultVector = vectorUtils.getVector().add(anotherVector);\n\n        // Print the result of vector addition\n        System.out.println(\"Result of vector addition:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the OpenMapRealVector using the MatrixUtils class\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vectorUtils.getVector());\n\n        // Print the value to verify the read operation\n        System.out.println(\"Read vector entry at index 0: \" + readVector.getEntry(0));\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createOpenMapRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getOpenMapRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using the MatrixUtils class\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(5);\n        \n        // Set a value in the vector to ensure there is something to read\n        vector.setEntry(0, 1.0);\n        \n        // Read the OpenMapRealVector using the MatrixUtils class\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vector);\n        \n        // Print the value to verify the read operation\n        System.out.println(readVector.getEntry(0));\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.OpenMapRealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an OpenMapRealVector using the MatrixUtils class\n        /* write */ OpenMapRealVector vector = MatrixUtils.createOpenMapRealVector(5);\n        \n        // Set a value in the vector to ensure there is something to read\n        vector.setEntry(0, 1.0);\n        \n        // Create a 2D matrix for additional complexity\n        RealMatrix matrix = new Array2DRowRealMatrix(3, 3);\n        matrix.setEntry(0, 0, 2.0);\n        matrix.setEntry(1, 1, 4.0);\n        matrix.setEntry(2, 2, 6.0);\n        \n        // Perform matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        double[][] data = transposedMatrix.getData();\n        \n        // Print matrix values\n        System.out.println(\"Matrix values:\");\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data[i].length; j++) {\n                System.out.print(data[i][j] + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Create another OpenMapRealVector for complexity\n        OpenMapRealVector anotherVector = new OpenMapRealVector(5);\n        anotherVector.setEntry(1, 3.5);\n        \n        // Perform vector operations\n        OpenMapRealVector resultVector = vector.add(anotherVector);\n        \n        // Print the result of vector addition\n        System.out.println(\"Result of vector addition:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Read the OpenMapRealVector using the MatrixUtils class\n        /* read */ OpenMapRealVector readVector = MatrixUtils.getOpenMapRealVector(vector);\n        \n        // Print the value to verify the read operation\n        System.out.println(\"Read vector entry at index 0: \" + readVector.getEntry(0));\n    }\n}"
}