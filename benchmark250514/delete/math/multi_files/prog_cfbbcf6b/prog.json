{
    "files": {
        "SparseVectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class SparseVectorOperations {\n    private SparseRealVector vector;\n\n    public SparseVectorOperations(double[] data) {\n        /* write */ vector = MatrixUtils.createSparseRealVector(data);\n    }\n\n    public SparseRealVector getVector() {\n        return vector;\n    }\n\n    public SparseRealVector scaleVector(double factor) {\n        return vector.mapMultiply(factor);\n    }\n}\n",
        "VectorAnalysis.java": "import org.apache.commons.math3.linear.SparseRealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class VectorAnalysis {\n    private SparseVectorOperations vectorOperations;\n\n    public VectorAnalysis(SparseVectorOperations vectorOperations) {\n        this.vectorOperations = vectorOperations;\n    }\n\n    public SparseRealVector analyzeVector() {\n        /* read */ SparseRealVector readVector = MatrixUtils.getSparseRealVector(vectorOperations.getVector());\n        return readVector;\n    }\n\n    public double computeSum() {\n        SparseRealVector vector = vectorOperations.getVector();\n        double sum = 0;\n        for (int i = 0; i < vector.getDimension(); i++) {\n            sum += vector.getEntry(i);\n        }\n        return sum;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        SparseVectorOperations operations = new SparseVectorOperations(data);\n        VectorAnalysis analysis = new VectorAnalysis(operations);\n\n        SparseRealVector analyzedVector = analysis.analyzeVector();\n        System.out.println(\"Analyzed vector: \" + analyzedVector);\n\n        double sum = analysis.computeSum();\n        System.out.println(\"Sum of vector entries: \" + sum);\n\n        SparseRealVector scaledVector = operations.scaleVector(2.0);\n        System.out.println(\"Scaled vector: \" + scaledVector);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a double array to create a sparse real vector\n        double[] data = {1.0, 2.0, 3.0};\n\n        /* write */ SparseRealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        /* read */ SparseRealVector readVector = MatrixUtils.getSparseRealVector(vector);\n\n        // Print the read vector to verify\n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.SparseRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a double array to create a sparse real vector\n        double[] data = {1.0, 2.0, 3.0};\n\n        // Create another vector for additional operations\n        double[] otherData = {4.0, 5.0, 6.0};\n        SparseRealVector otherVector = MatrixUtils.createSparseRealVector(otherData);\n\n        // Perform operations on the other vector\n        RealVector sumVector = otherVector.mapAdd(10);\n\n        // Use an ArrayList for additional complexity\n        ArrayList<Double> arrayList = new ArrayList<>();\n        for (int i = 0; i < sumVector.getDimension(); i++) {\n            arrayList.add(sumVector.getEntry(i));\n        }\n\n        /* write */ SparseRealVector vector = MatrixUtils.createSparseRealVector(data);\n\n        // Perform operations on the arrayList\n        double total = 0;\n        for (Double value : arrayList) {\n            total += value;\n        }\n        System.out.println(\"Sum of elements in the modified vector: \" + total);\n\n        // Some unrelated computations\n        int[] numbers = {5, 10, 15, 20};\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of numbers: \" + product);\n\n        /* read */ SparseRealVector readVector = MatrixUtils.getSparseRealVector(vector);\n\n        // Print the read vector to verify\n        System.out.println(readVector);\n\n        // Additional operations on the read vector\n        RealVector scaledVector = readVector.mapMultiply(2);\n        System.out.println(\"Scaled vector: \" + scaledVector);\n    }\n}"
}