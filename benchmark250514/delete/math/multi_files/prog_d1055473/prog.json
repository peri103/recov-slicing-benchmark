{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class MatrixOperations {\n    private RealMatrix identityMatrix;\n\n    public void createIdentityMatrix(int size) {\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(size);\n    }\n\n    public RealMatrix getIdentityMatrix() {\n        return identityMatrix;\n    }\n}",
        "MatrixProcessor.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class MatrixProcessor {\n    private RealMatrix matrix;\n\n    public MatrixProcessor(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public RealVector multiplyWithVector(double[] vectorData) {\n        RealVector vector = new ArrayRealVector(vectorData);\n        return matrix.operate(vector);\n    }\n\n    public void printMatrix() {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create identity matrix\n        MatrixOperations matrixOps = new MatrixOperations();\n        matrixOps.createIdentityMatrix(3);\n\n        // Use the identity matrix for operations\n        RealMatrix identityMatrix = matrixOps.getIdentityMatrix();\n        MatrixProcessor processor = new MatrixProcessor(identityMatrix);\n\n        // Multiply identity matrix with vector\n        RealVector resultVector = processor.multiplyWithVector(new double[] {1.0, 2.0, 3.0});\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Print the identity matrix\n        System.out.println(\"Identity matrix:\");\n        /* read */ processor.printMatrix();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createIdentityMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getIdentityMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an identity matrix using the MatrixUtils class\n        RealMatrix identityMatrix;\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Reading the identity matrix\n        RealMatrix readMatrix;\n        /* read */ readMatrix = identityMatrix;\n        \n        // Printing the matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an identity matrix using the MatrixUtils class\n        RealMatrix identityMatrix;\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Creating a vector and performing operations\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n        RealVector resultVector = identityMatrix.operate(vector);\n\n        // Printing the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Performing additional matrix operations\n        RealMatrix scaledMatrix = identityMatrix.scalarMultiply(2.0);\n        RealMatrix addedMatrix = identityMatrix.add(scaledMatrix);\n\n        // Printing the scaled and added matrices\n        System.out.println(\"Scaled matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        System.out.println(\"Added matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Reading the identity matrix\n        RealMatrix readMatrix;\n        /* read */ readMatrix = identityMatrix;\n        \n        // Printing the matrix to verify\n        System.out.println(\"Identity matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}