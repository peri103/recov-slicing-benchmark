{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(int rows, int columns) {\n        this.matrix = new Array2DRowRealMatrix(rows, columns);\n    }\n\n    public void setMatrixEntry(int row, int column, double value) {\n        /* write */ matrix.setEntry(row, column, value);\n    }\n\n    public double getMatrixEntry(int row, int column) {\n        return matrix.getEntry(row, column);\n    }\n\n    public RealMatrix getTransposedMatrix() {\n        return matrix.transpose();\n    }\n\n    public double calculateSum() {\n        double sum = 0.0;\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                sum += matrix.getEntry(i, j);\n            }\n        }\n        return sum;\n    }\n}\n",
        "DataStructures.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class DataStructures {\n    private MatrixOperations matrixOps;\n\n    public DataStructures(int rows, int columns) {\n        this.matrixOps = new MatrixOperations(rows, columns);\n    }\n\n    public void initializeMatrix() {\n        for (int i = 0; i < matrixOps.getMatrix().getRowDimension(); i++) {\n            for (int j = 0; j < matrixOps.getMatrix().getColumnDimension(); j++) {\n                matrixOps.setMatrixEntry(i, j, i + j + 1.0);\n            }\n        }\n    }\n\n    public void displayTransposedMatrix() {\n        RealMatrix transposedMatrix = matrixOps.getTransposedMatrix();\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public double getSumOfEntries() {\n        return matrixOps.calculateSum();\n    }\n\n    public MatrixOperations getMatrixOperations() {\n        return matrixOps;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        DataStructures dataStructures = new DataStructures(3, 3);\n        dataStructures.initializeMatrix();\n\n        // Perform unrelated operations\n        double sum = dataStructures.getSumOfEntries();\n        System.out.println(\"Sum of all matrix entries: \" + sum);\n\n        // Original write operation\n        dataStructures.getMatrixOperations().setMatrixEntry(0, 0, 2.5);\n\n        // Original read operation\n        /* read */ double value = dataStructures.getMatrixOperations().getMatrixEntry(0, 0);\n        System.out.println(\"Value at (0, 0): \" + value);\n\n        // Display the transposed matrix\n        dataStructures.displayTransposedMatrix();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.RealMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrix matrix = new Array2DRowRealMatrix(3, 3);\n        /* write */ matrix.setEntry(0, 0, 2.5);\n        /* read */ double value = matrix.getEntry(0, 0);\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrix matrix = new Array2DRowRealMatrix(3, 3);\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(3, 3);\n\n        // Initialize the matrices with some values\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                anotherMatrix.setEntry(i, j, i + j);\n            }\n        }\n\n        // Perform some operations on the matrices\n        RealMatrix resultMatrix = anotherMatrix.scalarMultiply(2.0);\n\n        // More complex operations\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                double value = resultMatrix.getEntry(i, j) + 1.5;\n                matrix.setEntry(i, j, value); // Using the same write method\n            }\n        }\n\n        // Original write operation\n        /* write */ matrix.setEntry(0, 0, 2.5);\n\n        // Perform some unrelated calculations\n        double sum = 0.0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum += matrix.getEntry(i, j);\n            }\n        }\n        System.out.println(\"Sum of all matrix entries: \" + sum);\n\n        // Some more operations\n        RealMatrix transposedMatrix = matrix.transpose();\n\n        // Original read operation\n        /* read */ double value = matrix.getEntry(0, 0);\n        System.out.println(\"Value at (0, 0): \" + value);\n\n        // Display the transposed matrix\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}