{
    "files": {
        "RealVectorOperations.java": "import org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class RealVectorOperations {\n    private RealVector vector;\n\n    public void createVector(double[] data) {\n        /* write */ vector = MatrixUtils.createRealVector(data);\n    }\n\n    public RealVector getVector() {\n        return vector;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[][] data) {\n        matrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public RealMatrix transposeMatrix() {\n        return matrix.transpose();\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Vector operations\n        double[] data = {1.0, 2.0, 3.0};\n        RealVectorOperations vectorOps = new RealVectorOperations();\n        vectorOps.createVector(data);\n\n        // Matrix operations\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        MatrixOperations matrixOps = new MatrixOperations(matrixData);\n        RealMatrix transposedMatrix = matrixOps.transposeMatrix();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Reading the vector created earlier\n        /* read */ RealVector readVector = vectorOps.getVector();\n        System.out.println(\"Read Vector:\");\n        System.out.println(readVector);\n\n        // Further operations on the read vector\n        double[] data2 = {4.0, 5.0, 6.0};\n        RealVector vector2 = MatrixUtils.createRealVector(data2);\n        double dotProduct = readVector.dotProduct(vector2);\n        System.out.println(\"Dot Product:\");\n        System.out.println(dotProduct);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n        /* read */ RealVector readVector = vector; // MatrixUtils does not have getRealVector, assuming direct access\n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing data for vector creation\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Creating another vector for demonstration\n        double[] data2 = {4.0, 5.0, 6.0};\n        RealVector vector2 = MatrixUtils.createRealVector(data2);\n        \n        // Creating a matrix for additional complexity\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Performing operations on matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Using the original write method\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n        \n        // Performing calculations with vectors\n        RealVector sumVector = vector.add(vector2);\n        System.out.println(\"Sum of vectors:\");\n        System.out.println(sumVector);\n        \n        // Some unrelated calculations\n        double scalar = 2.0;\n        RealVector scaledVector = vector2.mapMultiply(scalar);\n        System.out.println(\"Scaled Vector:\");\n        System.out.println(scaledVector);\n        \n        // Reading the vector created earlier\n        /* read */ RealVector readVector = vector; // MatrixUtils does not have getRealVector, assuming direct access\n        System.out.println(\"Read Vector:\");\n        System.out.println(readVector);\n        \n        // Further operations on the read vector\n        double dotProduct = readVector.dotProduct(vector2);\n        System.out.println(\"Dot Product:\");\n        System.out.println(dotProduct);\n    }\n}"
}