{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public void createSymmetricMatrix(double[][] data) {\n        /* write */ matrix = MatrixUtils.createSymmetricMatrix(data);\n    }\n\n    public RealMatrix getSymmetricMatrix() {\n        return matrix;\n    }\n\n    public RealMatrix addMatrices(RealMatrix otherMatrix) {\n        return matrix.add(otherMatrix);\n    }\n\n    public RealMatrix multiplyMatrices(RealMatrix otherMatrix) {\n        return matrix.multiply(otherMatrix);\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Double> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public List<Double> getGrades() {\n        return grades;\n    }\n\n    public double calculateAverage() {\n        double sum = 0;\n        for (double grade : grades) {\n            sum += grade;\n        }\n        return grades.isEmpty() ? 0 : sum / grades.size();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix operations\n        MatrixOperations matrixOps = new MatrixOperations();\n        \n        // Data for symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        // Create symmetric matrix\n        matrixOps.createSymmetricMatrix(data);\n        \n        // Create another matrix for operations\n        double[][] additionalData = {\n            {4, 5, 6},\n            {5, 8, 9},\n            {6, 9, 12}\n        };\n        RealMatrix additionalMatrix = MatrixUtils.createSymmetricMatrix(additionalData);\n        \n        // Perform matrix addition\n        RealMatrix sumMatrix = matrixOps.addMatrices(additionalMatrix);\n        System.out.println(\"Sum matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = matrixOps.multiplyMatrices(additionalMatrix);\n        System.out.println(\"Multiplied matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the symmetric matrix\n        /* read */ RealMatrix readMatrix = matrixOps.getSymmetricMatrix();\n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Create a student and add grades\n        Student student = new Student(\"Alice\");\n        student.addGrade(90.0);\n        student.addGrade(85.5);\n        student.addGrade(78.0);\n        \n        // Calculate and print the student's average grade\n        double average = student.calculateAverage();\n        System.out.println(\"Average grade for \" + student.name + \": \" + average);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the read matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 5, 6},\n            {3, 6, 9}\n        };\n        \n        // Create a symmetric matrix using MatrixUtils\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Create a vector\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n        \n        // Perform some matrix-vector multiplication\n        RealVector resultVector = symmetricMatrix.operate(vector);\n        \n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Create another matrix for additional operations\n        double[][] additionalData = {\n            {4, 5, 6},\n            {5, 8, 9},\n            {6, 9, 12}\n        };\n        RealMatrix additionalMatrix = MatrixUtils.createSymmetricMatrix(additionalData);\n        \n        // Add the two matrices\n        RealMatrix sumMatrix = symmetricMatrix.add(additionalMatrix);\n\n        // Print the sum matrix\n        System.out.println(\"Sum matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the read matrix\n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Perform some additional calculations\n        RealMatrix multipliedMatrix = readMatrix.multiply(additionalMatrix);\n        \n        // Print the multiplied matrix\n        System.out.println(\"Multiplied matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}