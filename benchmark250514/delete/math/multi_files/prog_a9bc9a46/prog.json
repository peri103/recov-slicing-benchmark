{
    "files": {
        "VectorManager.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorManager {\n    private RealMatrix matrix;\n\n    public VectorManager(double[][] data) {\n        this.matrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public void updateRowVector(int rowIndex, double[] newRowData) {\n        /* write */ RealVector rowVector = MatrixUtils.createRowRealVector(newRowData);\n        this.matrix.setRowVector(rowIndex, rowVector);\n    }\n\n    public RealMatrix getMatrix() {\n        return this.matrix;\n    }\n}\n",
        "VectorAnalyzer.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorAnalyzer {\n    public RealVector analyzeRowVector(RealMatrix matrix, int rowIndex) {\n        /* read */ return matrix.getRowVector(rowIndex);\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] initialData = {{1.0, 2.0, 3.0}};\n        \n        VectorManager vectorManager = new VectorManager(initialData);\n        vectorManager.updateRowVector(0, new double[]{4.0, 5.0, 6.0});\n        \n        VectorAnalyzer vectorAnalyzer = new VectorAnalyzer();\n        RealVector analyzedVector = vectorAnalyzer.analyzeRowVector(vectorManager.getMatrix(), 0);\n        \n        System.out.println(\"Analyzed Vector: \" + analyzedVector);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a matrix with one row\n        double[][] data = {{1.0, 2.0, 3.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        // Write: create a row real vector\n        /* write */ RealVector rowVector = MatrixUtils.createRowRealVector(new double[]{4.0, 5.0, 6.0});\n        \n        // Set the row vector into the matrix at row index 0\n        matrix.setRowVector(0, rowVector);\n        \n        // Read: get the row real vector from the matrix at row index 0\n        /* read */ RealVector readRowVector = matrix.getRowVector(0);\n        \n        // Print the read vector\n        System.out.println(readRowVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a matrix with one row\n        double[][] data = {{1.0, 2.0, 3.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create another matrix for demonstration\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(new double[][]{\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        });\n\n        // Perform some operations on the second matrix\n        RealMatrix transposedMatrix = anotherMatrix.transpose();\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(transposedMatrix);\n\n        // Write: create a row real vector\n        /* write */ RealVector rowVector = MatrixUtils.createRowRealVector(new double[]{4.0, 5.0, 6.0});\n\n        // Set the row vector into the matrix at row index 0\n        matrix.setRowVector(0, rowVector);\n\n        // Perform operations using the multiplied matrix\n        RealVector vectorFromMultipliedMatrix = multipliedMatrix.getRowVector(0);\n        System.out.println(\"Vector from multiplied matrix: \" + vectorFromMultipliedMatrix);\n\n        // Read: get the row real vector from the matrix at row index 0\n        /* read */ RealVector readRowVector = matrix.getRowVector(0);\n\n        // Print the read vector\n        System.out.println(\"Read vector from original matrix: \" + readRowVector);\n\n        // Additional operations on the original matrix\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        RealVector scaledRowVector = scaledMatrix.getRowVector(0);\n        System.out.println(\"Scaled row vector: \" + scaledRowVector);\n    }\n}"
}