{
    "files": {
        "TriangularMatrixHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class TriangularMatrixHandler {\n    private RealMatrix triangularMatrix;\n\n    public void createTriangularMatrix(double[][] data) {\n        /* write */ triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n    }\n\n    public RealMatrix getTriangularMatrix() {\n        return triangularMatrix;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class MatrixOperations {\n    public RealVector operateMatrixVector(RealMatrix matrix, double[] vectorData) {\n        RealVector vector = new ArrayRealVector(vectorData);\n        return matrix.operate(vector);\n    }\n\n    public RealMatrix multiplyMatrices(RealMatrix matrix1, RealMatrix matrix2) {\n        return matrix1.multiply(matrix2);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {2.0, 3.0, 0.0},\n            {4.0, 5.0, 6.0}\n        };\n\n        TriangularMatrixHandler matrixHandler = new TriangularMatrixHandler();\n        matrixHandler.createTriangularMatrix(data);\n\n        // Perform some unrelated matrix operations\n        double[][] matrixData = {\n            {2.0, 3.0, 1.0},\n            {5.0, 6.0, 2.0},\n            {8.0, 9.0, 3.0}\n        };\n        MatrixOperations matrixOps = new MatrixOperations();\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n        RealVector resultVector = matrixOps.operateMatrixVector(matrix, new double[] {1.0, 2.0, 3.0});\n\n        // Print the result of matrix operation\n        System.out.println(\"Result of matrix-vector operation:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Retrieve the triangular matrix\n        /* read */ RealMatrix retrievedMatrix = matrixHandler.getTriangularMatrix();\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved triangular matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional unrelated code to make the program more complex\n        double[][] anotherMatrixData = {\n            {7.0, 8.0, 9.0},\n            {4.0, 5.0, 6.0},\n            {1.0, 2.0, 3.0}\n        };\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(anotherMatrixData);\n        RealMatrix multipliedMatrix = matrixOps.multiplyMatrices(matrix, anotherMatrix);\n\n        // Print the result of matrix multiplication\n        System.out.println(\"Result of matrix multiplication:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createTriangularMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getTriangularMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {2.0, 3.0, 0.0},\n            {4.0, 5.0, 6.0}\n        };\n\n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Retrieve the triangular matrix using MatrixUtils\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the retrieved matrix\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 0.0, 0.0},\n            {2.0, 3.0, 0.0},\n            {4.0, 5.0, 6.0}\n        };\n\n        // Create a triangular matrix using MatrixUtils\n        /* write */ RealMatrix triangularMatrix = MatrixUtils.createTriangularMatrix(data);\n\n        // Perform some unrelated matrix operations\n        double[][] matrixData = {\n            {2.0, 3.0, 1.0},\n            {5.0, 6.0, 2.0},\n            {8.0, 9.0, 3.0}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n        RealVector vector = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n        RealVector resultVector = matrix.operate(vector);\n\n        // Print the result of matrix operation\n        System.out.println(\"Result of matrix-vector operation:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Retrieve the triangular matrix using MatrixUtils\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getTriangularMatrix(triangularMatrix);\n\n        // Print the retrieved matrix\n        System.out.println(\"Retrieved triangular matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Additional unrelated code to make the program more complex\n        double[][] anotherMatrixData = {\n            {7.0, 8.0, 9.0},\n            {4.0, 5.0, 6.0},\n            {1.0, 2.0, 3.0}\n        };\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(anotherMatrixData);\n        RealMatrix multipliedMatrix = matrix.multiply(anotherMatrix);\n\n        // Print the result of matrix multiplication\n        System.out.println(\"Result of matrix multiplication:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}