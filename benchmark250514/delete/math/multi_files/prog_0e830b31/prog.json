{
    "files": {
        "SparseMatrixHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class SparseMatrixHandler {\n    private RealMatrix sparseMatrix;\n\n    public void createSparseMatrix(double[][] data, int rows, int columns) {\n        /* write */ sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n    }\n\n    public RealMatrix getSparseMatrix() {\n        return sparseMatrix;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\n\npublic class MatrixOperations {\n    private OpenMapRealMatrix complexMatrix;\n\n    public MatrixOperations(int rows, int columns) {\n        complexMatrix = new OpenMapRealMatrix(rows, columns);\n    }\n\n    public void modifyComplexMatrix() {\n        complexMatrix.setEntry(0, 1, 5.0);\n        complexMatrix.setEntry(1, 2, 3.0);\n    }\n\n    public void printMultipliedMatrix() {\n        RealMatrix multipliedMatrix = complexMatrix.scalarMultiply(2.0);\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public void printTransposedMatrix(RealMatrix matrix) {\n        RealMatrix transposedMatrix = matrix.transpose();\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {0.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 0.0}\n        };\n        int rows = 3;\n        int columns = 3;\n\n        // Use SparseMatrixHandler to create and get sparse matrix\n        SparseMatrixHandler sparseMatrixHandler = new SparseMatrixHandler();\n        sparseMatrixHandler.createSparseMatrix(data, rows, columns);\n\n        // Use MatrixOperations for additional operations\n        MatrixOperations matrixOperations = new MatrixOperations(rows, columns);\n        matrixOperations.modifyComplexMatrix();\n        matrixOperations.printMultipliedMatrix();\n\n        // Get the sparse matrix\n        /* read */ RealMatrix readMatrix = sparseMatrixHandler.getSparseMatrix();\n\n        // Perform and print transposed matrix\n        matrixOperations.printTransposedMatrix(readMatrix);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 0.0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Read the sparse matrix using MatrixUtils (assuming getSparseMatrix is a valid method)\n        // In reality, MatrixUtils does not have a getSparseMatrix method, but for the sake of this task, we assume it exists\n        /* read */ RealMatrix readMatrix = sparseMatrix; // Placeholder for getSparseMatrix method\n\n        // Print the matrix to verify the operation\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 0.0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Create another sparse matrix using OpenMapRealMatrix for complexity\n        OpenMapRealMatrix complexMatrix = new OpenMapRealMatrix(rows, columns);\n        complexMatrix.setEntry(0, 1, 5.0);\n        complexMatrix.setEntry(1, 2, 3.0);\n\n        // Perform some operations on complexMatrix\n        RealMatrix multipliedMatrix = complexMatrix.scalarMultiply(2.0);\n\n        // Iterate over multipliedMatrix and print values\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the sparse matrix using MatrixUtils (assuming getSparseMatrix is a valid method)\n        // In reality, MatrixUtils does not have a getSparseMatrix method, but for the sake of this task, we assume it exists\n        /* read */ RealMatrix readMatrix = sparseMatrix; // Placeholder for getSparseMatrix method\n\n        // Perform some operations on readMatrix\n        RealMatrix transposedMatrix = readMatrix.transpose();\n\n        // Print the transposed matrix to verify the operation\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}