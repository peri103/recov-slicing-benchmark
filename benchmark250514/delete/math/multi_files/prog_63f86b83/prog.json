{
    "files": {
        "SparseVectorManager.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class SparseVectorManager {\n    private SparseRealVector vector;\n\n    public void createSparseVector(double[] data) {\n        /* write */ vector = (SparseRealVector) MatrixUtils.createSparseRealVector(data);\n    }\n\n    public RealVector getSparseVector() {\n        return vector;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    public void printTransposedMatrix(double[][] matrixData) {\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public void printSumMatrix(double[][] matrixData1, double[][] matrixData2) {\n        RealMatrix matrix1 = new Array2DRowRealMatrix(matrixData1);\n        RealMatrix matrix2 = new Array2DRowRealMatrix(matrixData2);\n        RealMatrix sumMatrix = matrix1.add(matrix2);\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Matrix operations\n        MatrixOperations matrixOps = new MatrixOperations();\n        double[][] matrixData1 = {{1.0, 2.0}, {3.0, 4.0}};\n        double[][] matrixData2 = {{5.0, 6.0}, {7.0, 8.0}};\n        matrixOps.printTransposedMatrix(matrixData1);\n        matrixOps.printSumMatrix(matrixData1, matrixData2);\n\n        // Sparse vector operations\n        SparseVectorManager vectorManager = new SparseVectorManager();\n        vectorManager.createSparseVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Reading the sparse vector\n        RealVector readVector = /* read */ vectorManager.getSparseVector();\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse real vector using the write method\n        SparseRealVector vector = (SparseRealVector) /* write */ MatrixUtils.createSparseRealVector(new double[]{1.0, 2.0, 3.0});\n\n        // Read the sparse real vector using the read method\n        RealVector readVector = /* read */ MatrixUtils.getSparseRealVector(vector);\n\n        // Print the vector to ensure the read method retrieves the written data\n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.SparseRealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Unrelated code to make the program more complex\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Create a sparse real vector using the write method\n        SparseRealVector vector = (SparseRealVector) /* write */ MatrixUtils.createSparseRealVector(new double[]{1.0, 2.0, 3.0});\n        \n        // Additional unrelated operations\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the vector: \" + norm);\n\n        // More unrelated operations with a new matrix\n        double[][] matrixData2 = {{5.0, 6.0}, {7.0, 8.0}};\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(matrixData2);\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the sparse real vector using the read method\n        RealVector readVector = /* read */ MatrixUtils.getSparseRealVector(vector);\n\n        // Print the vector to ensure the read method retrieves the written data\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}"
}