{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.SparseRealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\n\npublic class MatrixOperations {\n    private SparseRealMatrix matrix;\n\n    public MatrixOperations(int rows, int columns) {\n        this.matrix = new OpenMapRealMatrix(rows, columns);\n    }\n\n    public void setMatrixEntry(int row, int column, double value) {\n        /* write */ matrix.setEntry(row, column, value);\n    }\n\n    public SparseRealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Double> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public ArrayList<Double> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a student and add some grades\n        Student student = new Student(\"John Doe\");\n        student.addGrade(88.5);\n        student.addGrade(92.0);\n        student.addGrade(79.5);\n\n        // Print student information\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Grades: \" + student.getGrades());\n\n        // Create a matrix operation instance\n        MatrixOperations matrixOps = new MatrixOperations(3, 3);\n        matrixOps.setMatrixEntry(1, 1, 5.5);\n\n        // Perform some unrelated calculations\n        double sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += Math.pow(i, 2);\n        }\n        System.out.println(\"Sum of squares from 0 to 9: \" + sum);\n\n        // More matrix operations\n        SparseRealMatrix matrix = matrixOps.getMatrix();\n        matrix.setEntry(0, 0, 1.0);\n        matrix.setEntry(2, 2, 9.0);\n\n        // Print the sparse matrix\n        System.out.println(\"Sparse Matrix:\");\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */ double value = matrix.getEntry(1, 1);\n        System.out.println(\"Value at (1,1): \" + value);\n\n        // Additional logic to make the program more complex\n        double[][] data = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        RealMatrix realMatrix = MatrixUtils.createRealMatrix(data);\n        RealMatrix resultMatrix = realMatrix.multiply(MatrixUtils.createRealIdentityMatrix(3));\n\n        // Print the result matrix\n        System.out.println(\"Result Matrix:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.SparseRealMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.SparseRealMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.SparseRealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        SparseRealMatrix matrix = new OpenMapRealMatrix(3, 3);\n        /* write */ matrix.setEntry(1, 1, 5.5);\n        /* read */ double value = matrix.getEntry(1, 1);\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.SparseRealMatrix;\nimport org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        SparseRealMatrix matrix = new OpenMapRealMatrix(3, 3);\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n\n        // Perform some operations on the identity matrix\n        identityMatrix.setEntry(0, 1, 2.0);\n        identityMatrix.setEntry(1, 2, 3.0);\n\n        // Print the identity matrix\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < identityMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < identityMatrix.getColumnDimension(); j++) {\n                System.out.print(identityMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* write */ matrix.setEntry(1, 1, 5.5);\n        \n        // Perform some unrelated calculations\n        double sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += Math.pow(i, 2);\n        }\n        System.out.println(\"Sum of squares from 0 to 9: \" + sum);\n\n        // More matrix operations\n        matrix.setEntry(0, 0, 1.0);\n        matrix.setEntry(2, 2, 9.0);\n        \n        // Print the sparse matrix\n        System.out.println(\"Sparse Matrix:\");\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */ double value = matrix.getEntry(1, 1);\n        System.out.println(\"Value at (1,1): \" + value);\n\n        // Additional logic to make the program more complex\n        double[][] data = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        RealMatrix realMatrix = MatrixUtils.createRealMatrix(data);\n        RealMatrix resultMatrix = realMatrix.multiply(identityMatrix);\n\n        // Print the result matrix\n        System.out.println(\"Result Matrix:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}