{
    "files": {
        "RealVectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class RealVectorOperations {\n    private RealMatrix matrix;\n\n    public RealVectorOperations(double[][] data) {\n        this.matrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public void setRowVector(int row, double[] rowData) {\n        /* write */ RealVector rowVector = MatrixUtils.createRowRealVector(rowData);\n        matrix.setRowVector(row, rowVector);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "MatrixAnalyzer.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixAnalyzer {\n    private RealMatrix matrix;\n\n    public MatrixAnalyzer(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public RealVector getRowVector(int row) {\n        /* read */ return matrix.getRowVector(row);\n    }\n\n    public void printMatrix() {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private RealVectorOperations vectorOperations;\n\n    public Student(String name, double[][] data) {\n        this.name = name;\n        this.vectorOperations = new RealVectorOperations(data);\n    }\n\n    public void setScores(double[] scores) {\n        vectorOperations.setRowVector(0, scores);\n    }\n\n    public RealMatrix getMatrix() {\n        return vectorOperations.getMatrix();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {0, 0, 0},\n            {0, 0, 0},\n            {0, 0, 0}\n        };\n\n        Student student = new Student(\"Bob\", data);\n        double[] scores = {1, 2, 3};\n        student.setScores(scores);\n\n        RealMatrix matrix = student.getMatrix();\n        MatrixAnalyzer analyzer = new MatrixAnalyzer(matrix);\n\n        RealVector readRowVector = analyzer.getRowVector(0);\n        System.out.println(\"Read Row Vector: \" + readRowVector);\n\n        analyzer.printMatrix();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create the matrix\n        double[][] data = {\n            {0, 0, 0},\n            {0, 0, 0},\n            {0, 0, 0}\n        };\n\n        // Create a RealMatrix from the 2D array\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create a row vector\n        double[] rowData = {1, 2, 3};\n        /* write */ RealVector rowVector = MatrixUtils.createRowRealVector(rowData);\n\n        // Set the row vector to the first row of the matrix\n        matrix.setRowVector(0, rowVector);\n\n        // Read the first row vector from the matrix\n        /* read */ RealVector readRowVector = matrix.getRowVector(0);\n        \n        // Print the read row vector\n        System.out.println(readRowVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create the matrix\n        double[][] data = {\n            {0, 0, 0},\n            {0, 0, 0},\n            {0, 0, 0}\n        };\n\n        // Create a RealMatrix from the 2D array\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create a row vector\n        double[] rowData = {1, 2, 3};\n        /* write */ RealVector rowVector = MatrixUtils.createRowRealVector(rowData);\n\n        // Set the row vector to the first row of the matrix\n        matrix.setRowVector(0, rowVector);\n\n        // Additional operations using RealMatrix\n        double[][] additionalData = {\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        \n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalData);\n        RealMatrix resultMatrix = matrix.add(additionalMatrix);\n        \n        // Perform operations on matrices\n        RealMatrix multipliedMatrix = resultMatrix.scalarMultiply(2.0);\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the first row vector from the matrix\n        /* read */ RealVector readRowVector = matrix.getRowVector(0);\n\n        // Print the read row vector\n        System.out.println(\"Read Row Vector: \" + readRowVector);\n\n        // More complex operations\n        RealVector columnVector = matrix.getColumnVector(1);\n        System.out.println(\"Column Vector: \" + columnVector);\n        \n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}