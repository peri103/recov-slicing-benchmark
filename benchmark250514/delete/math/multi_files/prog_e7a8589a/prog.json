{
    "files": {
        "SymmetricMatrixUtils.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class SymmetricMatrixUtils {\n    private RealMatrix symmetricMatrix;\n\n    public void createSymmetricMatrix(double[][] data) {\n        /* write */ symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n    }\n\n    public RealMatrix getSymmetricMatrix() {\n        return symmetricMatrix;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class MatrixOperations {\n    public RealMatrix addMatrices(RealMatrix matrix1, RealMatrix matrix2) {\n        return matrix1.add(matrix2);\n    }\n\n    public RealVector multiplyMatrixVector(RealMatrix matrix, RealVector vector) {\n        return matrix.operate(vector);\n    }\n\n    public RealMatrix multiplyMatrices(RealMatrix matrix1, RealMatrix matrix2) {\n        return matrix1.multiply(matrix2);\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        SymmetricMatrixUtils matrixUtils = new SymmetricMatrixUtils();\n        MatrixOperations matrixOps = new MatrixOperations();\n\n        // Create a symmetric matrix\n        double[][] data = { {1, 2}, {2, 3} };\n        matrixUtils.createSymmetricMatrix(data);\n\n        // Create another matrix for operations\n        double[][] data2 = { {4, 5}, {6, 7} };\n        RealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = matrixOps.addMatrices(matrixUtils.getSymmetricMatrix(), matrix2);\n\n        // Create a vector and perform matrix-vector multiplication\n        double[] vectorData = {1, 1};\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector resultVector = matrixOps.multiplyMatrixVector(resultMatrix, vector);\n\n        // Print the result vector\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix symmetricMatrix = matrixUtils.getSymmetricMatrix();\n\n        // Perform matrix multiplication with the symmetric matrix\n        RealMatrix finalResultMatrix = matrixOps.multiplyMatrices(symmetricMatrix, matrix2);\n\n        // Print the final result matrix\n        System.out.println(\"Final Result Matrix:\");\n        for (int i = 0; i < finalResultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < finalResultMatrix.getColumnDimension(); j++) {\n                System.out.print(finalResultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a symmetric matrix using MatrixUtils\n        double[][] data = { {1, 2}, {2, 3} };\n        /* write */ RealMatrix matrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix symmetricMatrix = MatrixUtils.getSymmetricMatrix(matrix);\n\n        // Print the symmetric matrix\n        for (int i = 0; i < symmetricMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < symmetricMatrix.getColumnDimension(); j++) {\n                System.out.print(symmetricMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a symmetric matrix using MatrixUtils\n        double[][] data = { {1, 2}, {2, 3} };\n        /* write */ RealMatrix matrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Create another matrix for operations\n        double[][] data2 = { {4, 5}, {6, 7} };\n        RealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = matrix.add(matrix2);\n\n        // Create a vector and perform matrix-vector multiplication\n        double[] vectorData = {1, 1};\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector resultVector = resultMatrix.operate(vector);\n\n        // Print the result vector\n        System.out.println(\"Result Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the symmetric matrix using MatrixUtils\n        /* read */ RealMatrix symmetricMatrix = MatrixUtils.getSymmetricMatrix(matrix);\n\n        // Perform matrix multiplication with the symmetric matrix\n        RealMatrix finalResultMatrix = symmetricMatrix.multiply(matrix2);\n\n        // Print the final result matrix\n        System.out.println(\"Final Result Matrix:\");\n        for (int i = 0; i < finalResultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < finalResultMatrix.getColumnDimension(); j++) {\n                System.out.print(finalResultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}