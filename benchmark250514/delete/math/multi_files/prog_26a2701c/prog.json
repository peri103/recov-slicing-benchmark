{
    "files": {
        "MatrixHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixHandler {\n    private RealMatrix sparseMatrix;\n\n    public void createSparseMatrix(int rows, int columns, double[][] data) {\n        /* write */ sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns, data);\n    }\n\n    public RealMatrix getSparseMatrix() {\n        return sparseMatrix;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Double> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public List<Double> getGrades() {\n        return grades;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize matrix data\n        int rows = 2;\n        int columns = 2;\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 1.0}\n        };\n\n        // Handle matrix operations\n        MatrixHandler matrixHandler = new MatrixHandler();\n        matrixHandler.createSparseMatrix(rows, columns, data);\n\n        // Create a course and add students\n        Course mathCourse = new Course(\"Mathematics\");\n        Student alice = new Student(\"Alice\");\n        Student bob = new Student(\"Bob\");\n\n        alice.addGrade(95.0);\n        bob.addGrade(88.0);\n\n        mathCourse.addStudent(alice);\n        mathCourse.addStudent(bob);\n\n        // Output student grades\n        for (Student student : mathCourse.getStudents()) {\n            System.out.println(\"Grades for \" + student.getGrades());\n        }\n\n        // Retrieve the sparse matrix\n        /* read */ RealMatrix retrievedMatrix = matrixHandler.getSparseMatrix();\n\n        // Print the retrieved sparse matrix to verify\n        System.out.println(\"Retrieved sparse matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize matrix dimensions and data\n        int rows = 2;\n        int columns = 2;\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 1.0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns, data);\n\n        // Retrieve the matrix using MatrixUtils (in this hypothetical scenario)\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix; // Assuming getSparseMatrix() would return this\n\n        // Print the matrix to verify\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize matrix dimensions and data\n        int rows = 2;\n        int columns = 2;\n        double[][] data = {\n            {1.0, 0.0},\n            {0.0, 1.0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(rows, columns, data);\n\n        // Create another matrix and vector\n        double[][] anotherData = {\n            {2.0, 3.0},\n            {4.0, 5.0}\n        };\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(anotherData);\n\n        double[] vectorData = {6.0, 7.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = anotherMatrix.operate(vector);\n\n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(sparseMatrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Result of matrix multiplication:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Retrieve the matrix using MatrixUtils (in this hypothetical scenario)\n        /* read */ RealMatrix retrievedMatrix = sparseMatrix; // Assuming getSparseMatrix() would return this\n\n        // Print the matrix to verify\n        System.out.println(\"Retrieved sparse matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}