{
    "files": {
        "VectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorOperations {\n    private RealVector vector;\n\n    public void createVector(double[] data) {\n        /* write */ vector = MatrixUtils.createArrayRealVector(data);\n    }\n\n    public RealVector getVector() {\n        return vector;\n    }\n\n    public RealVector scaleVector(double scalar) {\n        if (vector != null) {\n            return vector.mapMultiply(scalar);\n        }\n        return null;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[][] data) {\n        matrix = new Array2DRowRealMatrix(data);\n    }\n\n    public RealVector operate(RealVector vector) {\n        return matrix.operate(vector);\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        double[][] matrixData = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        VectorOperations vectorOps = new VectorOperations();\n        vectorOps.createVector(data);\n\n        MatrixOperations matrixOps = new MatrixOperations(matrixData);\n        RealVector resultVector = matrixOps.operate(vectorOps.getVector());\n\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(\"Result Vector Element \" + i + \": \" + resultVector.getEntry(i));\n        }\n\n        RealVector scaledVector = vectorOps.scaleVector(2.0);\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.println(\"Scaled Vector Element \" + i + \": \" + scaledVector.getEntry(i));\n        }\n\n        /* read */ RealVector readVector = vectorOps.getVector();\n\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ RealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        /* read */ RealVector readVector = MatrixUtils.getArrayRealVector(vector);\n        \n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        double[][] matrixData = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        /* write */ RealVector vector = MatrixUtils.createArrayRealVector(data);\n\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealVector resultVector = matrix.operate(vector);\n\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(\"Result Vector Element \" + i + \": \" + resultVector.getEntry(i));\n        }\n\n        double sum = 0;\n        for (int i = 0; i < data.length; i++) {\n            sum += data[i];\n        }\n        System.out.println(\"Sum of original vector elements: \" + sum);\n\n        // Performing some additional operations on the original vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.println(\"Scaled Vector Element \" + i + \": \" + scaledVector.getEntry(i));\n        }\n\n        /* read */ RealVector readVector = MatrixUtils.getArrayRealVector(vector);\n\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}"
}