{
    "files": {
        "MatrixHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixHandler {\n    private RealMatrix sparseMatrix;\n\n    public void createSparseMatrix(double[][] data, int rows, int columns) {\n        /* write */ sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n    }\n\n    public RealMatrix getSparseMatrix() {\n        return sparseMatrix;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a MatrixHandler instance\n        MatrixHandler matrixHandler = new MatrixHandler();\n\n        // Define dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0, 0, 1},\n            {0, 2, 0},\n            {3, 0, 0}\n        };\n\n        // Create the sparse matrix\n        matrixHandler.createSparseMatrix(data, rows, columns);\n\n        // Create a Course and Students\n        Course course = new Course(\"Mathematics\");\n        Student student1 = new Student(\"Alice\", 1);\n        Student student2 = new Student(\"Bob\", 2);\n\n        // Add students to the course\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        // Print course and student information\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", ID: \" + student.getId());\n        }\n\n        // Read the sparse matrix\n        /* read */ RealMatrix readMatrix = matrixHandler.getSparseMatrix();\n\n        // Print the read matrix to verify\n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0, 0, 1},\n            {0, 2, 0},\n            {3, 0, 0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Read the sparse matrix\n        /* read */ RealMatrix readMatrix = sparseMatrix;  // In this context, we directly use the created matrix\n\n        // Print the read matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define dimensions and data for the sparse matrix\n        int rows = 3;\n        int columns = 3;\n        double[][] data = {\n            {0, 0, 1},\n            {0, 2, 0},\n            {3, 0, 0}\n        };\n\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createSparseMatrix(data, rows, columns);\n\n        // Create a real vector for additional operations\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n\n        // Perform some matrix-vector multiplication\n        RealVector resultVector = sparseMatrix.operate(vector);\n\n        // Print the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Calculate the transpose of the matrix\n        RealMatrix transposeMatrix = sparseMatrix.transpose();\n\n        // Perform operations on the transpose\n        RealVector resultVectorTranspose = transposeMatrix.operate(vector);\n\n        // Print the result of operations on the transpose\n        System.out.println(\"Result of transpose matrix-vector multiplication:\");\n        for (int i = 0; i < resultVectorTranspose.getDimension(); i++) {\n            System.out.print(resultVectorTranspose.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the sparse matrix\n        /* read */ RealMatrix readMatrix = sparseMatrix;  // In this context, we directly use the created matrix\n\n        // Print the read matrix to verify\n        System.out.println(\"Read matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform some additional calculations with the read matrix\n        RealMatrix matrixProduct = readMatrix.multiply(transposeMatrix);\n\n        // Print the matrix product\n        System.out.println(\"Matrix product:\");\n        for (int i = 0; i < matrixProduct.getRowDimension(); i++) {\n            for (int j = 0; j < matrixProduct.getColumnDimension(); j++) {\n                System.out.print(matrixProduct.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}