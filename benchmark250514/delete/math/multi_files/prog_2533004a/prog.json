{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class MatrixOperations {\n    private BlockRealMatrix matrix;\n\n    public void createMatrix(double[][] data) {\n        /* write */ matrix = MatrixUtils.createBlockRealMatrix(data);\n    }\n\n    public BlockRealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Double> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public double getAverageGrade() {\n        double sum = 0;\n        for (double grade : grades) {\n            sum += grade;\n        }\n        return grades.isEmpty() ? 0 : sum / grades.size();\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public double getCourseAverage() {\n        double total = 0;\n        for (Student student : students) {\n            total += student.getAverageGrade();\n        }\n        return students.isEmpty() ? 0 : total / students.size();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Matrix operations\n        MatrixOperations matrixOps = new MatrixOperations();\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        matrixOps.createMatrix(data);\n\n        // Course and student operations\n        Course course = new Course(\"Mathematics\");\n        Student alice = new Student(\"Alice\");\n        alice.addGrade(85.0);\n        alice.addGrade(90.0);\n        course.addStudent(alice);\n\n        Student bob = new Student(\"Bob\");\n        bob.addGrade(78.0);\n        bob.addGrade(82.0);\n        course.addStudent(bob);\n\n        System.out.println(\"Course Average: \" + course.getCourseAverage());\n\n        // Retrieve and print the matrix\n        BlockRealMatrix retrievedMatrix = matrixOps.getMatrix();\n        /* read */ System.out.println(\"Retrieved matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createBlockRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getBlockRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        /* write */ BlockRealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        \n        /* read */ BlockRealMatrix retrievedMatrix = MatrixUtils.getBlockRealMatrix(matrix.getData(), 0, 0, 2, 2);\n        \n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        /* write */ BlockRealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n\n        // Additional operations with matrices\n        double[][] additionalData = {\n            {5.0, 6.0},\n            {7.0, 8.0}\n        };\n        \n        BlockRealMatrix additionalMatrix = MatrixUtils.createBlockRealMatrix(additionalData);\n        \n        // Perform matrix addition\n        RealMatrix resultMatrix = matrix.add(additionalMatrix);\n        \n        // Print the result of the matrix addition\n        System.out.println(\"Result of matrix addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Some unrelated complex operations\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            list.add(i * i);\n        }\n        \n        int sumOfSquares = 0;\n        for (int num : list) {\n            sumOfSquares += num;\n        }\n        \n        System.out.println(\"Sum of squares from 0 to 9: \" + sumOfSquares);\n        \n        // Retrieve the original matrix to ensure the read operation\n        /* read */ BlockRealMatrix retrievedMatrix = MatrixUtils.getBlockRealMatrix(matrix.getData(), 0, 0, 2, 2);\n        \n        System.out.println(\"Retrieved matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}