{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix symmetricMatrix;\n\n    public void createSymmetricMatrix(double[][] data) {\n        /* write */ symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n    }\n\n    public RealMatrix getSymmetricMatrix() {\n        return symmetricMatrix;\n    }\n}\n",
        "Course.java": "public class Course {\n    private String name;\n    private MatrixOperations matrixOps;\n\n    public Course(String name) {\n        this.name = name;\n        this.matrixOps = new MatrixOperations();\n    }\n\n    public void initializeMatrix(double[][] data) {\n        matrixOps.createSymmetricMatrix(data);\n    }\n\n    public RealMatrix getCourseMatrix() {\n        return matrixOps.getSymmetricMatrix();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize course and matrix data\n        Course algebraCourse = new Course(\"Algebra\");\n        double[][] matrixData = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        // Set the symmetric matrix for the course\n        algebraCourse.initializeMatrix(matrixData);\n\n        // Perform additional operations\n        double[][] additionalData = {\n            {7, 8, 9},\n            {8, 10, 11},\n            {9, 11, 12}\n        };\n\n        // Create another matrix\n        RealMatrix anotherMatrix = MatrixUtils.createSymmetricMatrix(additionalData);\n        RealMatrix courseMatrix = algebraCourse.getCourseMatrix();\n\n        // Multiply matrices\n        RealMatrix multipliedMatrix = courseMatrix.multiply(anotherMatrix);\n\n        // Calculate and print trace of the multiplied matrix\n        double trace = multipliedMatrix.getTrace();\n        System.out.println(\"Trace of the multiplied matrix: \" + trace);\n\n        // Retrieve and print the symmetric matrix from the course\n        /* read */ RealMatrix retrievedMatrix = algebraCourse.getCourseMatrix();\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        \n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Assuming getSymmetricMatrix retrieves the matrix created\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix to verify the operation\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        \n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n        \n        // Create another matrix for additional operations\n        double[][] data2 = {\n            {7, 8, 9},\n            {8, 10, 11},\n            {9, 11, 12}\n        };\n        RealMatrix anotherMatrix = MatrixUtils.createSymmetricMatrix(data2);\n        \n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = symmetricMatrix.multiply(anotherMatrix);\n        \n        // Create a vector for operations\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n        \n        // Multiply matrix with vector\n        RealVector resultVector = multipliedMatrix.operate(vector);\n        \n        // Print result vector\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Calculate trace of the multiplied matrix\n        double trace = multipliedMatrix.getTrace();\n        System.out.println(\"Trace of the multiplied matrix: \" + trace);\n        \n        // Assuming getSymmetricMatrix retrieves the matrix created\n        /* read */ RealMatrix retrievedMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n        \n        // Print the retrieved matrix to verify the operation\n        System.out.println(\"Retrieved Symmetric Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}