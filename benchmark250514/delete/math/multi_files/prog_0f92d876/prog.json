{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[][] data) {\n        /* write */ matrix = MatrixUtils.createBlockRealMatrix(data);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n\n    public RealMatrix transposeMatrix() {\n        return matrix.transpose();\n    }\n\n    public RealMatrix multiplyMatrix(RealMatrix otherMatrix) {\n        return matrix.multiply(otherMatrix);\n    }\n\n    public RealMatrix addMatrix(RealMatrix otherMatrix) {\n        return matrix.add(otherMatrix);\n    }\n\n    public RealMatrix subtractMatrix(RealMatrix otherMatrix) {\n        return matrix.subtract(otherMatrix);\n    }\n}\n",
        "MatrixReader.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixReader {\n    private MatrixOperations matrixOperations;\n\n    public MatrixReader(MatrixOperations matrixOperations) {\n        this.matrixOperations = matrixOperations;\n    }\n\n    public RealMatrix readMatrix() {\n        /* read */ return matrixOperations.getMatrix().getSubMatrix(0, 1, 0, 1); // This will read the entire matrix as a submatrix\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        \n        MatrixOperations matrixOperations = new MatrixOperations(data);\n        MatrixReader matrixReader = new MatrixReader(matrixOperations);\n\n        // Perform some matrix operations\n        RealMatrix transposedMatrix = matrixOperations.transposeMatrix();\n        RealMatrix multipliedMatrix = matrixOperations.multiplyMatrix(transposedMatrix);\n        RealMatrix addedMatrix = matrixOperations.addMatrix(transposedMatrix);\n        RealMatrix subtractedMatrix = matrixOperations.subtractMatrix(transposedMatrix);\n\n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the subtracted matrix\n        System.out.println(\"Subtracted Matrix:\");\n        for (int i = 0; i < subtractedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < subtractedMatrix.getColumnDimension(); j++) {\n                System.out.print(subtractedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read and print the matrix\n        RealMatrix readMatrix = matrixReader.readMatrix();\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createBlockRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getBlockRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        \n        /* read */ RealMatrix readMatrix = matrix.getSubMatrix(0, 1, 0, 1); // This will read the entire matrix as a submatrix\n        \n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = { {1.0, 2.0}, {3.0, 4.0} };\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createBlockRealMatrix(data);\n        \n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n        \n        // Create a vector and solve a system of equations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0});\n        DecompositionSolver solver = new LUDecomposition(matrix).getSolver();\n        RealVector solution = solver.solve(vector);\n        \n        // Print the solution vector\n        System.out.println(\"Solution Vector:\");\n        for (int i = 0; i < solution.getDimension(); i++) {\n            System.out.print(solution.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // More matrix operations\n        RealMatrix addedMatrix = matrix.add(transposedMatrix);\n        RealMatrix subtractedMatrix = matrix.subtract(transposedMatrix);\n        \n        // Print the added matrix\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Print the subtracted matrix\n        System.out.println(\"Subtracted Matrix:\");\n        for (int i = 0; i < subtractedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < subtractedMatrix.getColumnDimension(); j++) {\n                System.out.print(subtractedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Extract a submatrix to simulate the read operation\n        /* read */ RealMatrix readMatrix = matrix.getSubMatrix(0, 1, 0, 1); // This will read the entire matrix as a submatrix\n        \n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}