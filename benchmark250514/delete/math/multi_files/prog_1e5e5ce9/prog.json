{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix columnMatrix;\n\n    public void createColumnMatrix(double[] columnData) {\n        /* write */ columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n    }\n\n    public RealMatrix getColumnMatrix() {\n        return columnMatrix;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private MatrixOperations matrixOps = new MatrixOperations();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void setMatrixData(double[] columnData) {\n        matrixOps.createColumnMatrix(columnData);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrixOps.getColumnMatrix();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"John\");\n\n        // Set matrix data for the student\n        double[] columnData = {1.0, 2.0, 3.0};\n        student.setMatrixData(columnData);\n\n        // Perform operations with the student's matrix\n        RealMatrix matrix = student.getMatrix();\n        double scalar = 2.0;\n        RealMatrix scaledMatrix = matrix.scalarMultiply(scalar);\n\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            System.out.println(\"Scaled Matrix Entry \" + i + \": \" + scaledMatrix.getEntry(i, 0));\n        }\n\n        // Read the column real matrix using the read method\n        /* read */ RealMatrix readMatrix = student.getMatrix();\n\n        // Print the read matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(\"Read Matrix Entry \" + i + \": \" + readMatrix.getEntry(i, 0));\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a column real matrix using the write method\n        double[] columnData = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n\n        // Read the column real matrix using the read method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getColumnRealMatrix(columnMatrix, 0);\n\n        // Print the read matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, 0));\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a column real matrix using the write method\n        double[] columnData = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n\n        // Additional code to make the program more complex\n        double[][] matrixData = {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0},\n            {10.0, 11.0, 12.0}\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector resultVector = matrix.operate(vector);\n\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(\"Result Vector Entry \" + i + \": \" + resultVector.getEntry(i));\n        }\n\n        // More operations with the original column matrix\n        double scalar = 2.0;\n        RealMatrix scaledMatrix = columnMatrix.scalarMultiply(scalar);\n\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            System.out.println(\"Scaled Matrix Entry \" + i + \": \" + scaledMatrix.getEntry(i, 0));\n        }\n\n        // Read the column real matrix using the read method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getColumnRealMatrix(columnMatrix, 0);\n\n        // Print the read matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(\"Read Matrix Entry \" + i + \": \" + readMatrix.getEntry(i, 0));\n        }\n    }\n}"
}