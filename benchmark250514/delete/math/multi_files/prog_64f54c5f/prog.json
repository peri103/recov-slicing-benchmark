{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class MatrixOperations {\n    private RealMatrix symmetricMatrix;\n\n    public void createMatrix(double[][] data) {\n        /* write */ symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n    }\n\n    public RealMatrix getMatrix() {\n        return symmetricMatrix;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String title;\n    private List<Student> students;\n\n    public Course(String title) {\n        this.title = title;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create matrix operations instance\n        MatrixOperations matrixOps = new MatrixOperations();\n\n        // Create a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        matrixOps.createMatrix(data);\n\n        // Create a course and add students\n        Course course = new Course(\"Math\");\n        Student student1 = new Student(\"Alice\", 20);\n        Student student2 = new Student(\"Bob\", 22);\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        // Print course details\n        System.out.println(\"Course: \" + course.getTitle());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n\n        // Read the symmetric matrix using the read method\n        /* read */ RealMatrix readMatrix = matrixOps.getMatrix();\n\n        // Print the read matrix to verify\n        System.out.println(\"Symmetric Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        // Create a symmetric matrix using the write method\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Read the symmetric matrix using the read method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the read matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a symmetric matrix\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n\n        // Initialize a vector\n        RealVector vector = new ArrayRealVector(new double[]{1, 2, 3});\n\n        // Create a symmetric matrix using the write method\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createSymmetricMatrix(data);\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = symmetricMatrix.operate(vector);\n\n        // Calculate the norm of the result vector\n        double norm = resultVector.getNorm();\n        System.out.println(\"Norm of the result vector: \" + norm);\n\n        // Perform some unrelated arithmetic operations\n        int a = 5;\n        int b = 10;\n        int c = a * b;\n        System.out.println(\"Arithmetic result: \" + c);\n\n        // Read the symmetric matrix using the read method\n        /* read */ RealMatrix readMatrix = MatrixUtils.getSymmetricMatrix(symmetricMatrix);\n\n        // Print the read matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform additional operations on the read matrix\n        RealMatrix transposedMatrix = readMatrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}