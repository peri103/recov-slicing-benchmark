{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class MatrixOperations {\n    private Array2DRowRealMatrix matrix;\n\n    public MatrixOperations(int rows, int columns) {\n        matrix = new Array2DRowRealMatrix(rows, columns);\n    }\n\n    public void setMatrixEntry(int row, int column, double value) {\n        /* write */ matrix.setEntry(row, column, value);\n    }\n\n    public double getMatrixEntry(int row, int column) {\n        return matrix.getEntry(row, column);\n    }\n\n    public RealMatrix addMatrices(RealMatrix otherMatrix) {\n        return matrix.add(otherMatrix);\n    }\n\n    public RealMatrix multiplyMatrices(RealMatrix otherMatrix) {\n        return matrix.multiply(otherMatrix);\n    }\n\n    public double getTrace() {\n        return matrix.getTrace();\n    }\n\n    public RealMatrix getTranspose() {\n        return matrix.transpose();\n    }\n}\n",
        "AdvancedMatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class AdvancedMatrixOperations {\n    private double[][] data = {\n        {1.0, 2.0, 3.0},\n        {4.0, 5.0, 6.0},\n        {7.0, 8.0, 9.0}\n    };\n    private RealMatrix otherMatrix = MatrixUtils.createRealMatrix(data);\n\n    public RealMatrix getOtherMatrix() {\n        return otherMatrix;\n    }\n\n    public void printMatrix(RealMatrix matrix) {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        MatrixOperations matrixOps = new MatrixOperations(3, 3);\n        AdvancedMatrixOperations advMatrixOps = new AdvancedMatrixOperations();\n\n        // Set a specific entry in the matrix\n        matrixOps.setMatrixEntry(0, 0, 42.0);\n\n        // Perform operations with another matrix\n        RealMatrix sumMatrix = matrixOps.addMatrices(advMatrixOps.getOtherMatrix());\n        RealMatrix productMatrix = matrixOps.multiplyMatrices(advMatrixOps.getOtherMatrix());\n\n        // Print the resulting matrices\n        System.out.println(\"Sum Matrix:\");\n        advMatrixOps.printMatrix(sumMatrix);\n\n        System.out.println(\"Product Matrix:\");\n        advMatrixOps.printMatrix(productMatrix);\n\n        // Read the value from the original matrix\n        /* read */ double value = matrixOps.getMatrixEntry(0, 0);\n        System.out.println(\"Read Value: \" + value);\n\n        // Perform some operations on the matrix\n        double trace = matrixOps.getTrace();\n        System.out.println(\"Trace of the matrix: \" + trace);\n\n        RealMatrix transposeMatrix = matrixOps.getTranspose();\n        System.out.println(\"Transpose Matrix:\");\n        advMatrixOps.printMatrix(transposeMatrix);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix with 1 row and 1 column\n        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(1, 1);\n        \n        // Write a value into the matrix\n        /* write */ matrix.setEntry(0, 0, 42.0);\n        \n        // Read the value from the matrix\n        /* read */ double value = matrix.getEntry(0, 0);\n        \n        // Print the value read from the matrix\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the matrix with 3 rows and 3 columns\n        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(3, 3);\n        \n        // Write a value into the matrix\n        /* write */ matrix.setEntry(0, 0, 42.0);\n        \n        // Initialize another matrix with some values\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix otherMatrix = MatrixUtils.createRealMatrix(data);\n        \n        // Add the two matrices together\n        RealMatrix sumMatrix = matrix.add(otherMatrix);\n        \n        // Perform matrix multiplication\n        RealMatrix productMatrix = matrix.multiply(otherMatrix);\n        \n        // Print the resulting matrices\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        System.out.println(\"Product Matrix:\");\n        for (int i = 0; i < productMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < productMatrix.getColumnDimension(); j++) {\n                System.out.print(productMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the value from the original matrix\n        /* read */ double value = matrix.getEntry(0, 0);\n        \n        // Print the value read from the matrix\n        System.out.println(\"Read Value: \" + value);\n        \n        // Perform some operations on the matrix\n        double trace = matrix.getTrace();\n        System.out.println(\"Trace of the matrix: \" + trace);\n        \n        RealMatrix transposeMatrix = matrix.transpose();\n        System.out.println(\"Transpose Matrix:\");\n        for (int i = 0; i < transposeMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposeMatrix.getColumnDimension(); j++) {\n                System.out.print(transposeMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}