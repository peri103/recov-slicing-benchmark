{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix diagonalMatrix;\n\n    public void createDiagonalMatrix(double[] diagonalValues) {\n        /* write */ diagonalMatrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n    }\n\n    public RealMatrix getDiagonalMatrix() {\n        return diagonalMatrix;\n    }\n\n    public double[][] getMatrixData() {\n        return diagonalMatrix.getData();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Double> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public List<Double> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a MatrixOperations instance and create a diagonal matrix\n        MatrixOperations matrixOps = new MatrixOperations();\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        matrixOps.createDiagonalMatrix(diagonalValues);\n\n        // Create a Student and add grades\n        Student student = new Student(\"John Doe\");\n        student.addGrade(85.0);\n        student.addGrade(90.5);\n        student.addGrade(78.0);\n\n        // Print student details\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Grades: \" + student.getGrades());\n\n        // Read the diagonal matrix data\n        RealMatrix diagonalMatrix = matrixOps.getDiagonalMatrix();\n        /* read */ double[][] matrixData = diagonalMatrix.getData();\n        \n        // Print the diagonal matrix\n        System.out.println(\"Diagonal Matrix:\");\n        for (double[] row : matrixData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createDiagonalMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getDiagonalMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a diagonal matrix using MatrixUtils\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix diagonalMatrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Read the diagonal matrix using MatrixUtils (assuming getDiagonalMatrix is a hypothetical method)\n        // Since MatrixUtils does not have a method named getDiagonalMatrix, we will use getData() to retrieve the matrix data\n        /* read */ double[][] matrixData = diagonalMatrix.getData();\n        \n        // Print the diagonal matrix\n        for (double[] row : matrixData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a diagonal matrix using MatrixUtils\n        double[] diagonalValues = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix diagonalMatrix = MatrixUtils.createDiagonalMatrix(diagonalValues);\n\n        // Perform some unrelated matrix operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix addedMatrix = diagonalMatrix.add(identityMatrix);\n\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector resultVector = addedMatrix.operate(vector);\n\n        // Print the result of the vector operation\n        System.out.println(\"Resulting Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Read the diagonal matrix using MatrixUtils (assuming getDiagonalMatrix is a hypothetical method)\n        // Since MatrixUtils does not have a method named getDiagonalMatrix, we will use getData() to retrieve the matrix data\n        /* read */ double[][] matrixData = diagonalMatrix.getData();\n        \n        // Print the diagonal matrix\n        System.out.println(\"Diagonal Matrix:\");\n        for (double[] row : matrixData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform more operations on the matrix\n        RealMatrix multipliedMatrix = diagonalMatrix.multiply(identityMatrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        double[][] multipliedMatrixData = multipliedMatrix.getData();\n        for (double[] row : multipliedMatrixData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}