{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix identityMatrix;\n\n    public MatrixOperations(int size) {\n        /* write */ this.identityMatrix = MatrixUtils.createIdentityMatrix(size);\n    }\n\n    public RealMatrix getIdentityMatrix() {\n        return identityMatrix;\n    }\n\n    public RealMatrix addMatrix(RealMatrix otherMatrix) {\n        return otherMatrix.add(identityMatrix);\n    }\n\n    public RealMatrix multiplyMatrix(RealMatrix otherMatrix) {\n        return otherMatrix.multiply(identityMatrix);\n    }\n\n    public RealMatrix subtractMatrix(RealMatrix otherMatrix) {\n        return otherMatrix.subtract(identityMatrix);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize matrix operations with a 3x3 identity matrix\n        MatrixOperations matrixOps = new MatrixOperations(3);\n\n        // Create a 3x3 matrix with some values\n        double[][] data = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = matrixOps.addMatrix(matrix);\n\n        // Print the resulting matrix\n        System.out.println(\"Resulting Matrix after addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = matrixOps.multiplyMatrix(matrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the identity matrix using the read method\n        /* read */ RealMatrix readMatrix = matrixOps.getIdentityMatrix();\n\n        // Print the matrix to verify\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix subtraction\n        RealMatrix subtractedMatrix = matrixOps.subtractMatrix(matrix);\n\n        // Print the subtracted matrix\n        System.out.println(\"Subtracted Matrix:\");\n        for (int i = 0; i < subtractedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < subtractedMatrix.getColumnDimension(); j++) {\n                System.out.print(subtractedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Create a course and add students\n        Course course = new Course(\"Mathematics\");\n        course.addStudent(new Student(\"Alice\", 1));\n        course.addStudent(new Student(\"Bob\", 2));\n\n        // Print students in the course\n        System.out.println(\"Students in the course:\");\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Name: \" + student.getName() + \", ID: \" + student.getId());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createIdentityMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getIdentityMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix using the write method\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Read the identity matrix using the read method\n        /* read */ RealMatrix readMatrix = identityMatrix; // Since MatrixUtils does not have a getIdentityMatrix method\n\n        // Print the matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix using the write method\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n\n        // Create a 3x3 matrix with some values\n        double[][] data = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = matrix.add(identityMatrix);\n\n        // Print the resulting matrix\n        System.out.println(\"Resulting Matrix after addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix multiplication\n        RealMatrix multipliedMatrix = matrix.multiply(identityMatrix);\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the identity matrix using the read method\n        /* read */ RealMatrix readMatrix = identityMatrix; // Since MatrixUtils does not have a getIdentityMatrix method\n\n        // Print the matrix to verify\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform matrix subtraction\n        RealMatrix subtractedMatrix = matrix.subtract(readMatrix);\n\n        // Print the subtracted matrix\n        System.out.println(\"Subtracted Matrix:\");\n        for (int i = 0; i < subtractedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < subtractedMatrix.getColumnDimension(); j++) {\n                System.out.print(subtractedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}