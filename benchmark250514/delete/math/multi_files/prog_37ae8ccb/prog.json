{
    "files": {
        "VectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorOperations {\n    private RealVector vector;\n\n    public void initializeVector(double[] data) {\n        /* write */ vector = MatrixUtils.createArrayRealVector(data);\n    }\n\n    public RealVector getVector() {\n        return vector;\n    }\n\n    public RealVector scaleVector(double scaleFactor) {\n        return vector.mapMultiply(scaleFactor);\n    }\n}",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public void createMatrix(RealVector vector) {\n        matrix = new Array2DRowRealMatrix(new double[][]{\n            vector.toArray(),\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        });\n    }\n\n    public RealMatrix transposeMatrix() {\n        return matrix.transpose();\n    }\n\n    public RealMatrix multiplyMatrix() {\n        return matrix.multiply(transposeMatrix());\n    }\n\n    public void printMatrix() {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        VectorOperations vectorOps = new VectorOperations();\n        vectorOps.initializeVector(data);\n\n        RealVector vector = vectorOps.getVector();\n        MatrixOperations matrixOps = new MatrixOperations();\n        matrixOps.createMatrix(vector);\n        \n        RealMatrix multipliedMatrix = matrixOps.multiplyMatrix();\n        System.out.println(\"Multiplied Matrix:\");\n        matrixOps.printMatrix();\n\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the vector: \" + norm);\n\n        /* read */ RealVector readVector = vectorOps.getVector();\n        \n        System.out.println(\"Read Vector:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.print(readVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        RealVector scaledVector = vectorOps.scaleVector(2.0);\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ RealVector vector = MatrixUtils.createArrayRealVector(data);\n\n        /* read */ RealVector readVector = MatrixUtils.getArrayRealVector(vector.toArray());\n        \n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ RealVector vector = MatrixUtils.createArrayRealVector(data);\n        \n        // Create a new matrix with the vector data\n        RealMatrix matrix = new Array2DRowRealMatrix(new double[][]{\n            vector.toArray(),\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        });\n\n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n        \n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Calculate the norm of the vector\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the vector: \" + norm);\n\n        /* read */ RealVector readVector = MatrixUtils.getArrayRealVector(vector.toArray());\n        \n        // Print the read vector\n        System.out.println(\"Read Vector:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.print(readVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Perform additional operations on the read vector\n        RealVector scaledVector = readVector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}"
}