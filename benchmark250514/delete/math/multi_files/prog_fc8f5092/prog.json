{
    "files": {
        "VectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorOperations {\n    private RealMatrix matrix;\n\n    public VectorOperations(double[] columnData) {\n        // Create a matrix with a single column using the write method\n        /* write */ this.matrix = MatrixUtils.createColumnRealMatrix(columnData);\n    }\n\n    public RealVector getColumnVector(int columnIndex) {\n        return matrix.getColumnVector(columnIndex);\n    }\n}",
        "ComplexMatrixOperations.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class ComplexMatrixOperations {\n    private RealMatrix matrix;\n\n    public ComplexMatrixOperations(double[][] data) {\n        this.matrix = new Array2DRowRealMatrix(data);\n    }\n\n    public RealMatrix transposeMatrix() {\n        return matrix.transpose();\n    }\n\n    public double sumFirstRow() {\n        double rowSum = 0;\n        for (int i = 0; i < matrix.getColumnDimension(); i++) {\n            rowSum += matrix.getEntry(0, i);\n        }\n        return rowSum;\n    }\n}",
        "Main.java": "import org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        VectorOperations vectorOps = new VectorOperations(columnData);\n\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0},\n            {5.0, 6.0}\n        };\n        ComplexMatrixOperations complexOps = new ComplexMatrixOperations(data);\n\n        // Perform operations on the additional matrix\n        RealMatrix transposedMatrix = complexOps.transposeMatrix();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        double rowSum = complexOps.sumFirstRow();\n        System.out.println(\"Sum of the first row: \" + rowSum);\n\n        // Use the read method to get the column vector from the original matrix\n        /* read */ RealVector columnVector = vectorOps.getColumnVector(0);\n\n        // Print the column vector to verify the read operation\n        System.out.println(\"Column Vector:\");\n        for (int i = 0; i < columnVector.getDimension(); i++) {\n            System.out.println(columnVector.getEntry(i));\n        }\n\n        // Perform additional unrelated operations\n        double[] newVectorData = {7.0, 8.0, 9.0};\n        RealVector newVector = MatrixUtils.createRealVector(newVectorData);\n        RealVector resultVector = columnVector.add(newVector);\n\n        System.out.println(\"Resultant Vector after addition:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        \n        // Create a matrix with a single column using the write method\n        RealMatrix matrix = MatrixUtils.createColumnRealMatrix(columnData);\n        \n        // Read the column vector using the read method\n        /* read */ RealVector columnVector = matrix.getColumnVector(0);\n        \n        // Print the column vector to verify the read operation\n        System.out.println(columnVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        \n        // Create a matrix with a single column using the write method\n        RealMatrix matrix = MatrixUtils.createColumnRealMatrix(columnData);\n        \n        // Create another matrix for additional operations\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0},\n            {5.0, 6.0}\n        };\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(data);\n        \n        // Perform some operations on the additional matrix\n        RealMatrix transposedMatrix = additionalMatrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Calculate the sum of elements in the first row of the additional matrix\n        double rowSum = 0;\n        for (int i = 0; i < additionalMatrix.getColumnDimension(); i++) {\n            rowSum += additionalMatrix.getEntry(0, i);\n        }\n        System.out.println(\"Sum of the first row: \" + rowSum);\n        \n        // Use the read method to get the column vector from the original matrix\n        /* read */ RealVector columnVector = matrix.getColumnVector(0);\n        \n        // Print the column vector to verify the read operation\n        System.out.println(\"Column Vector:\");\n        for (int i = 0; i < columnVector.getDimension(); i++) {\n            System.out.println(columnVector.getEntry(i));\n        }\n        \n        // Perform additional unrelated operations\n        double[] newVectorData = {7.0, 8.0, 9.0};\n        RealVector newVector = MatrixUtils.createRealVector(newVectorData);\n        RealVector resultVector = columnVector.add(newVector);\n        \n        System.out.println(\"Resultant Vector after addition:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n    }\n}"
}