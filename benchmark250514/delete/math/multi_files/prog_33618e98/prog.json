{
    "files": {
        "VectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class VectorOperations {\n    private RealMatrix matrix;\n\n    public VectorOperations() {\n        double[][] matrixData = {{0.0, 0.0, 0.0}};\n        this.matrix = MatrixUtils.createRealMatrix(matrixData);\n    }\n\n    public void writeVector(double[] data) {\n        RealVector vector = MatrixUtils.createRowRealVector(data);\n        /* write */ matrix.setRowVector(0, vector);\n    }\n\n    public RealMatrix getMatrix() {\n        return this.matrix;\n    }\n}",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public RealVector readVector() {\n        /* read */ return matrix.getRowVector(0);\n    }\n\n    public RealMatrix multiplyMatrix(RealMatrix otherMatrix) {\n        return matrix.multiply(otherMatrix);\n    }\n\n    public RealMatrix scaleMatrix(double scalar) {\n        return matrix.scalarMultiply(scalar);\n    }\n}",
        "Main.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize vector operations and write vector\n        VectorOperations vectorOps = new VectorOperations();\n        vectorOps.writeVector(new double[]{1.0, 2.0, 3.0});\n\n        // Obtain the matrix from vector operations\n        RealMatrix matrix = vectorOps.getMatrix();\n\n        // Initialize matrix operations\n        MatrixOperations matrixOps = new MatrixOperations(matrix);\n\n        // Additional complexity: Create another matrix and perform operations\n        double[][] additionalMatrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalMatrixData);\n\n        // Perform matrix multiplication and scaling\n        RealMatrix resultMatrix = matrixOps.multiplyMatrix(additionalMatrix);\n        RealMatrix scaledMatrix = matrixOps.scaleMatrix(2.0);\n\n        // Print the scaled matrix\n        System.out.println(\"Scaled Matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the row real vector\n        RealVector readVector = matrixOps.readVector();\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with one row\n        double[][] matrixData = {{0.0, 0.0, 0.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Create a row real vector\n        RealVector vector = MatrixUtils.createRowRealVector(new double[]{1.0, 2.0, 3.0});\n        /* write */ matrix.setRowVector(0, vector);\n\n        // Read the row real vector\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with one row\n        double[][] matrixData = {{0.0, 0.0, 0.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Create a row real vector\n        RealVector vector = MatrixUtils.createRowRealVector(new double[]{1.0, 2.0, 3.0});\n        /* write */ matrix.setRowVector(0, vector);\n        \n        // Additional complexity: Create another matrix and perform operations\n        double[][] additionalMatrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalMatrixData);\n\n        // Perform matrix multiplication\n        RealMatrix resultMatrix = matrix.multiply(additionalMatrix);\n\n        // Perform scalar multiplication\n        RealMatrix scaledMatrix = resultMatrix.scalarMultiply(2.0);\n\n        // Print the scaled matrix\n        System.out.println(\"Scaled Matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // More complexity: Create another vector and add it to the original vector\n        RealVector anotherVector = MatrixUtils.createRowRealVector(new double[]{4.0, 5.0, 6.0});\n        RealVector sumVector = vector.add(anotherVector);\n\n        // Print the sum vector\n        System.out.println(\"Sum Vector: \" + sumVector);\n\n        // Read the row real vector\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}"
}