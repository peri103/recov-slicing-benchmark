{
    "files": {
        "VectorOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class VectorOperations {\n    private ArrayRealVector vector;\n\n    public void createVector(double[] data) {\n        /* write */\n        this.vector = MatrixUtils.createArrayRealVector(data);\n    }\n\n    public ArrayRealVector getVector() {\n        return this.vector;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class MatrixOperations {\n    public RealMatrix transposeMatrix(double[][] data) {\n        RealMatrix matrix = new BlockRealMatrix(data);\n        return matrix.transpose();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        VectorOperations vectorOps = new VectorOperations();\n        double[] data = {1.0, 2.0, 3.0};\n        vectorOps.createVector(data);\n\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        MatrixOperations matrixOps = new MatrixOperations();\n        RealMatrix transposedMatrix = matrixOps.transposeMatrix(matrixData);\n\n        System.out.println(\"Transposed Matrix: \");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */\n        ArrayRealVector readVector = vectorOps.getVector();\n        \n        System.out.println(\"Read Vector: \" + readVector);\n        \n        double[] readVectorData = readVector.toArray();\n        for (double val : readVectorData) {\n            System.out.println(\"Value from read vector: \" + val);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArrayRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArrayRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */\n        ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n\n        /* read */\n        ArrayRealVector readVector = MatrixUtils.getArrayRealVector(vector);\n        \n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */\n        ArrayRealVector vector = MatrixUtils.createArrayRealVector(data);\n\n        // Create and manipulate another vector\n        double[] data2 = {4.0, 5.0, 6.0};\n        ArrayRealVector vector2 = new ArrayRealVector(data2);\n        ArrayRealVector sumVector = vector.add(vector2);\n        System.out.println(\"Sum Vector: \" + sumVector);\n\n        // Create and manipulate a matrix\n        double[][] matrixData = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new BlockRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix: \");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Perform some operations on the original vector\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the original vector: \" + norm);\n\n        /* read */\n        ArrayRealVector readVector = MatrixUtils.getArrayRealVector(vector);\n        \n        System.out.println(\"Read Vector: \" + readVector);\n        \n        // Further operations on the read vector\n        double[] readVectorData = readVector.toArray();\n        for (double val : readVectorData) {\n            System.out.println(\"Value from read vector: \" + val);\n        }\n    }\n}"
}