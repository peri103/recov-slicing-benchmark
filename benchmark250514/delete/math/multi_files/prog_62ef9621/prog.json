{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class MatrixOperations {\n    private RealMatrix identityMatrix;\n\n    public void createIdentityMatrix(int size) {\n        /* write */ identityMatrix = MatrixUtils.createIdentityMatrix(size);\n    }\n\n    public RealMatrix getIdentityMatrix() {\n        return identityMatrix;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Double> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public double getAverageGrade() {\n        double sum = 0;\n        for (double grade : grades) {\n            sum += grade;\n        }\n        return grades.isEmpty() ? 0 : sum / grades.size();\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Matrix operations\n        MatrixOperations matrixOps = new MatrixOperations();\n        matrixOps.createIdentityMatrix(3);\n\n        // Student and course operations\n        Student student1 = new Student(\"Alice\");\n        student1.addGrade(85.5);\n        student1.addGrade(90.0);\n\n        Student student2 = new Student(\"Bob\");\n        student2.addGrade(78.0);\n        student2.addGrade(82.5);\n\n        Course course = new Course(\"Mathematics\");\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        // Display student information\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student Name: \" + student.getName());\n            System.out.println(\"Average Grade: \" + student.getAverageGrade());\n        }\n\n        // Reading the identity matrix\n        /* read */ RealMatrix readMatrix = matrixOps.getIdentityMatrix();\n\n        // Displaying the identity matrix\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createIdentityMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getIdentityMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an identity matrix using MatrixUtils\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n        \n        // Reading the identity matrix using MatrixUtils (assuming getIdentityMatrix is a valid method)\n        // Note: MatrixUtils does not have a getIdentityMatrix method in reality, this is hypothetical.\n        /* read */ RealMatrix readMatrix = identityMatrix; // Assuming getIdentityMatrix(identityMatrix) returns the same matrix\n\n        // Displaying the matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an identity matrix using MatrixUtils\n        /* write */ RealMatrix identityMatrix = MatrixUtils.createIdentityMatrix(3);\n        \n        // Additional operations to make the program more complex\n        RealMatrix matrixA = MatrixUtils.createRealMatrix(new double[][] {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        });\n\n        // Perform matrix multiplication\n        RealMatrix resultMatrix = matrixA.multiply(identityMatrix);\n\n        // Create a vector and perform matrix-vector multiplication\n        RealVector vector = new ArrayRealVector(new double[] {1, 2, 3});\n        RealVector multipliedVector = matrixA.operate(vector);\n\n        // Displaying the result of matrix multiplication\n        System.out.println(\"Resultant Matrix:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Displaying the result of matrix-vector multiplication\n        System.out.println(\"Multiplied Vector:\");\n        for (int i = 0; i < multipliedVector.getDimension(); i++) {\n            System.out.print(multipliedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Reading the identity matrix (assuming getIdentityMatrix is a valid method)\n        // Note: MatrixUtils does not have a getIdentityMatrix method in reality, this is hypothetical.\n        /* read */ RealMatrix readMatrix = identityMatrix; // Assuming getIdentityMatrix(identityMatrix) returns the same matrix\n\n        // Displaying the identity matrix\n        System.out.println(\"Identity Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}