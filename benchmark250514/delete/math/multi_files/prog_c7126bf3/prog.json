{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[][] data) {\n        this.matrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public void setRowVector(int rowIndex, double[] rowData) {\n        RealVector vector = MatrixUtils.createRowRealVector(rowData);\n        /* write */ matrix.setRowVector(rowIndex, vector);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "MatrixReader.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixReader {\n    private RealMatrix matrix;\n\n    public MatrixReader(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public RealVector getRowVector(int rowIndex) {\n        /* read */ return matrix.getRowVector(rowIndex);\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0, 3.0}};\n        MatrixOperations matrixOps = new MatrixOperations(data);\n\n        // Set a new row vector\n        matrixOps.setRowVector(0, new double[]{4.0, 5.0, 6.0});\n\n        // Get the matrix and pass it to the reader\n        RealMatrix matrix = matrixOps.getMatrix();\n        MatrixReader reader = new MatrixReader(matrix);\n\n        // Read the vector back\n        RealVector readVector = reader.getRowVector(0);\n\n        // Perform operations on the read vector\n        System.out.println(\"Read vector: \" + readVector);\n        double norm = readVector.getNorm();\n        System.out.println(\"Norm of the read vector: \" + norm);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with a single row\n        double[][] data = {{1.0, 2.0, 3.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create a RealVector using the write method\n        RealVector vector = MatrixUtils.createRowRealVector(new double[]{4.0, 5.0, 6.0});\n        \n        // Replace the first row of the matrix with the created vector\n        matrix.setRowVector(0, vector);\n\n        // Read the row vector using the read method\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n\n        // Print the vector to verify the read operation\n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with a single row\n        double[][] data = {{1.0, 2.0, 3.0}};\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create a RealVector using the write method\n        RealVector vector = MatrixUtils.createRowRealVector(new double[]{4.0, 5.0, 6.0});\n        \n        // Replace the first row of the matrix with the created vector\n        matrix.setRowVector(0, vector);\n\n        // Perform some operations on the matrix\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n            public double visit(int row, int column, double value) {\n                return value * 2; // Double each element\n            }\n            public double end() { return 0; }\n        };\n        matrix.walkInRowOrder(visitor);\n        \n        // Additional operations: Calculate the sum of all elements in the matrix\n        RealMatrixPreservingVisitor sumVisitor = new RealMatrixPreservingVisitor() {\n            double sum = 0;\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n            public void visit(int row, int column, double value) {\n                sum += value;\n            }\n            public double end() { return sum; }\n        };\n        matrix.walkInRowOrder(sumVisitor);\n        double sum = sumVisitor.end();\n        System.out.println(\"Sum of all elements: \" + sum);\n\n        // Read the row vector using the read method\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n\n        // Print the vector to verify the read operation\n        System.out.println(\"Read vector: \" + readVector);\n\n        // Further operations on the read vector\n        double norm = readVector.getNorm();\n        System.out.println(\"Norm of the read vector: \" + norm);\n    }\n}"
}