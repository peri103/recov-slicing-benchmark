{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[][] initialData) {\n        this.matrix = MatrixUtils.createRealMatrix(initialData);\n    }\n\n    public void replaceRowVector(int rowIndex, double[] vectorData) {\n        RealVector rowVector = MatrixUtils.createRowRealVector(vectorData);\n        /* write */ matrix.setRowVector(rowIndex, rowVector);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "MatrixReader.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class MatrixReader {\n    private RealMatrix matrix;\n\n    public MatrixReader(RealMatrix matrix) {\n        this.matrix = matrix;\n    }\n\n    public RealVector getRowVector(int rowIndex) {\n        /* read */ return matrix.getRowVector(rowIndex);\n    }\n}\n",
        "Student.java": "import java.util.List;\nimport java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private List<Double> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public List<Double> getGrades() {\n        return grades;\n    }\n\n    public double calculateAverage() {\n        double sum = 0;\n        for (double grade : grades) {\n            sum += grade;\n        }\n        return grades.isEmpty() ? 0 : sum / grades.size();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Matrix operations\n        double[][] initialData = { {1.0, 2.0, 3.0} };\n        MatrixOperations matrixOps = new MatrixOperations(initialData);\n        matrixOps.replaceRowVector(0, new double[] {4.0, 5.0, 6.0});\n\n        MatrixReader matrixReader = new MatrixReader(matrixOps.getMatrix());\n        RealVector readVector = matrixReader.getRowVector(0);\n\n        System.out.println(\"Read Vector: \" + readVector);\n\n        // Student operations\n        Student student = new Student(\"John Doe\");\n        student.addGrade(85.5);\n        student.addGrade(92.0);\n        student.addGrade(78.3);\n\n        System.out.println(\"Grades: \" + student.getGrades());\n        System.out.println(\"Average Grade: \" + student.calculateAverage());\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with one row and some columns\n        double[][] data = { {1.0, 2.0, 3.0} };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Create a row real vector\n        RealVector rowVector = MatrixUtils.createRowRealVector(new double[] {4.0, 5.0, 6.0});\n        \n        // Replace the first row of the matrix with the new vector\n        /* write */ matrix.setRowVector(0, rowVector);\n\n        // Get the first row real vector\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n        \n        // Print the vector to ensure it matches what was written\n        System.out.println(readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with one row and some columns\n        double[][] initialData = { {1.0, 2.0, 3.0} };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(initialData);\n\n        // Create a row real vector\n        RealVector rowVector = MatrixUtils.createRowRealVector(new double[] {4.0, 5.0, 6.0});\n        \n        // Perform some unrelated operations\n        double[][] additionalData = { {7.0, 8.0, 9.0}, {10.0, 11.0, 12.0} };\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalData);\n\n        // Add matrices\n        RealMatrix combinedMatrix = matrix.add(additionalMatrix);\n        System.out.println(\"Combined Matrix:\");\n        for (int i = 0; i < combinedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < combinedMatrix.getColumnDimension(); j++) {\n                System.out.print(combinedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Replace the first row of the matrix with the new vector\n        /* write */ matrix.setRowVector(0, rowVector);\n\n        // Perform more operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Get the first row real vector\n        /* read */ RealVector readVector = matrix.getRowVector(0);\n        \n        // Print the vector to ensure it matches what was written\n        System.out.println(\"Read Vector: \" + readVector);\n\n        // Perform additional operations on the read vector\n        RealVector scaledVector = readVector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector: \" + scaledVector);\n    }\n}"
}