{
    "files": {
        "ImmutableSortedMultisetWrapper.java": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableSortedMultiset.Builder;\n\npublic class ImmutableSortedMultisetWrapper {\n    private Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n\n    public void addElement(int element) {\n        /* write */ builder.add(element);\n    }\n\n    public ImmutableSortedMultiset<Integer> buildMultiset() {\n        return builder.build();\n    }\n}\n",
        "Course.java": "import com.google.common.collect.HashMultiset;\nimport com.google.common.collect.Multiset;\n\npublic class Course {\n    private String courseName;\n    private Multiset<String> studentNames = HashMultiset.create();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(String studentName) {\n        studentNames.add(studentName);\n    }\n\n    public void printStudentCounts() {\n        for (String student : studentNames.elementSet()) {\n            System.out.println(student + \": \" + studentNames.count(student));\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Using the ImmutableSortedMultisetWrapper\n        ImmutableSortedMultisetWrapper multisetWrapper = new ImmutableSortedMultisetWrapper();\n        multisetWrapper.addElement(1);\n        multisetWrapper.addElement(2);\n        multisetWrapper.addElement(3);\n\n        // Using the Course class\n        Course course = new Course(\"Mathematics\");\n        course.addStudent(\"Alice\");\n        course.addStudent(\"Bob\");\n        course.addStudent(\"Alice\");\n        course.printStudentCounts();\n\n        // Building the multiset and reading the count of '1'\n        ImmutableSortedMultiset<Integer> sortedMultiset = multisetWrapper.buildMultiset();\n        /* read */ int count = sortedMultiset.count(1);\n        System.out.println(\"Count of '1' in sortedMultiset: \" + count);\n\n        // Additional unrelated logic\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "add",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableSortedMultiset.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n        /* write */ builder.add(1);\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        /* read */ int count = multiset.count(1);\n        System.out.println(count);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableSortedMultiset.Builder;\nimport com.google.common.collect.HashMultiset;\nimport com.google.common.collect.Multiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n        /* write */ builder.add(1);\n        \n        // Adding more complexity with another data structure\n        Multiset<String> multiset = HashMultiset.create();\n        multiset.add(\"apple\");\n        multiset.add(\"banana\");\n        multiset.add(\"apple\");\n        \n        // Process the HashMultiset\n        for (String fruit : multiset.elementSet()) {\n            System.out.println(fruit + \": \" + multiset.count(fruit));\n        }\n        \n        ImmutableSortedMultiset<Integer> sortedMultiset = builder.build();\n        \n        // More operations on the ImmutableSortedMultiset\n        System.out.println(\"Initial sortedMultiset: \" + sortedMultiset);\n        builder.add(2);\n        builder.add(3);\n        sortedMultiset = builder.build();\n        System.out.println(\"Updated sortedMultiset: \" + sortedMultiset);\n        \n        // Another unrelated computation\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n        \n        // Final read operation from the original write-read pair\n        /* read */ int count = sortedMultiset.count(1);\n        System.out.println(\"Count of '1' in sortedMultiset: \" + count);\n    }\n}"
}