{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private StudentDetails details;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.details = new StudentDetails(age);\n    }\n\n    public void setDetail(Class<?> type, Object instance) {\n        details.setDetail(type, instance);\n    }\n\n    public Object getDetail(Class<?> type) {\n        return details.getDetail(type);\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "StudentDetails.java": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\n\npublic class StudentDetails {\n    private Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n    private ImmutableClassToInstanceMap<Object> map;\n\n    public StudentDetails(int age) {\n        /* write */ builder.putInstance(Integer.class, age);\n    }\n\n    public void setDetail(Class<?> type, Object instance) {\n        builder.putInstance(type, instance);\n        map = builder.build();\n    }\n\n    public Object getDetail(Class<?> type) {\n        if (map == null) {\n            map = builder.build();\n        }\n        return map.getInstance(type);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"John\", 20);\n\n        // Add more details\n        student.setDetail(String.class, \"Computer Science\");\n        student.setDetail(Double.class, 3.8);\n\n        // Retrieve and print the details\n        Integer age = (Integer) student.getDetail(Integer.class);\n        /* read */ System.out.println(\"Age: \" + age);\n\n        String major = (String) student.getDetail(String.class);\n        System.out.println(\"Major: \" + major);\n\n        Double gpa = (Double) student.getDetail(Double.class);\n        System.out.println(\"GPA: \" + gpa);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "write_method": "putInstance",
        "read_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "read_method": "getInstance"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableClassToInstanceMap\n        Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n        \n        // Use putInstance to write a value\n        /* write */ builder.putInstance(String.class, \"Hello, World!\");\n        \n        // Build the map\n        ImmutableClassToInstanceMap<Object> map = builder.build();\n        \n        // Use getInstance to read the value\n        /* read */ String value = map.getInstance(String.class);\n        \n        // Print the value\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\nimport com.google.common.collect.ImmutableMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableClassToInstanceMap\n        Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n        \n        // Use putInstance to write a value\n        /* write */ builder.putInstance(String.class, \"Hello, World!\");\n        \n        // Create another builder for a different map\n        Builder<Object> anotherBuilder = ImmutableClassToInstanceMap.builder();\n        anotherBuilder.putInstance(Integer.class, 42);\n        \n        // Build the map\n        ImmutableClassToInstanceMap<Object> map = builder.build();\n        ImmutableClassToInstanceMap<Object> anotherMap = anotherBuilder.build();\n        \n        // Perform some unrelated operations\n        ImmutableMap<String, Integer> simpleMap = ImmutableMap.of(\"One\", 1, \"Two\", 2, \"Three\", 3);\n        int sum = 0;\n        for (Integer value : simpleMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in simpleMap: \" + sum);\n        \n        // Use getInstance to read the value\n        /* read */ String value = map.getInstance(String.class);\n        \n        // Print the value\n        System.out.println(value);\n        \n        // Read a value from another map\n        Integer intValue = anotherMap.getInstance(Integer.class);\n        System.out.println(\"Value from another map: \" + intValue);\n        \n        // Perform more operations\n        ImmutableMap<String, String> stringMap = ImmutableMap.of(\"A\", \"Apple\", \"B\", \"Banana\", \"C\", \"Cherry\");\n        for (String key : stringMap.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + stringMap.get(key));\n        }\n    }\n}"
}