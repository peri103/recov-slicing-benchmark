{
    "files": {
        "Course.java": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport java.util.Collection;\n\npublic class Course {\n    private ForwardingMultimap<String, String> studentAssignments = new ForwardingMultimap<String, String>() {\n        private final ArrayListMultimap<String, String> delegate = ArrayListMultimap.create();\n\n        @Override\n        protected ArrayListMultimap<String, String> delegate() {\n            return delegate;\n        }\n    };\n\n    public void addAssignment(String studentName, String assignment) {\n        /* write */ studentAssignments.put(studentName, assignment);\n    }\n\n    public Collection<String> getAssignments(String studentName) {\n        return studentAssignments.get(studentName);\n    }\n}",
        "Student.java": "public class Student {\n    private String name;\n    private Course course = new Course();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void submitAssignment(String assignment) {\n        course.addAssignment(name, assignment);\n    }\n\n    public Collection<String> viewAssignments() {\n        return course.getAssignments(name);\n    }\n}",
        "Main.java": "import java.util.Collection;\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"John\");\n        student.submitAssignment(\"Math Homework\");\n        student.submitAssignment(\"Science Project\");\n\n        // Perform some unrelated operations\n        int a = 5;\n        int b = 10;\n        int sum = a + b;\n        System.out.println(\"Sum: \" + sum);\n\n        // More complex operations\n        double x = 3.14;\n        double y = 2.71;\n        double product = x * y;\n        System.out.println(\"Product: \" + product);\n\n        // Finally, read the assignments\n        Collection<String> assignments = student.viewAssignments();\n        /* read */ for (String assignment : assignments) {\n            System.out.println(\"Assignment: \" + assignment);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ForwardingMultimap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport java.util.Collection;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ForwardingMultimap using ArrayListMultimap\n        ForwardingMultimap<String, String> multimap = new ForwardingMultimap<String, String>() {\n            private final ArrayListMultimap<String, String> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected ArrayListMultimap<String, String> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */\n        multimap.put(\"key\", \"value\");\n\n        /* read */\n        Collection<String> values = multimap.get(\"key\");\n        System.out.println(values);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.HashMultimap;\nimport java.util.Collection;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ForwardingMultimap using ArrayListMultimap\n        ForwardingMultimap<String, String> multimap = new ForwardingMultimap<String, String>() {\n            private final ArrayListMultimap<String, String> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected ArrayListMultimap<String, String> delegate() {\n                return delegate;\n            }\n        };\n\n        // Initialize another multimap using HashMultimap\n        ForwardingMultimap<String, Integer> multimap2 = new ForwardingMultimap<String, Integer>() {\n            private final HashMultimap<String, Integer> delegate = HashMultimap.create();\n\n            @Override\n            protected HashMultimap<String, Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        // Use multimap2 to store some values\n        multimap2.put(\"numbers\", 1);\n        multimap2.put(\"numbers\", 2);\n        multimap2.put(\"numbers\", 3);\n\n        // Iterate over multimap2 values and print them\n        Collection<Integer> numberValues = multimap2.get(\"numbers\");\n        for (Integer number : numberValues) {\n            System.out.println(\"Number: \" + number);\n        }\n\n        /* write */\n        multimap.put(\"key\", \"value\");\n\n        // Add some unrelated complex operations\n        Map<String, Collection<Integer>> mapView = multimap2.asMap();\n        for (Map.Entry<String, Collection<Integer>> entry : mapView.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Values: \" + entry.getValue());\n        }\n\n        // Perform operations on multimap to make it more complex\n        multimap.put(\"anotherKey\", \"anotherValue\");\n        multimap.put(\"key\", \"anotherValue\");\n\n        // More complex operations\n        if (multimap.containsKey(\"anotherKey\")) {\n            System.out.println(\"Multimap contains 'anotherKey'\");\n        }\n\n        /* read */\n        Collection<String> values = multimap.get(\"key\");\n        System.out.println(values);\n\n        // Additional complex operations\n        if (multimap.containsEntry(\"key\", \"value\")) {\n            System.out.println(\"'key' contains 'value'\");\n        }\n\n        // Print all keys and values from multimap\n        for (String key : multimap.keySet()) {\n            System.out.println(\"Key: \" + key + \", Values: \" + multimap.get(key));\n        }\n    }\n}"
}