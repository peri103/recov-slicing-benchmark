{
    "files": {
        "DataManager.java": "import com.google.common.collect.LinkedHashMultimap;\n\npublic class DataManager {\n    private LinkedHashMultimap<String, String> multimap = LinkedHashMultimap.create();\n\n    public void addData(String key, String value) {\n        /* write */ multimap.put(key, value);\n    }\n\n    public LinkedHashMultimap<String, String> getData() {\n        return multimap;\n    }\n}\n",
        "Course.java": "import com.google.common.collect.LinkedHashMultimap;\nimport java.util.Iterator;\n\npublic class Course {\n    private String courseName;\n    private DataManager dataManager = new DataManager();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(String studentName) {\n        dataManager.addData(courseName, studentName);\n    }\n\n    public String getFirstStudent() {\n        LinkedHashMultimap<String, String> data = dataManager.getData();\n        Iterator<String> iterator = data.get(courseName).iterator();\n        /* read */ return iterator.hasNext() ? iterator.next() : null;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Course course = new Course(\"Computer Science\");\n        course.enrollStudent(\"Alice\");\n        course.enrollStudent(\"Bob\");\n\n        // Additional logic\n        String firstStudent = course.getFirstStudent();\n        System.out.println(\"First student enrolled in \" + course.courseName + \": \" + firstStudent);\n\n        // More unrelated logic\n        Course mathCourse = new Course(\"Mathematics\");\n        mathCourse.enrollStudent(\"Charlie\");\n        System.out.println(\"First student enrolled in \" + mathCourse.courseName + \": \" + mathCourse.getFirstStudent());\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.LinkedHashMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.LinkedHashMultimap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.LinkedHashMultimap;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashMultimap<String, String> multimap = LinkedHashMultimap.create();\n        /* write */ multimap.put(\"key\", \"value\");\n        /* read */ String value = multimap.get(\"key\").iterator().next();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.LinkedHashMultimap;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashMultimap<String, String> multimap = LinkedHashMultimap.create();\n        \n        // Additional unrelated code\n        LinkedHashMultimap<Integer, String> numberMap = LinkedHashMultimap.create();\n        numberMap.put(1, \"one\");\n        numberMap.put(2, \"two\");\n        numberMap.put(3, \"three\");\n\n        for (Integer key : numberMap.keySet()) {\n            System.out.println(\"Number: \" + key + \", Word: \" + numberMap.get(key).iterator().next());\n        }\n\n        /* write */ multimap.put(\"key\", \"value\");\n\n        // More unrelated code\n        LinkedHashMultimap<String, Integer> reverseMap = LinkedHashMultimap.create();\n        reverseMap.put(\"a\", 10);\n        reverseMap.put(\"b\", 20);\n        reverseMap.put(\"c\", 30);\n\n        for (String key : reverseMap.keySet()) {\n            System.out.println(\"Letter: \" + key + \", Number: \" + reverseMap.get(key).iterator().next());\n        }\n\n        /* read */ String value = multimap.get(\"key\").iterator().next();\n        System.out.println(value);\n\n        // Final unrelated code\n        LinkedHashMultimap<String, String> animalMap = LinkedHashMultimap.create();\n        animalMap.put(\"cat\", \"meow\");\n        animalMap.put(\"dog\", \"bark\");\n        animalMap.put(\"cow\", \"moo\");\n\n        for (String animal : animalMap.keySet()) {\n            System.out.println(\"Animal: \" + animal + \", Sound: \" + animalMap.get(animal).iterator().next());\n        }\n    }\n}"
}