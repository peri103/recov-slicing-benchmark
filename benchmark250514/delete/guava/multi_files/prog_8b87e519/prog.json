{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private Course course;\n\n    public Student(String name) {\n        this.name = name;\n        this.course = new Course(\"Mathematics\");\n    }\n\n    public void enrollCourse(String courseName) {\n        this.course = new Course(courseName);\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Course {\n    private String name;\n    private ImmutableBiMap.Builder<String, Integer> gradesBuilder;\n\n    public Course(String name) {\n        this.name = name;\n        this.gradesBuilder = ImmutableBiMap.builder();\n    }\n\n    public void addGrade(String assignment, int score) {\n        /* write */ gradesBuilder.put(assignment, score);\n    }\n\n    public ImmutableBiMap<String, Integer> getGrades() {\n        return gradesBuilder.build();\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"Alice\");\n        student.enrollCourse(\"Science\");\n\n        Course course = student.getCourse();\n        course.addGrade(\"Homework 1\", 85);\n        course.addGrade(\"Project\", 90);\n\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Enrolled in: \" + course.getName());\n\n        ImmutableBiMap<String, Integer> grades = course.getGrades();\n        for (String assignment : grades.keySet()) {\n            System.out.println(\"Assignment: \" + assignment + \", Score: \" + grades.get(assignment));\n        }\n\n        /* read */ Integer score = grades.get(\"Homework 1\");\n        System.out.println(\"The score for 'Homework 1' is: \" + score);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableBiMap",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableBiMap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableBiMap.Builder<String, Integer> builder = ImmutableBiMap.builder();\n        /* write */ builder.put(\"one\", 1);\n        ImmutableBiMap<String, Integer> biMap = builder.build();\n        /* read */ Integer value = biMap.get(\"one\");\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing an ImmutableBiMap builder\n        ImmutableBiMap.Builder<String, Integer> builder = ImmutableBiMap.builder();\n        \n        // Adding an entry to the builder\n        /* write */ builder.put(\"one\", 1);\n        \n        // Creating another ImmutableMap to demonstrate complexity\n        ImmutableMap<String, String> immutableMap = ImmutableMap.of(\"A\", \"Apple\", \"B\", \"Banana\");\n\n        // Performing some operations on immutableMap\n        if (immutableMap.containsKey(\"A\")) {\n            System.out.println(\"Key 'A' is present with value: \" + immutableMap.get(\"A\"));\n        }\n\n        // Adding more entries to the builder\n        builder.put(\"two\", 2);\n        builder.put(\"three\", 3);\n        \n        // Building the ImmutableBiMap\n        ImmutableBiMap<String, Integer> biMap = builder.build();\n\n        // Performing operations on the biMap\n        for (String key : biMap.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + biMap.get(key));\n        }\n\n        // Another unrelated operation to increase complexity\n        int sum = 0;\n        for (int value : biMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values: \" + sum);\n\n        // Reading the value associated with the key \"one\"\n        /* read */ Integer value = biMap.get(\"one\");\n        System.out.println(\"The value for 'one' is: \" + value);\n\n        // More operations to further increase complexity\n        ImmutableMap<String, Integer> anotherMap = ImmutableMap.of(\"X\", 10, \"Y\", 20, \"Z\", 30);\n        int product = 1;\n        for (Integer val : anotherMap.values()) {\n            product *= val;\n        }\n        System.out.println(\"Product of anotherMap values: \" + product);\n    }\n}"
}