{
    "java_code": "import com.google.common.collect.DiscreteDomain;\nimport com.google.common.collect.Range;\n\npublic class Main {\n    public static void main(String[] args) {\n        DiscreteDomain<Integer> domain = DiscreteDomain.integers();\n        \n        // Additional code to create a range and perform operations\n        Range<Integer> range = Range.closed(1, 10);\n        boolean containsFive = range.contains(5);\n        System.out.println(\"Range contains 5: \" + containsFive);\n\n        // More operations on the range\n        Range<Integer> intersectionRange = range.intersection(Range.closed(5, 15));\n        System.out.println(\"Intersection of ranges: \" + intersectionRange);\n\n        // Using the original write method\n        /* write */ DiscreteDomain<Integer> integerDomain = DiscreteDomain.of(domain);\n\n        // Perform operations with additional range\n        Range<Integer> spanRange = range.span(Range.closed(8, 20));\n        System.out.println(\"Span of ranges: \" + spanRange);\n\n        // Using the original read method\n        /* read */ int previousValue = integerDomain.previous(5);\n        System.out.println(\"Previous value: \" + previousValue);\n\n        // Further manipulate the range\n        Range<Integer> complementRange = Range.all().difference(range);\n        System.out.println(\"Complement of range: \" + complementRange);\n\n        // Final operations to make the program more complex\n        boolean isConnected = range.isConnected(Range.closed(11, 20));\n        System.out.println(\"Is connected to range [11, 20]: \" + isConnected);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.DiscreteDomain;\n\npublic class Main {\n    public static void main(String[] args) {\n        DiscreteDomain<Integer> domain = DiscreteDomain.integers();\n        /* write */ DiscreteDomain<Integer> integerDomain = DiscreteDomain.of(domain);\n        /* read */ int previousValue = integerDomain.previous(5);\n        System.out.println(previousValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.DiscreteDomain",
        "write_method": "of",
        "read_class": "com.google.common.collect.DiscreteDomain",
        "read_method": "previous"
    }
}