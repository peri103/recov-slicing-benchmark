{
    "java_code": "import com.google.common.collect.DiscreteDomain;\nimport com.google.common.collect.Range;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        DiscreteDomain<Integer> domain = DiscreteDomain.integers();\n        Range<Integer> range = Range.closed(1, 10);\n        ArrayList<Integer> list = new ArrayList<>();\n\n        // Populate the list with values from the range using DiscreteDomain\n        for (int i = range.lowerEndpoint(); i <= range.upperEndpoint(); i++) {\n            list.add(domain.next(i));\n        }\n\n        // Perform some operations on the list\n        int sum = 0;\n        for (Integer num : list) {\n            sum += num;\n        }\n        System.out.println(\"Sum of values in the list: \" + sum);\n\n        // Use the original write-read pair\n        /* write */ Integer value = domain.of(5);\n        int multiplier = 2;\n        int result = value * multiplier;\n        System.out.println(\"Result after multiplication: \" + result);\n\n        // More operations on the list\n        list.add(result);\n        list.removeIf(num -> num % 2 == 0);\n        System.out.println(\"List after removing even numbers: \" + list);\n\n        // Use the original read method\n        /* read */ Integer nextValue = domain.next(value);\n        System.out.println(\"Next value after original write-read: \" + nextValue);\n\n        // Additional complex logic\n        int max = Integer.MIN_VALUE;\n        for (Integer num : list) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        System.out.println(\"Maximum value in the list: \" + max);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.DiscreteDomain;\n\npublic class Main {\n    public static void main(String[] args) {\n        DiscreteDomain<Integer> domain = DiscreteDomain.integers();\n        /* write */ Integer value = domain.of(5);\n        /* read */ Integer nextValue = domain.next(value);\n        System.out.println(nextValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.DiscreteDomain",
        "write_method": "of",
        "read_class": "com.google.common.collect.DiscreteDomain",
        "read_method": "next"
    }
}