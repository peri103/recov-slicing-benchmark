{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a LoadingCache with a maximum size of 100\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .maximumSize(100)\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default behavior when the key is not found\n                    }\n                });\n\n        // Insert some values into the cache\n        /* write */ cache.put(\"key1\", 1);\n        cache.put(\"key2\", 2);\n        cache.put(\"key3\", 3);\n\n        // Initialize a HashMap and populate it with some data\n        HashMap<String, String> map = new HashMap<>();\n        map.put(\"A\", \"Apple\");\n        map.put(\"B\", \"Banana\");\n        map.put(\"C\", \"Cherry\");\n\n        // Process the map data and print it\n        for (String key : map.keySet()) {\n            System.out.println(\"Processing map key: \" + key + \", value: \" + map.get(key));\n        }\n\n        // Perform some calculations\n        int sum = 0;\n        for (int i = 1; i <= 5; i++) {\n            sum += i * i;\n        }\n        System.out.println(\"Sum of squares from 1 to 5: \" + sum);\n\n        // Retrieve value from the cache\n        try {\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(\"Retrieved value from cache: \" + value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Further calculations with cache values\n        try {\n            int value2 = cache.get(\"key2\");\n            int value3 = cache.get(\"key3\");\n            int total = value + value2 + value3;\n            System.out.println(\"Total sum of cache values: \" + total);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .maximumSize(100)\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default behavior when the key is not found\n                    }\n                });\n\n        /* write */ cache.put(\"key1\", 1);\n\n        try {\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    }
}