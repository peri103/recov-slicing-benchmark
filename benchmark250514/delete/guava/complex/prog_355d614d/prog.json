{
    "java_code": "import com.google.common.collect.DiscreteDomain;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an integer domain using Guava's DiscreteDomain\n        DiscreteDomain<Integer> integerDomain = DiscreteDomain.integers();\n        int value = 5;\n        \n        // Create a domain with a specific value using the 'of' method\n        /* write */ DiscreteDomain<Integer> domainWithValue = DiscreteDomain.of(value);\n        \n        // Add some complexity with additional data structures and operations\n        List<Integer> valuesList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            valuesList.add(i);\n        }\n        \n        // Perform some manipulations on the list\n        for (int i = 0; i < valuesList.size(); i++) {\n            valuesList.set(i, valuesList.get(i) * 2);\n        }\n        \n        // Calculate the sum of the list values\n        int sum = 0;\n        for (Integer val : valuesList) {\n            sum += val;\n        }\n        \n        // Print the sum\n        System.out.println(\"Sum of doubled values: \" + sum);\n        \n        // Use the 'next' method to get the next value in the domain\n        /* read */ int nextValue = domainWithValue.next(value);\n        System.out.println(\"Next value in domain: \" + nextValue);\n        \n        // Additional operations to increase complexity\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        \n        // Concatenate strings in the list\n        StringBuilder sb = new StringBuilder();\n        for (String str : stringList) {\n            sb.append(str).append(\" \");\n        }\n        \n        // Print the concatenated string\n        System.out.println(\"Concatenated String: \" + sb.toString().trim());\n    }\n}",
    "java_code_simple": "import com.google.common.collect.DiscreteDomain;\n\npublic class Main {\n    public static void main(String[] args) {\n        DiscreteDomain<Integer> integerDomain = DiscreteDomain.integers();\n        int value = 5;\n        /* write */ DiscreteDomain<Integer> domainWithValue = DiscreteDomain.of(value);\n        /* read */ int nextValue = domainWithValue.next(value);\n        System.out.println(nextValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.DiscreteDomain",
        "write_method": "of",
        "read_class": "com.google.common.collect.DiscreteDomain",
        "read_method": "next"
    }
}