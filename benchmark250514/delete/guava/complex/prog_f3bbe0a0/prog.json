{
    "java_code": "import com.google.common.collect.LinkedHashBiMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashBiMap<String, Integer> map = LinkedHashBiMap.create();\n        Map<String, String> stringMap = new HashMap<>();\n\n        // Using the stringMap to store some values\n        stringMap.put(\"A\", \"Apple\");\n        stringMap.put(\"B\", \"Banana\");\n\n        // Performing some operations on stringMap\n        for (Map.Entry<String, String> entry : stringMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Add more entries to map\n        map.put(\"key1\", 200);\n        map.put(\"key2\", 300);\n\n        /* write */ map.put(\"key\", 100);\n\n        // Perform some unrelated operations\n        int sum = 0;\n        for (Integer value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n\n        // More unrelated operations\n        for (int i = 0; i < 5; i++) {\n            stringMap.put(\"C\" + i, \"Value\" + i);\n        }\n\n        // Print the updated stringMap\n        for (String key : stringMap.keySet()) {\n            System.out.println(\"Updated Key: \" + key + \", Value: \" + stringMap.get(key));\n        }\n\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n\n        // Further operations on map\n        map.put(\"key3\", 400);\n        map.put(\"key4\", 500);\n\n        int maxValue = Integer.MIN_VALUE;\n        for (Integer val : map.values()) {\n            if (val > maxValue) {\n                maxValue = val;\n            }\n        }\n        System.out.println(\"Max value in map: \" + maxValue);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.LinkedHashBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashBiMap<String, Integer> map = LinkedHashBiMap.create();\n        /* write */ map.put(\"key\", 100);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.LinkedHashBiMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.LinkedHashBiMap",
        "read_method": "get"
    }
}