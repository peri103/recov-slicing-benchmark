{
    "java_code": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader.InvalidCacheLoadException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the cache with a CacheLoader\n        LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, String>() {\n                public String load(String key) {\n                    return null; // Return null for keys not explicitly put\n                }\n            });\n\n        // Initialize another cache using CacheBuilder for demonstration\n        Cache<String, Integer> integerCache = CacheBuilder.newBuilder()\n            .build();\n        \n        // Use the write method to put a value in the cache\n        /* write */ cache.put(\"key\", \"value\");\n\n        // Insert some unrelated complex code using a HashMap\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Use the integerCache to store values from the map\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            integerCache.put(entry.getKey(), entry.getValue());\n        }\n\n        // Retrieve and print values from the integerCache\n        for (String key : map.keySet()) {\n            try {\n                Integer value = integerCache.get(key);\n                System.out.println(\"IntegerCache - Key: \" + key + \", Value: \" + value);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ String value = cache.get(\"key\");\n            System.out.println(\"Cache - Key: key, Value: \" + value);\n        } catch (InvalidCacheLoadException e) {\n            System.out.println(\"Value not found in cache.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Perform some additional operations on the map\n        int sum = map.values().stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of values in map: \" + sum);\n\n        // Convert map values to a string and print\n        StringBuilder mapValues = new StringBuilder();\n        for (Integer val : map.values()) {\n            mapValues.append(val).append(\" \");\n        }\n        System.out.println(\"Map values: \" + mapValues.toString().trim());\n    }\n}",
    "java_code_simple": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader.InvalidCacheLoadException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the cache with a CacheLoader\n        LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, String>() {\n                public String load(String key) {\n                    return null; // Return null for keys not explicitly put\n                }\n            });\n\n        // Use the write method to put a value in the cache\n        /* write */ cache.put(\"key\", \"value\");\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ String value = cache.get(\"key\");\n            System.out.println(value);\n        } catch (InvalidCacheLoadException e) {\n            System.out.println(\"Value not found in cache.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.CacheBuilder",
        "write_method": "build",
        "read_class": "com.google.common.cache.Cache",
        "read_method": "get"
    }
}