{
    "java_code": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CacheLoader that loads values based on keys\n        CacheLoader<String, String> loader = new CacheLoader<>() {\n            @Override\n            public String load(String key) {\n                return \"Value for \" + key;\n            }\n        };\n\n        // Build the cache using CacheBuilder and the loader\n        /* write */ LoadingCache<String, String> cache = CacheBuilder.newBuilder().build(loader);\n\n        // Put a value in the cache\n        cache.put(\"key1\", \"value1\");\n\n        // Create a HashMap to store additional data\n        Map<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"item1\", 100);\n        dataMap.put(\"item2\", 200);\n        dataMap.put(\"item3\", 300);\n\n        // Iterate over the HashMap and perform some operations\n        int total = 0;\n        for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {\n            total += entry.getValue();\n            System.out.println(\"Processing \" + entry.getKey() + \": \" + entry.getValue());\n        }\n        System.out.println(\"Total: \" + total);\n\n        try {\n            // Read the value from the cache using the key\n            /* read */ String value = cache.get(\"key1\");\n            System.out.println(\"Cache retrieved: \" + value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Create another CacheLoader and CacheBuilder for a different cache\n        CacheLoader<Integer, String> anotherLoader = new CacheLoader<>() {\n            @Override\n            public String load(Integer key) {\n                return \"Number \" + key;\n            }\n        };\n\n        // Build another cache\n        Cache<Integer, String> anotherCache = CacheBuilder.newBuilder().build(anotherLoader);\n\n        // Put values in the new cache\n        anotherCache.put(1, \"one\");\n        anotherCache.put(2, \"two\");\n        anotherCache.put(3, \"three\");\n\n        // Read from the new cache\n        try {\n            String numberValue = anotherCache.get(2);\n            System.out.println(\"Another cache retrieved: \" + numberValue);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CacheLoader that loads values based on keys\n        CacheLoader<String, String> loader = new CacheLoader<>() {\n            @Override\n            public String load(String key) {\n                return \"Value for \" + key;\n            }\n        };\n\n        // Build the cache using CacheBuilder and the loader\n        /* write */ LoadingCache<String, String> cache = CacheBuilder.newBuilder().build(loader);\n\n        // Put a value in the cache\n        cache.put(\"key1\", \"value1\");\n\n        try {\n            // Read the value from the cache using the key\n            /* read */ String value = cache.get(\"key1\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.CacheBuilder",
        "write_method": "build",
        "read_class": "com.google.common.cache.Cache",
        "read_method": "get"
    }
}