{
    "java_code": "import com.google.common.collect.DiscreteDomain;\nimport com.google.common.collect.Range;\nimport com.google.common.collect.ContiguousSet;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a DiscreteDomain for integers\n        DiscreteDomain<Integer> integerDomain = DiscreteDomain.integers();\n        \n        // Create a range of integers from 1 to 10\n        Range<Integer> range = Range.closed(1, 10);\n        \n        // Create a ContiguousSet using the range and the integer domain\n        ContiguousSet<Integer> intSet = ContiguousSet.create(range, integerDomain);\n\n        // Use the 'of' method to get a DiscreteDomain instance\n        /* write */ DiscreteDomain<Integer> domain = DiscreteDomain.of(integerDomain);\n        \n        // Create a list to hold the values from the ContiguousSet\n        List<Integer> numberList = new ArrayList<>(intSet);\n\n        // Perform some operations on the list\n        for (int i = 0; i < numberList.size(); i++) {\n            numberList.set(i, numberList.get(i) * 2);\n        }\n        \n        // Print the modified list\n        System.out.println(\"Modified List: \" + numberList);\n\n        // Find the previous value of a number using the domain\n        int numberToCheck = 5;\n        /* read */ int previousValue = domain.previous(numberToCheck);\n\n        // Print the result\n        System.out.println(\"Previous value of \" + numberToCheck + \" is: \" + previousValue);\n\n        // Additional operation: sum all elements in the list\n        int sum = 0;\n        for (int num : numberList) {\n            sum += num;\n        }\n        \n        // Print the sum\n        System.out.println(\"Sum of all elements: \" + sum);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.DiscreteDomain;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a DiscreteDomain for integers\n        DiscreteDomain<Integer> integerDomain = DiscreteDomain.integers();\n        \n        // Use the 'of' method to get a DiscreteDomain instance\n        /* write */ DiscreteDomain<Integer> domain = DiscreteDomain.of(integerDomain);\n\n        // Use the 'previous' method to get the previous integer of a given value\n        /* read */ int previousValue = domain.previous(5);\n\n        // Print the result\n        System.out.println(previousValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.DiscreteDomain",
        "write_method": "of",
        "read_class": "com.google.common.collect.DiscreteDomain",
        "read_method": "previous"
    }
}