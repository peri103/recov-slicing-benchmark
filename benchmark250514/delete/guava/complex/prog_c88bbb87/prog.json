{
    "java_code": "import com.google.common.collect.LinkedHashBiMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashBiMap<String, Integer> biMap = LinkedHashBiMap.create();\n        HashMap<String, String> stringMap = new HashMap<>();\n        HashMap<Integer, String> intMap = new HashMap<>();\n\n        // Adding some initial data to the maps\n        stringMap.put(\"A\", \"Apple\");\n        stringMap.put(\"B\", \"Banana\");\n        intMap.put(1, \"One\");\n        intMap.put(2, \"Two\");\n\n        // Performing some operations on the maps\n        for (Map.Entry<String, String> entry : stringMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        for (Map.Entry<Integer, String> entry : intMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        /* write */ biMap.put(\"key1\", 100);\n\n        // More complex operations\n        int sum = 0;\n        for (int i = 0; i < 5; i++) {\n            sum += i * 10;\n        }\n        System.out.println(\"Sum: \" + sum);\n\n        // Adding more entries to biMap\n        biMap.put(\"key2\", 200);\n        biMap.put(\"key3\", 300);\n\n        // Print all entries in biMap\n        for (Map.Entry<String, Integer> entry : biMap.entrySet()) {\n            System.out.println(\"BiMap Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        /* read */ Integer value = biMap.get(\"key1\");\n        System.out.println(value);\n\n        // Further operations on biMap\n        biMap.inverse().put(400, \"key4\");\n        System.out.println(\"Inverse BiMap Key: 400, Value: \" + biMap.inverse().get(400));\n    }\n}",
    "java_code_simple": "import com.google.common.collect.LinkedHashBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashBiMap<String, Integer> biMap = LinkedHashBiMap.create();\n        /* write */ biMap.put(\"key1\", 100);\n        /* read */ Integer value = biMap.get(\"key1\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.LinkedHashBiMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.LinkedHashBiMap",
        "read_method": "get"
    }
}