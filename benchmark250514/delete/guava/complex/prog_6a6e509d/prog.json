{
    "java_code": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<Integer> builder = ImmutableSortedMultiset.<Integer>naturalOrder();\n        \n        // Add elements to the builder\n        builder.add(1, 2); // Add element '1' with a count of '2'\n        builder.add(3, 5); // Add element '3' with a count of '5'\n        builder.add(2, 1); // Add element '2' with a count of '1'\n        \n        // Build the multiset\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        \n        // Create an ImmutableList for demonstration\n        ImmutableList<String> immutableList = ImmutableList.of(\"apple\", \"banana\", \"cherry\");\n        \n        // Print elements of the ImmutableList\n        for (String fruit : immutableList) {\n            System.out.println(fruit);\n        }\n        \n        // Perform some operations on ImmutableSortedMultiset\n        int totalDistinctElements = multiset.elementSet().size();\n        System.out.println(\"Total distinct elements: \" + totalDistinctElements);\n        \n        // Calculate the sum of all counts in the multiset\n        int totalCount = 0;\n        for (Integer element : multiset.elementSet()) {\n            totalCount += multiset.count(element);\n        }\n        System.out.println(\"Total count of all elements: \" + totalCount);\n        \n        // Retrieve the count of a specific element\n        /* read */ int count = multiset.count(1); // Get the count of element '1'\n        System.out.println(\"Count of element '1': \" + count);\n        \n        // Additional operations to increase complexity\n        ImmutableSortedMultiset.Builder<String> stringBuilder = ImmutableSortedMultiset.<String>naturalOrder();\n        stringBuilder.add(\"orange\", 3);\n        stringBuilder.add(\"kiwi\", 2);\n        ImmutableSortedMultiset<String> fruitMultiset = stringBuilder.build();\n        \n        for (String fruit : fruitMultiset.elementSet()) {\n            System.out.println(fruit + \": \" + fruitMultiset.count(fruit));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableSortedMultiset.Builder<Integer> builder = ImmutableSortedMultiset.<Integer>naturalOrder();\n        /* write */ builder.add(1, 2); // Add element '1' with a count of '2'\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        /* read */ int count = multiset.count(1); // Get the count of element '1'\n        System.out.println(count);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    }
}