{
    "files": {
        "TokenizerHandler.java": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\n\npublic class TokenizerHandler {\n    private StrTokenizer tokenizer;\n\n    public TokenizerHandler(String input) {\n        tokenizer = new StrTokenizer(input);\n    }\n\n    public void setDelimiter(char delimiter) {\n        /* write */ tokenizer.setDelimiterMatcher(StrMatcher.charMatcher(delimiter));\n    }\n\n    public StrTokenizer getTokenizer() {\n        return tokenizer;\n    }\n}",
        "TokenProcessor.java": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class TokenProcessor {\n    private StrTokenizer tokenizer;\n\n    public TokenProcessor(StrTokenizer tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n\n    public String processNextToken() {\n        /* read */ return tokenizer.nextToken();\n    }\n\n    public void processAllTokens() {\n        while (tokenizer.hasNext()) {\n            String token = tokenizer.nextToken();\n            System.out.println(\"Processed Token: \" + token);\n        }\n    }\n}",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Initialize TokenizerHandler with a sample string\n        TokenizerHandler handler = new TokenizerHandler(\"apple,banana,orange\");\n\n        // Set the delimiter to comma\n        handler.setDelimiter(',');\n\n        // Retrieve the tokenizer from handler\n        StrTokenizer tokenizer = handler.getTokenizer();\n\n        // Initialize TokenProcessor with the tokenizer\n        TokenProcessor processor = new TokenProcessor(tokenizer);\n\n        // Process the first token\n        String firstToken = processor.processNextToken();\n        System.out.println(\"First Token: \" + firstToken);\n\n        // Process remaining tokens\n        processor.processAllTokens();\n\n        // Additional unrelated computations\n        double result = Math.pow(5, 2) + Math.sqrt(5);\n        System.out.println(\"Complex Calculation Result: \" + result);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setDelimiterMatcher",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    },
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,banana,orange\");\n\n        // Set the delimiter to comma using setDelimiterMatcher\n        /* write */ tokenizer.setDelimiterMatcher(StrMatcher.commaMatcher());\n\n        // Read the first token using nextToken\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Print the token to verify the result\n        System.out.println(token);\n    }\n}",
    "java_code_complex": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,banana,orange\");\n\n        // Initialize another StrTokenizer for a different string\n        StrTokenizer anotherTokenizer = new StrTokenizer(\"dog;cat;mouse\");\n\n        // Set the delimiter to comma using setDelimiterMatcher\n        /* write */ tokenizer.setDelimiterMatcher(StrMatcher.commaMatcher());\n\n        // Set the delimiter for the second tokenizer\n        anotherTokenizer.setDelimiterMatcher(StrMatcher.charSetMatcher(';'));\n\n        // Process tokens from the second tokenizer\n        while (anotherTokenizer.hasNext()) {\n            String animalToken = anotherTokenizer.nextToken();\n            System.out.println(\"Animal Token: \" + animalToken);\n        }\n\n        // Unrelated computation to make the program more complex\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = Arrays.stream(numbers).sum();\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Read the first token from the original tokenizer using nextToken\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Print the token to verify the result\n        System.out.println(\"Fruit Token: \" + token);\n\n        // Additional processing with the original tokenizer\n        while (tokenizer.hasNext()) {\n            String fruitToken = tokenizer.nextToken();\n            System.out.println(\"Next Fruit Token: \" + fruitToken);\n        }\n\n        // Perform some mathematical operations\n        double result = Math.pow(sum, 2) + Math.sqrt(sum);\n        System.out.println(\"Complex Calculation Result: \" + result);\n    }\n}"
}