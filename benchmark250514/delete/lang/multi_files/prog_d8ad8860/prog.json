{
    "files": {
        "DateOperations.java": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\n\npublic class DateOperations {\n    private Date date;\n\n    public DateOperations(Date date) {\n        this.date = date;\n    }\n\n    public void addHours(int hours) {\n        /* write */ date = DateUtils.addHours(date, hours);\n    }\n\n    public Date getDate() {\n        return date;\n    }\n}\n",
        "DateManager.java": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\n\npublic class DateManager {\n    private DateOperations dateOperations;\n\n    public DateManager(Date date) {\n        this.dateOperations = new DateOperations(date);\n    }\n\n    public void addHoursToDate(int hours) {\n        dateOperations.addHours(hours);\n    }\n\n    public Date truncateDate() {\n        Date currentDate = dateOperations.getDate();\n        /* read */ return DateUtils.truncate(currentDate, DateUtils.HOUR_OF_DAY);\n    }\n}\n",
        "Main.java": "import java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        \n        DateManager dateManager = new DateManager(date);\n        dateManager.addHoursToDate(5);\n        \n        Date truncatedDate = dateManager.truncateDate();\n        \n        System.out.println(\"Original Date: \" + date);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.lang3.time.DateUtils",
        "write_method": "addHours",
        "read_class": "org.apache.commons.lang3.time.DateUtils",
        "read_method": "truncate"
    },
    "java_code_simple": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        \n        // Add 5 hours to the current date\n        /* write */ Date newDate = DateUtils.addHours(date, 5);\n        \n        // Truncate the date to remove minutes, seconds and milliseconds\n        /* read */ Date truncatedDate = DateUtils.truncate(newDate, DateUtils.HOUR_OF_DAY);\n        \n        System.out.println(\"Original Date: \" + date);\n        System.out.println(\"New Date after adding hours: \" + newDate);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n    }\n}",
    "java_code_complex": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\nimport java.util.Calendar;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        \n        // Add 5 hours to the current date\n        /* write */ Date newDate = DateUtils.addHours(date, 5);\n        \n        // Perform some unrelated operations\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(newDate);\n        calendar.add(Calendar.DAY_OF_MONTH, 2);\n        Date twoDaysLater = calendar.getTime();\n        \n        System.out.println(\"Date after adding two days: \" + twoDaysLater);\n        \n        // Calculate difference in hours between two dates\n        long diffInMillis = twoDaysLater.getTime() - date.getTime();\n        long diffInHours = diffInMillis / (60 * 60 * 1000);\n        \n        System.out.println(\"Difference in hours between original date and two days later: \" + diffInHours);\n        \n        // Truncate the date to remove minutes, seconds and milliseconds\n        /* read */ Date truncatedDate = DateUtils.truncate(newDate, DateUtils.HOUR_OF_DAY);\n        \n        System.out.println(\"Original Date: \" + date);\n        System.out.println(\"New Date after adding hours: \" + newDate);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n        \n        // Additional complex operations\n        calendar.setTime(truncatedDate);\n        calendar.add(Calendar.MONTH, 1);\n        Date oneMonthLater = calendar.getTime();\n        \n        System.out.println(\"Date after adding one month: \" + oneMonthLater);\n        \n        diffInMillis = oneMonthLater.getTime() - truncatedDate.getTime();\n        long diffInDays = diffInMillis / (24 * 60 * 60 * 1000);\n        \n        System.out.println(\"Difference in days between truncated date and one month later: \" + diffInDays);\n    }\n}"
}