{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\",,\", ',');\n\n        // Performing operations on ArrayList\n        ArrayList<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        // Manipulating the StrTokenizer object\n        tokenizer.setIgnoreEmptyTokens(false);\n        tokenizer.setDelimiterString(\";\");\n\n        // Performing some operations on the ArrayList\n        stringList.add(\"Apache\");\n        stringList.add(\"Commons\");\n\n        /* write */ tokenizer.setEmptyTokenAsNull(true);\n\n        // Iterating over the ArrayList and printing each element\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n\n        // Additional manipulation of the ArrayList\n        stringList.remove(\"World\");\n        stringList.add(\"Lang\");\n\n        // More operations on StrTokenizer\n        tokenizer.setTrimmerMatcher(StrTokenizer.DEFAULT_TRIMMER_MATCHER);\n        \n        // Some unrelated calculations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum: \" + sum);\n\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(\"Token: \" + token);\n\n        // Final operations on ArrayList\n        for (String str : stringList) {\n            System.out.println(\"Final List Element: \" + str);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer(\",,\", ',');\n        /* write */ tokenizer.setEmptyTokenAsNull(true);\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setEmptyTokenAsNull",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}