{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,banana,orange\");\n\n        // Create a custom StrMatcher that matches commas\n        StrMatcher matcher = StrMatcher.charMatcher(',');\n\n        // Use setTokenMatcher to set the custom matcher\n        /* write */ tokenizer.setTokenMatcher(matcher);\n\n        // Add complexity: Reverse the tokens and join them with a hyphen\n        String[] tokens = tokenizer.getTokenArray();\n        String reversedTokens = StringUtils.reverse(StringUtils.join(tokens, \"-\"));\n        System.out.println(\"Reversed Tokens: \" + reversedTokens);\n\n        // Add complexity: Check if the original string contains the word \"apple\"\n        boolean containsApple = StringUtils.containsIgnoreCase(\"apple,banana,orange\", \"apple\");\n        System.out.println(\"Contains 'apple': \" + containsApple);\n\n        // Read the first token using nextToken\n        /* read */ String token = tokenizer.nextToken();\n\n        // Output the first token\n        System.out.println(\"First Token: \" + token);\n\n        // Add complexity: Convert the first token to uppercase\n        String upperToken = StringUtils.upperCase(token);\n        System.out.println(\"Uppercase First Token: \" + upperToken);\n\n        // Add complexity: Calculate the length of the original string\n        int originalLength = StringUtils.length(\"apple,banana,orange\");\n        System.out.println(\"Original String Length: \" + originalLength);\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,banana,orange\");\n\n        // Create a custom StrMatcher that matches commas\n        StrMatcher matcher = StrMatcher.charMatcher(',');\n\n        // Use setTokenMatcher to set the custom matcher\n        /* write */ tokenizer.setTokenMatcher(matcher);\n\n        // Read the first token using nextToken\n        /* read */ String token = tokenizer.nextToken();\n\n        // Output the first token\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setTokenMatcher",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}