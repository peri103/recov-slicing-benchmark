{
    "java_code": "import org.jfree.chart.labels.StandardPieSectionLabelGenerator;\nimport java.text.NumberFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StandardPieSectionLabelGenerator\n        StandardPieSectionLabelGenerator generator = new StandardPieSectionLabelGenerator();\n        NumberFormat format = NumberFormat.getInstance();\n        \n        // Create a HashMap to store some data\n        HashMap<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"A\", 100);\n        dataMap.put(\"B\", 200);\n        dataMap.put(\"C\", 300);\n        \n        // Create an ArrayList and add some elements\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 10);\n        }\n        \n        // Perform operations on the ArrayList\n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n        \n        // Manipulate the HashMap\n        int totalValue = 0;\n        for (String key : dataMap.keySet()) {\n            totalValue += dataMap.get(key);\n        }\n        System.out.println(\"Total value from HashMap: \" + totalValue);\n        \n        // Set the number format using the generator\n        /* write */ generator.setNumberFormat(format);\n\n        // Further operations on ArrayList\n        int max = Integer.MIN_VALUE;\n        for (Integer number : numbers) {\n            if (number > max) {\n                max = number;\n            }\n        }\n        System.out.println(\"Maximum number: \" + max);\n\n        // Retrieve the number format from the generator\n        /* read */ NumberFormat retrievedFormat = generator.getNumberFormat();\n        \n        // Print the result of the comparison\n        System.out.println(retrievedFormat.equals(format)); // Should print true\n\n        // Additional complex operations\n        ArrayList<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        strings.add(\"Java\");\n        \n        StringBuilder concatenatedString = new StringBuilder();\n        for (String str : strings) {\n            concatenatedString.append(str).append(\" \");\n        }\n        System.out.println(\"Concatenated String: \" + concatenatedString.toString().trim());\n    }\n}",
    "java_code_simple": "import org.jfree.chart.labels.StandardPieSectionLabelGenerator;\nimport java.text.NumberFormat;\n\npublic class Main {\n    public static void main(String[] args) {\n        StandardPieSectionLabelGenerator generator = new StandardPieSectionLabelGenerator();\n        NumberFormat format = NumberFormat.getInstance();\n        \n        /* write */ generator.setNumberFormat(format);\n        /* read */ NumberFormat retrievedFormat = generator.getNumberFormat();\n        \n        System.out.println(retrievedFormat.equals(format)); // Should print true\n    }\n}",
    "pair": {
        "write_class": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "write_method": "setNumberFormat",
        "read_class": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
        "read_method": "getNumberFormat"
    }
}