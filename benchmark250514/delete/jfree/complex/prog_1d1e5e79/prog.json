{
    "java_code": "import org.jfree.chart.renderer.xy.XYStepAreaRenderer;\nimport org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;\nimport org.jfree.chart.renderer.xy.XYBarRenderer;\n\npublic class Main {\n    public static void main(String[] args) {\n        XYStepAreaRenderer stepAreaRenderer = new XYStepAreaRenderer();\n        XYLineAndShapeRenderer lineAndShapeRenderer = new XYLineAndShapeRenderer();\n        XYBarRenderer barRenderer = new XYBarRenderer();\n        \n        // Initialize the series index and visibility flag for step area renderer\n        int seriesIndexStepArea = 0;\n        boolean isVisibleStepArea = true;\n        \n        // Initialize the series index and visibility flag for line and shape renderer\n        int seriesIndexLineShape = 1;\n        boolean isVisibleLineShape = false;\n        \n        // Initialize the series index and visibility flag for bar renderer\n        int seriesIndexBar = 2;\n        boolean isVisibleBar = true;\n        \n        /* write */ stepAreaRenderer.setSeriesShapesVisible(seriesIndexStepArea, isVisibleStepArea);\n        \n        // Perform operations using line and shape renderer\n        lineAndShapeRenderer.setSeriesLinesVisible(seriesIndexLineShape, isVisibleLineShape);\n        boolean lineShapeVisibility = lineAndShapeRenderer.getSeriesLinesVisible(seriesIndexLineShape);\n        System.out.println(\"Line and Shape Series \" + seriesIndexLineShape + \" lines visible: \" + lineShapeVisibility);\n        \n        // Perform operations using bar renderer\n        barRenderer.setSeriesBarWidth(seriesIndexBar, 0.5);\n        double barWidth = barRenderer.getSeriesBarWidth(seriesIndexBar);\n        System.out.println(\"Bar Series \" + seriesIndexBar + \" bar width: \" + barWidth);\n        \n        // Additional logic and computations\n        int totalSeries = 3;\n        for (int i = 0; i < totalSeries; i++) {\n            System.out.println(\"Processing series index: \" + i);\n            if (i % 2 == 0) {\n                System.out.println(\"Even series index: \" + i);\n            } else {\n                System.out.println(\"Odd series index: \" + i);\n            }\n        }\n        \n        /* read */ Boolean visibilityStepArea = stepAreaRenderer.getSeriesShapesVisible(seriesIndexStepArea);\n        System.out.println(\"Step Area Series \" + seriesIndexStepArea + \" shapes visible: \" + visibilityStepArea);\n        \n        // Further unrelated logic\n        int computationResult = seriesIndexStepArea * seriesIndexLineShape + seriesIndexBar;\n        System.out.println(\"Computation result: \" + computationResult);\n    }\n}",
    "java_code_simple": "import org.jfree.chart.renderer.xy.XYStepAreaRenderer;\n\npublic class Main {\n    public static void main(String[] args) {\n        XYStepAreaRenderer renderer = new XYStepAreaRenderer();\n        \n        // Initialize the series index and visibility flag\n        int seriesIndex = 0;\n        boolean isVisible = true;\n        \n        /* write */ renderer.setSeriesShapesVisible(seriesIndex, isVisible);\n        /* read */ Boolean visibility = renderer.getSeriesShapesVisible(seriesIndex);\n        \n        System.out.println(\"Series \" + seriesIndex + \" shapes visible: \" + visibility);\n    }\n}",
    "pair": {
        "write_class": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "write_method": "setSeriesShapesVisible",
        "read_class": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
        "read_method": "getSeriesShapesVisible"
    }
}