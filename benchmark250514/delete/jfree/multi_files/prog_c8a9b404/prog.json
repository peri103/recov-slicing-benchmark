{
    "files": {
        "PlotManager.java": "import org.jfree.chart.plot.Plot;\nimport java.awt.Color;\nimport java.awt.Paint;\n\npublic class PlotManager {\n    private Plot plot = new Plot() {\n        private Paint backgroundPaint;\n\n        @Override\n        public void setBackgroundPaint(Paint paint) {\n            this.backgroundPaint = paint;\n        }\n\n        @Override\n        public Paint getBackgroundPaint() {\n            return this.backgroundPaint;\n        }\n    };\n\n    public void setPlotBackground(Color color) {\n        /* write */ plot.setBackgroundPaint(color);\n    }\n\n    public Paint getPlotBackground() {\n        return plot.getBackgroundPaint();\n    }\n}",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Course> courses;\n\n    public Student(String name) {\n        this.name = name;\n        this.courses = new ArrayList<>();\n    }\n\n    public void enrollCourse(Course course) {\n        courses.add(course);\n    }\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "Course.java": "public class Course {\n    private String courseName;\n    private int credits;\n\n    public Course(String courseName, int credits) {\n        this.courseName = courseName;\n        this.credits = credits;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public int getCredits() {\n        return credits;\n    }\n}",
        "Main.java": "import java.awt.Color;\nimport java.awt.Paint;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a PlotManager instance and set a plot background color\n        PlotManager plotManager = new PlotManager();\n        plotManager.setPlotBackground(Color.RED);\n\n        // Create Student and Course instances\n        Student student = new Student(\"John Doe\");\n        Course math = new Course(\"Mathematics\", 3);\n        Course science = new Course(\"Science\", 4);\n\n        // Enroll student in courses\n        student.enrollCourse(math);\n        student.enrollCourse(science);\n\n        // Output student details\n        System.out.println(\"Student: \" + student.getName());\n        List<Course> courses = student.getCourses();\n        for (Course course : courses) {\n            System.out.println(\"Enrolled in: \" + course.getCourseName() + \" (\" + course.getCredits() + \" credits)\");\n        }\n\n        // Retrieve and print the plot background color\n        /* read */ Paint paint = plotManager.getPlotBackground();\n        System.out.println(\"Plot background color: \" + paint);\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.plot.Plot",
        "write_method": "setBackgroundPaint",
        "read_class": "org.jfree.chart.plot.Plot",
        "read_method": "getBackgroundPaint"
    },
    "java_code_simple": "import org.jfree.chart.plot.Plot;\nimport java.awt.Color;\nimport java.awt.Paint;\n\npublic class Main {\n    public static void main(String[] args) {\n        Plot plot = new Plot() {\n            // Providing a simple implementation of the abstract Plot class\n            private Paint backgroundPaint;\n\n            @Override\n            public void setBackgroundPaint(Paint paint) {\n                this.backgroundPaint = paint;\n            }\n\n            @Override\n            public Paint getBackgroundPaint() {\n                return this.backgroundPaint;\n            }\n        };\n\n        /* write */ plot.setBackgroundPaint(Color.RED);\n        /* read */ Paint paint = plot.getBackgroundPaint();\n        \n        System.out.println(paint);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.plot.Plot;\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Plot plot = new Plot() {\n            // Providing a simple implementation of the abstract Plot class\n            private Paint backgroundPaint;\n\n            @Override\n            public void setBackgroundPaint(Paint paint) {\n                this.backgroundPaint = paint;\n            }\n\n            @Override\n            public Paint getBackgroundPaint() {\n                return this.backgroundPaint;\n            }\n        };\n\n        // Unrelated code to make the program more complex\n        Map<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"A\", 10);\n        dataMap.put(\"B\", 20);\n        dataMap.put(\"C\", 30);\n\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of values in dataMap: \" + sum);\n\n        // Another similar write-read pair\n        Plot anotherPlot = new Plot() {\n            private Paint backgroundPaint;\n\n            @Override\n            public void setBackgroundPaint(Paint paint) {\n                this.backgroundPaint = paint;\n            }\n\n            @Override\n            public Paint getBackgroundPaint() {\n                return this.backgroundPaint;\n            }\n        };\n\n        anotherPlot.setBackgroundPaint(Color.BLUE);\n        Paint anotherPaint = anotherPlot.getBackgroundPaint();\n        System.out.println(\"Another plot background paint: \" + anotherPaint);\n\n        /* write */ plot.setBackgroundPaint(Color.RED);\n\n        // More unrelated code for complexity\n        int[] numbers = {1, 2, 3, 4, 5};\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of numbers array: \" + product);\n\n        /* read */ Paint paint = plot.getBackgroundPaint();\n        \n        System.out.println(\"Original plot background paint: \" + paint);\n    }\n}"
}