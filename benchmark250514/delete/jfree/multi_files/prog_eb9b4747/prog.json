{
    "files": {
        "CustomRenderer.java": "import org.jfree.chart.renderer.Renderer;\nimport java.awt.Color;\nimport java.awt.Paint;\n\npublic class CustomRenderer implements Renderer {\n    private Paint[] seriesPaint = new Paint[1];\n\n    @Override\n    public Paint getSeriesPaint(int series) {\n        return seriesPaint[series];\n    }\n\n    @Override\n    public void setSeriesPaint(int series, Paint paint) {\n        seriesPaint[series] = paint;\n    }\n    \n    // Other methods from Renderer interface can be left unimplemented for this example\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public ArrayList<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public ArrayList<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.awt.Color;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a renderer and set series paint\n        CustomRenderer renderer = new CustomRenderer();\n        /* write */ renderer.setSeriesPaint(0, Color.RED);\n\n        // Create students and a course\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n        student1.addGrade(85);\n        student2.addGrade(90);\n\n        Course course = new Course(\"Mathematics\");\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        // Display course information\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getEnrolledStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Grades: \" + student.getGrades());\n        }\n\n        // Read the paint for series 0\n        /* read */ Paint paint = renderer.getSeriesPaint(0);\n        System.out.println(\"Paint for series 0: \" + paint);\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.renderer.Renderer",
        "write_method": "setSeriesPaint",
        "read_class": "org.jfree.chart.renderer.Renderer",
        "read_method": "getSeriesPaint"
    },
    "java_code_simple": "import org.jfree.chart.renderer.Renderer;\nimport java.awt.Color;\n\npublic class Main {\n    public static void main(String[] args) {\n        Renderer renderer = new Renderer() {\n            private Paint[] seriesPaint = new Paint[1];\n\n            @Override\n            public Paint getSeriesPaint(int series) {\n                return seriesPaint[series];\n            }\n\n            @Override\n            public void setSeriesPaint(int series, Paint paint) {\n                seriesPaint[series] = paint;\n            }\n            \n            // Other methods from Renderer interface can be left unimplemented for this example\n        };\n\n        /* write */ renderer.setSeriesPaint(0, Color.RED);\n        /* read */ Paint paint = renderer.getSeriesPaint(0);\n        System.out.println(paint);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.renderer.Renderer;\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.util.HashMap;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Renderer renderer = new Renderer() {\n            private Paint[] seriesPaint = new Paint[1];\n\n            @Override\n            public Paint getSeriesPaint(int series) {\n                return seriesPaint[series];\n            }\n\n            @Override\n            public void setSeriesPaint(int series, Paint paint) {\n                seriesPaint[series] = paint;\n            }\n            \n            // Other methods from Renderer interface can be left unimplemented for this example\n        };\n\n        HashMap<Integer, String> colorMap = new HashMap<>();\n        colorMap.put(0, \"RED\");\n        colorMap.put(1, \"GREEN\");\n        colorMap.put(2, \"BLUE\");\n\n        ArrayList<Paint> paintList = new ArrayList<>();\n        paintList.add(Color.GREEN);\n        paintList.add(Color.BLUE);\n\n        /* write */ renderer.setSeriesPaint(0, Color.RED);\n        \n        // Simulate some complex logic\n        for (int i = 0; i < paintList.size(); i++) {\n            Paint paint = paintList.get(i);\n            System.out.println(\"Paint from list: \" + paint);\n        }\n\n        // More complex logic\n        for (Integer key : colorMap.keySet()) {\n            System.out.println(\"Color for series \" + key + \": \" + colorMap.get(key));\n        }\n\n        // Simulate some more operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 numbers: \" + sum);\n\n        /* read */ Paint paint = renderer.getSeriesPaint(0);\n        System.out.println(\"Paint for series 0: \" + paint);\n\n        // Additional operations\n        ArrayList<Integer> numberList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numberList.add(i * 10);\n        }\n        for (int number : numberList) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}"
}