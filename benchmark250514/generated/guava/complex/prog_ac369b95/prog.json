{
    "java_code": "import com.google.common.collect.ImmutableTable;\nimport com.google.common.collect.HashBasedTable;\nimport com.google.common.collect.Table;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original write-read pair\n        ImmutableTable.Builder<String, String, Integer> builder = ImmutableTable.builder();\n        /* write */ builder.put(\"row1\", \"column1\", 42);\n\n        // Additional complex code using HashBasedTable\n        Table<String, String, Integer> hashTable = HashBasedTable.create();\n        hashTable.put(\"row2\", \"column2\", 100);\n        hashTable.put(\"row3\", \"column3\", 200);\n\n        // Manipulating the hashTable\n        for (Table.Cell<String, String, Integer> cell : hashTable.cellSet()) {\n            System.out.println(\"Row: \" + cell.getRowKey() + \", Column: \" + cell.getColumnKey() + \", Value: \" + cell.getValue());\n        }\n\n        // Building the original table\n        ImmutableTable<String, String, Integer> table = builder.build();\n\n        // Additional operations\n        Integer sum = 0;\n        for (Table.Cell<String, String, Integer> cell : hashTable.cellSet()) {\n            sum += cell.getValue();\n        }\n        System.out.println(\"Sum of hashTable values: \" + sum);\n\n        // Original read operation\n        /* read */ Integer value = table.get(\"row1\", \"column1\");\n        System.out.println(\"ImmutableTable value: \" + value);\n\n        // More complex operations\n        for (int i = 0; i < 3; i++) {\n            hashTable.put(\"row\" + (i + 4), \"column\" + (i + 4), i * 50);\n        }\n\n        for (Table.Cell<String, String, Integer> cell : hashTable.cellSet()) {\n            System.out.println(\"Updated Row: \" + cell.getRowKey() + \", Column: \" + cell.getColumnKey() + \", Value: \" + cell.getValue());\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableTable;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableTable.Builder<String, String, Integer> builder = ImmutableTable.builder();\n        /* write */ builder.put(\"row1\", \"column1\", 42);\n        ImmutableTable<String, String, Integer> table = builder.build();\n        /* read */ Integer value = table.get(\"row1\", \"column1\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableTable",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableTable",
        "read_method": "get"
    }
}