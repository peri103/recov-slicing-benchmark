{
    "java_code": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.Multimap;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Multimap<String, Integer> multimap = HashMultimap.create();\n        ForwardingMultimap<String, Integer> forwardingMultimap = new ForwardingMultimap<String, Integer>() {\n            @Override\n            protected Multimap<String, Integer> delegate() {\n                return multimap;\n            }\n        };\n\n        // Additional unrelated data structures\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            arrayList.add(i * 10);\n        }\n\n        // Additional unrelated operations\n        int sum = 0;\n        for (int num : arrayList) {\n            sum += num;\n        }\n        System.out.println(\"Sum of elements in arrayList: \" + sum);\n\n        // Original write operation\n        /* write */ forwardingMultimap.put(\"key\", 42);\n\n        // More operations on the unrelated data structures\n        for (int i = 0; i < arrayList.size(); i++) {\n            arrayList.set(i, arrayList.get(i) + 5);\n        }\n\n        System.out.println(\"Modified arrayList: \" + arrayList);\n\n        // Original read operation\n        /* read */ Integer value = forwardingMultimap.get(\"key\").iterator().next();\n        System.out.println(\"Value retrieved from forwardingMultimap: \" + value);\n\n        // Further operations after the read\n        arrayList.add(value);\n        System.out.println(\"Final arrayList after adding value: \" + arrayList);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.Multimap;\n\npublic class Main {\n    public static void main(String[] args) {\n        Multimap<String, Integer> multimap = HashMultimap.create();\n        ForwardingMultimap<String, Integer> forwardingMultimap = new ForwardingMultimap<String, Integer>() {\n            @Override\n            protected Multimap<String, Integer> delegate() {\n                return multimap;\n            }\n        };\n\n        /* write */ forwardingMultimap.put(\"key\", 42);\n        /* read */ Integer value = forwardingMultimap.get(\"key\").iterator().next();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ForwardingMultimap",
        "read_method": "get"
    }
}