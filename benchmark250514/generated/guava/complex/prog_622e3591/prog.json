{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the LoadingCache\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n            .maximumSize(100)\n            .build(new CacheLoader<String, Integer>() {\n                public Integer load(String key) {\n                    return null; // Default behavior for cache miss\n                }\n            });\n\n        // Initialize another cache with a different configuration\n        LoadingCache<String, String> stringCache = CacheBuilder.newBuilder()\n            .maximumSize(50)\n            .build(new CacheLoader<String, String>() {\n                public String load(String key) {\n                    return \"default\"; // Default behavior for cache miss\n                }\n            });\n\n        // Use the write method to put a value in the cache\n        /* write */ cache.put(\"key1\", 100);\n\n        // Use the second cache to store some values\n        stringCache.put(\"keyA\", \"Hello\");\n        stringCache.put(\"keyB\", \"World\");\n\n        // Initialize a HashMap to store additional data\n        HashMap<String, Double> dataMap = new HashMap<>();\n        dataMap.put(\"value1\", 1.1);\n        dataMap.put(\"value2\", 2.2);\n\n        // Perform operations on the HashMap\n        double sum = 0;\n        for (Double value : dataMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in dataMap: \" + sum);\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(\"Value from cache: \" + value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Retrieve values from the second cache\n        try {\n            String greeting = stringCache.get(\"keyA\");\n            String target = stringCache.get(\"keyB\");\n            System.out.println(greeting + \" \" + target);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Perform additional operations\n        for (int i = 0; i < 5; i++) {\n            dataMap.put(\"value\" + (i + 3), i * 1.5);\n        }\n        for (String key : dataMap.keySet()) {\n            System.out.println(key + \": \" + dataMap.get(key));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the LoadingCache\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n            .maximumSize(100)\n            .build(new CacheLoader<String, Integer>() {\n                public Integer load(String key) {\n                    return null; // Default behavior for cache miss\n                }\n            });\n\n        // Use the write method to put a value in the cache\n        /* write */ cache.put(\"key1\", 100);\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    }
}