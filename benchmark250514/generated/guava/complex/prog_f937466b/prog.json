{
    "java_code": "import com.google.common.collect.ImmutableSortedSet;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.TreeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing a HashSet\n        Set<Integer> hashSet = new HashSet<>();\n        hashSet.add(5);\n        hashSet.add(3);\n        hashSet.add(7);\n\n        // Initializing a TreeSet\n        TreeSet<Integer> treeSet = new TreeSet<>(hashSet);\n        treeSet.add(2);\n        treeSet.add(10);\n\n        // Creating an ImmutableSortedSet using a builder\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.<Integer>naturalOrder();\n        /* write */ builder.add(1);\n        \n        // Adding more elements using the builder\n        builder.add(4).add(6).add(8);\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n\n        // Simulate some operations\n        int sum = 0;\n        for (Integer num : treeSet) {\n            sum += num;\n        }\n        System.out.println(\"Sum of TreeSet: \" + sum);\n\n        // Some other operations on HashSet\n        if (hashSet.contains(5)) {\n            hashSet.remove(5);\n        }\n        System.out.println(\"HashSet after removal: \" + hashSet);\n\n        // Check if the sortedSet contains the element\n        /* read */ boolean containsValue = sortedSet.contains(1);\n        System.out.println(\"ImmutableSortedSet contains 1: \" + containsValue);\n\n        // More operations on TreeSet\n        for (Integer num : sortedSet) {\n            if (!treeSet.contains(num)) {\n                treeSet.add(num);\n            }\n        }\n        System.out.println(\"TreeSet after merging: \" + treeSet);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.<Integer>naturalOrder();\n        /* write */ builder.add(1);\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n        /* read */ boolean containsValue = sortedSet.contains(1);\n        System.out.println(containsValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedSet",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedSet",
        "read_method": "contains"
    }
}