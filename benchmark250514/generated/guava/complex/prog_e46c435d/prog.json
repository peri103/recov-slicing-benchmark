{
    "java_code": "import com.google.common.collect.MinMaxPriorityQueue;\nimport java.util.PriorityQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        MinMaxPriorityQueue<Integer> queue = MinMaxPriorityQueue.create();\n        PriorityQueue<Integer> secondaryQueue = new PriorityQueue<>();\n        \n        // Insert some elements into the secondary queue\n        for (int i = 0; i < 5; i++) {\n            secondaryQueue.offer(i * 2);\n        }\n        \n        // Perform some operations on secondary queue\n        while (!secondaryQueue.isEmpty()) {\n            int element = secondaryQueue.poll();\n            System.out.println(\"Processing element from secondary queue: \" + element);\n        }\n        \n        // Insert an element into the MinMaxPriorityQueue\n        /* write */ queue.offer(10);\n        \n        // Perform some unrelated calculations\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 10 is: \" + sum);\n        \n        // Insert additional elements into the MinMaxPriorityQueue\n        for (int i = 20; i <= 50; i += 10) {\n            queue.offer(i);\n        }\n        \n        // Retrieve the element from the MinMaxPriorityQueue\n        /* read */ Integer value = queue.peek();\n        System.out.println(\"Peeked value from MinMaxPriorityQueue: \" + value);\n        \n        // Process remaining elements in the MinMaxPriorityQueue\n        while (!queue.isEmpty()) {\n            int element = queue.poll();\n            System.out.println(\"Processing element from MinMaxPriorityQueue: \" + element);\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.MinMaxPriorityQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        MinMaxPriorityQueue<Integer> queue = MinMaxPriorityQueue.create();\n        /* write */ queue.offer(10);\n        /* read */ Integer value = queue.peek();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.MinMaxPriorityQueue",
        "write_method": "offer",
        "read_class": "com.google.common.collect.MinMaxPriorityQueue",
        "read_method": "peek"
    }
}