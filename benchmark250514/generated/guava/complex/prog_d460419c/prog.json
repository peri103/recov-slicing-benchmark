{
    "java_code": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.Multimap;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a concrete implementation of ForwardingMultimap\n        Multimap<String, String> multimap = ArrayListMultimap.create();\n        ForwardingMultimap<String, String> forwardingMultimap = new ForwardingMultimap<String, String>() {\n            @Override\n            protected Multimap<String, String> delegate() {\n                return multimap;\n            }\n        };\n\n        // Additional unrelated data structures and operations\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"A\", 1);\n        map.put(\"B\", 2);\n        map.put(\"C\", 3);\n\n        int sum = 0;\n        for (Integer value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n\n        // Another ForwardingMultimap example\n        Multimap<Integer, String> anotherMultimap = ArrayListMultimap.create();\n        ForwardingMultimap<Integer, String> anotherForwardingMultimap = new ForwardingMultimap<Integer, String>() {\n            @Override\n            protected Multimap<Integer, String> delegate() {\n                return anotherMultimap;\n            }\n        };\n\n        anotherForwardingMultimap.put(1, \"One\");\n        anotherForwardingMultimap.put(2, \"Two\");\n        anotherForwardingMultimap.put(3, \"Three\");\n\n        List<String> list = (List<String>) anotherForwardingMultimap.get(2);\n        System.out.println(\"Value for key 2: \" + list.get(0));\n\n        /* write */ forwardingMultimap.put(\"key\", \"value\");\n\n        // Perform some unrelated complex calculations\n        int a = 5, b = 10, c = 15;\n        int result = complexCalculation(a, b, c);\n        System.out.println(\"Complex calculation result: \" + result);\n\n        // More operations with the map\n        map.put(\"D\", 4);\n        map.remove(\"A\");\n\n        /* read */ String value = forwardingMultimap.get(\"key\").iterator().next();\n        System.out.println(value);\n\n        // Additional operations on anotherMultimap\n        anotherForwardingMultimap.remove(3, \"Three\");\n        anotherForwardingMultimap.put(4, \"Four\");\n        System.out.println(\"Size of anotherMultimap: \" + anotherForwardingMultimap.size());\n    }\n\n    private static int complexCalculation(int x, int y, int z) {\n        return (x * y) + (y * z) - (z * x);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.Multimap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a concrete implementation of ForwardingMultimap\n        Multimap<String, String> multimap = ArrayListMultimap.create();\n        ForwardingMultimap<String, String> forwardingMultimap = new ForwardingMultimap<String, String>() {\n            @Override\n            protected Multimap<String, String> delegate() {\n                return multimap;\n            }\n        };\n\n        /* write */ forwardingMultimap.put(\"key\", \"value\");\n        /* read */ String value = forwardingMultimap.get(\"key\").iterator().next();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ForwardingMultimap",
        "read_method": "get"
    }
}