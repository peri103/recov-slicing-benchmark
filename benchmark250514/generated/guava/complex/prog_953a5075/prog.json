{
    "java_code": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.Multimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ForwardingMultimap with an ArrayListMultimap\n        ForwardingMultimap<String, Integer> multimap = new ForwardingMultimap<String, Integer>() {\n            private final Multimap<String, Integer> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected Multimap<String, Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        // Use the write method to add a value\n        /* write */ multimap.put(\"key\", 42);\n\n        // Additional unrelated code\n        Map<String, List<Integer>> map = new HashMap<>();\n        map.put(\"numbers\", List.of(1, 2, 3, 4, 5));\n        \n        int sum = 0;\n        for (int num : map.get(\"numbers\")) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // More complex operations\n        Multimap<String, String> stringMultimap = ArrayListMultimap.create();\n        stringMultimap.put(\"fruit\", \"apple\");\n        stringMultimap.put(\"fruit\", \"banana\");\n        stringMultimap.put(\"fruit\", \"cherry\");\n\n        for (String fruit : stringMultimap.get(\"fruit\")) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n\n        // Use the read method to retrieve the value\n        /* read */ Integer value = multimap.get(\"key\").iterator().next();\n\n        // Print the value\n        System.out.println(\"Read value: \" + value);\n\n        // Further complexity with calculations\n        int product = 1;\n        for (int num : map.get(\"numbers\")) {\n            product *= num;\n        }\n        System.out.println(\"Product of numbers: \" + product);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.Multimap;\nimport com.google.common.collect.ArrayListMultimap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ForwardingMultimap with an ArrayListMultimap\n        ForwardingMultimap<String, Integer> multimap = new ForwardingMultimap<String, Integer>() {\n            private final Multimap<String, Integer> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected Multimap<String, Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        // Use the write method to add a value\n        /* write */ multimap.put(\"key\", 42);\n\n        // Use the read method to retrieve the value\n        /* read */ Integer value = multimap.get(\"key\").iterator().next();\n\n        // Print the value\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ForwardingMultimap",
        "read_method": "get"
    }
}