{
    "java_code": "import com.google.common.collect.ImmutableSortedMap;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the builder for ImmutableSortedMap\n        ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n        \n        // Add some unrelated code using HashMap\n        Map<String, String> hashMap = new HashMap<>();\n        hashMap.put(\"name\", \"Alice\");\n        hashMap.put(\"occupation\", \"Engineer\");\n        \n        // Add more unrelated code using ImmutableList\n        ImmutableList<String> immutableList = ImmutableList.of(\"Apple\", \"Banana\", \"Cherry\");\n        for (String fruit : immutableList) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n        \n        // Perform some operations on the HashMap\n        String occupation = hashMap.get(\"occupation\");\n        System.out.println(\"Occupation: \" + occupation);\n        \n        // Insert the original write operation\n        /* write */ builder.put(\"key1\", 100);\n        \n        // Build the ImmutableSortedMap\n        ImmutableSortedMap<String, Integer> map = builder.build();\n        \n        // Add more unrelated operations before the read\n        for (String name : hashMap.keySet()) {\n            System.out.println(\"Key: \" + name + \", Value: \" + hashMap.get(name));\n        }\n        \n        // Perform a computation using the ImmutableList\n        int totalLength = 0;\n        for (String fruit : immutableList) {\n            totalLength += fruit.length();\n        }\n        System.out.println(\"Total length of fruits: \" + totalLength);\n        \n        // Insert the original read operation\n        /* read */ Integer value = map.get(\"key1\");\n        \n        // Print the result from the original read operation\n        System.out.println(\"Value from map: \" + value);\n        \n        // Add additional operations to make the program more complex\n        int sum = 0;\n        for (int i = 1; i <= 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 5: \" + sum);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n        \n        /* write */ builder.put(\"key1\", 100);\n        \n        ImmutableSortedMap<String, Integer> map = builder.build();\n        \n        /* read */ Integer value = map.get(\"key1\");\n        \n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableSortedMap",
        "read_method": "get"
    }
}