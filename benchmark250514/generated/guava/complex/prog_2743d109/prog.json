{
    "java_code": "import com.google.common.collect.ForwardingSet;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an anonymous subclass of ForwardingSet to override the delegate() method\n        ForwardingSet<Integer> forwardingSet = new ForwardingSet<Integer>() {\n            private final Set<Integer> delegate = new HashSet<>();\n\n            @Override\n            protected Set<Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        // Additional code using a similar API pair\n        ForwardingSet<String> stringSet = new ForwardingSet<String>() {\n            private final Set<String> delegate = new HashSet<>();\n\n            @Override\n            protected Set<String> delegate() {\n                return delegate;\n            }\n        };\n\n        stringSet.add(\"Hello\");\n        stringSet.add(\"World\");\n        boolean containsHello = stringSet.contains(\"Hello\");\n        System.out.println(\"String set contains 'Hello': \" + containsHello);\n\n        // Complex operations before the original write-read pair\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n            stringSet.add(\"Number: \" + i);\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        /* write */ forwardingSet.add(42);\n\n        // More complex operations\n        Set<Integer> anotherSet = new HashSet<>();\n        for (int i = 0; i < 5; i++) {\n            anotherSet.add(i * 10);\n        }\n        for (Integer num : anotherSet) {\n            forwardingSet.add(num);\n        }\n\n        // Operations on anotherSet\n        int product = 1;\n        for (Integer num : anotherSet) {\n            product *= num;\n        }\n        System.out.println(\"Product of numbers in anotherSet: \" + product);\n\n        /* read */ boolean containsValue = forwardingSet.contains(42);\n        System.out.println(\"Forwarding set contains 42: \" + containsValue);\n\n        // Further operations after the original read\n        Set<Integer> yetAnotherSet = new HashSet<>();\n        for (int i = 0; i < 3; i++) {\n            yetAnotherSet.add(i * 5);\n        }\n        for (Integer num : yetAnotherSet) {\n            forwardingSet.add(num);\n        }\n\n        // Print all elements in forwardingSet\n        System.out.println(\"Elements in forwardingSet:\");\n        for (Integer num : forwardingSet) {\n            System.out.println(num);\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingSet;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an anonymous subclass of ForwardingSet to override the delegate() method\n        ForwardingSet<Integer> forwardingSet = new ForwardingSet<Integer>() {\n            private final Set<Integer> delegate = new HashSet<>();\n\n            @Override\n            protected Set<Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */ forwardingSet.add(42);\n        /* read */ boolean containsValue = forwardingSet.contains(42);\n        System.out.println(containsValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingSet",
        "write_method": "add",
        "read_class": "com.google.common.collect.ForwardingSet",
        "read_method": "contains"
    }
}