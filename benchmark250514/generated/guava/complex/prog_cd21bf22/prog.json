{
    "java_code": "import com.google.common.collect.ConcurrentHashMultiset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMultiset<String> multiset = ConcurrentHashMultiset.create();\n        Map<String, Integer> fruitBasket = new HashMap<>();\n        \n        fruitBasket.put(\"apple\", 3);\n        fruitBasket.put(\"banana\", 2);\n        fruitBasket.put(\"orange\", 5);\n        \n        for (Map.Entry<String, Integer> entry : fruitBasket.entrySet()) {\n            for (int i = 0; i < entry.getValue(); i++) {\n                multiset.add(entry.getKey()); // adding fruits multiple times\n            }\n        }\n        \n        int totalFruits = 0;\n        for (String fruit : fruitBasket.keySet()) {\n            totalFruits += multiset.count(fruit); // counting all fruits\n        }\n        \n        /* write */ multiset.add(\"apple\");\n        \n        System.out.println(\"Total fruits in the basket: \" + totalFruits);\n        \n        int appleCount = multiset.count(\"apple\"); // counting apples separately\n        System.out.println(\"Apples in the basket: \" + appleCount);\n        \n        /* read */ int appleSingleCount = multiset.count(\"apple\");\n        System.out.println(\"Single apple count: \" + appleSingleCount);\n        \n        // Additional complex operations\n        Map<String, Integer> fruitSummary = new HashMap<>();\n        \n        for (String fruit : fruitBasket.keySet()) {\n            fruitSummary.put(fruit, multiset.count(fruit));\n        }\n        \n        System.out.println(\"Fruit summary:\");\n        for (Map.Entry<String, Integer> entry : fruitSummary.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ConcurrentHashMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMultiset<String> multiset = ConcurrentHashMultiset.create();\n        /* write */ multiset.add(\"apple\");\n        /* read */ int count = multiset.count(\"apple\");\n        System.out.println(count);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ConcurrentHashMultiset",
        "write_method": "add",
        "read_class": "com.google.common.collect.ConcurrentHashMultiset",
        "read_method": "count"
    }
}