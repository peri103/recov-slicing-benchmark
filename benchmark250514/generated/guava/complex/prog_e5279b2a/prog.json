{
    "java_code": "import com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing another ImmutableMap for demonstration purposes\n        ImmutableMap<String, String> stringMap = ImmutableMap.of(\"hello\", \"world\", \"foo\", \"bar\");\n\n        // Print all entries in the stringMap\n        for (String key : stringMap.keySet()) {\n            System.out.println(\"StringMap Key: \" + key + \", Value: \" + stringMap.get(key));\n        }\n\n        // Initializing an ImmutableBiMap with a single entry\n        /* write */ ImmutableBiMap<String, Integer> map = ImmutableBiMap.of(\"key\", 42);\n\n        // Performing some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum from 0 to 9: \" + sum);\n\n        // Using another ImmutableBiMap for demonstration\n        ImmutableBiMap<String, Integer> anotherMap = ImmutableBiMap.of(\"a\", 1, \"b\", 2, \"c\", 3);\n        int anotherValue = anotherMap.get(\"b\");\n        System.out.println(\"AnotherMap Value for 'b': \" + anotherValue);\n\n        // More unrelated operations\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product from 1 to 5: \" + product);\n\n        // Reading the value from the original map\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(\"Original Map Value for 'key': \" + value);\n\n        // Additional unrelated operations\n        int[] numbers = {5, 10, 15, 20};\n        int total = 0;\n        for (int num : numbers) {\n            total += num;\n        }\n        System.out.println(\"Total of numbers array: \" + total);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        /* write */ ImmutableBiMap<String, Integer> map = ImmutableBiMap.of(\"key\", 42);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableBiMap",
        "write_method": "of",
        "read_class": "com.google.common.collect.ImmutableBiMap",
        "read_method": "get"
    }
}