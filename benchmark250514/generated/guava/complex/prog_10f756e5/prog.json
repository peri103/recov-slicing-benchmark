{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.Cache;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, Integer>() {\n                public Integer load(String key) {\n                    return null; // Default behavior, not used in this example\n                }\n            });\n\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"alpha\", 100);\n        map.put(\"beta\", 200);\n\n        /* write */ cache.put(\"key1\", 42);\n\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n\n        try {\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(\"Value from cache: \" + value);\n        } catch (Exception e) {\n            System.err.println(\"Error reading from cache: \" + e.getMessage());\n        }\n\n        map.put(\"gamma\", 300);\n        int product = 1;\n        for (Integer val : map.values()) {\n            product *= val;\n        }\n        System.out.println(\"Product of values in map: \" + product);\n\n        int maxValue = Integer.MIN_VALUE;\n        for (Integer val : map.values()) {\n            if (val > maxValue) {\n                maxValue = val;\n            }\n        }\n        System.out.println(\"Max value in map: \" + maxValue);\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.Cache;\n\npublic class Main {\n    public static void main(String[] args) {\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, Integer>() {\n                public Integer load(String key) {\n                    return null; // Default behavior, not used in this example\n                }\n            });\n\n        /* write */ cache.put(\"key1\", 42);\n        try {\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(value);\n        } catch (Exception e) {\n            System.err.println(\"Error reading from cache: \" + e.getMessage());\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    }
}