{
    "java_code": "import com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedSet\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n\n        // Use the builder to add elements to the set\n        /* write */ builder.add(1).add(2).add(3);\n\n        // Build the ImmutableSortedSet\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n\n        // Create a HashMap to store some key-value pairs\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Retrieve a value from the HashMap\n        Integer mapValue = map.get(\"two\");\n        System.out.println(\"Value from map: \" + mapValue);\n\n        // Create an ImmutableList and perform operations on it\n        ImmutableList<String> stringList = ImmutableList.of(\"apple\", \"banana\", \"cherry\");\n        System.out.println(\"First element of stringList: \" + stringList.get(0));\n\n        // Use the contains method to check if an element is in the set\n        /* read */ boolean contains = sortedSet.contains(2);\n\n        // Print the result\n        System.out.println(\"Set contains 2: \" + contains);\n\n        // More complex operations\n        for (String fruit : stringList) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n\n        // Perform some calculations\n        int sum = 0;\n        for (Integer num : sortedSet) {\n            sum += num;\n        }\n        System.out.println(\"Sum of elements in sortedSet: \" + sum);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedSet\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n\n        // Use the builder to add elements to the set\n        /* write */ builder.add(1).add(2).add(3);\n\n        // Build the ImmutableSortedSet\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n\n        // Use the contains method to check if an element is in the set\n        /* read */ boolean contains = sortedSet.contains(2);\n\n        // Print the result\n        System.out.println(contains);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedSet",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedSet",
        "read_method": "contains"
    }
}