{
    "java_code": "import com.google.common.collect.ImmutableMultimap;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // ImmutableMultimap builder for the original write-read pair\n        ImmutableMultimap.Builder<String, String> builder = ImmutableMultimap.builder();\n        \n        /* write */ builder.put(\"key\", \"value\");\n        \n        // Unrelated code to make the program more complex\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        \n        ImmutableList.Builder<Integer> listBuilder = ImmutableList.builder();\n        for (int i = 0; i < 5; i++) {\n            listBuilder.add(i * 10);\n        }\n        ImmutableList<Integer> immutableList = listBuilder.build();\n        \n        for (Integer num : immutableList) {\n            System.out.println(\"Number: \" + num);\n        }\n        \n        // Build the ImmutableMultimap\n        ImmutableMultimap<String, String> multimap = builder.build();\n        \n        // Another unrelated code block\n        int sum = 0;\n        for (Integer value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n        \n        /* read */ String value = multimap.get(\"key\").iterator().next();\n        \n        System.out.println(\"Read from multimap: \" + value);\n        \n        // Additional complexity with map operations\n        map.put(\"three\", 3);\n        map.remove(\"one\");\n        \n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableMultimap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Since ImmutableMultimap is immutable, we need to use a builder to add elements\n        ImmutableMultimap.Builder<String, String> builder = ImmutableMultimap.builder();\n        \n        /* write */ builder.put(\"key\", \"value\");\n        \n        // Build the ImmutableMultimap\n        ImmutableMultimap<String, String> multimap = builder.build();\n        \n        /* read */ String value = multimap.get(\"key\").iterator().next();\n        \n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableMultimap",
        "read_method": "get"
    }
}