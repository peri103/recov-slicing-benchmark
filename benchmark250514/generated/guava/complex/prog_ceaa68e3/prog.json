{
    "java_code": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<String> builder = ImmutableSortedMultiset.naturalOrder();\n\n        // Add elements to the builder\n        builder.add(\"apple\");\n        builder.add(\"banana\");\n        builder.add(\"apple\");\n\n        // Create an ImmutableList\n        ImmutableList<String> fruits = ImmutableList.of(\"orange\", \"grape\", \"apple\");\n\n        // Create a Map to count occurrences of each fruit\n        Map<String, Integer> fruitCountMap = new HashMap<>();\n\n        // Iterate over the list and count occurrences\n        for (String fruit : fruits) {\n            fruitCountMap.put(fruit, fruitCountMap.getOrDefault(fruit, 0) + 1);\n        }\n\n        // Print the fruit counts\n        for (Map.Entry<String, Integer> entry : fruitCountMap.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n\n        // Build the ImmutableSortedMultiset\n        /* write */ ImmutableSortedMultiset<String> multiset = builder.build();\n\n        // Perform some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Check if a certain fruit is in the list\n        boolean hasApple = fruits.contains(\"apple\");\n        System.out.println(\"Does the list contain apple? \" + hasApple);\n\n        // Read the count of a specific element\n        /* read */ int count = multiset.count(\"apple\");\n\n        // Print the count\n        System.out.println(\"Count of 'apple' in multiset: \" + count);\n\n        // Perform additional operations with the map\n        fruitCountMap.put(\"banana\", fruitCountMap.getOrDefault(\"banana\", 0) + 2);\n        fruitCountMap.remove(\"orange\");\n\n        // Print the updated fruit counts\n        for (Map.Entry<String, Integer> entry : fruitCountMap.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<String> builder = ImmutableSortedMultiset.naturalOrder();\n\n        // Add elements to the builder\n        builder.add(\"apple\");\n        builder.add(\"banana\");\n        builder.add(\"apple\");\n\n        // Build the ImmutableSortedMultiset\n        /* write */ ImmutableSortedMultiset<String> multiset = builder.build();\n\n        // Read the count of a specific element\n        /* read */ int count = multiset.count(\"apple\");\n\n        // Print the count\n        System.out.println(count);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    }
}