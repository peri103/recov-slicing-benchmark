{
    "java_code": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ImmutableSortedMultiset using the 'of' method\n        /* write */ ImmutableSortedMultiset<String> multiset = ImmutableSortedMultiset.of(\"apple\", \"banana\", \"apple\");\n\n        // Initialize an ImmutableList using the 'of' method\n        ImmutableList<String> list = ImmutableList.of(\"orange\", \"grape\", \"apple\");\n\n        // Create a HashMap to store fruit counts\n        Map<String, Integer> fruitCount = new HashMap<>();\n\n        // Populate the HashMap with counts from the ImmutableList\n        for (String fruit : list) {\n            fruitCount.put(fruit, fruitCount.getOrDefault(fruit, 0) + 1);\n        }\n\n        // Perform some operations with the HashMap\n        for (Map.Entry<String, Integer> entry : fruitCount.entrySet()) {\n            System.out.println(\"Fruit: \" + entry.getKey() + \", Count: \" + entry.getValue());\n        }\n\n        // Calculate the total number of fruits in the ImmutableSortedMultiset\n        int totalFruits = 0;\n        for (String fruit : multiset.elementSet()) {\n            totalFruits += multiset.count(fruit);\n        }\n        System.out.println(\"Total fruits in multiset: \" + totalFruits);\n\n        // Read the count of a specific element using the 'count' method\n        /* read */ int count = multiset.count(\"apple\");\n\n        // Output the count of 'apple'\n        System.out.println(\"Count of 'apple': \" + count);\n\n        // Further operations with ImmutableList\n        for (String fruit : list) {\n            System.out.println(\"ImmutableList fruit: \" + fruit);\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ImmutableSortedMultiset using the 'of' method\n        /* write */ ImmutableSortedMultiset<String> multiset = ImmutableSortedMultiset.of(\"apple\", \"banana\", \"apple\");\n\n        // Read the count of a specific element using the 'count' method\n        /* read */ int count = multiset.count(\"apple\");\n\n        // Output the count\n        System.out.println(count);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "of",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    }
}