{
    "java_code": "import com.google.common.collect.ForwardingMultiset;\nimport com.google.common.collect.HashMultiset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        ForwardingMultiset<String> multiset = new ForwardingMultiset<String>() {\n            private final HashMultiset<String> delegate = HashMultiset.create();\n\n            @Override\n            protected HashMultiset<String> delegate() {\n                return delegate;\n            }\n        };\n\n        Map<String, Integer> fruitCountMap = new HashMap<>();\n        fruitCountMap.put(\"apple\", 3);\n        fruitCountMap.put(\"banana\", 5);\n\n        for (String fruit : fruitCountMap.keySet()) {\n            multiset.add(fruit, fruitCountMap.get(fruit));\n        }\n\n        int totalCount = 0;\n        for (String fruit : fruitCountMap.keySet()) {\n            totalCount += multiset.count(fruit);\n        }\n        System.out.println(\"Total fruit count: \" + totalCount);\n\n        /* write */ multiset.add(\"apple\");\n        System.out.println(\"Added one more apple.\");\n\n        int distinctFruits = multiset.elementSet().size();\n        System.out.println(\"Distinct fruit types: \" + distinctFruits);\n\n        for (String fruit : multiset.elementSet()) {\n            System.out.println(fruit + \": \" + multiset.count(fruit));\n        }\n\n        /* read */ int appleCount = multiset.count(\"apple\");\n        System.out.println(\"Apple count: \" + appleCount);\n\n        int bananaCount = multiset.count(\"banana\");\n        System.out.println(\"Banana count: \" + bananaCount);\n\n        int orangeCount = multiset.count(\"orange\");\n        System.out.println(\"Orange count (should be zero): \" + orangeCount);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingMultiset;\nimport com.google.common.collect.HashMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        ForwardingMultiset<String> multiset = new ForwardingMultiset<String>() {\n            private final HashMultiset<String> delegate = HashMultiset.create();\n\n            @Override\n            protected HashMultiset<String> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */ multiset.add(\"apple\");\n        /* read */ int count = multiset.count(\"apple\");\n        System.out.println(count);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMultiset",
        "write_method": "add",
        "read_class": "com.google.common.collect.ForwardingMultiset",
        "read_method": "count"
    }
}