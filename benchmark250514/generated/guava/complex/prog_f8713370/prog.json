{
    "java_code": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n        \n        // Add elements to the builder\n        /* write */ builder.add(1).add(1).add(2);\n        \n        // Create a map to store some data\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"first\", 10);\n        map.put(\"second\", 20);\n        \n        // Print all elements in the map\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n        \n        // Create an ImmutableList\n        ImmutableList<String> immutableList = ImmutableList.of(\"apple\", \"banana\", \"cherry\");\n        \n        // Print elements in the ImmutableList\n        for (String fruit : immutableList) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n        \n        // Build the ImmutableSortedMultiset\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        \n        // Read the count of an element\n        /* read */ int countOfOne = multiset.count(1);\n        \n        // Print the count\n        System.out.println(\"Count of 1: \" + countOfOne);\n        \n        // Add more elements to the map\n        map.put(\"third\", 30);\n        map.put(\"fourth\", 40);\n        \n        // Print updated map\n        for (String key : map.keySet()) {\n            System.out.println(\"Updated Key: \" + key + \", Value: \" + map.get(key));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n        \n        // Add elements to the builder\n        /* write */ builder.add(1).add(1).add(2);\n        \n        // Build the ImmutableSortedMultiset\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        \n        // Read the count of an element\n        /* read */ int countOfOne = multiset.count(1);\n        \n        // Print the count\n        System.out.println(countOfOne);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    }
}