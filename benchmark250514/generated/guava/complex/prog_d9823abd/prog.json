{
    "java_code": "import com.google.common.collect.ForwardingList;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ForwardingList<Integer> list = new ForwardingList<Integer>() {\n            private final List<Integer> delegate = new ArrayList<>();\n\n            @Override\n            protected List<Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        List<Integer> anotherList = new ArrayList<>();\n        \n        // Adding elements to anotherList\n        for (int i = 0; i < 5; i++) {\n            anotherList.add(i * 10);\n        }\n\n        // Adding elements to linkedList\n        for (int i = 5; i < 10; i++) {\n            linkedList.add(i * 10);\n        }\n\n        // Processing anotherList\n        for (int i = 0; i < anotherList.size(); i++) {\n            System.out.println(\"AnotherList element: \" + anotherList.get(i));\n        }\n\n        /* write */ list.add(42);\n\n        // Processing linkedList\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList element: \" + linkedList.get(i));\n        }\n\n        // Some additional logic\n        int sum = 0;\n        for (int num : anotherList) {\n            sum += num;\n        }\n        System.out.println(\"Sum of anotherList: \" + sum);\n\n        /* read */ int value = list.get(0);\n        System.out.println(\"Value from ForwardingList: \" + value);\n\n        // Further processing\n        int product = 1;\n        for (int num : linkedList) {\n            product *= num == 0 ? 1 : num; // Avoid multiplying by zero\n        }\n        System.out.println(\"Product of linkedList: \" + product);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingList;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        ForwardingList<Integer> list = new ForwardingList<Integer>() {\n            private final List<Integer> delegate = new ArrayList<>();\n\n            @Override\n            protected List<Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */ list.add(42);\n        /* read */ int value = list.get(0);\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingList",
        "write_method": "add",
        "read_class": "com.google.common.collect.ForwardingList",
        "read_method": "get"
    }
}