{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LoadingCache with a simple CacheLoader\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return -1; // Default value if the key is not present\n                    }\n                });\n\n        // Create another LoadingCache for demonstration\n        LoadingCache<String, String> stringCache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, String>() {\n                    public String load(String key) {\n                        return \"default\"; // Default value if the key is not present\n                    }\n                });\n\n        // Use the write method to put a value in the cache\n        /* write */ cache.put(\"key1\", 100);\n\n        // Use the write method on the second cache\n        stringCache.put(\"greeting\", \"Hello, World!\");\n\n        // Create a HashMap for additional complexity\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n\n        // Perform operations on the HashMap\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(\"Read from cache: \" + value);\n\n            // Read from the second cache\n            String greeting = stringCache.get(\"greeting\");\n            System.out.println(\"Greeting: \" + greeting);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Further operations for complexity\n        map.put(\"three\", 3);\n        int sum = 0;\n        for (Integer val : map.values()) {\n            sum += val;\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LoadingCache with a simple CacheLoader\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return -1; // Default value if the key is not present\n                    }\n                });\n\n        // Use the write method to put a value in the cache\n        /* write */ cache.put(\"key1\", 100);\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    }
}