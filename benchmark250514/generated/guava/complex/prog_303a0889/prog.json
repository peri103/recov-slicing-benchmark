{
    "java_code": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\nimport com.google.common.collect.RangeMap;\nimport com.google.common.collect.TreeRangeMap;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original ImmutableRangeMap usage\n        ImmutableRangeMap.Builder<Integer, String> builder = new ImmutableRangeMap.Builder<>();\n        /* write */ builder.put(Range.closed(1, 10), \"Value1\");\n        \n        // Additional code to make the program more complex\n        RangeMap<Integer, String> rangeMap2 = TreeRangeMap.create();\n        rangeMap2.put(Range.closed(11, 20), \"Value2\");\n        \n        Map<Integer, String> map = new HashMap<>();\n        map.put(21, \"Value3\");\n        map.put(22, \"Value4\");\n        \n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            rangeMap2.put(Range.singleton(entry.getKey()), entry.getValue());\n        }\n        \n        // Build the original ImmutableRangeMap\n        ImmutableRangeMap<Integer, String> rangeMap = builder.build();\n        \n        // Perform operations on rangeMap2\n        String valueFromRangeMap2 = rangeMap2.get(15);\n        System.out.println(\"Value from rangeMap2: \" + valueFromRangeMap2);\n        \n        // More complex operations\n        int sum = 0;\n        for (int i = 1; i <= 22; i++) {\n            if (rangeMap.get(i) != null) {\n                sum += i;\n            }\n        }\n        \n        System.out.println(\"Sum of keys with values: \" + sum);\n        \n        // Original read operation\n        /* read */ String value = rangeMap.get(5);\n        System.out.println(\"Original value from rangeMap: \" + value);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableRangeMap.Builder<Integer, String> builder = new ImmutableRangeMap.Builder<>();\n        /* write */ builder.put(Range.closed(1, 10), \"Value1\");\n        ImmutableRangeMap<Integer, String> rangeMap = builder.build();\n        /* read */ String value = rangeMap.get(5);\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableRangeMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableRangeMap",
        "read_method": "get"
    }
}