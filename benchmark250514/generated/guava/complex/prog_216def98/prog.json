{
    "java_code": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n        /* write */ builder.put(String.class, \"Hello, World!\");\n        \n        // Additional complex operations\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"One\", 1);\n        map1.put(\"Two\", 2);\n        map1.put(\"Three\", 3);\n\n        Set<String> keys = map1.keySet();\n        for (String key : keys) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map1.get(key));\n        }\n\n        int sum = 0;\n        for (int value : map1.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values: \" + sum);\n\n        ImmutableClassToInstanceMap<Object> map = builder.build();\n        \n        // More unrelated operations\n        Map<Class<?>, Object> map2 = new HashMap<>();\n        map2.put(Integer.class, 42);\n        map2.put(Double.class, 3.14);\n        \n        for (Map.Entry<Class<?>, Object> entry : map2.entrySet()) {\n            System.out.println(\"Class: \" + entry.getKey().getSimpleName() + \", Value: \" + entry.getValue());\n        }\n        \n        /* read */ String value = map.getInstance(String.class);\n        System.out.println(value);\n\n        // Final unrelated operations\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Factorial of 5: \" + product);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n        /* write */ builder.put(String.class, \"Hello, World!\");\n        ImmutableClassToInstanceMap<Object> map = builder.build();\n        /* read */ String value = map.getInstance(String.class);\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "read_method": "getInstance"
    }
}