{
    "java_code": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableClassToInstanceMap\n        Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n        \n        // Create a sample class and instance\n        Class<String> sampleClass = String.class;\n        String sampleInstance = \"Hello, World!\";\n        \n        /* write */\n        builder.put(sampleClass, sampleInstance);\n        \n        // Create a HashMap and populate it with some values\n        Map<String, Integer> hashMap = new HashMap<>();\n        hashMap.put(\"One\", 1);\n        hashMap.put(\"Two\", 2);\n        hashMap.put(\"Three\", 3);\n        \n        // Perform some operations on the HashMap\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : hashMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of HashMap values: \" + sum);\n        \n        // Build the ImmutableClassToInstanceMap\n        ImmutableClassToInstanceMap<Object> map = builder.build();\n        \n        // Create another ImmutableClassToInstanceMap with different data\n        Builder<Object> anotherBuilder = ImmutableClassToInstanceMap.builder();\n        Class<Integer> anotherClass = Integer.class;\n        Integer anotherInstance = 42;\n        anotherBuilder.put(anotherClass, anotherInstance);\n        ImmutableClassToInstanceMap<Object> anotherMap = anotherBuilder.build();\n        \n        // Perform operations on the second map\n        Integer anotherValue = anotherMap.getInstance(anotherClass);\n        System.out.println(\"Another value: \" + anotherValue);\n        \n        /* read */\n        String value = map.getInstance(sampleClass);\n        \n        // Output the read value\n        System.out.println(value);\n        \n        // Additional complex operations\n        Map<String, String> stringMap = new HashMap<>();\n        stringMap.put(\"Key1\", \"Value1\");\n        stringMap.put(\"Key2\", \"Value2\");\n        stringMap.put(\"Key3\", \"Value3\");\n        \n        for (String key : stringMap.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + stringMap.get(key));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableClassToInstanceMap.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableClassToInstanceMap\n        Builder<Object> builder = ImmutableClassToInstanceMap.builder();\n        \n        // Create a sample class and instance\n        Class<String> sampleClass = String.class;\n        String sampleInstance = \"Hello, World!\";\n        \n        /* write */\n        builder.put(sampleClass, sampleInstance);\n        \n        // Build the ImmutableClassToInstanceMap\n        ImmutableClassToInstanceMap<Object> map = builder.build();\n        \n        /* read */\n        String value = map.getInstance(sampleClass);\n        \n        // Output the read value\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "read_method": "getInstance"
    }
}