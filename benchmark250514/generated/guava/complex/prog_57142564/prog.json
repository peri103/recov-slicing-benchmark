{
    "java_code": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n        \n        /* write */ builder.add(1); // Add an element to the builder\n        \n        // Introducing a HashMap for additional complexity\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 100);\n        map.put(\"key2\", 200);\n        \n        // Perform operations on the map\n        int valueFromMap = map.get(\"key1\");\n        System.out.println(\"Value from map: \" + valueFromMap);\n        \n        // Introducing an ImmutableList for additional complexity\n        ImmutableList<String> list = ImmutableList.of(\"A\", \"B\", \"C\");\n        for (String s : list) {\n            System.out.println(\"List element: \" + s);\n        }\n        \n        // Build the ImmutableSortedMultiset\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        \n        // Perform operations on the multiset\n        int sum = 0;\n        for (Integer num : multiset) {\n            sum += num;\n        }\n        System.out.println(\"Sum of elements in multiset: \" + sum);\n        \n        /* read */ int count = multiset.count(1); // Read the count of the element\n        \n        System.out.println(\"Count of '1' in multiset: \" + count); // Output the count\n        \n        // Additional operations to increase complexity\n        for (int i = 0; i < 5; i++) {\n            map.put(\"key\" + (i + 3), i * 50);\n        }\n        \n        for (String key : map.keySet()) {\n            System.out.println(\"Map key: \" + key + \", value: \" + map.get(key));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedMultiset\n        ImmutableSortedMultiset.Builder<Integer> builder = ImmutableSortedMultiset.naturalOrder();\n        \n        /* write */ builder.add(1); // Add an element to the builder\n        \n        // Build the ImmutableSortedMultiset\n        ImmutableSortedMultiset<Integer> multiset = builder.build();\n        \n        /* read */ int count = multiset.count(1); // Read the count of the element\n        \n        System.out.println(count); // Output the count\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "add",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    }
}