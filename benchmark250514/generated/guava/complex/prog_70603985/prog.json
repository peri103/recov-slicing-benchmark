{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.Cache;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the LoadingCache with a simple CacheLoader\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, Integer>() {\n                public Integer load(String key) {\n                    return null; // Default behavior for missing keys\n                }\n            });\n\n        // Initialize a second cache for demonstration\n        LoadingCache<String, String> stringCache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, String>() {\n                public String load(String key) {\n                    return \"default\"; // Default behavior for missing keys\n                }\n            });\n\n        // Initialize a HashMap for additional complexity\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Write to the cache\n        /* write */ cache.put(\"key\", 42);\n\n        // Perform operations on the second cache\n        stringCache.put(\"hello\", \"world\");\n        String greeting = stringCache.getUnchecked(\"hello\");\n        System.out.println(\"Greeting: \" + greeting);\n\n        // Perform operations on the map\n        if (map.containsKey(\"two\")) {\n            int valueFromMap = map.get(\"two\");\n            System.out.println(\"Value from map: \" + valueFromMap);\n        }\n\n        // Complex logic before reading from the cache\n        int sum = 0;\n        for (int val : map.values()) {\n            sum += val;\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n\n        // Read from the cache\n        try {\n            /* read */ int value = cache.get(\"key\");\n            System.out.println(\"Value from cache: \" + value);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Additional operations after the read\n        map.put(\"four\", 4);\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.Cache;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the LoadingCache with a simple CacheLoader\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, Integer>() {\n                public Integer load(String key) {\n                    return null; // Default behavior for missing keys\n                }\n            });\n\n        // Write to the cache\n        /* write */ cache.put(\"key\", 42);\n\n        // Read from the cache\n        try {\n            /* read */ int value = cache.get(\"key\");\n            System.out.println(value);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    }
}