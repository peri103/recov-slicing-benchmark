{
    "java_code": "import com.google.common.collect.ForwardingSortedSet;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        SortedSet<Integer> baseSet = new TreeSet<>();\n        ForwardingSortedSet<Integer> forwardingSet = new ForwardingSortedSet<Integer>() {\n            @Override\n            protected SortedSet<Integer> delegate() {\n                return baseSet;\n            }\n        };\n\n        // Additional code to make the program more complex\n        SortedSet<Integer> anotherSet = new TreeSet<>();\n        anotherSet.add(100);\n        anotherSet.add(200);\n        anotherSet.add(300);\n        \n        // Add elements from anotherSet to forwardingSet\n        for (Integer num : anotherSet) {\n            forwardingSet.add(num);\n        }\n\n        // Perform some operations on forwardingSet\n        int sum = 0;\n        for (Integer num : forwardingSet) {\n            sum += num;\n        }\n        System.out.println(\"Sum of elements in forwardingSet: \" + sum);\n\n        /* write */ forwardingSet.add(42);\n\n        // Perform some more operations on forwardingSet\n        int max = 0;\n        for (Integer num : forwardingSet) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        System.out.println(\"Max element in forwardingSet: \" + max);\n\n        /* read */ boolean containsValue = forwardingSet.contains(42);\n        System.out.println(\"Does forwardingSet contain 42? \" + containsValue);\n\n        // Additional complexity: find the smallest element\n        int min = Integer.MAX_VALUE;\n        for (Integer num : forwardingSet) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        System.out.println(\"Min element in forwardingSet: \" + min);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingSortedSet;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        SortedSet<Integer> baseSet = new TreeSet<>();\n        ForwardingSortedSet<Integer> forwardingSet = new ForwardingSortedSet<Integer>() {\n            @Override\n            protected SortedSet<Integer> delegate() {\n                return baseSet;\n            }\n        };\n\n        /* write */ forwardingSet.add(42);\n        /* read */ boolean containsValue = forwardingSet.contains(42);\n        System.out.println(containsValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingSortedSet",
        "write_method": "add",
        "read_class": "com.google.common.collect.ForwardingSortedSet",
        "read_method": "contains"
    }
}