{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.Cache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LoadingCache with a simple CacheLoader\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default behavior if key is not present\n                    }\n                });\n\n        // Create a HashMap for additional complexity\n        Map<String, String> map = new HashMap<>();\n        map.put(\"one\", \"apple\");\n        map.put(\"two\", \"banana\");\n        map.put(\"three\", \"cherry\");\n\n        // Iterate over the map and print entries\n        for (Map.Entry<String, String> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n\n        // Perform some calculations\n        int sum = 0;\n        for (int i = 1; i <= 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 5 natural numbers: \" + sum);\n\n        /* write */ cache.put(\"key1\", 100);\n\n        // Another cache for complexity\n        LoadingCache<String, String> stringCache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, String>() {\n                    public String load(String key) {\n                        return \"default\"; // Default behavior if key is not present\n                    }\n                });\n\n        stringCache.put(\"greet\", \"Hello\");\n        stringCache.put(\"farewell\", \"Goodbye\");\n\n        try {\n            String greeting = stringCache.get(\"greet\");\n            System.out.println(greeting);\n\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(value);\n            \n            String farewell = stringCache.get(\"farewell\");\n            System.out.println(farewell);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // More calculations\n        int product = 1;\n        for (int i = 1; i <= 3; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of first 3 natural numbers: \" + product);\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.Cache;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LoadingCache with a simple CacheLoader\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default behavior if key is not present\n                    }\n                });\n\n        /* write */ cache.put(\"key1\", 100);\n\n        try {\n            /* read */ int value = cache.get(\"key1\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    }
}