{
    "java_code": "import com.google.common.collect.ImmutableTable;\nimport com.google.common.collect.ImmutableTable.Builder;\nimport com.google.common.collect.HashBasedTable;\nimport com.google.common.collect.Table;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<String, String, Integer> builder = new ImmutableTable.Builder<String, String, Integer>();\n        Table<String, String, Integer> hashTable = HashBasedTable.create();\n        \n        // Adding multiple entries to hashTable\n        hashTable.put(\"row2\", \"column2\", 100);\n        hashTable.put(\"row3\", \"column3\", 200);\n        \n        /* write */ builder.put(\"row1\", \"column1\", 42);\n        \n        // Some unrelated operations\n        int sum = 0;\n        for (Table.Cell<String, String, Integer> cell : hashTable.cellSet()) {\n            sum += cell.getValue();\n        }\n        \n        ImmutableTable<String, String, Integer> table = builder.build();\n        \n        // More operations\n        for (String row : hashTable.rowKeySet()) {\n            for (String column : hashTable.columnKeySet()) {\n                Integer value = hashTable.get(row, column);\n                if (value != null) {\n                    System.out.println(\"Value at \" + row + \", \" + column + \": \" + value);\n                }\n            }\n        }\n        \n        /* read */ Integer value = table.get(\"row1\", \"column1\");\n        System.out.println(value);\n        \n        // Additional complex operations\n        int product = 1;\n        for (Integer val : hashTable.values()) {\n            product *= val;\n        }\n        \n        System.out.println(\"Sum of hashTable values: \" + sum);\n        System.out.println(\"Product of hashTable values: \" + product);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableTable;\nimport com.google.common.collect.ImmutableTable.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<String, String, Integer> builder = new ImmutableTable.Builder<String, String, Integer>();\n        /* write */ builder.put(\"row1\", \"column1\", 42);\n        ImmutableTable<String, String, Integer> table = builder.build();\n        /* read */ Integer value = table.get(\"row1\", \"column1\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableTable",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableTable",
        "read_method": "get"
    }
}