{
    "java_code": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableSortedMultiset.Builder;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<String> builder = ImmutableSortedMultiset.naturalOrder();\n        HashMap<String, Integer> fruitCountMap = new HashMap<>();\n        \n        /* write */ builder.add(\"apple\");\n        \n        ImmutableSortedMultiset<String> multiset = builder.build();\n        \n        ImmutableList<String> fruitList = ImmutableList.of(\"banana\", \"orange\", \"apple\", \"grape\");\n        for (String fruit : fruitList) {\n            fruitCountMap.put(fruit, multiset.count(fruit));\n        }\n        \n        int totalFruits = 0;\n        for (String fruit : fruitCountMap.keySet()) {\n            totalFruits += fruitCountMap.get(fruit);\n        }\n        \n        System.out.println(\"Total fruit count: \" + totalFruits);\n        \n        // Additional logic to demonstrate complexity\n        if (fruitCountMap.containsKey(\"apple\")) {\n            System.out.println(\"Apples are available.\");\n        } else {\n            System.out.println(\"Apples are not available.\");\n        }\n        \n        /* read */ int count = multiset.count(\"apple\");\n        System.out.println(\"Count of apples: \" + count);\n        \n        for (String fruit : fruitList) {\n            if (fruitCountMap.get(fruit) > 0) {\n                System.out.println(fruit + \" is available.\");\n            } else {\n                System.out.println(fruit + \" is not available.\");\n            }\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedMultiset;\nimport com.google.common.collect.ImmutableSortedMultiset.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<String> builder = ImmutableSortedMultiset.naturalOrder();\n        /* write */ builder.add(\"apple\");\n        ImmutableSortedMultiset<String> multiset = builder.build();\n        /* read */ int count = multiset.count(\"apple\");\n        System.out.println(count);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedMultiset",
        "write_method": "add",
        "read_class": "com.google.common.collect.ImmutableSortedMultiset",
        "read_method": "count"
    }
}