{
    "java_code": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader.InvalidCacheLoadException;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a cache using CacheBuilder\n        Cache<String, Integer> cache = CacheBuilder.newBuilder()\n                .maximumSize(100)\n                .build(); // /* write */\n\n        // Prepopulate the cache with a value\n        String key = \"exampleKey\";\n        Integer valueToWrite = 42;\n        cache.put(key, valueToWrite);\n\n        // Unrelated code to make the program more complex\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        map.put(\"key3\", \"value3\");\n\n        for (Map.Entry<String, String> entry : map.entrySet()) {\n            System.out.println(\"Map Key: \" + entry.getKey() + \", Map Value: \" + entry.getValue());\n        }\n\n        // More complex operations\n        LoadingCache<String, String> loadingCache = CacheBuilder.newBuilder()\n                .maximumSize(50)\n                .build(new CacheLoader<String, String>() {\n                    public String load(String key) {\n                        return \"Loaded \" + key;\n                    }\n                });\n\n        // Access the loading cache\n        try {\n            String loadedValue = loadingCache.get(\"newKey\");\n            System.out.println(\"Loaded Value: \" + loadedValue);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Read the value back from the cache\n        Integer valueRead = null;\n        try {\n            valueRead = cache.get(key, () -> null); // /* read */\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Output the value read from the cache\n        System.out.println(valueRead);\n        \n        // Further unrelated operations\n        Map<Integer, String> numberMap = new HashMap<>();\n        for (int i = 0; i < 5; i++) {\n            numberMap.put(i, \"Number: \" + i);\n        }\n        \n        for (Integer num : numberMap.keySet()) {\n            System.out.println(\"Number Key: \" + num + \", Number Value: \" + numberMap.get(num));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader.InvalidCacheLoadException;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a cache using CacheBuilder\n        Cache<String, Integer> cache = CacheBuilder.newBuilder()\n                .maximumSize(100)\n                .build(); // /* write */\n\n        // Prepopulate the cache with a value\n        String key = \"exampleKey\";\n        Integer valueToWrite = 42;\n        cache.put(key, valueToWrite);\n\n        // Read the value back from the cache\n        Integer valueRead = null;\n        try {\n            valueRead = cache.get(key, () -> null); // /* read */\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Output the value read from the cache\n        System.out.println(valueRead);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.CacheBuilder",
        "write_method": "build",
        "read_class": "com.google.common.cache.Cache",
        "read_method": "get"
    }
}