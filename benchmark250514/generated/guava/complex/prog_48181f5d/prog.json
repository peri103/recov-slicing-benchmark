{
    "java_code": "import com.google.common.collect.HashBiMap;\nimport com.google.common.collect.BiMap;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashBiMap<String, Integer> map = HashBiMap.create();\n        BiMap<Integer, String> inverseMap = map.inverse();\n        List<String> keys = new ArrayList<>();\n        List<Integer> values = new ArrayList<>();\n\n        // Add some initial values to the map\n        map.put(\"initKey1\", 100);\n        map.put(\"initKey2\", 200);\n        \n        // Add keys and values to the lists\n        keys.add(\"key1\");\n        keys.add(\"key2\");\n        values.add(10);\n        values.add(20);\n\n        // Add elements to the map using lists\n        for (int i = 0; i < keys.size(); i++) {\n            map.put(keys.get(i), values.get(i));\n        }\n\n        // Perform some operations on the inverse map\n        if (inverseMap.containsKey(10)) {\n            System.out.println(\"Inverse map contains key 10: \" + inverseMap.get(10));\n        }\n\n        // Add a new key-value pair to the map\n        /* write */ map.put(\"key\", 42);\n\n        // Simulate some complex logic before reading the value\n        int sum = 0;\n        for (int value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of all values in the map: \" + sum);\n\n        // Read the value associated with the key\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n\n        // Further operations on the map\n        map.put(\"finalKey\", 300);\n        System.out.println(\"Final map size: \" + map.size());\n    }\n}",
    "java_code_simple": "import com.google.common.collect.HashBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashBiMap<String, Integer> map = HashBiMap.create();\n        /* write */ map.put(\"key\", 42);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.HashBiMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.HashBiMap",
        "read_method": "get"
    }
}