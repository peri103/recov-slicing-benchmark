{
    "java_code": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Cache<String, Integer> cache = CacheBuilder.newBuilder().build();\n        \n        // Initialize a HashMap for additional complexity\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"alpha\", 10);\n        map.put(\"beta\", 20);\n        \n        // Perform operations on the HashMap\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            sum += entry.getValue();\n        }\n        \n        // Use the Cache to store a value\n        /* write */ cache.put(\"key\", 42);\n        \n        // Add more operations after the write\n        map.put(\"gamma\", sum);\n        map.put(\"delta\", cache.getIfPresent(\"key\"));\n\n        // Perform operations on the map\n        for (String key : map.keySet()) {\n            System.out.println(\"Map key: \" + key + \", value: \" + map.get(key));\n        }\n\n        // Retrieve the value from the Cache\n        /* read */ Integer value = cache.getIfPresent(\"key\");\n        System.out.println(\"Cache value: \" + value);\n\n        // Further manipulate the map\n        map.put(\"epsilon\", value != null ? value + 10 : 0);\n        \n        // Final operations and output\n        int finalSum = 0;\n        for (Integer val : map.values()) {\n            finalSum += val;\n        }\n        \n        System.out.println(\"Final sum of map values: \" + finalSum);\n    }\n}",
    "java_code_simple": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Cache<String, Integer> cache = CacheBuilder.newBuilder().build();\n        /* write */ cache.put(\"key\", 42);\n        /* read */ Integer value = cache.getIfPresent(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.Cache",
        "write_method": "put",
        "read_class": "com.google.common.cache.Cache",
        "read_method": "getIfPresent"
    }
}