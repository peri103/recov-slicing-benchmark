{
    "java_code": "import com.google.common.collect.ForwardingSortedSet;\nimport java.util.TreeSet;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original ForwardingSortedSet usage\n        ForwardingSortedSet<Integer> set = new ForwardingSortedSet<Integer>() {\n            private final TreeSet<Integer> delegate = new TreeSet<>();\n\n            @Override\n            protected TreeSet<Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */ set.add(42);\n\n        // Additional complexity with ArrayList\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"Hello\");\n        list.add(\"World\");\n        for (String str : list) {\n            System.out.println(str);\n        }\n\n        // Additional complexity with HashMap\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"Key1\", 100);\n        map.put(\"Key2\", 200);\n        for (String key : map.keySet()) {\n            System.out.println(\"Value for \" + key + \": \" + map.get(key));\n        }\n\n        // Perform some operations before reading\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        /* read */ boolean containsValue = set.contains(42);\n        System.out.println(\"Set contains 42: \" + containsValue);\n\n        // Additional operations\n        for (int i = 0; i < 5; i++) {\n            set.add(i);\n        }\n        for (Integer num : set) {\n            System.out.println(\"Set element: \" + num);\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingSortedSet;\nimport java.util.TreeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        ForwardingSortedSet<Integer> set = new ForwardingSortedSet<Integer>() {\n            private final TreeSet<Integer> delegate = new TreeSet<>();\n\n            @Override\n            protected TreeSet<Integer> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */ set.add(42);\n        /* read */ boolean containsValue = set.contains(42);\n        System.out.println(containsValue);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingSortedSet",
        "write_method": "add",
        "read_class": "com.google.common.collect.ForwardingSortedSet",
        "read_method": "contains"
    }
}