{
    "java_code": "import com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableBiMap\n        ImmutableBiMap.Builder<String, Integer> builder = ImmutableBiMap.builder();\n        \n        // Write to the builder\n        /* write */ builder.put(\"one\", 1);\n        \n        // Create an ImmutableList to store some values\n        ImmutableList.Builder<String> listBuilder = ImmutableList.builder();\n        listBuilder.add(\"apple\");\n        listBuilder.add(\"banana\");\n        listBuilder.add(\"cherry\");\n        \n        // Build the ImmutableBiMap\n        ImmutableBiMap<String, Integer> biMap = builder.build();\n        \n        // Perform some operations with the ImmutableList\n        ImmutableList<String> fruitList = listBuilder.build();\n        for (String fruit : fruitList) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n        \n        // Perform a calculation\n        int sum = 0;\n        for (int i = 0; i < 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 4: \" + sum);\n        \n        // Read from the ImmutableBiMap\n        /* read */ Integer value = biMap.get(\"one\");\n        \n        // Output the read value\n        System.out.println(\"Value from biMap: \" + value);\n        \n        // More unrelated code\n        for (int i = 0; i < fruitList.size(); i++) {\n            System.out.println(\"Index \" + i + \": \" + fruitList.get(i));\n        }\n        \n        // Another calculation\n        int product = 1;\n        for (int i = 1; i <= 3; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers from 1 to 3: \" + product);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableBiMap\n        ImmutableBiMap.Builder<String, Integer> builder = ImmutableBiMap.builder();\n        \n        // Write to the builder\n        /* write */ builder.put(\"one\", 1);\n        \n        // Build the ImmutableBiMap\n        ImmutableBiMap<String, Integer> biMap = builder.build();\n        \n        // Read from the ImmutableBiMap\n        /* read */ Integer value = biMap.get(\"one\");\n        \n        // Output the read value\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableBiMap",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableBiMap",
        "read_method": "get"
    }
}