{
    "java_code": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Cache<String, Integer> cache = CacheBuilder.newBuilder().build();\n        \n        // Additional unrelated code to increase complexity\n        Map<String, String> map = new HashMap<>();\n        map.put(\"A\", \"Apple\");\n        map.put(\"B\", \"Banana\");\n        map.put(\"C\", \"Cherry\");\n        \n        // Perform some operations on the map\n        for (String key : map.keySet()) {\n            System.out.println(\"Fruit: \" + map.get(key));\n        }\n        \n        // Add another cache example\n        Cache<String, String> stringCache = CacheBuilder.newBuilder().build();\n        stringCache.put(\"greeting\", \"Hello, World!\");\n        \n        // Use the additional cache\n        String greeting = stringCache.getIfPresent(\"greeting\");\n        System.out.println(greeting);\n        \n        // Original write operation\n        /* write */ cache.put(\"key\", 42);\n        \n        // More unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum: \" + sum);\n        \n        // Original read operation\n        /* read */ Integer value = cache.getIfPresent(\"key\");\n        \n        System.out.println(value);\n        \n        // Further unrelated operations\n        Cache<Integer, String> numberCache = CacheBuilder.newBuilder().build();\n        numberCache.put(1, \"One\");\n        numberCache.put(2, \"Two\");\n        \n        for (int i = 1; i <= 2; i++) {\n            System.out.println(\"Number: \" + numberCache.getIfPresent(i));\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Cache<String, Integer> cache = CacheBuilder.newBuilder().build();\n        \n        /* write */ cache.put(\"key\", 42);\n        \n        /* read */ Integer value = cache.getIfPresent(\"key\");\n        \n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.Cache",
        "write_method": "put",
        "read_class": "com.google.common.cache.Cache",
        "read_method": "get"
    }
}