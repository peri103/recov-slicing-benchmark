{
    "java_code": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader.InvalidCacheLoadException;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the cache\n        LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, String>() {\n                @Override\n                public String load(String key) {\n                    return null; // Default behavior for missing keys\n                }\n            });\n\n        // Initialize another data structure\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Write to the cache\n        /* write */ cache.put(\"key\", \"value\");\n\n        // Perform some operations on the map\n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n\n        // Add more data to the map\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n\n        // Perform another operation on the map\n        int product = 1;\n        for (Integer value : map.values()) {\n            product *= value;\n        }\n        System.out.println(\"Product of map values: \" + product);\n\n        try {\n            // Read from the cache\n            /* read */ String value = cache.get(\"key\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        } catch (InvalidCacheLoadException e) {\n            System.out.println(\"Key not found in cache.\");\n        }\n\n        // Additional operations\n        int max = Integer.MIN_VALUE;\n        for (Integer value : map.values()) {\n            if (value > max) {\n                max = value;\n            }\n        }\n        System.out.println(\"Max value in map: \" + max);\n    }\n}",
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.CacheLoader.InvalidCacheLoadException;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the cache\n        LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n            .build(new CacheLoader<String, String>() {\n                @Override\n                public String load(String key) {\n                    return null; // Default behavior for missing keys\n                }\n            });\n\n        // Write to the cache\n        /* write */ cache.put(\"key\", \"value\");\n\n        try {\n            // Read from the cache\n            /* read */ String value = cache.get(\"key\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        } catch (InvalidCacheLoadException e) {\n            System.out.println(\"Key not found in cache.\");\n        }\n    }\n}",
    "pair": {
        "write_class": "com.google.common.cache.CacheBuilder",
        "write_method": "build",
        "read_class": "com.google.common.cache.Cache",
        "read_method": "get"
    }
}