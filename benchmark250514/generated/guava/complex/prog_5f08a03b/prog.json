{
    "java_code": "import com.google.common.collect.MinMaxPriorityQueue;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        MinMaxPriorityQueue<Integer> queue = MinMaxPriorityQueue.create();\n        /* write */ queue.add(42);\n\n        // Additional data structures for complexity\n        Map<String, Integer> map = new HashMap<>();\n        Set<Integer> set = new HashSet<>();\n\n        map.put(\"key1\", 10);\n        map.put(\"key2\", 20);\n        set.add(30);\n        set.add(40);\n\n        // Perform operations on map and set\n        for (String key : map.keySet()) {\n            set.add(map.get(key));\n        }\n\n        int sum = 0;\n        for (Integer num : set) {\n            sum += num;\n        }\n\n        // Manipulate the queue further\n        queue.add(15);\n        queue.add(5);\n        queue.add(25);\n\n        // More operations on map\n        map.put(\"key3\", 35);\n        map.put(\"key4\", 45);\n\n        // Further operations on the queue\n        queue.poll();\n        queue.add(50);\n\n        // Calculate the average of the set values\n        double average = sum / (double) set.size();\n        System.out.println(\"Average: \" + average);\n\n        // Retrieve the first element from the queue\n        /* read */ int value = queue.peek();\n        System.out.println(\"Peeked value from queue: \" + value);\n\n        // Final operations on map\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.collect.MinMaxPriorityQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        MinMaxPriorityQueue<Integer> queue = MinMaxPriorityQueue.create();\n        /* write */ queue.add(42);\n        /* read */ int value = queue.peek();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.MinMaxPriorityQueue",
        "write_method": "add",
        "read_class": "com.google.common.collect.MinMaxPriorityQueue",
        "read_method": "peek"
    }
}