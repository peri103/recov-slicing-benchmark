{
    "java_code": "import com.google.common.collect.ImmutableSortedSet;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for the ImmutableSortedSet\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n        \n        // Add elements to the set using the builder\n        /* write */ builder.add(1);\n        \n        // Add more elements to the builder for complexity\n        builder.add(2);\n        builder.add(3);\n        \n        // Perform some unrelated operations with a HashSet\n        Set<Integer> hashSet = new HashSet<>();\n        hashSet.add(10);\n        hashSet.add(20);\n        \n        // Check if the HashSet contains a value\n        boolean hashSetContains = hashSet.contains(10);\n        System.out.println(\"HashSet contains 10: \" + hashSetContains);\n        \n        // Build the ImmutableSortedSet\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n        \n        // Perform additional operations on the sorted set\n        for (Integer num : sortedSet) {\n            System.out.println(\"SortedSet element: \" + num);\n        }\n        \n        // Check if the set contains the element\n        /* read */ boolean contains = sortedSet.contains(1);\n        \n        // Print the result\n        System.out.println(\"ImmutableSortedSet contains 1: \" + contains);\n        \n        // Additional complexity with another data structure\n        Set<String> stringSet = new HashSet<>();\n        stringSet.add(\"hello\");\n        stringSet.add(\"world\");\n        \n        // Check if the string set contains a specific string\n        boolean stringSetContains = stringSet.contains(\"hello\");\n        System.out.println(\"StringSet contains 'hello': \" + stringSetContains);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for the ImmutableSortedSet\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n        \n        // Add elements to the set using the builder\n        /* write */ builder.add(1);\n        \n        // Build the ImmutableSortedSet\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n        \n        // Check if the set contains the element\n        /* read */ boolean contains = sortedSet.contains(1);\n        \n        // Print the result\n        System.out.println(contains);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedSet",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedSet",
        "read_method": "contains"
    }
}