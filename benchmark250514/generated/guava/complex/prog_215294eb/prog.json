{
    "java_code": "import com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ImmutableBiMap using the write method\n        /* write */ ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n\n        // Additional unrelated operations\n        ImmutableMap<String, String> map = ImmutableMap.of(\"apple\", \"fruit\", \"carrot\", \"vegetable\");\n        String fruit = map.get(\"apple\");\n        System.out.println(\"Apple is a type of: \" + fruit);\n\n        // More complex operations with ImmutableBiMap\n        ImmutableBiMap<String, Integer> biMap2 = ImmutableBiMap.of(\"four\", 4, \"five\", 5);\n        for (String key : biMap2.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + biMap2.get(key));\n        }\n\n        // Perform calculations\n        int sum = 0;\n        for (Integer value : biMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in biMap: \" + sum);\n\n        // Read a value from the ImmutableBiMap using the read method\n        /* read */ Integer value = biMap.get(\"two\");\n        \n        // Print the value to verify\n        System.out.println(\"Value associated with 'two': \" + value);\n\n        // Further unrelated operations\n        int product = 1;\n        for (Integer val : biMap2.values()) {\n            product *= val;\n        }\n        System.out.println(\"Product of values in biMap2: \" + product);\n\n        // Final output to ensure program complexity\n        System.out.println(\"Program executed successfully.\");\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ImmutableBiMap using the write method\n        /* write */ ImmutableBiMap<String, Integer> biMap = ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n\n        // Read a value from the ImmutableBiMap using the read method\n        /* read */ Integer value = biMap.get(\"two\");\n        \n        // Print the value to verify\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableBiMap",
        "write_method": "of",
        "read_class": "com.google.common.collect.ImmutableBiMap",
        "read_method": "get"
    }
}