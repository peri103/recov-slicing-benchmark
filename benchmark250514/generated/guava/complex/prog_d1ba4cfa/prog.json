{
    "java_code": "import com.google.common.collect.ForwardingMap;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, Integer> backingMap = new HashMap<>();\n        ForwardingMap<String, Integer> map = new ForwardingMap<String, Integer>() {\n            @Override\n            protected Map<String, Integer> delegate() {\n                return backingMap;\n            }\n        };\n        \n        List<String> keys = new ArrayList<>();\n        keys.add(\"key\");\n        keys.add(\"anotherKey\");\n        \n        /* write */ map.put(\"key\", 42);\n        \n        map.put(\"anotherKey\", 84);\n        \n        int sum = 0;\n        for (String key : keys) {\n            sum += map.get(key);\n        }\n        \n        System.out.println(\"Sum of values: \" + sum);\n        \n        List<Integer> values = new ArrayList<>();\n        values.add(map.get(\"anotherKey\"));\n        \n        int product = 1;\n        for (Integer val : values) {\n            product *= val;\n        }\n        \n        System.out.println(\"Product of values: \" + product);\n        \n        /* read */ int value = map.get(\"key\");\n        System.out.println(\"Read value: \" + value);\n        \n        Map<String, Integer> anotherMap = new HashMap<>();\n        anotherMap.put(\"thirdKey\", 126);\n        \n        int total = 0;\n        for (String key : anotherMap.keySet()) {\n            total += anotherMap.get(key);\n        }\n        \n        System.out.println(\"Total from anotherMap: \" + total);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ForwardingMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, Integer> backingMap = new HashMap<>();\n        ForwardingMap<String, Integer> map = new ForwardingMap<String, Integer>() {\n            @Override\n            protected Map<String, Integer> delegate() {\n                return backingMap;\n            }\n        };\n        \n        /* write */ map.put(\"key\", 42);\n        /* read */ int value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ForwardingMap",
        "read_method": "get"
    }
}