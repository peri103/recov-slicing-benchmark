{
    "java_code": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\nimport com.google.common.collect.RangeMap;\nimport com.google.common.collect.TreeRangeMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original ImmutableRangeMap usage\n        ImmutableRangeMap.Builder<Integer, String> builder = new ImmutableRangeMap.Builder<>();\n        /* write */ builder.put(Range.closed(1, 10), \"Value\");\n        \n        // Additional RangeMap usage\n        RangeMap<Integer, String> treeRangeMap = TreeRangeMap.create();\n        treeRangeMap.put(Range.closed(11, 20), \"Another Value\");\n        treeRangeMap.put(Range.closed(21, 30), \"Yet Another Value\");\n\n        // Perform operations on the additional RangeMap\n        String anotherValue = treeRangeMap.get(15);\n        System.out.println(\"TreeRangeMap value at 15: \" + anotherValue);\n\n        String yetAnotherValue = treeRangeMap.get(25);\n        System.out.println(\"TreeRangeMap value at 25: \" + yetAnotherValue);\n\n        // Build the original ImmutableRangeMap\n        ImmutableRangeMap<Integer, String> rangeMap = builder.build();\n\n        // Perform unrelated operations\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 10: \" + sum);\n\n        // More complex logic\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n            if (i % 2 == 0) {\n                System.out.println(\"Product till \" + i + \": \" + product);\n            }\n        }\n\n        // Read from the original ImmutableRangeMap\n        /* read */ String value = rangeMap.get(5);\n        System.out.println(\"ImmutableRangeMap value at 5: \" + value);\n    }\n}",
    "java_code_simple": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableRangeMap.Builder<Integer, String> builder = new ImmutableRangeMap.Builder<>();\n        /* write */ builder.put(Range.closed(1, 10), \"Value\");\n        ImmutableRangeMap<Integer, String> rangeMap = builder.build();\n        /* read */ String value = rangeMap.get(5);\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.collect.ImmutableRangeMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableRangeMap",
        "read_method": "get"
    }
}