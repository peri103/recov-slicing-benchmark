{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import com.google.common.collect.TreeBasedTable;\n\npublic class Course {\n    private String courseName;\n    private TreeBasedTable<Integer, Integer, String> studentGrades = TreeBasedTable.create();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudentGrade(int studentId, int examId, String grade) {\n        /* write */ studentGrades.put(studentId, examId, grade);\n    }\n\n    public String getStudentGrade(int studentId, int examId) {\n        return studentGrades.get(studentId, examId);\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student1 = new Student(\"John Doe\", 1);\n        Student student2 = new Student(\"Jane Smith\", 2);\n\n        Course mathCourse = new Course(\"Mathematics\");\n        \n        mathCourse.addStudentGrade(student1.getId(), 101, \"A\");\n        mathCourse.addStudentGrade(student2.getId(), 101, \"B\");\n        \n        // Simulating other operations\n        System.out.println(\"Course: \" + mathCourse.getCourseName());\n        System.out.println(\"Student: \" + student1.getName() + \", ID: \" + student1.getId());\n        System.out.println(\"Student: \" + student2.getName() + \", ID: \" + student2.getId());\n        \n        // Retrieve and print the grade for a specific student and exam\n        /* read */ String grade = mathCourse.getStudentGrade(1, 101);\n        \n        System.out.println(\"Grade for \" + student1.getName() + \" in exam 101: \" + grade);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.TreeBasedTable",
        "write_method": "put",
        "read_class": "com.google.common.collect.TreeBasedTable",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.TreeBasedTable;\nimport com.google.common.collect.Table;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeBasedTable<Integer, Integer, String> table = TreeBasedTable.create();\n        \n        /* write */ table.put(1, 1, \"Hello, World!\");\n        \n        /* read */ String value = table.get(1, 1);\n        \n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.TreeBasedTable;\nimport com.google.common.collect.Table;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeBasedTable<Integer, Integer, String> table = TreeBasedTable.create();\n        Map<String, Integer> map = new HashMap<>();\n        \n        /* write */ table.put(1, 1, \"Hello, World!\");\n        \n        // Adding elements to the map for additional complexity\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        \n        // Performing operations on the map\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        \n        // Additional operations on the table\n        table.put(2, 2, \"Goodbye, World!\");\n        table.put(3, 3, \"Welcome, World!\");\n        \n        // Iterating over the table\n        for (Table.Cell<Integer, Integer, String> cell : table.cellSet()) {\n            System.out.println(\"Row: \" + cell.getRowKey() + \", Column: \" + cell.getColumnKey() + \", Value: \" + cell.getValue());\n        }\n        \n        /* read */ String value = table.get(1, 1);\n        \n        System.out.println(value);\n        \n        // Further operations unrelated to the table\n        int sum = 0;\n        for (Integer val : map.values()) {\n            sum += val;\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n        \n        // Final operations on the table\n        table.put(4, 4, \"End, World!\");\n        System.out.println(\"Final Table Size: \" + table.size());\n    }\n}"
}