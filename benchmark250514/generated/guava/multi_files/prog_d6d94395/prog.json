{
    "files": {
        "Course.java": "import com.google.common.collect.ImmutableClassToInstanceMap;\n\npublic class Course {\n    private ImmutableClassToInstanceMap<String> courseDetails;\n\n    public Course(String courseName) {\n        /* write */ this.courseDetails = ImmutableClassToInstanceMap.of(String.class, courseName);\n    }\n\n    public String getCourseName() {\n        /* read */ return courseDetails.getInstance(String.class);\n    }\n}",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Course> enrolledCourses = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void enrollCourse(Course course) {\n        enrolledCourses.add(course);\n    }\n\n    public List<Course> getEnrolledCourses() {\n        return enrolledCourses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"Alice\");\n        Course course1 = new Course(\"Mathematics\");\n        Course course2 = new Course(\"Science\");\n\n        student.enrollCourse(course1);\n        student.enrollCourse(course2);\n\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Enrolled Courses:\");\n        for (Course course : student.getEnrolledCourses()) {\n            System.out.println(course.getCourseName());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "write_method": "of",
        "read_class": "com.google.common.collect.ImmutableClassToInstanceMap",
        "read_method": "getInstance"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableClassToInstanceMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ImmutableClassToInstanceMap with a specific class-instance mapping\n        ImmutableClassToInstanceMap<String> map = /* write */ ImmutableClassToInstanceMap.of(String.class, \"Hello, World!\");\n        \n        // Retrieve the instance associated with the specified class\n        /* read */ String value = map.getInstance(String.class);\n        \n        // Print the retrieved value\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableClassToInstanceMap;\nimport com.google.common.collect.ImmutableMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ImmutableClassToInstanceMap with a specific class-instance mapping\n        ImmutableClassToInstanceMap<String> map = /* write */ ImmutableClassToInstanceMap.of(String.class, \"Hello, World!\");\n        \n        // Additional code to make the program more complex\n        ImmutableMap<Integer, String> numberMap = ImmutableMap.of(1, \"One\", 2, \"Two\", 3, \"Three\");\n        int sum = 0;\n        for (Integer key : numberMap.keySet()) {\n            sum += key;\n            System.out.println(\"Key: \" + key + \", Value: \" + numberMap.get(key));\n        }\n        System.out.println(\"Sum of keys: \" + sum);\n\n        // More operations\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"This is a test. \");\n        builder.append(\"Appending more text. \");\n        System.out.println(builder.toString());\n\n        // Retrieve the instance associated with the specified class\n        /* read */ String value = map.getInstance(String.class);\n        \n        // Print the retrieved value\n        System.out.println(value);\n\n        // Even more operations\n        String[] words = {\"apple\", \"banana\", \"cherry\"};\n        for (String word : words) {\n            System.out.println(\"Word: \" + word);\n        }\n\n        // Final operations\n        int[] numbers = {10, 20, 30, 40, 50};\n        for (int number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}"
}