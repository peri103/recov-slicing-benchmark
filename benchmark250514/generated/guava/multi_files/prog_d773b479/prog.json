{
    "files": {
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<String> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(String studentName) {\n        enrolledStudents.add(studentName);\n    }\n\n    public List<String> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Student {\n    private String name;\n    private Map<String, Integer> grades = new HashMap<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(String course, int grade) {\n        grades.put(course, grade);\n    }\n\n    public Map<String, Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "ForwardingMultimapWrapper.java": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport java.util.Collection;\n\npublic class ForwardingMultimapWrapper {\n    private ForwardingMultimap<String, String> multimap;\n\n    public ForwardingMultimapWrapper() {\n        this.multimap = new ForwardingMultimap<String, String>() {\n            private final ArrayListMultimap<String, String> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected ArrayListMultimap<String, String> delegate() {\n                return delegate;\n            }\n        };\n    }\n\n    public void addEntry(String key, String value) {\n        /* write */ multimap.put(key, value);\n    }\n\n    public Collection<String> getValues(String key) {\n        return multimap.get(key);\n    }\n}\n",
        "Main.java": "import java.util.Collection;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a student and add grades\n        Student student = new Student(\"John Doe\");\n        student.addGrade(\"Math\", 90);\n        student.addGrade(\"Science\", 85);\n\n        // Print student's grades\n        for (Map.Entry<String, Integer> entry : student.getGrades().entrySet()) {\n            System.out.println(\"Course: \" + entry.getKey() + \", Grade: \" + entry.getValue());\n        }\n\n        // Create a course and enroll students\n        Course course = new Course(\"Physics\");\n        course.enrollStudent(\"John Doe\");\n        course.enrollStudent(\"Jane Smith\");\n\n        // Print enrolled students\n        System.out.println(\"Enrolled students in \" + course.getCourseName() + \":\");\n        for (String studentName : course.getEnrolledStudents()) {\n            System.out.println(studentName);\n        }\n\n        // Use ForwardingMultimapWrapper to add and retrieve values\n        ForwardingMultimapWrapper multimapWrapper = new ForwardingMultimapWrapper();\n        multimapWrapper.addEntry(\"key1\", \"value1\");\n        multimapWrapper.addEntry(\"key1\", \"value2\");\n\n        // Perform some operations before the read\n        int totalGrades = 0;\n        for (int grade : student.getGrades().values()) {\n            totalGrades += grade;\n        }\n        System.out.println(\"Total grades sum: \" + totalGrades);\n\n        // Read from the multimap\n        /* read */ Collection<String> values = multimapWrapper.getValues(\"key1\");\n        for (String value : values) {\n            System.out.println(\"Value from multimap: \" + value);\n        }\n\n        // Additional operations after read\n        int averageGrade = totalGrades / student.getGrades().size();\n        System.out.println(\"Average grade: \" + averageGrade);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ForwardingMultimap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ForwardingMultimap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport java.util.Collection;\n\npublic class Main {\n    public static void main(String[] args) {\n        ForwardingMultimap<String, String> multimap = new ForwardingMultimap<String, String>() {\n            private final ArrayListMultimap<String, String> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected ArrayListMultimap<String, String> delegate() {\n                return delegate;\n            }\n        };\n\n        /* write */ multimap.put(\"key\", \"value\");\n        /* read */ Collection<String> values = multimap.get(\"key\");\n        for (String value : values) {\n            System.out.println(value);\n        }\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ForwardingMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing the ForwardingMultimap\n        ForwardingMultimap<String, String> multimap = new ForwardingMultimap<String, String>() {\n            private final ArrayListMultimap<String, String> delegate = ArrayListMultimap.create();\n\n            @Override\n            protected ArrayListMultimap<String, String> delegate() {\n                return delegate;\n            }\n        };\n\n        // Using a HashMap to add complexity\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Iterating and printing values from the map\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Performing some operations before the write\n        int sum = 0;\n        for (int value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in the map: \" + sum);\n\n        // Writing to the multimap\n        /* write */ multimap.put(\"key\", \"value\");\n\n        // Additional operations on the map\n        if (map.containsKey(\"two\")) {\n            map.put(\"two\", map.get(\"two\") + 10);\n        }\n\n        // Printing updated map values\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Updated Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Performing some unrelated operations\n        int product = 1;\n        for (int value : map.values()) {\n            product *= value;\n        }\n        System.out.println(\"Product of values in the map: \" + product);\n\n        // Reading from the multimap\n        /* read */ Collection<String> values = multimap.get(\"key\");\n        for (String value : values) {\n            System.out.println(\"Value from multimap: \" + value);\n        }\n\n        // More operations after read\n        map.remove(\"three\");\n        System.out.println(\"Map size after removal: \" + map.size());\n    }\n}"
}