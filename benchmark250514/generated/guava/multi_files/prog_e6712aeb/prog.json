{
    "files": {
        "UniversityDatabase.java": "import com.google.common.collect.HashBasedTable;\nimport com.google.common.collect.Table;\n\npublic class UniversityDatabase {\n    private Table<String, String, Integer> studentCourseTable = HashBasedTable.create();\n\n    public void enrollStudentInCourse(String studentName, String courseName, int score) {\n        /* write */ studentCourseTable.put(studentName, courseName, score);\n    }\n\n    public Integer getStudentScore(String studentName, String courseName) {\n        return studentCourseTable.get(studentName, courseName);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "public class Course {\n    private String courseName;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Create instances of Student and Course\n        Student student = new Student(\"John Doe\");\n        Course course = new Course(\"Mathematics\");\n\n        // Create an instance of UniversityDatabase\n        UniversityDatabase universityDatabase = new UniversityDatabase();\n\n        // Enroll the student in the course with a score\n        universityDatabase.enrollStudentInCourse(student.getName(), course.getCourseName(), 85);\n\n        // Unrelated data structures for complexity\n        int[] grades = {90, 80, 85, 70};\n        int sum = 0;\n        for (int grade : grades) {\n            sum += grade;\n        }\n        System.out.println(\"Average grade: \" + (sum / grades.length));\n\n        // Read the student's score from the course\n        /* read */ Integer score = universityDatabase.getStudentScore(student.getName(), course.getCourseName());\n\n        // Print the score\n        System.out.println(\"Student's score in \" + course.getCourseName() + \": \" + score);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.Table",
        "write_method": "put",
        "read_class": "com.google.common.collect.Table",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.HashBasedTable;\nimport com.google.common.collect.Table;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the table\n        Table<String, String, Integer> table = HashBasedTable.create();\n\n        // Write a value into the table\n        /* write */ table.put(\"row1\", \"column1\", 42);\n\n        // Read the value from the table\n        /* read */ Integer value = table.get(\"row1\", \"column1\");\n\n        // Print the value\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.HashBasedTable;\nimport com.google.common.collect.Table;\nimport com.google.common.collect.TreeBasedTable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the table\n        Table<String, String, Integer> table = HashBasedTable.create();\n\n        // Additional table for complexity\n        Table<String, String, String> stringTable = TreeBasedTable.create();\n        stringTable.put(\"rowA\", \"columnA\", \"Hello\");\n        stringTable.put(\"rowB\", \"columnB\", \"World\");\n\n        // Unrelated data structure for complexity\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 100);\n        map.put(\"key2\", 200);\n\n        // Write a value into the original table\n        /* write */ table.put(\"row1\", \"column1\", 42);\n\n        // Perform operations on the unrelated data structure\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Perform operations on the additional table\n        String greeting = stringTable.get(\"rowA\", \"columnA\") + \" \" + stringTable.get(\"rowB\", \"columnB\");\n        System.out.println(greeting);\n\n        // More unrelated operations\n        map.put(\"key3\", 300);\n        System.out.println(\"Updated map size: \" + map.size());\n\n        // Read the value from the original table\n        /* read */ Integer value = table.get(\"row1\", \"column1\");\n\n        // Print the value\n        System.out.println(\"Value from original table: \" + value);\n\n        // Further operations on the map\n        map.remove(\"key1\");\n        System.out.println(\"Map size after removal: \" + map.size());\n    }\n}"
}