{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private Course course;\n\n    public Student(String name, Course course) {\n        this.name = name;\n        this.course = course;\n    }\n\n    public void enroll(String courseName) {\n        this.course.setCourseName(courseName);\n    }\n\n    public String getCourseName() {\n        return this.course.getCourseName();\n    }\n}\n",
        "Course.java": "public class Course {\n    private String courseName;\n\n    public void setCourseName(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public String getCourseName() {\n        return this.courseName;\n    }\n}\n",
        "BiMapHandler.java": "import com.google.common.collect.ImmutableBiMap;\n\npublic class BiMapHandler {\n    private ImmutableBiMap.Builder<String, String> builder = new ImmutableBiMap.Builder<>();\n\n    public void putEntry(String key, String value) {\n        /* write */ builder.put(key, value);\n    }\n\n    public ImmutableBiMap<String, String> build() {\n        return builder.build();\n    }\n}\n",
        "Main.java": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a course and student\n        Course course = new Course();\n        Student student = new Student(\"John Doe\", course);\n        student.enroll(\"Mathematics\");\n\n        // Use BiMapHandler to manage key-value pairs\n        BiMapHandler handler = new BiMapHandler();\n        handler.putEntry(\"key\", \"value\");\n        ImmutableBiMap<String, String> biMap = handler.build();\n\n        // Retrieve the value using the key\n        /* read */ String value = biMap.get(\"key\");\n        System.out.println(\"Retrieved value: \" + value);\n\n        // Display student's course\n        System.out.println(\"Student \" + student.getCourseName() + \" is enrolled in: \" + course.getCourseName());\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableBiMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableBiMap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableBiMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableBiMap.Builder<String, String> builder = new ImmutableBiMap.Builder<>();\n        /* write */ builder.put(\"key\", \"value\");\n        ImmutableBiMap<String, String> biMap = builder.build();\n        /* read */ String value = biMap.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing an ImmutableBiMap builder\n        ImmutableBiMap.Builder<String, String> builder = new ImmutableBiMap.Builder<>();\n\n        // Adding some unrelated complex logic\n        Map<String, Integer> countMap = new HashMap<>();\n        countMap.put(\"apple\", 3);\n        countMap.put(\"banana\", 2);\n        countMap.put(\"orange\", 5);\n\n        int totalFruits = 0;\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            totalFruits += entry.getValue();\n        }\n        System.out.println(\"Total number of fruits: \" + totalFruits);\n\n        // Using the builder to add a key-value pair\n        /* write */ builder.put(\"key\", \"value\");\n\n        // More unrelated logic\n        ImmutableMap<String, Integer> priceMap = ImmutableMap.of(\n            \"apple\", 100,\n            \"banana\", 50,\n            \"orange\", 80\n        );\n\n        int totalPrice = 0;\n        for (String fruit : countMap.keySet()) {\n            totalPrice += countMap.get(fruit) * priceMap.get(fruit);\n        }\n        System.out.println(\"Total price of fruits: \" + totalPrice);\n\n        // Building the ImmutableBiMap\n        ImmutableBiMap<String, String> biMap = builder.build();\n\n        // Further unrelated complex logic\n        Map<String, String> reverseMap = new HashMap<>();\n        for (Map.Entry<String, String> entry : biMap.entrySet()) {\n            reverseMap.put(entry.getValue(), entry.getKey());\n        }\n\n        System.out.println(\"Reverse map: \" + reverseMap);\n\n        // Retrieving the value using the key\n        /* read */ String value = biMap.get(\"key\");\n        System.out.println(\"Retrieved value: \" + value);\n\n        // Additional logic to ensure complexity\n        if (reverseMap.containsKey(\"value\")) {\n            System.out.println(\"Reverse map contains 'value' with key: \" + reverseMap.get(\"value\"));\n        }\n    }\n}"
}