{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private Course course;\n\n    public Student(String name, Course course) {\n        this.name = name;\n        this.course = course;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n}\n",
        "Course.java": "import com.google.common.collect.TreeMultiset;\n\npublic class Course {\n    private String courseName;\n    private TreeMultiset<Integer> grades;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.grades = TreeMultiset.create();\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public void addGrade(int grade) {\n        /* write */ grades.add(grade);\n    }\n\n    public int getGradeCount(int grade) {\n        /* read */ return grades.count(grade);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Course mathCourse = new Course(\"Mathematics\");\n        Student student = new Student(\"John Doe\", mathCourse);\n\n        // Adding grades for the student in the course\n        mathCourse.addGrade(85);\n        mathCourse.addGrade(90);\n        mathCourse.addGrade(85);\n\n        // Unrelated operations\n        int sum = 0;\n        for (int i = 1; i <= 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 5: \" + sum);\n\n        // Fetching and printing the count of a specific grade\n        int gradeCount = student.getCourse().getGradeCount(85);\n        System.out.println(\"Count of grade 85 in \" + student.getCourse().getCourseName() + \": \" + gradeCount);\n\n        // More unrelated operations\n        int product = 1;\n        for (int i = 1; i <= 3; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers from 1 to 3: \" + product);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.TreeMultiset",
        "write_method": "add",
        "read_class": "com.google.common.collect.TreeMultiset",
        "read_method": "count"
    },
    "java_code_simple": "import com.google.common.collect.TreeMultiset;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeMultiset<Integer> multiset = TreeMultiset.create();\n        /* write */ multiset.add(5);\n        /* read */ int count = multiset.count(5);\n        System.out.println(count);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.TreeMultiset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeMultiset<Integer> multiset = TreeMultiset.create();\n        Map<String, Integer> map = new HashMap<>();\n        \n        // Additional operations with a HashMap\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        \n        int sum = 0;\n        for (String key : map.keySet()) {\n            sum += map.get(key);\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n        \n        /* write */ multiset.add(5);\n        \n        // More complex operations with the multiset\n        for (int i = 0; i < 10; i++) {\n            multiset.add(i);\n        }\n        \n        int totalUniqueElements = multiset.elementSet().size();\n        System.out.println(\"Total unique elements in multiset: \" + totalUniqueElements);\n        \n        // Some unrelated operations\n        int factorial = 1;\n        for (int i = 1; i <= 5; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"Factorial of 5: \" + factorial);\n        \n        /* read */ int count = multiset.count(5);\n        System.out.println(\"Count of 5 in multiset: \" + count);\n        \n        // More operations on the multiset\n        multiset.add(5, 2); // Add two more instances of 5\n        int newCount = multiset.count(5);\n        System.out.println(\"New count of 5 in multiset: \" + newCount);\n        \n        // Final unrelated operation\n        int squareSum = 0;\n        for (int i = 1; i <= 3; i++) {\n            squareSum += i * i;\n        }\n        System.out.println(\"Sum of squares from 1 to 3: \" + squareSum);\n    }\n}"
}