{
    "files": {
        "RangeMapHandler.java": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\n\npublic class RangeMapHandler {\n    private ImmutableRangeMap.Builder<Integer, String> builder;\n\n    public RangeMapHandler() {\n        builder = new ImmutableRangeMap.Builder<>();\n    }\n\n    public void addRange(int start, int end, String value) {\n        /* write */ builder.put(Range.closed(start, end), value);\n    }\n\n    public ImmutableRangeMap<Integer, String> build() {\n        return builder.build();\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableRangeMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.ImmutableRangeMap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\n\npublic class Main {\n    public static void main(String[] args) {\n        ImmutableRangeMap.Builder<Integer, String> builder = new ImmutableRangeMap.Builder<>();\n        \n        /* write */ builder.put(Range.closed(1, 10), \"Value1\");\n        \n        ImmutableRangeMap<Integer, String> rangeMap = builder.build();\n        \n        /* read */ String value = rangeMap.get(5);\n        \n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableRangeMap;\nimport com.google.common.collect.Range;\nimport com.google.common.collect.ImmutableRangeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ImmutableRangeMap builder\n        ImmutableRangeMap.Builder<Integer, String> builder = new ImmutableRangeMap.Builder<>();\n\n        // Add some ranges and values\n        builder.put(Range.closed(11, 20), \"Value2\");\n        builder.put(Range.closed(21, 30), \"Value3\");\n\n        // Use the original write method\n        /* write */ builder.put(Range.closed(1, 10), \"Value1\");\n\n        // Build the ImmutableRangeMap\n        ImmutableRangeMap<Integer, String> rangeMap = builder.build();\n\n        // Create an ImmutableRangeSet\n        ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.<Integer>builder()\n                .add(Range.closed(1, 5))\n                .add(Range.closed(6, 10))\n                .add(Range.closed(11, 15))\n                .build();\n\n        // Perform some operations with the range set\n        for (Range<Integer> range : rangeSet.asRanges()) {\n            System.out.println(\"Range: \" + range);\n        }\n\n        // Use the original read method\n        /* read */ String value = rangeMap.get(5);\n\n        // Print the value retrieved from the range map\n        System.out.println(value);\n\n        // Additional logic to add complexity\n        for (int i = 16; i <= 30; i += 5) {\n            String result = rangeMap.get(i);\n            if (result != null) {\n                System.out.println(\"Value at \" + i + \": \" + result);\n            }\n        }\n\n        // Another ImmutableRangeMap with different ranges\n        ImmutableRangeMap.Builder<Integer, String> anotherBuilder = new ImmutableRangeMap.Builder<>();\n        anotherBuilder.put(Range.closed(31, 40), \"Value4\");\n        anotherBuilder.put(Range.closed(41, 50), \"Value5\");\n        ImmutableRangeMap<Integer, String> anotherRangeMap = anotherBuilder.build();\n\n        // Print values from the new range map\n        for (int i = 31; i <= 50; i += 10) {\n            String anotherValue = anotherRangeMap.get(i);\n            if (anotherValue != null) {\n                System.out.println(\"Another value at \" + i + \": \" + anotherValue);\n            }\n        }\n    }\n}"
}