{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class Course {\n    private String courseName;\n    private ImmutableSortedSet.Builder<Integer> studentIdsBuilder = ImmutableSortedSet.naturalOrder();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(int studentId) {\n        /* write */ studentIdsBuilder.add(studentId);\n    }\n\n    public ImmutableSortedSet<Integer> getEnrolledStudentIds() {\n        return studentIdsBuilder.build();\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import com.google.common.collect.ImmutableList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create students\n        Student student1 = new Student(\"Alice\", 101);\n        Student student2 = new Student(\"Bob\", 102);\n        Student student3 = new Student(\"Charlie\", 103);\n\n        // Create a course and enroll students\n        Course course = new Course(\"Computer Science\");\n        course.enrollStudent(student1.getId());\n        course.enrollStudent(student2.getId());\n\n        // Create a list of students\n        ImmutableList<Student> students = ImmutableList.of(student1, student2, student3);\n\n        // Print student details\n        for (Student student : students) {\n            System.out.println(\"Student Name: \" + student.getName() + \", ID: \" + student.getId());\n        }\n\n        // Check enrollment in the course\n        /* read */ boolean isEnrolled = course.getEnrolledStudentIds().contains(student1.getId());\n\n        // Print enrollment status\n        System.out.println(\"Is Alice enrolled in \" + course.getCourseName() + \"? \" + isEnrolled);\n\n        // Print all enrolled student IDs\n        for (Integer id : course.getEnrolledStudentIds()) {\n            System.out.println(\"Enrolled Student ID: \" + id);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedSet",
        "write_method": "builder",
        "read_class": "com.google.common.collect.ImmutableSortedSet",
        "read_method": "contains"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedSet\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n        \n        /* write */ builder.add(10);\n        \n        // Build the ImmutableSortedSet\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n        \n        /* read */ boolean containsValue = sortedSet.contains(10);\n        \n        // Print the result\n        System.out.println(containsValue);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.collect.ImmutableList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a builder for ImmutableSortedSet\n        ImmutableSortedSet.Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n        \n        /* write */ builder.add(10);\n        \n        // Create a map to store some data\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"ten\", 10);\n        \n        // Perform some operations on the map\n        if (map.containsKey(\"ten\")) {\n            map.put(\"ten\", map.get(\"ten\") + 5);\n        }\n        \n        // Build the ImmutableSortedSet\n        ImmutableSortedSet<Integer> sortedSet = builder.build();\n        \n        // Create an ImmutableList from the map values\n        ImmutableList<Integer> list = ImmutableList.copyOf(map.values());\n        \n        // Iterate over the list and print values\n        for (Integer value : list) {\n            System.out.println(\"Map value: \" + value);\n        }\n        \n        /* read */ boolean containsValue = sortedSet.contains(10);\n        \n        // Print the result of the read operation\n        System.out.println(\"SortedSet contains 10: \" + containsValue);\n        \n        // Perform additional operations on the sortedSet\n        if (sortedSet.contains(15)) {\n            System.out.println(\"SortedSet contains 15\");\n        } else {\n            System.out.println(\"SortedSet does not contain 15\");\n        }\n        \n        // Print all elements in the sortedSet\n        for (Integer element : sortedSet) {\n            System.out.println(\"SortedSet element: \" + element);\n        }\n    }\n}"
}