{
    "files": {
        "CustomSetBuilder.java": "import com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.collect.ImmutableSortedSet.Builder;\n\npublic class CustomSetBuilder {\n    private Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n\n    public void addElement(int element) {\n        /* write */ builder.add(element);\n    }\n\n    public ImmutableSortedSet<Integer> buildSet() {\n        return builder.build();\n    }\n}\n",
        "CustomSetReader.java": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class CustomSetReader {\n    private ImmutableSortedSet<Integer> set;\n\n    public CustomSetReader(ImmutableSortedSet<Integer> set) {\n        this.set = set;\n    }\n\n    public boolean containsElement(int element) {\n        /* read */ return set.contains(element);\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores;\n\n    public Student(String name) {\n        this.name = name;\n        this.scores = new ArrayList<>();\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import com.google.common.collect.ImmutableSortedSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CustomSetBuilder and add an element\n        CustomSetBuilder setBuilder = new CustomSetBuilder();\n        setBuilder.addElement(42);\n\n        // Build the set\n        ImmutableSortedSet<Integer> set = setBuilder.buildSet();\n\n        // Create a CustomSetReader to check if the set contains the element\n        CustomSetReader setReader = new CustomSetReader(set);\n        boolean containsValue = setReader.containsElement(42);\n        System.out.println(\"Set contains 42: \" + containsValue);\n\n        // Create students and a course\n        Student alice = new Student(\"Alice\");\n        alice.addScore(85);\n        alice.addScore(90);\n\n        Student bob = new Student(\"Bob\");\n        bob.addScore(78);\n        bob.addScore(82);\n\n        Course mathCourse = new Course(\"Mathematics\");\n        mathCourse.addStudent(alice);\n        mathCourse.addStudent(bob);\n\n        // Print course details\n        System.out.println(\"Course: \" + mathCourse.getCourseName());\n        for (Student student : mathCourse.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Scores: \" + student.getScores());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.ImmutableSortedSet",
        "write_method": "add",
        "read_class": "com.google.common.collect.ImmutableSortedSet",
        "read_method": "contains"
    },
    "java_code_simple": "import com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.collect.ImmutableSortedSet.Builder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n        /* write */ builder.add(42);\n        ImmutableSortedSet<Integer> set = builder.build();\n        /* read */ boolean containsValue = set.contains(42);\n        System.out.println(containsValue);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.collect.ImmutableSortedSet.Builder;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original write-read pair\n        Builder<Integer> builder = ImmutableSortedSet.naturalOrder();\n        /* write */ builder.add(42);\n\n        // Additional code for complexity\n        ImmutableList<String> immutableList = ImmutableList.of(\"apple\", \"banana\", \"cherry\");\n        ImmutableMap<String, Integer> immutableMap = ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3);\n\n        // Process the immutable list\n        for (String fruit : immutableList) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n\n        // Process the immutable map\n        for (String key : immutableMap.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + immutableMap.get(key));\n        }\n\n        // Construct the ImmutableSortedSet\n        ImmutableSortedSet<Integer> set = builder.build();\n\n        // Additional operations on the ImmutableSortedSet\n        int sum = 0;\n        for (Integer number : set) {\n            sum += number;\n        }\n        System.out.println(\"Sum of elements in set: \" + sum);\n\n        // Original read operation\n        /* read */ boolean containsValue = set.contains(42);\n        System.out.println(containsValue);\n\n        // Additional logic for complexity\n        ImmutableSortedSet<Integer> anotherSet = ImmutableSortedSet.of(5, 10, 15);\n        for (Integer number : anotherSet) {\n            System.out.println(\"Number in another set: \" + number);\n        }\n\n        int product = 1;\n        for (Integer number : anotherSet) {\n            product *= number;\n        }\n        System.out.println(\"Product of elements in another set: \" + product);\n    }\n}"
}