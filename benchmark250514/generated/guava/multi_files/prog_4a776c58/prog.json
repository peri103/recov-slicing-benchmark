{
    "files": {
        "CacheManager.java": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\n\npublic class CacheManager {\n    private LoadingCache<String, Integer> cache;\n\n    public CacheManager() {\n        cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default implementation, won't be used\n                    }\n                });\n    }\n\n    public void putValue(String key, Integer value) {\n        /* write */ cache.put(key, value);\n    }\n\n    public Integer getValue(String key) throws Exception {\n        return cache.get(key);\n    }\n}",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Course> courses;\n\n    public Student(String name) {\n        this.name = name;\n        this.courses = new ArrayList<>();\n    }\n\n    public void enroll(Course course) {\n        courses.add(course);\n    }\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Initialize CacheManager\n        CacheManager cacheManager = new CacheManager();\n        \n        // Put a value in the cache\n        cacheManager.putValue(\"key\", 42);\n\n        // Create students and courses\n        Student alice = new Student(\"Alice\");\n        Student bob = new Student(\"Bob\");\n\n        Course math = new Course(\"Math\");\n        Course science = new Course(\"Science\");\n\n        // Enroll students in courses\n        math.addStudent(alice);\n        science.addStudent(bob);\n\n        alice.enroll(math);\n        bob.enroll(science);\n\n        // Print student enrollments\n        for (Course course : alice.getCourses()) {\n            System.out.println(alice.getName() + \" is enrolled in \" + course.getCourseName());\n        }\n\n        for (Course course : bob.getCourses()) {\n            System.out.println(bob.getName() + \" is enrolled in \" + course.getCourseName());\n        }\n\n        // Retrieve and print the cached value\n        try {\n            /* read */ int value = cacheManager.getValue(\"key\");\n            System.out.println(\"Cached value: \" + value);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.cache.LoadingCache",
        "write_method": "put",
        "read_class": "com.google.common.cache.LoadingCache",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LoadingCache instance\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default implementation, won't be used\n                    }\n                });\n\n        // Use the write method to put a value into the cache\n        /* write */ cache.put(\"key\", 42);\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ int value = cache.get(\"key\");\n            System.out.println(value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.HashMap;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LoadingCache instance\n        LoadingCache<String, Integer> cache = CacheBuilder.newBuilder()\n                .build(new CacheLoader<String, Integer>() {\n                    public Integer load(String key) {\n                        return null; // Default implementation, won't be used\n                    }\n                });\n\n        // Use the write method to put a value into the cache\n        /* write */ cache.put(\"key\", 42);\n\n        // Unrelated complex operation: Working with HashMap\n        HashMap<String, String> map = new HashMap<>();\n        map.put(\"A\", \"Apple\");\n        map.put(\"B\", \"Banana\");\n        map.put(\"C\", \"Cherry\");\n\n        for (String key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        // Unrelated complex operation: Working with ArrayList\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * i);\n        }\n\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n\n        System.out.println(\"Sum of squares: \" + sum);\n\n        try {\n            // Use the read method to get the value from the cache\n            /* read */ int value = cache.get(\"key\");\n            System.out.println(\"Cached value: \" + value);\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated operation: More ArrayList manipulation\n        ArrayList<String> fruits = new ArrayList<>();\n        fruits.add(\"Mango\");\n        fruits.add(\"Peach\");\n        fruits.add(\"Grapes\");\n\n        for (String fruit : fruits) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n    }\n}"
}