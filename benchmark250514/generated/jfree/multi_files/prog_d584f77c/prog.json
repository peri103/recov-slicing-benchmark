{
    "files": {
        "StrokeManager.java": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.BasicStroke;\nimport java.awt.Stroke;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StrokeManager {\n    private PiePlot plot = new PiePlot();\n    private Map<String, Stroke> strokeMap = new HashMap<>();\n\n    public StrokeManager() {\n        Stroke initialStroke = new BasicStroke(2.0f);\n        /* write */ plot.setSectionOutlineStroke(\"SectionKey\", initialStroke);\n    }\n\n    public void addStroke(String key, Stroke stroke) {\n        strokeMap.put(key, stroke);\n        plot.setSectionOutlineStroke(key, stroke);\n    }\n\n    public Stroke getStroke(String key) {\n        return plot.getSectionOutlineStroke(key);\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private double[] scores;\n\n    public Student(String name, double[] scores) {\n        this.name = name;\n        this.scores = scores;\n    }\n\n    public double calculateAverage() {\n        double sum = 0;\n        for (double score : scores) {\n            sum += score;\n        }\n        return sum / scores.length;\n    }\n\n    public int countAboveThreshold(double threshold) {\n        int count = 0;\n        for (double score : scores) {\n            if (score > threshold) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "Main.java": "import java.awt.BasicStroke;\nimport java.awt.Stroke;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize StrokeManager\n        StrokeManager strokeManager = new StrokeManager();\n        Stroke anotherStroke = new BasicStroke(3.0f);\n        strokeManager.addStroke(\"AnotherSectionKey\", anotherStroke);\n\n        // Perform operations with Student\n        double[] scores = {85.0, 92.5, 78.0, 88.5};\n        Student student = new Student(\"John Doe\", scores);\n\n        double average = student.calculateAverage();\n        System.out.println(\"Average Score: \" + average);\n\n        int countAboveThreshold = student.countAboveThreshold(80.0);\n        System.out.println(\"Scores above 80: \" + countAboveThreshold);\n\n        // Retrieve the stroke for the original section key\n        /* read */ Stroke retrievedStroke = strokeManager.getStroke(\"SectionKey\");\n        System.out.println(\"Retrieved Stroke: \" + retrievedStroke);\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.plot.PiePlot",
        "write_method": "setSectionOutlineStroke",
        "read_class": "org.jfree.chart.plot.PiePlot",
        "read_method": "getSectionOutlineStroke"
    },
    "java_code_simple": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.BasicStroke;\nimport java.awt.Stroke;\n\npublic class Main {\n    public static void main(String[] args) {\n        PiePlot plot = new PiePlot();\n        Stroke stroke = new BasicStroke(2.0f);\n        \n        /* write */ plot.setSectionOutlineStroke(\"SectionKey\", stroke);\n        /* read */ Stroke retrievedStroke = plot.getSectionOutlineStroke(\"SectionKey\");\n        \n        System.out.println(retrievedStroke);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.BasicStroke;\nimport java.awt.Stroke;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize PiePlot and strokes\n        PiePlot plot = new PiePlot();\n        Stroke stroke = new BasicStroke(2.0f);\n        Stroke anotherStroke = new BasicStroke(3.0f);\n\n        // Initialize a map to store stroke associations\n        Map<String, Stroke> strokeMap = new HashMap<>();\n        strokeMap.put(\"AnotherSectionKey\", anotherStroke);\n\n        // Set a section outline stroke for a specific section key\n        /* write */ plot.setSectionOutlineStroke(\"SectionKey\", stroke);\n\n        // Perform unrelated operations\n        for (Map.Entry<String, Stroke> entry : strokeMap.entrySet()) {\n            plot.setSectionOutlineStroke(entry.getKey(), entry.getValue());\n        }\n\n        // Add more complex logic\n        double[] values = {1.0, 2.5, 3.0, 4.5};\n        double sum = 0;\n        for (double value : values) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values: \" + sum);\n\n        // Retrieve the stroke for the original section key\n        /* read */ Stroke retrievedStroke = plot.getSectionOutlineStroke(\"SectionKey\");\n\n        // Output the retrieved stroke\n        System.out.println(\"Retrieved Stroke: \" + retrievedStroke);\n\n        // Perform additional operations\n        int count = 0;\n        for (double value : values) {\n            if (value > 2.0) {\n                count++;\n            }\n        }\n        System.out.println(\"Values greater than 2.0: \" + count);\n    }\n}"
}