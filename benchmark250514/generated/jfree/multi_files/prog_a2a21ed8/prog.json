{
    "files": {
        "ChartRenderer.java": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\n\npublic class ChartRenderer {\n    private LineAndShapeRenderer lineRenderer;\n\n    public ChartRenderer() {\n        this.lineRenderer = new LineAndShapeRenderer();\n    }\n\n    public void setSeriesShapesVisible(int series, boolean visible) {\n        /* write */ lineRenderer.setSeriesShapesVisible(series, visible);\n    }\n\n    public LineAndShapeRenderer getLineRenderer() {\n        return this.lineRenderer;\n    }\n}\n",
        "ChartData.java": "import org.jfree.data.category.DefaultCategoryDataset;\n\npublic class ChartData {\n    private DefaultCategoryDataset dataset;\n\n    public ChartData() {\n        this.dataset = new DefaultCategoryDataset();\n    }\n\n    public void addValue(double value, String series, String category) {\n        dataset.addValue(value, series, category);\n    }\n\n    public DefaultCategoryDataset getDataset() {\n        return this.dataset;\n    }\n}\n",
        "Main.java": "import org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.NumberAxis;\nimport org.jfree.chart.renderer.category.BarRenderer;\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize chart data and renderer\n        ChartData chartData = new ChartData();\n        ChartRenderer chartRenderer = new ChartRenderer();\n\n        // Add data to dataset\n        chartData.addValue(1.0, \"Series1\", \"Category1\");\n        chartData.addValue(4.0, \"Series1\", \"Category2\");\n        chartData.addValue(3.0, \"Series1\", \"Category3\");\n\n        // Create a chart\n        JFreeChart chart = ChartFactory.createBarChart(\n                \"Sample Chart\", \"Category\", \"Value\", chartData.getDataset());\n\n        // Get the plot\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n\n        // Set the bar renderer to the plot\n        BarRenderer barRenderer = new BarRenderer();\n        plot.setRenderer(barRenderer);\n\n        // Set series shapes visibility\n        chartRenderer.setSeriesShapesVisible(0, true);\n\n        // Perform some unrelated operations\n        CategoryAxis domainAxis = plot.getDomainAxis();\n        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        domainAxis.setCategoryMargin(0.1);\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        // Apply the line renderer to the plot\n        plot.setRenderer(1, chartRenderer.getLineRenderer());\n\n        // Add another series\n        chartData.addValue(5.0, \"Series2\", \"Category1\");\n        chartData.addValue(7.0, \"Series2\", \"Category2\");\n        chartData.addValue(6.0, \"Series2\", \"Category3\");\n\n        // Check if the series shapes are visible\n        /* read */ Boolean isVisible = chartRenderer.getLineRenderer().getSeriesShapesVisible(0);\n        System.out.println(\"Series 0 shapes visible: \" + isVisible);\n\n        // Perform more unrelated operations\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Value for Series1, Category\" + (i + 1) + \": \" + chartData.getDataset().getValue(\"Series1\", \"Category\" + (i + 1)));\n        }\n\n        // Modify some dataset values\n        chartData.getDataset().setValue(2.0, \"Series1\", \"Category1\");\n        chartData.getDataset().setValue(8.0, \"Series2\", \"Category2\");\n\n        // Print modified values\n        System.out.println(\"Modified Value for Series1, Category1: \" + chartData.getDataset().getValue(\"Series1\", \"Category1\"));\n        System.out.println(\"Modified Value for Series2, Category2: \" + chartData.getDataset().getValue(\"Series2\", \"Category2\"));\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "write_method": "setSeriesShapesVisible",
        "read_class": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "read_method": "getSeriesShapesVisible"
    },
    "java_code_simple": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\n\npublic class Main {\n    public static void main(String[] args) {\n        LineAndShapeRenderer renderer = new LineAndShapeRenderer();\n        /* write */ renderer.setSeriesShapesVisible(0, true);\n        /* read */ Boolean isVisible = renderer.getSeriesShapesVisible(0);\n        System.out.println(isVisible);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.NumberAxis;\nimport org.jfree.chart.renderer.category.BarRenderer;\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.data.category.DefaultCategoryDataset;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a dataset\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        dataset.addValue(1.0, \"Series1\", \"Category1\");\n        dataset.addValue(4.0, \"Series1\", \"Category2\");\n        dataset.addValue(3.0, \"Series1\", \"Category3\");\n\n        // Create a chart\n        JFreeChart chart = ChartFactory.createBarChart(\n                \"Sample Chart\", \"Category\", \"Value\", dataset);\n\n        // Get the plot\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n\n        // Create a LineAndShapeRenderer\n        LineAndShapeRenderer lineRenderer = new LineAndShapeRenderer();\n\n        // Create a BarRenderer\n        BarRenderer barRenderer = new BarRenderer();\n\n        // Set the bar renderer to the plot\n        plot.setRenderer(barRenderer);\n\n        // Set series shapes visibility\n        /* write */ lineRenderer.setSeriesShapesVisible(0, true);\n\n        // Perform some unrelated operations\n        CategoryAxis domainAxis = plot.getDomainAxis();\n        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();\n        domainAxis.setCategoryMargin(0.1);\n        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        // Apply the line renderer to the plot\n        plot.setRenderer(1, lineRenderer);\n\n        // Add another series\n        dataset.addValue(5.0, \"Series2\", \"Category1\");\n        dataset.addValue(7.0, \"Series2\", \"Category2\");\n        dataset.addValue(6.0, \"Series2\", \"Category3\");\n\n        // Check if the series shapes are visible\n        /* read */ Boolean isVisible = lineRenderer.getSeriesShapesVisible(0);\n        System.out.println(\"Series 0 shapes visible: \" + isVisible);\n\n        // Perform more unrelated operations\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Value for Series1, Category\" + (i + 1) + \": \" + dataset.getValue(\"Series1\", \"Category\" + (i + 1)));\n        }\n\n        // Modify some dataset values\n        dataset.setValue(2.0, \"Series1\", \"Category1\");\n        dataset.setValue(8.0, \"Series2\", \"Category2\");\n\n        // Print modified values\n        System.out.println(\"Modified Value for Series1, Category1: \" + dataset.getValue(\"Series1\", \"Category1\"));\n        System.out.println(\"Modified Value for Series2, Category2: \" + dataset.getValue(\"Series2\", \"Category2\"));\n    }\n}"
}