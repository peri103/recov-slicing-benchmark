{
    "files": {
        "IntervalMarkerWrapper.java": "import org.jfree.chart.plot.IntervalMarker;\n\npublic class IntervalMarkerWrapper {\n    private IntervalMarker marker;\n\n    public IntervalMarkerWrapper(double start, double end) {\n        this.marker = new IntervalMarker(start, end);\n    }\n\n    public void setStartValue(double value) {\n        /* write */ marker.setStartValue(value);\n    }\n\n    public double getStartValue() {\n        return marker.getStartValue();\n    }\n\n    public double getEndValue() {\n        return marker.getEndValue();\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<IntervalMarkerWrapper> intervals;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.intervals = new ArrayList<>();\n    }\n\n    public void addInterval(double start, double end) {\n        IntervalMarkerWrapper interval = new IntervalMarkerWrapper(start, end);\n        intervals.add(interval);\n    }\n\n    public List<IntervalMarkerWrapper> getIntervals() {\n        return intervals;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        Course course = new Course(\"Mathematics\");\n        course.addInterval(0.0, 10.0);\n        course.addInterval(20.0, 30.0);\n\n        // Modify start value of the first interval\n        List<IntervalMarkerWrapper> intervals = course.getIntervals();\n        intervals.get(0).setStartValue(5.0);\n\n        // Read the start value of the first interval\n        /* read */ double startValue = intervals.get(0).getStartValue();\n        System.out.println(\"Course: \" + course.getCourseName() + \", Interval Start Value: \" + startValue);\n\n        // Calculate total range of intervals\n        double totalRange = 0.0;\n        for (IntervalMarkerWrapper interval : intervals) {\n            totalRange += (interval.getEndValue() - interval.getStartValue());\n        }\n        System.out.println(\"Total Range: \" + totalRange);\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.plot.IntervalMarker",
        "write_method": "setStartValue",
        "read_class": "org.jfree.chart.plot.IntervalMarker",
        "read_method": "getStartValue"
    },
    "java_code_simple": "import org.jfree.chart.plot.IntervalMarker;\n\npublic class Main {\n    public static void main(String[] args) {\n        IntervalMarker marker = new IntervalMarker(0.0, 10.0);\n        /* write */ marker.setStartValue(5.0);\n        /* read */ double startValue = marker.getStartValue();\n        System.out.println(startValue);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.plot.IntervalMarker;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        IntervalMarker marker = new IntervalMarker(0.0, 10.0);\n        \n        // Using ArrayList to store markers\n        List<IntervalMarker> markerList = new ArrayList<>();\n        markerList.add(marker);\n\n        // Perform operations on markerList\n        for (IntervalMarker m : markerList) {\n            System.out.println(\"Initial Start Value: \" + m.getStartValue());\n        }\n\n        // Adding more markers\n        IntervalMarker marker2 = new IntervalMarker(20.0, 30.0);\n        markerList.add(marker2);\n\n        // Modifying start value of the first marker\n        /* write */ marker.setStartValue(5.0);\n\n        // Perform operations on markerList again\n        for (IntervalMarker m : markerList) {\n            System.out.println(\"Modified Start Value: \" + m.getStartValue());\n        }\n\n        // Reading the start value of the first marker\n        /* read */ double startValue = marker.getStartValue();\n        System.out.println(\"Read Start Value: \" + startValue);\n\n        // Adding unrelated operations\n        double totalRange = 0.0;\n        for (IntervalMarker m : markerList) {\n            totalRange += (m.getEndValue() - m.getStartValue());\n        }\n        System.out.println(\"Total Range: \" + totalRange);\n    }\n}"
}