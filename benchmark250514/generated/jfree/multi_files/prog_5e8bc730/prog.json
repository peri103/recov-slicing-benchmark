{
    "files": {
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private StudentScores scores = new StudentScores();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.addScore(score);\n    }\n\n    public StudentScores getScores() {\n        return scores;\n    }\n}\n",
        "StudentScores.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class StudentScores {\n    private ArrayList<Integer> scores = new ArrayList<>();\n\n    public void addScore(int score) {\n        /* write */ scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Main.java": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\nimport org.jfree.chart.renderer.category.BarRenderer;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        LineAndShapeRenderer lineRenderer = new LineAndShapeRenderer();\n        \n        // Initialize a course and students\n        Course course = new Course(\"Mathematics\");\n        Student alice = new Student(\"Alice\");\n        Student bob = new Student(\"Bob\");\n        \n        // Enroll students in the course\n        course.enrollStudent(alice);\n        course.enrollStudent(bob);\n        \n        // Add scores to students\n        alice.addScore(85);\n        bob.addScore(90);\n        \n        // Perform some unrelated operations\n        BarRenderer barRenderer = new BarRenderer();\n        barRenderer.setSeriesVisibleInLegend(0, true);\n        \n        // Change visibility of series shapes\n        lineRenderer.setSeriesShapesVisible(0, false);\n        \n        // Read scores from a student\n        List<Integer> aliceScores = alice.getScores().getScores();\n        /* read */ int aliceFirstScore = aliceScores.get(0);\n        \n        System.out.println(\"Alice's first score: \" + aliceFirstScore);\n        \n        // Further unrelated operations\n        boolean legendVisibility = barRenderer.getSeriesVisibleInLegend(0);\n        System.out.println(\"Series legend visibility: \" + legendVisibility);\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "write_method": "setSeriesShapesVisible",
        "read_class": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "read_method": "getSeriesShapesVisible"
    },
    "java_code_simple": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\n\npublic class Main {\n    public static void main(String[] args) {\n        LineAndShapeRenderer renderer = new LineAndShapeRenderer();\n        \n        /* write */ renderer.setSeriesShapesVisible(0, true);\n        \n        /* read */ Boolean isVisible = renderer.getSeriesShapesVisible(0);\n        \n        System.out.println(isVisible);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\nimport org.jfree.chart.renderer.category.BarRenderer;\n\npublic class Main {\n    public static void main(String[] args) {\n        LineAndShapeRenderer lineRenderer = new LineAndShapeRenderer();\n        BarRenderer barRenderer = new BarRenderer();\n        \n        // Initialize some variables for demonstration\n        int seriesIndex = 0;\n        boolean initialVisibility = true;\n        boolean newVisibility = false;\n        \n        // Set the initial visibility for the series shapes\n        lineRenderer.setSeriesShapesVisible(seriesIndex, initialVisibility);\n        barRenderer.setSeriesVisibleInLegend(seriesIndex, true);\n        \n        // Perform some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 integers: \" + sum);\n        \n        // Change visibility of series shapes\n        /* write */ lineRenderer.setSeriesShapesVisible(seriesIndex, newVisibility);\n        \n        // Perform more unrelated operations\n        double product = 1.0;\n        for (double j = 1.0; j < 5.0; j++) {\n            product *= j;\n        }\n        System.out.println(\"Product of first 5 integers: \" + product);\n        \n        // Read the visibility status of the series shapes\n        /* read */ Boolean isVisible = lineRenderer.getSeriesShapesVisible(seriesIndex);\n        \n        System.out.println(\"Series shapes visibility: \" + isVisible);\n        \n        // Further unrelated operations\n        barRenderer.setSeriesVisibleInLegend(seriesIndex, false);\n        boolean legendVisibility = barRenderer.getSeriesVisibleInLegend(seriesIndex);\n        System.out.println(\"Series legend visibility: \" + legendVisibility);\n    }\n}"
}