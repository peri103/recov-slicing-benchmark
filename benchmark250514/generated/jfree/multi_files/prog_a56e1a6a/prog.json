{
    "files": {
        "ChartUtils.java": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.Color;\n\npublic class ChartUtils {\n    private PiePlot plot;\n\n    public ChartUtils() {\n        plot = new PiePlot();\n    }\n\n    public void setSectionOutlineColor(String sectionName, Color color) {\n        /* write */ plot.setSectionOutlinePaint(sectionName, color);\n    }\n\n    public PiePlot getPlot() {\n        return plot;\n    }\n}\n",
        "DataStructures.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class DataStructures {\n    private Map<String, Integer> data;\n\n    public DataStructures() {\n        data = new HashMap<>();\n    }\n\n    public void addData(String key, Integer value) {\n        data.put(key, value);\n    }\n\n    public Integer getData(String key) {\n        return data.get(key);\n    }\n\n    public Map<String, Integer> getAllData() {\n        return data;\n    }\n}\n",
        "Main.java": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.Color;\nimport java.awt.Paint;\n\npublic class Main {\n    public static void main(String[] args) {\n        ChartUtils chartUtils = new ChartUtils();\n        chartUtils.setSectionOutlineColor(\"Section1\", Color.RED);\n\n        DataStructures dataStructures = new DataStructures();\n        dataStructures.addData(\"Math\", 95);\n        dataStructures.addData(\"Science\", 85);\n\n        // Additional unrelated logic\n        int sum = 0;\n        for (Integer value : dataStructures.getAllData().values()) {\n            sum += value;\n        }\n        System.out.println(\"Total score: \" + sum);\n\n        // Reading the outline paint for \"Section1\"\n        PiePlot plot = chartUtils.getPlot();\n        /* read */ Paint paint = plot.getSectionOutlinePaint(\"Section1\");\n\n        // Final output\n        System.out.println(\"Outline paint for Section1: \" + paint);\n    }\n}"
    },
    "pair": {
        "write_class": "org.jfree.chart.plot.PiePlot",
        "write_method": "setSectionOutlinePaint",
        "read_class": "org.jfree.chart.plot.PiePlot",
        "read_method": "getSectionOutlinePaint"
    },
    "java_code_simple": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.Color;\nimport java.awt.Paint;\n\npublic class Main {\n    public static void main(String[] args) {\n        PiePlot plot = new PiePlot();\n        /* write */ plot.setSectionOutlinePaint(\"Section1\", Color.RED);\n        /* read */ Paint paint = plot.getSectionOutlinePaint(\"Section1\");\n        System.out.println(paint);\n    }\n}",
    "java_code_complex": "import org.jfree.chart.plot.PiePlot;\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        PiePlot plot = new PiePlot();\n        Map<String, Color> sectionColors = new HashMap<>();\n        sectionColors.put(\"Section1\", Color.RED);\n        sectionColors.put(\"Section2\", Color.BLUE);\n        sectionColors.put(\"Section3\", Color.GREEN);\n\n        // Set outline paint for all sections\n        for (Map.Entry<String, Color> entry : sectionColors.entrySet()) {\n            plot.setSectionOutlinePaint(entry.getKey(), entry.getValue());\n        }\n\n        // Additional operations to increase complexity\n        int sumOfRGB = 0;\n        for (Color color : sectionColors.values()) {\n            sumOfRGB += color.getRed() + color.getGreen() + color.getBlue();\n        }\n        System.out.println(\"Sum of RGB values: \" + sumOfRGB);\n\n        // Some unrelated logic\n        int factor = 5;\n        int result = 1;\n        for (int i = 1; i <= factor; i++) {\n            result *= i;\n        }\n        System.out.println(\"Factorial of \" + factor + \" is \" + result);\n\n        /* write */ plot.setSectionOutlinePaint(\"Section1\", Color.RED);\n\n        // Additional unrelated logic\n        int maxRGB = 0;\n        for (Color color : sectionColors.values()) {\n            int rgb = color.getRed() + color.getGreen() + color.getBlue();\n            if (rgb > maxRGB) {\n                maxRGB = rgb;\n            }\n        }\n        System.out.println(\"Max RGB sum: \" + maxRGB);\n\n        // Reading the outline paint for \"Section1\"\n        /* read */ Paint paint = plot.getSectionOutlinePaint(\"Section1\");\n\n        // More unrelated operations\n        boolean isPrimaryColor = paint.equals(Color.RED) || paint.equals(Color.BLUE) || paint.equals(Color.GREEN);\n        System.out.println(\"Is the paint a primary color? \" + isPrimaryColor);\n\n        // Final output\n        System.out.println(\"Outline paint for Section1: \" + paint);\n    }\n}"
}