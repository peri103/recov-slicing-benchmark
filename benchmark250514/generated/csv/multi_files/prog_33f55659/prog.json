{
    "files": {
        "CSVUtils.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVUtils {\n    private CSVFormat format;\n\n    public CSVUtils() {\n        /* write */ this.format = CSVFormat.DEFAULT.withTrailingDelimiter();\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n        return new ArrayList<>(parser.getRecords());\n    }\n}",
        "Student.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private int age;\n    private HashMap<String, Integer> nameAgeMap = new HashMap<>();\n\n    public Student(List<CSVRecord> records) {\n        for (CSVRecord record : records) {\n            String name = record.get(\"Name\");\n            int age = Integer.parseInt(record.get(\"Age\"));\n            nameAgeMap.put(name, age);\n        }\n    }\n\n    public boolean isNameSet(CSVRecord record) {\n        /* read */ return record.isSet(\"Name\");\n    }\n\n    public HashMap<String, Integer> getNameAgeMap() {\n        return nameAgeMap;\n    }\n}",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        String csvData = \"Name,Age\\nJohn,30\\nJane,25\\n\";\n        CSVUtils csvUtils = new CSVUtils();\n\n        try {\n            List<CSVRecord> records = csvUtils.parseCSV(csvData);\n            Student student = new Student(records);\n\n            // Example output\n            for (String name : student.getNameAgeMap().keySet()) {\n                System.out.println(name + \" is \" + student.getNameAgeMap().get(name) + \" years old.\");\n            }\n\n            // Check if 'Name' is set in the first record\n            boolean isSet = student.isNameSet(records.get(0));\n            System.out.println(\"Is 'Name' set in the record? \" + isSet);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrailingDelimiter",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat and apply withTrailingDelimiter\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withTrailingDelimiter();\n\n            // Create a sample CSV input\n            String csvData = \"Name,Age\\nJohn,30\\nJane,25\\n\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Read the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if a specific field is set\n            /* read */ boolean isSet = record.isSet(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' set in the record? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat and apply withTrailingDelimiter\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withTrailingDelimiter();\n\n            // Create a sample CSV input\n            String csvData = \"Name,Age\\nJohn,30\\nJane,25\\n\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Create an ArrayList to store CSVRecords\n            ArrayList<CSVRecord> recordsList = new ArrayList<>(parser.getRecords());\n\n            // Create a HashMap to store names and ages\n            HashMap<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Add records to the HashMap\n            for (CSVRecord record : recordsList) {\n                String name = record.get(\"Name\");\n                int age = Integer.parseInt(record.get(\"Age\"));\n                nameAgeMap.put(name, age);\n            }\n\n            // Perform some operations on the HashMap\n            for (String name : nameAgeMap.keySet()) {\n                System.out.println(name + \" is \" + nameAgeMap.get(name) + \" years old.\");\n            }\n\n            // Read the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if a specific field is set\n            /* read */ boolean isSet = record.isSet(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' set in the record? \" + isSet);\n\n            // Additional operations\n            int totalAge = 0;\n            for (int age : nameAgeMap.values()) {\n                totalAge += age;\n            }\n            System.out.println(\"Total age of all persons: \" + totalAge);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}