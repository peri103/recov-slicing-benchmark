{
    "files": {
        "DataStructures.java": "import java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class DataStructures {\n    private ArrayList<String> sampleList = new ArrayList<>();\n    private HashMap<String, Integer> sampleMap = new HashMap<>();\n\n    public DataStructures() {\n        sampleList.add(\"Sample1\");\n        sampleList.add(\"Sample2\");\n\n        sampleMap.put(\"Key1\", 100);\n        sampleMap.put(\"Key2\", 200);\n    }\n\n    public void displayListItems() {\n        for (String item : sampleList) {\n            System.out.println(\"List item: \" + item);\n        }\n    }\n\n    public void displayMapItems() {\n        for (String key : sampleMap.keySet()) {\n            System.out.println(\"Map key: \" + key + \", value: \" + sampleMap.get(key));\n        }\n    }\n}\n",
        "CSVParser.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class CSVParser {\n    private CSVFormat format;\n\n    public CSVParser() {\n        /* write */ format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        return format.parse(new java.io.StringReader(csvData)).getRecords();\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            CSVParser csvParser = new CSVParser();\n            List<CSVRecord> records = csvParser.parseCSV(\"Header1,Header2\\nvalue1,value2\");\n\n            DataStructures dataStructures = new DataStructures();\n            dataStructures.displayListItems();\n            dataStructures.displayMapItems();\n\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n\n                int sum = 0;\n                for (int i = 0; i < 10; i++) {\n                    sum += i;\n                }\n                System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n\n                /* read */ boolean isMapped = record.isMapped(\"HEADER1\");\n                System.out.println(\"Is 'HEADER1' mapped: \" + isMapped);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with ignoring header case\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Create a sample CSVRecord list for demonstration\n            List<CSVRecord> records = format.parse(new java.io.StringReader(\"Header1,Header2\\nvalue1,value2\")).getRecords();\n            \n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                // Check if a field is mapped\n                /* read */ boolean isMapped = record.isMapped(\"HEADER1\");\n                System.out.println(\"Is 'HEADER1' mapped: \" + isMapped);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with ignoring header case\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Create a sample CSVRecord list for demonstration\n            List<CSVRecord> records = format.parse(new java.io.StringReader(\"Header1,Header2\\nvalue1,value2\")).getRecords();\n            \n            // Unrelated code to make the program more complex\n            ArrayList<String> sampleList = new ArrayList<>();\n            sampleList.add(\"Sample1\");\n            sampleList.add(\"Sample2\");\n\n            HashMap<String, Integer> sampleMap = new HashMap<>();\n            sampleMap.put(\"Key1\", 100);\n            sampleMap.put(\"Key2\", 200);\n\n            for (String item : sampleList) {\n                System.out.println(\"List item: \" + item);\n            }\n\n            for (String key : sampleMap.keySet()) {\n                System.out.println(\"Map key: \" + key + \", value: \" + sampleMap.get(key));\n            }\n\n            // Continue with CSV parsing logic\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                \n                // Additional unrelated logic\n                int sum = 0;\n                for (int i = 0; i < 10; i++) {\n                    sum += i;\n                }\n                System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n\n                // Check if a field is mapped\n                /* read */ boolean isMapped = record.isMapped(\"HEADER1\");\n                System.out.println(\"Is 'HEADER1' mapped: \" + isMapped);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}