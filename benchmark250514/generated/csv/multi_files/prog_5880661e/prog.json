{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.ArrayList;\n\npublic class CSVHandler {\n    private CSVFormat format;\n    private String csvContent;\n\n    public CSVHandler() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void initializeFormat() {\n        /* write */ format = format.withCommentMarker('#');\n    }\n\n    public void generateCSVContent() throws Exception {\n        StringWriter writer = new StringWriter();\n        try (CSVPrinter printer = new CSVPrinter(writer, format)) {\n            printer.printComment(\"This is a comment\");\n            printer.printRecord(\"value1\", \"value2\");\n        }\n        csvContent = writer.toString();\n    }\n\n    public ArrayList<String> getComments() throws Exception {\n        ArrayList<String> comments = new ArrayList<>();\n        try (CSVParser parser = CSVParser.parse(new StringReader(csvContent), format)) {\n            for (CSVRecord record : parser) {\n                /* read */ String comment = record.getComment();\n                if (comment != null) {\n                    comments.add(comment);\n                }\n            }\n        }\n        return comments;\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withCommentMarker",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringWriter;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Initialize the CSVFormat with a comment marker\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withCommentMarker('#');\n\n        // Create a CSV string with a comment\n        StringWriter writer = new StringWriter();\n        try (CSVPrinter printer = new CSVPrinter(writer, format)) {\n            printer.printComment(\"This is a comment\");\n            printer.printRecord(\"value1\", \"value2\");\n        }\n\n        // Parse the CSV string\n        String csvContent = writer.toString();\n        try (CSVParser parser = CSVParser.parse(new StringReader(csvContent), format)) {\n            for (CSVRecord record : parser) {\n                /* read */ String comment = record.getComment();\n                if (comment != null) {\n                    System.out.println(comment);\n                }\n            }\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Initialize the CSVFormat with a comment marker\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withCommentMarker('#');\n\n        // Create a CSV string with a comment\n        StringWriter writer = new StringWriter();\n        try (CSVPrinter printer = new CSVPrinter(writer, format)) {\n            printer.printComment(\"This is a comment\");\n            printer.printRecord(\"value1\", \"value2\");\n        }\n\n        // Parse the CSV string\n        String csvContent = writer.toString();\n        try (CSVParser parser = CSVParser.parse(new StringReader(csvContent), format)) {\n            ArrayList<String> comments = new ArrayList<>();\n            ArrayList<ArrayList<String>> records = new ArrayList<>();\n            HashMap<String, Integer> recordSummary = new HashMap<>();\n\n            for (CSVRecord record : parser) {\n                /* read */ String comment = record.getComment();\n                if (comment != null) {\n                    comments.add(comment);\n                }\n\n                ArrayList<String> recordValues = new ArrayList<>();\n                for (String value : record) {\n                    recordValues.add(value);\n                    recordSummary.put(value, recordSummary.getOrDefault(value, 0) + 1);\n                }\n                records.add(recordValues);\n            }\n\n            // Print the comments\n            System.out.println(\"Comments:\");\n            for (String comment : comments) {\n                System.out.println(comment);\n            }\n\n            // Print the records\n            System.out.println(\"Records:\");\n            for (ArrayList<String> record : records) {\n                System.out.println(record);\n            }\n\n            // Print the record summary\n            System.out.println(\"Record Summary:\");\n            for (String key : recordSummary.keySet()) {\n                System.out.println(key + \": \" + recordSummary.get(key));\n            }\n        }\n\n        // Additional complex logic\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            numbers.add(i * i);\n        }\n\n        System.out.println(\"Numbers:\");\n        for (int number : numbers) {\n            System.out.println(number);\n        }\n\n        HashMap<String, String> userMap = new HashMap<>();\n        userMap.put(\"Alice\", \"Admin\");\n        userMap.put(\"Bob\", \"Editor\");\n        userMap.put(\"Charlie\", \"Viewer\");\n\n        System.out.println(\"User Roles:\");\n        for (String user : userMap.keySet()) {\n            System.out.println(user + \": \" + userMap.get(user));\n        }\n    }\n}"
}