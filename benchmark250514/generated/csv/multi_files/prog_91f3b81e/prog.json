{
    "files": {
        "CSVConfig.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfig {\n    private CSVFormat format;\n\n    public CSVConfig() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void configureAllowMissingColumnNames() {\n        /* write */ format = format.withAllowMissingColumnNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Modify the CSVFormat instance using the write method\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Simulate reading a CSVRecord (mocking the record for demonstration purposes)\n        CSVRecord record = new CSVRecord(null, null, format);\n\n        // Use the read method to check if a column is set\n        /* read */ boolean isSet = record.isSet(\"exampleColumn\");\n\n        // Print the result of the read operation\n        System.out.println(isSet);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n\n        // Modify the CSVFormat instance using the write method\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Create a list and populate it with some values\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Column1\");\n        stringList.add(\"Column2\");\n        stringList.add(\"Column3\");\n\n        // Create a HashMap to simulate some unrelated operations\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"Key1\", 100);\n        map.put(\"Key2\", 200);\n        map.put(\"Key3\", 300);\n\n        // Perform some operations on the HashMap\n        int sum = 0;\n        for (String key : map.keySet()) {\n            sum += map.get(key);\n        }\n        System.out.println(\"Sum of values in map: \" + sum);\n\n        // Simulate reading a CSVRecord (mocking the record for demonstration purposes)\n        CSVRecord record = new CSVRecord(null, null, format);\n\n        // Perform some unrelated operations on the list\n        for (String str : stringList) {\n            System.out.println(\"Processing string: \" + str);\n        }\n\n        // Use the read method to check if a column is set\n        /* read */ boolean isSet = record.isSet(\"exampleColumn\");\n\n        // Print the result of the read operation\n        System.out.println(\"Is column set: \" + isSet);\n\n        // Perform more unrelated operations\n        List<Integer> integerList = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            integerList.add(i * 10);\n        }\n        for (int num : integerList) {\n            System.out.println(\"Number: \" + num);\n        }\n    }\n}"
}