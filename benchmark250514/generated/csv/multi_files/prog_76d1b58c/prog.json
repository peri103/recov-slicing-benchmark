{
    "files": {
        "CSVConfig.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfig {\n    private CSVFormat format;\n\n    public CSVConfig() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ format = format.withAllowMissingColumnNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataHandler.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class CSVDataHandler {\n    private List<CSVRecord> records;\n\n    public CSVDataHandler() {\n        records = new ArrayList<>();\n    }\n\n    public void parseData(CSVParser parser) throws IOException {\n        records.addAll(parser.getRecords());\n    }\n\n    public boolean checkFirstRecordConsistency() {\n        if (!records.isEmpty()) {\n            CSVRecord record = records.get(0);\n            /* read */ return record.isConsistent();\n        }\n        return false;\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Configure CSV format\n            CSVConfig config = new CSVConfig();\n            config.configureFormat();\n\n            // Create a CSVParser with the configured format\n            String csvData = \"a,b,c\\n1,2,3\";\n            CSVParser parser = new CSVParser(new StringReader(csvData), config.getFormat());\n\n            // Handle CSV data\n            CSVDataHandler handler = new CSVDataHandler();\n            handler.parseData(parser);\n\n            // Check consistency of the first record\n            boolean isConsistent = handler.checkFirstRecordConsistency();\n            System.out.println(\"Is the first record consistent? \" + isConsistent);\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with allowing missing column names\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withAllowMissingColumnNames(true);\n\n            // Create a CSVParser with the format\n            String csvData = \"a,b,c\\n1,2,3\";\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if the record is consistent\n            /* read */ boolean isConsistent = record.isConsistent();\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with allowing missing column names\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withAllowMissingColumnNames(true);\n\n            // Create a CSVParser with the format\n            String csvData = \"a,b,c\\n1,2,3\";\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Create a list to store records\n            List<CSVRecord> records = new ArrayList<>();\n\n            // Add records to the list\n            records.addAll(parser.getRecords());\n\n            // Perform some operations on records\n            for (CSVRecord rec : records) {\n                System.out.println(\"Record: \" + rec);\n            }\n\n            // Unrelated operations to increase complexity\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of first 10 numbers: \" + sum);\n\n            // Check if the first record is consistent\n            CSVRecord record = records.get(0);\n            /* read */ boolean isConsistent = record.isConsistent();\n            System.out.println(\"Is the first record consistent? \" + isConsistent);\n\n            // Perform more unrelated operations\n            List<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                numbers.add(i * 10);\n            }\n            for (int num : numbers) {\n                System.out.println(\"Number: \" + num);\n            }\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}