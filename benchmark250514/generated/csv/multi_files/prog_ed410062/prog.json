{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ format = format.withTrim();\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVDataProcessor {\n    private CSVRecord record;\n\n    public void parseCSVData(String csvData, CSVConfiguration config) {\n        try {\n            List<CSVRecord> records = config.getFormat()\n                    .withFirstRecordAsHeader()\n                    .parse(new StringReader(csvData))\n                    .getRecords();\n            if (!records.isEmpty()) {\n                record = records.get(0);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean isNameMapped() {\n        if (record != null) {\n            /* read */ return record.isMapped(\"name\");\n        }\n        return false;\n    }\n\n    public String getName() {\n        return record != null ? record.get(\"name\") : null;\n    }\n\n    public int getAge() {\n        return record != null ? Integer.parseInt(record.get(\"age\")) : -1;\n    }\n}\n",
        "Person.java": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Name: \" + name + \", Age: \" + age);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Configure CSV format\n        CSVConfiguration config = new CSVConfiguration();\n        config.configureFormat();\n\n        // Process CSV data\n        CSVDataProcessor processor = new CSVDataProcessor();\n        String csvData = \"name, age, city\\nJohn Doe, 30, New York\\nJane Smith, 25, Los Angeles\";\n        processor.parseCSVData(csvData, config);\n\n        // Create person object from CSV data\n        String name = processor.getName();\n        int age = processor.getAge();\n        Person person = new Person(name, age);\n        person.displayInfo();\n\n        // Check if 'name' is mapped\n        boolean isMapped = processor.isNameMapped();\n        System.out.println(\"Is 'name' mapped: \" + isMapped);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrim",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with trim option\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withTrim();\n\n        // Create a CSVRecord for testing\n        String csvData = \"name, age\\nJohn Doe, 30\";\n        CSVRecord record = null;\n\n        try {\n            List<CSVRecord> records = CSVFormat.DEFAULT\n                    .withFirstRecordAsHeader()\n                    .parse(new StringReader(csvData))\n                    .getRecords();\n            if (!records.isEmpty()) {\n                record = records.get(0);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Ensure the record is not null\n        if (record != null) {\n            /* read */ boolean isMapped = record.isMapped(\"name\");\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with trim option\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withTrim();\n\n        // Create a CSVRecord for testing\n        String csvData = \"name, age, city\\nJohn Doe, 30, New York\\nJane Smith, 25, Los Angeles\";\n        CSVRecord record = null;\n\n        try {\n            List<CSVRecord> records = CSVFormat.DEFAULT\n                    .withFirstRecordAsHeader()\n                    .parse(new StringReader(csvData))\n                    .getRecords();\n            if (!records.isEmpty()) {\n                record = records.get(0);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex logic\n        String[] cities = {\"New York\", \"Los Angeles\", \"Chicago\"};\n        List<String> cityList = Arrays.asList(cities);\n        String selectedCity = \"New York\";\n        \n        if (cityList.contains(selectedCity)) {\n            System.out.println(selectedCity + \" is in the list.\");\n        } else {\n            System.out.println(selectedCity + \" is not in the list.\");\n        }\n\n        // Ensure the record is not null\n        if (record != null) {\n            // Additional logic to process CSVRecord\n            String name = record.get(\"name\");\n            int age = Integer.parseInt(record.get(\"age\"));\n            System.out.println(\"Name: \" + name + \", Age: \" + age);\n\n            // More logic to process data\n            if (age > 20) {\n                System.out.println(name + \" is older than 20.\");\n            } else {\n                System.out.println(name + \" is 20 or younger.\");\n            }\n\n            /* read */ boolean isMapped = record.isMapped(\"name\");\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n        }\n    }\n}"
}