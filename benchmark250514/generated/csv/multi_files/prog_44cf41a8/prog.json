{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        /* write */ this.format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class CSVProcessor {\n    private CSVConfiguration csvConfig;\n    private List<CSVRecord> records;\n\n    public CSVProcessor(CSVConfiguration csvConfig) {\n        this.csvConfig = csvConfig;\n        this.records = new ArrayList<>();\n    }\n\n    public void parseData(String csvData) {\n        try {\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvConfig.getFormat());\n            this.records = parser.getRecords();\n            parser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n}\n",
        "RecordAnalyzer.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class RecordAnalyzer {\n    private List<CSVRecord> records;\n\n    public RecordAnalyzer(List<CSVRecord> records) {\n        this.records = records;\n    }\n\n    public void analyzeRecords() {\n        for (CSVRecord record : records) {\n            System.out.println(\"Analyzing record for: \" + record.get(0));\n        }\n    }\n\n    public boolean checkConsistency(int index) {\n        /* read */ return records.get(index).isConsistent();\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CSVConfiguration config = new CSVConfiguration();\n        CSVProcessor processor = new CSVProcessor(config);\n\n        String csvData = \"name,age\\nJohn,30\\nJane,\\nDoe,25\";\n        processor.parseData(csvData);\n\n        RecordAnalyzer analyzer = new RecordAnalyzer(processor.getRecords());\n        analyzer.analyzeRecords();\n\n        boolean isConsistent = analyzer.checkConsistency(1);\n        System.out.println(\"Record is consistent: \" + isConsistent);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat and configure it using the write method\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n\n            // Prepare a sample CSV data to parse\n            String csvData = \"name,age\\nJohn,30\\nJane,\\nDoe,25\";\n\n            // Parse the CSV data using the configured format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Retrieve the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Use the read method to check consistency of a record\n            /* read */ boolean isConsistent = records.get(1).isConsistent();\n            \n            // Output the result\n            System.out.println(\"Record is consistent: \" + isConsistent);\n            \n            parser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat and configure it using the write method\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n\n            // Prepare a sample CSV data to parse\n            String csvData = \"name,age\\nJohn,30\\nJane,\\nDoe,25\";\n\n            // Parse the CSV data using the configured format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Retrieve the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional complexity: process the records and store names in a list\n            List<String> names = new ArrayList<>();\n            for (CSVRecord record : records) {\n                names.add(record.get(0));\n            }\n\n            // Perform some operations on the names list\n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n\n            // Use the read method to check consistency of a record\n            /* read */ boolean isConsistent = records.get(1).isConsistent();\n            \n            // Output the result\n            System.out.println(\"Record is consistent: \" + isConsistent);\n            \n            parser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
}