{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ this.format = format.withIgnoreEmptyLines(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVRecordChecker.java": "import org.apache.commons.csv.CSVRecord;\n\npublic class CSVRecordChecker {\n    public boolean checkConsistency(CSVRecord record) {\n        if (record != null) {\n            /* read */ return record.isConsistent();\n        }\n        return false;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Configure CSV format\n        CSVConfiguration csvConfig = new CSVConfiguration();\n        csvConfig.configureFormat();\n\n        // Create a dummy CSVRecord instance for demonstration\n        CSVRecord record = null; // Assuming a record is obtained from a CSV parser\n\n        // Check CSV record consistency\n        CSVRecordChecker recordChecker = new CSVRecordChecker();\n        boolean isConsistent = recordChecker.checkConsistency(record);\n        System.out.println(\"CSVRecord is consistent: \" + isConsistent);\n\n        // Create a course and add students\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(new Student(\"Alice\", 20));\n        course.addStudent(new Student(\"Bob\", 22));\n\n        // Output course details\n        System.out.println(\"Course: \" + course.getCourseName());\n        List<Student> students = course.getStudents();\n        for (Student student : students) {\n            System.out.println(\"Student Name: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreEmptyLines(true);\n        \n        // Create a dummy CSVRecord instance for demonstration\n        CSVRecord record = null; // Assuming a record is obtained from a CSV parser\n\n        // Use the read method on the CSVRecord instance\n        if (record != null) {\n            /* read */ boolean isConsistent = record.isConsistent();\n            System.out.println(isConsistent);\n        } else {\n            System.out.println(\"CSVRecord is null.\");\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a CSVFormat instance\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Use the write method to modify the format\n        /* write */ format = format.withIgnoreEmptyLines(true);\n\n        // Create an ArrayList to demonstrate additional complexity\n        ArrayList<Integer> numbers = new ArrayList<>();\n        \n        // Populate the ArrayList with some numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n        \n        // Perform some operations on the ArrayList\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n        \n        // Create a dummy CSVRecord instance for demonstration\n        CSVRecord record = null; // Assuming a record is obtained from a CSV parser\n        \n        // Perform operations on the numbers list\n        int max = Integer.MIN_VALUE;\n        for (int number : numbers) {\n            if (number > max) {\n                max = number;\n            }\n        }\n        System.out.println(\"Max number: \" + max);\n        \n        // Use the read method on the CSVRecord instance\n        if (record != null) {\n            /* read */ boolean isConsistent = record.isConsistent();\n            System.out.println(\"CSVRecord is consistent: \" + isConsistent);\n        } else {\n            System.out.println(\"CSVRecord is null.\");\n        }\n        \n        // Further operations on the numbers list\n        int min = Integer.MAX_VALUE;\n        for (int number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n        }\n        System.out.println(\"Min number: \" + min);\n        \n        // Demonstrate sorting the list\n        numbers.sort(Integer::compareTo);\n        System.out.println(\"Sorted numbers: \" + numbers);\n    }\n}"
}