{
    "files": {
        "CSVProcessor.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVProcessor {\n    private CSVFormat format;\n\n    public CSVProcessor() {\n        this.format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws Exception {\n        CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n        return parser.getRecords();\n    }\n\n    public boolean checkColumnSet(CSVRecord record, String columnName) {\n        /* read */ return record.isSet(columnName);\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.List;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Student {\n    private HashMap<String, Integer> ageMap = new HashMap<>();\n\n    public void processRecords(List<CSVRecord> records) {\n        for (CSVRecord rec : records) {\n            String name = rec.get(\"Name\");\n            int age = Integer.parseInt(rec.get(\"Age\"));\n            ageMap.put(name, age);\n        }\n    }\n\n    public void printAges() {\n        for (String name : ageMap.keySet()) {\n            int age = ageMap.get(name);\n            System.out.println(name + \" is \" + age + \" years old.\");\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare CSV data\n            String csvData = \"Name, Age, City\\nAlice, 30, New York\\nBob, 25, Los Angeles\";\n\n            // Create CSVProcessor and parse data\n            CSVProcessor csvProcessor = new CSVProcessor();\n            List<CSVRecord> records = csvProcessor.parseCSV(csvData);\n\n            // Process records in Student\n            Student student = new Student();\n            student.processRecords(records);\n            student.printAges();\n\n            // Check if a column is set in the first record\n            CSVRecord record = records.get(0);\n            boolean isSet = csvProcessor.checkColumnSet(record, \"Name\");\n            System.out.println(\"Is 'Name' set in the first record? \" + isSet);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare CSV data\n            String csvData = \"Name, Age, City\\nAlice, 30, New York\\nBob, 25, Los Angeles\";\n            \n            // Configure CSVFormat with write method\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Use read method on the first record\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            \n            // Output the result\n            System.out.println(\"Is 'Name' set in the first record? \" + isSet);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare CSV data\n            String csvData = \"Name, Age, City\\nAlice, 30, New York\\nBob, 25, Los Angeles\";\n            \n            // Configure CSVFormat with write method\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Additional code to make program complex\n            HashMap<String, Integer> ageMap = new HashMap<>();\n            for (CSVRecord rec : records) {\n                String name = rec.get(\"Name\");\n                int age = Integer.parseInt(rec.get(\"Age\"));\n                ageMap.put(name, age);\n            }\n            \n            // Use read method on the first record\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            \n            // Output the result\n            System.out.println(\"Is 'Name' set in the first record? \" + isSet);\n            \n            // More complex operations with the map\n            for (String name : ageMap.keySet()) {\n                int age = ageMap.get(name);\n                System.out.println(name + \" is \" + age + \" years old.\");\n            }\n            \n            // Additional CSV operations\n            CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(\"Name\", \"Age\", \"City\");\n            CSVParser parserWithHeader = CSVParser.parse(new StringReader(csvData), formatWithHeader);\n            List<CSVRecord> recordsWithHeader = parserWithHeader.getRecords();\n            \n            for (CSVRecord recWithHeader : recordsWithHeader) {\n                System.out.println(\"Name: \" + recWithHeader.get(\"Name\"));\n                System.out.println(\"City: \" + recWithHeader.get(\"City\"));\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
}