{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class CSVHandler {\n    private StringWriter writer = new StringWriter();\n    private CSVPrinter csvPrinter;\n    private CSVParser csvParser;\n\n    public CSVHandler() {\n        try {\n            csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withCommentMarker('#'));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void writeComment(String comment) {\n        try {\n            /* write */ csvPrinter.printComment(comment);\n            csvPrinter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String readComment() {\n        try {\n            csvParser = CSVParser.parse(new StringReader(writer.toString()), CSVFormat.DEFAULT.withCommentMarker('#'));\n            List<CSVRecord> records = csvParser.getRecords();\n            for (CSVRecord record : records) {\n                if (record.getComment() != null) {\n                    /* read */ return record.getComment();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (csvParser != null) {\n                    csvParser.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n\n    public void close() {\n        try {\n            if (csvPrinter != null) {\n                csvPrinter.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public ArrayList<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public ArrayList<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // CSV Handler to write and read comments\n        CSVHandler csvHandler = new CSVHandler();\n        csvHandler.writeComment(\"This is a comment\");\n\n        // Creating a course and students\n        Course course = new Course(\"Mathematics\");\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n\n        // Adding grades to students\n        student1.addGrade(85);\n        student1.addGrade(90);\n        student2.addGrade(78);\n        student2.addGrade(82);\n\n        // Adding students to the course\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        // Display course information\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Grades: \" + student.getGrades());\n        }\n\n        // Read and print the comment from CSV\n        String comment = csvHandler.readComment();\n        System.out.println(\"CSV Comment: \" + comment);\n\n        // Close CSV Handler\n        csvHandler.close();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printComment",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringWriter writer = new StringWriter();\n        CSVPrinter csvPrinter = null;\n        CSVParser csvParser = null;\n\n        try {\n            // Initialize CSVPrinter\n            csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withCommentMarker('#'));\n\n            // Write a comment\n            /* write */ csvPrinter.printComment(\"This is a comment\");\n            csvPrinter.flush();\n\n            // Read back the comment\n            csvParser = CSVParser.parse(new StringReader(writer.toString()), CSVFormat.DEFAULT.withCommentMarker('#'));\n            List<CSVRecord> records = csvParser.getRecords();\n            for (CSVRecord record : records) {\n                if (record.getComment() != null) {\n                    // Read the comment\n                    /* read */ String comment = record.getComment();\n                    System.out.println(comment);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (csvPrinter != null) {\n                    csvPrinter.close();\n                }\n                if (csvParser != null) {\n                    csvParser.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringWriter writer = new StringWriter();\n        CSVPrinter csvPrinter = null;\n        CSVParser csvParser = null;\n\n        try {\n            // Initialize CSVPrinter\n            csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withCommentMarker('#'));\n\n            // Write a comment\n            /* write */ csvPrinter.printComment(\"This is a comment\");\n            \n            // Adding additional complexity with unrelated code\n            ArrayList<Integer> list = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                list.add(i * 2);\n            }\n\n            HashMap<String, Integer> map = new HashMap<>();\n            for (int i = 0; i < list.size(); i++) {\n                map.put(\"Key\" + i, list.get(i));\n            }\n\n            for (String key : map.keySet()) {\n                System.out.println(key + \": \" + map.get(key));\n            }\n\n            csvPrinter.flush();\n\n            // Read back the comment\n            csvParser = CSVParser.parse(new StringReader(writer.toString()), CSVFormat.DEFAULT.withCommentMarker('#'));\n            List<CSVRecord> records = csvParser.getRecords();\n            for (CSVRecord record : records) {\n                if (record.getComment() != null) {\n                    // Read the comment\n                    /* read */ String comment = record.getComment();\n                    System.out.println(comment);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (csvPrinter != null) {\n                    csvPrinter.close();\n                }\n                if (csvParser != null) {\n                    csvParser.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
}