{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVHandler {\n    private List<CSVRecord> records = new ArrayList<>();\n    private CSVFormat format;\n\n    public CSVHandler(String csvData) throws IOException {\n        /* write */ format = CSVFormat.DEFAULT.withCommentMarker('#');\n        CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n        for (CSVRecord record : parser) {\n            records.add(record);\n        }\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "DataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DataProcessor {\n    private Map<String, String> dataMap = new HashMap<>();\n\n    public void processRecords(List<CSVRecord> records) {\n        for (CSVRecord record : records) {\n            String header1Value = record.get(\"header1\");\n            String header2Value = record.get(\"header2\");\n            dataMap.put(header1Value, header2Value);\n        }\n    }\n\n    public void printDataMap() {\n        for (Map.Entry<String, String> entry : dataMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            \n            CSVHandler csvHandler = new CSVHandler(csvData);\n            DataProcessor dataProcessor = new DataProcessor();\n            \n            List<CSVRecord> records = csvHandler.getRecords();\n            dataProcessor.processRecords(records);\n            dataProcessor.printDataMap();\n            \n            /* read */ String comment = records.get(0).getComment();\n            if (comment != null) {\n                System.out.println(\"Comment: \" + comment);\n            } else {\n                System.out.println(\"No comment found.\");\n            }\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withCommentMarker",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a comment marker\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            \n            // Sample CSV data with a comment\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Iterate over the records\n            for (CSVRecord record : parser) {\n                // Read the comment\n                /* read */ String comment = record.getComment();\n                if (comment != null) {\n                    System.out.println(\"Comment: \" + comment);\n                } else {\n                    System.out.println(\"Record: \" + record);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a comment marker\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            \n            // Sample CSV data with a comment\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Create a collection to store records\n            ArrayList<CSVRecord> recordList = new ArrayList<>();\n            \n            // Iterate over the records and store them\n            for (CSVRecord record : parser) {\n                recordList.add(record);\n            }\n            \n            // Process records and store data in a map\n            Map<String, String> dataMap = new HashMap<>();\n            for (CSVRecord record : recordList) {\n                String header1Value = record.get(\"header1\");\n                String header2Value = record.get(\"header2\");\n                dataMap.put(header1Value, header2Value);\n            }\n            \n            // Perform some operations on the data map\n            for (Map.Entry<String, String> entry : dataMap.entrySet()) {\n                System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n            }\n            \n            // Read the comment from the first record\n            /* read */ String comment = recordList.get(0).getComment();\n            if (comment != null) {\n                System.out.println(\"Comment: \" + comment);\n            } else {\n                System.out.println(\"No comment found.\");\n            }\n            \n            // Additional complex operations\n            int sum = 0;\n            for (CSVRecord record : recordList) {\n                sum += record.get(0).length();\n            }\n            System.out.println(\"Sum of lengths of first column values: \" + sum);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}