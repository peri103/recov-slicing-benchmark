{
    "files": {
        "CommentWriter.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport java.io.IOException;\nimport java.io.StringWriter;\n\npublic class CommentWriter {\n    private StringWriter writer = new StringWriter();\n    private CSVPrinter printer;\n\n    public CommentWriter() throws IOException {\n        CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n        printer = new CSVPrinter(writer, format);\n    }\n\n    public void writeComment(String comment) throws IOException {\n        /* write */ printer.printComment(comment);\n        printer.flush();\n    }\n\n    public String getCsvContent() {\n        return writer.toString();\n    }\n}",
        "CommentReader.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CommentReader {\n    public String readComment(String csvContent) throws IOException {\n        StringReader reader = new StringReader(csvContent);\n        List<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(reader).getRecords();\n\n        String comment = null;\n        for (CSVRecord record : records) {\n            comment = /* read */ record.getComment();\n            if (comment != null) break;\n        }\n        return comment;\n    }\n}",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "Main.java": "import java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // CSV comment writing and reading\n            CommentWriter commentWriter = new CommentWriter();\n            commentWriter.writeComment(\"This is a comment\");\n\n            CommentReader commentReader = new CommentReader();\n            String comment = commentReader.readComment(commentWriter.getCsvContent());\n            System.out.println(\"Comment: \" + comment);\n\n            // Student score management\n            Student student = new Student(\"John Doe\");\n            student.addScore(85);\n            student.addScore(92);\n            student.addScore(78);\n\n            System.out.println(\"Scores for \" + student.getName() + \": \" + student.getScores());\n\n            // Additional logic for processing scores\n            int total = 0;\n            for (int score : student.getScores()) {\n                total += score;\n            }\n            double average = (double) total / student.getScores().size();\n            System.out.println(\"Average score: \" + average);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printComment",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write a comment to the CSV\n            /* write */ printer.printComment(\"This is a comment\");\n            printer.flush();\n\n            // Read the comment back from the CSV\n            String csvContent = writer.toString();\n            StringReader reader = new StringReader(csvContent);\n            List<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(reader).getRecords();\n\n            // Assuming the comment is associated with the first record\n            // This is a simplification, as CSV does not directly store comments with records\n            String comment = null;\n            for (CSVRecord record : records) {\n                comment = /* read */ record.getComment();\n                if (comment != null) break;\n            }\n\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write a comment to the CSV\n            /* write */ printer.printComment(\"This is a comment\");\n            printer.flush();\n\n            // Additional complex logic\n            ArrayList<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * i);\n            }\n\n            int sum = 0;\n            for (int number : numbers) {\n                sum += number;\n            }\n            System.out.println(\"Sum of squares: \" + sum);\n\n            // More complex operations\n            ArrayList<String> words = new ArrayList<>();\n            words.add(\"apple\");\n            words.add(\"banana\");\n            words.add(\"cherry\");\n\n            StringBuilder concatenatedWords = new StringBuilder();\n            for (String word : words) {\n                concatenatedWords.append(word).append(\" \");\n            }\n            System.out.println(\"Concatenated words: \" + concatenatedWords.toString().trim());\n\n            // Read the comment back from the CSV\n            String csvContent = writer.toString();\n            StringReader reader = new StringReader(csvContent);\n            List<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(reader).getRecords();\n\n            // Assuming the comment is associated with the first record\n            // This is a simplification, as CSV does not directly store comments with records\n            String comment = null;\n            for (CSVRecord record : records) {\n                comment = /* read */ record.getComment();\n                if (comment != null) break;\n            }\n\n            System.out.println(\"Comment: \" + comment);\n\n            // Additional logic for processing numbers\n            int max = Integer.MIN_VALUE;\n            for (int number : numbers) {\n                if (number > max) {\n                    max = number;\n                }\n            }\n            System.out.println(\"Max square: \" + max);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}