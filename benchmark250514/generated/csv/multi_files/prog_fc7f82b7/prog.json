{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class CSVHandler {\n    private CSVFormat format;\n    private List<CSVRecord> records;\n\n    public CSVHandler(String csvData) throws IOException {\n        format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n        CSVParser parser = new CSVParser(new StringReader(csvData), format);\n        records = parser.getRecords();\n        parser.close();\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Student {\n    private String name;\n    private int age;\n    private Map<String, Integer> courseScores;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.courseScores = new HashMap<>();\n    }\n\n    public void addCourseScore(String course, int score) {\n        courseScores.put(course, score);\n    }\n\n    public int getCourseScore(String course) {\n        return courseScores.getOrDefault(course, 0);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import java.io.IOException;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"# This is a header comment\\nName, Age\\nJohn, 30\\nDoe, 25\";\n            CSVHandler csvHandler = new CSVHandler(csvData);\n            for (CSVRecord rec : csvHandler.getRecords()) {\n                if (!rec.get(0).equals(\"Name\")) { // Skip header\n                    String name = rec.get(0);\n                    int age = Integer.parseInt(rec.get(1));\n                    Student student = new Student(name, age);\n                    student.addCourseScore(\"Math\", 85);\n                    student.addCourseScore(\"Science\", 90);\n                    System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n                    System.out.println(\"Math Score: \" + student.getCourseScore(\"Math\"));\n                    System.out.println(\"Science Score: \" + student.getCourseScore(\"Science\"));\n                }\n            }\n\n            // Read the comment from the first record\n            CSVRecord record = csvHandler.getRecords().get(0);\n            /* read */ String comment = record.getComment();\n            System.out.println(\"Header Comment: \" + comment);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV format with header comments\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n            // Sample CSV input string\n            String csvData = \"# This is a header comment\\nName, Age\\nJohn, 30\\nDoe, 25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read the comment from the first record\n            CSVRecord record = records.get(0);\n            /* read */ String comment = record.getComment();\n            System.out.println(comment);\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV format with header comments\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n            // Sample CSV input string\n            String csvData = \"# This is a header comment\\nName, Age\\nJohn, 30\\nDoe, 25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional code to process CSV records and store in a map\n            Map<String, Integer> nameToAgeMap = new HashMap<>();\n            for (CSVRecord rec : records) {\n                if (!rec.get(0).equals(\"Name\")) { // Skip header\n                    String name = rec.get(0);\n                    int age = Integer.parseInt(rec.get(1));\n                    nameToAgeMap.put(name, age);\n                }\n            }\n\n            // Perform some operations on the map\n            int totalAge = 0;\n            for (int age : nameToAgeMap.values()) {\n                totalAge += age;\n            }\n            double averageAge = (double) totalAge / nameToAgeMap.size();\n            System.out.println(\"Average Age: \" + averageAge);\n\n            // Read the comment from the first record\n            CSVRecord record = records.get(0);\n            /* read */ String comment = record.getComment();\n            System.out.println(\"Header Comment: \" + comment);\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}