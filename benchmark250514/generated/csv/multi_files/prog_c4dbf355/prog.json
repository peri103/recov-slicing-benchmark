{
    "files": {
        "CSVHelper.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVHelper {\n    private CSVFormat format;\n\n    public CSVHelper() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        // Write operation: configure the format to ignore header case\n        /* write */ format = format.withIgnoreHeaderCase();\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        CSVParser parser = new CSVParser(new StringReader(csvData), format);\n        return parser.getRecords();\n    }\n}\n",
        "RecordProcessor.java": "import org.apache.commons.csv.CSVRecord;\n\nimport java.util.List;\n\npublic class RecordProcessor {\n    private List<CSVRecord> records;\n\n    public RecordProcessor(List<CSVRecord> records) {\n        this.records = records;\n    }\n\n    public void printRecords() {\n        for (CSVRecord record : records) {\n            String name = record.get(\"Name\");\n            String age = record.get(\"Age\");\n            String location = record.get(\"Location\");\n            System.out.println(\"Name: \" + name + \", Age: \" + age + \", Location: \" + location);\n        }\n    }\n\n    public double calculateAverageAge() {\n        int totalAge = 0;\n        for (CSVRecord record : records) {\n            totalAge += Integer.parseInt(record.get(\"Age\"));\n        }\n        return totalAge / (double) records.size();\n    }\n\n    public boolean isNameMappedInFirstRecord() {\n        CSVRecord firstRecord = records.get(0);\n        // Read operation: check if the record is mapped for 'name'\n        /* read */ return firstRecord.isMapped(\"name\");\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSV data as a string\n        String csvData = \"Name, Age, Location\\nJohn Doe, 28, USA\\nJane Smith, 34, UK\";\n\n        CSVHelper csvHelper = new CSVHelper();\n        csvHelper.configureFormat();\n\n        try {\n            List<CSVRecord> records = csvHelper.parseCSV(csvData);\n\n            RecordProcessor processor = new RecordProcessor(records);\n            processor.printRecords();\n\n            double averageAge = processor.calculateAverageAge();\n            System.out.println(\"Average Age: \" + averageAge);\n\n            boolean isNameMapped = processor.isNameMappedInFirstRecord();\n            System.out.println(\"Is 'name' mapped in the first record: \" + isNameMapped);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSV data as a string\n        String csvData = \"Name, Age, Location\\nJohn Doe, 28, USA\";\n\n        try {\n            // Create a CSVFormat object and configure it to ignore header case\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Retrieve the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Get the first record (assuming there is at least one record)\n            CSVRecord record = records.get(0);\n\n            // Write operation: configure the format to ignore header case\n            /* write */ format = format.withIgnoreHeaderCase();\n\n            // Read operation: check if the record is mapped\n            /* read */ boolean isMapped = record.isMapped(\"name\");\n\n            // Output the result\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSV data as a string\n        String csvData = \"Name, Age, Location\\nJohn Doe, 28, USA\\nJane Smith, 34, UK\";\n\n        try {\n            // Create a CSVFormat object and configure it to ignore header case\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Retrieve the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Process each record and print details\n            for (CSVRecord record : records) {\n                String name = record.get(\"Name\");\n                String age = record.get(\"Age\");\n                String location = record.get(\"Location\");\n                System.out.println(\"Name: \" + name + \", Age: \" + age + \", Location: \" + location);\n            }\n\n            // Write operation: configure the format to ignore header case\n            /* write */ format = format.withIgnoreHeaderCase();\n\n            // Additional processing: calculate average age\n            int totalAge = 0;\n            for (CSVRecord record : records) {\n                totalAge += Integer.parseInt(record.get(\"Age\"));\n            }\n            double averageAge = totalAge / (double) records.size();\n            System.out.println(\"Average Age: \" + averageAge);\n\n            // Check if a specific column is mapped in the first record\n            CSVRecord firstRecord = records.get(0);\n\n            // Additional processing: print mapped status for all columns\n            for (String column : firstRecord.toMap().keySet()) {\n                boolean isMapped = firstRecord.isMapped(column);\n                System.out.println(\"Is '\" + column + \"' mapped: \" + isMapped);\n            }\n\n            // Read operation: check if the record is mapped for 'name'\n            /* read */ boolean isNameMapped = firstRecord.isMapped(\"name\");\n\n            // Output the result for the read operation\n            System.out.println(\"Is 'name' mapped in the first record: \" + isNameMapped);\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}