{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat format;\n\n    public CSVHandler() {\n        // Initialize CSVFormat with the write method\n        format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true); /* write */\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        CSVParser parser = new CSVParser(new StringReader(csvData), format);\n        return parser.getRecords();\n    }\n}\n",
        "Person.java": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            CSVHandler csvHandler = new CSVHandler();\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nDoe,25\";\n\n            // Parse CSV data\n            List<CSVRecord> records = csvHandler.parseCSV(csvData);\n\n            // Create list of Person objects\n            List<Person> people = new ArrayList<>();\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                people.add(new Person(name, age));\n            }\n\n            // Perform operations on the list of Person objects\n            for (Person person : people) {\n                System.out.println(person.getName() + \" is \" + person.getAge() + \" years old.\");\n            }\n\n            // Use the read method to check if a field is set\n            CSVRecord firstRecord = records.get(0);\n            boolean isSet = firstRecord.isSet(\"name\"); /* read */\n\n            // Output the result\n            System.out.println(\"Is 'name' field set in the first record? \" + isSet);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true); /* write */\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nDoe,25\";\n\n            // Parse the CSV data using the initialized format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Read the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Use the read method to check if a field is set\n            boolean isSet = record.isSet(\"name\"); /* read */\n\n            // Output the result\n            System.out.println(\"Is 'name' field set in the first record? \" + isSet);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true); /* write */\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nDoe,25\";\n\n            // Parse the CSV data using the initialized format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Additional unrelated operations to increase complexity\n            ArrayList<String> names = new ArrayList<>();\n            HashMap<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Populate the ArrayList and HashMap with CSV data\n            for (CSVRecord rec : parser) {\n                String name = rec.get(\"name\");\n                int age = Integer.parseInt(rec.get(\"age\"));\n                names.add(name);\n                nameAgeMap.put(name, age);\n            }\n\n            // Perform some operations on the ArrayList\n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n\n            // Perform some operations on the HashMap\n            for (String name : nameAgeMap.keySet()) {\n                System.out.println(name + \" is \" + nameAgeMap.get(name) + \" years old.\");\n            }\n\n            // Read the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Use the read method to check if a field is set\n            boolean isSet = record.isSet(\"name\"); /* read */\n\n            // Output the result\n            System.out.println(\"Is 'name' field set in the first record? \" + isSet);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}