{
    "files": {
        "CSVUtility.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class CSVUtility {\n    private CSVFormat format;\n    private List<CSVRecord> records;\n\n    public CSVUtility(String csvData) throws IOException {\n        /* write */ this.format = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n        CSVParser parser = new CSVParser(new StringReader(csvData), format);\n        this.records = parser.getRecords();\n        parser.close();\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n    private String location;\n\n    public Student(String name, int age, String location) {\n        this.name = name;\n        this.age = age;\n        this.location = location;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n}\n",
        "StudentManager.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class StudentManager {\n    private ArrayList<Student> students = new ArrayList<>();\n    private HashMap<String, Integer> ageMap = new HashMap<>();\n\n    public void addStudent(String name, int age, String location) {\n        students.add(new Student(name, age, location));\n        ageMap.put(name, age);\n    }\n\n    public ArrayList<Student> getStudents() {\n        return students;\n    }\n\n    public void processCSVRecords(List<CSVRecord> records) {\n        for (CSVRecord rec : records) {\n            addStudent(rec.get(\"Name\"), Integer.parseInt(rec.get(\"Age\")), rec.get(\"Location\"));\n        }\n    }\n\n    public void printStudentDetails() {\n        for (Student student : students) {\n            System.out.println(\"Processing: \" + student.getName());\n            if (ageMap.containsKey(student.getName())) {\n                System.out.println(student.getName() + \" is \" + ageMap.get(student.getName()) + \" years old.\");\n            }\n        }\n    }\n}\n",
        "Main.java": "import java.io.IOException;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Sample CSV data\n            String csvData = \"Name,Age,Location\\nJohn,30,USA\\nJane,25,UK\";\n\n            // Initialize CSV utility\n            CSVUtility csvUtility = new CSVUtility(csvData);\n\n            // Initialize student manager and process CSV records\n            StudentManager manager = new StudentManager();\n            manager.processCSVRecords(csvUtility.getRecords());\n\n            // Perform operations on the student data\n            manager.printStudentDetails();\n\n            // Get the first record\n            CSVRecord record = csvUtility.getRecords().get(0);\n\n            // Check if 'Name' is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' mapped: \" + isMapped);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withFirstRecordAsHeader",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n            \n            // Sample CSV data\n            String csvData = \"Name,Age,Location\\nJohn,30,USA\\nJane,25,UK\";\n            \n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            \n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n            \n            // Check if 'Name' is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n            \n            // Output the result\n            System.out.println(\"Is 'Name' mapped: \" + isMapped);\n            \n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n            \n            // Sample CSV data\n            String csvData = \"Name,Age,Location\\nJohn,30,USA\\nJane,25,UK\";\n            \n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            \n            // Perform some unrelated operations to increase complexity\n            ArrayList<String> names = new ArrayList<>();\n            HashMap<String, Integer> ageMap = new HashMap<>();\n            for (CSVRecord rec : parser.getRecords()) {\n                names.add(rec.get(\"Name\"));\n                ageMap.put(rec.get(\"Name\"), Integer.parseInt(rec.get(\"Age\")));\n            }\n            \n            // Perform operations on the unrelated data\n            for (String name : names) {\n                System.out.println(\"Processing: \" + name);\n                if (ageMap.containsKey(name)) {\n                    System.out.println(name + \" is \" + ageMap.get(name) + \" years old.\");\n                }\n            }\n            \n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n            \n            // Check if 'Name' is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n            \n            // Output the result\n            System.out.println(\"Is 'Name' mapped: \" + isMapped);\n            \n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}