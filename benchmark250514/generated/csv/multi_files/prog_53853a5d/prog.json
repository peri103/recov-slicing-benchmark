{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat csvFormat;\n\n    public CSVHandler() {\n        /* write */ this.csvFormat = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        StringReader reader = new StringReader(csvData);\n        return csvFormat.parse(reader).getRecords();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public ArrayList<Integer> getGrades() {\n        return grades;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public ArrayList<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a course and add students\n        Course course = new Course(\"Computer Science\");\n        Student alice = new Student(\"Alice\");\n        Student bob = new Student(\"Bob\");\n        course.addStudent(alice);\n        course.addStudent(bob);\n\n        // Add grades to students\n        alice.addGrade(85);\n        bob.addGrade(90);\n\n        // Print student grades\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Grades for \" + student.getGrades());\n        }\n\n        // Use CSVHandler to parse CSV data\n        CSVHandler csvHandler = new CSVHandler();\n        String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n\n        try {\n            List<CSVRecord> records = csvHandler.parseCSV(csvData);\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(\"CSV Comment: \" + comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n            // Simulate reading a CSV record\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            StringReader reader = new StringReader(csvData);\n            List<CSVRecord> records = csvFormat.parse(reader).getRecords();\n            \n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                // Read the comment from the CSVRecord\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n            // Simulate reading a CSV record\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            StringReader reader = new StringReader(csvData);\n            List<CSVRecord> records = csvFormat.parse(reader).getRecords();\n            \n            // Additional complex logic\n            ArrayList<Integer> numberList = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numberList.add(i * 2);\n            }\n\n            int sum = 0;\n            for (int num : numberList) {\n                sum += num;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                \n                // More complex operations\n                ArrayList<String> stringList = new ArrayList<>();\n                stringList.add(\"Hello\");\n                stringList.add(\"World\");\n                \n                StringBuilder concatenatedString = new StringBuilder();\n                for (String str : stringList) {\n                    concatenatedString.append(str).append(\" \");\n                }\n                System.out.println(\"Concatenated String: \" + concatenatedString.toString().trim());\n                \n                // Read the comment from the CSVRecord\n                /* read */ String comment = record.getComment();\n                System.out.println(\"CSV Comment: \" + comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}