{
    "files": {
        "CSVUtils.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVUtils {\n    private CSVFormat format;\n\n    public CSVUtils() {\n        // Initialize CSVFormat with the write method\n        /* write */ format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws Exception {\n        CSVParser parser = new CSVParser(new StringReader(csvData), format);\n        return parser.getRecords();\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Student {\n    private String name;\n    private int age;\n    private static Map<String, Integer> nameAgeMap = new HashMap<>();\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        nameAgeMap.put(name, age);\n    }\n\n    public static void calculateAverageAge() {\n        int totalAge = 0;\n        for (int age : nameAgeMap.values()) {\n            totalAge += age;\n        }\n        double averageAge = totalAge / (double) nameAgeMap.size();\n        System.out.println(\"Average Age: \" + averageAge);\n    }\n\n    public static void printNames() {\n        System.out.println(\"Names:\");\n        for (String name : nameAgeMap.keySet()) {\n            System.out.println(name);\n        }\n    }\n\n    public static boolean checkIsMapped(List<CSVRecord> records) {\n        // Read the first record using the read method\n        CSVRecord record = records.get(0);\n        /* read */ return record.isMapped(\"name\");\n    }\n}\n",
        "Main.java": "import java.util.List;\nimport org.apache.commons.csv.CSVRecord;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create CSVUtils instance and parse CSV data\n            CSVUtils csvUtils = new CSVUtils();\n            String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n            List<CSVRecord> records = csvUtils.parseCSV(csvData);\n\n            // Create Student instances\n            new Student(\"John Doe\", 30);\n            new Student(\"Jane Smith\", 25);\n\n            // Calculate average age and print names\n            Student.calculateAverageAge();\n            Student.printNames();\n\n            // Check if 'name' is mapped in the CSV records\n            boolean isMapped = Student.checkIsMapped(records);\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Create a sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read the first record using the read method\n            CSVRecord record = records.get(0);\n            /* read */ boolean isMapped = record.isMapped(\"name\");\n\n            // Output the result\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n\n            // Close the parser\n            parser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Create a sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Unrelated code: Creating a map to store name-age pairs\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n            for (CSVRecord rec : records) {\n                String name = rec.get(\"Name\");\n                int age = Integer.parseInt(rec.get(\"Age\"));\n                nameAgeMap.put(name, age);\n            }\n\n            // More unrelated code: Calculate average age\n            int totalAge = 0;\n            for (int age : nameAgeMap.values()) {\n                totalAge += age;\n            }\n            double averageAge = totalAge / (double) nameAgeMap.size();\n            System.out.println(\"Average Age: \" + averageAge);\n\n            // Unrelated code: Print all names\n            System.out.println(\"Names in CSV:\");\n            for (String name : nameAgeMap.keySet()) {\n                System.out.println(name);\n            }\n\n            // Read the first record using the read method\n            CSVRecord record = records.get(0);\n            /* read */ boolean isMapped = record.isMapped(\"name\");\n\n            // Output the result\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n\n            // Close the parser\n            parser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
}