{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport java.io.StringWriter;\nimport java.io.IOException;\n\npublic class CSVHandler {\n    private StringWriter writer = new StringWriter();\n    private CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n    private CSVPrinter csvPrinter;\n\n    public CSVHandler() throws IOException {\n        csvPrinter = new CSVPrinter(writer, format);\n    }\n\n    public void addComment(String comment) throws IOException {\n        /* write */ csvPrinter.printComment(comment);\n        csvPrinter.flush();\n    }\n\n    public String getCSVData() {\n        return writer.toString();\n    }\n}\n",
        "CSVReader.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class CSVReader {\n    public String readComment(String csvData) throws IOException {\n        List<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(new java.io.StringReader(csvData)).getRecords();\n        CSVRecord record = records.get(0);\n        /* read */ return record.getComment();\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public ArrayList<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            CSVHandler csvHandler = new CSVHandler();\n            csvHandler.addComment(\"This is a comment\");\n\n            CSVReader csvReader = new CSVReader();\n            String comment = csvReader.readComment(csvHandler.getCSVData());\n            System.out.println(comment);\n\n            // Additional complexity with Course and Student\n            Course course = new Course(\"Computer Science\");\n            Student student1 = new Student(\"Alice\");\n            Student student2 = new Student(\"Bob\");\n\n            course.enrollStudent(student1);\n            course.enrollStudent(student2);\n\n            for (Student student : course.getEnrolledStudents()) {\n                System.out.println(\"Enrolled student: \" + student.getName());\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printComment",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            StringWriter writer = new StringWriter();\n            CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            CSVPrinter csvPrinter = new CSVPrinter(writer, format);\n\n            /* write */ csvPrinter.printComment(\"This is a comment\");\n\n            csvPrinter.flush();\n            String csvData = writer.toString();\n\n            List<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(new java.io.StringReader(csvData)).getRecords();\n            CSVRecord record = records.get(0);\n            /* read */ String comment = record.getComment();\n\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            StringWriter writer = new StringWriter();\n            CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            CSVPrinter csvPrinter = new CSVPrinter(writer, format);\n\n            /* write */ csvPrinter.printComment(\"This is a comment\");\n\n            csvPrinter.flush();\n            String csvData = writer.toString();\n\n            // Adding some unrelated complex operations\n            ArrayList<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * 2);\n            }\n\n            int sum = 0;\n            for (int num : numbers) {\n                sum += num;\n            }\n            System.out.println(\"Sum of even numbers: \" + sum);\n\n            List<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(new java.io.StringReader(csvData)).getRecords();\n            CSVRecord record = records.get(0);\n\n            // More unrelated complex operations\n            int max = Integer.MIN_VALUE;\n            for (int num : numbers) {\n                if (num > max) {\n                    max = num;\n                }\n            }\n            System.out.println(\"Maximum value: \" + max);\n\n            /* read */ String comment = record.getComment();\n            System.out.println(comment);\n\n            // Additional operations for complexity\n            ArrayList<String> strings = new ArrayList<>();\n            strings.add(\"Hello\");\n            strings.add(\"World\");\n            strings.add(\"!\");\n\n            StringBuilder builder = new StringBuilder();\n            for (String str : strings) {\n                builder.append(str).append(\" \");\n            }\n            System.out.println(\"Concatenated string: \" + builder.toString().trim());\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}