{
    "files": {
        "CSVProcessor.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class CSVProcessor {\n    private CSVFormat csvFormat;\n    private StringWriter writer = new StringWriter();\n    private CSVPrinter csvPrinter;\n\n    public CSVProcessor() throws IOException {\n        // Initialize CSVFormat with a specific delimiter\n        /* write */ this.csvFormat = CSVFormat.DEFAULT.withDelimiter(';');\n        this.csvPrinter = new CSVPrinter(writer, csvFormat);\n    }\n\n    public void writeData(List<String> data) throws IOException {\n        csvPrinter.printRecord(data);\n        csvPrinter.flush();\n    }\n\n    public String getCSVOutput() {\n        return writer.toString();\n    }\n}\n",
        "CSVReader.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class CSVReader {\n\n    public String readFirstRecord(String csvData) throws IOException {\n        CSVRecord csvRecord = CSVFormat.DEFAULT.parse(new StringReader(csvData)).getRecords().get(0);\n        /* read */ return csvRecord.toString();\n    }\n}\n",
        "Main.java": "import java.util.Arrays;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            CSVProcessor csvProcessor = new CSVProcessor();\n            csvProcessor.writeData(Arrays.asList(\"value1\", \"value2\", \"value3\"));\n\n            // Additional complex operations\n            csvProcessor.writeData(Arrays.asList(\"extra1\", \"extra2\", \"extra3\"));\n\n            // Perform some unrelated operations\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n            // Read CSV data\n            CSVReader csvReader = new CSVReader();\n            String firstRecord = csvReader.readFirstRecord(csvProcessor.getCSVOutput());\n\n            // Print the first CSV record\n            System.out.println(\"First CSV Record: \" + firstRecord);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withDelimiter",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a specific delimiter\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withDelimiter(';');\n            \n            // Prepare a StringWriter to capture the CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Use CSVPrinter to write data using the specified format\n            CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n            csvPrinter.printRecord(Arrays.asList(\"value1\", \"value2\", \"value3\"));\n            csvPrinter.flush();\n            \n            // Read the output using CSVRecord\n            String csvOutput = writer.toString();\n            CSVRecord csvRecord = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvOutput)).getRecords().get(0);\n            \n            // Print the CSVRecord using the toString method\n            /* read */ String recordString = csvRecord.toString();\n            System.out.println(recordString);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a specific delimiter\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withDelimiter(';');\n            \n            // Prepare a StringWriter to capture the CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Use CSVPrinter to write data using the specified format\n            CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n            csvPrinter.printRecord(Arrays.asList(\"value1\", \"value2\", \"value3\"));\n            csvPrinter.flush();\n            \n            // Additional complex operations\n            List<String> additionalData = Arrays.asList(\"extra1\", \"extra2\", \"extra3\");\n            for (String data : additionalData) {\n                csvPrinter.printRecord(data);\n            }\n            csvPrinter.flush();\n            \n            // Perform some unrelated operations\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n            \n            // Another CSV operation with different format\n            CSVFormat anotherFormat = CSVFormat.EXCEL.withDelimiter(',');\n            StringWriter anotherWriter = new StringWriter();\n            CSVPrinter anotherCsvPrinter = new CSVPrinter(anotherWriter, anotherFormat);\n            anotherCsvPrinter.printRecord(Arrays.asList(\"item1\", \"item2\", \"item3\"));\n            anotherCsvPrinter.flush();\n            System.out.println(\"Another CSV output: \" + anotherWriter.toString());\n            \n            // Read the output using CSVRecord\n            String csvOutput = writer.toString();\n            CSVRecord csvRecord = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvOutput)).getRecords().get(0);\n            \n            // Print the CSVRecord using the toString method\n            /* read */ String recordString = csvRecord.toString();\n            System.out.println(recordString);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}