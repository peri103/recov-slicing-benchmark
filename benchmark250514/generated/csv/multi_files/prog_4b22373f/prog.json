{
    "files": {
        "CSVHelper.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVHelper {\n    private CSVFormat format;\n    \n    public CSVHelper() {\n        // Create a CSVFormat instance with ignore surrounding spaces\n        /* write */ format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n    }\n    \n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        CSVParser parser = new CSVParser(new StringReader(csvData), format);\n        List<CSVRecord> records = parser.getRecords();\n        parser.close();\n        return records;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private int age;\n    private List<Course> courses = new ArrayList<>();\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void enrollInCourse(Course course) {\n        courses.add(course);\n    }\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "public class Course {\n    private String courseName;\n    private int credits;\n\n    public Course(String courseName, int credits) {\n        this.courseName = courseName;\n        this.credits = credits;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public int getCredits() {\n        return credits;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"name, age\\nAlice, 30\\nBob, 25\";\n            \n            CSVHelper csvHelper = new CSVHelper();\n            List<CSVRecord> records = csvHelper.parseCSV(csvData);\n\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                Student student = new Student(name, age);\n                \n                Course course1 = new Course(\"Mathematics\", 3);\n                Course course2 = new Course(\"Science\", 4);\n                \n                student.enrollInCourse(course1);\n                student.enrollInCourse(course2);\n\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n                for (Course course : student.getCourses()) {\n                    System.out.println(\"Enrolled in: \" + course.getCourseName() + \" (\" + course.getCredits() + \" credits)\");\n                }\n            }\n\n            // Reading the first record to check if a specific column is set\n            CSVRecord firstRecord = records.get(0);\n            /* read */ boolean isNameSet = firstRecord.isSet(\"name\");\n            System.out.println(\"Is 'name' set in the first record? \" + isNameSet);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"name, age\\nAlice, 30\\nBob, 25\";\n            \n            // Create a CSVFormat instance with ignore surrounding spaces\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n            \n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read the first record and check if a specific column is set\n            CSVRecord firstRecord = records.get(0);\n            /* read */ boolean isNameSet = firstRecord.isSet(\"name\");\n            \n            System.out.println(\"Is 'name' set in the first record? \" + isNameSet);\n            \n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"name, age\\nAlice, 30\\nBob, 25\";\n            \n            // Create a CSVFormat instance with ignore surrounding spaces\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces();\n            \n            // Additional logic to make the program more complex\n            ArrayList<String> names = new ArrayList<>();\n            names.add(\"Alice\");\n            names.add(\"Bob\");\n            \n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n            \n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Perform some operations on the records\n            for (CSVRecord record : records) {\n                System.out.println(\"Record: \" + record);\n                if (record.isSet(\"age\")) {\n                    System.out.println(\"Age is set for: \" + record.get(\"name\"));\n                }\n            }\n            \n            // More complex logic\n            int sumOfAges = 0;\n            for (CSVRecord record : records) {\n                sumOfAges += Integer.parseInt(record.get(\"age\"));\n            }\n            System.out.println(\"Sum of ages: \" + sumOfAges);\n            \n            // Read the first record and check if a specific column is set\n            CSVRecord firstRecord = records.get(0);\n            /* read */ boolean isNameSet = firstRecord.isSet(\"name\");\n            \n            System.out.println(\"Is 'name' set in the first record? \" + isNameSet);\n            \n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}