{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void allowMissingColumnNames() {\n        /* write */ format = format.withAllowMissingColumnNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Simulating a CSVRecord for demonstration purposes\n        String[] values = {\"value1\", \"value2\"};\n        CSVRecord record = new CSVRecord(null, values, null, 0, 0);\n\n        /* read */ boolean isSet = record.isSet(0);\n        System.out.println(isSet);\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVFormat format = CSVFormat.DEFAULT;\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 100);\n        map.put(\"key2\", 200);\n        \n        // Additional unrelated code to increase complexity\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Simulating a CSVRecord for demonstration purposes\n        String[] values = {\"value1\", \"value2\"};\n        CSVRecord record = new CSVRecord(null, values, null, 0, 0);\n\n        // More unrelated operations\n        int sum = 0;\n        for (Integer value : map.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of map values: \" + sum);\n\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Further complexity with nested loops\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 2; j++) {\n                System.out.println(\"Nested loop iteration i=\" + i + \", j=\" + j);\n            }\n        }\n\n        /* read */ boolean isSet = record.isSet(0);\n        System.out.println(isSet);\n\n        // Additional logic after the read operation\n        if (isSet) {\n            System.out.println(\"Value is set in the CSV record.\");\n        } else {\n            System.out.println(\"Value is not set in the CSV record.\");\n        }\n    }\n}"
}