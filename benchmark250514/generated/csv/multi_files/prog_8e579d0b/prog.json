{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat format;\n\n    public CSVHandler() {\n        this.format = CSVFormat.DEFAULT;\n    }\n\n    public void configureFormat() {\n        /* write */ this.format = this.format.withIgnoreSurroundingSpaces();\n    }\n\n    public List<CSVRecord> parseCSV(String csvData) throws IOException {\n        return format.parse(new StringReader(csvData)).getRecords();\n    }\n}",
        "DataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class DataProcessor {\n    private CSVHandler csvHandler;\n\n    public DataProcessor() {\n        this.csvHandler = new CSVHandler();\n    }\n\n    public void processCSVData(String csvData) {\n        csvHandler.configureFormat();\n        try {\n            List<CSVRecord> records = csvHandler.parseCSV(csvData);\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Is the record consistent? \" + isConsistent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a list of students\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"John Doe\", 30));\n        students.add(new Student(\"Jane Doe\", 25));\n\n        // Process CSV data\n        DataProcessor dataProcessor = new DataProcessor();\n        String csvData = \"name, age\\nJohn Doe, 30\\nJane Doe, 25\";\n        dataProcessor.processCSVData(csvData);\n\n        // Print student details\n        for (Student student : students) {\n            System.out.println(\"Student Name: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSV format with the write method\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreSurroundingSpaces();\n\n        // Sample CSV data\n        String csvData = \"name, age\\nJohn Doe, 30\\nJane Doe, 25\";\n\n        try {\n            // Parse the CSV data\n            List<CSVRecord> records = format.parse(new StringReader(csvData)).getRecords();\n\n            // Read using the read method\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Is the record consistent? \" + isConsistent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSV format with the write method\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreSurroundingSpaces();\n\n        // Sample CSV data\n        String csvData = \"name, age\\nJohn Doe, 30\\nJane Doe, 25\";\n\n        // Additional complexity: using another CSV format and parsing\n        CSVFormat anotherFormat = CSVFormat.RFC4180.withHeader(\"name\", \"age\");\n        String anotherCsvData = \"Alice, 28\\nBob, 22\";\n        List<CSVRecord> anotherRecords = null;\n\n        try {\n            anotherRecords = anotherFormat.parse(new StringReader(anotherCsvData)).getRecords();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Process the additional CSV records\n        if (anotherRecords != null) {\n            for (CSVRecord record : anotherRecords) {\n                System.out.println(\"Name: \" + record.get(\"name\") + \", Age: \" + record.get(\"age\"));\n            }\n        }\n\n        try {\n            // Parse the CSV data\n            List<CSVRecord> records = format.parse(new StringReader(csvData)).getRecords();\n\n            // Unrelated complex code: Perform operations on a list\n            ArrayList<Integer> numberList = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                numberList.add(i * 2);\n            }\n\n            for (int number : numberList) {\n                System.out.println(\"Number: \" + number);\n            }\n\n            // Read using the read method\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Is the record consistent? \" + isConsistent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}