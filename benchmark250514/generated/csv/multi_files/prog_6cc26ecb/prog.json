{
    "files": {
        "CSVWriter.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\n\npublic class CSVWriter {\n    private StringWriter writer = new StringWriter();\n    private CSVPrinter printer;\n\n    public CSVWriter() {\n        try {\n            printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void writeComment(String comment) {\n        try {\n            /* write */ printer.printComment(comment);\n            printer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getWrittenData() {\n        return writer.toString();\n    }\n}\n",
        "CSVReader.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class CSVReader {\n    private String data;\n\n    public CSVReader(String data) {\n        this.data = data;\n    }\n\n    public String readComment() {\n        String comment = null;\n        try {\n            StringReader reader = new StringReader(data);\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT.parse(reader);\n            for (CSVRecord record : records) {\n                /* read */ comment = record.getComment();\n                break; // Ensure the read method is executed only once\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return comment;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String name;\n    private ArrayList<String> students;\n\n    public Course(String name) {\n        this.name = name;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(String studentName) {\n        students.add(studentName);\n    }\n\n    public ArrayList<String> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Using CSVWriter to write a comment\n        CSVWriter csvWriter = new CSVWriter();\n        csvWriter.writeComment(\"This is a test comment\");\n\n        // Perform unrelated operations to make the program more complex\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(\"Alice\");\n        course.addStudent(\"Bob\");\n        for (String student : course.getStudents()) {\n            System.out.println(\"Enrolled student: \" + student);\n        }\n\n        // Using CSVReader to read the comment\n        CSVReader csvReader = new CSVReader(csvWriter.getWrittenData());\n        String comment = csvReader.readComment();\n        System.out.println(\"Read comment: \" + comment);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printComment",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter instance\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n            \n            // Write a comment using CSVPrinter\n            /* write */ printer.printComment(\"This is a test comment\");\n            \n            // Flush the printer to ensure all data is written\n            printer.flush();\n            \n            // Read the CSV output using a StringReader\n            StringReader reader = new StringReader(writer.toString());\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT.parse(reader);\n            \n            // Read the comment from the CSVRecord\n            String comment = null;\n            for (CSVRecord record : records) {\n                /* read */ comment = record.getComment();\n                break; // Ensure the read method is executed only once\n            }\n            \n            // Print the comment\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter instance\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n            \n            // Write a comment using CSVPrinter\n            /* write */ printer.printComment(\"This is a test comment\");\n            \n            // Flush the printer to ensure all data is written\n            printer.flush();\n\n            // Perform unrelated operations to make the program more complex\n            ArrayList<String> dataList = new ArrayList<>();\n            dataList.add(\"Data1\");\n            dataList.add(\"Data2\");\n            dataList.add(\"Data3\");\n            \n            for (String data : dataList) {\n                System.out.println(\"Processing: \" + data);\n            }\n            \n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n            // Read the CSV output using a StringReader\n            StringReader reader = new StringReader(writer.toString());\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT.parse(reader);\n\n            // Read the comment from the CSVRecord\n            String comment = null;\n            for (CSVRecord record : records) {\n                /* read */ comment = record.getComment();\n                break; // Ensure the read method is executed only once\n            }\n            \n            // Print the comment\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}