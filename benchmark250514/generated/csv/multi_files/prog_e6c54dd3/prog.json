{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVHandler {\n    private CSVFormat csvFormat;\n    private List<CSVRecord> records;\n\n    public CSVHandler(String csvData) {\n        try {\n            /* write */ this.csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n            CSVParser parser = new CSVParser(new StringReader(csvData), this.csvFormat);\n            this.records = parser.getRecords();\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<CSVRecord> getRecords() {\n        return records;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private int age;\n    private String location;\n\n    public Student(String name, int age, String location) {\n        this.name = name;\n        this.age = age;\n        this.location = location;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n}\n",
        "StudentProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class StudentProcessor {\n    private List<Student> students;\n\n    public StudentProcessor(List<CSVRecord> records) {\n        this.students = new ArrayList<>();\n        for (CSVRecord record : records) {\n            String name = record.get(\"Name\");\n            int age = Integer.parseInt(record.get(\"Age\"));\n            String location = record.get(\"Location\");\n            students.add(new Student(name, age, location));\n        }\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public boolean isNameMapped(CSVRecord record) {\n        /* read */ return record.isMapped(\"Name\");\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        String csvData = \"Name,Age,Location\\nAlice,30,New York\\nBob,25,Los Angeles\";\n        CSVHandler csvHandler = new CSVHandler(csvData);\n        \n        List<CSVRecord> records = csvHandler.getRecords();\n        StudentProcessor studentProcessor = new StudentProcessor(records);\n\n        for (Student student : studentProcessor.getStudents()) {\n            System.out.println(\"Name: \" + student.getName() + \", Age: \" + student.getAge() + \", Location: \" + student.getLocation());\n        }\n\n        // Checking if the 'Name' field is mapped in the first record\n        boolean isMapped = studentProcessor.isNameMapped(records.get(0));\n        System.out.println(\"Is 'Name' field mapped? \" + isMapped);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withFirstRecordAsHeader",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Sample CSV data\n            String csvData = \"Name,Age,Location\\nAlice,30,New York\\nBob,25,Los Angeles\";\n\n            // Create a CSVFormat instance with the first record as header\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if a field is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n\n            System.out.println(\"Is 'Name' field mapped? \" + isMapped);\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\n\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Sample CSV data\n            String csvData = \"Name,Age,Location\\nAlice,30,New York\\nBob,25,Los Angeles\";\n\n            // Create a CSVFormat instance with the first record as header\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n\n            // Unrelated code: Create a list and add some elements\n            List<String> names = new ArrayList<>();\n            names.add(\"Charlie\");\n            names.add(\"Dave\");\n\n            // Process each record in the CSV\n            for (CSVRecord record : parser) {\n                String name = record.get(\"Name\");\n                int age = Integer.parseInt(record.get(\"Age\"));\n                String location = record.get(\"Location\");\n\n                // Unrelated code: Add name to the list if age is above 20\n                if (age > 20) {\n                    names.add(name);\n                }\n\n                System.out.println(\"Name: \" + name + \", Age: \" + age + \", Location: \" + location);\n            }\n\n            // Get the first record\n            CSVRecord firstRecord = parser.getRecords().get(0);\n\n            // Unrelated code: Print all names in the list\n            System.out.println(\"Names in the list:\");\n            for (String n : names) {\n                System.out.println(n);\n            }\n\n            // Check if a field is mapped\n            /* read */ boolean isMapped = firstRecord.isMapped(\"Name\");\n\n            System.out.println(\"Is 'Name' field mapped? \" + isMapped);\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}