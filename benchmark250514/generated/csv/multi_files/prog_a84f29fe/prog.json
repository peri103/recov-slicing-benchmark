{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        format = CSVFormat.DEFAULT;\n    }\n\n    public void configure() {\n        /* write */ format = format.withAllowMissingColumnNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataParser.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CSVDataParser {\n    private List<CSVRecord> records;\n    private Map<String, Integer> nameToAgeMap = new HashMap<>();\n\n    public CSVDataParser(List<CSVRecord> records) {\n        this.records = records;\n        parseData();\n    }\n\n    private void parseData() {\n        if (records != null) {\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                nameToAgeMap.put(name, age);\n            }\n        }\n    }\n\n    public void displayData() {\n        for (Map.Entry<String, Integer> entry : nameToAgeMap.entrySet()) {\n            System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n        }\n    }\n\n    public boolean isNameSetForFirstRecord() {\n        if (records != null && !records.isEmpty()) {\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"name\");\n            return isSet;\n        }\n        return false;\n    }\n\n    public double calculateAverageAge() {\n        int totalAge = 0;\n        for (int age : nameToAgeMap.values()) {\n            totalAge += age;\n        }\n        return totalAge / (double) nameToAgeMap.size();\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        CSVConfiguration config = new CSVConfiguration();\n        config.configure();\n\n        String csvData = \"name,age\\nJohn Doe,30\\nJane Doe,25\";\n        List<CSVRecord> records = null;\n        try {\n            records = config.getFormat().parse(new StringReader(csvData)).getRecords();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        CSVDataParser parser = new CSVDataParser(records);\n        parser.displayData();\n\n        boolean isNameSet = parser.isNameSetForFirstRecord();\n        System.out.println(\"Is 'name' set for the first record: \" + isNameSet);\n\n        double averageAge = parser.calculateAverageAge();\n        System.out.println(\"Average Age: \" + averageAge);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Create a CSV string to parse\n        String csvData = \"name,age\\nJohn Doe,30\\nJane Doe,25\";\n\n        // Parse the CSV string using the format\n        List<CSVRecord> records = null;\n        try {\n            records = format.parse(new StringReader(csvData)).getRecords();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Read method to check if a column is set for the first record\n        if (records != null && !records.isEmpty()) {\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' set: \" + isSet);\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Create a CSV string to parse\n        String csvData = \"name,age\\nJohn Doe,30\\nJane Doe,25\";\n\n        // Parse the CSV string using the format\n        List<CSVRecord> records = null;\n        try {\n            records = format.parse(new StringReader(csvData)).getRecords();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code: Using a HashMap to store record information\n        Map<String, Integer> nameToAgeMap = new HashMap<>();\n        if (records != null) {\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                nameToAgeMap.put(name, age);\n            }\n        }\n\n        // Perform operations on the map\n        for (Map.Entry<String, Integer> entry : nameToAgeMap.entrySet()) {\n            System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n        }\n\n        // Read method to check if a column is set for the first record\n        if (records != null && !records.isEmpty()) {\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' set: \" + isSet);\n        }\n\n        // Additional complex code: Calculate the average age\n        int totalAge = 0;\n        for (int age : nameToAgeMap.values()) {\n            totalAge += age;\n        }\n        double averageAge = totalAge / (double) nameToAgeMap.size();\n        System.out.println(\"Average Age: \" + averageAge);\n    }\n}"
}