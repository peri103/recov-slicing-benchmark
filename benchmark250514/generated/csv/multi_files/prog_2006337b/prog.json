{
    "files": {
        "CSVConfiguration.java": "import org.apache.commons.csv.CSVFormat;\n\npublic class CSVConfiguration {\n    private CSVFormat format;\n\n    public CSVConfiguration() {\n        format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n    }\n\n    public CSVFormat getFormat() {\n        return format;\n    }\n}\n",
        "CSVDataProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.List;\n\npublic class CSVDataProcessor {\n    private List<CSVRecord> records;\n\n    public CSVDataProcessor(List<CSVRecord> records) {\n        this.records = records;\n    }\n\n    public boolean checkFirstRecordConsistency() {\n        if (records.isEmpty()) {\n            return false;\n        }\n        CSVRecord record = records.get(0);\n        /* read */ return record.isConsistent();\n    }\n\n    public int calculateTotalAge() {\n        int totalAge = 0;\n        for (CSVRecord rec : records) {\n            totalAge += Integer.parseInt(rec.get(1)); // Assuming age is at index 1\n        }\n        return totalAge;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSV configuration\n        CSVConfiguration csvConfig = new CSVConfiguration();\n\n        // Sample CSV data to parse\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n        StringReader stringReader = new StringReader(csvData);\n\n        try {\n            // Parse the CSV data\n            CSVParser parser = csvConfig.getFormat().parse(stringReader);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Process CSV data\n            CSVDataProcessor processor = new CSVDataProcessor(records);\n            boolean isConsistent = processor.checkFirstRecordConsistency();\n            System.out.println(\"Is the first record consistent? \" + isConsistent);\n\n            int totalAge = processor.calculateTotalAge();\n            System.out.println(\"Total age of all records: \" + totalAge);\n\n            // Create student objects\n            List<Student> students = new ArrayList<>();\n            for (CSVRecord record : records) {\n                String name = record.get(0);\n                int age = Integer.parseInt(record.get(1));\n                students.add(new Student(name, age));\n            }\n\n            // Print student details\n            for (Student student : students) {\n                System.out.println(student.getName() + \" is \" + student.getAge() + \" years old.\");\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat and configure it\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Sample CSV data to parse\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n        StringReader stringReader = new StringReader(csvData);\n\n        try {\n            // Parse the CSV data\n            List<CSVRecord> records = format.parse(stringReader).getRecords();\n\n            // Assume we are interested in the first record\n            CSVRecord record = records.get(0);\n\n            // Check if the record is consistent\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat and configure it\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Sample CSV data to parse\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n        StringReader stringReader = new StringReader(csvData);\n\n        // Unrelated code to add complexity\n        Map<String, Integer> ageMap = new HashMap<>();\n        ageMap.put(\"John\", 30);\n        ageMap.put(\"Jane\", 25);\n\n        // Iterate over the map and print the ages\n        for (Map.Entry<String, Integer> entry : ageMap.entrySet()) {\n            System.out.println(entry.getKey() + \" is \" + entry.getValue() + \" years old.\");\n        }\n\n        try {\n            // Parse the CSV data\n            List<CSVRecord> records = format.parse(stringReader).getRecords();\n\n            // Unrelated code to add complexity\n            int totalAge = 0;\n            for (CSVRecord rec : records) {\n                totalAge += Integer.parseInt(rec.get(1)); // Assuming age is at index 1\n            }\n            System.out.println(\"Total age of all records: \" + totalAge);\n\n            // Assume we are interested in the first record\n            CSVRecord record = records.get(0);\n\n            // Check if the record is consistent\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n\n            // More unrelated code to add complexity\n            int averageAge = totalAge / records.size();\n            System.out.println(\"Average age: \" + averageAge);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}