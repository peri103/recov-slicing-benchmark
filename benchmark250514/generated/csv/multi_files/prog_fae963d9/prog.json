{
    "files": {
        "CSVUtils.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CSVUtils {\n    private CSVFormat format;\n\n    public CSVUtils() {\n        /* write */ format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n    }\n\n    public Iterable<CSVRecord> parseCSV(String csvData) throws IOException {\n        return format.parse(new StringReader(csvData));\n    }\n\n    public List<String> extractColumn(Iterable<CSVRecord> records, String columnName) {\n        List<String> columnData = new ArrayList<>();\n        for (CSVRecord record : records) {\n            columnData.add(record.get(columnName));\n        }\n        return columnData;\n    }\n}\n",
        "CSVProcessor.java": "import org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class CSVProcessor {\n    private CSVUtils csvUtils = new CSVUtils();\n\n    public void processCSVData(String csvData) {\n        try {\n            Iterable<CSVRecord> records = csvUtils.parseCSV(csvData);\n            List<String> names = csvUtils.extractColumn(records, \"name\");\n            List<String> cities = csvUtils.extractColumn(records, \"city\");\n\n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n\n            for (String city : cities) {\n                System.out.println(\"City: \" + city);\n            }\n\n            CSVRecord firstRecord = records.iterator().next();\n            checkFieldSet(firstRecord, \"name\");\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void checkFieldSet(CSVRecord record, String fieldName) {\n        /* read */ boolean isSet = record.isSet(fieldName);\n        System.out.println(\"Is '\" + fieldName + \"' field set: \" + isSet);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        String csvData = \"name,age,city\\nJohn,30,New York\\nJane,25,Los Angeles\";\n        CSVProcessor processor = new CSVProcessor();\n        processor.processCSVData(csvData);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with allowing missing column names\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n            // Parse CSV data\n            Iterable<CSVRecord> records = format.parse(new StringReader(csvData));\n\n            // Get the first record\n            CSVRecord record = records.iterator().next();\n\n            // Check if a field is set\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' field set: \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with allowing missing column names\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n\n            // Sample CSV data\n            String csvData = \"name,age,city\\nJohn,30,New York\\nJane,25,Los Angeles\";\n\n            // Parse CSV data\n            Iterable<CSVRecord> records = format.parse(new StringReader(csvData));\n\n            // Process records into a list\n            List<String> names = new ArrayList<>();\n            for (CSVRecord record : records) {\n                names.add(record.get(\"name\"));\n            }\n\n            // Perform some operations on the names list\n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n\n            // Get the first record\n            CSVRecord firstRecord = records.iterator().next();\n\n            // Perform operations on firstRecord\n            String firstName = firstRecord.get(\"name\");\n            System.out.println(\"First name: \" + firstName);\n\n            // Check if a field is set\n            /* read */ boolean isSet = firstRecord.isSet(\"name\");\n            System.out.println(\"Is 'name' field set: \" + isSet);\n\n            // Additional complex operations\n            List<String> cities = new ArrayList<>();\n            for (CSVRecord record : records) {\n                cities.add(record.get(\"city\"));\n            }\n\n            for (String city : cities) {\n                System.out.println(\"City: \" + city);\n            }\n\n            // Simulate a transformation\n            List<String> transformedNames = new ArrayList<>();\n            for (String name : names) {\n                transformedNames.add(name.toUpperCase());\n            }\n\n            // Print transformed names\n            for (String transformedName : transformedNames) {\n                System.out.println(\"Transformed name: \" + transformedName);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}