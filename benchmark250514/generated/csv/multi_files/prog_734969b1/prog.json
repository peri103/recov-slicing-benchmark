{
    "files": {
        "CSVHandler.java": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\n\npublic class CSVHandler {\n    private CSVFormat csvFormat;\n    private ArrayList<CSVRecord> recordsList;\n\n    public CSVHandler(String csvContent) throws IOException {\n        csvFormat = CSVFormat.DEFAULT;\n        /* write */ csvFormat = csvFormat.withNullString(\"NULL\");\n        CSVParser parser = CSVParser.parse(new StringReader(csvContent), csvFormat);\n        recordsList = new ArrayList<>(parser.getRecords());\n    }\n\n    public ArrayList<CSVRecord> getRecordsList() {\n        return recordsList;\n    }\n}\n",
        "RecordAnalyzer.java": "import org.apache.commons.csv.CSVRecord;\nimport java.util.ArrayList;\n\npublic class RecordAnalyzer {\n    private ArrayList<CSVRecord> recordsList;\n\n    public RecordAnalyzer(ArrayList<CSVRecord> recordsList) {\n        this.recordsList = recordsList;\n    }\n\n    public boolean isAgeSetInFirstRecord() {\n        CSVRecord record = recordsList.get(0);\n        /* read */ return record.isSet(\"age\");\n    }\n\n    public void printRecords() {\n        for (CSVRecord rec : recordsList) {\n            System.out.println(\"Record: \" + rec);\n        }\n    }\n}\n",
        "Main.java": "import java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvContent = \"name,age\\nJohn,NULL\\nDoe,25\";\n            CSVHandler csvHandler = new CSVHandler(csvContent);\n            RecordAnalyzer analyzer = new RecordAnalyzer(csvHandler.getRecordsList());\n\n            boolean isAgeSet = analyzer.isAgeSetInFirstRecord();\n            System.out.println(\"Is 'age' set in the first record? \" + isAgeSet);\n\n            analyzer.printRecords();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    },
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a null string\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            /* write */ csvFormat = csvFormat.withNullString(\"NULL\");\n\n            // Prepare a CSV content to parse\n            String csvContent = \"name,age\\nJohn,NULL\\nDoe,25\";\n            CSVParser parser = CSVParser.parse(new StringReader(csvContent), csvFormat);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if a column in the record is set\n            /* read */ boolean isSet = record.isSet(\"age\");\n            System.out.println(\"Is 'age' set in the first record? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a null string\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            /* write */ csvFormat = csvFormat.withNullString(\"NULL\");\n\n            // Prepare a CSV content to parse\n            String csvContent = \"name,age\\nJohn,NULL\\nDoe,25\";\n            CSVParser parser = CSVParser.parse(new StringReader(csvContent), csvFormat);\n\n            // Introduce additional complexity with a HashMap\n            HashMap<String, Integer> nameAgeMap = new HashMap<>();\n            nameAgeMap.put(\"Alice\", 30);\n            nameAgeMap.put(\"Bob\", 40);\n\n            // Use ArrayList to store CSV records\n            ArrayList<CSVRecord> recordsList = new ArrayList<>(parser.getRecords());\n\n            // Get the first record\n            CSVRecord record = recordsList.get(0);\n\n            // Additional operations with the HashMap\n            for (String name : nameAgeMap.keySet()) {\n                System.out.println(name + \" is \" + nameAgeMap.get(name) + \" years old.\");\n            }\n\n            // Check if a column in the record is set\n            /* read */ boolean isSet = record.isSet(\"age\");\n            System.out.println(\"Is 'age' set in the first record? \" + isSet);\n\n            // Further operations with ArrayList\n            for (CSVRecord rec : recordsList) {\n                System.out.println(\"Record: \" + rec);\n            }\n\n            // Adding more complexity with nested loops\n            for (int i = 0; i < recordsList.size(); i++) {\n                for (int j = 0; j < nameAgeMap.size(); j++) {\n                    System.out.println(\"Processing record \" + i + \" with map entry \" + j);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}