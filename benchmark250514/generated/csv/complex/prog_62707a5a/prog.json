{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n        \n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,25\\nDoe,30\";\n        \n        // Additional unrelated data structures\n        ArrayList<String> names = new ArrayList<>();\n        HashMap<String, Integer> nameToAgeMap = new HashMap<>();\n\n        try {\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Process each record and populate additional data structures\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                names.add(name);\n                nameToAgeMap.put(name, age);\n            }\n\n            // Perform some operations on additional data structures\n            for (String name : names) {\n                System.out.println(\"Name: \" + name + \", Age: \" + nameToAgeMap.get(name));\n            }\n\n            // Access a specific record\n            CSVRecord specificRecord = records.get(0);\n            \n            // Use the read method to check if a certain column is set\n            /* read */ boolean isSet = specificRecord.isSet(\"name\");\n            \n            // Print the result\n            System.out.println(\"Is 'name' column set in the first record? \" + isSet);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // Additional complex operations\n        int sumOfAges = 0;\n        for (int age : nameToAgeMap.values()) {\n            sumOfAges += age;\n        }\n        System.out.println(\"Total sum of ages: \" + sumOfAges);\n        \n        // Simulate complex data manipulation\n        if (!names.isEmpty()) {\n            String firstPerson = names.get(0);\n            int firstPersonAge = nameToAgeMap.get(firstPerson);\n            System.out.println(\"First person: \" + firstPerson + \", Age: \" + firstPersonAge);\n        }\n        \n        // Simulate additional logic\n        if (sumOfAges > 50) {\n            System.out.println(\"Average age is above 25.\");\n        } else {\n            System.out.println(\"Average age is below 25.\");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames();\n        \n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,25\\nDoe,30\";\n        \n        try {\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Access a record from the parsed data\n            CSVRecord record = records.get(0);\n            \n            // Use the read method to check if a certain column is set\n            /* read */ boolean isSet = record.isSet(\"name\");\n            \n            // Print the result\n            System.out.println(\"Is 'name' column set in the first record? \" + isSet);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}