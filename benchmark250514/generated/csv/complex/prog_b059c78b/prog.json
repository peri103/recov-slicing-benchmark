{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVFormat object and configure it to ignore empty lines\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines();\n            \n            // Sample CSV data\n            String csvData = \"name,age,city\\nJohn,30,New York\\n\\nJane,25,Los Angeles\\n\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n            \n            // Additional complex logic: List operations\n            List<String> names = new ArrayList<>();\n            List<Integer> ages = new ArrayList<>();\n            List<String> cities = new ArrayList<>();\n            \n            // Populate the lists with data from CSV records\n            for (CSVRecord record : parser) {\n                if (record.size() == 3) {\n                    names.add(record.get(0));\n                    ages.add(Integer.parseInt(record.get(1)));\n                    cities.add(record.get(2));\n                }\n            }\n            \n            // Perform some operations on the lists\n            int totalAge = 0;\n            for (int age : ages) {\n                totalAge += age;\n            }\n            double averageAge = (double) totalAge / ages.size();\n            System.out.println(\"Average age: \" + averageAge);\n            \n            // Re-parse the CSV data to demonstrate separation of read/write\n            parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n            \n            // Iterate over the records and check if they are consistent\n            for (CSVRecord record : parser) {\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Record is consistent: \" + isConsistent);\n            }\n            \n            // Additional complex logic: More list operations\n            for (String name : names) {\n                System.out.println(\"Name: \" + name);\n            }\n            for (String city : cities) {\n                System.out.println(\"City: \" + city);\n            }\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVFormat object and configure it to ignore empty lines\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines();\n            \n            // Sample CSV data\n            String csvData = \"name,age,city\\nJohn,30,New York\\n\\nJane,25,Los Angeles\\n\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n            \n            // Iterate over the records and check if they are consistent\n            for (CSVRecord record : parser) {\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Record is consistent: \" + isConsistent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}