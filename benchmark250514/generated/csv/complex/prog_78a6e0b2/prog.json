{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVFormat object\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withAllowMissingColumnNames(true);\n\n            // Sample CSV data\n            String csvData = \"Name,Age,Location\\nJohn,30,USA\\nDoe,25,UK\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Access the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Perform some operations on the records\n            List<String> names = new ArrayList<>();\n            for (CSVRecord record : records) {\n                names.add(record.get(\"Name\"));\n            }\n\n            // Print the names\n            System.out.println(\"Names in the CSV:\");\n            for (String name : names) {\n                System.out.println(name);\n            }\n\n            // Additional complex operations\n            int totalAge = 0;\n            for (CSVRecord record : records) {\n                totalAge += Integer.parseInt(record.get(\"Age\"));\n            }\n            System.out.println(\"Total Age: \" + totalAge);\n\n            // Use the isSet method to check if a column is set in the first record\n            CSVRecord firstRecord = records.get(0);\n            /* read */ boolean isSet = firstRecord.isSet(\"Location\");\n            System.out.println(\"Is 'Location' column set in the first record? \" + isSet);\n\n            // More complex operations\n            List<String> locations = new ArrayList<>();\n            for (CSVRecord record : records) {\n                if (record.isSet(\"Location\")) {\n                    locations.add(record.get(\"Location\"));\n                }\n            }\n\n            // Print the locations\n            System.out.println(\"Locations in the CSV:\");\n            for (String location : locations) {\n                System.out.println(location);\n            }\n\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSVFormat object\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withAllowMissingColumnNames(true);\n\n            // Sample CSV data\n            String csvData = \"Name,Age\\nJohn,30\\nDoe,25\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Access the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Use the isSet method to check if a column is set\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            System.out.println(\"Is 'Name' column set? \" + isSet);\n            \n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}