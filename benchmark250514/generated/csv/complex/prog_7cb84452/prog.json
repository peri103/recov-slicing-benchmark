{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // CSV data setup\n        String csvData = \"name,age\\nJohn,30\\nDoe,25\";\n        Reader in = new StringReader(csvData);\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Initialize a map for storing header information\n        Map<String, Integer> headerMap = new HashMap<>();\n        \n        // Apply the write method\n        /* write */ format = format.withFirstRecordAsHeader();\n        \n        try {\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(in, format);\n            \n            // Store headers in the map\n            headerMap = parser.getHeaderMap();\n            \n            // Print header information\n            for (Map.Entry<String, Integer> entry : headerMap.entrySet()) {\n                System.out.println(\"Header: \" + entry.getKey() + \", Index: \" + entry.getValue());\n            }\n            \n            // Process each record\n            for (CSVRecord record : parser) {\n                // Perform some unrelated operations\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                System.out.println(\"Name: \" + name + \", Age: \" + age);\n                \n                // Apply the read method\n                /* read */ boolean isMapped = record.isMapped(\"name\");\n                System.out.println(\"Is 'name' mapped: \" + isMapped);\n                \n                // Additional unrelated operations\n                int calculatedValue = age * 2;\n                System.out.println(\"Calculated Value: \" + calculatedValue);\n                \n                break; // Ensure the read method is executed only once\n            }\n            \n            // More complex operations with unrelated data structures\n            Map<String, Integer> additionalData = new HashMap<>();\n            additionalData.put(\"Alice\", 28);\n            additionalData.put(\"Bob\", 32);\n            \n            for (Map.Entry<String, Integer> entry : additionalData.entrySet()) {\n                System.out.println(\"Additional Data - Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n            }\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        String csvData = \"name,age\\nJohn,30\\nDoe,25\";\n        Reader in = new StringReader(csvData);\n        CSVFormat format = CSVFormat.DEFAULT;\n        \n        // Apply the write method\n        /* write */ format = format.withFirstRecordAsHeader();\n        \n        try {\n            CSVParser parser = new CSVParser(in, format);\n            for (CSVRecord record : parser) {\n                // Apply the read method\n                /* read */ boolean isMapped = record.isMapped(\"name\");\n                System.out.println(\"Is 'name' mapped: \" + isMapped);\n                break; // Ensure the read method is executed only once\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withFirstRecordAsHeader",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}