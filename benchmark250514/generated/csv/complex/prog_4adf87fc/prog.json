{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Creating a CSVFormat object with ignoreEmptyLines set to true\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\n\\nJane Doe, 25\";\n\n            // Parsing the CSV data using the CSVFormat object\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional complexity: Process each record and print details\n            for (CSVRecord record : records) {\n                String name = record.get(\"Name\");\n                String age = record.get(\"Age\");\n                System.out.println(\"Name: \" + name + \", Age: \" + age);\n            }\n\n            // Introduce more unrelated complexity with a simple calculation\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n\n            // More CSV operations to increase complexity\n            int recordCount = 0;\n            for (CSVRecord record : records) {\n                if (record.isSet(\"Age\")) {\n                    recordCount++;\n                }\n            }\n            System.out.println(\"Number of records with 'Age': \" + recordCount);\n\n            // Reading the first record to check if a specific column is set\n            CSVRecord firstRecord = records.get(0);\n            /* read */ boolean isSet = firstRecord.isSet(\"Name\");\n            \n            // Output the result\n            System.out.println(\"Is 'Name' column set in first record: \" + isSet);\n\n            // Additional complexity: Check if all records have a 'Name'\n            boolean allHaveNames = true;\n            for (CSVRecord record : records) {\n                if (!record.isSet(\"Name\")) {\n                    allHaveNames = false;\n                    break;\n                }\n            }\n            System.out.println(\"Do all records have a 'Name': \" + allHaveNames);\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Creating a CSVFormat object with ignoreEmptyLines set to true\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\n\\nJane Doe, 25\";\n\n            // Parsing the CSV data using the CSVFormat object\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Reading the first record to check if a specific column is set\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            \n            // Output the result\n            System.out.println(\"Is 'Name' column set in first record: \" + isSet);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}