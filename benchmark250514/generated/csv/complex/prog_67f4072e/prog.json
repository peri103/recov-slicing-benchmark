{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSV format with a null string representation\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withNullString(\"NULL\");\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nAlice,NULL\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Create a map to store names and ages\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Iterate over the records\n            for (CSVRecord record : parser) {\n                // Check if the 'age' field is set\n                /* read */ boolean isAgeSet = record.isSet(\"age\");\n\n                // Get the name\n                String name = record.get(\"name\");\n\n                // If age is set, add to map, otherwise set age as -1\n                int age = isAgeSet ? Integer.parseInt(record.get(\"age\")) : -1;\n                nameAgeMap.put(name, age);\n            }\n\n            // Print the map\n            System.out.println(\"Name-Age Map:\");\n            for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n            }\n\n            // Additional complex operations\n            int sumOfAges = 0;\n            for (Integer age : nameAgeMap.values()) {\n                if (age > 0) {\n                    sumOfAges += age;\n                }\n            }\n            System.out.println(\"Sum of ages (excluding -1): \" + sumOfAges);\n\n            // Check if any age is -1\n            boolean hasNullAge = nameAgeMap.containsValue(-1);\n            System.out.println(\"Contains NULL age: \" + hasNullAge);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSV format with a null string representation\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withNullString(\"NULL\");\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nAlice,NULL\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Iterate over the records\n            for (CSVRecord record : parser) {\n                // Check if the 'age' field is set\n                /* read */ boolean isAgeSet = record.isSet(\"age\");\n\n                System.out.println(\"Is 'age' set for this record? \" + isAgeSet);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}