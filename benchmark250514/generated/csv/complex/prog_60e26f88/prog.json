{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV format with a specified null string\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withNullString(\"NULL\");\n\n            // Sample CSV data\n            String csvData = \"id,name,age\\n1,John,30\\n2,NULL,25\\n3,Alice,28\";\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Complex data structures\n            ArrayList<HashMap<String, String>> recordsList = new ArrayList<>();\n            HashMap<String, Integer> nameToAgeMap = new HashMap<>();\n\n            // Process CSV records\n            for (CSVRecord record : parser) {\n                HashMap<String, String> recordMap = new HashMap<>();\n                for (String header : record.toMap().keySet()) {\n                    recordMap.put(header, record.get(header));\n                }\n                recordsList.add(recordMap);\n\n                String name = record.get(\"name\");\n                if (name != null && !name.equals(\"NULL\")) {\n                    nameToAgeMap.put(name, Integer.parseInt(record.get(\"age\")));\n                }\n\n                // Unrelated logic\n                if (name != null && name.equals(\"John\")) {\n                    System.out.println(\"Found John!\");\n                }\n            }\n\n            // Further processing with recordsList\n            for (HashMap<String, String> recordMap : recordsList) {\n                System.out.println(\"Record: \" + recordMap);\n            }\n\n            // Check if a specific column is set for the first record\n            CSVRecord firstRecord = parser.getRecords().get(0);\n            /* read */ boolean isSet = firstRecord.isSet(\"name\");\n            System.out.println(\"Is 'name' set for the first record: \" + isSet);\n\n            // Additional logic with nameToAgeMap\n            System.out.println(\"Name to Age Map: \" + nameToAgeMap);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV format with a specified null string\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withNullString(\"NULL\");\n\n            // Sample CSV data\n            String csvData = \"id,name\\n1,John\\n2,NULL\\n3,Alice\";\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve records\n            for (CSVRecord record : parser) {\n                // Check if a specific column is set\n                /* read */ boolean isSet = record.isSet(\"name\");\n                System.out.println(\"Is 'name' set for record: \" + isSet);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}