{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat with the write method\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n        \n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n        \n        try {\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Create a map to store name-age pairs\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n            \n            for (CSVRecord record : parser) {\n                // Extract data from the CSV record\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                \n                // Store the data in the map\n                nameAgeMap.put(name, age);\n                \n                // Perform some calculations\n                int ageInFiveYears = age + 5;\n                System.out.println(name + \" will be \" + ageInFiveYears + \" in five years.\");\n                \n                // Check if the name column is set using the read method\n                /* read */ boolean isSet = record.isSet(\"name\");\n                System.out.println(\"Is 'name' column set? \" + isSet);\n            }\n            \n            // Additional logic: Print the map\n            System.out.println(\"Name-Age Map: \" + nameAgeMap);\n            \n            // Perform more operations on the map\n            for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n                System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n            }\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // Unrelated logic to increase complexity\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n        \n        // More unrelated logic\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Hello, \");\n        sb.append(\"World!\");\n        System.out.println(sb.toString());\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat with the write method\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n        \n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n        \n        try {\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            for (CSVRecord record : parser) {\n                // Use the read method to check if a column is set\n                /* read */ boolean isSet = record.isSet(\"name\");\n                System.out.println(\"Is 'name' column set? \" + isSet);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}