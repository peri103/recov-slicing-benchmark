{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT\n                    /* write */ .withHeaderComments(\"This is a comment\");\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn, 30\\nJane, 25\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional code to make the program more complex\n            ArrayList<String> names = new ArrayList<>();\n            ArrayList<Integer> ages = new ArrayList<>();\n\n            for (CSVRecord record : records) {\n                names.add(record.get(\"Name\"));\n                ages.add(Integer.parseInt(record.get(\"Age\")));\n            }\n\n            // Perform some operations on names and ages\n            for (int i = 0; i < names.size(); i++) {\n                System.out.println(\"Name: \" + names.get(i) + \", Age: \" + ages.get(i));\n            }\n\n            // Assuming we want to get the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(\"Comment: \" + comment);\n            }\n\n            // More complex operations\n            int totalAge = ages.stream().mapToInt(Integer::intValue).sum();\n            System.out.println(\"Total Age: \" + totalAge);\n\n            // Check if all ages are above a certain threshold\n            boolean allAbove25 = ages.stream().allMatch(age -> age > 25);\n            System.out.println(\"All ages above 25: \" + allAbove25);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT\n                    /* write */ .withHeaderComments(\"This is a comment\");\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn, 30\\nJane, 25\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve the records\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Assuming we want to get the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}