{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Step 1: Use CSVFormat to configure the comment marker\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withCommentMarker('#');\n\n            // Step 2: Prepare a CSV input string containing a comment\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n\n            // Step 3: Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Unrelated code to make the program more complex\n            ArrayList<String> headerList = new ArrayList<>();\n            headerList.add(\"header1\");\n            headerList.add(\"header2\");\n\n            HashMap<String, String> recordMap = new HashMap<>();\n            recordMap.put(\"header1\", \"value1\");\n            recordMap.put(\"header2\", \"value2\");\n\n            // Simulate processing of headers\n            for (String header : headerList) {\n                System.out.println(\"Processing header: \" + header);\n            }\n\n            // Simulate processing of record values\n            for (String key : recordMap.keySet()) {\n                System.out.println(\"Processing record: \" + key + \" -> \" + recordMap.get(key));\n            }\n\n            // Step 4: Iterate over the records and retrieve the comment\n            for (CSVRecord record : parser) {\n                // Simulate unrelated operations before reading the comment\n                int sum = 0;\n                for (int i = 1; i <= 10; i++) {\n                    sum += i;\n                }\n                System.out.println(\"Sum of numbers from 1 to 10: \" + sum);\n\n                /* read */ String comment = record.getComment();\n                if (comment != null) {\n                    System.out.println(comment);\n                }\n            }\n\n            // More unrelated operations to make the program more complex\n            ArrayList<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                numbers.add(i * 10);\n            }\n\n            for (int i = 0; i < numbers.size(); i++) {\n                System.out.println(\"Number at index \" + i + \": \" + numbers.get(i));\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Step 1: Use CSVFormat to configure the comment marker\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withCommentMarker('#');\n\n            // Step 2: Prepare a CSV input string containing a comment\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n\n            // Step 3: Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Step 4: Iterate over the records and retrieve the comment\n            for (CSVRecord record : parser) {\n                /* read */ String comment = record.getComment();\n                if (comment != null) {\n                    System.out.println(comment);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withCommentMarker",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}