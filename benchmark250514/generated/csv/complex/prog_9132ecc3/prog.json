{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Define CSV content\n            String csvContent = \"Name,Age,Location\\nJohn,30,USA\\n\\nJane,25,UK\";\n\n            // Create CSVFormat instance with ignoring empty lines\n            CSVFormat csvFormat = CSVFormat.DEFAULT\n                /* write */ .withIgnoreEmptyLines(true);\n\n            // Parse the CSV content\n            CSVParser parser = CSVParser.parse(new StringReader(csvContent), csvFormat);\n\n            // Get the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Initialize a map to store name-age pairs\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Populate the map with data from CSV records\n            for (CSVRecord rec : records) {\n                String name = rec.get(\"Name\");\n                int age = Integer.parseInt(rec.get(\"Age\"));\n                nameAgeMap.put(name, age);\n            }\n\n            // Perform some operations on the map\n            for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n                System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n            }\n\n            // Read the first record\n            CSVRecord record = records.get(0);\n\n            // Additional logic to manipulate data\n            int ageSum = 0;\n            for (CSVRecord rec : records) {\n                ageSum += Integer.parseInt(rec.get(\"Age\"));\n            }\n            System.out.println(\"Total Age Sum: \" + ageSum);\n\n            // Check if a particular column is set\n            /* read */ boolean isSet = record.isSet(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' set in the first record? \" + isSet);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Define CSV content\n            String csvContent = \"Name,Age,Location\\nJohn,30,USA\\n\\nJane,25,UK\";\n\n            // Create CSVFormat instance with ignoring empty lines\n            CSVFormat csvFormat = CSVFormat.DEFAULT\n                /* write */ .withIgnoreEmptyLines(true);\n\n            // Parse the CSV content\n            CSVParser parser = CSVParser.parse(new StringReader(csvContent), csvFormat);\n\n            // Get the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read the first record\n            CSVRecord record = records.get(0);\n\n            // Check if a particular column is set\n            /* read */ boolean isSet = record.isSet(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' set in the first record? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}