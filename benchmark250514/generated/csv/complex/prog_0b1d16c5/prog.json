{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT\n                /* write */ .withHeaderComments(\"This is a comment\");\n\n        // Create a sample CSV input\n        String csvData = \"name,age\\nJohn Doe,30\\nJane Doe,25\";\n\n        // Parse the CSV data\n        Reader in = new StringReader(csvData);\n        CSVParser parser = new CSVParser(in, format);\n\n        // Retrieve the records\n        List<CSVRecord> records = parser.getRecords();\n\n        // Create a map to store names and ages\n        Map<String, Integer> nameAgeMap = new HashMap<>();\n\n        // Process each record to populate the map\n        for (CSVRecord record : records) {\n            String name = record.get(\"name\");\n            int age = Integer.parseInt(record.get(\"age\"));\n            nameAgeMap.put(name, age);\n        }\n\n        // Print all names and ages\n        for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n            System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n        }\n\n        // Access the comment from the first record\n        if (!records.isEmpty()) {\n            /* read */ String comment = records.get(0).getComment();\n            System.out.println(\"Comment: \" + comment);\n        }\n\n        // Calculate the average age\n        int totalAge = 0;\n        for (int age : nameAgeMap.values()) {\n            totalAge += age;\n        }\n        double averageAge = (double) totalAge / nameAgeMap.size();\n        System.out.println(\"Average Age: \" + averageAge);\n\n        // Check if a specific name exists in the map\n        String searchName = \"Jane Doe\";\n        if (nameAgeMap.containsKey(searchName)) {\n            System.out.println(searchName + \" is in the list with age \" + nameAgeMap.get(searchName));\n        } else {\n            System.out.println(searchName + \" is not in the list.\");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        // Initialize CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT\n                /* write */ .withHeaderComments(\"This is a comment\");\n\n        // Create a sample CSV input\n        String csvData = \"name,age\\nJohn Doe,30\\nJane Doe,25\";\n\n        // Parse the CSV data\n        Reader in = new StringReader(csvData);\n        CSVParser parser = new CSVParser(in, format);\n\n        // Retrieve the records\n        List<CSVRecord> records = parser.getRecords();\n\n        // Access the comment from the first record\n        if (!records.isEmpty()) {\n            /* read */ String comment = records.get(0).getComment();\n            System.out.println(comment);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}