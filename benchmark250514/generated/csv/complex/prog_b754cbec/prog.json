{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"name,age,city\\nJohn,30,New York\\nJane,25,Los Angeles\";\n\n            // Parse the CSV data using the configured CSVFormat\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n\n            // Get all records\n            ArrayList<CSVRecord> records = new ArrayList<>(parser.getRecords());\n\n            // Create a map to store age by name\n            Map<String, Integer> ageByName = new HashMap<>();\n\n            // Populate the map with data from CSV\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                ageByName.put(name, age);\n            }\n\n            // Check if the 'name' field is set using the read method\n            CSVRecord firstRecord = records.get(0);\n            /* read */ boolean isSet = firstRecord.isSet(\"name\");\n\n            // Output the result\n            System.out.println(\"Is 'name' field set? \" + isSet);\n\n            // Print the ages stored in the map\n            for (Map.Entry<String, Integer> entry : ageByName.entrySet()) {\n                System.out.println(entry.getKey() + \" is \" + entry.getValue() + \" years old.\");\n            }\n\n            // Additional logic: Calculate and print the average age\n            int totalAge = 0;\n            for (int age : ageByName.values()) {\n                totalAge += age;\n            }\n            double averageAge = totalAge / (double) ageByName.size();\n            System.out.println(\"Average age: \" + averageAge);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            /* write */ CSVFormat csvFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"name,age,city\\nJohn,30,New York\\nJane,25,Los Angeles\";\n\n            // Parse the CSV data using the configured CSVFormat\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if the 'name' field is set using the read method\n            /* read */ boolean isSet = record.isSet(\"name\");\n\n            // Output the result\n            System.out.println(\"Is 'name' field set? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}