{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n\n            // Create a CSVFormat instance and set a custom record separator\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withRecordSeparator(\" | \");\n\n            // Create a CSVPrinter to write data using the specified format\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write a sample record\n            printer.printRecord(\"Alice\", \"Bob\", \"Charlie\");\n\n            // Flush the printer to ensure all data is written\n            printer.flush();\n\n            // Additional code to increase complexity\n            List<String> names = new ArrayList<>();\n            names.add(\"David\");\n            names.add(\"Eva\");\n            names.add(\"Frank\");\n\n            for (String name : names) {\n                printer.printRecord(name, name.length(), name.toUpperCase());\n            }\n\n            // Flush again to ensure all additional data is written\n            printer.flush();\n\n            // Parse the written data back into a CSVRecord\n            String csvData = writer.toString();\n            CSVRecord record = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvData)).getRecords().get(0);\n\n            // Complex operations before reading\n            List<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * 2);\n            }\n\n            int sum = 0;\n            for (int number : numbers) {\n                sum += number;\n            }\n\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // Read the record using the toString method\n            /* read */ String recordString = record.toString();\n\n            // Output the record string\n            System.out.println(recordString);\n\n            // More complex operations after reading\n            List<Double> doubles = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                doubles.add(i * 1.5);\n            }\n\n            double product = 1.0;\n            for (double d : doubles) {\n                product *= d;\n            }\n\n            System.out.println(\"Product of doubles: \" + product);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n\n            // Create a CSVFormat instance and set a custom record separator\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withRecordSeparator(\" | \");\n\n            // Create a CSVPrinter to write data using the specified format\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write a sample record\n            printer.printRecord(\"Alice\", \"Bob\", \"Charlie\");\n\n            // Flush the printer to ensure all data is written\n            printer.flush();\n\n            // Parse the written data back into a CSVRecord\n            String csvData = writer.toString();\n            CSVRecord record = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvData)).getRecords().get(0);\n\n            // Read the record using the toString method\n            /* read */ String recordString = record.toString();\n\n            // Output the record string\n            System.out.println(recordString);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withRecordSeparator",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    }
}