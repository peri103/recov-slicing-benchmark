{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter instance\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n            \n            // Write a comment using CSVPrinter\n            /* write */ printer.printComment(\"This is a comment\");\n            printer.flush();  // Ensure the data is written to the writer\n            \n            // Simulate complex operations before reading the comment\n            ArrayList<String> list = new ArrayList<>();\n            HashMap<String, Integer> map = new HashMap<>();\n            for (int i = 0; i < 5; i++) {\n                list.add(\"Item\" + i);\n                map.put(\"Key\" + i, i * 10);\n            }\n            \n            for (String item : list) {\n                System.out.println(item);\n            }\n            \n            int sum = 0;\n            for (Integer value : map.values()) {\n                sum += value;\n            }\n            System.out.println(\"Sum of values in map: \" + sum);\n\n            // Create a StringReader from the written CSV data\n            Reader reader = new StringReader(writer.toString());\n            \n            // Parse the CSV data using CSVFormat with comments enabled\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(reader);\n            \n            // Read the comment from the CSVRecord\n            for (CSVRecord record : records) {\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter instance\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n            \n            // Write a comment using CSVPrinter\n            /* write */ printer.printComment(\"This is a comment\");\n            printer.flush();  // Ensure the data is written to the writer\n\n            // Create a StringReader from the written CSV data\n            Reader reader = new StringReader(writer.toString());\n            \n            // Parse the CSV data using CSVFormat with comments enabled\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT.withCommentMarker('#').parse(reader);\n            \n            // Read the comment from the CSVRecord\n            for (CSVRecord record : records) {\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printComment",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}