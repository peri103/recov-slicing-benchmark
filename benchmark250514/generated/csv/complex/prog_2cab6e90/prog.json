{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Initialize CSVFormat with header comments\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n        // Create a CSVRecord using the format\n        String csvData = \"header1,header2\\nvalue1,value2\";\n        List<CSVRecord> records = format.parse(new StringReader(csvData)).getRecords();\n\n        // Initialize a HashMap to simulate a database\n        HashMap<String, String> database = new HashMap<>();\n        database.put(\"header1\", \"value1\");\n        database.put(\"header2\", \"value2\");\n\n        // Process the records and populate the database\n        for (CSVRecord rec : records) {\n            for (String header : format.getHeader()) {\n                database.put(header, rec.get(header));\n            }\n        }\n\n        // Perform some operations on the database\n        String fetchedValue = database.get(\"header1\");\n        System.out.println(\"Fetched from database: \" + fetchedValue);\n\n        // Assuming we want to read the comment from the first record\n        CSVRecord record = records.get(0);\n\n        // Read the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n\n        // Output the comment\n        System.out.println(\"Comment from CSVRecord: \" + comment);\n\n        // Additional complex operations\n        int sum = 0;\n        for (String value : database.values()) {\n            sum += value.length();\n        }\n        System.out.println(\"Sum of lengths of values: \" + sum);\n\n        // Create a new CSVFormat with different settings\n        CSVFormat newFormat = CSVFormat.DEFAULT.withIgnoreEmptyLines(true).withDelimiter(';');\n        String newCsvData = \"name;age;city\\nAlice;30;New York\\nBob;25;Los Angeles\";\n        List<CSVRecord> newRecords = newFormat.parse(new StringReader(newCsvData)).getRecords();\n\n        // Process new records\n        for (CSVRecord newRecord : newRecords) {\n            System.out.println(\"Name: \" + newRecord.get(\"name\") + \", Age: \" + newRecord.get(\"age\") + \", City: \" + newRecord.get(\"city\"));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Initialize CSVFormat with header comments\n        /* write */ CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n        // Create a CSVRecord using the format\n        String csvData = \"header1,header2\\nvalue1,value2\";\n        List<CSVRecord> records = format.parse(new StringReader(csvData)).getRecords();\n        \n        // Assuming we want to read the comment from the first record\n        CSVRecord record = records.get(0);\n        \n        // Read the comment from the CSVRecord\n        /* read */ String comment = record.getComment();\n        \n        // Output the comment\n        System.out.println(comment);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}