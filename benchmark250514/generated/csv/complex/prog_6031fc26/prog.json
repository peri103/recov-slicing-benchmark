{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringWriter writer = new StringWriter();\n        CSVPrinter csvPrinter = null;\n        CSVParser csvParser = null;\n\n        try {\n            // Initialize CSVPrinter\n            csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withCommentMarker('#'));\n\n            // Write a comment\n            /* write */ csvPrinter.printComment(\"This is a comment\");\n            \n            // Adding additional complexity with unrelated code\n            ArrayList<Integer> list = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                list.add(i * 2);\n            }\n\n            HashMap<String, Integer> map = new HashMap<>();\n            for (int i = 0; i < list.size(); i++) {\n                map.put(\"Key\" + i, list.get(i));\n            }\n\n            for (String key : map.keySet()) {\n                System.out.println(key + \": \" + map.get(key));\n            }\n\n            csvPrinter.flush();\n\n            // Read back the comment\n            csvParser = CSVParser.parse(new StringReader(writer.toString()), CSVFormat.DEFAULT.withCommentMarker('#'));\n            List<CSVRecord> records = csvParser.getRecords();\n            for (CSVRecord record : records) {\n                if (record.getComment() != null) {\n                    // Read the comment\n                    /* read */ String comment = record.getComment();\n                    System.out.println(comment);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (csvPrinter != null) {\n                    csvPrinter.close();\n                }\n                if (csvParser != null) {\n                    csvParser.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringWriter writer = new StringWriter();\n        CSVPrinter csvPrinter = null;\n        CSVParser csvParser = null;\n\n        try {\n            // Initialize CSVPrinter\n            csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withCommentMarker('#'));\n\n            // Write a comment\n            /* write */ csvPrinter.printComment(\"This is a comment\");\n            csvPrinter.flush();\n\n            // Read back the comment\n            csvParser = CSVParser.parse(new StringReader(writer.toString()), CSVFormat.DEFAULT.withCommentMarker('#'));\n            List<CSVRecord> records = csvParser.getRecords();\n            for (CSVRecord record : records) {\n                if (record.getComment() != null) {\n                    // Read the comment\n                    /* read */ String comment = record.getComment();\n                    System.out.println(comment);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (csvPrinter != null) {\n                    csvPrinter.close();\n                }\n                if (csvParser != null) {\n                    csvParser.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printComment",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}