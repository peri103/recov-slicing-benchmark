{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a sample CSV input\n        String csvData = \"name, age\\nJohn Doe, 30\\nJane Smith, 25\";\n        \n        try {\n            // Create a CSVFormat object with trimming enabled\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withTrim();\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve all records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Create a map to store names and ages\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Populate the map with data from CSV records\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                nameAgeMap.put(name, age);\n            }\n\n            // Perform some operations on the map\n            for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n                System.out.println(entry.getKey() + \" is \" + entry.getValue() + \" years old.\");\n            }\n\n            // Retrieve the first record again\n            CSVRecord firstRecord = records.get(0);\n\n            // Check if the record is mapped (it should be since we have headers)\n            /* read */ boolean isMapped = firstRecord.isMapped(\"name\");\n\n            // Print the result\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n\n            // Additional logic to add complexity\n            List<String> names = new ArrayList<>(nameAgeMap.keySet());\n            for (String name : names) {\n                System.out.println(\"Processing name: \" + name);\n            }\n\n            // More complex operations\n            int totalAge = 0;\n            for (int age : nameAgeMap.values()) {\n                totalAge += age;\n            }\n            double averageAge = totalAge / (double) nameAgeMap.size();\n            System.out.println(\"Average age: \" + averageAge);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a sample CSV input\n        String csvData = \"name, age\\nJohn Doe, 30\";\n\n        try {\n            // Create a CSVFormat object with trimming enabled\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withTrim();\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if the record is mapped (it should be since we have headers)\n            /* read */ boolean isMapped = record.isMapped(\"name\");\n\n            // Print the result\n            System.out.println(\"Is 'name' mapped: \" + isMapped);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withTrim",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}