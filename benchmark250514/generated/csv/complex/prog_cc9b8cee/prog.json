{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withAllowMissingColumnNames(true);\n\n            // Create a sample CSV string\n            String csvData = \"name,age\\nAlice,30\\nBob,25\";\n\n            // Parse the CSV string using the format\n            List<CSVRecord> records = format.parse(new java.io.StringReader(csvData)).getRecords();\n\n            // Initialize a map to store name and age\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Populate the map with data from CSV records\n            for (CSVRecord record : records) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                nameAgeMap.put(name, age);\n            }\n\n            // Perform some operations on the map\n            int totalAge = 0;\n            for (Integer age : nameAgeMap.values()) {\n                totalAge += age;\n            }\n            System.out.println(\"Total age: \" + totalAge);\n\n            // Use the read method on a CSVRecord\n            CSVRecord record = records.get(0);\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n\n            // Additional complexity: calculate average age\n            double averageAge = totalAge / (double) nameAgeMap.size();\n            System.out.println(\"Average age: \" + averageAge);\n\n            // Additional complexity: find the oldest person\n            String oldestPerson = null;\n            int maxAge = Integer.MIN_VALUE;\n            for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n                if (entry.getValue() > maxAge) {\n                    maxAge = entry.getValue();\n                    oldestPerson = entry.getKey();\n                }\n            }\n            System.out.println(\"Oldest person: \" + oldestPerson);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withAllowMissingColumnNames(true);\n\n            // Create a sample CSV string\n            String csvData = \"name,age\\nAlice,30\\nBob,25\";\n\n            // Parse the CSV string using the format\n            List<CSVRecord> records = format.parse(new java.io.StringReader(csvData)).getRecords();\n\n            // Use the read method on a CSVRecord\n            CSVRecord record = records.get(0);\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            // Output the result\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}