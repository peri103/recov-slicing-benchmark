{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.QuoteMode;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n            // Prepare a sample CSV data with different quote modes\n            CSVFormat formatWithQuotes = CSVFormat.DEFAULT.withQuoteMode(QuoteMode.ALL);\n            String csvDataWithQuotes = \"\\\"header1\\\",\\\"header2\\\"\\n\\\"value1\\\",\\\"value2\\\"\";\n            CSVParser parserWithQuotes = CSVParser.parse(new StringReader(csvDataWithQuotes), formatWithQuotes);\n            List<CSVRecord> recordsWithQuotes = parserWithQuotes.getRecords();\n\n            // Print records with quotes\n            for (CSVRecord recordWithQuotes : recordsWithQuotes) {\n                System.out.println(recordWithQuotes);\n            }\n\n            // Prepare a sample CSV data\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Read the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Perform some operations on records\n            for (CSVRecord record : records) {\n                System.out.println(\"Record: \" + record);\n                for (String value : record) {\n                    System.out.println(\"Value: \" + value);\n                }\n            }\n\n            // Get the first record (assuming it exists)\n            CSVRecord record = records.get(0);\n\n            // Read the comment from the record\n            /* read */ String comment = record.getComment();\n\n            // Print the comment\n            System.out.println(\"Comment: \" + comment);\n\n            // Additional operations with other CSV formats\n            CSVFormat formatWithoutHeader = CSVFormat.DEFAULT.withHeader();\n            String csvDataWithoutHeader = \"value1,value2,value3\";\n            CSVParser parserWithoutHeader = CSVParser.parse(new StringReader(csvDataWithoutHeader), formatWithoutHeader);\n            List<CSVRecord> recordsWithoutHeader = parserWithoutHeader.getRecords();\n\n            // Print records without header\n            for (CSVRecord recordWithoutHeader : recordsWithoutHeader) {\n                System.out.println(recordWithoutHeader);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n            // Prepare a sample CSV data\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Read the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Get the first record (assuming it exists)\n            CSVRecord record = records.get(0);\n\n            // Read the comment from the record\n            /* read */ String comment = record.getComment();\n\n            // Print the comment\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}