{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with ignoring empty lines\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nDoe,25\\n\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional unrelated operations\n            ArrayList<String> names = new ArrayList<>();\n            ArrayList<Integer> ages = new ArrayList<>();\n\n            // Loop through records to populate names and ages\n            for (CSVRecord rec : records) {\n                if (rec.isSet(\"name\")) {\n                    names.add(rec.get(\"name\"));\n                }\n                if (rec.isSet(\"age\")) {\n                    ages.add(Integer.parseInt(rec.get(\"age\")));\n                }\n            }\n\n            // Perform some calculations\n            int totalAge = 0;\n            for (int age : ages) {\n                totalAge += age;\n            }\n            double averageAge = totalAge / (double) ages.size();\n\n            // Read a specific record\n            CSVRecord record = records.get(0); // Getting the first record\n\n            // More unrelated operations\n            System.out.println(\"Names: \" + names);\n            System.out.println(\"Ages: \" + ages);\n            System.out.println(\"Average Age: \" + averageAge);\n\n            // Check if a field is set\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' field set? \" + isSet);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with ignoring empty lines\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nDoe,25\\n\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read a specific record\n            CSVRecord record = records.get(0); // Getting the first record\n\n            // Check if a field is set\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' field set? \" + isSet);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}