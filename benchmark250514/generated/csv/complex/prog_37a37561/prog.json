{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture the CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter instance using the StringWriter\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n\n            // Write a record to the CSVPrinter\n            /* write */ printer.printRecord(\"value1\", \"value2\", \"value3\");\n\n            // Additional unrelated code to increase complexity\n            ArrayList<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * 2);\n            }\n            \n            int sum = 0;\n            for (int num : numbers) {\n                sum += num;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // Flush the printer to ensure all data is written to the StringWriter\n            printer.flush();\n\n            // Read the CSV data into a list of CSVRecord instances\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer.toString())).getRecords();\n\n            // More unrelated code to increase complexity\n            ArrayList<String> strings = new ArrayList<>();\n            strings.add(\"Hello\");\n            strings.add(\"World\");\n            strings.add(\"!\");\n\n            for (String str : strings) {\n                System.out.println(str);\n            }\n\n            // Read the first value from the first record\n            /* read */ String value = records.get(0).get(0);\n\n            // Print the read value\n            System.out.println(\"CSV Value: \" + value);\n\n            // Additional unrelated code to increase complexity\n            int product = 1;\n            for (int num : numbers) {\n                product *= num;\n            }\n            System.out.println(\"Product of numbers: \" + product);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture the CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter instance using the StringWriter\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n\n            // Write a record to the CSVPrinter\n            /* write */ printer.printRecord(\"value1\", \"value2\", \"value3\");\n\n            // Flush the printer to ensure all data is written to the StringWriter\n            printer.flush();\n\n            // Read the CSV data into a list of CSVRecord instances\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer.toString())).getRecords();\n\n            // Read the first value from the first record\n            /* read */ String value = records.get(0).get(0);\n\n            // Print the read value\n            System.out.println(value);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printRecord",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "get"
    }
}