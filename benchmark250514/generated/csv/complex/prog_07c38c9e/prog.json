{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the CSVFormat and configure it to ignore empty lines\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            /* write */ csvFormat = csvFormat.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nAlice,25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Introduce additional complexity with unrelated operations\n            List<String> names = new ArrayList<>();\n            for (CSVRecord rec : records) {\n                if (rec.isSet(\"name\")) {\n                    names.add(rec.get(\"name\"));\n                }\n            }\n\n            // Perform some operations on the names list\n            for (int i = 0; i < names.size(); i++) {\n                System.out.println(\"Name: \" + names.get(i));\n            }\n\n            // Introduce another CSV operation\n            CSVFormat anotherFormat = CSVFormat.DEFAULT.withDelimiter(';');\n            String anotherCsvData = \"product;price\\nLaptop;1000\\nPhone;500\";\n            CSVParser anotherParser = new CSVParser(new StringReader(anotherCsvData), anotherFormat);\n            List<CSVRecord> anotherRecords = anotherParser.getRecords();\n            for (CSVRecord anotherRecord : anotherRecords) {\n                System.out.println(\"Product: \" + anotherRecord.get(\"product\") + \", Price: \" + anotherRecord.get(\"price\"));\n            }\n\n            // Read the first CSV record\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' set in the first record: \" + isSet);\n\n            parser.close();\n            anotherParser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the CSVFormat and configure it to ignore empty lines\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            /* write */ csvFormat = csvFormat.withIgnoreEmptyLines(true);\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nAlice,25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), csvFormat);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read the first CSV record\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"name\");\n            System.out.println(\"Is 'name' set in the first record: \" + isSet);\n\n            parser.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}