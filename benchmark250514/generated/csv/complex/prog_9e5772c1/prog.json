{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT /* write */.withHeaderComments(\"This is a comment\");\n\n            // Prepare to write to a CSV string\n            StringWriter writer = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write a sample record\n            printer.printRecord(\"Column1\", \"Column2\");\n\n            // Close the printer\n            printer.close();\n\n            // Create a list of CSV records\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer.toString())).getRecords();\n\n            // Add complexity by manipulating the records list\n            ArrayList<String> columnData = new ArrayList<>();\n            for (CSVRecord record : records) {\n                columnData.add(record.get(0));\n            }\n\n            // Add more data to the list\n            columnData.add(\"Additional Data\");\n\n            // Perform some operations on the list\n            for (int i = 0; i < columnData.size(); i++) {\n                System.out.println(\"Data at index \" + i + \": \" + columnData.get(i));\n            }\n\n            // Assuming we read the first record\n            CSVRecord record = records.get(0);\n\n            // Retrieve the comment from the record\n            /* read */ String comment = record.getComment();\n\n            // Print the comment\n            System.out.println(\"Comment: \" + comment);\n\n            // Further manipulate the list\n            columnData.remove(\"Additional Data\");\n            columnData.add(\"Final Data\");\n\n            // Print final list data\n            for (String data : columnData) {\n                System.out.println(\"Final Data: \" + data);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT /* write */.withHeaderComments(\"This is a comment\");\n\n            // Prepare to write to a CSV string\n            StringWriter writer = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write a sample record\n            printer.printRecord(\"Column1\", \"Column2\");\n\n            // Close the printer\n            printer.close();\n\n            // Read the CSV string\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer.toString())).getRecords();\n\n            // Assuming we read the first record\n            CSVRecord record = records.get(0);\n\n            // Retrieve the comment from the record\n            /* read */ String comment = record.getComment();\n\n            // Print the comment\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}