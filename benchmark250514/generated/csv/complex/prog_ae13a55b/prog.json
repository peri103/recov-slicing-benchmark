{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n\n            // Prepare a CSV string to parse\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Additional complex logic\n            ArrayList<String> dataList = new ArrayList<>();\n            HashMap<String, Integer> dataMap = new HashMap<>();\n            dataMap.put(\"key1\", 100);\n            dataMap.put(\"key2\", 200);\n\n            for (String key : dataMap.keySet()) {\n                dataList.add(key + \":\" + dataMap.get(key));\n            }\n\n            // Retrieve the records\n            List<CSVRecord> records = parser.getRecords();\n\n            // More complex operations\n            for (CSVRecord record : records) {\n                for (String value : dataList) {\n                    System.out.println(\"Processing: \" + value);\n                }\n            }\n\n            // Assuming the first record contains the data\n            CSVRecord record = records.get(0);\n\n            // Further operations before reading\n            int sum = 0;\n            for (int i = 0; i < dataList.size(); i++) {\n                sum += dataMap.get(\"key\" + (i + 1));\n            }\n            System.out.println(\"Sum of values in map: \" + sum);\n\n            // Read the comment\n            /* read */ String comment = record.getComment();\n\n            // Print the comment\n            System.out.println(comment);\n\n            // Extra operations after reading\n            for (int i = 0; i < 5; i++) {\n                System.out.println(\"Extra operation \" + i);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a comment\");\n            \n            // Prepare a CSV string to parse\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Retrieve the records\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Assuming the first record contains the data\n            CSVRecord record = records.get(0);\n            \n            // Read the comment\n            /* read */ String comment = record.getComment();\n            \n            // Print the comment\n            System.out.println(comment);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}