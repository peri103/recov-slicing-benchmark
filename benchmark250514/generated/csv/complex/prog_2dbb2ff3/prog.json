{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a custom record separator\n            CSVFormat format = CSVFormat.DEFAULT /* write */.withRecordSeparator(\";\");\n\n            // Prepare data to write\n            List<String> data = Arrays.asList(\"value1\", \"value2\", \"value3\");\n\n            // Use StringWriter to capture the output\n            StringWriter writer = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Write data to CSV\n            printer.printRecord(data);\n            printer.flush();\n\n            // Create a list of CSV records for more complexity\n            List<CSVRecord> csvRecords = new ArrayList<>();\n            String csvContent = writer.toString();\n            csvRecords.addAll(CSVFormat.DEFAULT.parse(new java.io.StringReader(csvContent)).getRecords());\n\n            // Additional operations to increase complexity\n            List<String> additionalData = Arrays.asList(\"extra1\", \"extra2\", \"extra3\");\n            StringWriter additionalWriter = new StringWriter();\n            CSVPrinter additionalPrinter = new CSVPrinter(additionalWriter, CSVFormat.DEFAULT.withRecordSeparator(\"\\n\"));\n            additionalPrinter.printRecord(additionalData);\n            additionalPrinter.flush();\n            csvRecords.addAll(CSVFormat.DEFAULT.parse(new java.io.StringReader(additionalWriter.toString())).getRecords());\n\n            // Further processing on CSV records\n            for (CSVRecord rec : csvRecords) {\n                System.out.println(\"Processing record: \" + rec);\n            }\n\n            // Convert the first written CSV to a CSVRecord\n            CSVRecord record = csvRecords.get(0);\n\n            // Read the CSVRecord\n            /* read */ String recordString = record.toString();\n            System.out.println(\"Read record: \" + recordString);\n\n            // Additional unrelated logic to increase complexity\n            List<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                numbers.add(i * 10);\n            }\n            int sum = 0;\n            for (int number : numbers) {\n                sum += number;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a custom record separator\n            CSVFormat format = CSVFormat.DEFAULT /* write */.withRecordSeparator(\";\");\n            \n            // Prepare data to write\n            List<String> data = Arrays.asList(\"value1\", \"value2\", \"value3\");\n            \n            // Use StringWriter to capture the output\n            StringWriter writer = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(writer, format);\n            \n            // Write data to CSV\n            printer.printRecord(data);\n            printer.flush();\n            \n            // Convert the written CSV to a CSVRecord\n            String csvContent = writer.toString();\n            CSVRecord record = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvContent)).getRecords().get(0);\n            \n            // Read the CSVRecord\n            /* read */ String recordString = record.toString();\n            System.out.println(recordString);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withRecordSeparator",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    }
}