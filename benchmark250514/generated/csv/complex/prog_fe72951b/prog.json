{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture the CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter using the default format\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n            \n            // Write a record to the CSVPrinter\n            /* write */ printer.printRecord(\"value1\", \"value2\", \"value3\");\n            \n            // Initialize another StringWriter for additional CSV operations\n            StringWriter writer2 = new StringWriter();\n            CSVPrinter printer2 = new CSVPrinter(writer2, CSVFormat.DEFAULT);\n            \n            // Write multiple records to the second CSVPrinter\n            printer2.printRecord(\"extra1\", \"extra2\", \"extra3\");\n            printer2.printRecord(\"extra4\", \"extra5\", \"extra6\");\n            printer2.flush();\n            \n            // Parse the written CSV data into CSVRecords\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer.toString())).getRecords();\n            \n            // Perform operations on the second set of CSV records\n            List<CSVRecord> records2 = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer2.toString())).getRecords();\n            for (CSVRecord record : records2) {\n                for (int i = 0; i < record.size(); i++) {\n                    System.out.println(\"Extra Value: \" + record.get(i));\n                }\n            }\n            \n            // Read the first value from the first record\n            /* read */ String value = records.get(0).get(0);\n            \n            // Output the read value\n            System.out.println(value);\n            \n            // Close the printers\n            printer.close();\n            printer2.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to capture the CSV output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter using the default format\n            CSVPrinter printer = new CSVPrinter(writer, CSVFormat.DEFAULT);\n            \n            // Write a record to the CSVPrinter\n            /* write */ printer.printRecord(\"value1\", \"value2\", \"value3\");\n            \n            // Flush the printer to ensure the record is written to the StringWriter\n            printer.flush();\n            \n            // Parse the written CSV data into CSVRecords\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(writer.toString())).getRecords();\n            \n            // Read the first value from the first record\n            /* read */ String value = records.get(0).get(0);\n            \n            // Output the read value\n            System.out.println(value);\n            \n            // Close the printer\n            printer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVPrinter",
        "write_method": "printRecord",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "get"
    }
}