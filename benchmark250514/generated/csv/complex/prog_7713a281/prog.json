{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV format with the write method\n            CSVFormat format = /* write */ CSVFormat.DEFAULT.withIgnoreEmptyLines();\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nJane,25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Additional processing: Create a map to store name-age pairs\n            Map<String, Integer> nameAgeMap = new HashMap<>();\n\n            // Access a CSVRecord and use the read method\n            for (CSVRecord record : parser) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                \n                // Store the name-age pair in the map\n                nameAgeMap.put(name, age);\n\n                /* read */ boolean isSet = record.isSet(\"name\");\n                System.out.println(\"Is 'name' set? \" + isSet);\n            }\n\n            // Print the name-age map\n            for (Map.Entry<String, Integer> entry : nameAgeMap.entrySet()) {\n                System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + entry.getValue());\n            }\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV format with the write method\n            CSVFormat format = /* write */ CSVFormat.DEFAULT.withIgnoreEmptyLines();\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\n\\nJane,25\";\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n\n            // Access a CSVRecord and use the read method\n            for (CSVRecord record : parser) {\n                /* read */ boolean isSet = record.isSet(\"name\");\n                System.out.println(\"Is 'name' set? \" + isSet);\n            }\n\n            // Close the parser\n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}