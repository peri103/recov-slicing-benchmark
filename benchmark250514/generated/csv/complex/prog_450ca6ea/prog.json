{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to hold CSV data\n            StringWriter writer = new StringWriter();\n\n            // Create a CSVFormat instance and write a header\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withHeader(\"Name\", \"Age\", \"Country\");\n\n            // Use CSVPrinter to write some data\n            try (CSVPrinter printer = new CSVPrinter(writer, format)) {\n                printer.printRecord(\"Alice\", \"30\", \"USA\");\n                printer.printRecord(\"Bob\", \"25\", \"UK\");\n                printer.printRecord(\"Charlie\", \"35\", \"Canada\");\n            }\n\n            // Read the generated CSV data\n            String csvData = writer.toString();\n            StringReader reader = new StringReader(csvData);\n\n            // Parse the CSV data\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT\n                    .withHeader(\"Name\", \"Age\", \"Country\")\n                    .withFirstRecordAsHeader()\n                    .parse(reader);\n\n            // Introduce additional complexity with unrelated operations\n            ArrayList<HashMap<String, String>> recordList = new ArrayList<>();\n            for (CSVRecord record : records) {\n                HashMap<String, String> recordMap = new HashMap<>();\n                recordMap.put(\"Name\", record.get(\"Name\"));\n                recordMap.put(\"Age\", record.get(\"Age\"));\n                recordMap.put(\"Country\", record.get(\"Country\"));\n                recordList.add(recordMap);\n            }\n\n            // Perform operations on the list of records\n            for (HashMap<String, String> map : recordList) {\n                System.out.println(\"Processing record: \" + map);\n            }\n\n            // Re-parse the CSV data to access the first record\n            reader = new StringReader(csvData);\n            records = CSVFormat.DEFAULT\n                    .withHeader(\"Name\", \"Age\", \"Country\")\n                    .withFirstRecordAsHeader()\n                    .parse(reader);\n\n            // Access the first record and check if a column is set\n            CSVRecord firstRecord = records.iterator().next();\n            /* read */ boolean isSet = firstRecord.isSet(\"Age\");\n            System.out.println(\"Is 'Age' column set in the first record? \" + isSet);\n\n            // Perform additional unrelated operations\n            ArrayList<String> countries = new ArrayList<>();\n            for (HashMap<String, String> map : recordList) {\n                countries.add(map.get(\"Country\"));\n            }\n            System.out.println(\"List of countries: \" + countries);\n\n            // Calculate the average age from the records\n            int totalAge = 0;\n            int count = 0;\n            for (HashMap<String, String> map : recordList) {\n                totalAge += Integer.parseInt(map.get(\"Age\"));\n                count++;\n            }\n            double averageAge = (double) totalAge / count;\n            System.out.println(\"Average age: \" + averageAge);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize a StringWriter to hold CSV data\n            StringWriter writer = new StringWriter();\n\n            // Create a CSVFormat instance and write a header\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withHeader(\"Name\", \"Age\", \"Country\");\n\n            // Use CSVPrinter to write some data\n            try (CSVPrinter printer = new CSVPrinter(writer, format)) {\n                printer.printRecord(\"Alice\", \"30\", \"USA\");\n                printer.printRecord(\"Bob\", \"25\", \"UK\");\n            }\n\n            // Read the generated CSV data\n            String csvData = writer.toString();\n            StringReader reader = new StringReader(csvData);\n\n            // Parse the CSV data\n            Iterable<CSVRecord> records = CSVFormat.DEFAULT\n                    .withHeader(\"Name\", \"Age\", \"Country\")\n                    .withFirstRecordAsHeader()\n                    .parse(reader);\n\n            // Access the first record and check if a column is set\n            CSVRecord firstRecord = records.iterator().next();\n            /* read */ boolean isSet = firstRecord.isSet(\"Age\");\n            System.out.println(\"Is 'Age' column set in the first record? \" + isSet);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeader",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}