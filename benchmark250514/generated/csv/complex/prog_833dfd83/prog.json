{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a header comment\");\n\n            // Use a StringWriter to capture the CSV output\n            StringWriter out = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(out, format);\n            printer.printRecord(\"Column1\", \"Column2\");\n            printer.printRecord(\"Value1\", \"Value2\");\n            printer.flush();\n\n            // Additional unrelated operations\n            ArrayList<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                numbers.add(i * 10);\n            }\n\n            HashMap<String, Integer> map = new HashMap<>();\n            map.put(\"Key1\", 100);\n            map.put(\"Key2\", 200);\n\n            int sum = 0;\n            for (Integer num : numbers) {\n                sum += num;\n            }\n\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // Read the CSV content using CSVParser\n            StringReader in = new StringReader(out.toString());\n            CSVParser parser = CSVParser.parse(in, format);\n\n            // Assume we want to read the comment from the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Additional operations after reading\n            for (CSVRecord rec : parser) {\n                System.out.println(\"Record: \" + rec);\n            }\n\n            /* read */ String comment = record.getComment();\n            System.out.println(\"Header Comment: \" + comment);\n\n            // More unrelated operations\n            for (String key : map.keySet()) {\n                System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n            }\n\n            // Another CSV operation\n            CSVFormat anotherFormat = CSVFormat.DEFAULT.withHeader(\"ColA\", \"ColB\");\n            StringWriter anotherOut = new StringWriter();\n            CSVPrinter anotherPrinter = new CSVPrinter(anotherOut, anotherFormat);\n            anotherPrinter.printRecord(\"Data1\", \"Data2\");\n            anotherPrinter.flush();\n\n            System.out.println(\"Another CSV: \" + anotherOut.toString());\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringWriter;\nimport java.io.StringReader;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Prepare CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT.withHeaderComments(\"This is a header comment\");\n\n            // Use a StringWriter to capture the CSV output\n            StringWriter out = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(out, format);\n            printer.printRecord(\"Column1\", \"Column2\");\n            printer.printRecord(\"Value1\", \"Value2\");\n            printer.flush();\n\n            // Read the CSV content using CSVParser\n            StringReader in = new StringReader(out.toString());\n            CSVParser parser = CSVParser.parse(in, format);\n\n            // Assume we want to read the comment from the first record\n            CSVRecord record = parser.getRecords().get(0);\n            /* read */ String comment = record.getComment();\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}