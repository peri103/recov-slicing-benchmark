{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a null string representation\n            CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n\n            // Create a sample CSV input\n            String csvData = \"name,age\\nJohn,NULL\\nDoe,25\";\n            \n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Access a specific record\n            CSVRecord record = records.get(0); // First record: \"John,NULL\"\n\n            // Initialize a map to store information about each record\n            Map<String, Integer> nameToAgeMap = new HashMap<>();\n\n            // Iterate over records to populate the map\n            for (CSVRecord rec : records) {\n                String name = rec.get(\"name\");\n                String ageStr = rec.get(\"age\");\n                Integer age = ageStr.equals(\"NULL\") ? null : Integer.parseInt(ageStr);\n                nameToAgeMap.put(name, age);\n            }\n\n            // Perform some operations on the map\n            for (Map.Entry<String, Integer> entry : nameToAgeMap.entrySet()) {\n                System.out.println(\"Name: \" + entry.getKey() + \", Age: \" + (entry.getValue() == null ? \"Unknown\" : entry.getValue()));\n            }\n\n            // Check if the 'age' column is set (should be false for NULL)\n            /* read */ boolean isAgeSet = record.isSet(\"age\");\n\n            // Print the result\n            System.out.println(\"Is 'age' set for the first record: \" + isAgeSet);\n\n            // Perform additional operations to make the program more complex\n            int sumOfAges = 0;\n            for (Integer age : nameToAgeMap.values()) {\n                if (age != null) {\n                    sumOfAges += age;\n                }\n            }\n            System.out.println(\"Sum of ages (excluding NULL): \" + sumOfAges);\n\n            // Further manipulation of the map\n            nameToAgeMap.put(\"Alice\", 30);\n            nameToAgeMap.remove(\"John\");\n\n            // Print updated map\n            for (Map.Entry<String, Integer> entry : nameToAgeMap.entrySet()) {\n                System.out.println(\"Updated Name: \" + entry.getKey() + \", Age: \" + (entry.getValue() == null ? \"Unknown\" : entry.getValue()));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a null string representation\n            CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n\n            // Create a sample CSV input\n            String csvData = \"name,age\\nJohn,NULL\\nDoe,25\";\n            \n            // Parse the CSV data using the format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Retrieve records\n            List<CSVRecord> records = parser.getRecords();\n\n            // Access a specific record\n            CSVRecord record = records.get(0); // First record: \"John,NULL\"\n\n            // Check if the 'age' column is set (should be false for NULL)\n            /* read */ boolean isAgeSet = record.isSet(\"age\");\n\n            // Print the result\n            System.out.println(\"Is 'age' set for the first record: \" + isAgeSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withNullString",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}