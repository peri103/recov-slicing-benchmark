{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSV writer\n            StringWriter writer = new StringWriter();\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator(\"\\n\");\n            CSVPrinter printer = new CSVPrinter(writer, format);\n\n            // Print records to CSV\n            printer.printRecord(Arrays.asList(\"field1\", \"field2\", \"field3\"));\n            printer.printRecord(Arrays.asList(\"fieldA\", \"fieldB\", \"fieldC\"));\n            printer.flush();\n\n            // Unrelated code to make program more complex\n            List<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * 2);\n            }\n            Collections.shuffle(numbers);\n            System.out.println(\"Shuffled Numbers: \" + numbers);\n\n            // Parse CSV content\n            String csvContent = writer.toString();\n            List<CSVRecord> records = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvContent)).getRecords();\n\n            // Additional unrelated operations\n            List<String> fields = new ArrayList<>();\n            for (CSVRecord record : records) {\n                fields.add(record.get(0));\n            }\n            System.out.println(\"Fields extracted: \" + fields);\n\n            // Read CSV record\n            CSVRecord firstRecord = records.get(0);\n            /* read */ String recordString = firstRecord.toString();\n            System.out.println(\"First Record: \" + recordString);\n\n            // More complex operations\n            List<String> reversedFields = new ArrayList<>(fields);\n            Collections.reverse(reversedFields);\n            System.out.println(\"Reversed Fields: \" + reversedFields);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            StringWriter writer = new StringWriter();\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator(\"\\n\");\n            CSVPrinter printer = new CSVPrinter(writer, format);\n            printer.printRecord(Arrays.asList(\"field1\", \"field2\", \"field3\"));\n            printer.flush();\n\n            String csvContent = writer.toString();\n            CSVRecord record = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvContent)).getRecords().get(0);\n            /* read */ String recordString = record.toString();\n            System.out.println(recordString);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withRecordSeparator",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    }
}