{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing missing column names\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n        // Additional data structures for complexity\n        ArrayList<String> names = new ArrayList<>();\n        Map<String, Integer> ageMap = new HashMap<>();\n\n        try {\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Iterate over records\n            for (CSVRecord record : parser) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                \n                // Populate additional data structures\n                names.add(name);\n                ageMap.put(name, age);\n            }\n\n            // Perform some operations with additional data structures\n            for (String name : names) {\n                System.out.println(\"Name: \" + name + \", Age: \" + ageMap.get(name));\n            }\n\n            // Get the first record\n            CSVRecord firstRecord = parser.getRecords().get(0);\n\n            // Check if the record is consistent\n            /* read */ boolean isConsistent = firstRecord.isConsistent();\n\n            System.out.println(\"Is the first record consistent? \" + isConsistent);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex operations\n        for (int i = 0; i < names.size(); i++) {\n            System.out.println(\"Processing: \" + names.get(i));\n        }\n        \n        System.out.println(\"Total names processed: \" + names.size());\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with allowing missing column names\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withAllowMissingColumnNames(true);\n\n        // Sample CSV data\n        String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n        try {\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Check if the record is consistent\n            /* read */ boolean isConsistent = record.isConsistent();\n\n            System.out.println(\"Is the record consistent? \" + isConsistent);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}