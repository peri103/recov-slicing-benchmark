{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a comment marker\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            \n            // Sample CSV data with a comment\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Create a map to store header-value pairs\n            HashMap<String, String> csvDataMap = new HashMap<>();\n            ArrayList<String> headers = new ArrayList<>();\n            \n            // Iterate over the records\n            for (CSVRecord record : parser) {\n                if (headers.isEmpty()) {\n                    // Store headers from the first record\n                    headers.add(record.get(0));\n                    headers.add(record.get(1));\n                } else {\n                    // Store values in the map\n                    csvDataMap.put(headers.get(0), record.get(0));\n                    csvDataMap.put(headers.get(1), record.get(1));\n                }\n            }\n            \n            // Perform some operations on the map\n            for (String header : headers) {\n                System.out.println(header + \": \" + csvDataMap.get(header));\n            }\n            \n            // Read the comment from the first record\n            for (CSVRecord record : parser) {\n                /* read */ String comment = record.getComment();\n                System.out.println(\"Comment: \" + comment);\n            }\n            \n            // Additional complexity: Reverse the map and print\n            HashMap<String, String> reversedMap = new HashMap<>();\n            for (String key : csvDataMap.keySet()) {\n                reversedMap.put(csvDataMap.get(key), key);\n            }\n            \n            for (String value : reversedMap.keySet()) {\n                System.out.println(value + \" maps to \" + reversedMap.get(value));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a comment marker\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withCommentMarker('#');\n            \n            // Sample CSV data with a comment\n            String csvData = \"# This is a comment\\nheader1,header2\\nvalue1,value2\";\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Iterate over the records\n            for (CSVRecord record : parser) {\n                // Read the comment from the record\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withCommentMarker",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}