{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreSurroundingSpaces();\n\n        // Prepare a sample CSV input\n        String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Doe, 25\";\n\n        // Parse the CSV data using the format\n        try {\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            ArrayList<HashMap<String, String>> recordsList = new ArrayList<>();\n\n            for (CSVRecord record : parser) {\n                HashMap<String, String> recordMap = new HashMap<>();\n                recordMap.put(\"Name\", record.get(\"Name\"));\n                recordMap.put(\"Age\", record.get(\"Age\"));\n                recordsList.add(recordMap);\n            }\n\n            // Perform some operations on the recordsList\n            for (HashMap<String, String> map : recordsList) {\n                System.out.println(\"Name: \" + map.get(\"Name\") + \", Age: \" + map.get(\"Age\"));\n            }\n\n            // Check consistency of the first record\n            CSVRecord firstRecord = parser.getRecords().get(0);\n            /* read */ boolean isConsistent = firstRecord.isConsistent();\n            System.out.println(\"First record is consistent: \" + isConsistent);\n\n            // Additional operations to increase complexity\n            int totalAge = 0;\n            for (HashMap<String, String> map : recordsList) {\n                totalAge += Integer.parseInt(map.get(\"Age\"));\n            }\n            System.out.println(\"Total Age: \" + totalAge);\n\n            // Another example of using a CSVFormat method\n            CSVFormat newFormat = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n            System.out.println(\"New format ignores header case: \" + newFormat.getIgnoreHeaderCase());\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with the write method\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withIgnoreSurroundingSpaces();\n\n        // Prepare a sample CSV input\n        String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Doe, 25\";\n        \n        // Parse the CSV data using the format\n        try {\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            for (CSVRecord record : parser) {\n                /* read */ boolean isConsistent = record.isConsistent();\n                System.out.println(\"Record is consistent: \" + isConsistent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreSurroundingSpaces",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}