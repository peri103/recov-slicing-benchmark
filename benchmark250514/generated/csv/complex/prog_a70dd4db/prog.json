{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT\n                    /* write */ .withHeaderComments(\"This is a comment\");\n\n            // Create a CSV string to parse\n            String csvData = \"header1,header2\\nvalue1,value2\";\n\n            // Parse the CSV string using the format with header comments\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional complex code\n            ArrayList<HashMap<String, String>> dataList = new ArrayList<>();\n            for (CSVRecord record : records) {\n                HashMap<String, String> dataMap = new HashMap<>();\n                dataMap.put(\"header1\", record.get(\"header1\"));\n                dataMap.put(\"header2\", record.get(\"header2\"));\n                dataList.add(dataMap);\n            }\n\n            // Process and manipulate data\n            for (HashMap<String, String> data : dataList) {\n                System.out.println(\"Header1: \" + data.get(\"header1\"));\n                System.out.println(\"Header2: \" + data.get(\"header2\"));\n            }\n\n            // Assuming we want to read the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                // Additional unrelated operations\n                int sum = 0;\n                for (int i = 0; i < 5; i++) {\n                    sum += i;\n                }\n                System.out.println(\"Sum: \" + sum);\n\n                // Retrieve the comment\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n\n                // More complex operations\n                HashMap<String, Integer> map = new HashMap<>();\n                for (int i = 0; i < 10; i++) {\n                    map.put(\"Key\" + i, i * 10);\n                }\n\n                for (String key : map.keySet()) {\n                    System.out.println(key + \": \" + map.get(key));\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT\n                    /* write */ .withHeaderComments(\"This is a comment\");\n\n            // Create a CSV string to parse\n            String csvData = \"header1,header2\\nvalue1,value2\";\n\n            // Parse the CSV string using the format with header comments\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Assuming we want to read the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}