{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignoring empty lines\n        CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n\n        // Sample data to test reading\n        List<String> data = Arrays.asList(\"Name, Age\", \"Alice, 30\", \"\", \"Bob, 25\");\n\n        // Parse the sample data using CSVFormat\n        List<CSVRecord> records = null;\n        try {\n            records = format.parse(new java.io.StringReader(String.join(\"\\n\", data))).getRecords();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Additional code for complexity\n        ArrayList<String> namesList = new ArrayList<>();\n        HashMap<String, Integer> ageMap = new HashMap<>();\n\n        for (CSVRecord record : records) {\n            String name = record.get(\"Name\");\n            int age = Integer.parseInt(record.get(\"Age\"));\n            namesList.add(name);\n            ageMap.put(name, age);\n        }\n\n        // Processing names and ages\n        for (String name : namesList) {\n            int age = ageMap.get(name);\n            System.out.println(name + \" is \" + age + \" years old.\");\n        }\n\n        // Ensure that we have records to read\n        if (records != null && !records.isEmpty()) {\n            // Read the first record and check if a field is set\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            System.out.println(\"Is 'Name' field set in the first record? \" + isSet);\n        }\n\n        // More complex operations with the data\n        namesList.removeIf(name -> ageMap.get(name) < 30);\n\n        System.out.println(\"Names of people older than 30:\");\n        for (String name : namesList) {\n            System.out.println(name);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize CSVFormat with ignoring empty lines\n        CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n\n        // Sample data to test reading\n        List<String> data = Arrays.asList(\"Name, Age\", \"Alice, 30\", \"\", \"Bob, 25\");\n\n        // Parse the sample data using CSVFormat\n        List<CSVRecord> records = null;\n        try {\n            records = format.parse(new java.io.StringReader(String.join(\"\\n\", data))).getRecords();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Ensure that we have records to read\n        if (records != null && !records.isEmpty()) {\n            // Read the first record and check if a field is set\n            CSVRecord record = records.get(0);\n            /* read */ boolean isSet = record.isSet(\"Name\");\n            System.out.println(\"Is 'Name' field set in the first record? \" + isSet);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}