{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        String csvData = \"header1,header2\\nvalue1,value2\\n,,\\nvalue3,value4\";\n        \n        try {\n            // Initialize CSVFormat and configure it to ignore empty lines\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withIgnoreEmptyLines(true);\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            \n            // Additional data structures and logic to increase complexity\n            ArrayList<Map<String, String>> recordList = new ArrayList<>();\n            HashMap<String, Integer> headerCount = new HashMap<>();\n            \n            // Iterate through the records\n            for (CSVRecord record : parser) {\n                // Check if a specific column is set\n                /* read */ boolean isSet = record.isSet(\"header1\");\n                System.out.println(\"Record isSet for 'header1': \" + isSet);\n                \n                // Create a map for each record and add it to the list\n                Map<String, String> recordMap = new HashMap<>();\n                for (String header : record.toMap().keySet()) {\n                    recordMap.put(header, record.get(header));\n                    headerCount.put(header, headerCount.getOrDefault(header, 0) + 1);\n                }\n                recordList.add(recordMap);\n            }\n            \n            // Print the collected records and header counts\n            System.out.println(\"Collected Records:\");\n            for (Map<String, String> recordMap : recordList) {\n                System.out.println(recordMap);\n            }\n            \n            System.out.println(\"Header Counts:\");\n            for (Map.Entry<String, Integer> entry : headerCount.entrySet()) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n            }\n            \n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport org.apache.commons.csv.CSVParser;\n\npublic class Main {\n    public static void main(String[] args) {\n        String csvData = \"header1,header2\\nvalue1,value2\\n,,\\nvalue3,value4\";\n        \n        try {\n            // Initialize CSVFormat and configure it to ignore empty lines\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withIgnoreEmptyLines(true);\n\n            // Parse the CSV data\n            CSVParser parser = new CSVParser(new StringReader(csvData), format);\n            \n            // Iterate through the records\n            for (CSVRecord record : parser) {\n                // Check if a specific column is set\n                /* read */ boolean isSet = record.isSet(\"header1\");\n                System.out.println(\"Record isSet for 'header1': \" + isSet);\n            }\n            \n            parser.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}