{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT\n                /* write */ .withHeaderComments(\"This is a comment\");\n\n            // Prepare a CSV string to parse\n            String csvData = \"Column1,Column2\\nValue1,Value2\";\n\n            // Parse the CSV data using the format with header comments\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional complexity: Process records and store values in an ArrayList\n            ArrayList<String> column1Values = new ArrayList<>();\n            for (CSVRecord record : records) {\n                column1Values.add(record.get(0));\n            }\n\n            // Further processing: Calculate the length of each value in Column1\n            ArrayList<Integer> lengths = new ArrayList<>();\n            for (String value : column1Values) {\n                lengths.add(value.length());\n            }\n\n            // Output the lengths\n            System.out.println(\"Lengths of values in Column1:\");\n            for (Integer length : lengths) {\n                System.out.println(length);\n            }\n\n            // Assuming we want to read the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(\"Comment from CSVRecord: \" + comment);\n            }\n\n            // More complexity: Reverse the values in Column1\n            ArrayList<String> reversedValues = new ArrayList<>();\n            for (String value : column1Values) {\n                reversedValues.add(new StringBuilder(value).reverse().toString());\n            }\n\n            // Output the reversed values\n            System.out.println(\"Reversed values in Column1:\");\n            for (String reversedValue : reversedValues) {\n                System.out.println(reversedValue);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT\n                /* write */ .withHeaderComments(\"This is a comment\");\n\n            // Prepare a CSV string to parse\n            String csvData = \"Column1,Column2\\nValue1,Value2\";\n\n            // Parse the CSV data using the format with header comments\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the records from the parser\n            List<CSVRecord> records = parser.getRecords();\n\n            // Assuming we want to read the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}