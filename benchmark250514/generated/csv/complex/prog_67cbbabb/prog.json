{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Step 1: Create a CSV format instance with a quote character\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withQuote('\"');\n            \n            // Step 2: Define some sample CSV data\n            String csvData = \"\\\"Name\\\",\\\"Age\\\"\\n\\\"John Doe\\\",\\\"30\\\"\\n\\\"Jane Smith\\\",\\\"25\\\"\";\n            \n            // Step 3: Parse the CSV data using the format\n            StringReader reader = new StringReader(csvData);\n            List<CSVRecord> records = format.parse(reader).getRecords();\n            \n            // Step 4: Perform some unrelated operations to increase complexity\n            ArrayList<String> names = new ArrayList<>();\n            ArrayList<Integer> ages = new ArrayList<>();\n            \n            for (CSVRecord record : records) {\n                if (record.size() == 2) {\n                    names.add(record.get(0));\n                    try {\n                        ages.add(Integer.parseInt(record.get(1)));\n                    } catch (NumberFormatException e) {\n                        ages.add(0); // Default age if parsing fails\n                    }\n                }\n            }\n            \n            // Step 5: Process the names and ages lists\n            for (int i = 0; i < names.size(); i++) {\n                System.out.println(\"Name: \" + names.get(i) + \", Age: \" + ages.get(i));\n            }\n            \n            // Step 6: Perform additional operations\n            int totalAge = 0;\n            for (int age : ages) {\n                totalAge += age;\n            }\n            double averageAge = (ages.isEmpty()) ? 0 : (double) totalAge / ages.size();\n            System.out.println(\"Average Age: \" + averageAge);\n            \n            // Step 7: Read the first record and print it\n            /* read */ String recordString = records.get(0).toString();\n            System.out.println(recordString);\n            \n            // Step 8: Further unrelated operations to increase complexity\n            ArrayList<String> reversedNames = new ArrayList<>();\n            for (int i = names.size() - 1; i >= 0; i--) {\n                reversedNames.add(names.get(i));\n            }\n            System.out.println(\"Reversed Names: \" + reversedNames);\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Create a CSV format instance with a quote character\n            /* write */ CSVFormat format = CSVFormat.DEFAULT.withQuote('\"');\n            \n            // Sample CSV data\n            String csvData = \"\\\"Name\\\",\\\"Age\\\"\\n\\\"John Doe\\\",\\\"30\\\"\";\n            \n            // Parse the CSV data using the format\n            StringReader reader = new StringReader(csvData);\n            List<CSVRecord> records = format.parse(reader).getRecords();\n            \n            // Read the first record and print it\n            /* read */ String recordString = records.get(0).toString();\n            System.out.println(recordString);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withQuote",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    }
}