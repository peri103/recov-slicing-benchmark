{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.QuoteMode;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a specific configuration\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Additional CSVFormat configuration\n            CSVFormat formatWithQuotes = format.withQuoteMode(QuoteMode.ALL);\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n            String csvDataWithQuotes = \"\\\"Name\\\", \\\"Age\\\"\\n\\\"John Doe\\\", \\\"30\\\"\\n\\\"Jane Smith\\\", \\\"25\\\"\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            CSVParser parserWithQuotes = CSVParser.parse(new StringReader(csvDataWithQuotes), formatWithQuotes);\n\n            // Retrieve records\n            List<CSVRecord> records = parser.getRecords();\n            List<CSVRecord> recordsWithQuotes = parserWithQuotes.getRecords();\n\n            // Additional operations using CSVRecord\n            for (CSVRecord record : recordsWithQuotes) {\n                System.out.println(\"Record with quotes: \" + record);\n            }\n\n            // Unrelated complexity: Working with a list of integers\n            List<Integer> numbers = new ArrayList<>();\n            for (int i = 0; i < 10; i++) {\n                numbers.add(i * 2);\n            }\n\n            // Process the list of numbers\n            int sum = 0;\n            for (int number : numbers) {\n                sum += number;\n            }\n            System.out.println(\"Sum of numbers: \" + sum);\n\n            // Retrieve the first record and check if the column is mapped\n            CSVRecord firstRecord = records.get(0);\n\n            // Perform some unrelated operations\n            int maxNumber = Integer.MIN_VALUE;\n            for (int number : numbers) {\n                if (number > maxNumber) {\n                    maxNumber = number;\n                }\n            }\n            System.out.println(\"Max number: \" + maxNumber);\n\n            // Check if the record is mapped\n            /* read */ boolean isMapped = firstRecord.isMapped(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' mapped in the record? \" + isMapped);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a specific configuration\n            CSVFormat format = CSVFormat.DEFAULT.withIgnoreHeaderCase();\n\n            // Sample CSV data\n            String csvData = \"Name, Age\\nJohn Doe, 30\\nJane Smith, 25\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            CSVRecord record = parser.getRecords().get(0); // Get the first record\n\n            // Check if the record is mapped\n            /* read */ boolean isMapped = record.isMapped(\"Name\");\n\n            // Output the result\n            System.out.println(\"Is 'Name' mapped in the record? \" + isMapped);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreHeaderCase",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isMapped"
    }
}