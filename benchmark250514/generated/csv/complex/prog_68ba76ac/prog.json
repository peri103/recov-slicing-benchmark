{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"header1,header2\\nvalue1,value2\\n,value3\";\n            \n            // Initialize CSVFormat with the write method\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            /* write */ csvFormat = csvFormat.withIgnoreEmptyLines(true);\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Create a map to store some unrelated data\n            Map<String, Integer> dataMap = new HashMap<>();\n            dataMap.put(\"key1\", 100);\n            dataMap.put(\"key2\", 200);\n            \n            // Perform some operations on the map\n            int sum = 0;\n            for (Map.Entry<String, Integer> entry : dataMap.entrySet()) {\n                sum += entry.getValue();\n            }\n            System.out.println(\"Sum of values in dataMap: \" + sum);\n\n            // Add another CSV operation for complexity\n            CSVFormat anotherFormat = CSVFormat.DEFAULT.withDelimiter(';');\n            CSVParser anotherParser = CSVParser.parse(\"a;b;c\", anotherFormat);\n            List<CSVRecord> anotherRecords = anotherParser.getRecords();\n            System.out.println(\"Another CSV record size: \" + anotherRecords.size());\n\n            // Read the first record to check consistency\n            CSVRecord record = records.get(0);\n            /* read */ boolean isConsistent = record.isConsistent();\n            \n            // Print the result\n            System.out.println(\"Is the first record consistent? \" + isConsistent);\n\n            // More unrelated logic\n            for (CSVRecord rec : records) {\n                System.out.println(\"Record size: \" + rec.size());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            String csvData = \"header1,header2\\nvalue1,value2\\n,value3\";\n            \n            // Initialize CSVFormat with the write method\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            /* write */ csvFormat = csvFormat.withIgnoreEmptyLines(true);\n            \n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), csvFormat);\n            List<CSVRecord> records = parser.getRecords();\n            \n            // Read the first record to check consistency\n            CSVRecord record = records.get(0);\n            /* read */ boolean isConsistent = record.isConsistent();\n            \n            // Print the result\n            System.out.println(\"Is the first record consistent? \" + isConsistent);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withIgnoreEmptyLines",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isConsistent"
    }
}