{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n            // Use StringWriter to capture CSV output\n            StringWriter out = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(out, format);\n            printer.printRecord(Arrays.asList(\"Column1\", \"Column2\"));\n            printer.printRecord(Arrays.asList(\"Value1\", \"Value2\"));\n            printer.flush();\n\n            // Additional complex logic with unrelated code\n            List<String> dataList = new ArrayList<>();\n            dataList.add(\"ExtraValue1\");\n            dataList.add(\"ExtraValue2\");\n            for (String data : dataList) {\n                System.out.println(\"Processing: \" + data);\n            }\n\n            // Read the records\n            String csvData = out.toString();\n            Iterable<CSVRecord> records = format.parse(new java.io.StringReader(csvData));\n\n            // Additional logic to process CSV records\n            List<String> processedRecords = new ArrayList<>();\n            for (CSVRecord record : records) {\n                processedRecords.add(record.get(\"Column1\"));\n            }\n\n            // Check if a specific column is set\n            for (CSVRecord record : records) {\n                /* read */ boolean isSet = record.isSet(\"Column1\");\n                System.out.println(\"Column1 is set: \" + isSet);\n                break;  // Ensure the read method is executed only once\n            }\n\n            // Further processing on processedRecords\n            for (String record : processedRecords) {\n                System.out.println(\"Processed Record: \" + record);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n            // Use StringWriter to capture CSV output\n            StringWriter out = new StringWriter();\n            CSVPrinter printer = new CSVPrinter(out, format);\n            printer.printRecord(Arrays.asList(\"Column1\", \"Column2\"));\n            printer.printRecord(Arrays.asList(\"Value1\", \"Value2\"));\n            printer.flush();\n\n            // Read the records\n            String csvData = out.toString();\n            Iterable<CSVRecord> records = format.parse(new java.io.StringReader(csvData));\n\n            // Check if a specific column is set\n            for (CSVRecord record : records) {\n                /* read */ boolean isSet = record.isSet(\"Column1\");\n                System.out.println(\"Column1 is set: \" + isSet);\n                break;  // Ensure the read method is executed only once\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}