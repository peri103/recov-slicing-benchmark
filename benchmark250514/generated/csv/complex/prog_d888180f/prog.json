{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true); /* write */\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Process all records and store them in a map\n            HashMap<String, Integer> nameAgeMap = new HashMap<>();\n            for (CSVRecord record : parser) {\n                String name = record.get(\"name\");\n                int age = Integer.parseInt(record.get(\"age\"));\n                nameAgeMap.put(name, age);\n            }\n\n            // Perform operations on the map\n            ArrayList<String> names = new ArrayList<>(nameAgeMap.keySet());\n            for (String name : names) {\n                System.out.println(\"Name: \" + name + \", Age: \" + nameAgeMap.get(name));\n            }\n\n            // Get the first record\n            CSVRecord firstRecord = parser.getRecords().get(0);\n\n            // Use the read method to check if a column is set\n            boolean isSet = firstRecord.isSet(\"name\"); /* read */\n\n            System.out.println(\"Is 'name' column set in the first record? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with the write method\n            CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true); /* write */\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nJane,25\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n\n            // Use the read method to check if a column is set\n            boolean isSet = record.isSet(\"name\"); /* read */\n\n            System.out.println(\"Is 'name' column set in the first record? \" + isSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}