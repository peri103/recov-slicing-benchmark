{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT /* write */.withHeaderComments(\"This is a comment\");\n\n            // Sample CSV data\n            String csvData = \"header1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Additional complex operations\n            ArrayList<String> processedValues = new ArrayList<>();\n            for (CSVRecord record : records) {\n                StringBuilder sb = new StringBuilder();\n                for (String value : record) {\n                    sb.append(value.toUpperCase()).append(\"-\");\n                }\n                processedValues.add(sb.toString());\n            }\n\n            // Processed values\n            for (String processedValue : processedValues) {\n                System.out.println(\"Processed Value: \" + processedValue);\n            }\n\n            // Read the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(\"Comment: \" + comment);\n            }\n\n            // Further operations on processed values\n            ArrayList<String> filteredValues = new ArrayList<>();\n            for (String processedValue : processedValues) {\n                if (processedValue.contains(\"VALUE1\")) {\n                    filteredValues.add(processedValue);\n                }\n            }\n\n            // Display filtered values\n            for (String filteredValue : filteredValues) {\n                System.out.println(\"Filtered Value: \" + filteredValue);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with header comments\n            CSVFormat format = CSVFormat.DEFAULT /* write */.withHeaderComments(\"This is a comment\");\n\n            // Sample CSV data\n            String csvData = \"header1,header2\\nvalue1,value2\";\n\n            // Parse the CSV data\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            List<CSVRecord> records = parser.getRecords();\n\n            // Read the comment from the first record\n            if (!records.isEmpty()) {\n                CSVRecord record = records.get(0);\n                /* read */ String comment = record.getComment();\n                System.out.println(comment);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}