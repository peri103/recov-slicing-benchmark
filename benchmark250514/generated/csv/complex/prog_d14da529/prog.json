{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a custom record separator\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withRecordSeparator(\";\");\n            \n            // Use StringWriter to capture the output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter to write data using the format\n            CSVPrinter printer = new CSVPrinter(writer, format);\n            printer.printRecord(\"value1\", \"value2\", \"value3\");\n            printer.flush();\n            \n            // Additional code to make the program more complex\n            List<String> complexList = new ArrayList<>();\n            complexList.add(\"extra1\");\n            complexList.add(\"extra2\");\n            complexList.add(\"extra3\");\n            \n            for (String item : complexList) {\n                System.out.println(\"Processing item: \" + item);\n            }\n            \n            // Convert the written data to CSVRecord for reading\n            String csvData = writer.toString();\n            CSVRecord record = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvData)).getRecords().get(0);\n            \n            // Read the CSVRecord as a string\n            /* read */ String recordString = record.toString();\n            System.out.println(recordString);\n            \n            // Additional operations on complexList\n            for (int i = 0; i < complexList.size(); i++) {\n                System.out.println(\"Final item: \" + complexList.get(i));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringWriter;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize CSVFormat with a custom record separator\n            CSVFormat format = CSVFormat.DEFAULT;\n            /* write */ format = format.withRecordSeparator(\";\");\n            \n            // Use StringWriter to capture the output\n            StringWriter writer = new StringWriter();\n            \n            // Create a CSVPrinter to write data using the format\n            CSVPrinter printer = new CSVPrinter(writer, format);\n            printer.printRecord(\"value1\", \"value2\", \"value3\");\n            printer.flush();\n            \n            // Convert the written data to CSVRecord for reading\n            String csvData = writer.toString();\n            CSVRecord record = CSVFormat.DEFAULT.parse(new java.io.StringReader(csvData)).getRecords().get(0);\n            \n            // Read the CSVRecord as a string\n            /* read */ String recordString = record.toString();\n            System.out.println(recordString);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withRecordSeparator",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "toString"
    }
}