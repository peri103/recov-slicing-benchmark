{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n        // Simulate parsing a CSV file with the given format\n        String csvData = \"# This is a header comment\\nHeader1,Header2\\nValue1,Value2\";\n        \n        try {\n            CSVParser parser = CSVParser.parse(csvData, format);\n            List<CSVRecord> records = parser.getRecords();\n            CSVRecord record = records.get(0); // Get the first record\n            \n            // Unrelated complex operations\n            HashMap<String, Integer> map = new HashMap<>();\n            map.put(\"Key1\", 100);\n            map.put(\"Key2\", 200);\n            int sum = 0;\n            for (String key : map.keySet()) {\n                sum += map.get(key);\n            }\n            System.out.println(\"Sum of values in map: \" + sum);\n\n            // More complex operations\n            for (CSVRecord rec : records) {\n                for (String header : format.getHeader()) {\n                    System.out.println(\"Header: \" + header + \", Value: \" + rec.get(header));\n                }\n            }\n\n            /* read */ String comment = record.getComment();\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.CSVParser;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the CSVFormat with header comments\n        CSVFormat format = CSVFormat.DEFAULT;\n        /* write */ format = format.withHeaderComments(\"This is a header comment\");\n\n        // Simulate parsing a CSV file with the given format\n        String csvData = \"# This is a header comment\\nHeader1,Header2\\nValue1,Value2\";\n        try {\n            CSVParser parser = CSVParser.parse(csvData, format);\n            List<CSVRecord> records = parser.getRecords();\n            CSVRecord record = records.get(0); // Get the first record\n\n            /* read */ String comment = record.getComment();\n            System.out.println(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withHeaderComments",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "getComment"
    }
}