{
    "java_code": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Define CSV format with allowing missing column names\n            /* write */\n            CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n\n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nDoe,25\";\n\n            // Parse the CSV data using the defined format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n\n            // Process all records\n            List<String> names = new ArrayList<>();\n            for (CSVRecord record : parser) {\n                // Add names to the list\n                names.add(record.get(\"name\"));\n            }\n\n            // Perform some unrelated operations\n            List<Integer> ages = new ArrayList<>();\n            for (int i = 0; i < names.size(); i++) {\n                ages.add(i * 10 + 20);\n            }\n\n            // Output names and ages\n            for (int i = 0; i < names.size(); i++) {\n                System.out.println(\"Name: \" + names.get(i) + \", Age: \" + ages.get(i));\n            }\n\n            // Get the first record\n            CSVRecord firstRecord = parser.getRecords().get(0);\n\n            // Check if a specific column is set (e.g., \"age\")\n            /* read */\n            boolean isAgeSet = firstRecord.isSet(\"age\");\n\n            // Output the result\n            System.out.println(\"Is 'age' column set in the first record? \" + isAgeSet);\n\n            // Additional unrelated operations\n            List<Double> salaries = new ArrayList<>();\n            for (int i = 0; i < names.size(); i++) {\n                salaries.add(50000.0 + i * 1500);\n            }\n\n            // Output salaries\n            for (double salary : salaries) {\n                System.out.println(\"Salary: \" + salary);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport java.io.StringReader;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Define CSV format with allowing missing column names\n            /* write */\n            CSVFormat format = CSVFormat.DEFAULT.withAllowMissingColumnNames(true);\n            \n            // Sample CSV data\n            String csvData = \"name,age\\nJohn,30\\nDoe,25\";\n            \n            // Parse the CSV data using the defined format\n            CSVParser parser = CSVParser.parse(new StringReader(csvData), format);\n            \n            // Get the first record\n            CSVRecord record = parser.getRecords().get(0);\n            \n            // Check if a specific column is set (e.g., \"age\")\n            /* read */\n            boolean isAgeSet = record.isSet(\"age\");\n            \n            // Output the result\n            System.out.println(\"Is 'age' column set in the first record? \" + isAgeSet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.csv.CSVFormat",
        "write_method": "withAllowMissingColumnNames",
        "read_class": "org.apache.commons.csv.CSVRecord",
        "read_method": "isSet"
    }
}