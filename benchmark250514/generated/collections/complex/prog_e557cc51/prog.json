{
    "java_code": "import org.apache.commons.collections4.map.PredicatedMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.functors.NotNullPredicate;\nimport org.apache.commons.collections4.map.LinkedMap;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a base map\n        Map<String, Integer> baseMap = new HashMap<>();\n\n        // Define predicates for keys and values\n        Predicate<String> keyPredicate = TruePredicate.truePredicate();\n        Predicate<Integer> valuePredicate = NotNullPredicate.notNullPredicate();\n\n        // Create a PredicatedMap using the base map and predicates\n        PredicatedMap<String, Integer> predicatedMap = PredicatedMap.predicatedMap(baseMap, keyPredicate, valuePredicate);\n\n        // Insert some values into the predicated map\n        predicatedMap.put(\"initialKey\", 456);\n\n        // Create another map and perform some operations\n        LinkedMap<String, Integer> linkedMap = new LinkedMap<>();\n        linkedMap.put(\"first\", 1);\n        linkedMap.put(\"second\", 2);\n        linkedMap.put(\"third\", 3);\n\n        // Iterate over the linked map\n        for (Map.Entry<String, Integer> entry : linkedMap.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n\n        // Add more entries to the predicated map\n        predicatedMap.put(\"anotherKey\", 789);\n\n        // Perform a calculation\n        int sum = 0;\n        for (Integer value : linkedMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of linkedMap values: \" + sum);\n\n        /* write */ predicatedMap.put(\"key1\", 123);\n\n        // Perform some operations on the predicated map\n        Set<String> keys = predicatedMap.keySet();\n        for (String key : keys) {\n            System.out.println(\"Key: \" + key);\n        }\n\n        // More operations\n        if (predicatedMap.containsKey(\"anotherKey\")) {\n            System.out.println(\"anotherKey is present\");\n        }\n\n        // Complex operation involving both maps\n        for (String key : linkedMap.keySet()) {\n            if (!predicatedMap.containsKey(key)) {\n                predicatedMap.put(key, linkedMap.get(key));\n            }\n        }\n\n        // Final read operation\n        /* read */ int value = predicatedMap.get(\"key1\");\n        System.out.println(value);\n\n        // Print all values in the predicated map\n        for (Map.Entry<String, Integer> entry : predicatedMap.entrySet()) {\n            System.out.println(\"PredicatedMap - \" + entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.collections4.map.PredicatedMap;\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a base map\n        Map<String, Integer> baseMap = new HashMap<>();\n\n        // Define predicates for keys and values\n        Predicate<String> keyPredicate = TruePredicate.truePredicate();\n        Predicate<Integer> valuePredicate = TruePredicate.truePredicate();\n\n        // Create a PredicatedMap using the base map and predicates\n        PredicatedMap<String, Integer> predicatedMap = PredicatedMap.predicatedMap(baseMap, keyPredicate, valuePredicate);\n\n        /* write */ predicatedMap.put(\"key1\", 123);\n        /* read */ int value = predicatedMap.get(\"key1\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.collections4.map.PredicatedMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.PredicatedMap",
        "read_method": "get"
    }
}