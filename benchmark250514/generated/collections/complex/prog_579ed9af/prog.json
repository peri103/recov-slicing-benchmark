{
    "java_code": "import org.apache.commons.collections4.map.LRUMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        LRUMap<String, Integer> lruMap = new LRUMap<>();\n        Map<String, String> hashMap = new HashMap<>();\n        \n        // Initialize the hashMap with some values\n        hashMap.put(\"A\", \"Apple\");\n        hashMap.put(\"B\", \"Banana\");\n        hashMap.put(\"C\", \"Cherry\");\n\n        // Perform some operations on hashMap\n        if (hashMap.containsKey(\"A\")) {\n            System.out.println(\"HashMap contains key 'A' with value: \" + hashMap.get(\"A\"));\n        }\n\n        // Insert more values into hashMap\n        hashMap.put(\"D\", \"Date\");\n        hashMap.put(\"E\", \"Elderberry\");\n\n        // Iterate and print all values in hashMap\n        for (Map.Entry<String, String> entry : hashMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        /* write */ lruMap.put(\"key\", 100);\n\n        // Perform unrelated computation\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 10: \" + sum);\n\n        // More operations on hashMap\n        hashMap.remove(\"B\");\n\n        // Check the size of hashMap\n        System.out.println(\"Size of hashMap: \" + hashMap.size());\n\n        /* read */ Integer value = lruMap.get(\"key\");\n\n        System.out.println(\"Value from LRUMap: \" + value);\n\n        // Additional logic\n        if (value != null && value > 50) {\n            System.out.println(\"The value is greater than 50.\");\n        } else {\n            System.out.println(\"The value is 50 or less.\");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.collections4.map.LRUMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        LRUMap<String, Integer> lruMap = new LRUMap<>();\n\n        /* write */ lruMap.put(\"key\", 100);\n\n        /* read */ Integer value = lruMap.get(\"key\");\n\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.collections4.map.LRUMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.LRUMap",
        "read_method": "get"
    }
}