{
    "java_code": "import org.apache.commons.collections4.map.AbstractSortedMapDecorator;\nimport java.util.TreeMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance of TreeMap to use with AbstractSortedMapDecorator\n        TreeMap<String, Integer> treeMap = new TreeMap<>();\n\n        // Create an instance of AbstractSortedMapDecorator using the TreeMap\n        AbstractSortedMapDecorator<String, Integer> mapDecorator = new AbstractSortedMapDecorator<String, Integer>(treeMap) {\n            // No additional methods needed for this example\n        };\n\n        // Create another map to make the program more complex\n        Map<String, String> additionalMap = new HashMap<>();\n        additionalMap.put(\"extraKey1\", \"extraValue1\");\n        additionalMap.put(\"extraKey2\", \"extraValue2\");\n\n        // Write a value to the map\n        /* write */ mapDecorator.put(\"key\", 100);\n\n        // Perform some operations on the additional map\n        for (Map.Entry<String, String> entry : additionalMap.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n\n        // Manipulate the mapDecorator with additional data\n        mapDecorator.put(\"anotherKey\", 200);\n        mapDecorator.put(\"yetAnotherKey\", 300);\n\n        // Perform some calculations\n        int sum = 0;\n        for (Integer value : mapDecorator.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in mapDecorator: \" + sum);\n\n        // Read the value from the map\n        /* read */ Integer value = mapDecorator.get(\"key\");\n\n        // Print the value to ensure it was correctly read\n        System.out.println(value);\n\n        // Further operations on the mapDecorator\n        if (mapDecorator.containsKey(\"anotherKey\")) {\n            System.out.println(\"Contains 'anotherKey': \" + mapDecorator.get(\"anotherKey\"));\n        }\n\n        // Final operations to demonstrate complexity\n        mapDecorator.remove(\"yetAnotherKey\");\n        System.out.println(\"After removal, size of mapDecorator: \" + mapDecorator.size());\n    }\n}",
    "java_code_simple": "import org.apache.commons.collections4.map.AbstractSortedMapDecorator;\nimport java.util.TreeMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance of TreeMap to use with AbstractSortedMapDecorator\n        TreeMap<String, Integer> treeMap = new TreeMap<>();\n        \n        // Create an instance of AbstractSortedMapDecorator using the TreeMap\n        AbstractSortedMapDecorator<String, Integer> mapDecorator = new AbstractSortedMapDecorator<String, Integer>(treeMap) {\n            // No additional methods needed for this example\n        };\n\n        // Write a value to the map\n        /* write */ mapDecorator.put(\"key\", 100);\n\n        // Read the value from the map\n        /* read */ Integer value = mapDecorator.get(\"key\");\n\n        // Print the value to ensure it was correctly read\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.collections4.map.AbstractSortedMapDecorator",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.AbstractSortedMapDecorator",
        "read_method": "get"
    }
}