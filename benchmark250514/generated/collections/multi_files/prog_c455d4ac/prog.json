{
    "files": {
        "ExpiringMap.java": "import org.apache.commons.collections4.map.PassiveExpiringMap;\nimport java.util.concurrent.TimeUnit;\n\npublic class ExpiringMap {\n    private PassiveExpiringMap<String, String> map;\n\n    public ExpiringMap(long duration, TimeUnit timeUnit) {\n        map = new PassiveExpiringMap<>(duration, timeUnit);\n    }\n\n    public void putValue(String key, String value) {\n        /* write */ map.put(key, value);\n    }\n\n    public String getValue(String key) {\n        return map.get(key);\n    }\n}",
        "Course.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Course {\n    private String courseName;\n    private Map<String, Integer> studentScores;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        studentScores = new HashMap<>();\n    }\n\n    public void addStudentScore(String studentName, int score) {\n        studentScores.put(studentName, score);\n    }\n\n    public int getStudentScore(String studentName) {\n        return studentScores.getOrDefault(studentName, 0);\n    }\n\n    public void printAllScores() {\n        for (Map.Entry<String, Integer> entry : studentScores.entrySet()) {\n            System.out.println(\"Student: \" + entry.getKey() + \", Score: \" + entry.getValue());\n        }\n    }\n}",
        "Main.java": "import java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use the ExpiringMap\n        ExpiringMap expiringMap = new ExpiringMap(5, TimeUnit.SECONDS);\n        expiringMap.putValue(\"key\", \"value\");\n\n        // Use the Course class\n        Course course = new Course(\"Mathematics\");\n        course.addStudentScore(\"Alice\", 95);\n        course.addStudentScore(\"Bob\", 88);\n        \n        // Print all student scores\n        course.printAllScores();\n\n        // Perform some operations\n        int aliceScore = course.getStudentScore(\"Alice\");\n        int bobScore = course.getStudentScore(\"Bob\");\n        System.out.println(\"Alice's score: \" + aliceScore);\n        System.out.println(\"Bob's score: \" + bobScore);\n\n        // Sleep for a short duration to ensure the read happens before expiration\n        try {\n            Thread.sleep(1000); // 1 second\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Read the value from the ExpiringMap\n        /* read */ String value = expiringMap.getValue(\"key\");\n        System.out.println(\"ExpiringMap value: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.collections4.map.PassiveExpiringMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.PassiveExpiringMap",
        "read_method": "get"
    },
    "java_code_simple": "import org.apache.commons.collections4.map.PassiveExpiringMap;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the PassiveExpiringMap with a timeout of 5 seconds\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(5, TimeUnit.SECONDS);\n        \n        /* write */ map.put(\"key\", \"value\");\n        \n        // Sleep for a short duration to ensure the read happens before expiration\n        try {\n            Thread.sleep(1000); // 1 second\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        /* read */ String value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.collections4.map.PassiveExpiringMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the PassiveExpiringMap with a timeout of 5 seconds\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(5, TimeUnit.SECONDS);\n        \n        /* write */ map.put(\"key\", \"value\");\n        \n        // Introduce additional complexity with another map\n        Map<String, Integer> additionalMap = new HashMap<>();\n        additionalMap.put(\"one\", 1);\n        additionalMap.put(\"two\", 2);\n        additionalMap.put(\"three\", 3);\n        \n        // Iterate over the additional map\n        for (Map.Entry<String, Integer> entry : additionalMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        \n        // Perform some calculations\n        int sum = 0;\n        for (int value : additionalMap.values()) {\n            sum += value;\n        }\n        System.out.println(\"Sum of values in additionalMap: \" + sum);\n        \n        // Sleep for a short duration to ensure the read happens before expiration\n        try {\n            Thread.sleep(1000); // 1 second\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        /* read */ String value = map.get(\"key\");\n        System.out.println(value);\n        \n        // More operations on the additional map\n        additionalMap.put(\"four\", 4);\n        System.out.println(\"Updated additionalMap size: \" + additionalMap.size());\n        \n        // Another calculation\n        int product = 1;\n        for (int val : additionalMap.values()) {\n            product *= val;\n        }\n        System.out.println(\"Product of values in additionalMap: \" + product);\n    }\n}"
}