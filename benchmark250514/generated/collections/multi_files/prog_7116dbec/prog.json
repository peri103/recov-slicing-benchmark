{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private Course course;\n\n    public Student(String name) {\n        this.name = name;\n        this.course = new Course();\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n}\n",
        "Course.java": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.bag.PredicatedBag;\nimport org.apache.commons.collections4.Predicate;\n\npublic class Course {\n    private Bag<String> assignments;\n    private PredicatedBag<String> predicatedAssignments;\n\n    public Course() {\n        Predicate<Object> truePredicate = object -> true;\n        this.assignments = new HashBag<>();\n        this.predicatedAssignments = PredicatedBag.predicatedBag(assignments, truePredicate);\n    }\n\n    public void addAssignment(String assignment) {\n        /* write */ predicatedAssignments.add(assignment);\n    }\n\n    public int getAssignmentCount(String assignment) {\n        /* read */ return predicatedAssignments.getCount(assignment);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"John\");\n        Course course = student.getCourse();\n        \n        course.addAssignment(\"Math Homework\");\n        \n        // Additional functionality\n        course.addAssignment(\"Science Project\");\n        course.addAssignment(\"Math Homework\"); // Add the same assignment again\n\n        int mathHomeworkCount = course.getAssignmentCount(\"Math Homework\");\n        System.out.println(\"Math Homework count: \" + mathHomeworkCount);\n\n        int scienceProjectCount = course.getAssignmentCount(\"Science Project\");\n        System.out.println(\"Science Project count: \" + scienceProjectCount);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.collections4.bag.PredicatedBag",
        "write_method": "add",
        "read_class": "org.apache.commons.collections4.bag.PredicatedBag",
        "read_method": "getCount"
    },
    "java_code_simple": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.bag.PredicatedBag;\nimport org.apache.commons.collections4.Predicate;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a predicate that always returns true (no filtering)\n        Predicate<Object> truePredicate = object -> true;\n        \n        // Create a HashBag instance\n        Bag<String> hashBag = new HashBag<>();\n        \n        // Wrap the HashBag with a PredicatedBag using the truePredicate\n        PredicatedBag<String> predicatedBag = PredicatedBag.predicatedBag(hashBag, truePredicate);\n        \n        /* write */ predicatedBag.add(\"example\");\n\n        /* read */ int count = predicatedBag.getCount(\"example\");\n        \n        System.out.println(count);\n    }\n}",
    "java_code_complex": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.bag.PredicatedBag;\nimport org.apache.commons.collections4.Predicate;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a predicate that always returns true (no filtering)\n        Predicate<Object> truePredicate = object -> true;\n        \n        // Create a HashBag instance\n        Bag<String> hashBag = new HashBag<>();\n        \n        // Wrap the HashBag with a PredicatedBag using the truePredicate\n        PredicatedBag<String> predicatedBag = PredicatedBag.predicatedBag(hashBag, truePredicate);\n        \n        /* write */ predicatedBag.add(\"example\");\n\n        // Additional code to make the program more complex\n        Bag<Integer> integerBag = new HashBag<>();\n        integerBag.add(1);\n        integerBag.add(2);\n        integerBag.add(3);\n\n        int sum = 0;\n        for (Integer number : integerBag) {\n            sum += number;\n        }\n        System.out.println(\"Sum of integers in integerBag: \" + sum);\n\n        Predicate<Integer> evenPredicate = number -> number % 2 == 0;\n        PredicatedBag<Integer> evenBag = PredicatedBag.predicatedBag(integerBag, evenPredicate);\n        evenBag.add(4); // This will be accepted\n        // evenBag.add(5); // This will throw an exception due to the predicate\n\n        int evenSum = 0;\n        for (Integer number : evenBag) {\n            evenSum += number;\n        }\n        System.out.println(\"Sum of even integers in evenBag: \" + evenSum);\n\n        /* read */ int count = predicatedBag.getCount(\"example\");\n        \n        System.out.println(count);\n    }\n}"
}