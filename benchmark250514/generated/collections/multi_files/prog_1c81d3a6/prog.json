{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private Course course;\n\n    public Student(String name, Course course) {\n        this.name = name;\n        this.course = course;\n    }\n\n    public void enroll(String courseName) {\n        course.addStudent(this, courseName);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n}\n",
        "Course.java": "import org.apache.commons.collections4.map.AbstractReferenceMap;\nimport org.apache.commons.collections4.map.ReferenceMap;\n\npublic class Course {\n    private ReferenceMap<String, String> studentCourseMap;\n\n    public Course() {\n        studentCourseMap = new ReferenceMap<>(AbstractReferenceMap.ReferenceStrength.SOFT, AbstractReferenceMap.ReferenceStrength.SOFT);\n    }\n\n    public void addStudent(Student student, String courseName) {\n        /* write */ studentCourseMap.put(student.getName(), courseName);\n    }\n\n    public String getCourseForStudent(String studentName) {\n        /* read */ return studentCourseMap.get(studentName);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Course course = new Course();\n        Student student1 = new Student(\"Alice\", course);\n        Student student2 = new Student(\"Bob\", course);\n\n        student1.enroll(\"Mathematics\");\n        student2.enroll(\"Science\");\n\n        String aliceCourse = course.getCourseForStudent(\"Alice\");\n        System.out.println(\"Alice is enrolled in: \" + aliceCourse);\n\n        String bobCourse = course.getCourseForStudent(\"Bob\");\n        System.out.println(\"Bob is enrolled in: \" + bobCourse);\n\n        // Additional logic to demonstrate complexity\n        if (aliceCourse.equals(\"Mathematics\")) {\n            System.out.println(\"Alice is taking the Mathematics course.\");\n        } else {\n            System.out.println(\"Alice is not taking the Mathematics course.\");\n        }\n\n        if (bobCourse.equals(\"Science\")) {\n            System.out.println(\"Bob is taking the Science course.\");\n        } else {\n            System.out.println(\"Bob is not taking the Science course.\");\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.collections4.map.AbstractReferenceMap",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.AbstractReferenceMap",
        "read_method": "get"
    },
    "java_code_simple": "import org.apache.commons.collections4.map.AbstractReferenceMap;\nimport org.apache.commons.collections4.map.ReferenceMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the map with appropriate reference types\n        ReferenceMap<String, String> map = new ReferenceMap<>(AbstractReferenceMap.ReferenceStrength.SOFT, AbstractReferenceMap.ReferenceStrength.SOFT);\n\n        /* write */ map.put(\"key\", \"value\");\n\n        /* read */ String value = map.get(\"key\");\n\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.collections4.map.AbstractReferenceMap;\nimport org.apache.commons.collections4.map.ReferenceMap;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the map with appropriate reference types\n        ReferenceMap<String, String> map = new ReferenceMap<>(AbstractReferenceMap.ReferenceStrength.SOFT, AbstractReferenceMap.ReferenceStrength.SOFT);\n\n        // Create an additional HashMap for complexity\n        HashMap<Integer, String> hashMap = new HashMap<>();\n        \n        // Add some values to the HashMap\n        for (int i = 0; i < 5; i++) {\n            hashMap.put(i, \"Value\" + i);\n        }\n\n        // Iterate over the HashMap and print values\n        for (int i = 0; i < hashMap.size(); i++) {\n            System.out.println(\"HashMap Value: \" + hashMap.get(i));\n        }\n\n        /* write */ map.put(\"key\", \"value\");\n\n        // Perform some operations on the ReferenceMap\n        map.put(\"anotherKey\", \"anotherValue\");\n        map.remove(\"anotherKey\");\n\n        // Add more complexity with conditional logic\n        if (hashMap.containsKey(3)) {\n            System.out.println(\"HashMap contains key 3\");\n        } else {\n            System.out.println(\"HashMap does not contain key 3\");\n        }\n\n        // Perform some operations on the ReferenceMap\n        map.put(\"yetAnotherKey\", \"yetAnotherValue\");\n        \n        /* read */ String value = map.get(\"key\");\n\n        System.out.println(value);\n\n        // Additional logic to manipulate the hashMap\n        for (int i = 0; i < 5; i++) {\n            hashMap.put(i, \"UpdatedValue\" + i);\n        }\n\n        // Print updated values from the HashMap\n        for (int i = 0; i < hashMap.size(); i++) {\n            System.out.println(\"Updated HashMap Value: \" + hashMap.get(i));\n        }\n    }\n}"
}