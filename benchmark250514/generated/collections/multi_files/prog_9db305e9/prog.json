{
    "files": {
        "Course.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Course {\n    private String courseName;\n    private Map<Integer, String> students = new HashMap<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(int studentId, String studentName) {\n        /* write */ students.put(studentId, studentName);\n    }\n\n    public String getStudentName(int studentId) {\n        return students.get(studentId);\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Student.java": "public class Student {\n    private int id;\n    private String name;\n    private Course course;\n\n    public Student(int id, String name, Course course) {\n        this.id = id;\n        this.name = name;\n        this.course = course;\n    }\n\n    public void enrollInCourse() {\n        course.enrollStudent(id, name);\n    }\n\n    public String getCourseName() {\n        return course.getCourseName();\n    }\n\n    public String getEnrolledStudentName() {\n        return course.getStudentName(id);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Create a course\n        Course course = new Course(\"Mathematics\");\n\n        // Create a student and enroll in the course\n        Student student = new Student(1, \"Alice\", course);\n        student.enrollInCourse();\n\n        // Additional operations unrelated to the write-read pair\n        int x = 5;\n        int y = 10;\n        int sum = x + y;\n        System.out.println(\"Sum: \" + sum);\n\n        // Read the student name from the course\n        /* read */ String studentName = student.getEnrolledStudentName();\n\n        // Print the student name to verify the read operation\n        System.out.println(\"Enrolled student name: \" + studentName);\n\n        // More unrelated operations\n        int product = 1;\n        for (int i = 1; i <= 3; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers 1 to 3: \" + product);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.collections4.map.AbstractSortedMapDecorator",
        "write_method": "put",
        "read_class": "org.apache.commons.collections4.map.AbstractSortedMapDecorator",
        "read_method": "get"
    },
    "java_code_simple": "import org.apache.commons.collections4.map.AbstractSortedMapDecorator;\nimport java.util.TreeMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a TreeMap to be decorated by AbstractSortedMapDecorator\n        TreeMap<Integer, String> baseMap = new TreeMap<>();\n        \n        // Create an instance of AbstractSortedMapDecorator using the baseMap\n        AbstractSortedMapDecorator<Integer, String> mapDecorator = new AbstractSortedMapDecorator<>(baseMap) {};\n        \n        // Use the write method to put a value into the map\n        /* write */ mapDecorator.put(1, \"value1\");\n        \n        // Use the read method to get the value from the map\n        /* read */ String value = mapDecorator.get(1);\n        \n        // Print the value to verify the read operation\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.collections4.map.AbstractSortedMapDecorator;\nimport java.util.TreeMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a TreeMap to be decorated by AbstractSortedMapDecorator\n        TreeMap<Integer, String> baseMap = new TreeMap<>();\n        \n        // Create an instance of AbstractSortedMapDecorator using the baseMap\n        AbstractSortedMapDecorator<Integer, String> mapDecorator = new AbstractSortedMapDecorator<>(baseMap) {};\n        \n        // Use the write method to put a value into the map\n        /* write */ mapDecorator.put(1, \"value1\");\n        \n        // Additional unrelated code for complexity\n        Map<String, Integer> hashMap = new HashMap<>();\n        hashMap.put(\"A\", 10);\n        hashMap.put(\"B\", 20);\n        hashMap.put(\"C\", 30);\n        \n        int sum = 0;\n        for (Map.Entry<String, Integer> entry : hashMap.entrySet()) {\n            sum += entry.getValue();\n        }\n        System.out.println(\"Sum of values in hashMap: \" + sum);\n        \n        // More operations on the mapDecorator\n        mapDecorator.put(2, \"value2\");\n        mapDecorator.put(3, \"value3\");\n        \n        // Iterating over mapDecorator\n        for (Map.Entry<Integer, String> entry : mapDecorator.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        \n        // Use the read method to get the value from the map\n        /* read */ String value = mapDecorator.get(1);\n        \n        // Print the value to verify the read operation\n        System.out.println(\"Read value from mapDecorator: \" + value);\n        \n        // Additional unrelated code for complexity\n        TreeMap<Double, String> anotherTreeMap = new TreeMap<>();\n        anotherTreeMap.put(1.1, \"A\");\n        anotherTreeMap.put(2.2, \"B\");\n        anotherTreeMap.put(3.3, \"C\");\n        \n        for (Map.Entry<Double, String> entry : anotherTreeMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        \n        // Final unrelated operation\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of numbers 1 to 5: \" + product);\n    }\n}"
}