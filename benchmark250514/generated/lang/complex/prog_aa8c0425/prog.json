{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the tokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,,banana,,cherry\");\n        \n        // Create an ArrayList to store tokens\n        List<String> tokenList = new ArrayList<>();\n\n        // Set the tokenizer to ignore empty tokens\n        /* write */ tokenizer.setIgnoreEmptyTokens(true);\n\n        // Add some unrelated operations to increase complexity\n        for (int i = 0; i < 5; i++) {\n            tokenList.add(\"Token\" + i);\n        }\n\n        // Add another StrTokenizer operation\n        StrTokenizer tokenizer2 = new StrTokenizer(\"dog,,cat,,mouse\");\n        tokenizer2.setIgnoreEmptyTokens(false);\n        String tokenFromTokenizer2 = tokenizer2.nextToken();\n        System.out.println(\"Token from tokenizer2: \" + tokenFromTokenizer2);\n\n        // Continue with more unrelated logic\n        int sum = 0;\n        for (int i = 0; i < tokenList.size(); i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of indices: \" + sum);\n\n        // Read the first token from the original tokenizer\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(\"First token from tokenizer: \" + token);\n\n        // Add more operations to use the tokenList\n        for (String t : tokenList) {\n            System.out.println(\"Existing token: \" + t);\n        }\n\n        // Add new tokens to the list\n        while (tokenizer.hasNext()) {\n            tokenList.add(tokenizer.nextToken());\n        }\n\n        // Print all tokens from the tokenList\n        for (String t : tokenList) {\n            System.out.println(\"Final token: \" + t);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,,banana,,cherry\");\n        /* write */ tokenizer.setIgnoreEmptyTokens(true);\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoreEmptyTokens",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}