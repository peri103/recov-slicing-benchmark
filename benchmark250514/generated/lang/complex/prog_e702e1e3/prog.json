{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,,World\");\n\n        // Write operation: setIgnoreEmptyTokens to true\n        /* write */ tokenizer.setIgnoreEmptyTokens(true);\n\n        // Initialize another StrTokenizer with a different string\n        StrTokenizer tokenizer2 = new StrTokenizer(\"Java,Python,,C++\");\n        tokenizer2.setIgnoreEmptyTokens(true);\n\n        // Use tokenizer2 to parse tokens and store them in a list\n        List<String> tokensList = new ArrayList<>();\n        while (tokenizer2.hasNext()) {\n            tokensList.add(tokenizer2.nextToken());\n        }\n\n        // Perform some operations on the tokensList\n        for (String token : tokensList) {\n            System.out.println(\"Token from tokenizer2: \" + token);\n        }\n\n        // Read operation: get the next token from the original tokenizer\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token to ensure the read operation works correctly\n        System.out.println(\"Token from tokenizer: \" + token);\n\n        // More complex operations with tokensList\n        tokensList.add(\"JavaScript\");\n        tokensList.add(\"Ruby\");\n        tokensList.remove(\"Python\");\n\n        // Print all tokens from tokensList\n        for (String t : tokensList) {\n            System.out.println(\"Updated token list: \" + t);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,,World\");\n\n        // Write operation: setIgnoreEmptyTokens to true\n        /* write */ tokenizer.setIgnoreEmptyTokens(true);\n\n        // Read operation: get the next token\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token to ensure the read operation works correctly\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoreEmptyTokens",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}