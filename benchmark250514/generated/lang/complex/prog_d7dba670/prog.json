{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,,World\");\n\n        // Set the tokenizer to ignore empty tokens\n        /* write */ tokenizer.setIgnoreEmptyTokens(true);\n\n        // Add complexity: use a different StrTokenizer instance\n        StrTokenizer tokenizer2 = new StrTokenizer(\"Java,,Programming\");\n        tokenizer2.setIgnoreEmptyTokens(false);\n        System.out.println(\"Tokens from tokenizer2:\");\n        while (tokenizer2.hasNext()) {\n            System.out.println(tokenizer2.nextToken());\n        }\n\n        // Add complexity: manipulate strings using StringUtils\n        String[] words = {\"Apache\", \"Commons\", \"Lang3\"};\n        String joinedWords = StringUtils.join(words, \"-\");\n        System.out.println(\"Joined words: \" + joinedWords);\n\n        // Add complexity: perform operations on arrays\n        int[] numbers = {5, 10, 15, 20};\n        int sum = Arrays.stream(numbers).sum();\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Add complexity: use tokenizer to extract tokens\n        System.out.println(\"Tokens from tokenizer:\");\n        while (tokenizer.hasNext()) {\n            String token = tokenizer.nextToken();\n            System.out.println(token);\n        }\n\n        // Read the first token from the tokenizer\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token to ensure the read method works\n        System.out.println(\"First token from tokenizer: \" + token);\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,,World\");\n\n        // Set the tokenizer to ignore empty tokens\n        /* write */ tokenizer.setIgnoreEmptyTokens(true);\n\n        // Read the first token from the tokenizer\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token to ensure the read method works\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoreEmptyTokens",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}