{
    "java_code": "import org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Object left = new Object();\n        Object right = new Object();\n        \n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        /* write */ equalsBuilder.append(left, left); // Using the append method to compare two objects\n\n        // Additional unrelated code to make the program more complex\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 10);\n        }\n        \n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Another use of a different API pair\n        HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();\n        hashCodeBuilder.append(left);\n        int hashCode = hashCodeBuilder.toHashCode();\n        System.out.println(\"HashCode: \" + hashCode);\n\n        /* read */ boolean isEqual = equalsBuilder.isEquals(); // Checking if the objects are equal\n        System.out.println(\"Objects are equal: \" + isEqual);\n\n        // More complex logic using the list\n        ArrayList<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        \n        StringBuilder concatenated = new StringBuilder();\n        for (String str : strings) {\n            concatenated.append(str).append(\" \");\n        }\n        System.out.println(\"Concatenated String: \" + concatenated.toString().trim());\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.builder.EqualsBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        Object left = new Object();\n        Object right = new Object();\n        \n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        /* write */ equalsBuilder.append(left, left); // Using the append method to compare two objects\n        /* read */ boolean isEqual = equalsBuilder.isEquals(); // Checking if the objects are equal\n        \n        System.out.println(isEqual);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.builder.EqualsBuilder",
        "write_method": "append",
        "read_class": "org.apache.commons.lang3.builder.EqualsBuilder",
        "read_method": "isEquals"
    }
}