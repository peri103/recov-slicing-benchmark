{
    "java_code": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\nimport java.util.Calendar;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n        \n        // Adding days to the current date\n        /* write */ Date newDate = DateUtils.addDays(date, 5);\n        \n        // Creating a list of dates for demonstration\n        ArrayList<Date> dateList = new ArrayList<>();\n        dateList.add(newDate);\n        dateList.add(DateUtils.addDays(newDate, 2));\n        dateList.add(DateUtils.addDays(newDate, -3));\n        \n        // Manipulating the calendar object\n        calendar.add(Calendar.MONTH, 1);\n        Date oneMonthLater = calendar.getTime();\n        dateList.add(oneMonthLater);\n        \n        for (Date d : dateList) {\n            System.out.println(\"Date in list: \" + d);\n        }\n        \n        // Truncate the original newDate to the nearest semi-month\n        /* read */ Date truncatedDate = DateUtils.truncate(newDate, DateUtils.SEMI_MONTH);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n        \n        // Further manipulation of the calendar\n        calendar.add(Calendar.YEAR, -1);\n        Date oneYearEarlier = calendar.getTime();\n        System.out.println(\"One year earlier: \" + oneYearEarlier);\n        \n        // Adding more complexity with date comparison\n        if (oneMonthLater.after(truncatedDate)) {\n            System.out.println(\"One month later is after the truncated date.\");\n        } else {\n            System.out.println(\"One month later is not after the truncated date.\");\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        /* write */ Date newDate = DateUtils.addDays(date, 5);\n        /* read */ Date truncatedDate = DateUtils.truncate(newDate, DateUtils.SEMI_MONTH);\n        System.out.println(truncatedDate);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.time.DateUtils",
        "write_method": "addDays",
        "read_class": "org.apache.commons.lang3.time.DateUtils",
        "read_method": "truncate"
    }
}