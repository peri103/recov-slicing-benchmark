{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the tokenizer with a string\n        StrTokenizer tokenizer = new StrTokenizer(\"a,b,c,d\");\n        \n        // Use StringUtils to perform some operations\n        String reversed = StringUtils.reverse(\"abcd\");\n        System.out.println(\"Reversed String: \" + reversed);\n\n        // Set ignored character in the tokenizer\n        /* write */ tokenizer.setIgnoredChar(',');\n\n        // Perform some unrelated operations\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers 1 to 10: \" + sum);\n\n        // Use another StrTokenizer for different operations\n        StrTokenizer tokenizer2 = new StrTokenizer(\"e,f,g,h\");\n        tokenizer2.setDelimiterChar(';');\n        while (tokenizer2.hasNext()) {\n            System.out.println(\"Token from tokenizer2: \" + tokenizer2.nextToken());\n        }\n\n        // Read the next token from the original tokenizer\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(\"First token from tokenizer: \" + token);\n\n        // Perform some additional operations\n        String joinedString = StringUtils.join(new String[]{\"Hello\", \"World\"}, \" \");\n        System.out.println(\"Joined String: \" + joinedString);\n\n        // Another loop to demonstrate complexity\n        for (int j = 0; j < 5; j++) {\n            System.out.println(\"Number: \" + j);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer(\"a,b,c,d\");\n        /* write */ tokenizer.setIgnoredChar(',');\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoredChar",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}