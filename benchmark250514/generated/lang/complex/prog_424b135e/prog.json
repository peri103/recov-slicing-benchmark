{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"a,b,c\");\n\n        // Initialize a map to store token counts\n        Map<String, Integer> tokenCountMap = new HashMap<>();\n\n        // Set the ignored character to a comma\n        /* write */ tokenizer.setIgnoredChar(',');\n\n        // Count the occurrences of each token\n        String token;\n        while (tokenizer.hasNext()) {\n            token = tokenizer.nextToken();\n            tokenCountMap.put(token, tokenCountMap.getOrDefault(token, 0) + 1);\n        }\n\n        // Perform some unrelated string operations\n        String sampleString = \"Hello, World!\";\n        String reversedString = StringUtils.reverse(sampleString);\n        System.out.println(\"Reversed String: \" + reversedString);\n\n        // Print the token count map\n        System.out.println(\"Token Count Map: \" + tokenCountMap);\n\n        // Reset the tokenizer for another reading\n        tokenizer.reset();\n\n        // Read the next token, which should be the first token before the ignored character was set\n        /* read */ token = tokenizer.nextToken();\n\n        // Print the token\n        System.out.println(\"First Token: \" + token);\n\n        // Perform additional operations on the map\n        for (Map.Entry<String, Integer> entry : tokenCountMap.entrySet()) {\n            System.out.println(\"Token: \" + entry.getKey() + \", Count: \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"a,b,c\");\n\n        // Set the ignored character to a comma\n        /* write */ tokenizer.setIgnoredChar(',');\n\n        // Read the next token, which should be the first token before the ignored character was set\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoredChar",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}