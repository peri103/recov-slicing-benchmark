{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello 'World' 'Java' 'Programming'\");\n        \n        // Set the quote character to single quote\n        /* write */ tokenizer.setQuoteChar('\\'');\n\n        // Initialize another StrTokenizer for a different string\n        StrTokenizer tokenizer2 = new StrTokenizer(\"Complex 'Code' 'Example'\");\n        tokenizer2.setQuoteChar('\\'');\n\n        // Process tokens from the second tokenizer\n        while (tokenizer2.hasNext()) {\n            String token2 = tokenizer2.nextToken();\n            System.out.println(\"Token from tokenizer2: \" + token2);\n        }\n\n        // Perform some unrelated operations to make the program more complex\n        String sampleString = \"Apache Commons Lang\";\n        String reversedString = StringUtils.reverse(sampleString);\n        System.out.println(\"Reversed String: \" + reversedString);\n\n        // Use StringUtils to check if a string is empty\n        boolean isEmpty = StringUtils.isEmpty(sampleString);\n        System.out.println(\"Is sample string empty? \" + isEmpty);\n\n        // Read the next token from the original tokenizer, which should be quoted\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Output the token\n        System.out.println(\"Token from tokenizer: \" + token);\n\n        // Further processing with the original tokenizer\n        while (tokenizer.hasNext()) {\n            String nextToken = tokenizer.nextToken();\n            System.out.println(\"Next token from tokenizer: \" + nextToken);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello 'World'\");\n\n        // Set the quote character to single quote\n        /* write */ tokenizer.setQuoteChar('\\'');\n\n        // Read the next token, which should be quoted\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Output the token\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setQuoteChar",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}