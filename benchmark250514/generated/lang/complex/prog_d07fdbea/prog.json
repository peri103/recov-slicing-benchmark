{
    "java_code": "import org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize EqualsBuilder to compare objects\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        \n        // Initialize two objects to compare\n        Object object1 = new Object();\n        Object object2 = object1; // Same reference to ensure equality\n        \n        /* write */ equalsBuilder.append(object1, object2);\n\n        // Add complexity: Use HashCodeBuilder to generate hash codes\n        HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();\n        hashCodeBuilder.append(object1);\n        int hashCode1 = hashCodeBuilder.toHashCode();\n        \n        hashCodeBuilder = new HashCodeBuilder();\n        hashCodeBuilder.append(object2);\n        int hashCode2 = hashCodeBuilder.toHashCode();\n        \n        System.out.println(\"HashCode1: \" + hashCode1);\n        System.out.println(\"HashCode2: \" + hashCode2);\n        \n        // Add complexity: Use ToStringBuilder to generate string representations\n        ToStringBuilder toStringBuilder = new ToStringBuilder(object1);\n        toStringBuilder.append(\"Object\", object1);\n        String stringRepresentation1 = toStringBuilder.toString();\n        \n        toStringBuilder = new ToStringBuilder(object2);\n        toStringBuilder.append(\"Object\", object2);\n        String stringRepresentation2 = toStringBuilder.toString();\n        \n        System.out.println(\"String Representation1: \" + stringRepresentation1);\n        System.out.println(\"String Representation2: \" + stringRepresentation2);\n        \n        // Some unrelated operations to increase complexity\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 numbers: \" + sum);\n        \n        // Perform the read operation\n        /* read */ boolean isEqual = equalsBuilder.isEquals();\n        \n        System.out.println(\"Objects are equal: \" + isEqual);\n        \n        // Additional complex logic\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of first 5 numbers: \" + product);\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.builder.EqualsBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        \n        // Initialize two objects to compare\n        Object object1 = new Object();\n        Object object2 = object1; // Same reference to ensure equality\n        \n        /* write */ equalsBuilder.append(object1, object2);\n        \n        /* read */ boolean isEqual = equalsBuilder.isEquals();\n        \n        System.out.println(\"Objects are equal: \" + isEqual);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.builder.EqualsBuilder",
        "write_method": "append",
        "read_class": "org.apache.commons.lang3.builder.EqualsBuilder",
        "read_method": "isEquals"
    }
}