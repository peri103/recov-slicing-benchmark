{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,banana,,cherry\", ',');\n\n        // Additional complex code with unrelated logic\n        ArrayList<String> fruits = new ArrayList<>();\n        HashMap<String, Integer> fruitCount = new HashMap<>();\n        \n        fruits.add(\"apple\");\n        fruits.add(\"banana\");\n        fruits.add(\"cherry\");\n        \n        for (String fruit : fruits) {\n            fruitCount.put(fruit, fruit.length());\n        }\n        \n        for (String fruit : fruits) {\n            System.out.println(\"Fruit: \" + fruit + \", Length: \" + fruitCount.get(fruit));\n        }\n\n        // Set the tokenizer to treat empty tokens as null\n        /* write */ tokenizer.setEmptyTokenAsNull(true);\n\n        // Continue with more unrelated logic\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Iterate through the tokens and read them\n        while (tokenizer.hasNext()) {\n            /* read */ String token = tokenizer.nextToken();\n            System.out.println(\"Token: \" + token);\n        }\n\n        // Additional unrelated complex logic\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 2);\n        }\n        \n        for (int number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"apple,banana,,cherry\", ',');\n\n        // Set the tokenizer to treat empty tokens as null\n        /* write */ tokenizer.setEmptyTokenAsNull(true);\n\n        // Iterate through the tokens and read them\n        while (tokenizer.hasNext()) {\n            /* read */ String token = tokenizer.nextToken();\n            System.out.println(token);\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setEmptyTokenAsNull",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}