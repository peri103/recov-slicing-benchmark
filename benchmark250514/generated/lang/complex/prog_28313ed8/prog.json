{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello, World!\");\n        StrTokenizer tokenizer2 = new StrTokenizer(\"Java, Python, C++\");\n\n        // Create a StrMatcher that matches commas\n        StrMatcher commaMatcher = StrMatcher.charMatcher(',');\n\n        // Use the write method to set the ignored matcher to ignore commas\n        /* write */ tokenizer.setIgnoredMatcher(commaMatcher);\n\n        // Additional code to demonstrate complexity\n        ArrayList<String> languages = new ArrayList<>();\n        HashMap<String, Integer> languagePopularity = new HashMap<>();\n\n        languages.add(\"Java\");\n        languages.add(\"Python\");\n        languages.add(\"C++\");\n\n        languagePopularity.put(\"Java\", 1);\n        languagePopularity.put(\"Python\", 2);\n        languagePopularity.put(\"C++\", 3);\n\n        for (String language : languages) {\n            int popularity = languagePopularity.get(language);\n            System.out.println(language + \" has popularity rank: \" + popularity);\n        }\n\n        // Use the read method to get the next token, which should be \"Hello\"\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Output the token\n        System.out.println(token);\n\n        // Additional operations on tokenizer2\n        tokenizer2.setIgnoredMatcher(commaMatcher);\n        while (tokenizer2.hasNext()) {\n            String langToken = tokenizer2.nextToken();\n            System.out.println(\"Language: \" + langToken);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.text.StrMatcher;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello, World!\");\n\n        // Create a StrMatcher that matches commas\n        StrMatcher commaMatcher = StrMatcher.charMatcher(',');\n\n        // Use the write method to set the ignored matcher to ignore commas\n        /* write */ tokenizer.setIgnoredMatcher(commaMatcher);\n\n        // Use the read method to get the next token, which should be \"Hello\"\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Output the token\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoredMatcher",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}