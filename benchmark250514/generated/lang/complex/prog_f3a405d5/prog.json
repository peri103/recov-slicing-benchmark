{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,World\");\n        \n        // Initialize another StrTokenizer with different delimiters\n        StrTokenizer tokenizer2 = new StrTokenizer(\"Java-Programming-Language\", '-');\n\n        // Reset the tokenizer to the initial state\n        /* write */ tokenizer.reset();\n\n        // Perform some operations using StringUtils\n        String reversed = StringUtils.reverse(\"Complexity\");\n        System.out.println(\"Reversed String: \" + reversed);\n\n        // Split another string using StrTokenizer\n        tokenizer2.reset();\n        while (tokenizer2.hasNext()) {\n            System.out.println(\"Token from tokenizer2: \" + tokenizer2.nextToken());\n        }\n\n        // Perform a mathematical calculation\n        int a = 5;\n        int b = 10;\n        int sum = a + b;\n        System.out.println(\"Sum: \" + sum);\n\n        // Read the first token from the original tokenizer\n        /* read */ String token = tokenizer.nextToken();\n\n        // Output the token\n        System.out.println(\"Token from tokenizer: \" + token);\n\n        // Use StringUtils to check if a string is numeric\n        boolean isNumeric = StringUtils.isNumeric(\"12345\");\n        System.out.println(\"Is numeric: \" + isNumeric);\n\n        // Perform a loop operation\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Loop iteration: \" + i);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,World\");\n\n        // Reset the tokenizer to the initial state\n        /* write */ tokenizer.reset();\n\n        // Read the first token\n        /* read */ String token = tokenizer.nextToken();\n\n        // Output the token\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "reset",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}