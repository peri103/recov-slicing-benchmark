{
    "java_code": "import org.apache.commons.lang3.time.StopWatch;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start(); // Start the stopwatch\n        stopWatch.suspend(); // Suspend the stopwatch to simulate a pause\n\n        // Additional complex code\n        ArrayList<Integer> numbers = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 10);\n            map.put(\"Key\" + i, i * 10);\n        }\n\n        /* write */ stopWatch.resume(); // Resume the stopwatch\n\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        try {\n            // Simulate some elapsed time\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        int mapSum = 0;\n        for (String key : map.keySet()) {\n            mapSum += map.get(key);\n        }\n        System.out.println(\"Sum of map values: \" + mapSum);\n\n        /* read */ long elapsedTime = stopWatch.getTime(); // Get the elapsed time\n        System.out.println(\"Elapsed Time: \" + elapsedTime + \" ms\");\n\n        // More complex operations\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) + 5);\n        }\n\n        for (int num : numbers) {\n            System.out.println(\"Updated number: \" + num);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.time.StopWatch;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start(); // Start the stopwatch\n        stopWatch.suspend(); // Suspend the stopwatch to simulate a pause\n\n        /* write */ stopWatch.resume(); // Resume the stopwatch\n\n        try {\n            // Simulate some elapsed time\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        /* read */ long elapsedTime = stopWatch.getTime(); // Get the elapsed time\n        System.out.println(\"Elapsed Time: \" + elapsedTime + \" ms\");\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.time.StopWatch",
        "write_method": "resume",
        "read_class": "org.apache.commons.lang3.time.StopWatch",
        "read_method": "getTime"
    }
}