{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,World,Java,Programming\");\n\n        // Reset the tokenizer to ensure it starts from the beginning\n        /* write */ tokenizer.reset();\n\n        // Additional unrelated code to make the program more complex\n        ArrayList<String> words = new ArrayList<>();\n        StrTokenizer anotherTokenizer = new StrTokenizer(\"Complex,Code,Example\");\n        while (anotherTokenizer.hasNext()) {\n            words.add(anotherTokenizer.nextToken());\n        }\n\n        // Perform some operations on the collected words\n        for (String word : words) {\n            System.out.println(\"Word from another tokenizer: \" + word);\n        }\n\n        // More complex operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Read the first token using nextToken\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token to ensure the read method worked correctly\n        System.out.println(\"First token from tokenizer: \" + token);\n\n        // More complex operations with the original tokenizer\n        ArrayList<String> tokensList = new ArrayList<>();\n        while (tokenizer.hasNext()) {\n            tokensList.add(tokenizer.nextToken());\n        }\n\n        // Print all tokens collected from the original tokenizer\n        for (String t : tokensList) {\n            System.out.println(\"Token from original tokenizer: \" + t);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample string\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,World\");\n\n        // Reset the tokenizer to ensure it starts from the beginning\n        /* write */ tokenizer.reset();\n\n        // Read the first token using nextToken\n        /* read */ String token = tokenizer.nextToken();\n\n        // Print the token to ensure the read method worked correctly\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "reset",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}