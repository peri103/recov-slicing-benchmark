{
    "java_code": "import org.apache.commons.lang3.time.StopWatch;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        ArrayList<Integer> numbers = new ArrayList<>();\n        \n        /* write */ stopWatch.start();\n        \n        // Simulate some processing time\n        for (int i = 0; i < 1000000; i++) {\n            numbers.add(i);\n        }\n        \n        // Perform some operations on the list\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n        \n        // Another StopWatch instance for measuring different task\n        StopWatch taskTimer = new StopWatch();\n        taskTimer.start();\n        \n        // Simulate another task\n        for (int i = 0; i < 500000; i++) {\n            // Just a dummy operation\n            sum -= i;\n        }\n        \n        taskTimer.stop();\n        long taskTimeElapsed = taskTimer.getTime();\n        System.out.println(\"Task time elapsed: \" + taskTimeElapsed + \" milliseconds\");\n        \n        /* read */ long timeElapsed = stopWatch.getTime();\n        System.out.println(\"Total time elapsed: \" + timeElapsed + \" milliseconds\");\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.time.StopWatch;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        /* write */ stopWatch.start();\n        \n        // Simulate some processing time\n        for (int i = 0; i < 1000000; i++) {\n            // Do nothing, just to consume some time\n        }\n        \n        /* read */ long timeElapsed = stopWatch.getTime();\n        System.out.println(\"Time elapsed: \" + timeElapsed + \" milliseconds\");\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.time.StopWatch",
        "write_method": "start",
        "read_class": "org.apache.commons.lang3.time.StopWatch",
        "read_method": "getTime"
    }
}