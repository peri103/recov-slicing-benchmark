{
    "java_code": "import org.apache.commons.lang3.time.StopWatch;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        /* write */ stopWatch.start();\n        \n        // Simulate some elapsed time\n        for (int i = 0; i < 1000000; i++); // Busy-wait loop\n        \n        // Additional complexity: ArrayList operations\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n        \n        // Additional complexity: HashMap operations\n        HashMap<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            map.put(\"Number \" + i, numbers.get(i));\n        }\n        \n        // Processing elements in the ArrayList\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        \n        // Retrieve and print HashMap values\n        for (String key : map.keySet()) {\n            System.out.println(key + \": \" + map.get(key));\n        }\n        \n        /* read */ long elapsedTime = stopWatch.getTime();\n        System.out.println(\"Elapsed time: \" + elapsedTime + \" milliseconds\");\n        \n        // Further processing after reading elapsed time\n        int average = sum / numbers.size();\n        System.out.println(\"Average of numbers: \" + average);\n        \n        // Additional operations on ArrayList\n        numbers.clear();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 3);\n        }\n        \n        // Print updated ArrayList\n        System.out.println(\"Updated numbers:\");\n        for (int num : numbers) {\n            System.out.println(num);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.time.StopWatch;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        /* write */ stopWatch.start();\n        \n        // Simulate some elapsed time\n        for (int i = 0; i < 1000000; i++); // Busy-wait loop\n        \n        /* read */ long elapsedTime = stopWatch.getTime();\n        System.out.println(\"Elapsed time: \" + elapsedTime + \" milliseconds\");\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.time.StopWatch",
        "write_method": "start",
        "read_class": "org.apache.commons.lang3.time.StopWatch",
        "read_method": "getTime"
    }
}