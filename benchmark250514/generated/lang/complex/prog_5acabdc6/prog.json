{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer();\n        \n        // Initialize another tokenizer for demonstration\n        StrTokenizer anotherTokenizer = new StrTokenizer(\"Java,Programming,Language\");\n\n        // Demonstrate the use of StringUtils for complex string manipulation\n        String complexString = \"Hello,World,Java,Programming\";\n        String[] splitArray = StringUtils.split(complexString, ',');\n        for (String str : splitArray) {\n            System.out.println(\"Split part: \" + str);\n        }\n\n        // Reset the tokenizer with a new string\n        /* write */ tokenizer.reset(\"Hello,World\");\n        \n        // Perform some operations with another tokenizer\n        if (anotherTokenizer.hasNext()) {\n            String anotherToken = anotherTokenizer.nextToken();\n            System.out.println(\"Another token: \" + anotherToken);\n        }\n\n        // Complex loop to manipulate tokens\n        for (int i = 0; i < splitArray.length; i++) {\n            System.out.println(\"Token from split array: \" + splitArray[i]);\n            if (i == 2) {\n                System.out.println(\"Special token found at index 2: \" + splitArray[i]);\n            }\n        }\n\n        // Read the token from the original tokenizer\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(\"First token from tokenizer: \" + token);\n\n        // Additional string manipulation using StringUtils\n        String reversedString = StringUtils.reverse(complexString);\n        System.out.println(\"Reversed string: \" + reversedString);\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer();\n        \n        /* write */ tokenizer.reset(\"Hello,World\");\n        \n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "reset",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}