{
    "java_code": "import org.apache.commons.lang3.text.StrTokenizer;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample input\n        StrTokenizer tokenizer = new StrTokenizer(\"a,b,c\");\n\n        // Set the character to be ignored\n        /* write */ tokenizer.setIgnoredChar(',');\n\n        // Additional complex operations\n        ArrayList<String> tokens = new ArrayList<>();\n        StrTokenizer tokenizer2 = new StrTokenizer(\"d,e,f\");\n        tokenizer2.setIgnoredChar('e');\n        \n        // Process tokens from tokenizer2 and add to list\n        while (tokenizer2.hasNext()) {\n            tokens.add(tokenizer2.nextToken());\n        }\n        \n        // Perform operations on the list of tokens\n        tokens.addAll(Arrays.asList(\"g\", \"h\", \"i\"));\n        \n        for (String tok : tokens) {\n            System.out.println(\"Token from tokens list: \" + tok);\n        }\n        \n        // Read the next token, which should ignore the character set above\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Output the token to verify the read operation\n        System.out.println(\"First token from tokenizer: \" + token);\n\n        // Further operations to make the program more complex\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= 5; i++) {\n            numbers.add(i * 2);\n        }\n        \n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        \n        System.out.println(\"Sum of numbers: \" + sum);\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the StrTokenizer with a sample input\n        StrTokenizer tokenizer = new StrTokenizer(\"a,b,c\");\n\n        // Set the character to be ignored\n        /* write */ tokenizer.setIgnoredChar(',');\n\n        // Read the next token, which should ignore the character set above\n        /* read */ String token = tokenizer.nextToken();\n        \n        // Output the token to verify the read operation\n        System.out.println(token);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setIgnoredChar",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    }
}