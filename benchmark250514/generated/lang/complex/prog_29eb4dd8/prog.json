{
    "java_code": "import org.apache.commons.lang3.time.StopWatch;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start(); // Start the stopwatch to enable resume\n        stopWatch.suspend(); // Suspend the stopwatch so that it can be resumed\n        /* write */ stopWatch.resume(); // Resume the stopwatch\n\n        // Simulate some operations\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 10);\n        }\n        \n        HashMap<Integer, String> map = new HashMap<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            map.put(numbers.get(i), \"Number: \" + numbers.get(i));\n        }\n\n        // More complex operations\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        for (int key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n\n        long elapsedTime = 0;\n        try {\n            Thread.sleep(1000); // Simulate some elapsed time\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        /* read */ elapsedTime = stopWatch.getTime(); // Get the elapsed time\n        System.out.println(\"Elapsed time in milliseconds: \" + elapsedTime);\n\n        // Additional operations\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of numbers: \" + product);\n\n        // Final operations\n        if (map.containsKey(20)) {\n            System.out.println(\"Map contains key 20 with value: \" + map.get(20));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.lang3.time.StopWatch;\n\npublic class Main {\n    public static void main(String[] args) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start(); // Start the stopwatch to enable resume\n        stopWatch.suspend(); // Suspend the stopwatch so that it can be resumed\n        /* write */ stopWatch.resume(); // Resume the stopwatch\n        long elapsedTime = 0;\n        try {\n            Thread.sleep(1000); // Simulate some elapsed time\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        /* read */ elapsedTime = stopWatch.getTime(); // Get the elapsed time\n        System.out.println(\"Elapsed time in milliseconds: \" + elapsedTime);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.lang3.time.StopWatch",
        "write_method": "resume",
        "read_class": "org.apache.commons.lang3.time.StopWatch",
        "read_method": "getTime"
    }
}