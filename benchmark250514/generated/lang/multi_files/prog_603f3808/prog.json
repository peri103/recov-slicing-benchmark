{
    "files": {
        "TokenManager.java": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class TokenManager {\n    private StrTokenizer tokenizer;\n\n    public TokenManager(String input) {\n        tokenizer = new StrTokenizer(input);\n    }\n\n    public void setDelimiter(char delimiter) {\n        /* write */ tokenizer.setDelimiterChar(delimiter);\n    }\n\n    public StrTokenizer getTokenizer() {\n        return tokenizer;\n    }\n}\n",
        "TokenProcessor.java": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class TokenProcessor {\n    private StrTokenizer tokenizer;\n\n    public TokenProcessor(StrTokenizer tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n\n    public String processNextToken() {\n        if (tokenizer.hasNext()) {\n            return tokenizer.nextToken();\n        }\n        return null;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Initialize TokenManager with input string\n        TokenManager tokenManager = new TokenManager(\"apple,banana,orange\");\n\n        // Set the delimiter for the tokenizer\n        tokenManager.setDelimiter(',');\n\n        // Retrieve tokenizer and process tokens\n        TokenProcessor tokenProcessor = new TokenProcessor(tokenManager.getTokenizer());\n        \n        String firstToken = tokenProcessor.processNextToken();\n        /* read */ System.out.println(\"First token after delimiter set: \" + firstToken);\n\n        // Additional processing\n        while (true) {\n            String token = tokenProcessor.processNextToken();\n            if (token == null) break;\n            System.out.println(\"Processed token: \" + token);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setDelimiterChar",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    },
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = \"apple,banana,orange\";\n        StrTokenizer tokenizer = new StrTokenizer(input);\n        /* write */ tokenizer.setDelimiterChar(',');\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(token);\n    }\n}",
    "java_code_complex": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = \"apple,banana,orange\";\n        StrTokenizer tokenizer = new StrTokenizer(input);\n\n        // Additional unrelated code to make the program more complex\n        String[] fruits = {\"apple\", \"banana\", \"orange\"};\n        for (String fruit : fruits) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n\n        // Use another instance of StrTokenizer with a different delimiter\n        StrTokenizer anotherTokenizer = new StrTokenizer(\"dog|cat|mouse\", '|');\n        while (anotherTokenizer.hasNext()) {\n            System.out.println(\"Animal: \" + anotherTokenizer.nextToken());\n        }\n\n        // String manipulation using Apache Commons Lang\n        String reversedInput = StringUtils.reverse(input);\n        System.out.println(\"Reversed input: \" + reversedInput);\n\n        /* write */ tokenizer.setDelimiterChar(',');\n        \n        // Code for processing the input string\n        int tokenCount = 0;\n        while (tokenizer.hasNext()) {\n            String token = tokenizer.nextToken();\n            System.out.println(\"Token \" + tokenCount + \": \" + token);\n            tokenCount++;\n        }\n\n        // More complex string manipulation\n        String joinedString = StringUtils.join(fruits, \"-\");\n        System.out.println(\"Joined string: \" + joinedString);\n\n        /* read */ String firstToken = tokenizer.nextToken();\n        System.out.println(\"First token after delimiter set: \" + firstToken);\n    }\n}"
}