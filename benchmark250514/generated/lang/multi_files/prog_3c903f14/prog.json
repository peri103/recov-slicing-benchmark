{
    "files": {
        "TokenProcessor.java": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class TokenProcessor {\n    private StrTokenizer tokenizer;\n\n    public TokenProcessor(String input) {\n        tokenizer = new StrTokenizer(input);\n    }\n\n    public void setDelimiter(String delimiter) {\n        /* write */ tokenizer.setDelimiterString(delimiter);\n    }\n\n    public String getNextToken() {\n        return tokenizer.nextToken();\n    }\n}\n",
        "WordCounter.java": "import java.util.HashMap;\nimport org.apache.commons.lang3.text.StrTokenizer;\n\npublic class WordCounter {\n    private HashMap<String, Integer> wordCount = new HashMap<>();\n\n    public void processText(String text) {\n        StrTokenizer tokenizer = new StrTokenizer(text);\n        tokenizer.setDelimiterString(\" \");\n        \n        while (tokenizer.hasNext()) {\n            String word = tokenizer.nextToken();\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n    }\n\n    public HashMap<String, Integer> getWordCount() {\n        return wordCount;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        TokenProcessor tokenProcessor = new TokenProcessor(\"Hello,World\");\n        tokenProcessor.setDelimiter(\",\");\n\n        WordCounter wordCounter = new WordCounter();\n        wordCounter.processText(\"Hello World Hello Universe\");\n\n        // Unrelated logical operations\n        int a = 5, b = 10;\n        int sum = a + b;\n        int product = a * b;\n        System.out.println(\"Sum: \" + sum + \", Product: \" + product);\n\n        /* read */ String firstToken = tokenProcessor.getNextToken();\n        System.out.println(\"First token: \" + firstToken);\n\n        // Display word count\n        System.out.println(\"Word counts: \" + wordCounter.getWordCount());\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.lang3.text.StrTokenizer",
        "write_method": "setDelimiterString",
        "read_class": "org.apache.commons.lang3.text.StrTokenizer",
        "read_method": "nextToken"
    },
    "java_code_simple": "import org.apache.commons.lang3.text.StrTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,World\");\n        /* write */ tokenizer.setDelimiterString(\",\");\n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(token);\n    }\n}",
    "java_code_complex": "import org.apache.commons.lang3.text.StrTokenizer;\nimport org.apache.commons.lang3.StringUtils;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        StrTokenizer tokenizer = new StrTokenizer(\"Hello,World\");\n        /* write */ tokenizer.setDelimiterString(\",\");\n        \n        // Additional complex logic\n        HashMap<String, Integer> wordCount = new HashMap<>();\n        String phrase = \"Hello World Hello Universe\";\n        StrTokenizer tokenizer2 = new StrTokenizer(phrase);\n        tokenizer2.setDelimiterString(\" \");\n        \n        while (tokenizer2.hasNext()) {\n            String word = tokenizer2.nextToken();\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n        \n        StringUtils.capitalize(\"example\");\n\n        // More complex operations\n        int totalWords = 0;\n        for (String key : wordCount.keySet()) {\n            totalWords += wordCount.get(key);\n        }\n        \n        // Unrelated logical operations\n        int a = 5, b = 10;\n        int sum = a + b;\n        int product = a * b;\n        System.out.println(\"Sum: \" + sum + \", Product: \" + product);\n        \n        /* read */ String token = tokenizer.nextToken();\n        System.out.println(\"First token: \" + token);\n        \n        // Finalize the word count display\n        System.out.println(\"Total words counted: \" + totalWords);\n        for (String key : wordCount.keySet()) {\n            System.out.println(key + \": \" + wordCount.get(key));\n        }\n    }\n}"
}