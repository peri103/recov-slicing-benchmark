{
    "files": {
        "DateHandler.java": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\nimport java.util.Calendar;\n\npublic class DateHandler {\n    private Date date;\n    private Date ceilingDate;\n\n    public DateHandler(Date date) {\n        this.date = date;\n        calculateCeilingDate();\n    }\n\n    private void calculateCeilingDate() {\n        /* write */ this.ceilingDate = DateUtils.ceiling(this.date, Calendar.HOUR);\n    }\n\n    public Date getCeilingDate() {\n        return this.ceilingDate;\n    }\n}\n",
        "DateTruncator.java": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\nimport java.util.Calendar;\n\npublic class DateTruncator {\n    private Date truncatedDate;\n\n    public DateTruncator(Date date) {\n        truncateDate(date);\n    }\n\n    private void truncateDate(Date date) {\n        /* read */ this.truncatedDate = DateUtils.truncate(date, Calendar.HOUR);\n    }\n\n    public Date getTruncatedDate() {\n        return this.truncatedDate;\n    }\n}\n",
        "Main.java": "import java.util.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date currentDate = new Date();\n        DateHandler dateHandler = new DateHandler(currentDate);\n\n        // Use the ceilingDate from DateHandler\n        Date ceilingDate = dateHandler.getCeilingDate();\n\n        // Create a DateTruncator using the ceilingDate\n        DateTruncator dateTruncator = new DateTruncator(ceilingDate);\n\n        // Retrieve and print the truncatedDate\n        Date truncatedDate = dateTruncator.getTruncatedDate();\n        System.out.println(\"Ceiling Date: \" + ceilingDate);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n\n        // Additional complexity with a list of dates\n        List<Date> dateList = new ArrayList<>();\n        dateList.add(currentDate);\n        dateList.add(ceilingDate);\n        dateList.add(truncatedDate);\n\n        for (Date date : dateList) {\n            System.out.println(\"Date in List: \" + date);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.lang3.time.DateUtils",
        "write_method": "ceiling",
        "read_class": "org.apache.commons.lang3.time.DateUtils",
        "read_method": "truncate"
    },
    "java_code_simple": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\nimport java.util.Calendar;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        /* write */ Date ceilingDate = DateUtils.ceiling(date, Calendar.HOUR);\n\n        /* read */ Date truncatedDate = DateUtils.truncate(ceilingDate, Calendar.HOUR);\n\n        System.out.println(\"Ceiling Date: \" + ceilingDate);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n    }\n}",
    "java_code_complex": "import org.apache.commons.lang3.time.DateUtils;\nimport java.util.Date;\nimport java.util.Calendar;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date date = new Date();\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        /* write */ Date ceilingDate = DateUtils.ceiling(date, Calendar.HOUR);\n\n        // Additional complex operations\n        List<Date> dateList = new ArrayList<>();\n        dateList.add(date);\n        dateList.add(ceilingDate);\n\n        Calendar anotherCalendar = Calendar.getInstance();\n        anotherCalendar.setTime(date);\n\n        Date roundedDate = DateUtils.round(anotherCalendar.getTime(), Calendar.MINUTE);\n        dateList.add(roundedDate);\n\n        for (Date d : dateList) {\n            System.out.println(\"Date in List: \" + d);\n        }\n\n        DateUtils.addDays(date, 5);\n        DateUtils.addHours(date, 3);\n\n        // Random operations to increase complexity\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n        int minute = calendar.get(Calendar.MINUTE);\n        System.out.println(\"Current Time: \" + hour + \":\" + minute);\n\n        Date truncatedDate = new Date(); // Initialize for complexity\n        for (int i = 0; i < 5; i++) {\n            Calendar tempCalendar = Calendar.getInstance();\n            tempCalendar.add(Calendar.DAY_OF_MONTH, i);\n            dateList.add(tempCalendar.getTime());\n        }\n\n        for (Date d : dateList) {\n            System.out.println(\"Iterated Date: \" + d);\n        }\n\n        /* read */ truncatedDate = DateUtils.truncate(ceilingDate, Calendar.HOUR);\n\n        System.out.println(\"Ceiling Date: \" + ceilingDate);\n        System.out.println(\"Truncated Date: \" + truncatedDate);\n\n        // Further complexity with date manipulation\n        Calendar futureCalendar = Calendar.getInstance();\n        futureCalendar.add(Calendar.MONTH, 1);\n        Date futureDate = futureCalendar.getTime();\n        System.out.println(\"Future Date: \" + futureDate);\n    }\n}"
}