{
    "java_code": "import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        CpioArchiveEntry entry = new CpioArchiveEntry(\"test.txt\");\n        /* write */ entry.setSize(1024);\n        \n        // Additional complex code\n        ArrayList<String> fileList = new ArrayList<>();\n        fileList.add(\"file1.txt\");\n        fileList.add(\"file2.txt\");\n\n        HashMap<String, Integer> fileSizes = new HashMap<>();\n        fileSizes.put(\"file1.txt\", 500);\n        fileSizes.put(\"file2.txt\", 1500);\n\n        for (String file : fileList) {\n            if (fileSizes.containsKey(file)) {\n                System.out.println(\"Size of \" + file + \": \" + fileSizes.get(file));\n            }\n        }\n\n        // Simulate some processing\n        int totalSize = 0;\n        for (Map.Entry<String, Integer> entrySet : fileSizes.entrySet()) {\n            totalSize += entrySet.getValue();\n        }\n        System.out.println(\"Total size of files: \" + totalSize);\n\n        // More unrelated code\n        int[] numbers = {1, 2, 3, 4, 5};\n        for (int number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n\n        // Back to the original read\n        /* read */ long size = entry.getSize();\n        System.out.println(\"CpioArchiveEntry size: \" + size);\n\n        // Some final operations\n        for (int i = 0; i < numbers.length; i++) {\n            numbers[i] *= 2;\n            System.out.println(\"Doubled number: \" + numbers[i]);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        CpioArchiveEntry entry = new CpioArchiveEntry(\"test.txt\");\n        /* write */ entry.setSize(1024);\n        /* read */ long size = entry.getSize();\n        System.out.println(size);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry",
        "write_method": "setSize",
        "read_class": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry",
        "read_method": "getSize"
    }
}