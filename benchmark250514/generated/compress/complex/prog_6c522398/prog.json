{
    "java_code": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n        /* write */ entry.setSize(1024L);\n\n        // Additional complex logic\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 100);\n        }\n        \n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n\n        int mapSum = 0;\n        for (String key : map.keySet()) {\n            mapSum += map.get(key);\n        }\n\n        // Some unrelated operations\n        for (int i = 0; i < numbers.size(); i++) {\n            System.out.println(\"Number: \" + numbers.get(i));\n        }\n\n        System.out.println(\"Sum of numbers: \" + sum);\n        System.out.println(\"Sum of map values: \" + mapSum);\n\n        // More complex logic\n        if (sum > 1000) {\n            map.put(\"four\", 4);\n        } else {\n            map.remove(\"one\");\n        }\n\n        // Accessing the original write-read pair\n        /* read */ long size = entry.getSize();\n        System.out.println(\"Size from DumpArchiveEntry: \" + size);\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n        /* write */ entry.setSize(1024L);\n        /* read */ long size = entry.getSize();\n        System.out.println(size);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
        "write_method": "setSize",
        "read_class": "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
        "read_method": "getSize"
    }
}