{
    "java_code": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry entry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ entry.setCompressedSize(1024L);\n\n        // Adding complexity with a HashMap\n        Map<String, Integer> dataMap = new HashMap<>();\n        dataMap.put(\"A\", 1);\n        dataMap.put(\"B\", 2);\n        dataMap.put(\"C\", 3);\n\n        // Perform some operations on the map\n        int sum = 0;\n        for (Map.Entry<String, Integer> entrySet : dataMap.entrySet()) {\n            sum += entrySet.getValue();\n        }\n        System.out.println(\"Sum of values in dataMap: \" + sum);\n\n        // Manipulating another ZipArchiveEntry\n        ZipArchiveEntry anotherEntry = new ZipArchiveEntry(\"another_example.txt\");\n        anotherEntry.setCompressedSize(2048L);\n        long anotherCompressedSize = anotherEntry.getCompressedSize();\n        System.out.println(\"Another compressed size: \" + anotherCompressedSize);\n\n        // More operations\n        int product = 1;\n        for (int value : dataMap.values()) {\n            product *= value;\n        }\n        System.out.println(\"Product of values in dataMap: \" + product);\n\n        /* read */ long compressedSize = entry.getCompressedSize();\n        System.out.println(\"Compressed size: \" + compressedSize);\n\n        // Additional logic with dataMap\n        dataMap.put(\"D\", 4);\n        if (dataMap.containsKey(\"D\")) {\n            System.out.println(\"Value for 'D': \" + dataMap.get(\"D\"));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry entry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ entry.setCompressedSize(1024L);\n        /* read */ long compressedSize = entry.getCompressedSize();\n        System.out.println(compressedSize);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setCompressedSize",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getCompressedSize"
    }
}