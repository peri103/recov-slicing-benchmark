{
    "java_code": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a new ZipArchiveEntry object\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n\n        // Initialize additional ZipArchiveEntry objects\n        ZipArchiveEntry zipEntry2 = new ZipArchiveEntry(\"another.txt\");\n        ZipArchiveEntry zipEntry3 = new ZipArchiveEntry(\"sample.txt\");\n\n        // Use the write method to set the compression method for the first entry\n        /* write */ zipEntry.setMethod(ZipArchiveEntry.DEFLATED);\n\n        // Set methods for additional entries\n        zipEntry2.setMethod(ZipArchiveEntry.STORED);\n        zipEntry3.setMethod(ZipArchiveEntry.DEFLATED);\n\n        // Create a list to hold ZipArchiveEntry objects\n        ArrayList<ZipArchiveEntry> entryList = new ArrayList<>();\n        entryList.add(zipEntry);\n        entryList.add(zipEntry2);\n        entryList.add(zipEntry3);\n\n        // Create a map to associate entry names with methods\n        HashMap<String, Integer> methodMap = new HashMap<>();\n        for (ZipArchiveEntry entry : entryList) {\n            methodMap.put(entry.getName(), entry.getMethod());\n        }\n\n        // Perform some operations on the map\n        for (String name : methodMap.keySet()) {\n            System.out.println(\"Entry: \" + name + \", Method: \" + methodMap.get(name));\n        }\n\n        // Use the read method to get the compression method of the first entry\n        /* read */ int method = zipEntry.getMethod();\n\n        // Print the method to verify it was set and read correctly\n        System.out.println(\"Compression method for 'example.txt': \" + method);\n\n        // Additional operations to increase complexity\n        for (int i = 0; i < entryList.size(); i++) {\n            ZipArchiveEntry entry = entryList.get(i);\n            System.out.println(\"Processing entry: \" + entry.getName());\n            // Simulate some complex logic\n            if (entry.getMethod() == ZipArchiveEntry.DEFLATED) {\n                System.out.println(\"Entry is using DEFLATED method.\");\n            } else {\n                System.out.println(\"Entry is using STORED method.\");\n            }\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a new ZipArchiveEntry object\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n\n        // Use the write method to set the compression method\n        /* write */ zipEntry.setMethod(ZipArchiveEntry.DEFLATED);\n\n        // Use the read method to get the compression method\n        /* read */ int method = zipEntry.getMethod();\n\n        // Print the method to verify it was set and read correctly\n        System.out.println(\"Compression method: \" + method);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setMethod",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getMethod"
    }
}