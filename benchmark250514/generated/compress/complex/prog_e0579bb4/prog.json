{
    "java_code": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        byte[] extraData = {1, 2, 3, 4, 5};\n\n        /* write */ zipEntry.setExtra(extraData);\n\n        // Additional complexity: Use ArrayList and HashMap\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n\n        HashMap<String, Integer> map = new HashMap<>();\n        for (int num : numbers) {\n            map.put(\"Number_\" + num, num);\n        }\n\n        // Complex logic with loops and conditionals\n        for (String key : map.keySet()) {\n            if (map.get(key) % 4 == 0) {\n                System.out.println(key + \" is divisible by 4\");\n            } else {\n                System.out.println(key + \" is not divisible by 4\");\n            }\n        }\n\n        // More operations before reading the extra data from zipEntry\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        /* read */ byte[] retrievedData = zipEntry.getExtra();\n\n        // Printing retrieved data\n        System.out.print(\"Retrieved extra data: \");\n        for (byte b : retrievedData) {\n            System.out.print(b + \" \");\n        }\n        System.out.println();\n\n        // Additional operations after reading\n        ArrayList<String> strings = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            strings.add(\"String_\" + i);\n        }\n\n        for (String str : strings) {\n            System.out.println(str);\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        byte[] extraData = {1, 2, 3, 4, 5};\n\n        /* write */ zipEntry.setExtra(extraData);\n        /* read */ byte[] retrievedData = zipEntry.getExtra();\n\n        for (byte b : retrievedData) {\n            System.out.print(b + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setExtra",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getExtra"
    }
}