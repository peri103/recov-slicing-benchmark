{
    "files": {
        "ZipEntryManager.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class ZipEntryManager {\n    private ZipArchiveEntry entry;\n\n    public ZipEntryManager(String fileName) {\n        entry = new ZipArchiveEntry(fileName);\n    }\n\n    public void setCompressionMethod(int method) {\n        /* write */ entry.setMethod(method);\n    }\n\n    public int getCompressionMethod() {\n        return entry.getMethod();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setMethod",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getMethod"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry entry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ entry.setMethod(ZipArchiveEntry.DEFLATED);\n        /* read */ int method = entry.getMethod();\n        System.out.println(\"Compression method: \" + method);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original write-read pair\n        ZipArchiveEntry entry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ entry.setMethod(ZipArchiveEntry.DEFLATED);\n\n        // Additional complex logic\n        ArrayList<String> fileNames = new ArrayList<>();\n        fileNames.add(\"file1.txt\");\n        fileNames.add(\"file2.txt\");\n\n        HashMap<String, Integer> fileMethods = new HashMap<>();\n        for (String fileName : fileNames) {\n            ZipArchiveEntry tempEntry = new ZipArchiveEntry(fileName);\n            tempEntry.setMethod(ZipArchiveEntry.STORED);\n            fileMethods.put(fileName, tempEntry.getMethod());\n        }\n\n        // Unrelated logic to add complexity\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 numbers: \" + sum);\n\n        // More unrelated logic\n        String message = \"Hello, World!\";\n        char[] chars = message.toCharArray();\n        StringBuilder reversedMessage = new StringBuilder();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            reversedMessage.append(chars[i]);\n        }\n        System.out.println(\"Reversed Message: \" + reversedMessage.toString());\n\n        // Access the original read method\n        /* read */ int method = entry.getMethod();\n        System.out.println(\"Compression method for example.txt: \" + method);\n\n        // Print out methods for other files\n        for (String fileName : fileNames) {\n            System.out.println(\"Compression method for \" + fileName + \": \" + fileMethods.get(fileName));\n        }\n    }\n}"
}