{
    "files": {
        "CompressionMethods.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CompressionMethods {\n    private Map<String, Integer> methods = new HashMap<>();\n\n    public CompressionMethods() {\n        methods.put(\"DEFLATED\", org.apache.commons.compress.archivers.zip.ZipArchiveEntry.DEFLATED);\n        methods.put(\"STORED\", org.apache.commons.compress.archivers.zip.ZipArchiveEntry.STORED);\n    }\n\n    public Integer getMethodValue(String methodName) {\n        return methods.get(methodName);\n    }\n}\n",
        "ZipEntryManager.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class ZipEntryManager {\n    private ZipArchiveEntry zipEntry;\n\n    public ZipEntryManager(String fileName) {\n        zipEntry = new ZipArchiveEntry(fileName);\n    }\n\n    public void setCompressionMethod(int method) {\n        /* write */ zipEntry.setMethod(method);\n    }\n\n    public int getCompressionMethod() {\n        return zipEntry.getMethod();\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CompressionMethods compressionMethods = new CompressionMethods();\n        ZipEntryManager zipEntryManager = new ZipEntryManager(\"example.txt\");\n\n        // Set compression method\n        String methodName = \"DEFLATED\";\n        Integer methodValue = compressionMethods.getMethodValue(methodName);\n        if (methodValue != null) {\n            zipEntryManager.setCompressionMethod(methodValue);\n        }\n\n        // Perform some unrelated logic\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Get and print the compression method\n        /* read */ int method = zipEntryManager.getCompressionMethod();\n        System.out.println(\"Compression Method: \" + method);\n\n        // More unrelated logic\n        int factorial = 1;\n        for (int i = 1; i <= 5; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"Factorial of 5: \" + factorial);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setMethod",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getMethod"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ zipEntry.setMethod(ZipArchiveEntry.DEFLATED);\n        /* read */ int method = zipEntry.getMethod();\n        System.out.println(\"Compression Method: \" + method);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        Map<String, Integer> compressionMethods = new HashMap<>();\n        compressionMethods.put(\"DEFLATED\", ZipArchiveEntry.DEFLATED);\n        compressionMethods.put(\"STORED\", ZipArchiveEntry.STORED);\n\n        // Simulate some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Use of write method\n        String methodName = \"DEFLATED\";\n        if (compressionMethods.containsKey(methodName)) {\n            /* write */ zipEntry.setMethod(compressionMethods.get(methodName));\n        }\n\n        // More unrelated operations\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Hello, \");\n        sb.append(\"World!\");\n        System.out.println(sb.toString());\n\n        // Some more logic\n        int factorial = 1;\n        for (int i = 1; i <= 5; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"Factorial of 5: \" + factorial);\n\n        // Use of read method\n        /* read */ int method = zipEntry.getMethod();\n        System.out.println(\"Compression Method: \" + method);\n\n        // Final unrelated logic\n        Map<String, String> greetings = new HashMap<>();\n        greetings.put(\"English\", \"Hello\");\n        greetings.put(\"Spanish\", \"Hola\");\n        greetings.put(\"French\", \"Bonjour\");\n\n        for (Map.Entry<String, String> entry : greetings.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}"
}