{
    "files": {
        "ArchiveEntryManager.java": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArchiveEntryManager {\n    private List<DumpArchiveEntry> entries = new ArrayList<>();\n\n    public void addEntry(DumpArchiveEntry entry) {\n        entries.add(entry);\n    }\n\n    public List<DumpArchiveEntry> getEntries() {\n        return entries;\n    }\n\n    public void setEntrySize(DumpArchiveEntry entry, long size) {\n        /* write */ entry.setSize(size);\n    }\n}\n",
        "ArchiveEntryProcessor.java": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\n\npublic class ArchiveEntryProcessor {\n    private ArchiveEntryManager manager;\n\n    public ArchiveEntryProcessor(ArchiveEntryManager manager) {\n        this.manager = manager;\n    }\n\n    public long getEntrySize(DumpArchiveEntry entry) {\n        /* read */ return entry.getSize();\n    }\n}\n",
        "Main.java": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArchiveEntryManager manager = new ArchiveEntryManager();\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n\n        // Set size of the entry\n        manager.setEntrySize(entry, 1024);\n        manager.addEntry(entry);\n\n        // Create another entry and add to manager\n        DumpArchiveEntry anotherEntry = new DumpArchiveEntry();\n        manager.setEntrySize(anotherEntry, 2048);\n        manager.addEntry(anotherEntry);\n\n        // Process entries to get their sizes\n        ArchiveEntryProcessor processor = new ArchiveEntryProcessor(manager);\n        long entrySize = processor.getEntrySize(entry);\n        System.out.println(\"Size of the original entry: \" + entrySize);\n\n        long anotherEntrySize = processor.getEntrySize(anotherEntry);\n        System.out.println(\"Size of another entry: \" + anotherEntrySize);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
        "write_method": "setSize",
        "read_class": "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
        "read_method": "getSize"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n        /* write */ entry.setSize(1024);\n        /* read */ long size = entry.getSize();\n        System.out.println(size);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a DumpArchiveEntry and set its size\n        DumpArchiveEntry entry = new DumpArchiveEntry();\n        /* write */ entry.setSize(1024);\n\n        // Create a list to store multiple DumpArchiveEntries\n        List<DumpArchiveEntry> entries = new ArrayList<>();\n        entries.add(entry);\n\n        // Create and manipulate another DumpArchiveEntry\n        DumpArchiveEntry anotherEntry = new DumpArchiveEntry();\n        anotherEntry.setSize(2048);\n        entries.add(anotherEntry);\n\n        // Perform some operations on the list\n        int totalSize = 0;\n        for (DumpArchiveEntry e : entries) {\n            totalSize += e.getSize();\n        }\n        System.out.println(\"Total size of all entries: \" + totalSize);\n\n        // Additional unrelated code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 100);\n        }\n        for (int number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n\n        // Retrieve the size of the original entry\n        /* read */ long size = entry.getSize();\n        System.out.println(\"Size of the original entry: \" + size);\n    }\n}"
}