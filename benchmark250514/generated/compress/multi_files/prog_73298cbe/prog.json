{
    "files": {
        "ZipEntryManager.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ZipEntryManager {\n    private List<ZipArchiveEntry> zipEntries = new ArrayList<>();\n\n    public void addEntry(ZipArchiveEntry entry) {\n        zipEntries.add(entry);\n    }\n\n    public void setEntryMethod(String entryName, int method) {\n        for (ZipArchiveEntry entry : zipEntries) {\n            if (entry.getName().equals(entryName)) {\n                /* write */ entry.setMethod(method);\n                break;\n            }\n        }\n    }\n\n    public List<ZipArchiveEntry> getEntries() {\n        return zipEntries;\n    }\n}\n",
        "ZipEntryReader.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport java.util.List;\n\npublic class ZipEntryReader {\n    private ZipEntryManager manager;\n\n    public ZipEntryReader(ZipEntryManager manager) {\n        this.manager = manager;\n    }\n\n    public int getEntryMethod(String entryName) {\n        List<ZipArchiveEntry> entries = manager.getEntries();\n        for (ZipArchiveEntry entry : entries) {\n            if (entry.getName().equals(entryName)) {\n                /* read */ return entry.getMethod();\n            }\n        }\n        return -1; // Return -1 if entry not found\n    }\n}\n",
        "Main.java": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipEntryManager manager = new ZipEntryManager();\n        ZipEntryReader reader = new ZipEntryReader(manager);\n\n        ZipArchiveEntry entry1 = new ZipArchiveEntry(\"example.txt\");\n        ZipArchiveEntry entry2 = new ZipArchiveEntry(\"another_example.txt\");\n\n        manager.addEntry(entry1);\n        manager.addEntry(entry2);\n\n        manager.setEntryMethod(\"example.txt\", ZipArchiveEntry.DEFLATED);\n\n        int method = reader.getEntryMethod(\"example.txt\");\n        System.out.println(\"Method of example.txt: \" + method);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "write_method": "setMethod",
        "read_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
        "read_method": "getMethod"
    },
    "java_code_simple": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n\npublic class Main {\n    public static void main(String[] args) {\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        /* write */ zipEntry.setMethod(ZipArchiveEntry.DEFLATED);\n        /* read */ int method = zipEntry.getMethod();\n        System.out.println(method);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipFile;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ZipArchiveEntry\n        ZipArchiveEntry zipEntry = new ZipArchiveEntry(\"example.txt\");\n        \n        // Initialize another ZipArchiveEntry\n        ZipArchiveEntry zipEntry2 = new ZipArchiveEntry(\"another_example.txt\");\n        \n        // Initialize a list to hold ZipArchiveEntry objects\n        List<ZipArchiveEntry> zipEntries = new ArrayList<>();\n        \n        // Add entries to the list\n        zipEntries.add(zipEntry);\n        zipEntries.add(zipEntry2);\n\n        // Set methods for entries\n        zipEntry2.setMethod(ZipArchiveEntry.STORED);\n        \n        // Perform operations on the list\n        for (ZipArchiveEntry entry : zipEntries) {\n            System.out.println(\"Entry name: \" + entry.getName());\n            System.out.println(\"Entry method: \" + entry.getMethod());\n        }\n        \n        // Set method for the first entry\n        /* write */ zipEntry.setMethod(ZipArchiveEntry.DEFLATED);\n        \n        // Perform more operations\n        for (ZipArchiveEntry entry : zipEntries) {\n            if (entry.getName().equals(\"example.txt\")) {\n                System.out.println(\"Found example.txt\");\n            }\n        }\n        \n        // Read the method of the first entry\n        /* read */ int method = zipEntry.getMethod();\n        System.out.println(\"Method of example.txt: \" + method);\n        \n        // Additional operations\n        for (ZipArchiveEntry entry : zipEntries) {\n            if (entry.getMethod() == ZipArchiveEntry.DEFLATED) {\n                System.out.println(\"Entry is deflated: \" + entry.getName());\n            }\n        }\n    }\n}"
}