{
    "files": {
        "CompressionSettings.java": "import org.apache.commons.compress.compressors.gzip.GzipParameters;\n\npublic class CompressionSettings {\n    private GzipParameters gzipParameters = new GzipParameters();\n\n    public void setCompressionLevel(int level) {\n        /* write */ gzipParameters.setCompressionLevel(level);\n    }\n\n    public int getCompressionLevel() {\n        return gzipParameters.getCompressionLevel();\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompressionSettings compressionSettings = new CompressionSettings();\n        compressionSettings.setCompressionLevel(5);\n\n        Course course = new Course(\"Computer Science\");\n        Student student1 = new Student(\"Alice\", 20);\n        Student student2 = new Student(\"Bob\", 22);\n        \n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        List<Student> students = course.getStudents();\n        for (Student student : students) {\n            System.out.println(\"Student Name: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n        \n        /* read */ int compressionLevel = compressionSettings.getCompressionLevel();\n        System.out.println(\"Compression Level: \" + compressionLevel);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.compress.compressors.gzip.GzipParameters",
        "write_method": "setCompressionLevel",
        "read_class": "org.apache.commons.compress.compressors.gzip.GzipParameters",
        "read_method": "getCompressionLevel"
    },
    "java_code_simple": "import org.apache.commons.compress.compressors.gzip.GzipParameters;\n\npublic class Main {\n    public static void main(String[] args) {\n        GzipParameters gzipParameters = new GzipParameters();\n        /* write */ gzipParameters.setCompressionLevel(5);\n        /* read */ int compressionLevel = gzipParameters.getCompressionLevel();\n        System.out.println(compressionLevel);\n    }\n}",
    "java_code_complex": "import org.apache.commons.compress.compressors.gzip.GzipParameters;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        GzipParameters gzipParameters = new GzipParameters();\n        HashMap<String, Integer> map = new HashMap<>();\n        \n        // Perform some operations on the map\n        map.put(\"A\", 1);\n        map.put(\"B\", 2);\n        map.put(\"C\", 3);\n        \n        int sum = 0;\n        for (String key : map.keySet()) {\n            sum += map.get(key);\n        }\n        \n        System.out.println(\"Sum of values in map: \" + sum);\n        \n        /* write */ gzipParameters.setCompressionLevel(5);\n        \n        // More operations with the map\n        map.put(\"D\", 4);\n        map.put(\"E\", 5);\n        \n        int product = 1;\n        for (Integer value : map.values()) {\n            product *= value;\n        }\n        \n        System.out.println(\"Product of values in map: \" + product);\n        \n        // Read the compression level\n        /* read */ int compressionLevel = gzipParameters.getCompressionLevel();\n        System.out.println(\"Compression Level: \" + compressionLevel);\n        \n        // Final operations with the map\n        map.put(\"F\", 6);\n        map.put(\"G\", 7);\n        \n        int maxValue = Integer.MIN_VALUE;\n        for (Integer value : map.values()) {\n            if (value > maxValue) {\n                maxValue = value;\n            }\n        }\n        \n        System.out.println(\"Maximum value in map: \" + maxValue);\n    }\n}"
}