{
    "files": {
        "Course.java": "import org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\n\npublic class Course {\n    private SparseRealMatrix gradeMatrix;\n\n    public Course(int students, int assignments) {\n        gradeMatrix = new OpenMapRealMatrix(students, assignments);\n    }\n\n    public void setGrade(int studentIndex, int assignmentIndex, double grade) {\n        /* write */ gradeMatrix.setEntry(studentIndex, assignmentIndex, grade);\n    }\n\n    public SparseRealMatrix getGradeMatrix() {\n        return gradeMatrix;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.SparseRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create students\n        Student student1 = new Student(\"Alice\", 0);\n        Student student2 = new Student(\"Bob\", 1);\n\n        // Create a course with grades\n        Course course = new Course(2, 3);\n\n        // Set grades for students\n        course.setGrade(student1.getId(), 0, 85.0);\n        course.setGrade(student2.getId(), 0, 90.0);\n        \n        // Perform unrelated operations\n        course.setGrade(student1.getId(), 1, 75.0);\n        course.setGrade(student2.getId(), 1, 80.0);\n        \n        // Fetch the grade matrix\n        SparseRealMatrix gradeMatrix = course.getGradeMatrix();\n        \n        // Read a specific grade\n        /* read */ double grade = gradeMatrix.getEntry(student1.getId(), 0);\n\n        // Output the grade\n        System.out.println(\"Grade for \" + student1.getName() + \" on assignment 0: \" + grade);\n\n        // Additional unrelated operations\n        double average = (gradeMatrix.getEntry(student1.getId(), 0) + gradeMatrix.getEntry(student1.getId(), 1)) / 2;\n        System.out.println(\"Average grade for \" + student1.getName() + \": \" + average);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.SparseRealMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.SparseRealMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the SparseRealMatrix\n        SparseRealMatrix matrix = new OpenMapRealMatrix(3, 3);\n        \n        // Write a value to the matrix\n        /* write */ matrix.setEntry(1, 1, 5.0);\n        \n        // Read the value from the matrix\n        /* read */ double value = matrix.getEntry(1, 1);\n        \n        // Print the value to verify\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.OpenMapRealMatrix;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the SparseRealMatrix\n        SparseRealMatrix matrix = new OpenMapRealMatrix(3, 3);\n\n        // Initialize another matrix for additional operations\n        RealMatrix additionalMatrix = new OpenMapRealMatrix(3, 3);\n\n        // Write a value to the matrix\n        /* write */ matrix.setEntry(1, 1, 5.0);\n\n        // Perform some unrelated operations on the additional matrix\n        additionalMatrix.setEntry(0, 0, 3.0);\n        additionalMatrix.setEntry(2, 2, 7.0);\n        \n        // Calculate the sum of all entries in additionalMatrix\n        double sum = 0.0;\n        for (int i = 0; i < additionalMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < additionalMatrix.getColumnDimension(); j++) {\n                sum += additionalMatrix.getEntry(i, j);\n            }\n        }\n        System.out.println(\"Sum of additionalMatrix entries: \" + sum);\n\n        // Perform some operations on the original matrix\n        matrix.setEntry(0, 0, 1.0);\n        matrix.setEntry(2, 2, 2.0);\n        \n        // Calculate the trace of the original matrix\n        double trace = 0.0;\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            trace += matrix.getEntry(i, i);\n        }\n        System.out.println(\"Trace of matrix: \" + trace);\n\n        // Read the value from the matrix\n        /* read */ double value = matrix.getEntry(1, 1);\n\n        // Print the value to verify\n        System.out.println(\"Value at (1,1): \" + value);\n        \n        // Perform additional calculations using the original matrix\n        double product = matrix.getEntry(0, 0) * matrix.getEntry(2, 2);\n        System.out.println(\"Product of diagonal entries: \" + product);\n    }\n}"
}