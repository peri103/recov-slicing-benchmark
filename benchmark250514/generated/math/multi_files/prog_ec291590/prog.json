{
    "files": {
        "SymmetricMatrix.java": "public class SymmetricMatrix {\n    private double[][] data;\n\n    public SymmetricMatrix(int size) {\n        data = new double[size][size];\n    }\n\n    public void setEntry(int row, int column, double value) {\n        if (row >= 0 && column >= 0 && row < data.length && column < data.length) {\n            /* write */ data[row][column] = value;\n            data[column][row] = value; // Ensure symmetry\n        }\n    }\n\n    public double getEntry(int row, int column) {\n        if (row >= 0 && column >= 0 && row < data.length && column < data.length) {\n            return data[row][column];\n        }\n        return Double.NaN; // Return NaN if indices are out of bounds\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private SymmetricMatrix scoresMatrix;\n\n    public Student(String name, int matrixSize) {\n        this.name = name;\n        this.scoresMatrix = new SymmetricMatrix(matrixSize);\n    }\n\n    public void setScore(int subjectIndex1, int subjectIndex2, double score) {\n        scoresMatrix.setEntry(subjectIndex1, subjectIndex2, score);\n    }\n\n    public double getScore(int subjectIndex1, int subjectIndex2) {\n        return scoresMatrix.getEntry(subjectIndex1, subjectIndex2);\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        // Create a student with a symmetric matrix for scores\n        Student student = new Student(\"John Doe\", 3);\n\n        // Set a score for a subject pair\n        student.setScore(0, 1, 85.0);\n\n        // Perform some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 numbers: \" + sum);\n\n        // Read the score back from the symmetric matrix\n        /* read */ double score = student.getScore(0, 1);\n\n        // Print the score to verify it was written and read correctly\n        System.out.println(\"Score for subjects 0 and 1: \" + score);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.SymmetricMatrix",
        "write_method": "setEntry",
        "read_class": "org.apache.commons.math3.linear.SymmetricMatrix",
        "read_method": "getEntry"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.SymmetricMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix with a specific size\n        int size = 3; // example size\n        SymmetricMatrix matrix = new SymmetricMatrix(size);\n        \n        // Set a value in the matrix\n        int row = 0, column = 1;\n        double valueToWrite = 5.0;\n        /* write */ matrix.setEntry(row, column, valueToWrite);\n        \n        // Read the value back from the matrix\n        /* read */ double valueRead = matrix.getEntry(row, column);\n        \n        // Print the value to verify it was written and read correctly\n        System.out.println(valueRead);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.SymmetricMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a symmetric matrix with a specific size\n        int size = 3; // example size\n        SymmetricMatrix matrix = new SymmetricMatrix(size);\n        \n        // Set a value in the matrix\n        int row = 0, column = 1;\n        double valueToWrite = 5.0;\n        /* write */ matrix.setEntry(row, column, valueToWrite);\n        \n        // Initialize another matrix for additional operations\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(size, size);\n        \n        // Populate the other matrix with some values\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                anotherMatrix.setEntry(i, j, i + j);\n            }\n        }\n        \n        // Perform some operations on the other matrix\n        RealMatrix transposedMatrix = anotherMatrix.transpose();\n        RealMatrix multipliedMatrix = anotherMatrix.multiply(transposedMatrix);\n        \n        // Print the transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the value back from the symmetric matrix\n        /* read */ double valueRead = matrix.getEntry(row, column);\n        \n        // Print the value to verify it was written and read correctly\n        System.out.println(\"Value from Symmetric Matrix: \" + valueRead);\n    }\n}"
}