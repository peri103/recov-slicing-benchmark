{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix columnMatrix;\n\n    public void createColumnMatrix(double[] columnData) {\n        /* write */ columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n    }\n\n    public RealMatrix getColumnMatrix() {\n        return columnMatrix;\n    }\n}\n",
        "ComplexMatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class ComplexMatrixOperations {\n    private RealMatrix matrix;\n\n    public ComplexMatrixOperations(double[][] matrixData) {\n        matrix = new Array2DRowRealMatrix(matrixData);\n    }\n\n    public RealMatrix addMatrix(RealMatrix otherMatrix) {\n        return matrix.add(otherMatrix);\n    }\n\n    public RealMatrix multiplyByTranspose() {\n        return matrix.multiply(matrix.transpose());\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a column array\n        double[] columnData = {1.0, 2.0, 3.0};\n\n        // Create and use MatrixOperations to create a column matrix\n        MatrixOperations matrixOps = new MatrixOperations();\n        matrixOps.createColumnMatrix(columnData);\n\n        // Initialize a 2D array for another matrix\n        double[][] matrixData = {\n            {1.0, 2.0},\n            {3.0, 4.0},\n            {5.0, 6.0}\n        };\n\n        // Create and use ComplexMatrixOperations to perform operations\n        ComplexMatrixOperations complexOps = new ComplexMatrixOperations(matrixData);\n        RealMatrix sumMatrix = complexOps.addMatrix(matrixOps.getColumnMatrix());\n\n        // Print the sum matrix\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the column real matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = matrixOps.getColumnMatrix();\n\n        // Print the read matrix\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, 0));\n        }\n\n        // Perform and print matrix multiplication\n        RealMatrix productMatrix = complexOps.multiplyByTranspose();\n        System.out.println(\"Product Matrix:\");\n        for (int i = 0; i < productMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < productMatrix.getColumnDimension(); j++) {\n                System.out.print(productMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a column array\n        double[] columnData = {1.0, 2.0, 3.0};\n\n        // Create a column real matrix using MatrixUtils\n        /* write */ RealMatrix columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n\n        // Read the column real matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getColumnRealMatrix(columnMatrix, 0);\n\n        // Print the read matrix\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, 0));\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a column array\n        double[] columnData = {1.0, 2.0, 3.0};\n\n        // Create a column real matrix using MatrixUtils\n        /* write */ RealMatrix columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n\n        // Initialize a 2D array for another matrix\n        double[][] matrixData = {\n            {1.0, 2.0},\n            {3.0, 4.0},\n            {5.0, 6.0}\n        };\n\n        // Create a 2D row real matrix\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n\n        // Perform matrix addition\n        RealMatrix sumMatrix = matrix.add(columnMatrix);\n\n        // Print the sum matrix\n        System.out.println(\"Sum Matrix:\");\n        for (int i = 0; i < sumMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sumMatrix.getColumnDimension(); j++) {\n                System.out.print(sumMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the column real matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = MatrixUtils.getColumnRealMatrix(columnMatrix, 0);\n\n        // Print the read matrix\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, 0));\n        }\n\n        // Perform matrix multiplication\n        RealMatrix productMatrix = matrix.multiply(matrix.transpose());\n\n        // Print the product matrix\n        System.out.println(\"Product Matrix:\");\n        for (int i = 0; i < productMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < productMatrix.getColumnDimension(); j++) {\n                System.out.print(productMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}