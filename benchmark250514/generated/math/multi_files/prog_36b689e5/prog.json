{
    "files": {
        "MatrixHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixHandler {\n    private RealMatrix matrix;\n\n    public MatrixHandler(int rows, int columns) {\n        matrix = MatrixUtils.createRealMatrix(rows, columns);\n    }\n\n    public void setMatrixEntry(int row, int column, double value) {\n        /* write */ matrix.setEntry(row, column, value);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse matrix with 3 rows and 3 columns, filled with zeros\n        RealMatrix sparseMatrix = MatrixUtils.createRealMatrix(3, 3);\n\n        // Write a value into the sparse matrix\n        /* write */ sparseMatrix.setEntry(0, 0, 1.0);\n\n        // Read the value from the sparse matrix\n        /* read */ double value = sparseMatrix.getEntry(0, 0);\n\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a sparse matrix with 3 rows and 3 columns, filled with zeros\n        RealMatrix sparseMatrix = MatrixUtils.createRealMatrix(3, 3);\n\n        // Write a value into the sparse matrix\n        /* write */ sparseMatrix.setEntry(0, 0, 1.0);\n\n        // Additional operations on matrices\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(3, 3);\n        anotherMatrix.setEntry(1, 1, 2.0);\n        anotherMatrix.setEntry(2, 2, 3.0);\n\n        // Perform matrix addition\n        RealMatrix resultMatrix = sparseMatrix.add(anotherMatrix);\n\n        // Intermediate calculations\n        double sum = 0.0;\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                sum += resultMatrix.getEntry(i, j);\n            }\n        }\n        System.out.println(\"Sum of all entries in result matrix: \" + sum);\n\n        // Complex logic using loops and conditionals\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                if (resultMatrix.getEntry(i, j) > 0) {\n                    System.out.println(\"Positive entry found at (\" + i + \", \" + j + \"): \" + resultMatrix.getEntry(i, j));\n                }\n            }\n        }\n\n        // Read the value from the sparse matrix\n        /* read */ double value = sparseMatrix.getEntry(0, 0);\n\n        System.out.println(\"Read value from sparse matrix: \" + value);\n\n        // Further operations\n        RealMatrix transposedMatrix = resultMatrix.transpose();\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}