{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix symmetricMatrix;\n\n    public void createSymmetricMatrix(double[][] data) {\n        /* write */ symmetricMatrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public RealMatrix getSymmetricMatrix() {\n        return symmetricMatrix;\n    }\n\n    public RealMatrix transposeMatrix() {\n        return symmetricMatrix.transpose();\n    }\n\n    public RealMatrix multiplyWithTranspose() {\n        return symmetricMatrix.multiply(transposeMatrix());\n    }\n}",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Course> courses = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void enrollCourse(Course course) {\n        courses.add(course);\n    }\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "Course.java": "public class Course {\n    private String courseName;\n    private int creditHours;\n\n    public Course(String courseName, int creditHours) {\n        this.courseName = courseName;\n        this.creditHours = creditHours;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public int getCreditHours() {\n        return creditHours;\n    }\n}",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Matrix operations\n        MatrixOperations matrixOps = new MatrixOperations();\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        matrixOps.createSymmetricMatrix(data);\n\n        // Perform additional operations\n        RealMatrix multipliedMatrix = matrixOps.multiplyWithTranspose();\n\n        // Create Student and Course instances\n        Student student = new Student(\"John Doe\");\n        Course mathCourse = new Course(\"Mathematics\", 3);\n        student.enrollCourse(mathCourse);\n\n        // Output student details\n        System.out.println(\"Student: \" + student.getName());\n        for (Course course : student.getCourses()) {\n            System.out.println(\"Enrolled in: \" + course.getCourseName() + \" for \" + course.getCreditHours() + \" credit hours\");\n        }\n\n        // Read the symmetric matrix\n        /* read */ RealMatrix readMatrix = matrixOps.getSymmetricMatrix();\n\n        // Print the matrix to verify\n        System.out.println(\"Symmetric Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSymmetricMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSymmetricMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a symmetric matrix using MatrixUtils\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createRealMatrix(data);\n\n        // Read the symmetric matrix\n        /* read */ RealMatrix readMatrix = symmetricMatrix;\n\n        // Print the matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a symmetric matrix using MatrixUtils\n        double[][] data = {\n            {1, 2, 3},\n            {2, 4, 5},\n            {3, 5, 6}\n        };\n        /* write */ RealMatrix symmetricMatrix = MatrixUtils.createRealMatrix(data);\n\n        // Perform operations on the matrix\n        RealMatrix transposedMatrix = symmetricMatrix.transpose();\n        RealMatrix multipliedMatrix = symmetricMatrix.multiply(transposedMatrix);\n\n        // Create a vector and perform operations\n        double[] vectorData = {1, 2, 3};\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector resultVector = multipliedMatrix.operate(vector);\n\n        // Print the result vector\n        System.out.println(\"Resulting Vector:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Further matrix operations\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix addedMatrix = multipliedMatrix.add(identityMatrix);\n\n        // Print the added matrix to verify\n        System.out.println(\"Added Matrix:\");\n        for (int i = 0; i < addedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < addedMatrix.getColumnDimension(); j++) {\n                System.out.print(addedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Read the symmetric matrix\n        /* read */ RealMatrix readMatrix = symmetricMatrix;\n\n        // Print the matrix to verify\n        System.out.println(\"Symmetric Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}