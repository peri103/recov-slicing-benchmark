{
    "files": {
        "MatrixHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixHandler {\n    private RealMatrix matrix;\n\n    public void createMatrix(double[] rowData) {\n        /* write */ matrix = MatrixUtils.createRowRealMatrix(rowData);\n    }\n\n    public RealMatrix getMatrix() {\n        return matrix;\n    }\n}\n",
        "MatrixOperations.java": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class MatrixOperations {\n    public static void performVectorOperations(double[] rowData) {\n        // Create a vector using ArrayRealVector\n        RealVector vector = new ArrayRealVector(rowData);\n        \n        // Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        RealVector addedVector = vector.add(scaledVector);\n\n        // Print the scaled and added vectors\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println(\"\\nAdded Vector:\");\n        for (int i = 0; i < addedVector.getDimension(); i++) {\n            System.out.print(addedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void performMatrixOperations(MatrixHandler handler) {\n        // Retrieve the matrix\n        RealMatrix matrix = handler.getMatrix();\n\n        // Perform some unrelated operations\n        RealMatrix multipliedMatrix = matrix.scalarMultiply(3.0);\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] rowData = {1.0, 2.0, 3.0};\n\n        // Use MatrixHandler to create and manage matrix\n        MatrixHandler handler = new MatrixHandler();\n        handler.createMatrix(rowData);\n\n        // Perform vector operations\n        MatrixOperations.performVectorOperations(rowData);\n\n        // Perform matrix operations\n        MatrixOperations.performMatrixOperations(handler);\n\n        // Read the matrix using MatrixUtils\n        /* read */ RealMatrix readMatrix = handler.getMatrix();\n\n        // Print the read matrix to verify the value\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] rowData = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n        \n        // Print the read matrix to verify the value\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initializing a row of data\n        double[] rowData = {1.0, 2.0, 3.0};\n\n        // Create a vector using ArrayRealVector\n        RealVector vector = new ArrayRealVector(rowData);\n        \n        // Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        RealVector addedVector = vector.add(scaledVector);\n\n        // Print the scaled and added vectors\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println(\"\\nAdded Vector:\");\n        for (int i = 0; i < addedVector.getDimension(); i++) {\n            System.out.print(addedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Create another matrix using MatrixUtils\n        RealMatrix anotherMatrix = MatrixUtils.createRowRealMatrix(new double[]{4.0, 5.0, 6.0});\n        \n        // Perform matrix addition\n        RealMatrix resultMatrix = anotherMatrix.add(MatrixUtils.createRowRealMatrix(rowData));\n\n        // Print the result of matrix addition\n        System.out.println(\"Result Matrix after addition:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n\n        // Perform some unrelated operations\n        RealMatrix multipliedMatrix = matrix.scalarMultiply(3.0);\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        /* read */ RealMatrix readMatrix = MatrixUtils.getRowRealMatrix(matrix, 0);\n\n        // Print the read matrix to verify the value\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}"
}