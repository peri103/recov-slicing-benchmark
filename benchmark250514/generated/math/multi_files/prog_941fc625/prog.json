{
    "files": {
        "RealVectorHandler.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class RealVectorHandler {\n    private RealVector vector;\n\n    public void createVector(double[] data) {\n        /* write */ vector = MatrixUtils.createRealVector(data);\n    }\n\n    public RealVector getVector() {\n        return vector;\n    }\n}\n",
        "RealMatrixHandler.java": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class RealMatrixHandler {\n    private RealMatrix matrix;\n\n    public RealMatrixHandler(double[][] matrixData) {\n        this.matrix = new Array2DRowRealMatrix(matrixData);\n    }\n\n    public RealVector multiplyWithVector(RealVector vector) {\n        return matrix.operate(vector);\n    }\n\n    public RealMatrix getTransposedMatrix() {\n        return matrix.transpose();\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        RealVectorHandler vectorHandler = new RealVectorHandler();\n        vectorHandler.createVector(data);\n\n        RealMatrixHandler matrixHandler = new RealMatrixHandler(matrixData);\n        RealMatrix transposedMatrix = matrixHandler.getTransposedMatrix();\n\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        RealVector resultVector = matrixHandler.multiplyWithVector(vectorHandler.getVector());\n        System.out.println(\"Result of vector-matrix multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        /* read */ RealVector readVector = vectorHandler.getVector();\n\n        System.out.println(\"Original Vector:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.print(readVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealVector"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n        \n        /* read */ RealVector readVector = vector;\n        \n        System.out.println(\"Read Vector: \" + readVector);\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize some data\n        double[] data = {1.0, 2.0, 3.0};\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n\n        // Create a matrix and perform some operations\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        RealMatrix transposedMatrix = matrix.transpose();\n        \n        // Perform vector-matrix multiplication\n        RealVector resultVector = matrix.operate(vector);\n        \n        // Print the transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Print the result of vector-matrix multiplication\n        System.out.println(\"Result of vector-matrix multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // More operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        /* read */ RealVector readVector = vector;\n        \n        // Print the original vector\n        System.out.println(\"Original Vector:\");\n        for (int i = 0; i < readVector.getDimension(); i++) {\n            System.out.print(readVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}"
}