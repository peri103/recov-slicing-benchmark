{
    "files": {
        "MatrixOperations.java": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixOperations {\n    private RealMatrix matrix;\n\n    public MatrixOperations(double[][] data) {\n        /* write */ this.matrix = MatrixUtils.createRealMatrix(data);\n    }\n\n    public RealMatrix getMatrix() {\n        return this.matrix;\n    }\n\n    public RealMatrix transposeMatrix() {\n        return this.matrix.transpose();\n    }\n\n    public RealMatrix multiplyWith(RealMatrix otherMatrix) {\n        return this.matrix.multiply(otherMatrix);\n    }\n}\n",
        "MatrixPrinter.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixPrinter {\n    public static void printMatrix(RealMatrix matrix) {\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void printData(double[][] data) {\n        for (double[] row : data) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "Main.java": "import org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        \n        MatrixOperations matrixOps = new MatrixOperations(data);\n        \n        // Transpose the matrix\n        RealMatrix transposedMatrix = matrixOps.transposeMatrix();\n        System.out.println(\"Transposed matrix:\");\n        MatrixPrinter.printMatrix(transposedMatrix);\n        \n        // Multiply the matrix with its transpose\n        RealMatrix multipliedMatrix = matrixOps.multiplyWith(transposedMatrix);\n        System.out.println(\"Multiplied matrix:\");\n        MatrixPrinter.printMatrix(multipliedMatrix);\n        \n        // Retrieve the original matrix data\n        RealMatrix matrix = matrixOps.getMatrix();\n        /* read */ double[][] retrievedData = matrix.getData();\n        \n        System.out.println(\"Original matrix data:\");\n        MatrixPrinter.printData(retrievedData);\n    }\n}"
    },
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createArray2DRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getArray2DRowRealMatrix"
    },
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        /* read */ double[][] retrievedData = matrix.getData();\n        \n        for (double[] row : retrievedData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_complex": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        double[] vectorData = {5.0, 6.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        // Create and manipulate a RealVector\n        RealVector vector = new ArrayRealVector(vectorData);\n        vector = vector.mapMultiply(2.0); // Scale the vector by 2\n        \n        // Perform a matrix-vector multiplication\n        RealVector resultVector = matrix.operate(vector);\n        \n        // Output the result of the matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.println(resultVector.getEntry(i));\n        }\n        \n        // More complex operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n        \n        // Output the transposed matrix\n        System.out.println(\"Transposed matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Output the multiplied matrix\n        System.out.println(\"Multiplied matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        /* read */ double[][] retrievedData = matrix.getData();\n        \n        // Output the original matrix data\n        System.out.println(\"Original matrix data:\");\n        for (double[] row : retrievedData) {\n            for (double value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
}