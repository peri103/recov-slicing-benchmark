{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrix matrix = new Array2DRowRealMatrix(new double[][]{\n            {1.0, 2.0},\n            {3.0, 4.0}\n        });\n\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        matrix.walkInOptimizedOrder(visitor);\n\n        RealMatrixChangingVisitor changingVisitor = new RealMatrixChangingVisitor() {\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // Initialization before visiting\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                // Multiply each element by 2\n                return value * 2;\n            }\n\n            @Override\n            public double end() {\n                // No specific action needed at the end\n                return 0;\n            }\n        };\n\n        matrix.walkInOptimizedOrder(changingVisitor);\n\n        double[][] modifiedData = matrix.getData();\n        System.out.println(\"Modified Matrix:\");\n        for (double[] row : modifiedData) {\n            System.out.println(Arrays.toString(row));\n        }\n\n        double totalSum = visitor.end();\n        System.out.println(\"Sum of original elements: \" + totalSum);\n\n        // Additional unrelated code to increase complexity\n        int[] numbers = new int[]{5, 10, 15, 20};\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        System.out.println(\"Product of numbers: \" + product);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrix matrix = new Array2DRowRealMatrix(new double[][]{\n            {1.0, 2.0},\n            {3.0, 4.0}\n        });\n\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        matrix.walkInOptimizedOrder(visitor);\n        double totalSum = visitor.end();\n        System.out.println(totalSum);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "read_method": "end"
    }
}