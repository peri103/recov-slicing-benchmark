{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with some values\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Create a visitor that will sum all elements in the matrix\n        RealMatrixPreservingVisitor sumVisitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Use the visitor on the matrix\n        matrix.walkInOptimizedOrder(sumVisitor);\n\n        // Create another visitor to modify the matrix by adding 10 to each element\n        RealMatrixChangingVisitor addVisitor = new RealMatrixChangingVisitor() {\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n\n            @Override\n            public double visit(int row, int column, double value) {\n                return value + 10;\n            }\n\n            @Override\n            public double end() {\n                return 0; // Not used here\n            }\n        };\n\n        // Apply the modification visitor\n        matrix.walkInOptimizedOrder(addVisitor);\n\n        // Recalculate the sum with the modified matrix\n        matrix.walkInOptimizedOrder(sumVisitor);\n        double result = sumVisitor.end();\n        System.out.println(\"Sum of all elements in the modified matrix: \" + result);\n\n        // Additional unrelated operations to increase complexity\n        double[][] additionalData = {{5.0, 6.0}, {7.0, 8.0}};\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalData);\n        for (int i = 0; i < additionalMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < additionalMatrix.getColumnDimension(); j++) {\n                System.out.println(\"Element at (\" + i + \", \" + j + \"): \" + additionalMatrix.getEntry(i, j));\n            }\n        }\n\n        // Perform some arbitrary calculations\n        double sumAdditional = 0;\n        for (int i = 0; i < additionalMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < additionalMatrix.getColumnDimension(); j++) {\n                sumAdditional += additionalMatrix.getEntry(i, j);\n            }\n        }\n        System.out.println(\"Sum of all elements in the additional matrix: \" + sumAdditional);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix with some values\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Create a visitor that will sum all elements in the matrix\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Use the visitor on the matrix\n        matrix.walkInOptimizedOrder(visitor);\n\n        // Get the result from the visitor\n        double result = visitor.end();\n        System.out.println(\"Sum of all elements in the matrix: \" + result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "read_method": "end"
    }
}