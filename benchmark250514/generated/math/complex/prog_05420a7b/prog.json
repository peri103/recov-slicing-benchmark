{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        \n        // Create a new matrix using another method for demonstration\n        double[][] matrixData = {{4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n        RealMatrix matrix2 = new Array2DRowRealMatrix(matrixData);\n        \n        // Perform some operations on matrix2\n        RealMatrix transposedMatrix = matrix2.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Original write-read pair\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(data);\n        \n        // Perform some unrelated calculations\n        double[][] randomData = {{10.0, 11.0}, {12.0, 13.0}};\n        RealMatrix randomMatrix = new Array2DRowRealMatrix(randomData);\n        RealMatrix resultMatrix = randomMatrix.multiply(transposedMatrix);\n        System.out.println(\"Result Matrix after multiplication:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // More operations on matrix2\n        RealMatrix scaledMatrix = matrix2.scalarAdd(1.0);\n        System.out.println(\"Scaled Matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Original read operation\n        /* read */ RealMatrix readMatrix = matrix.getRowMatrix(0);\n        \n        // Print the read values from the matrix\n        System.out.print(\"Read Matrix: \");\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(data);\n        /* read */ RealMatrix readMatrix = matrix.getRowMatrix(0);\n        \n        // Print the read values from the matrix\n        for (int i = 0; i < readMatrix.getColumnDimension(); i++) {\n            System.out.print(readMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}