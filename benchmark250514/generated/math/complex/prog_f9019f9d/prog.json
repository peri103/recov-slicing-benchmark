{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize data for the column matrix\n        double[] columnData = {1.0, 2.0, 3.0};\n        \n        // Create a row matrix for additional complexity\n        double[][] rowData = {{4.0, 5.0, 6.0}};\n        RealMatrix rowMatrix = MatrixUtils.createRowRealMatrix(rowData[0]);\n        \n        // Perform operations on the row matrix\n        RealVector rowVector = new ArrayRealVector(rowMatrix.getRow(0));\n        RealVector scaledVector = rowVector.mapMultiply(2.0);\n        \n        // Print the scaled vector values\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.println(scaledVector.getEntry(i));\n        }\n        \n        // Create a column matrix with the write method\n        /* write */ RealMatrix columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n        \n        // Perform some operations on the column matrix\n        RealMatrix transposedMatrix = columnMatrix.transpose();\n        RealMatrix multipliedMatrix = transposedMatrix.multiply(columnMatrix);\n        \n        // Print the multiplied matrix values\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the column matrix using the read method\n        /* read */ RealMatrix readMatrix = columnMatrix.getColumnMatrix(0);\n        \n        // Print the values of the read matrix\n        System.out.println(\"Read Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, 0));\n        }\n        \n        // Additional matrix operations for complexity\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);\n        RealMatrix resultMatrix = identityMatrix.add(multipliedMatrix);\n        \n        // Print the result matrix values\n        System.out.println(\"Result Matrix:\");\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix columnMatrix = MatrixUtils.createColumnRealMatrix(columnData);\n        /* read */ RealMatrix readMatrix = columnMatrix.getColumnMatrix(0);\n        \n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            System.out.println(readMatrix.getEntry(i, 0));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealMatrix"
    }
}