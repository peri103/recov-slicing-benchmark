{
    "java_code": "import org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        DefaultRealMatrixChangingVisitor visitor = new DefaultRealMatrixChangingVisitor() {\n            private double value;\n\n            @Override\n            public double visit(int row, int column, double oldValue) {\n                value = oldValue + 1; // Example operation\n                /* write */ return value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return value;\n            }\n        };\n\n        // Create a simple 3x3 matrix\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Apply visitor to matrix\n        matrix.walkInOptimizedOrder(visitor);\n\n        // Unrelated complex logic\n        RealMatrix identity = new Array2DRowRealMatrix(new double[][] {\n            {1.0, 0.0, 0.0},\n            {0.0, 1.0, 0.0},\n            {0.0, 0.0, 1.0}\n        });\n\n        RealMatrix resultMatrix = matrix.add(identity);\n\n        for (int i = 0; i < resultMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < resultMatrix.getColumnDimension(); j++) {\n                System.out.print(resultMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Execute the read method far apart from the write\n        double finalValue = visitor.end();\n        System.out.println(\"Final value from visitor: \" + finalValue);\n\n        // Additional unrelated operations for complexity\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n        System.out.println(\"Scaled matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        DefaultRealMatrixChangingVisitor visitor = new DefaultRealMatrixChangingVisitor() {\n            private double value;\n\n            @Override\n            public double visit(int row, int column, double oldValue) {\n                value = oldValue + 1; // Example operation\n                /* write */ return value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return value;\n            }\n        };\n\n        // Example usage\n        double result = visitor.visit(0, 0, 5.0); // This line ensures the write method is executed\n        double finalValue = visitor.end(); // This line ensures the read method is executed\n        System.out.println(finalValue);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor",
        "read_method": "end"
    }
}