{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createRealMatrix(2, 2);\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n\n        // Add complexity: Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{3.0, 4.0});\n        RealVector resultVector = sparseMatrix.operate(vector);\n        System.out.println(\"Resultant vector after matrix operation:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Add complexity: Use a visitor to modify matrix entries\n        sparseMatrix.walkInRowOrder(new RealMatrixChangingVisitor() {\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // Initialization if needed\n            }\n\n            public double visit(int row, int column, double value) {\n                return value + 1.0; // Increment each entry by 1\n            }\n\n            public double end() {\n                return 0; // Finalization if needed\n            }\n        });\n\n        // Since there is no direct method named getSparseMatrix in MatrixUtils,\n        // we will use the matrix we have already created.\n        /* read */ RealMatrix readMatrix = sparseMatrix;\n\n        // Output the matrix to verify the read operation\n        System.out.println(\"Modified matrix after visitor operation:\");\n        for (int row = 0; row < readMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < readMatrix.getColumnDimension(); col++) {\n                System.out.print(readMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Add complexity: Perform matrix multiplication\n        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(2);\n        RealMatrix multipliedMatrix = readMatrix.multiply(identityMatrix);\n        System.out.println(\"Matrix after multiplication with identity matrix:\");\n        for (int row = 0; row < multipliedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < multipliedMatrix.getColumnDimension(); col++) {\n                System.out.print(multipliedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a sparse matrix using MatrixUtils\n        /* write */ RealMatrix sparseMatrix = MatrixUtils.createRealMatrix(2, 2);\n        sparseMatrix.setEntry(0, 0, 1.0);\n        sparseMatrix.setEntry(1, 1, 2.0);\n\n        // Since there is no direct method named getSparseMatrix in MatrixUtils,\n        // we will use the matrix we have already created.\n        /* read */ RealMatrix readMatrix = sparseMatrix;\n\n        // Output the matrix to verify the read operation\n        for (int row = 0; row < readMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < readMatrix.getColumnDimension(); col++) {\n                System.out.print(readMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createSparseMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getSparseMatrix"
    }
}