{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a RealMatrix\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        // Create a RealVector for operations\n        double[] vectorData = {5.0, 6.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n        \n        // Perform matrix-vector multiplication\n        RealVector resultVector = matrix.operate(vector);\n        \n        // Print result of matrix-vector multiplication\n        System.out.println(\"Result of matrix-vector multiplication:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Perform LU decomposition and solve a linear system\n        LUDecomposition decomposition = new LUDecomposition(matrix);\n        DecompositionSolver solver = decomposition.getSolver();\n        RealVector solution = solver.solve(vector);\n        \n        // Print solution of the linear system\n        System.out.println(\"Solution of the linear system:\");\n        for (int i = 0; i < solution.getDimension(); i++) {\n            System.out.print(solution.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Access the matrix created\n        /* read */ RealMatrix readMatrix = matrix; // Directly using the matrix as MatrixUtils does not have a getRealMatrix method\n        \n        // Print the matrix to verify\n        System.out.println(\"Original Matrix:\");\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Perform additional operations on the matrix\n        RealMatrix transposedMatrix = readMatrix.transpose();\n        \n        // Print transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to create a RealMatrix\n        double[][] data = {{1.0, 2.0}, {3.0, 4.0}};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n        \n        // Access the matrix created\n        /* read */ RealMatrix readMatrix = matrix; // Directly using the matrix as MatrixUtils does not have a getRealMatrix method\n        \n        // Print the matrix to verify\n        for (int i = 0; i < readMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < readMatrix.getColumnDimension(); j++) {\n                System.out.print(readMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealMatrix"
    }
}