{
    "java_code": "import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original write-read pair\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value; // This line is executed only once\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // This line is executed only once\n            }\n        };\n\n        // Simulate visiting a matrix with some values\n        RealMatrix matrix = new Array2DRowRealMatrix(new double[][] {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        });\n\n        visitor.start(3, 3, 0, 2, 0, 2);\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                visitor.visit(i, j, matrix.getEntry(i, j));\n            }\n        }\n        double result = visitor.end();\n        System.out.println(\"Sum of matrix values: \" + result);\n\n        // Additional code for complexity\n        RealMatrixPreservingVisitor anotherVisitor = new RealMatrixPreservingVisitor() {\n            private double product = 1;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                product = 1;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                product *= value;\n            }\n\n            @Override\n            public double end() {\n                return product;\n            }\n        };\n\n        anotherVisitor.start(3, 3, 0, 2, 0, 2);\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                anotherVisitor.visit(i, j, matrix.getEntry(i, j));\n            }\n        }\n        double productResult = anotherVisitor.end();\n        System.out.println(\"Product of matrix values: \" + productResult);\n\n        // Unrelated code for more complexity\n        double[] array = {1.0, 2.0, 3.0, 4.0, 5.0};\n        double totalSum = 0;\n        for (double num : array) {\n            totalSum += num;\n        }\n        System.out.println(\"Sum of array values: \" + totalSum);\n\n        double totalProduct = 1;\n        for (double num : array) {\n            totalProduct *= num;\n        }\n        System.out.println(\"Product of array values: \" + totalProduct);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value; // This line is executed only once\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // This line is executed only once\n            }\n        };\n\n        // Simulate visiting a matrix with some values\n        visitor.start(3, 3, 0, 2, 0, 2);\n        visitor.visit(0, 0, 1.0);\n        visitor.visit(0, 1, 2.0);\n        visitor.visit(0, 2, 3.0);\n        visitor.visit(1, 0, 4.0);\n        visitor.visit(1, 1, 5.0);\n        visitor.visit(1, 2, 6.0);\n        visitor.visit(2, 0, 7.0);\n        visitor.visit(2, 1, 8.0);\n        visitor.visit(2, 2, 9.0);\n        double result = visitor.end();\n        \n        System.out.println(\"Sum of matrix values: \" + result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "read_method": "end"
    }
}