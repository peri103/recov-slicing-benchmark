{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 3x3 matrix\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n        \n        // Perform some matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Initialize a vector\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n        \n        // Perform operations with the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n        \n        // Perform additional operations on the matrix\n        RealMatrix matrixProduct = matrix.multiply(transposedMatrix);\n        System.out.println(\"Matrix Product:\");\n        for (int i = 0; i < matrixProduct.getRowDimension(); i++) {\n            for (int j = 0; j < matrixProduct.getColumnDimension(); j++) {\n                System.out.print(matrixProduct.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the vector\n        /* read */ RealVector readVector = vector;  // Directly use the vector as there's no specific getRealVector method\n        System.out.println(\"Original Vector:\");\n        System.out.println(readVector);\n        \n        // More complex operations\n        RealVector addedVector = vector.add(scaledVector);\n        System.out.println(\"Added Vector:\");\n        for (int i = 0; i < addedVector.getDimension(); i++) {\n            System.out.print(addedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n        /* read */ RealVector readVector = vector;  // Directly use the vector as there's no specific getRealVector method\n        System.out.println(readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealVector"
    }
}