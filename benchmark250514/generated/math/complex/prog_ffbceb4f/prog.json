{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an array of doubles to create a RealVector\n        double[] data = {1.0, 2.0, 3.0};\n\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n\n        // Create a matrix for some additional operations\n        double[][] matrixData = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix matrix = new Array2DRowRealMatrix(matrixData);\n\n        // Perform matrix-vector multiplication\n        RealVector resultVector = matrix.operate(vector);\n\n        // Print the result of the multiplication\n        System.out.println(\"Result of matrix-vector multiplication: \" + resultVector);\n\n        // Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled vector: \" + scaledVector);\n\n        // Calculate the norm of the vector\n        double norm = vector.getNorm();\n        System.out.println(\"Norm of the vector: \" + norm);\n\n        // Add a constant to each element of the vector\n        RealVector shiftedVector = vector.mapAdd(5.0);\n        System.out.println(\"Shifted vector: \" + shiftedVector);\n\n        // Retrieve the original vector for verification\n        /* read */ RealVector readVector = vector; // Since MatrixUtils does not have a getRealVector method, we use the created vector directly\n\n        // Print the vector to verify\n        System.out.println(\"Original Vector: \" + readVector);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize an array of doubles to create a RealVector\n        double[] data = {1.0, 2.0, 3.0};\n\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n        \n        /* read */ RealVector readVector = vector; // Since MatrixUtils does not have a getRealVector method, we use the created vector directly\n        \n        // Print the vector to verify\n        System.out.println(\"Vector: \" + readVector);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealVector"
    }
}