{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to be used for matrix creation\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        // Use the write method to create a matrix\n        /* write */ RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Perform some operations on the matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n\n        // Create a vector and perform operations\n        double[] vectorData = {1.0, 2.0};\n        RealVector vector = new ArrayRealVector(vectorData);\n        RealVector transformedVector = matrix.operate(vector);\n\n        // Use the read method to retrieve the matrix\n        /* read */ RealMatrix retrievedMatrix = matrix;  // Since we are using the same instance, this is effectively the read operation\n\n        // Print the retrieved matrix to verify the operation\n        System.out.println(\"Retrieved Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the transposed matrix\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the multiplied matrix\n        System.out.println(\"Multiplied Matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Print the transformed vector\n        System.out.println(\"Transformed Vector:\");\n        for (int i = 0; i < transformedVector.getDimension(); i++) {\n            System.out.print(transformedVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a 2D array to be used for matrix creation\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        // Use the write method to create a matrix\n        /* write */ RealMatrix matrix = MatrixUtils.createRealMatrix(data);\n\n        // Use the read method to retrieve the matrix\n        /* read */ RealMatrix retrievedMatrix = matrix;  // Since we are using the same instance, this is effectively the read operation\n\n        // Print the retrieved matrix to verify the operation\n        System.out.println(\"Retrieved Matrix:\");\n        for (int i = 0; i < retrievedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < retrievedMatrix.getColumnDimension(); j++) {\n                System.out.print(retrievedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealMatrix"
    }
}