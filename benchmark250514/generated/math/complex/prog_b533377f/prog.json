{
    "java_code": "import org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original visitor for write-read pair\n        DefaultRealMatrixChangingVisitor visitor = new DefaultRealMatrixChangingVisitor() {\n            private double value;\n\n            @Override\n            public double visit(int row, int column, double value) {\n                this.value = value;\n                return value;\n            }\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // Initialize or do nothing\n            }\n\n            @Override\n            public double end() {\n                return value;\n            }\n        };\n\n        // New visitor for additional operations\n        DefaultRealMatrixChangingVisitor additionalVisitor = new DefaultRealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public double visit(int row, int column, double value) {\n                sum += value;\n                return value;\n            }\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double end() {\n                return sum;\n            }\n        };\n\n        // Matrix for visitor operations\n        RealMatrix matrix = new Array2DRowRealMatrix(new double[][] {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        });\n\n        // Using additionalVisitor to calculate sum of matrix elements\n        matrix.walkInOptimizedOrder(additionalVisitor);\n        double sumResult = additionalVisitor.end();\n        System.out.println(\"Sum of matrix elements: \" + sumResult);\n\n        /* write */ visitor.visit(0, 0, 42.0);\n\n        // Unrelated code to make program complex\n        ArrayList<Double> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(Math.pow(i, 2));\n        }\n\n        double listSum = 0;\n        for (Double num : list) {\n            listSum += num;\n        }\n        System.out.println(\"Sum of list elements: \" + listSum);\n\n        /* read */ double result = visitor.end();\n        System.out.println(\"Visitor end value: \" + result);\n\n        // Further complex operations\n        double average = listSum / list.size();\n        System.out.println(\"Average of list elements: \" + average);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        DefaultRealMatrixChangingVisitor visitor = new DefaultRealMatrixChangingVisitor() {\n            private double value;\n\n            @Override\n            public double visit(int row, int column, double value) {\n                this.value = value;\n                return value;\n            }\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // Initialize or do nothing\n            }\n\n            @Override\n            public double end() {\n                return value;\n            }\n        };\n\n        /* write */ visitor.visit(0, 0, 42.0);\n        /* read */ double result = visitor.end();\n        System.out.println(result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor",
        "read_method": "end"
    }
}