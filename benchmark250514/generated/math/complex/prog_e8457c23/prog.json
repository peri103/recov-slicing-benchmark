{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a column matrix\n        double[] columnData = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createColumnRealMatrix(columnData);\n        \n        // Perform operations on another matrix\n        double[][] data = {\n            {3.0, 1.0, 2.0},\n            {1.0, 3.0, 1.0},\n            {2.0, 1.0, 3.0}\n        };\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(data);\n        \n        // Perform LU decomposition on the new matrix\n        LUDecomposition luDecomposition = new LUDecomposition(anotherMatrix);\n        DecompositionSolver solver = luDecomposition.getSolver();\n        \n        // Create a vector for solving linear equations\n        RealVector constants = new ArrayRealVector(new double[] {1.0, 2.0, 3.0});\n        \n        // Solve the equation A * x = b\n        if (solver.isNonSingular()) {\n            RealVector solution = solver.solve(constants);\n            System.out.println(\"Solution: \" + solution);\n        } else {\n            System.out.println(\"Matrix is singular, cannot solve.\");\n        }\n        \n        // Further operations on the original matrix\n        RealMatrix transposedMatrix = matrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int i = 0; i < transposedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < transposedMatrix.getColumnDimension(); j++) {\n                System.out.print(transposedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Read the column matrix from the original matrix\n        /* read */ RealMatrix columnMatrix = matrix.getColumnMatrix(0);\n        \n        // Print the values of the column matrix to verify the read operation\n        System.out.println(\"Column Matrix:\");\n        for (int i = 0; i < columnMatrix.getRowDimension(); i++) {\n            System.out.println(columnMatrix.getEntry(i, 0));\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] columnData = {1.0, 2.0, 3.0};\n        \n        /* write */ RealMatrix matrix = MatrixUtils.createColumnRealMatrix(columnData);\n        \n        /* read */ RealMatrix columnMatrix = matrix.getColumnMatrix(0);\n        \n        // Print the values of the column matrix to verify the read operation\n        for (int i = 0; i < columnMatrix.getRowDimension(); i++) {\n            System.out.println(columnMatrix.getEntry(i, 0));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createColumnRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getColumnRealMatrix"
    }
}