{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a simple 2x2 matrix\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n        \n        // Implement a custom RealMatrixPreservingVisitor\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n            \n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */\n                sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */\n                return sum;\n            }\n        };\n        \n        // Use the visitor to visit the matrix elements\n        matrix.walkInOptimizedOrder(visitor);\n        \n        // Add a new visitor for modifying the matrix\n        RealMatrixChangingVisitor changingVisitor = new RealMatrixChangingVisitor() {\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                // Initialization if needed\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                // Multiply each element by 2\n                return value * 2;\n            }\n\n            @Override\n            public double end() {\n                return 0; // No specific end operation needed\n            }\n        };\n        \n        // Apply the changing visitor to modify the matrix\n        matrix.walkInOptimizedOrder(changingVisitor);\n        \n        // Output the result of the original visitor's end method\n        double result = visitor.end();\n        System.out.println(\"Sum of original matrix elements: \" + result);\n        \n        // Output the modified matrix\n        System.out.println(\"Modified matrix:\");\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                System.out.print(matrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Define a simple 2x2 matrix\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n        \n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n        \n        // Implement a custom RealMatrixPreservingVisitor\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n            \n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */\n                sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */\n                return sum;\n            }\n        };\n        \n        // Use the visitor to visit the matrix elements\n        matrix.walkInOptimizedOrder(visitor);\n        \n        // Output the result of the visitor's end method\n        double result = visitor.end();\n        System.out.println(\"Sum of matrix elements: \" + result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "read_method": "end"
    }
}