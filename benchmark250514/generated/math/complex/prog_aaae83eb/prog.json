{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        double[] moreData = {4.0, 5.0, 6.0};\n\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(data);\n\n        // Create another matrix for additional operations\n        RealMatrix anotherMatrix = MatrixUtils.createRowRealMatrix(moreData);\n\n        // Perform some matrix addition\n        RealMatrix sumMatrix = matrix.add(anotherMatrix);\n\n        // Create a vector for multiplication\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 1.0, 1.0});\n\n        // Multiply the sumMatrix by the vector\n        RealVector resultVector = sumMatrix.operate(vector);\n\n        // Print the result of the vector operation\n        System.out.println(\"Result of vector operation:\");\n        for (int i = 0; i < resultVector.getDimension(); i++) {\n            System.out.print(resultVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Perform some matrix scaling\n        RealMatrix scaledMatrix = matrix.scalarMultiply(2.0);\n\n        // Print the scaled matrix\n        System.out.println(\"Scaled matrix:\");\n        for (int i = 0; i < scaledMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < scaledMatrix.getColumnDimension(); j++) {\n                System.out.print(scaledMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // More operations to make code complex\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n\n        // Printing the multiplied matrix\n        System.out.println(\"Multiplied matrix:\");\n        for (int i = 0; i < multipliedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < multipliedMatrix.getColumnDimension(); j++) {\n                System.out.print(multipliedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Retrieve the original row matrix\n        /* read */ RealMatrix retrievedMatrix = matrix.getRowMatrix(0);\n        \n        // Print the retrieved matrix\n        System.out.println(\"Retrieved matrix:\");\n        for (int i = 0; i < retrievedMatrix.getColumnDimension(); i++) {\n            System.out.print(retrievedMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0};\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(data);\n        /* read */ RealMatrix retrievedMatrix = matrix.getRowMatrix(0);\n        \n        for (int i = 0; i < retrievedMatrix.getColumnDimension(); i++) {\n            System.out.print(retrievedMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}