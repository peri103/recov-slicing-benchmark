{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.ArrayRealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an array to represent a row vector\n        double[] rowData = {1.0, 2.0, 3.0};\n        \n        // Use MatrixUtils to create a row real matrix\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        // Create another matrix for demonstration purposes\n        double[][] matrixData = {\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        RealMatrix anotherMatrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Perform some operations on the other matrix\n        RealMatrix transposedMatrix = anotherMatrix.transpose();\n        System.out.println(\"Transposed Matrix:\");\n        for (int row = 0; row < transposedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < transposedMatrix.getColumnDimension(); col++) {\n                System.out.print(transposedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        // Create a vector and perform operations\n        RealVector vector = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});\n        RealVector scaledVector = vector.mapMultiply(2.0);\n        System.out.println(\"Scaled Vector:\");\n        for (int i = 0; i < scaledVector.getDimension(); i++) {\n            System.out.print(scaledVector.getEntry(i) + \" \");\n        }\n        System.out.println();\n\n        // Retrieve the row real matrix using MatrixUtils (though typically this would be done directly from the matrix object)\n        /* read */ RealMatrix retrievedMatrix = matrix.getRowMatrix(0);\n        \n        // Print the retrieved matrix row\n        System.out.println(\"Retrieved Matrix Row:\");\n        for (int i = 0; i < retrievedMatrix.getColumnDimension(); i++) {\n            System.out.print(retrievedMatrix.getEntry(0, i) + \" \");\n        }\n        System.out.println();\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an array to represent a row vector\n        double[] rowData = {1.0, 2.0, 3.0};\n        \n        // Use MatrixUtils to create a row real matrix\n        /* write */ RealMatrix matrix = MatrixUtils.createRowRealMatrix(rowData);\n        \n        // Retrieve the row real matrix using MatrixUtils (though typically this would be done directly from the matrix object)\n        /* read */ RealMatrix retrievedMatrix = matrix.getRowMatrix(0);\n        \n        // Print the retrieved matrix row\n        System.out.println(\"Retrieved Matrix Row:\");\n        for (int i = 0; i < retrievedMatrix.getColumnDimension(); i++) {\n            System.out.print(retrievedMatrix.getEntry(0, i) + \" \");\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRowRealMatrix",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRowRealMatrix"
    }
}