{
    "java_code": "import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance of RealMatrixChangingVisitor\n        RealMatrixChangingVisitor changingVisitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value; // Example of modifying the matrix element\n                return sum;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // Example of reading the accumulated value\n            }\n        };\n\n        // Create an instance of RealMatrixPreservingVisitor\n        RealMatrixPreservingVisitor preservingVisitor = new RealMatrixPreservingVisitor() {\n            private double product = 1;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                product = 1;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                product *= value; // Example of preserving the matrix element\n            }\n\n            @Override\n            public double end() {\n                return product; // Example of reading the product of values\n            }\n        };\n\n        // Simulate visiting elements in a matrix with changingVisitor\n        changingVisitor.start(3, 3, 0, 2, 0, 2);\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                changingVisitor.visit(i, j, 1.0); // Example value\n            }\n        }\n        \n        // Unrelated complex operations\n        ArrayList<Double> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(Math.pow(i, 2));\n        }\n        \n        double sumSquares = 0;\n        for (Double value : list) {\n            sumSquares += value;\n        }\n        \n        System.out.println(\"Sum of squares: \" + sumSquares);\n\n        // Simulate visiting elements in a matrix with preservingVisitor\n        preservingVisitor.start(3, 3, 0, 2, 0, 2);\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                preservingVisitor.visit(i, j, 2.0); // Example value\n            }\n        }\n        \n        double productResult = preservingVisitor.end();\n        System.out.println(\"Product of matrix elements: \" + productResult);\n\n        double result = changingVisitor.end();\n        System.out.println(\"Sum of matrix elements: \" + result);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance of RealMatrixChangingVisitor\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value; // Example of modifying the matrix element\n                return sum;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // Example of reading the accumulated value\n            }\n        };\n\n        // Simulate visiting elements in a matrix\n        visitor.start(3, 3, 0, 2, 0, 2);\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                visitor.visit(i, j, 1.0); // Example value\n            }\n        }\n        double result = visitor.end();\n        System.out.println(\"Sum of matrix elements: \" + result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "read_method": "end"
    }
}