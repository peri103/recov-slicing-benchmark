{
    "java_code": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix\n        double[][] data = {{1, 2}, {3, 4}};\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Create a changing visitor implementation\n        RealMatrixChangingVisitor changingVisitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value;\n                return value; // return the unchanged value\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Apply the changing visitor to the matrix\n        matrix.walkInRowOrder(changingVisitor);\n\n        // Create a preserving visitor implementation\n        RealMatrixPreservingVisitor preservingVisitor = new RealMatrixPreservingVisitor() {\n            private double product = 1;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                product = 1;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                product *= value;\n            }\n\n            @Override\n            public double end() {\n                return product;\n            }\n        };\n\n        // Apply the preserving visitor to the matrix\n        matrix.walkInRowOrder(preservingVisitor);\n\n        // Get the result from the changing visitor's end method\n        double sumResult = changingVisitor.end();\n        System.out.println(\"Sum of matrix elements: \" + sumResult);\n\n        // Get the result from the preserving visitor's end method\n        double productResult = preservingVisitor.end();\n        System.out.println(\"Product of matrix elements: \" + productResult);\n\n        // Additional complex operations\n        double[][] additionalData = {{5, 6}, {7, 8}};\n        RealMatrix additionalMatrix = new Array2DRowRealMatrix(additionalData);\n        double trace = 0;\n        for (int i = 0; i < additionalMatrix.getRowDimension(); i++) {\n            trace += additionalMatrix.getEntry(i, i);\n        }\n        System.out.println(\"Trace of the additional matrix: \" + trace);\n\n        double[][] combinedData = new double[2][2];\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 2; j++) {\n                combinedData[i][j] = matrix.getEntry(i, j) + additionalMatrix.getEntry(i, j);\n            }\n        }\n        RealMatrix combinedMatrix = new Array2DRowRealMatrix(combinedData);\n        System.out.println(\"Combined matrix:\");\n        for (int i = 0; i < combinedMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < combinedMatrix.getColumnDimension(); j++) {\n                System.out.print(combinedMatrix.getEntry(i, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a matrix\n        double[][] data = {{1, 2}, {3, 4}};\n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Create a visitor implementation\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value;\n                return value; // return the unchanged value\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Apply the visitor to the matrix\n        matrix.walkInRowOrder(visitor);\n\n        // Get the result from the visitor's end method\n        double result = visitor.end();\n        System.out.println(\"Sum of matrix elements: \" + result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "read_method": "end"
    }
}