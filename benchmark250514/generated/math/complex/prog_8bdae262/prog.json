{
    "java_code": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the array for the RealVector\n        double[] data = {1.0, 2.0, 3.0};\n\n        // Create a RealVector using MatrixUtils\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n\n        // Perform some operations on the vector\n        RealVector scaledVector = vector.mapMultiply(2.0); // Scale the vector\n        RealVector addedVector = vector.add(scaledVector); // Add the scaled vector to the original\n\n        // Create a RealMatrix from the vectors for additional complexity\n        double[][] matrixData = {\n            vector.toArray(),\n            scaledVector.toArray(),\n            addedVector.toArray()\n        };\n        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);\n\n        // Perform matrix operations\n        RealMatrix transposedMatrix = matrix.transpose();\n        RealMatrix multipliedMatrix = matrix.multiply(transposedMatrix);\n\n        // Retrieve the RealVector using MatrixUtils (although there's no direct getRealVector method, we'll assume it's similar to accessing the vector directly)\n        /* read */ RealVector retrievedVector = vector; // Directly accessing the created vector\n\n        // Print the values from the retrieved vector to ensure correctness\n        System.out.println(\"Retrieved Vector:\");\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(retrievedVector.getEntry(i));\n        }\n\n        // Print the original matrix and its transpose\n        System.out.println(\"Original Matrix:\");\n        for (int row = 0; row < matrix.getRowDimension(); row++) {\n            for (int col = 0; col < matrix.getColumnDimension(); col++) {\n                System.out.print(matrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        System.out.println(\"Transposed Matrix:\");\n        for (int row = 0; row < transposedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < transposedMatrix.getColumnDimension(); col++) {\n                System.out.print(transposedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n\n        System.out.println(\"Multiplied Matrix:\");\n        for (int row = 0; row < multipliedMatrix.getRowDimension(); row++) {\n            for (int col = 0; col < multipliedMatrix.getColumnDimension(); col++) {\n                System.out.print(multipliedMatrix.getEntry(row, col) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the array for the RealVector\n        double[] data = {1.0, 2.0, 3.0};\n\n        // Create a RealVector using MatrixUtils\n        /* write */ RealVector vector = MatrixUtils.createRealVector(data);\n\n        // Retrieve the RealVector using MatrixUtils (although there's no direct getRealVector method, we'll assume it's similar to accessing the vector directly)\n        /* read */ RealVector retrievedVector = vector; // Directly accessing the created vector\n\n        // Print the values from the retrieved vector to ensure correctness\n        for (int i = 0; i < retrievedVector.getDimension(); i++) {\n            System.out.println(retrievedVector.getEntry(i));\n        }\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.MatrixUtils",
        "write_method": "createRealVector",
        "read_class": "org.apache.commons.math3.linear.MatrixUtils",
        "read_method": "getRealVector"
    }
}