{
    "java_code": "import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a simple matrix for demonstration\n        double[][] data = {\n            {1.0, 2.0},\n            {3.0, 4.0}\n        };\n\n        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(data);\n\n        // Visitor to change the matrix and compute sum\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value;\n                return value * 2; // Example transformation: double the value\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Apply the visitor to the matrix\n        matrix.walkInRowOrder(visitor);\n\n        // Unrelated visitor to calculate the product of matrix elements\n        RealMatrixPreservingVisitor productVisitor = new RealMatrixPreservingVisitor() {\n            private double product = 1;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                product = 1;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                product *= value;\n            }\n\n            @Override\n            public double end() {\n                return product;\n            }\n        };\n\n        matrix.walkInRowOrder(productVisitor);\n        double productResult = productVisitor.end();\n        System.out.println(\"Product of matrix elements: \" + productResult);\n\n        // Retrieve the sum from the original visitor\n        double result = visitor.end();\n        System.out.println(\"Sum of original matrix elements: \" + result);\n\n        // Additional calculation unrelated to matrix visitors\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 10: \" + sum);\n\n        // Another unrelated visitor pattern\n        RealMatrixPreservingVisitor sumVisitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                sum += value;\n            }\n\n            @Override\n            public double end() {\n                return sum;\n            }\n        };\n\n        matrix.walkInRowOrder(sumVisitor);\n        double sumResult = sumVisitor.end();\n        System.out.println(\"Sum of matrix elements after transformation: \" + sumResult);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value;\n                return value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Assuming the matrix has been visited using the `visit` method.\n        double result = visitor.end();\n        System.out.println(result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "read_method": "end"
    }
}