{
    "java_code": "import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // First Visitor: RealMatrixPreservingVisitor\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Second Visitor: RealMatrixChangingVisitor for additional complexity\n        RealMatrixChangingVisitor changingVisitor = new RealMatrixChangingVisitor() {\n            private double product = 1;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                product = 1;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                product *= value;\n                return value * 2; // Example of changing the matrix\n            }\n\n            @Override\n            public double end() {\n                return product;\n            }\n        };\n\n        // Simulating a matrix visit for both visitors\n        visitor.start(2, 2, 0, 1, 0, 1);\n        changingVisitor.start(2, 2, 0, 1, 0, 1);\n        \n        visitor.visit(0, 0, 1.0);\n        changingVisitor.visit(0, 0, 1.0);\n        \n        visitor.visit(0, 1, 2.0);\n        changingVisitor.visit(0, 1, 2.0);\n        \n        visitor.visit(1, 0, 3.0);\n        changingVisitor.visit(1, 0, 3.0);\n        \n        visitor.visit(1, 1, 4.0);\n        changingVisitor.visit(1, 1, 4.0);\n        \n        double result = visitor.end();\n        double productResult = changingVisitor.end();\n\n        System.out.println(\"Sum of matrix elements: \" + result); // Output should be the sum of the matrix elements: 10.0\n        System.out.println(\"Product of matrix elements: \" + productResult); // Output should be the product of the matrix elements: 24.0\n\n        // Additional computation for complexity\n        int[] array = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int num : array) {\n            sum += num * 2;\n        }\n        System.out.println(\"Sum of doubled array elements: \" + sum); // Output should be 30\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        RealMatrixPreservingVisitor visitor = new RealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum;\n            }\n        };\n\n        // Simulating a matrix visit\n        visitor.start(2, 2, 0, 1, 0, 1);\n        visitor.visit(0, 0, 1.0);\n        visitor.visit(0, 1, 2.0);\n        visitor.visit(1, 0, 3.0);\n        visitor.visit(1, 1, 4.0);\n        double result = visitor.end();\n\n        System.out.println(result); // Output should be the sum of the matrix elements: 10.0\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixPreservingVisitor",
        "read_method": "end"
    }
}