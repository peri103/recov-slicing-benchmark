{
    "java_code": "import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an instance of RealMatrixChangingVisitor\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value; // Visiting each element and performing a write operation\n                return sum;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // Reading the result of the visit operation\n            }\n        };\n\n        // Simulating a matrix visit\n        RealMatrix matrix = new Array2DRowRealMatrix(new double[][]{\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        });\n\n        matrix.walkInRowOrder(visitor);\n\n        // Intermediate unrelated calculations\n        double[][] data = {\n            {10.0, 11.0, 12.0},\n            {13.0, 14.0, 15.0},\n            {16.0, 17.0, 18.0}\n        };\n        RealMatrix anotherMatrix = new Array2DRowRealMatrix(data);\n        RealMatrixPreservingVisitor preservingVisitor = new RealMatrixPreservingVisitor() {\n            private double product = 1;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                product = 1;\n            }\n\n            @Override\n            public void visit(int row, int column, double value) {\n                product *= value;\n            }\n\n            @Override\n            public double end() {\n                return product;\n            }\n        };\n\n        anotherMatrix.walkInRowOrder(preservingVisitor);\n        double productResult = preservingVisitor.end();\n        System.out.println(\"Product of another matrix elements: \" + productResult);\n\n        // Reading the result of the visit operation\n        double result = visitor.end();\n        System.out.println(\"Sum of matrix elements: \" + result);\n\n        // Further unrelated calculations\n        double sumOfSquares = 0;\n        for (int i = 0; i < matrix.getRowDimension(); i++) {\n            for (int j = 0; j < matrix.getColumnDimension(); j++) {\n                sumOfSquares += Math.pow(matrix.getEntry(i, j), 2);\n            }\n        }\n        System.out.println(\"Sum of squares of matrix elements: \" + sumOfSquares);\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an instance of RealMatrixChangingVisitor\n        RealMatrixChangingVisitor visitor = new RealMatrixChangingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n                sum = 0;\n            }\n\n            @Override\n            public double visit(int row, int column, double value) {\n                /* write */ sum += value; // Visiting each element and performing a write operation\n                return sum;\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // Reading the result of the visit operation\n            }\n        };\n\n        // Simulating a matrix visit\n        visitor.start(3, 3, 0, 2, 0, 2);\n        visitor.visit(0, 0, 1.0);\n        visitor.visit(0, 1, 2.0);\n        visitor.visit(0, 2, 3.0);\n        visitor.visit(1, 0, 4.0);\n        visitor.visit(1, 1, 5.0);\n        visitor.visit(1, 2, 6.0);\n        visitor.visit(2, 0, 7.0);\n        visitor.visit(2, 1, 8.0);\n        visitor.visit(2, 2, 9.0);\n\n        // Reading the result of the visit operation\n        double result = visitor.end();\n        System.out.println(\"Sum of matrix elements: \" + result);\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.RealMatrixChangingVisitor",
        "read_method": "end"
    }
}