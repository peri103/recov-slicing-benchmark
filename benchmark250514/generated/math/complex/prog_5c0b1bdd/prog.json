{
    "java_code": "import org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a DefaultRealMatrixPreservingVisitor instance\n        DefaultRealMatrixPreservingVisitor visitor = new DefaultRealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value; // Visit method to accumulate the sum\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // End method to return the accumulated sum\n            }\n        };\n\n        // Simulate visiting some matrix values\n        visitor.visit(0, 0, 1.0);\n        visitor.visit(0, 1, 2.0);\n        visitor.visit(1, 0, 3.0);\n        visitor.visit(1, 1, 4.0);\n\n        // Additional complex code\n        ArrayList<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        stringList.add(\"!\");\n\n        HashMap<String, Integer> wordCount = new HashMap<>();\n        for (String word : stringList) {\n            wordCount.put(word, word.length());\n        }\n\n        // Print the word lengths\n        for (String key : wordCount.keySet()) {\n            System.out.println(\"Word: \" + key + \", Length: \" + wordCount.get(key));\n        }\n\n        // Perform some unrelated arithmetic operations\n        int a = 5;\n        int b = 10;\n        int c = a * b;\n        int d = c + a;\n        System.out.println(\"Arithmetic Result: \" + d);\n\n        // Retrieve the result using the end method\n        double result = visitor.end();\n        System.out.println(\"Matrix Sum: \" + result); // Output the result\n    }\n}",
    "java_code_simple": "import org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a DefaultRealMatrixPreservingVisitor instance\n        DefaultRealMatrixPreservingVisitor visitor = new DefaultRealMatrixPreservingVisitor() {\n            private double sum = 0;\n\n            @Override\n            public void visit(int row, int column, double value) {\n                /* write */ sum += value; // Visit method to accumulate the sum\n            }\n\n            @Override\n            public double end() {\n                /* read */ return sum; // End method to return the accumulated sum\n            }\n        };\n\n        // Simulate visiting some matrix values\n        visitor.visit(0, 0, 1.0);\n        visitor.visit(0, 1, 2.0);\n        visitor.visit(1, 0, 3.0);\n        visitor.visit(1, 1, 4.0);\n\n        // Retrieve the result using the end method\n        double result = visitor.end();\n        System.out.println(result); // Output the result\n    }\n}",
    "pair": {
        "write_class": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor",
        "write_method": "visit",
        "read_class": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor",
        "read_method": "end"
    }
}