{"id": 1, "code": "public class AddBoldTag {\npublic String addBoldTag(String s, String[] dict) {\nint n = s.length();\nchar[] ss = s.toCharArray();\nint[] imos = new int[n+1];\nfor(String d : dict){\nchar[] q = d.toCharArray();\nint[] kmp = kmpTable(q);\nint p = 0;\nfor(int i = 0;i < ss.length;i++){\nwhile(p >= 0 && q[p] != ss[i])p = kmp[p];\nif(++p == q.length){\nimos[i-q.length+1]++;\nimos[i+1]--;\np = kmp[p];\n}\n}\n}\nfor(int i = 0;i < n;i++)imos[i+1] += imos[i];\nStringBuilder sb = new StringBuilder();\nStringBuilder temp = new StringBuilder();\nfor(int i = 0;i < n;i++){\nif(imos[i] > 0){\ntemp.append(ss[i]);\n}else{\nif(temp.length() > 0){\nsb.append(\"<b>\");\nsb.append(temp);\nsb.append(\"</b>\");\ntemp = new StringBuilder();\n}\nsb.append(ss[i]);\n}\n}\nif(temp.length() > 0){\nsb.append(\"<b>\");\nsb.append(temp);\nsb.append(\"</b>\");\n}\nreturn sb.toString();\n}\n\npublic int[] kmpTable(char[] str)\n{\nint n = str.length;\nint[] kmp = new int[n+1];\nkmp[0] = -1; kmp[1] = 0;\nfor(int i = 2, j = 0;i <= n;i++){\nwhile(j > 0 && str[i-1] != str[j])j = kmp[j];\nkmp[i] = str[i-1] == str[j] ? ++j : 0;\n}\nreturn kmp;\n}\npublic static void main(String[] args) {\nString input = \"The quick brown fox jumps over the lazy dog\";\nString[] dict = {\"quick\", \"fox\", \"lazy\"};\n\nAddBoldTag instance = new AddBoldTag();\nString result = instance.addBoldTag(input, dict);\n\nSystem.out.println(result);\n}\n}\n", "code_tokens": ["<0>", "public", "Ġclass", "ĠAdd", "B", "old", "Tag", "Ġ{", "<1>", "public", "ĠString", "Ġadd", "B", "old", "Tag", "(", "String", "Ġs", ",", "ĠString", "[]", "Ġdict", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġs", ".", "length", "();", "<3>", "char", "[]", "Ġss", "Ġ=", "Ġs", ".", "to", "Char", "Array", "();", "<4>", "int", "[]", "Ġim", "os", "Ġ=", "Ġnew", "Ġint", "[", "n", "+", "1", "];", "<5>", "for", "(", "String", "Ġd", "Ġ:", "Ġdict", "){", "<6>", "char", "[]", "Ġq", "Ġ=", "Ġd", ".", "to", "Char", "Array", "();", "<7>", "int", "[]", "Ġk", "mp", "Ġ=", "Ġk", "mp", "Table", "(", "q", ");", "<8>", "int", "Ġp", "Ġ=", "Ġ0", ";", "<9>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġss", ".", "length", ";", "i", "++", "){", "<10>", "while", "(", "p", "Ġ>=", "Ġ0", "Ġ&&", "Ġq", "[", "p", "]", "Ġ!=", "Ġss", "[", "i", "])", "p", "Ġ=", "Ġk", "mp", "[", "p", "];", "<11>", "if", "(", "++", "p", "Ġ==", "Ġq", ".", "length", "){", "<12>", "im", "os", "[", "i", "-", "q", ".", "length", "+", "1", "]", "++;", "<13>", "im", "os", "[", "i", "+", "1", "]", "--", ";", "<14>", "p", "Ġ=", "Ġk", "mp", "[", "p", "];", "<15>", "}", "<16>", "}", "<17>", "}", "<18>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++)", "im", "os", "[", "i", "+", "1", "]", "Ġ+=", "Ġim", "os", "[", "i", "];", "<19>", "String", "Builder", "Ġs", "b", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<20>", "String", "Builder", "Ġtemp", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<21>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<22>", "if", "(", "im", "os", "[", "i", "]", "Ġ>", "Ġ0", "){", "<23>", "temp", ".", "append", "(", "ss", "[", "i", "]);", "<24>", "}", "else", "{", "<25>", "if", "(", "temp", ".", "length", "()", "Ġ>", "Ġ0", "){", "<26>", "sb", ".", "append", "(\"", "<", "b", ">", "\");", "<27>", "sb", ".", "append", "(", "temp", ");", "<28>", "sb", ".", "append", "(\"", "</", "b", ">", "\");", "<29>", "temp", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<30>", "}", "<31>", "sb", ".", "append", "(", "ss", "[", "i", "]);", "<32>", "}", "<33>", "}", "<34>", "if", "(", "temp", ".", "length", "()", "Ġ>", "Ġ0", "){", "<35>", "sb", ".", "append", "(\"", "<", "b", ">", "\");", "<36>", "sb", ".", "append", "(", "temp", ");", "<37>", "sb", ".", "append", "(\"", "</", "b", ">", "\");", "<38>", "}", "<39>", "return", "Ġs", "b", ".", "to", "String", "();", "<40>", "}", "<41>", "<42>", "public", "Ġint", "[]", "Ġk", "mp", "Table", "(", "char", "[]", "Ġstr", ")", "<43>", "{", "<44>", "int", "Ġn", "Ġ=", "Ġstr", ".", "length", ";", "<45>", "int", "[]", "Ġk", "mp", "Ġ=", "Ġnew", "Ġint", "[", "n", "+", "1", "];", "<46>", "k", "mp", "[", "0", "]", "Ġ=", "Ġ-", "1", ";", "Ġk", "mp", "[", "1", "]", "Ġ=", "Ġ0", ";", "<47>", "for", "(", "int", "Ġi", "Ġ=", "Ġ2", ",", "Ġj", "Ġ=", "Ġ0", ";", "i", "Ġ<=", "Ġn", ";", "i", "++", "){", "<48>", "while", "(", "j", "Ġ>", "Ġ0", "Ġ&&", "Ġstr", "[", "i", "-", "1", "]", "Ġ!=", "Ġstr", "[", "j", "])", "j", "Ġ=", "Ġk", "mp", "[", "j", "];", "<49>", "k", "mp", "[", "i", "]", "Ġ=", "Ġstr", "[", "i", "-", "1", "]", "Ġ==", "Ġstr", "[", "j", "]", "Ġ?", "Ġ++", "j", "Ġ:", "Ġ0", ";", "<50>", "}", "<51>", "return", "Ġk", "mp", ";", "<52>", "}", "<53>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<54>", "String", "Ġinput", "Ġ=", "Ġ\"", "The", "Ġquick", "Ġbrown", "Ġfox", "Ġjumps", "Ġover", "Ġthe", "Ġlazy", "Ġdog", "\";", "<55>", "String", "[]", "Ġdict", "Ġ=", "Ġ{\"", "quick", "\",", "Ġ\"", "fox", "\",", "Ġ\"", "l", "azy", "\"", "};", "<56>", "<57>", "Add", "B", "old", "Tag", "Ġinstance", "Ġ=", "Ġnew", "ĠAdd", "B", "old", "Tag", "();", "<58>", "String", "Ġresult", "Ġ=", "Ġinstance", ".", "add", "B", "old", "Tag", "(", "input", ",", "Ġdict", ");", "<59>", "<60>", "System", ".", "out", ".", "println", "(", "result", ");", "<61>", "}", "<62>", "}", "<63>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"59": [[12, 6, 6], [13]]}}
{"id": 2, "code": "import java.util.*;\n\nclass AssignBikes {\n\nprivate static class Position {\npublic int x , y;\npublic Position(int x , int y) {\nthis.x = x;\nthis.y = y;\n}\n}\n\nprivate int ans = - 1;\nprivate boolean[] vis = new boolean[20];\n\npublic int assignBikes(int[][] workers, int[][] bikes) {\nList<Position> list1 = new ArrayList<>();\nList<Position> list2 = new ArrayList<>();\nfor (int[] pos : workers) {\nlist1.add(new Position(pos[0] , pos[1]));\n}\nfor (int[] pos : bikes) {\nlist2.add(new Position(pos[0] , pos[1]));\n}\nbacktracking(list1 , 0 , list2 , 0);\nreturn ans;\n}\n\nprivate int getDist(Position pos1 , Position pos2) {\nreturn Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\n}\n\nprivate void backtracking(List<Position> list1 , int current , List<Position> list2 , int dist) {\nif (current == list1.size()) {\nif (dist < ans || ans < 0) {\nans = dist;\n}\n} else {\nfor (int i = 0;i < list2.size();i ++) {\nif (!vis[i]) {\nvis[i] = true;\nbacktracking(list1 , current + 1 , list2 , dist + getDist(list1.get(current) , list2.get(i)));\nvis[i] = false;\n}\n}\n}\n}\n\npublic static void main(String[] args) {\nint[][] workers = {{0, 0}, {2, 1}};\nint[][] bikes = {{1, 2}, {3, 3}};\n\nAssignBikes assignBikes = new AssignBikes();\nint result = assignBikes.assignBikes(workers, bikes);\n\nSystem.out.println(\"Minimum Distance: \" + result);\n}\n\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠAss", "ign", "B", "ikes", "Ġ{", "<3>", "<4>", "private", "Ġstatic", "Ġclass", "ĠPosition", "Ġ{", "<5>", "public", "Ġint", "Ġx", "Ġ,", "Ġy", ";", "<6>", "public", "ĠPosition", "(", "int", "Ġx", "Ġ,", "Ġint", "Ġy", ")", "Ġ{", "<7>", "this", ".", "x", "Ġ=", "Ġx", ";", "<8>", "this", ".", "y", "Ġ=", "Ġy", ";", "<9>", "}", "<10>", "}", "<11>", "<12>", "private", "Ġint", "Ġans", "Ġ=", "Ġ-", "Ġ1", ";", "<13>", "private", "Ġboolean", "[]", "Ġvis", "Ġ=", "Ġnew", "Ġboolean", "[", "20", "];", "<14>", "<15>", "public", "Ġint", "Ġassign", "B", "ikes", "(", "int", "[", "][", "]", "Ġworkers", ",", "Ġint", "[", "][", "]", "Ġbikes", ")", "Ġ{", "<16>", "List", "<", "Position", ">", "Ġlist", "1", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<17>", "List", "<", "Position", ">", "Ġlist", "2", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<18>", "for", "Ġ(", "int", "[]", "Ġpos", "Ġ:", "Ġworkers", ")", "Ġ{", "<19>", "list", "1", ".", "add", "(", "new", "ĠPosition", "(", "pos", "[", "0", "]", "Ġ,", "Ġpos", "[", "1", "])", ");", "<20>", "}", "<21>", "for", "Ġ(", "int", "[]", "Ġpos", "Ġ:", "Ġbikes", ")", "Ġ{", "<22>", "list", "2", ".", "add", "(", "new", "ĠPosition", "(", "pos", "[", "0", "]", "Ġ,", "Ġpos", "[", "1", "])", ");", "<23>", "}", "<24>", "back", "tracking", "(", "list", "1", "Ġ,", "Ġ0", "Ġ,", "Ġlist", "2", "Ġ,", "Ġ0", ");", "<25>", "return", "Ġans", ";", "<26>", "}", "<27>", "<28>", "private", "Ġint", "Ġget", "Dist", "(", "Position", "Ġpos", "1", "Ġ,", "ĠPosition", "Ġpos", "2", ")", "Ġ{", "<29>", "return", "ĠMath", ".", "abs", "(", "pos", "1", ".", "x", "Ġ-", "Ġpos", "2", ".", "x", ")", "Ġ+", "ĠMath", ".", "abs", "(", "pos", "1", ".", "y", "Ġ-", "Ġpos", "2", ".", "y", ");", "<30>", "}", "<31>", "<32>", "private", "Ġvoid", "Ġback", "tracking", "(", "List", "<", "Position", ">", "Ġlist", "1", "Ġ,", "Ġint", "Ġcurrent", "Ġ,", "ĠList", "<", "Position", ">", "Ġlist", "2", "Ġ,", "Ġint", "Ġdist", ")", "Ġ{", "<33>", "if", "Ġ(", "current", "Ġ==", "Ġlist", "1", ".", "size", "())", "Ġ{", "<34>", "if", "Ġ(", "dist", "Ġ<", "Ġans", "Ġ||", "Ġans", "Ġ<", "Ġ0", ")", "Ġ{", "<35>", "ans", "Ġ=", "Ġdist", ";", "<36>", "}", "<37>", "}", "Ġelse", "Ġ{", "<38>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġlist", "2", ".", "size", "();", "i", "Ġ++", ")", "Ġ{", "<39>", "if", "Ġ(!", "vis", "[", "i", "])", "Ġ{", "<40>", "vis", "[", "i", "]", "Ġ=", "Ġtrue", ";", "<41>", "back", "tracking", "(", "list", "1", "Ġ,", "Ġcurrent", "Ġ+", "Ġ1", "Ġ,", "Ġlist", "2", "Ġ,", "Ġdist", "Ġ+", "Ġget", "Dist", "(", "list", "1", ".", "get", "(", "current", ")", "Ġ,", "Ġlist", "2", ".", "get", "(", "i", "))", ");", "<42>", "vis", "[", "i", "]", "Ġ=", "Ġfalse", ";", "<43>", "}", "<44>", "}", "<45>", "}", "<46>", "}", "<47>", "<48>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<49>", "int", "[", "][", "]", "Ġworkers", "Ġ=", "Ġ{{", "0", ",", "Ġ0", "},", "Ġ{", "2", ",", "Ġ1", "}}", ";", "<50>", "int", "[", "][", "]", "Ġbikes", "Ġ=", "Ġ{{", "1", ",", "Ġ2", "},", "Ġ{", "3", ",", "Ġ3", "}}", ";", "<51>", "<52>", "Ass", "ign", "B", "ikes", "Ġassign", "B", "ikes", "Ġ=", "Ġnew", "ĠAss", "ign", "B", "ikes", "();", "<53>", "int", "Ġresult", "Ġ=", "Ġassign", "B", "ikes", ".", "ass", "ign", "B", "ikes", "(", "workers", ",", "Ġbikes", ");", "<54>", "<55>", "System", ".", "out", ".", "println", "(\"", "Minimum", "ĠDistance", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<56>", "}", "<57>", "<58>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"54": [[14, 0], [10]]}}
{"id": 3, "code": "import java.util.*;\n\nclass AsteroidCollision {\npublic int[] asteroidCollision(int[] as) {\nint n = as.length;\nLST lst = new LST(n);\nlst.setRange(n);\nQueue<Integer> q = new ArrayDeque<>();\nfor(int i = 0;i < n-1;i++){\nif(as[i] > 0 && as[i+1] < 0){\nq.add(i);\n}\n}\nwhile(!q.isEmpty()){\nint cur = q.poll();\nint l = lst.prev(cur);\nint r = lst.next(cur+1);\nif(l != -1 && r != -1 &&\nas[l] > 0 && as[r] < 0\n){\nboolean ch = false;\nif(Math.abs(as[l]) >= Math.abs(as[r])){\nlst.unset(r);\nch = true;\n}\nif(Math.abs(as[r]) >= Math.abs(as[l])){\nlst.unset(l);\nch = true;\n}\nif(ch){\nq.add(cur);\n}\n}\n}\nint[] ret = new int[n];\nint p = 0;\nfor(int i = lst.next(0);i != -1;lst.unset(i), i = lst.next(0)){\nret[p++] = as[i];\n}\nreturn Arrays.copyOf(ret, p);\n}\n\nclass LST {\npublic long[][] set;\npublic int n;\n\npublic LST(int n) {\nthis.n = n;\nint d = 1;\nfor(int m = n;m > 1;m>>>=6, d++);\n\nset = new long[d][];\nfor(int i = 0, m = n>>>6;i < d;i++, m>>>=6){\nset[i] = new long[m+1];\n}\n}\n\npublic LST setRange(int r)\n{\nfor(int i = 0;i < set.length;i++, r=r+63>>>6){\nfor(int j = 0;j < r>>>6;j++){\nset[i][j] = -1L;\n}\nif((r&63) != 0)set[i][r>>>6] |= (1L<<r)-1;\n}\nreturn this;\n}\n\npublic LST unsetRange(int r)\n{\nif(r >= 0){\nfor(int i = 0;i < set.length;i++, r=r+63>>>6){\nfor(int j = 0;j < r+63>>>6;j++){\nset[i][j] = 0;\n}\nif((r&63) != 0)set[i][r>>>6] &= ~((1L<<r)-1);\n}\n}\nreturn this;\n}\n\npublic LST set(int pos)\n{\nif(pos >= 0 && pos < n){\nfor(int i = 0;i < set.length;i++, pos>>>=6){\nset[i][pos>>>6] |= 1L<<pos;\n}\n}\nreturn this;\n}\n\npublic LST unset(int pos)\n{\nif(pos >= 0 && pos < n){\nfor(int i = 0;i < set.length && (i == 0 || set[i-1][pos] == 0L);i++, pos>>>=6){\nset[i][pos>>>6] &= ~(1L<<pos);\n}\n}\nreturn this;\n}\n\npublic boolean get(int pos)\n{\nreturn pos >= 0 && pos < n && set[0][pos>>>6]<<~pos<0;\n}\n\npublic int prev(int pos)\n{\nfor(int i = 0;i < set.length && pos >= 0;i++, pos>>>=6, pos--){\nint pre = prev(set[i][pos>>>6], pos&63);\nif(pre != -1){\npos = pos>>>6<<6|pre;\nwhile(i > 0)pos = pos<<6|63-Long.numberOfLeadingZeros(set[--i][pos]);\nreturn pos;\n}\n}\nreturn -1;\n}\n\npublic int next(int pos)\n{\nfor(int i = 0;i < set.length && pos>>>6 < set[i].length;i++, pos>>>=6, pos++){\nint nex = next(set[i][pos>>>6], pos&63);\nif(nex != -1){\npos = pos>>>6<<6|nex;\nwhile(i > 0)pos = pos<<6|Long.numberOfTrailingZeros(set[--i][pos]);\nreturn pos;\n}\n}\nreturn -1;\n}\n\nprivate int prev(long set, int n)\n{\nlong h = Long.highestOneBit(set<<~n);\nif(h == 0L)return -1;\nreturn Long.numberOfTrailingZeros(h)-(63-n);\n}\n\nprivate int next(long set, int n)\n{\nlong h = Long.lowestOneBit(set>>>n);\nif(h == 0L)return -1;\nreturn Long.numberOfTrailingZeros(h)+n;\n}\n\n@Override\npublic String toString()\n{\nList<Integer> list = new ArrayList<Integer>();\nfor(int pos = next(0);pos != -1;pos = next(pos+1)){\nlist.add(pos);\n}\nreturn list.toString();\n}\n}\npublic static void main(String[] args) {\nint[] asteroids = {5, 10, -5};\nAsteroidCollision collision = new AsteroidCollision();\nint[] result = collision.asteroidCollision(asteroids);\nSystem.out.println(Arrays.toString(result));\n}\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠAster", "oid", "Coll", "ision", "Ġ{", "<3>", "public", "Ġint", "[]", "Ġasteroid", "Coll", "ision", "(", "int", "[]", "Ġas", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġas", ".", "length", ";", "<5>", "L", "ST", "Ġl", "st", "Ġ=", "Ġnew", "ĠL", "ST", "(", "n", ");", "<6>", "l", "st", ".", "set", "Range", "(", "n", ");", "<7>", "Queue", "<", "Integer", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<8>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", "-", "1", ";", "i", "++", "){", "<9>", "if", "(", "as", "[", "i", "]", "Ġ>", "Ġ0", "Ġ&&", "Ġas", "[", "i", "+", "1", "]", "Ġ<", "Ġ0", "){", "<10>", "q", ".", "add", "(", "i", ");", "<11>", "}", "<12>", "}", "<13>", "while", "(", "!", "q", ".", "is", "Empty", "()", "){", "<14>", "int", "Ġcur", "Ġ=", "Ġq", ".", "poll", "();", "<15>", "int", "Ġl", "Ġ=", "Ġl", "st", ".", "prev", "(", "cur", ");", "<16>", "int", "Ġr", "Ġ=", "Ġl", "st", ".", "next", "(", "cur", "+", "1", ");", "<17>", "if", "(", "l", "Ġ!=", "Ġ-", "1", "Ġ&&", "Ġr", "Ġ!=", "Ġ-", "1", "Ġ&&", "<18>", "as", "[", "l", "]", "Ġ>", "Ġ0", "Ġ&&", "Ġas", "[", "r", "]", "Ġ<", "Ġ0", "<19>", "){", "<20>", "bo", "olean", "Ġch", "Ġ=", "Ġfalse", ";", "<21>", "if", "(", "Math", ".", "abs", "(", "as", "[", "l", "])", "Ġ>=", "ĠMath", ".", "abs", "(", "as", "[", "r", "]", "))", "{", "<22>", "l", "st", ".", "un", "set", "(", "r", ");", "<23>", "ch", "Ġ=", "Ġtrue", ";", "<24>", "}", "<25>", "if", "(", "Math", ".", "abs", "(", "as", "[", "r", "])", "Ġ>=", "ĠMath", ".", "abs", "(", "as", "[", "l", "]", "))", "{", "<26>", "l", "st", ".", "un", "set", "(", "l", ");", "<27>", "ch", "Ġ=", "Ġtrue", ";", "<28>", "}", "<29>", "if", "(", "ch", "){", "<30>", "q", ".", "add", "(", "cur", ");", "<31>", "}", "<32>", "}", "<33>", "}", "<34>", "int", "[]", "Ġret", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<35>", "int", "Ġp", "Ġ=", "Ġ0", ";", "<36>", "for", "(", "int", "Ġi", "Ġ=", "Ġl", "st", ".", "next", "(", "0", ");", "i", "Ġ!=", "Ġ-", "1", ";", "l", "st", ".", "un", "set", "(", "i", "),", "Ġi", "Ġ=", "Ġl", "st", ".", "next", "(", "0", "))", "{", "<37>", "ret", "[", "p", "++", "]", "Ġ=", "Ġas", "[", "i", "];", "<38>", "}", "<39>", "return", "ĠAr", "rays", ".", "copy", "Of", "(", "ret", ",", "Ġp", ");", "<40>", "}", "<41>", "<42>", "class", "ĠL", "ST", "Ġ{", "<43>", "public", "Ġlong", "[", "][", "]", "Ġset", ";", "<44>", "public", "Ġint", "Ġn", ";", "<45>", "<46>", "public", "ĠL", "ST", "(", "int", "Ġn", ")", "Ġ{", "<47>", "this", ".", "n", "Ġ=", "Ġn", ";", "<48>", "int", "Ġd", "Ġ=", "Ġ1", ";", "<49>", "for", "(", "int", "Ġm", "Ġ=", "Ġn", ";", "m", "Ġ>", "Ġ1", ";", "m", ">>>", "=", "6", ",", "Ġd", "++", ");", "<50>", "<51>", "set", "Ġ=", "Ġnew", "Ġlong", "[", "d", "][", "];", "<52>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ",", "Ġm", "Ġ=", "Ġn", ">>>", "6", ";", "i", "Ġ<", "Ġd", ";", "i", "++", ",", "Ġm", ">>>", "=", "6", "){", "<53>", "set", "[", "i", "]", "Ġ=", "Ġnew", "Ġlong", "[", "m", "+", "1", "];", "<54>", "}", "<55>", "}", "<56>", "<57>", "public", "ĠL", "ST", "Ġset", "Range", "(", "int", "Ġr", ")", "<58>", "{", "<59>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġset", ".", "length", ";", "i", "++", ",", "Ġr", "=", "r", "+", "63", ">>>", "6", "){", "<60>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġr", ">>>", "6", ";", "j", "++", "){", "<61>", "set", "[", "i", "][", "j", "]", "Ġ=", "Ġ-", "1", "L", ";", "<62>", "}", "<63>", "if", "((", "r", "&", "63", ")", "Ġ!=", "Ġ0", ")", "set", "[", "i", "][", "r", ">>>", "6", "]", "Ġ|", "=", "Ġ(", "1", "L", "<<", "r", ")-", "1", ";", "<64>", "}", "<65>", "return", "Ġthis", ";", "<66>", "}", "<67>", "<68>", "public", "ĠL", "ST", "Ġun", "set", "Range", "(", "int", "Ġr", ")", "<69>", "{", "<70>", "if", "(", "r", "Ġ>=", "Ġ0", "){", "<71>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġset", ".", "length", ";", "i", "++", ",", "Ġr", "=", "r", "+", "63", ">>>", "6", "){", "<72>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġr", "+", "63", ">>>", "6", ";", "j", "++", "){", "<73>", "set", "[", "i", "][", "j", "]", "Ġ=", "Ġ0", ";", "<74>", "}", "<75>", "if", "((", "r", "&", "63", ")", "Ġ!=", "Ġ0", ")", "set", "[", "i", "][", "r", ">>>", "6", "]", "Ġ&", "=", "Ġ~", "((", "1", "L", "<<", "r", ")-", "1", ");", "<76>", "}", "<77>", "}", "<78>", "return", "Ġthis", ";", "<79>", "}", "<80>", "<81>", "public", "ĠL", "ST", "Ġset", "(", "int", "Ġpos", ")", "<82>", "{", "<83>", "if", "(", "pos", "Ġ>=", "Ġ0", "Ġ&&", "Ġpos", "Ġ<", "Ġn", "){", "<84>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġset", ".", "length", ";", "i", "++", ",", "Ġpos", ">>>", "=", "6", "){", "<85>", "set", "[", "i", "][", "pos", ">>>", "6", "]", "Ġ|", "=", "Ġ1", "L", "<<", "pos", ";", "<86>", "}", "<87>", "}", "<88>", "return", "Ġthis", ";", "<89>", "}", "<90>", "<91>", "public", "ĠL", "ST", "Ġun", "set", "(", "int", "Ġpos", ")", "<92>", "{", "<93>", "if", "(", "pos", "Ġ>=", "Ġ0", "Ġ&&", "Ġpos", "Ġ<", "Ġn", "){", "<94>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġset", ".", "length", "Ġ&&", "Ġ(", "i", "Ġ==", "Ġ0", "Ġ||", "Ġset", "[", "i", "-", "1", "][", "pos", "]", "Ġ==", "Ġ0", "L", ");", "i", "++", ",", "Ġpos", ">>>", "=", "6", "){", "<95>", "set", "[", "i", "][", "pos", ">>>", "6", "]", "Ġ&", "=", "Ġ~", "(", "1", "L", "<<", "pos", ");", "<96>", "}", "<97>", "}", "<98>", "return", "Ġthis", ";", "<99>", "}", "<100>", "<101>", "public", "Ġboolean", "Ġget", "(", "int", "Ġpos", ")", "<102>", "{", "<103>", "return", "Ġpos", "Ġ>=", "Ġ0", "Ġ&&", "Ġpos", "Ġ<", "Ġn", "Ġ&&", "Ġset", "[", "0", "][", "pos", ">>>", "6", "]", "<<", "~", "pos", "<", "0", ";", "<104>", "}", "<105>", "<106>", "public", "Ġint", "Ġprev", "(", "int", "Ġpos", ")", "<107>", "{", "<108>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġset", ".", "length", "Ġ&&", "Ġpos", "Ġ>=", "Ġ0", ";", "i", "++", ",", "Ġpos", ">>>", "=", "6", ",", "Ġpos", "--", "){", "<109>", "int", "Ġpre", "Ġ=", "Ġprev", "(", "set", "[", "i", "][", "pos", ">>>", "6", "],", "Ġpos", "&", "63", ");", "<110>", "if", "(", "pre", "Ġ!=", "Ġ-", "1", "){", "<111>", "pos", "Ġ=", "Ġpos", ">>>", "6", "<<", "6", "|", "pre", ";", "<112>", "while", "(", "i", "Ġ>", "Ġ0", ")", "pos", "Ġ=", "Ġpos", "<<", "6", "|", "63", "-", "Long", ".", "number", "Of", "Lead", "ing", "Z", "eros", "(", "set", "[", "--", "i", "][", "pos", "]);", "<113>", "return", "Ġpos", ";", "<114>", "}", "<115>", "}", "<116>", "return", "Ġ-", "1", ";", "<117>", "}", "<118>", "<119>", "public", "Ġint", "Ġnext", "(", "int", "Ġpos", ")", "<120>", "{", "<121>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġset", ".", "length", "Ġ&&", "Ġpos", ">>>", "6", "Ġ<", "Ġset", "[", "i", "].", "length", ";", "i", "++", ",", "Ġpos", ">>>", "=", "6", ",", "Ġpos", "++", "){", "<122>", "int", "Ġne", "x", "Ġ=", "Ġnext", "(", "set", "[", "i", "][", "pos", ">>>", "6", "],", "Ġpos", "&", "63", ");", "<123>", "if", "(", "nex", "Ġ!=", "Ġ-", "1", "){", "<124>", "pos", "Ġ=", "Ġpos", ">>>", "6", "<<", "6", "|", "nex", ";", "<125>", "while", "(", "i", "Ġ>", "Ġ0", ")", "pos", "Ġ=", "Ġpos", "<<", "6", "|", "Long", ".", "number", "Of", "Tra", "iling", "Z", "eros", "(", "set", "[", "--", "i", "][", "pos", "]);", "<126>", "return", "Ġpos", ";", "<127>", "}", "<128>", "}", "<129>", "return", "Ġ-", "1", ";", "<130>", "}", "<131>", "<132>", "private", "Ġint", "Ġprev", "(", "long", "Ġset", ",", "Ġint", "Ġn", ")", "<133>", "{", "<134>", "long", "Ġh", "Ġ=", "ĠLong", ".", "highest", "One", "Bit", "(", "set", "<<", "~", "n", ");", "<135>", "if", "(", "h", "Ġ==", "Ġ0", "L", ")", "return", "Ġ-", "1", ";", "<136>", "return", "ĠLong", ".", "number", "Of", "Tra", "iling", "Z", "eros", "(", "h", ")-", "(", "63", "-", "n", ");", "<137>", "}", "<138>", "<139>", "private", "Ġint", "Ġnext", "(", "long", "Ġset", ",", "Ġint", "Ġn", ")", "<140>", "{", "<141>", "long", "Ġh", "Ġ=", "ĠLong", ".", "low", "est", "One", "Bit", "(", "set", ">>>", "n", ");", "<142>", "if", "(", "h", "Ġ==", "Ġ0", "L", ")", "return", "Ġ-", "1", ";", "<143>", "return", "ĠLong", ".", "number", "Of", "Tra", "iling", "Z", "eros", "(", "h", ")+", "n", ";", "<144>", "}", "<145>", "<146>", "@", "Override", "<147>", "public", "ĠString", "Ġto", "String", "()", "<148>", "{", "<149>", "List", "<", "Integer", ">", "Ġlist", "Ġ=", "Ġnew", "ĠArray", "List", "<", "Integer", ">", "();", "<150>", "for", "(", "int", "Ġpos", "Ġ=", "Ġnext", "(", "0", ");", "pos", "Ġ!=", "Ġ-", "1", ";", "pos", "Ġ=", "Ġnext", "(", "pos", "+", "1", "))", "{", "<151>", "list", ".", "add", "(", "pos", ");", "<152>", "}", "<153>", "return", "Ġlist", ".", "to", "String", "();", "<154>", "}", "<155>", "}", "<156>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<157>", "int", "[]", "Ġasteroids", "Ġ=", "Ġ{", "5", ",", "Ġ10", ",", "Ġ-", "5", "};", "<158>", "A", "ster", "oid", "Coll", "ision", "Ġcollision", "Ġ=", "Ġnew", "ĠAster", "oid", "Coll", "ision", "();", "<159>", "int", "[]", "Ġresult", "Ġ=", "Ġcollision", ".", "aster", "oid", "Coll", "ision", "(", "aster", "oids", ");", "<160>", "System", ".", "out", ".", "println", "(", "Ar", "rays", ".", "to", "String", "(", "result", "));", "<161>", "}", "<162>", "<163>", "}", "<164>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"166": [[1, 13, 2], [1, 4, 7]]}}
{"id": 4, "code": "class BestRotation {\npublic int bestRotation(int[] A) {\nint[] scoreIncrease = new int[A.length + 1];\nfor (int i = 0; i < A.length; i++) {\nint v = A[i];\nif (i - v >= 0) {\nscoreIncrease[0]++;\nscoreIncrease[i - v + 1]--;\n}\nscoreIncrease[i + 1]++;\nif (i + A.length - v + 1 <= A.length) scoreIncrease[i + A.length - v + 1]--;\n}\nint maxScore = 0;\nint bestK = 0;\nint K = -1;\nint score = 0;\nwhile (K < A.length) {\nK++;\nscore += scoreIncrease[K];\nif (score > maxScore) {\nmaxScore = score;\nbestK = K;\n}\n}\nreturn bestK;\n}\n\npublic static void main(String[] args) {\nint[] A = {2, 3, 1, 4, 0};\nBestRotation br = new BestRotation();\nint result = br.bestRotation(A);\nSystem.out.println(\"Best Rotation K: \" + result);\n}\n\n}", "code_tokens": ["<0>", "class", "ĠBest", "R", "otation", "Ġ{", "<1>", "public", "Ġint", "Ġbest", "R", "otation", "(", "int", "[]", "ĠA", ")", "Ġ{", "<2>", "int", "[]", "Ġscore", "Increase", "Ġ=", "Ġnew", "Ġint", "[", "A", ".", "length", "Ġ+", "Ġ1", "];", "<3>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "ĠA", ".", "length", ";", "Ġi", "++)", "Ġ{", "<4>", "int", "Ġv", "Ġ=", "ĠA", "[", "i", "];", "<5>", "if", "Ġ(", "i", "Ġ-", "Ġv", "Ġ>=", "Ġ0", ")", "Ġ{", "<6>", "score", "Increase", "[", "0", "]", "++;", "<7>", "score", "Increase", "[", "i", "Ġ-", "Ġv", "Ġ+", "Ġ1", "]", "--", ";", "<8>", "}", "<9>", "score", "Increase", "[", "i", "Ġ+", "Ġ1", "]", "++;", "<10>", "if", "Ġ(", "i", "Ġ+", "ĠA", ".", "length", "Ġ-", "Ġv", "Ġ+", "Ġ1", "Ġ<=", "ĠA", ".", "length", ")", "Ġscore", "Increase", "[", "i", "Ġ+", "ĠA", ".", "length", "Ġ-", "Ġv", "Ġ+", "Ġ1", "]", "--", ";", "<11>", "}", "<12>", "int", "Ġmax", "Score", "Ġ=", "Ġ0", ";", "<13>", "int", "Ġbest", "K", "Ġ=", "Ġ0", ";", "<14>", "int", "ĠK", "Ġ=", "Ġ-", "1", ";", "<15>", "int", "Ġscore", "Ġ=", "Ġ0", ";", "<16>", "while", "Ġ(", "K", "Ġ<", "ĠA", ".", "length", ")", "Ġ{", "<17>", "K", "++;", "<18>", "score", "Ġ+=", "Ġscore", "Increase", "[", "K", "];", "<19>", "if", "Ġ(", "score", "Ġ>", "Ġmax", "Score", ")", "Ġ{", "<20>", "max", "Score", "Ġ=", "Ġscore", ";", "<21>", "best", "K", "Ġ=", "ĠK", ";", "<22>", "}", "<23>", "}", "<24>", "return", "Ġbest", "K", ";", "<25>", "}", "<26>", "<27>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<28>", "int", "[]", "ĠA", "Ġ=", "Ġ{", "2", ",", "Ġ3", ",", "Ġ1", ",", "Ġ4", ",", "Ġ0", "};", "<29>", "Best", "R", "otation", "Ġbr", "Ġ=", "Ġnew", "ĠBest", "R", "otation", "();", "<30>", "int", "Ġresult", "Ġ=", "Ġbr", ".", "best", "R", "otation", "(", "A", ");", "<31>", "System", ".", "out", ".", "println", "(\"", "Best", "ĠR", "otation", "ĠK", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<32>", "}", "<33>", "<34>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"31": [[7, 10, 3], [13, 14]]}}
{"id": 5, "code": "import java.util.*;\n\npublic class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\nTreeNode(int x) { this.val = x; }\npublic static void main(String[] args) {\nTreeNode root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\nroot.left.left = new TreeNode(4);\nroot.left.right = new TreeNode(5);\nroot.right.left = new TreeNode(6);\n\nCBTInserter obj = new CBTInserter(root);\n\nSystem.out.println(\"Parent node after inserting 7: \" + obj.insert(7));  // Should insert 7 as the right child of node 3\nSystem.out.println(\"Parent node after inserting 8: \" + obj.insert(8));  // Should insert 8 as the left child of node 4\n\nTreeNode updatedRoot = obj.get_root();\nprintTree(updatedRoot);\n}\n\npublic static void printTree(TreeNode root) {\nQueue<TreeNode> queue = new LinkedList<>();\nqueue.add(root);\nwhile (!queue.isEmpty()) {\nTreeNode node = queue.poll();\nSystem.out.print(node.val + \" \");\nif (node.left != null) queue.add(node.left);\nif (node.right != null) queue.add(node.right);\n}\nSystem.out.println();\n}\n}\n\n\n\nclass CBTInserter {\nTreeNode root;\nint cnt;\nprivate int calc(TreeNode root) {\nif (root == null) {\nreturn 0;\n}\nreturn calc(root.left) + calc(root.right) + 1;\n}\npublic CBTInserter(TreeNode root) {\nthis.root = root;\ncnt = calc(root);\n}\n\npublic int insert(int v) {\nint cur = ++cnt;\nint ipos = 31;\nwhile ((cur & (1 << ipos)) == 0) {\nipos--;\n}\nipos--;\nTreeNode curNode = root;\nwhile (ipos > 0) {\nif ((cur & (1 << ipos)) == 0) {\ncurNode = curNode.left;\n} else {\ncurNode = curNode.right;\n}\nipos--;\n}\nif ((cur & (1 << ipos)) == 0) {\ncurNode.left = new TreeNode(v);\n} else {\ncurNode.right = new TreeNode(v);\n}\nreturn curNode.val;\n}\n\npublic TreeNode get_root() {\nreturn root;\n}\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠTree", "Node", "Ġ{", "<3>", "int", "Ġval", ";", "<4>", "Tree", "Node", "Ġleft", ";", "<5>", "Tree", "Node", "Ġright", ";", "<6>", "Tree", "Node", "(", "int", "Ġx", ")", "Ġ{", "Ġthis", ".", "val", "Ġ=", "Ġx", ";", "Ġ}", "<7>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<8>", "Tree", "Node", "Ġroot", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "1", ");", "<9>", "root", ".", "left", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "2", ");", "<10>", "root", ".", "right", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "3", ");", "<11>", "root", ".", "left", ".", "left", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "4", ");", "<12>", "root", ".", "left", ".", "right", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "5", ");", "<13>", "root", ".", "right", ".", "left", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "6", ");", "<14>", "<15>", "C", "BT", "In", "ser", "ter", "Ġobj", "Ġ=", "Ġnew", "ĠCB", "T", "In", "ser", "ter", "(", "root", ");", "<16>", "<17>", "System", ".", "out", ".", "println", "(\"", "Parent", "Ġnode", "Ġafter", "Ġinserting", "Ġ7", ":", "Ġ\"", "Ġ+", "Ġobj", ".", "insert", "(", "7", "));", "Ġ", "Ġ//", "ĠShould", "Ġinsert", "Ġ7", "Ġas", "Ġthe", "Ġright", "Ġchild", "Ġof", "Ġnode", "Ġ3", "<18>", "System", ".", "out", ".", "println", "(\"", "Parent", "Ġnode", "Ġafter", "Ġinserting", "Ġ8", ":", "Ġ\"", "Ġ+", "Ġobj", ".", "insert", "(", "8", "));", "Ġ", "Ġ//", "ĠShould", "Ġinsert", "Ġ8", "Ġas", "Ġthe", "Ġleft", "Ġchild", "Ġof", "Ġnode", "Ġ4", "<19>", "<20>", "Tree", "Node", "Ġupdated", "Root", "Ġ=", "Ġobj", ".", "get", "_", "root", "();", "<21>", "print", "Tree", "(", "updated", "Root", ");", "<22>", "}", "<23>", "<24>", "public", "Ġstatic", "Ġvoid", "Ġprint", "Tree", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<25>", "Queue", "<", "Tree", "Node", ">", "Ġqueue", "Ġ=", "Ġnew", "ĠLink", "ed", "List", "<", ">", "();", "<26>", "queue", ".", "add", "(", "root", ");", "<27>", "while", "Ġ(!", "queue", ".", "is", "Empty", "())", "Ġ{", "<28>", "Tree", "Node", "Ġnode", "Ġ=", "Ġqueue", ".", "poll", "();", "<29>", "System", ".", "out", ".", "print", "(", "node", ".", "val", "Ġ+", "Ġ\"", "Ġ\"", ");", "<30>", "if", "Ġ(", "node", ".", "left", "Ġ!=", "Ġnull", ")", "Ġqueue", ".", "add", "(", "node", ".", "left", ");", "<31>", "if", "Ġ(", "node", ".", "right", "Ġ!=", "Ġnull", ")", "Ġqueue", ".", "add", "(", "node", ".", "right", ");", "<32>", "}", "<33>", "System", ".", "out", ".", "println", "();", "<34>", "}", "<35>", "}", "<36>", "<37>", "<38>", "<39>", "class", "ĠCB", "T", "In", "ser", "ter", "Ġ{", "<40>", "Tree", "Node", "Ġroot", ";", "<41>", "int", "Ġc", "nt", ";", "<42>", "private", "Ġint", "Ġcalc", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<43>", "if", "Ġ(", "root", "Ġ==", "Ġnull", ")", "Ġ{", "<44>", "return", "Ġ0", ";", "<45>", "}", "<46>", "return", "Ġcalc", "(", "root", ".", "left", ")", "Ġ+", "Ġcalc", "(", "root", ".", "right", ")", "Ġ+", "Ġ1", ";", "<47>", "}", "<48>", "public", "ĠCB", "T", "In", "ser", "ter", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<49>", "this", ".", "root", "Ġ=", "Ġroot", ";", "<50>", "c", "nt", "Ġ=", "Ġcalc", "(", "root", ");", "<51>", "}", "<52>", "<53>", "public", "Ġint", "Ġinsert", "(", "int", "Ġv", ")", "Ġ{", "<54>", "int", "Ġcur", "Ġ=", "Ġ++", "c", "nt", ";", "<55>", "int", "Ġip", "os", "Ġ=", "Ġ31", ";", "<56>", "while", "Ġ((", "cur", "Ġ&", "Ġ(", "1", "Ġ<<", "Ġip", "os", "))", "Ġ==", "Ġ0", ")", "Ġ{", "<57>", "ip", "os", "--", ";", "<58>", "}", "<59>", "ip", "os", "--", ";", "<60>", "Tree", "Node", "Ġcur", "Node", "Ġ=", "Ġroot", ";", "<61>", "while", "Ġ(", "ip", "os", "Ġ>", "Ġ0", ")", "Ġ{", "<62>", "if", "Ġ((", "cur", "Ġ&", "Ġ(", "1", "Ġ<<", "Ġip", "os", "))", "Ġ==", "Ġ0", ")", "Ġ{", "<63>", "cur", "Node", "Ġ=", "Ġcur", "Node", ".", "left", ";", "<64>", "}", "Ġelse", "Ġ{", "<65>", "cur", "Node", "Ġ=", "Ġcur", "Node", ".", "right", ";", "<66>", "}", "<67>", "ip", "os", "--", ";", "<68>", "}", "<69>", "if", "Ġ((", "cur", "Ġ&", "Ġ(", "1", "Ġ<<", "Ġip", "os", "))", "Ġ==", "Ġ0", ")", "Ġ{", "<70>", "cur", "Node", ".", "left", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "v", ");", "<71>", "}", "Ġelse", "Ġ{", "<72>", "cur", "Node", ".", "right", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "v", ");", "<73>", "}", "<74>", "return", "Ġcur", "Node", ".", "val", ";", "<75>", "}", "<76>", "<77>", "public", "ĠTree", "Node", "Ġget", "_", "root", "()", "Ġ{", "<78>", "return", "Ġroot", ";", "<79>", "}", "<80>", "<81>", "}", "<82>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"78": [[10, 4, 1], [13, 15]]}}
{"id": 6, "code": "class Can {\npublic boolean can(int[] weights, int D, int cap) {\nint cd = 0;\nint ans = 1;\nfor (int i = 0; i < weights.length; i++) {\nif (cd + weights[i] > cap) {\nans++;\ncd = 0;\n}\ncd += weights[i];\n}\nreturn ans <= D;\n}\npublic int shipWithinDays(int[] weights, int D) {\nint lo = weights[0], hi = 0;\nfor (int i = 0; i < weights.length; i++) {\nlo = Math.max(weights[i], lo);\nhi += weights[i];\n}\nwhile (lo < hi) {\nint mid = (hi+lo)/2;\nif (can(weights, D, mid)) hi = mid;\nelse lo = mid+1;\n}\nreturn lo;\n}\npublic static void main(String[] args) {\nint[] weights = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint D = 5;\nCan canInstance = new Can();\nint result = canInstance.shipWithinDays(weights, D);\nSystem.out.println(\"Minimum capacity needed to ship within \" + D + \" days: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠCan", "Ġ{", "<1>", "public", "Ġboolean", "Ġcan", "(", "int", "[]", "Ġweights", ",", "Ġint", "ĠD", ",", "Ġint", "Ġcap", ")", "Ġ{", "<2>", "int", "Ġcd", "Ġ=", "Ġ0", ";", "<3>", "int", "Ġans", "Ġ=", "Ġ1", ";", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġweights", ".", "length", ";", "Ġi", "++)", "Ġ{", "<5>", "if", "Ġ(", "cd", "Ġ+", "Ġweights", "[", "i", "]", "Ġ>", "Ġcap", ")", "Ġ{", "<6>", "ans", "++;", "<7>", "cd", "Ġ=", "Ġ0", ";", "<8>", "}", "<9>", "cd", "Ġ+=", "Ġweights", "[", "i", "];", "<10>", "}", "<11>", "return", "Ġans", "Ġ<=", "ĠD", ";", "<12>", "}", "<13>", "public", "Ġint", "Ġship", "Within", "Days", "(", "int", "[]", "Ġweights", ",", "Ġint", "ĠD", ")", "Ġ{", "<14>", "int", "Ġlo", "Ġ=", "Ġweights", "[", "0", "],", "Ġhi", "Ġ=", "Ġ0", ";", "<15>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġweights", ".", "length", ";", "Ġi", "++)", "Ġ{", "<16>", "lo", "Ġ=", "ĠMath", ".", "max", "(", "weights", "[", "i", "],", "Ġlo", ");", "<17>", "hi", "Ġ+=", "Ġweights", "[", "i", "];", "<18>", "}", "<19>", "while", "Ġ(", "lo", "Ġ<", "Ġhi", ")", "Ġ{", "<20>", "int", "Ġmid", "Ġ=", "Ġ(", "hi", "+", "lo", ")/", "2", ";", "<21>", "if", "Ġ(", "can", "(", "weights", ",", "ĠD", ",", "Ġmid", "))", "Ġhi", "Ġ=", "Ġmid", ";", "<22>", "else", "Ġlo", "Ġ=", "Ġmid", "+", "1", ";", "<23>", "}", "<24>", "return", "Ġlo", ";", "<25>", "}", "<26>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<27>", "int", "[]", "Ġweights", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ3", ",", "Ġ4", ",", "Ġ5", ",", "Ġ6", ",", "Ġ7", ",", "Ġ8", ",", "Ġ9", ",", "Ġ10", "};", "<28>", "int", "ĠD", "Ġ=", "Ġ5", ";", "<29>", "Can", "Ġcan", "Instance", "Ġ=", "Ġnew", "ĠCan", "();", "<30>", "int", "Ġresult", "Ġ=", "Ġcan", "Instance", ".", "ship", "Within", "Days", "(", "weights", ",", "ĠD", ");", "<31>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġcapacity", "Ġneeded", "Ġto", "Ġship", "Ġwithin", "Ġ\"", "Ġ+", "ĠD", "Ġ+", "Ġ\"", "Ġdays", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<32>", "}", "<33>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"31": [[2], [1]]}}
{"id": 7, "code": "class CanTransform {\npublic boolean canTransform(String start, String end) {\nif(!start.replace(\"X\", \"\").equals(end.replace(\"X\", \"\")))return false;\nint n = start.length();\nint p = 0;\nfor(int i = 0;i < n;i++){\nif(start.charAt(i) != 'X'){\nwhile(p < n && end.charAt(p) == 'X'){\np++;\n}\nif(start.charAt(i) == 'R'){\nif(i > p)return false;\n}else{\nif(i < p)return false;\n}\np++;\n}\n}\nreturn true;\n}\npublic static void main(String[] args) {\nString start = \"RXXLRXRXL\";\nString end = \"XRLXXRRLX\";\n\nCanTransform canTransformInstance = new CanTransform();\nboolean result = canTransformInstance.canTransform(start, end);\n\nSystem.out.println(\"Can transform: \" + result);\n}\n}\n", "code_tokens": ["<0>", "class", "ĠCan", "Transform", "Ġ{", "<1>", "public", "Ġboolean", "Ġcan", "Transform", "(", "String", "Ġstart", ",", "ĠString", "Ġend", ")", "Ġ{", "<2>", "if", "(", "!", "start", ".", "replace", "(\"", "X", "\",", "Ġ\"", "\").", "equ", "als", "(", "end", ".", "replace", "(\"", "X", "\",", "Ġ\"\"", ")))", "return", "Ġfalse", ";", "<3>", "int", "Ġn", "Ġ=", "Ġstart", ".", "length", "();", "<4>", "int", "Ġp", "Ġ=", "Ġ0", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<6>", "if", "(", "start", ".", "char", "At", "(", "i", ")", "Ġ!=", "Ġ'", "X", "')", "{", "<7>", "while", "(", "p", "Ġ<", "Ġn", "Ġ&&", "Ġend", ".", "char", "At", "(", "p", ")", "Ġ==", "Ġ'", "X", "')", "{", "<8>", "p", "++;", "<9>", "}", "<10>", "if", "(", "start", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "R", "')", "{", "<11>", "if", "(", "i", "Ġ>", "Ġp", ")", "return", "Ġfalse", ";", "<12>", "}", "else", "{", "<13>", "if", "(", "i", "Ġ<", "Ġp", ")", "return", "Ġfalse", ";", "<14>", "}", "<15>", "p", "++;", "<16>", "}", "<17>", "}", "<18>", "return", "Ġtrue", ";", "<19>", "}", "<20>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<21>", "String", "Ġstart", "Ġ=", "Ġ\"", "R", "XX", "LR", "X", "R", "XL", "\";", "<22>", "String", "Ġend", "Ġ=", "Ġ\"", "X", "RL", "XX", "R", "RL", "X", "\";", "<23>", "<24>", "Can", "Transform", "Ġcan", "Transform", "Instance", "Ġ=", "Ġnew", "ĠCan", "Transform", "();", "<25>", "bo", "olean", "Ġresult", "Ġ=", "Ġcan", "Transform", "Instance", ".", "can", "Transform", "(", "start", ",", "Ġend", ");", "<26>", "<27>", "System", ".", "out", ".", "println", "(\"", "Can", "Ġtransform", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<28>", "}", "<29>", "}", "<30>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"26": [[8, 3, 7, 10], [9]]}}
{"id": 8, "code": "import java.util.*;\n\npublic class CanTraverseAllPairs {\npublic boolean canTraverseAllPairs(int[] arr) {\nint N = arr.length;\nboolean[] has = new boolean[1<<17];\nint MAX = 100000;\nfor(int x: arr)\nhas[x] = true;\nif(N == 1)\nreturn true;\nif(has[1])\nreturn false;\nDSU union = new DSU(2*MAX+1);\nfor(int d=2; d <= MAX; d++)\n{\nint root = d+MAX;\nfor(int v=d; v <= MAX; v+=d)\nif(has[v])\nunion.merge(root, v);\n}\nHashSet<Integer> comps = new HashSet<Integer>();\nfor(int i=2; i <= MAX; i++)\nif(has[i])\ncomps.add(union.find(i));\nreturn comps.size() == 1;\n}\npublic static void main(String[] args) {\nint[] arr = {2, 3, 6, 12, 18};\nCanTraverseAllPairs canTraverseAllPairs = new CanTraverseAllPairs();\nboolean result = canTraverseAllPairs.canTraverseAllPairs(arr);\nSystem.out.println(\"Can traverse all pairs: \" + result);\n}\n}\nclass DSU\n{\npublic int[] dsu;\n\npublic DSU(int N)\n{\ndsu = new int[N+1];\nfor(int i=0; i <= N; i++)\n{\ndsu[i] = i;\n}\n}\npublic int find(int x)\n{\nreturn dsu[x] == x ? x : (dsu[x] = find(dsu[x]));\n}\npublic void merge(int x, int y)\n{\nint fx = find(x);\nint fy = find(y);\nif(fx == fy)\nreturn;\ndsu[fx] = fy;\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠCan", "Tra", "verse", "All", "P", "airs", "Ġ{", "<3>", "public", "Ġboolean", "Ġcan", "Tra", "verse", "All", "P", "airs", "(", "int", "[]", "Ġarr", ")", "Ġ{", "<4>", "int", "ĠN", "Ġ=", "Ġarr", ".", "length", ";", "<5>", "bo", "olean", "[]", "Ġhas", "Ġ=", "Ġnew", "Ġboolean", "[", "1", "<<", "17", "];", "<6>", "int", "ĠMAX", "Ġ=", "Ġ100", "000", ";", "<7>", "for", "(", "int", "Ġx", ":", "Ġarr", ")", "<8>", "has", "[", "x", "]", "Ġ=", "Ġtrue", ";", "<9>", "if", "(", "N", "Ġ==", "Ġ1", ")", "<10>", "return", "Ġtrue", ";", "<11>", "if", "(", "has", "[", "1", "])", "<12>", "return", "Ġfalse", ";", "<13>", "DS", "U", "Ġunion", "Ġ=", "Ġnew", "ĠD", "SU", "(", "2", "*", "MAX", "+", "1", ");", "<14>", "for", "(", "int", "Ġd", "=", "2", ";", "Ġd", "Ġ<=", "ĠMAX", ";", "Ġd", "++)", "<15>", "{", "<16>", "int", "Ġroot", "Ġ=", "Ġd", "+", "MAX", ";", "<17>", "for", "(", "int", "Ġv", "=", "d", ";", "Ġv", "Ġ<=", "ĠMAX", ";", "Ġv", "+=", "d", ")", "<18>", "if", "(", "has", "[", "v", "])", "<19>", "union", ".", "mer", "ge", "(", "root", ",", "Ġv", ");", "<20>", "}", "<21>", "Hash", "Set", "<", "Integer", ">", "Ġcomp", "s", "Ġ=", "Ġnew", "ĠHash", "Set", "<", "Integer", ">", "();", "<22>", "for", "(", "int", "Ġi", "=", "2", ";", "Ġi", "Ġ<=", "ĠMAX", ";", "Ġi", "++)", "<23>", "if", "(", "has", "[", "i", "])", "<24>", "com", "ps", ".", "add", "(", "union", ".", "find", "(", "i", "));", "<25>", "return", "Ġcomp", "s", ".", "size", "()", "Ġ==", "Ġ1", ";", "<26>", "}", "<27>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<28>", "int", "[]", "Ġarr", "Ġ=", "Ġ{", "2", ",", "Ġ3", ",", "Ġ6", ",", "Ġ12", ",", "Ġ18", "};", "<29>", "Can", "Tra", "verse", "All", "P", "airs", "Ġcan", "Tra", "verse", "All", "P", "airs", "Ġ=", "Ġnew", "ĠCan", "Tra", "verse", "All", "P", "airs", "();", "<30>", "bo", "olean", "Ġresult", "Ġ=", "Ġcan", "Tra", "verse", "All", "P", "airs", ".", "can", "Tra", "verse", "All", "P", "airs", "(", "arr", ");", "<31>", "System", ".", "out", ".", "println", "(\"", "Can", "Ġtraverse", "Ġall", "Ġpairs", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<32>", "}", "<33>", "}", "<34>", "class", "ĠD", "SU", "<35>", "{", "<36>", "public", "Ġint", "[]", "Ġd", "su", ";", "<37>", "<38>", "public", "ĠD", "SU", "(", "int", "ĠN", ")", "<39>", "{", "<40>", "d", "su", "Ġ=", "Ġnew", "Ġint", "[", "N", "+", "1", "];", "<41>", "for", "(", "int", "Ġi", "=", "0", ";", "Ġi", "Ġ<=", "ĠN", ";", "Ġi", "++)", "<42>", "{", "<43>", "d", "su", "[", "i", "]", "Ġ=", "Ġi", ";", "<44>", "}", "<45>", "}", "<46>", "public", "Ġint", "Ġfind", "(", "int", "Ġx", ")", "<47>", "{", "<48>", "return", "Ġd", "su", "[", "x", "]", "Ġ==", "Ġx", "Ġ?", "Ġx", "Ġ:", "Ġ(", "d", "su", "[", "x", "]", "Ġ=", "Ġfind", "(", "d", "su", "[", "x", "])", ");", "<49>", "}", "<50>", "public", "Ġvoid", "Ġmerge", "(", "int", "Ġx", ",", "Ġint", "Ġy", ")", "<51>", "{", "<52>", "int", "Ġf", "x", "Ġ=", "Ġfind", "(", "x", ");", "<53>", "int", "Ġf", "y", "Ġ=", "Ġfind", "(", "y", ");", "<54>", "if", "(", "fx", "Ġ==", "Ġf", "y", ")", "<55>", "return", ";", "<56>", "d", "su", "[", "fx", "]", "Ġ=", "Ġf", "y", ";", "<57>", "}", "<58>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"31": [[0, 6], [14, 9, 5]]}}
{"id": 9, "code": "class ConcatenatedBinary {\npublic int concatenatedBinary(int n) {\nint t = 2;\nfinal int mod = 1000000007;\nlong ret = 0;\nfor(int i = 1;i <= n;i++){\nif(i == t){\nt *= 2;\n}\nret = ret * t + i;\nret %= mod;\n}\nreturn (int)ret;\n}\npublic static void main(String[] args) {\nint n = 12; // Example input\nConcatenatedBinary concatenatedBinary = new ConcatenatedBinary();\nint result = concatenatedBinary.concatenatedBinary(n);\nSystem.out.println(\"Concatenated Binary result for n = \" + n + \" is: \" + result);\n}\n}\n", "code_tokens": ["<0>", "class", "ĠCon", "cat", "en", "ated", "B", "inary", "Ġ{", "<1>", "public", "Ġint", "Ġconc", "aten", "ated", "B", "inary", "(", "int", "Ġn", ")", "Ġ{", "<2>", "int", "Ġt", "Ġ=", "Ġ2", ";", "<3>", "final", "Ġint", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<4>", "long", "Ġret", "Ġ=", "Ġ0", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<=", "Ġn", ";", "i", "++", "){", "<6>", "if", "(", "i", "Ġ==", "Ġt", "){", "<7>", "t", "Ġ*", "=", "Ġ2", ";", "<8>", "}", "<9>", "ret", "Ġ=", "Ġret", "Ġ*", "Ġt", "Ġ+", "Ġi", ";", "<10>", "ret", "Ġ%", "=", "Ġmod", ";", "<11>", "}", "<12>", "return", "Ġ(", "int", ")", "ret", ";", "<13>", "}", "<14>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<15>", "int", "Ġn", "Ġ=", "Ġ12", ";", "Ġ//", "ĠExample", "Ġinput", "<16>", "Con", "cat", "en", "ated", "B", "inary", "Ġconc", "aten", "ated", "B", "inary", "Ġ=", "Ġnew", "ĠCon", "cat", "en", "ated", "B", "inary", "();", "<17>", "int", "Ġresult", "Ġ=", "Ġconc", "aten", "ated", "B", "inary", ".", "con", "cat", "en", "ated", "B", "inary", "(", "n", ");", "<18>", "System", ".", "out", ".", "println", "(\"", "Con", "cat", "en", "ated", "ĠBinary", "Ġresult", "Ġfor", "Ġn", "Ġ=", "Ġ\"", "Ġ+", "Ġn", "Ġ+", "Ġ\"", "Ġis", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<19>", "}", "<20>", "}", "<21>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"18": [[15, 4], [10]]}}
{"id": 10, "code": "import java.util.*;\nclass ConnectSticks {\npublic int connectSticks(int[] sticks) {\nPriorityQueue<Integer> pq = new PriorityQueue<>();\nfor(int v : sticks){\npq.add(v);\n}\nint ans = 0;\nwhile(pq.size() > 1){\nint x = pq.poll();\nint y = pq.poll();\nans += x + y;\npq.add(x+y);\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nint[] sticks = {2, 4, 3}; // Example input\nConnectSticks connectSticks = new ConnectSticks();\nint result = connectSticks.connectSticks(sticks);\nSystem.out.println(\"Minimum cost to connect sticks: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠConnect", "St", "icks", "Ġ{", "<2>", "public", "Ġint", "Ġconnect", "St", "icks", "(", "int", "[]", "Ġsticks", ")", "Ġ{", "<3>", "Prior", "ity", "Queue", "<", "Integer", ">", "Ġp", "q", "Ġ=", "Ġnew", "ĠPriority", "Queue", "<", ">", "();", "<4>", "for", "(", "int", "Ġv", "Ġ:", "Ġsticks", "){", "<5>", "p", "q", ".", "add", "(", "v", ");", "<6>", "}", "<7>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<8>", "while", "(", "p", "q", ".", "size", "()", "Ġ>", "Ġ1", "){", "<9>", "int", "Ġx", "Ġ=", "Ġp", "q", ".", "poll", "();", "<10>", "int", "Ġy", "Ġ=", "Ġp", "q", ".", "poll", "();", "<11>", "ans", "Ġ+=", "Ġx", "Ġ+", "Ġy", ";", "<12>", "p", "q", ".", "add", "(", "x", "+", "y", ");", "<13>", "}", "<14>", "return", "Ġans", ";", "<15>", "}", "<16>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<17>", "int", "[]", "Ġsticks", "Ġ=", "Ġ{", "2", ",", "Ġ4", ",", "Ġ3", "};", "Ġ//", "ĠExample", "Ġinput", "<18>", "Connect", "St", "icks", "Ġconnect", "St", "icks", "Ġ=", "Ġnew", "ĠConnect", "St", "icks", "();", "<19>", "int", "Ġresult", "Ġ=", "Ġconnect", "St", "icks", ".", "connect", "St", "icks", "(", "sticks", ");", "<20>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġcost", "Ġto", "Ġconnect", "Ġsticks", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<21>", "}", "<22>", "}", "<23>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"20": [[15, 12, 8, 8], [9]]}}
{"id": 11, "code": "class ConstructArray {\npublic int[] constructArray(int n, int k) {\nint[] a = new int[n];\nint l = 1, h = n;\nint p = 0;\nfor(int i = 0;i < k-1;i++){\nif(i % 2 == 0){\na[p++] = l++;\n}else{\na[p++] = h--;\n}\n}\nif(k % 2 == 1){\nfor(int i = l;i <= h;i++){\na[p++] = i;\n}\n}else{\nfor(int i = h;i >= l;i--){\na[p++] = i;\n}\n}\nreturn a;\n}\npublic static void main(String[] args) {\nint n = 10; // Example value for n\nint k = 4;  // Example value for k\nConstructArray constructArray = new ConstructArray();\nint[] result = constructArray.constructArray(n, k);\nSystem.out.print(\"Constructed array: \");\nfor (int num : result) {\nSystem.out.print(num + \" \");\n}\nSystem.out.println();\n}\n}\n", "code_tokens": ["<0>", "class", "ĠConstruct", "Array", "Ġ{", "<1>", "public", "Ġint", "[]", "Ġconstruct", "Array", "(", "int", "Ġn", ",", "Ġint", "Ġk", ")", "Ġ{", "<2>", "int", "[]", "Ġa", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<3>", "int", "Ġl", "Ġ=", "Ġ1", ",", "Ġh", "Ġ=", "Ġn", ";", "<4>", "int", "Ġp", "Ġ=", "Ġ0", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġk", "-", "1", ";", "i", "++", "){", "<6>", "if", "(", "i", "Ġ%", "Ġ2", "Ġ==", "Ġ0", "){", "<7>", "a", "[", "p", "++", "]", "Ġ=", "Ġl", "++;", "<8>", "}", "else", "{", "<9>", "a", "[", "p", "++", "]", "Ġ=", "Ġh", "--", ";", "<10>", "}", "<11>", "}", "<12>", "if", "(", "k", "Ġ%", "Ġ2", "Ġ==", "Ġ1", "){", "<13>", "for", "(", "int", "Ġi", "Ġ=", "Ġl", ";", "i", "Ġ<=", "Ġh", ";", "i", "++", "){", "<14>", "a", "[", "p", "++", "]", "Ġ=", "Ġi", ";", "<15>", "}", "<16>", "}", "else", "{", "<17>", "for", "(", "int", "Ġi", "Ġ=", "Ġh", ";", "i", "Ġ>=", "Ġl", ";", "i", "--", "){", "<18>", "a", "[", "p", "++", "]", "Ġ=", "Ġi", ";", "<19>", "}", "<20>", "}", "<21>", "return", "Ġa", ";", "<22>", "}", "<23>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<24>", "int", "Ġn", "Ġ=", "Ġ10", ";", "Ġ//", "ĠExample", "Ġvalue", "Ġfor", "Ġn", "<25>", "int", "Ġk", "Ġ=", "Ġ4", ";", "Ġ", "Ġ//", "ĠExample", "Ġvalue", "Ġfor", "Ġk", "<26>", "Construct", "Array", "Ġconstruct", "Array", "Ġ=", "Ġnew", "ĠConstruct", "Array", "();", "<27>", "int", "[]", "Ġresult", "Ġ=", "Ġconstruct", "Array", ".", "construct", "Array", "(", "n", ",", "Ġk", ");", "<28>", "System", ".", "out", ".", "print", "(\"", "Constructed", "Ġarray", ":", "Ġ\"", ");", "<29>", "for", "Ġ(", "int", "Ġnum", "Ġ:", "Ġresult", ")", "Ġ{", "<30>", "System", ".", "out", ".", "print", "(", "num", "Ġ+", "Ġ\"", "Ġ\"", ");", "<31>", "}", "<32>", "System", ".", "out", ".", "println", "();", "<33>", "}", "<34>", "}", "<35>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"28": [[1, 2, 14, 15], [3]]}}
{"id": 12, "code": "import java.util.*;\nclass CountDifferentSubsequenceGCDs {\npublic int countDifferentSubsequenceGCDs(int[] arr) {\nint N = arr.length;\nint[] buckets = new int[200001];\nfor(int x: arr)\n{\nArrayList<Integer> div = findDiv(x);\nfor(int d: div)\n{\nif(buckets[d] == 0)\nbuckets[d] = x;\nelse\nbuckets[d] = gcd(buckets[d], x);\n}\n}\nint res = 0;\nfor(int i=1; i <= 200000; i++)\nif(buckets[i] == i)\n{\nres++;\n}\nreturn res;\n}\npublic ArrayList<Integer> findDiv(int N)\n{\nArrayList<Integer> ls1 = new ArrayList<Integer>();\nArrayList<Integer> ls2 = new ArrayList<Integer>();\nfor(int i=1; i <= (int)(Math.sqrt(N)+0.00000001); i++)\nif(N%i == 0)\n{\nls1.add(i);\nls2.add(N/i);\n}\nCollections.reverse(ls2);\nfor(int b: ls2)\nif(b != ls1.get(ls1.size()-1))\nls1.add(b);\nreturn ls1;\n}\npublic static int gcd(int a, int b)\n{\nif(a > b)\n{\nint t = a;\na = b;\nb = t;\n}\nif(a == 0)\nreturn b;\nreturn gcd(b%a, a);\n}\n\npublic static void main(String[] args) {\nint[] arr = {6, 10, 3}; // Example input\nCountDifferentSubsequenceGCDs countGCDs = new CountDifferentSubsequenceGCDs();\nint result = countGCDs.countDifferentSubsequenceGCDs(arr);\nSystem.out.println(\"Count of different subsequence GCDs: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠCount", "Different", "Sub", "sequence", "G", "CD", "s", "Ġ{", "<2>", "public", "Ġint", "Ġcount", "Different", "Sub", "sequence", "G", "CD", "s", "(", "int", "[]", "Ġarr", ")", "Ġ{", "<3>", "int", "ĠN", "Ġ=", "Ġarr", ".", "length", ";", "<4>", "int", "[]", "Ġbuckets", "Ġ=", "Ġnew", "Ġint", "[", "200", "001", "];", "<5>", "for", "(", "int", "Ġx", ":", "Ġarr", ")", "<6>", "{", "<7>", "Array", "List", "<", "Integer", ">", "Ġdiv", "Ġ=", "Ġfind", "Div", "(", "x", ");", "<8>", "for", "(", "int", "Ġd", ":", "Ġdiv", ")", "<9>", "{", "<10>", "if", "(", "buck", "ets", "[", "d", "]", "Ġ==", "Ġ0", ")", "<11>", "buck", "ets", "[", "d", "]", "Ġ=", "Ġx", ";", "<12>", "else", "<13>", "buck", "ets", "[", "d", "]", "Ġ=", "Ġg", "cd", "(", "buck", "ets", "[", "d", "],", "Ġx", ");", "<14>", "}", "<15>", "}", "<16>", "int", "Ġres", "Ġ=", "Ġ0", ";", "<17>", "for", "(", "int", "Ġi", "=", "1", ";", "Ġi", "Ġ<=", "Ġ200", "000", ";", "Ġi", "++)", "<18>", "if", "(", "buck", "ets", "[", "i", "]", "Ġ==", "Ġi", ")", "<19>", "{", "<20>", "res", "++;", "<21>", "}", "<22>", "return", "Ġres", ";", "<23>", "}", "<24>", "public", "ĠArray", "List", "<", "Integer", ">", "Ġfind", "Div", "(", "int", "ĠN", ")", "<25>", "{", "<26>", "Array", "List", "<", "Integer", ">", "Ġls", "1", "Ġ=", "Ġnew", "ĠArray", "List", "<", "Integer", ">", "();", "<27>", "Array", "List", "<", "Integer", ">", "Ġls", "2", "Ġ=", "Ġnew", "ĠArray", "List", "<", "Integer", ">", "();", "<28>", "for", "(", "int", "Ġi", "=", "1", ";", "Ġi", "Ġ<=", "Ġ(", "int", ")(", "Math", ".", "sq", "rt", "(", "N", ")+", "0", ".", "000000", "01", ");", "Ġi", "++)", "<29>", "if", "(", "N", "%", "i", "Ġ==", "Ġ0", ")", "<30>", "{", "<31>", "ls", "1", ".", "add", "(", "i", ");", "<32>", "ls", "2", ".", "add", "(", "N", "/", "i", ");", "<33>", "}", "<34>", "Col", "lections", ".", "reverse", "(", "ls", "2", ");", "<35>", "for", "(", "int", "Ġb", ":", "Ġls", "2", ")", "<36>", "if", "(", "b", "Ġ!=", "Ġls", "1", ".", "get", "(", "ls", "1", ".", "size", "()", "-", "1", "))", "<37>", "ls", "1", ".", "add", "(", "b", ");", "<38>", "return", "Ġls", "1", ";", "<39>", "}", "<40>", "public", "Ġstatic", "Ġint", "Ġg", "cd", "(", "int", "Ġa", ",", "Ġint", "Ġb", ")", "<41>", "{", "<42>", "if", "(", "a", "Ġ>", "Ġb", ")", "<43>", "{", "<44>", "int", "Ġt", "Ġ=", "Ġa", ";", "<45>", "a", "Ġ=", "Ġb", ";", "<46>", "b", "Ġ=", "Ġt", ";", "<47>", "}", "<48>", "if", "(", "a", "Ġ==", "Ġ0", ")", "<49>", "return", "Ġb", ";", "<50>", "return", "Ġg", "cd", "(", "b", "%", "a", ",", "Ġa", ");", "<51>", "}", "<52>", "<53>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<54>", "int", "[]", "Ġarr", "Ġ=", "Ġ{", "6", ",", "Ġ10", ",", "Ġ3", "};", "Ġ//", "ĠExample", "Ġinput", "<55>", "Count", "Different", "Sub", "sequence", "G", "CD", "s", "Ġcount", "G", "CD", "s", "Ġ=", "Ġnew", "ĠCount", "Different", "Sub", "sequence", "G", "CD", "s", "();", "<56>", "int", "Ġresult", "Ġ=", "Ġcount", "G", "CD", "s", ".", "count", "Different", "Sub", "sequence", "G", "CD", "s", "(", "arr", ");", "<57>", "System", ".", "out", ".", "println", "(\"", "Count", "Ġof", "Ġdifferent", "Ġsubsequ", "ence", "ĠG", "CD", "s", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<58>", "}", "<59>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"58": [[13, 7, 12], [8, 4, 12, 2]]}}
{"id": 13, "code": "import java.util.*;\nclass CountGood {\n\npublic long countGood(int[] nums, int k) {\nlong count = 0, curr = 0;\nHashMap<Integer, Integer> map = new HashMap<>();\nfor (int i = 0, j = 0; i < nums.length; i++, count += j) {\ncurr += map.getOrDefault(nums[i], 0);\nmap.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\nfor (; curr >= k; j++) {\ncurr -= map.put(nums[j], map.get(nums[j]) - 1) - 1;\n}\n}\nreturn count;\n}\npublic static void main(String[] args) {\nint[] nums = {1, 2, 1, 2, 1}; // Example input\nint k = 2;  // Example value for k\nCountGood countGood = new CountGood();\nlong result = countGood.countGood(nums, k);\nSystem.out.println(\"Count of good subarrays: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠCount", "Good", "Ġ{", "<2>", "<3>", "public", "Ġlong", "Ġcount", "Good", "(", "int", "[]", "Ġnum", "s", ",", "Ġint", "Ġk", ")", "Ġ{", "<4>", "long", "Ġcount", "Ġ=", "Ġ0", ",", "Ġcur", "r", "Ġ=", "Ġ0", ";", "<5>", "Hash", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġmap", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ",", "Ġj", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġnum", "s", ".", "length", ";", "Ġi", "++", ",", "Ġcount", "Ġ+=", "Ġj", ")", "Ġ{", "<7>", "cur", "r", "Ġ+=", "Ġmap", ".", "get", "Or", "Default", "(", "n", "ums", "[", "i", "],", "Ġ0", ");", "<8>", "map", ".", "put", "(", "n", "ums", "[", "i", "],", "Ġmap", ".", "get", "Or", "Default", "(", "n", "ums", "[", "i", "],", "Ġ0", ")", "Ġ+", "Ġ1", ");", "<9>", "for", "Ġ(", ";", "Ġcur", "r", "Ġ>=", "Ġk", ";", "Ġj", "++)", "Ġ{", "<10>", "cur", "r", "Ġ-=", "Ġmap", ".", "put", "(", "n", "ums", "[", "j", "],", "Ġmap", ".", "get", "(", "n", "ums", "[", "j", "])", "Ġ-", "Ġ1", ")", "Ġ-", "Ġ1", ";", "<11>", "}", "<12>", "}", "<13>", "return", "Ġcount", ";", "<14>", "}", "<15>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<16>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ1", ",", "Ġ2", ",", "Ġ1", "};", "Ġ//", "ĠExample", "Ġinput", "<17>", "int", "Ġk", "Ġ=", "Ġ2", ";", "Ġ", "Ġ//", "ĠExample", "Ġvalue", "Ġfor", "Ġk", "<18>", "Count", "Good", "Ġcount", "Good", "Ġ=", "Ġnew", "ĠCount", "Good", "();", "<19>", "long", "Ġresult", "Ġ=", "Ġcount", "Good", ".", "count", "Good", "(", "n", "ums", ",", "Ġk", ");", "<20>", "System", ".", "out", ".", "println", "(\"", "Count", "Ġof", "Ġgood", "Ġsub", "arr", "ays", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<21>", "}", "<22>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"20": [[10, 1, 2, 4], [3]]}}
{"id": 14, "code": "class CountMaxOrSubsets {\npublic int countMaxOrSubsets(int[] a) {\nint n = a.length;\nint all = 0;\nfor(int v : a){\nall |= v;\n}\nint ct = 0;\nfor(int i = 0;i < 1<<n;i++){\nint s = 0;\nfor(int j = 0;j < n;j++){\nif(i<<~j<0){\ns |= a[j];\n}\n}\nif(s == all)ct++;\n}\nreturn ct;\n}\npublic static void main(String[] args) {\nint[] a = {3, 1, 2}; // Example input\nCountMaxOrSubsets countMaxOrSubsets = new CountMaxOrSubsets();\nint result = countMaxOrSubsets.countMaxOrSubsets(a);\nSystem.out.println(\"Count of maximum OR subsets: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠCount", "Max", "Or", "Sub", "sets", "Ġ{", "<1>", "public", "Ġint", "Ġcount", "Max", "Or", "Sub", "sets", "(", "int", "[]", "Ġa", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġa", ".", "length", ";", "<3>", "int", "Ġall", "Ġ=", "Ġ0", ";", "<4>", "for", "(", "int", "Ġv", "Ġ:", "Ġa", "){", "<5>", "all", "Ġ|", "=", "Ġv", ";", "<6>", "}", "<7>", "int", "Ġc", "t", "Ġ=", "Ġ0", ";", "<8>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġ1", "<<", "n", ";", "i", "++", "){", "<9>", "int", "Ġs", "Ġ=", "Ġ0", ";", "<10>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġn", ";", "j", "++", "){", "<11>", "if", "(", "i", "<<", "~", "j", "<", "0", "){", "<12>", "s", "Ġ|", "=", "Ġa", "[", "j", "];", "<13>", "}", "<14>", "}", "<15>", "if", "(", "s", "Ġ==", "Ġall", ")", "ct", "++;", "<16>", "}", "<17>", "return", "Ġc", "t", ";", "<18>", "}", "<19>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<20>", "int", "[]", "Ġa", "Ġ=", "Ġ{", "3", ",", "Ġ1", ",", "Ġ2", "};", "Ġ//", "ĠExample", "Ġinput", "<21>", "Count", "Max", "Or", "Sub", "sets", "Ġcount", "Max", "Or", "Sub", "sets", "Ġ=", "Ġnew", "ĠCount", "Max", "Or", "Sub", "sets", "();", "<22>", "int", "Ġresult", "Ġ=", "Ġcount", "Max", "Or", "Sub", "sets", ".", "count", "Max", "Or", "Sub", "sets", "(", "a", ");", "<23>", "System", ".", "out", ".", "println", "(\"", "Count", "Ġof", "Ġmaximum", "ĠOR", "Ġsubs", "ets", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<24>", "}", "<25>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"23": [[4, 2], [13, 12, 13]]}}
{"id": 15, "code": "import java.util.*;\nclass CountOfAtoms {\nchar[] s;\nint pos, len;\n\npublic String countOfAtoms(String formula) {\ns = formula.toCharArray();\npos = 0;\nlen = s.length;\nTreeMap<String, java.math.BigInteger> res = go();\nStringBuilder sb = new StringBuilder();\nfor(String key : res.keySet()){\nsb.append(key);\njava.math.BigInteger val = res.get(key);\nif(!val.equals(java.math.BigInteger.ONE)){\nsb.append(val);\n}\n}\nreturn sb.toString();\n}\n\nTreeMap<String, java.math.BigInteger> go()\n{\nTreeMap<String, java.math.BigInteger> ret = new TreeMap<>();\nwhile(pos < len && s[pos] != ')'){\nif(s[pos] == '('){\npos++;\nTreeMap<String, java.math.BigInteger> res = go();\npos++;\njava.math.BigInteger num = num();\nfor(String key : res.keySet()){\njava.math.BigInteger val = res.get(key).multiply(num);\nif(ret.containsKey(key)){\nret.put(key, ret.get(key).add(val));\n}else{\nret.put(key, val);\n}\n}\n}else{\nString atom = atom();\njava.math.BigInteger num = java.math.BigInteger.ONE;\nif(pos < len && s[pos] >= '0' && s[pos] <= '9'){\nnum = num();\n}\nif(ret.containsKey(atom)){\nret.put(atom, ret.get(atom).add(num));\n}else{\nret.put(atom, num);\n}\n}\n}\nreturn ret;\n}\n\nString atom()\n{\nint opos = pos++;\nwhile(pos < len && s[pos] >= 'a' && s[pos] <= 'z')pos++;\nreturn new String(s, opos, pos - opos);\n}\n\njava.math.BigInteger num()\n{\nint opos = pos;\nwhile(pos < len && s[pos] >= '0' && s[pos] <= '9')pos++;\nreturn new java.math.BigInteger(new String(s, opos, pos-opos));\n}\npublic static void main(String[] args) {\nString formula = \"K4(ON(SO3)2)2\"; // Example input\nCountOfAtoms countOfAtoms = new CountOfAtoms();\nString result = countOfAtoms.countOfAtoms(formula);\nSystem.out.println(\"Count of atoms: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠCount", "Of", "At", "oms", "Ġ{", "<2>", "char", "[]", "Ġs", ";", "<3>", "int", "Ġpos", ",", "Ġlen", ";", "<4>", "<5>", "public", "ĠString", "Ġcount", "Of", "At", "oms", "(", "String", "Ġformula", ")", "Ġ{", "<6>", "s", "Ġ=", "Ġformula", ".", "to", "Char", "Array", "();", "<7>", "pos", "Ġ=", "Ġ0", ";", "<8>", "len", "Ġ=", "Ġs", ".", "length", ";", "<9>", "Tree", "Map", "<", "String", ",", "Ġjava", ".", "math", ".", "Big", "Integer", ">", "Ġres", "Ġ=", "Ġgo", "();", "<10>", "String", "Builder", "Ġs", "b", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<11>", "for", "(", "String", "Ġkey", "Ġ:", "Ġres", ".", "key", "Set", "()", "){", "<12>", "sb", ".", "append", "(", "key", ");", "<13>", "java", ".", "math", ".", "Big", "Integer", "Ġval", "Ġ=", "Ġres", ".", "get", "(", "key", ");", "<14>", "if", "(", "!", "val", ".", "equ", "als", "(", "java", ".", "math", ".", "Big", "Integer", ".", "ONE", "))", "{", "<15>", "sb", ".", "append", "(", "val", ");", "<16>", "}", "<17>", "}", "<18>", "return", "Ġs", "b", ".", "to", "String", "();", "<19>", "}", "<20>", "<21>", "Tree", "Map", "<", "String", ",", "Ġjava", ".", "math", ".", "Big", "Integer", ">", "Ġgo", "()", "<22>", "{", "<23>", "Tree", "Map", "<", "String", ",", "Ġjava", ".", "math", ".", "Big", "Integer", ">", "Ġret", "Ġ=", "Ġnew", "ĠTree", "Map", "<", ">", "();", "<24>", "while", "(", "pos", "Ġ<", "Ġlen", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ!=", "Ġ'", ")", "')", "{", "<25>", "if", "(", "s", "[", "pos", "]", "Ġ==", "Ġ'", "('", "){", "<26>", "pos", "++;", "<27>", "Tree", "Map", "<", "String", ",", "Ġjava", ".", "math", ".", "Big", "Integer", ">", "Ġres", "Ġ=", "Ġgo", "();", "<28>", "pos", "++;", "<29>", "java", ".", "math", ".", "Big", "Integer", "Ġnum", "Ġ=", "Ġnum", "();", "<30>", "for", "(", "String", "Ġkey", "Ġ:", "Ġres", ".", "key", "Set", "()", "){", "<31>", "java", ".", "math", ".", "Big", "Integer", "Ġval", "Ġ=", "Ġres", ".", "get", "(", "key", ").", "mult", "ip", "ly", "(", "num", ");", "<32>", "if", "(", "ret", ".", "cont", "ains", "Key", "(", "key", "))", "{", "<33>", "ret", ".", "put", "(", "key", ",", "Ġret", ".", "get", "(", "key", ").", "add", "(", "val", "));", "<34>", "}", "else", "{", "<35>", "ret", ".", "put", "(", "key", ",", "Ġval", ");", "<36>", "}", "<37>", "}", "<38>", "}", "else", "{", "<39>", "String", "Ġatom", "Ġ=", "Ġatom", "();", "<40>", "java", ".", "math", ".", "Big", "Integer", "Ġnum", "Ġ=", "Ġjava", ".", "math", ".", "Big", "Integer", ".", "ONE", ";", "<41>", "if", "(", "pos", "Ġ<", "Ġlen", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ>=", "Ġ'", "0", "'", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ<=", "Ġ'", "9", "')", "{", "<42>", "num", "Ġ=", "Ġnum", "();", "<43>", "}", "<44>", "if", "(", "ret", ".", "cont", "ains", "Key", "(", "atom", "))", "{", "<45>", "ret", ".", "put", "(", "atom", ",", "Ġret", ".", "get", "(", "atom", ").", "add", "(", "num", "));", "<46>", "}", "else", "{", "<47>", "ret", ".", "put", "(", "atom", ",", "Ġnum", ");", "<48>", "}", "<49>", "}", "<50>", "}", "<51>", "return", "Ġret", ";", "<52>", "}", "<53>", "<54>", "String", "Ġatom", "()", "<55>", "{", "<56>", "int", "Ġop", "os", "Ġ=", "Ġpos", "++;", "<57>", "while", "(", "pos", "Ġ<", "Ġlen", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ>=", "Ġ'", "a", "'", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ<=", "Ġ'", "z", "')", "pos", "++;", "<58>", "return", "Ġnew", "ĠString", "(", "s", ",", "Ġop", "os", ",", "Ġpos", "Ġ-", "Ġop", "os", ");", "<59>", "}", "<60>", "<61>", "java", ".", "math", ".", "Big", "Integer", "Ġnum", "()", "<62>", "{", "<63>", "int", "Ġop", "os", "Ġ=", "Ġpos", ";", "<64>", "while", "(", "pos", "Ġ<", "Ġlen", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ>=", "Ġ'", "0", "'", "Ġ&&", "Ġs", "[", "pos", "]", "Ġ<=", "Ġ'", "9", "')", "pos", "++;", "<65>", "return", "Ġnew", "Ġjava", ".", "math", ".", "Big", "Integer", "(", "new", "ĠString", "(", "s", ",", "Ġop", "os", ",", "Ġpos", "-", "op", "os", "));", "<66>", "}", "<67>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<68>", "String", "Ġformula", "Ġ=", "Ġ\"", "K", "4", "(", "ON", "(", "SO", "3", ")", "2", ")", "2", "\";", "Ġ//", "ĠExample", "Ġinput", "<69>", "Count", "Of", "At", "oms", "Ġcount", "Of", "At", "oms", "Ġ=", "Ġnew", "ĠCount", "Of", "At", "oms", "();", "<70>", "String", "Ġresult", "Ġ=", "Ġcount", "Of", "At", "oms", ".", "count", "Of", "At", "oms", "(", "form", "ula", ");", "<71>", "System", ".", "out", ".", "println", "(\"", "Count", "Ġof", "Ġatoms", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<72>", "}", "<73>", "}", "<74>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"71": [[2, 9], [11]]}}
{"id": 16, "code": "class CountQuadruplets {\n\npublic long countQuadruplets(int[] nums) {\nint[][] left = new int[nums.length][nums.length], right = new int[nums.length][nums.length];\nfor (int i = 0; i < nums.length; i++) {\nfor (int j = 0; j < i; j++) {\nleft[j + 1][i] = left[j][i] + (nums[j] < nums[i] ? 1 : 0);\n}\nfor (int j = nums.length - 1; j > i; j--) {\nright[i][j - 1] = right[i][j] + (nums[j] > nums[i] ? 1 : 0);\n}\n}\nlong count = 0;\nfor (int i = 0; i < nums.length; i++) {\nfor (int j = i + 1; j < nums.length; j++) {\ncount += nums[i] > nums[j] ? left[i + 1][j] * right[i][j - 1] : 0;\n}\n}\nreturn count;\n}\npublic static void main(String[] args) {\nint[] nums = {1, 3, 2, 4, 5}; // Example input\nCountQuadruplets countQuadruplets = new CountQuadruplets();\nlong result = countQuadruplets.countQuadruplets(nums);\nSystem.out.println(\"Count of quadruplets: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠCount", "Qu", "ad", "ru", "plets", "Ġ{", "<1>", "<2>", "public", "Ġlong", "Ġcount", "Qu", "ad", "ru", "plets", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<3>", "int", "[", "][", "]", "Ġleft", "Ġ=", "Ġnew", "Ġint", "[", "n", "ums", ".", "length", "][", "n", "ums", ".", "length", "],", "Ġright", "Ġ=", "Ġnew", "Ġint", "[", "n", "ums", ".", "length", "][", "n", "ums", ".", "length", "];", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġnum", "s", ".", "length", ";", "Ġi", "++)", "Ġ{", "<5>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġi", ";", "Ġj", "++)", "Ġ{", "<6>", "left", "[", "j", "Ġ+", "Ġ1", "][", "i", "]", "Ġ=", "Ġleft", "[", "j", "][", "i", "]", "Ġ+", "Ġ(", "n", "ums", "[", "j", "]", "Ġ<", "Ġnum", "s", "[", "i", "]", "Ġ?", "Ġ1", "Ġ:", "Ġ0", ");", "<7>", "}", "<8>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġnum", "s", ".", "length", "Ġ-", "Ġ1", ";", "Ġj", "Ġ>", "Ġi", ";", "Ġj", "--", ")", "Ġ{", "<9>", "right", "[", "i", "][", "j", "Ġ-", "Ġ1", "]", "Ġ=", "Ġright", "[", "i", "][", "j", "]", "Ġ+", "Ġ(", "n", "ums", "[", "j", "]", "Ġ>", "Ġnum", "s", "[", "i", "]", "Ġ?", "Ġ1", "Ġ:", "Ġ0", ");", "<10>", "}", "<11>", "}", "<12>", "long", "Ġcount", "Ġ=", "Ġ0", ";", "<13>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġnum", "s", ".", "length", ";", "Ġi", "++)", "Ġ{", "<14>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġi", "Ġ+", "Ġ1", ";", "Ġj", "Ġ<", "Ġnum", "s", ".", "length", ";", "Ġj", "++)", "Ġ{", "<15>", "count", "Ġ+=", "Ġnum", "s", "[", "i", "]", "Ġ>", "Ġnum", "s", "[", "j", "]", "Ġ?", "Ġleft", "[", "i", "Ġ+", "Ġ1", "][", "j", "]", "Ġ*", "Ġright", "[", "i", "][", "j", "Ġ-", "Ġ1", "]", "Ġ:", "Ġ0", ";", "<16>", "}", "<17>", "}", "<18>", "return", "Ġcount", ";", "<19>", "}", "<20>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<21>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "1", ",", "Ġ3", ",", "Ġ2", ",", "Ġ4", ",", "Ġ5", "};", "Ġ//", "ĠExample", "Ġinput", "<22>", "Count", "Qu", "ad", "ru", "plets", "Ġcount", "Qu", "ad", "ru", "plets", "Ġ=", "Ġnew", "ĠCount", "Qu", "ad", "ru", "plets", "();", "<23>", "long", "Ġresult", "Ġ=", "Ġcount", "Qu", "ad", "ru", "plets", ".", "count", "Qu", "ad", "ru", "plets", "(", "n", "ums", ");", "<24>", "System", ".", "out", ".", "println", "(\"", "Count", "Ġof", "Ġquadru", "plets", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<25>", "}", "<26>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"24": [[6, 7, 2], [0]]}}
{"id": 17, "code": "import java.util.*;\nclass CountWays {\n\npublic int countWays(int[][] ranges) {\nArrays.sort(ranges, (int[] o,int[] p) -> o[0] - p[0]);\nint count = 1;\nfor (int i = 0, j = -1; i < ranges.length; j = Math.max(j, ranges[i++][1])) {\ncount = ranges[i][0] > j ? count * 2 % 1000000007 : count;\n}\nreturn count;\n}\npublic static void main(String[] args) {\nint[][] ranges = { {1, 3}, {2, 4}, {6, 8} }; // Example input\nCountWays countWays = new CountWays();\nint result = countWays.countWays(ranges);\nSystem.out.println(\"Number of ways: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠCount", "W", "ays", "Ġ{", "<2>", "<3>", "public", "Ġint", "Ġcount", "W", "ays", "(", "int", "[", "][", "]", "Ġranges", ")", "Ġ{", "<4>", "Ar", "rays", ".", "sort", "(", "r", "anges", ",", "Ġ(", "int", "[]", "Ġo", ",", "int", "[]", "Ġp", ")", "Ġ->", "Ġo", "[", "0", "]", "Ġ-", "Ġp", "[", "0", "]);", "<5>", "int", "Ġcount", "Ġ=", "Ġ1", ";", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ",", "Ġj", "Ġ=", "Ġ-", "1", ";", "Ġi", "Ġ<", "Ġranges", ".", "length", ";", "Ġj", "Ġ=", "ĠMath", ".", "max", "(", "j", ",", "Ġranges", "[", "i", "++", "][", "1", "]", "))", "Ġ{", "<7>", "count", "Ġ=", "Ġranges", "[", "i", "][", "0", "]", "Ġ>", "Ġj", "Ġ?", "Ġcount", "Ġ*", "Ġ2", "Ġ%", "Ġ100", "000000", "7", "Ġ:", "Ġcount", ";", "<8>", "}", "<9>", "return", "Ġcount", ";", "<10>", "}", "<11>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<12>", "int", "[", "][", "]", "Ġranges", "Ġ=", "Ġ{", "Ġ{", "1", ",", "Ġ3", "},", "Ġ{", "2", ",", "Ġ4", "},", "Ġ{", "6", ",", "Ġ8", "}", "Ġ};", "Ġ//", "ĠExample", "Ġinput", "<13>", "Count", "W", "ays", "Ġcount", "W", "ays", "Ġ=", "Ġnew", "ĠCount", "W", "ays", "();", "<14>", "int", "Ġresult", "Ġ=", "Ġcount", "W", "ays", ".", "count", "W", "ays", "(", "r", "anges", ");", "<15>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġways", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<16>", "}", "<17>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"15": [[7, 5, 10], [0, 11]]}}
{"id": 18, "code": "public class CycleLengthQueries {\n\npublic int[] cycleLengthQueries(int n, int[][] queries) {\nint[] result = new int[queries.length];\nfor (int i = 0; i < queries.length; i++) {\nString s = Integer.toBinaryString(queries[i][0]), t = Integer.toBinaryString(queries[i][1]);\nresult[i] = s.length() + t.length() + 1;\nfor (int j = 0, k = 0; j < s.length() && k < t.length() && s.charAt(j) == t.charAt(k); j++, k++) {\nresult[i] -= 2;\n}\n}\nreturn result;\n}\npublic static void main(String[] args) {\nint n = 5; // Example value for n\nint[][] queries = { {3, 5}, {1, 7}, {2, 6} }; // Example queries\nCycleLengthQueries cycleLengthQueries = new CycleLengthQueries();\nint[] result = cycleLengthQueries.cycleLengthQueries(n, queries);\n}\n}", "code_tokens": ["<0>", "public", "Ġclass", "ĠCycle", "Length", "Qu", "eries", "Ġ{", "<1>", "<2>", "public", "Ġint", "[]", "Ġcycle", "Length", "Qu", "eries", "(", "int", "Ġn", ",", "Ġint", "[", "][", "]", "Ġqueries", ")", "Ġ{", "<3>", "int", "[]", "Ġresult", "Ġ=", "Ġnew", "Ġint", "[", "qu", "eries", ".", "length", "];", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġqueries", ".", "length", ";", "Ġi", "++)", "Ġ{", "<5>", "String", "Ġs", "Ġ=", "ĠInteger", ".", "to", "B", "inary", "String", "(", "qu", "eries", "[", "i", "][", "0", "]),", "Ġt", "Ġ=", "ĠInteger", ".", "to", "B", "inary", "String", "(", "qu", "eries", "[", "i", "][", "1", "]);", "<6>", "result", "[", "i", "]", "Ġ=", "Ġs", ".", "length", "()", "Ġ+", "Ġt", ".", "length", "()", "Ġ+", "Ġ1", ";", "<7>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ",", "Ġk", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġs", ".", "length", "()", "Ġ&&", "Ġk", "Ġ<", "Ġt", ".", "length", "()", "Ġ&&", "Ġs", ".", "char", "At", "(", "j", ")", "Ġ==", "Ġt", ".", "char", "At", "(", "k", ");", "Ġj", "++", ",", "Ġk", "++)", "Ġ{", "<8>", "result", "[", "i", "]", "Ġ-=", "Ġ2", ";", "<9>", "}", "<10>", "}", "<11>", "return", "Ġresult", ";", "<12>", "}", "<13>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<14>", "int", "Ġn", "Ġ=", "Ġ5", ";", "Ġ//", "ĠExample", "Ġvalue", "Ġfor", "Ġn", "<15>", "int", "[", "][", "]", "Ġqueries", "Ġ=", "Ġ{", "Ġ{", "3", ",", "Ġ5", "},", "Ġ{", "1", ",", "Ġ7", "},", "Ġ{", "2", ",", "Ġ6", "}", "Ġ};", "Ġ//", "ĠExample", "Ġqueries", "<16>", "Cy", "cle", "Length", "Qu", "eries", "Ġcycle", "Length", "Qu", "eries", "Ġ=", "Ġnew", "ĠCycle", "Length", "Qu", "eries", "();", "<17>", "int", "[]", "Ġresult", "Ġ=", "Ġcycle", "Length", "Qu", "eries", ".", "cycle", "Length", "Qu", "eries", "(", "n", ",", "Ġqueries", ");", "<18>", "}", "<19>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"18": [[4, 1], [6, 15, 1, 3]]}}
{"id": 19, "code": "public class DecodeCiphertext {\npublic String decodeCiphertext(String et, int rows) {\nint cols = et.length()/rows;\nStringBuilder ans = new StringBuilder();\nfor (int i = 0; i < cols; ++i) {\nfor (int j = 0; j < rows && i+j<cols; ++j) {\nans.append(et.charAt(j*cols+i+j));\n}\n}\nString aa = ans.toString();\nint last = 0;\nfor (int i = 0; i < aa.length(); ++i) {\nif (aa.charAt(i)!=' ')\nlast = i+1;\n}\nreturn aa.substring(0,last);\n}\npublic static void main(String[] args) {\nDecodeCiphertext decoder = new DecodeCiphertext();\nString encodedText = \"ch   ie   pr\";\nint rows = 3;\nString decodedText = decoder.decodeCiphertext(encodedText, rows);\nSystem.out.println(\"Decoded Text: \" + decodedText);\n}\n}\n", "code_tokens": ["<0>", "public", "Ġclass", "ĠDec", "ode", "C", "ipher", "text", "Ġ{", "<1>", "public", "ĠString", "Ġdecode", "C", "ipher", "text", "(", "String", "Ġet", ",", "Ġint", "Ġrows", ")", "Ġ{", "<2>", "int", "Ġcol", "s", "Ġ=", "Ġet", ".", "length", "()", "/", "rows", ";", "<3>", "String", "Builder", "Ġans", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġcol", "s", ";", "Ġ++", "i", ")", "Ġ{", "<5>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġrows", "Ġ&&", "Ġi", "+", "j", "<", "col", "s", ";", "Ġ++", "j", ")", "Ġ{", "<6>", "ans", ".", "append", "(", "et", ".", "char", "At", "(", "j", "*", "col", "s", "+", "i", "+", "j", "));", "<7>", "}", "<8>", "}", "<9>", "String", "Ġa", "a", "Ġ=", "Ġans", ".", "to", "String", "();", "<10>", "int", "Ġlast", "Ġ=", "Ġ0", ";", "<11>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġa", "a", ".", "length", "();", "Ġ++", "i", ")", "Ġ{", "<12>", "if", "Ġ(", "aa", ".", "char", "At", "(", "i", ")!", "='", "Ġ'", ")", "<13>", "last", "Ġ=", "Ġi", "+", "1", ";", "<14>", "}", "<15>", "return", "Ġa", "a", ".", "sub", "string", "(", "0", ",", "last", ");", "<16>", "}", "<17>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<18>", "Dec", "ode", "C", "ipher", "text", "Ġdec", "oder", "Ġ=", "Ġnew", "ĠDec", "ode", "C", "ipher", "text", "();", "<19>", "String", "Ġencoded", "Text", "Ġ=", "Ġ\"", "ch", "Ġ", "Ġ", "Ġie", "Ġ", "Ġ", "Ġpr", "\";", "<20>", "int", "Ġrows", "Ġ=", "Ġ3", ";", "<21>", "String", "Ġdec", "oded", "Text", "Ġ=", "Ġdec", "oder", ".", "dec", "ode", "C", "ipher", "text", "(", "enc", "oded", "Text", ",", "Ġrows", ");", "<22>", "System", ".", "out", ".", "println", "(\"", "Dec", "oded", "ĠText", ":", "Ġ\"", "Ġ+", "Ġdec", "oded", "Text", ");", "<23>", "}", "<24>", "}", "<25>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"14": [[3, 10, 11, 7], [3, 15, 6]]}}
{"id": 20, "code": "\n\nclass DeepestLeavesSum {\npublic static class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\nTreeNode(int x) { val = x; }\n}\nint[] c = new int[10001];\nint max = 0;\n\npublic int deepestLeavesSum(TreeNode root) {\ndls(root, 0);\nreturn c[max];\n}\n\npublic void dls(TreeNode root, int d) {\nif (root==null)\nreturn;\nif (root.left==null&&root.right==null) {\nc[d] += root.val;\n}\nmax = Math.max(max,d);\ndls(root.left,d+1);\ndls(root.right,d+1);\n}\npublic static void main(String[] args) {\nDeepestLeavesSum.TreeNode root = new DeepestLeavesSum.TreeNode(1);\nroot.left = new DeepestLeavesSum.TreeNode(2);\nroot.right = new DeepestLeavesSum.TreeNode(3);\nroot.left.left = new DeepestLeavesSum.TreeNode(4);\nroot.left.right = new DeepestLeavesSum.TreeNode(5);\nroot.right.right = new DeepestLeavesSum.TreeNode(6);\nroot.left.left.left = new DeepestLeavesSum.TreeNode(7);\nroot.right.right.right = new DeepestLeavesSum.TreeNode(8);\n\nDeepestLeavesSum deepestLeavesSum = new DeepestLeavesSum();\nint result = deepestLeavesSum.deepestLeavesSum(root);\nSystem.out.println(\"Deepest Leaves Sum: \" + result);\n}\n}", "code_tokens": ["<0>", "<1>", "<2>", "class", "ĠDeep", "est", "Le", "aves", "Sum", "Ġ{", "<3>", "public", "Ġstatic", "Ġclass", "ĠTree", "Node", "Ġ{", "<4>", "int", "Ġval", ";", "<5>", "Tree", "Node", "Ġleft", ";", "<6>", "Tree", "Node", "Ġright", ";", "<7>", "Tree", "Node", "(", "int", "Ġx", ")", "Ġ{", "Ġval", "Ġ=", "Ġx", ";", "Ġ}", "<8>", "}", "<9>", "int", "[]", "Ġc", "Ġ=", "Ġnew", "Ġint", "[", "100", "01", "];", "<10>", "int", "Ġmax", "Ġ=", "Ġ0", ";", "<11>", "<12>", "public", "Ġint", "Ġdeepest", "Le", "aves", "Sum", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<13>", "d", "ls", "(", "root", ",", "Ġ0", ");", "<14>", "return", "Ġc", "[", "max", "];", "<15>", "}", "<16>", "<17>", "public", "Ġvoid", "Ġd", "ls", "(", "Tree", "Node", "Ġroot", ",", "Ġint", "Ġd", ")", "Ġ{", "<18>", "if", "Ġ(", "root", "==", "null", ")", "<19>", "return", ";", "<20>", "if", "Ġ(", "root", ".", "left", "==", "null", "&&", "root", ".", "right", "==", "null", ")", "Ġ{", "<21>", "c", "[", "d", "]", "Ġ+=", "Ġroot", ".", "val", ";", "<22>", "}", "<23>", "max", "Ġ=", "ĠMath", ".", "max", "(", "max", ",", "d", ");", "<24>", "d", "ls", "(", "root", ".", "left", ",", "d", "+", "1", ");", "<25>", "d", "ls", "(", "root", ".", "right", ",", "d", "+", "1", ");", "<26>", "}", "<27>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<28>", "Deep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "Ġroot", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "1", ");", "<29>", "root", ".", "left", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "2", ");", "<30>", "root", ".", "right", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "3", ");", "<31>", "root", ".", "left", ".", "left", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "4", ");", "<32>", "root", ".", "left", ".", "right", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "5", ");", "<33>", "root", ".", "right", ".", "right", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "6", ");", "<34>", "root", ".", "left", ".", "left", ".", "left", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "7", ");", "<35>", "root", ".", "right", ".", "right", ".", "right", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", ".", "Tree", "Node", "(", "8", ");", "<36>", "<37>", "Deep", "est", "Le", "aves", "Sum", "Ġdeepest", "Le", "aves", "Sum", "Ġ=", "Ġnew", "ĠDeep", "est", "Le", "aves", "Sum", "();", "<38>", "int", "Ġresult", "Ġ=", "Ġdeepest", "Le", "aves", "Sum", ".", "deep", "est", "Le", "aves", "Sum", "(", "root", ");", "<39>", "System", ".", "out", ".", "println", "(\"", "Deep", "est", "ĠLeaves", "ĠSum", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<40>", "}", "<41>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"39": [[10, 3], [14]]}}
{"id": 21, "code": "import java.util.*;\nclass DeleteString {\npublic int deleteString(String S) {\nchar[] s = S.toCharArray();\nint n = s.length;\nint[] dp = new int[n];\nfor(int i = n-1;i >= 0;i--){\nchar[] t = Arrays.copyOfRange(s, i, n);\nint[] z = Z(t);\ndp[i] = 1;\nfor(int j = 1;2*j <= t.length;j++){\nif(z[j] >= j){\ndp[i] = Math.max(dp[i], dp[i+j] + 1);\n}\n}\n}\nreturn dp[0];\n}\n\npublic int[] Z(char[] str)\n{\nint n = str.length;\nint[] z = new int[n];\nif(n == 0)return z;\nz[0] = n;\nint l = 0, r = 0;\nfor(int i = 1;i < n;i++){\nif(i > r){\nl = r = i;\nwhile(r < n && str[r-l] == str[r])r++;\nz[i] = r-l; r--;\n}else{\nif(z[i-l] < r-i+1){\nz[i] = z[i-l];\n}else{\nl = i;\nwhile(r < n && str[r-l] == str[r])r++;\nz[i] = r-l; r--;\n}\n}\n}\n\nreturn z;\n}\npublic static void main(String[] args) {\nDeleteString deleteString = new DeleteString();\nString input = \"abcabcdabc\";\nint result = deleteString.deleteString(input);\nSystem.out.println(\"The maximum number of deletions: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠDelete", "String", "Ġ{", "<2>", "public", "Ġint", "Ġdelete", "String", "(", "String", "ĠS", ")", "Ġ{", "<3>", "char", "[]", "Ġs", "Ġ=", "ĠS", ".", "to", "Char", "Array", "();", "<4>", "int", "Ġn", "Ġ=", "Ġs", ".", "length", ";", "<5>", "int", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<6>", "for", "(", "int", "Ġi", "Ġ=", "Ġn", "-", "1", ";", "i", "Ġ>=", "Ġ0", ";", "i", "--", "){", "<7>", "char", "[]", "Ġt", "Ġ=", "ĠAr", "rays", ".", "copy", "Of", "Range", "(", "s", ",", "Ġi", ",", "Ġn", ");", "<8>", "int", "[]", "Ġz", "Ġ=", "ĠZ", "(", "t", ");", "<9>", "dp", "[", "i", "]", "Ġ=", "Ġ1", ";", "<10>", "for", "(", "int", "Ġj", "Ġ=", "Ġ1", ";", "2", "*", "j", "Ġ<=", "Ġt", ".", "length", ";", "j", "++", "){", "<11>", "if", "(", "z", "[", "j", "]", "Ġ>=", "Ġj", "){", "<12>", "dp", "[", "i", "]", "Ġ=", "ĠMath", ".", "max", "(", "dp", "[", "i", "],", "Ġd", "p", "[", "i", "+", "j", "]", "Ġ+", "Ġ1", ");", "<13>", "}", "<14>", "}", "<15>", "}", "<16>", "return", "Ġd", "p", "[", "0", "];", "<17>", "}", "<18>", "<19>", "public", "Ġint", "[]", "ĠZ", "(", "char", "[]", "Ġstr", ")", "<20>", "{", "<21>", "int", "Ġn", "Ġ=", "Ġstr", ".", "length", ";", "<22>", "int", "[]", "Ġz", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<23>", "if", "(", "n", "Ġ==", "Ġ0", ")", "return", "Ġz", ";", "<24>", "z", "[", "0", "]", "Ġ=", "Ġn", ";", "<25>", "int", "Ġl", "Ġ=", "Ġ0", ",", "Ġr", "Ġ=", "Ġ0", ";", "<26>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<27>", "if", "(", "i", "Ġ>", "Ġr", "){", "<28>", "l", "Ġ=", "Ġr", "Ġ=", "Ġi", ";", "<29>", "while", "(", "r", "Ġ<", "Ġn", "Ġ&&", "Ġstr", "[", "r", "-", "l", "]", "Ġ==", "Ġstr", "[", "r", "])", "r", "++;", "<30>", "z", "[", "i", "]", "Ġ=", "Ġr", "-", "l", ";", "Ġr", "--", ";", "<31>", "}", "else", "{", "<32>", "if", "(", "z", "[", "i", "-", "l", "]", "Ġ<", "Ġr", "-", "i", "+", "1", "){", "<33>", "z", "[", "i", "]", "Ġ=", "Ġz", "[", "i", "-", "l", "];", "<34>", "}", "else", "{", "<35>", "l", "Ġ=", "Ġi", ";", "<36>", "while", "(", "r", "Ġ<", "Ġn", "Ġ&&", "Ġstr", "[", "r", "-", "l", "]", "Ġ==", "Ġstr", "[", "r", "])", "r", "++;", "<37>", "z", "[", "i", "]", "Ġ=", "Ġr", "-", "l", ";", "Ġr", "--", ";", "<38>", "}", "<39>", "}", "<40>", "}", "<41>", "<42>", "return", "Ġz", ";", "<43>", "}", "<44>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<45>", "Delete", "String", "Ġdelete", "String", "Ġ=", "Ġnew", "ĠDelete", "String", "();", "<46>", "String", "Ġinput", "Ġ=", "Ġ\"", "abc", "ab", "cd", "abc", "\";", "<47>", "int", "Ġresult", "Ġ=", "Ġdelete", "String", ".", "delete", "String", "(", "input", ");", "<48>", "System", ".", "out", ".", "println", "(\"", "The", "Ġmaximum", "Ġnumber", "Ġof", "Ġdelet", "ions", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<49>", "}", "<50>", "<51>", "}", "<52>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"48": [[10, 7], [13, 0, 7]]}}
{"id": 22, "code": "class Dfs {\nstatic boolean[][] vis;\nstatic int[][] grid;\nstatic int[] dx = {1, 0, -1, 0};\nstatic int[] dy = {0, -1, 0, 1};\n\npublic int dfs(int x, int y, int ex, int ey, int open) {\nif (x < 0 || x >= grid.length || y < 0 || y >= grid[x].length || vis[x][y] || grid[x][y] == -1) {\nreturn 0;\n}\n\nif (x == ex && y == ey) {\nreturn open == 1 ? 1 : 0;\n}\nint ans = 0;\nvis[x][y] = true;\nfor (int d = 0; d < 4; ++d) {\nans += dfs(x + dx[d], y + dy[d], ex, ey, open - 1);\n}\nvis[x][y] = false;\nreturn ans;\n}\n\npublic int uniquePathsIII(int[][] _grid) {\ngrid = _grid;\nint n = grid.length;\nint m = grid[0].length;\nvis = new boolean[n][m];\nint open = 0;\nint sx = -1;\nint sy = -1;\nint ex = -1;\nint ey = -1;\nfor (int i = 0; i < n; ++i) {\nfor (int j = 0; j < m; ++j) {\nif (grid[i][j] == 1) {\nsx = i;\nsy = j;\ngrid[i][j] = 0;\n} else if (grid[i][j] == 2) {\nex = i;\ney = j;\ngrid[i][j] = 0;\n}\n\nif (grid[i][j] == 0) {\nopen++;\n}\n}\n}\n\nreturn dfs(sx, sy, ex, ey, open);\n}\npublic static void main(String[] args) {\nDfs dfsSolver = new Dfs();\nint[][] grid = {\n{1, 0, 0, 0},\n{0, 0, 0, 0},\n{0, 0, 2, -1}\n};\n\nint result = dfsSolver.uniquePathsIII(grid);\nSystem.out.println(\"Unique Paths III: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠD", "fs", "Ġ{", "<1>", "static", "Ġboolean", "[", "][", "]", "Ġvis", ";", "<2>", "static", "Ġint", "[", "][", "]", "Ġgrid", ";", "<3>", "static", "Ġint", "[]", "Ġdx", "Ġ=", "Ġ{", "1", ",", "Ġ0", ",", "Ġ-", "1", ",", "Ġ0", "};", "<4>", "static", "Ġint", "[]", "Ġdy", "Ġ=", "Ġ{", "0", ",", "Ġ-", "1", ",", "Ġ0", ",", "Ġ1", "};", "<5>", "<6>", "public", "Ġint", "Ġd", "fs", "(", "int", "Ġx", ",", "Ġint", "Ġy", ",", "Ġint", "Ġex", ",", "Ġint", "Ġey", ",", "Ġint", "Ġopen", ")", "Ġ{", "<7>", "if", "Ġ(", "x", "Ġ<", "Ġ0", "Ġ||", "Ġx", "Ġ>=", "Ġgrid", ".", "length", "Ġ||", "Ġy", "Ġ<", "Ġ0", "Ġ||", "Ġy", "Ġ>=", "Ġgrid", "[", "x", "].", "length", "Ġ||", "Ġvis", "[", "x", "][", "y", "]", "Ġ||", "Ġgrid", "[", "x", "][", "y", "]", "Ġ==", "Ġ-", "1", ")", "Ġ{", "<8>", "return", "Ġ0", ";", "<9>", "}", "<10>", "<11>", "if", "Ġ(", "x", "Ġ==", "Ġex", "Ġ&&", "Ġy", "Ġ==", "Ġey", ")", "Ġ{", "<12>", "return", "Ġopen", "Ġ==", "Ġ1", "Ġ?", "Ġ1", "Ġ:", "Ġ0", ";", "<13>", "}", "<14>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<15>", "vis", "[", "x", "][", "y", "]", "Ġ=", "Ġtrue", ";", "<16>", "for", "Ġ(", "int", "Ġd", "Ġ=", "Ġ0", ";", "Ġd", "Ġ<", "Ġ4", ";", "Ġ++", "d", ")", "Ġ{", "<17>", "ans", "Ġ+=", "Ġd", "fs", "(", "x", "Ġ+", "Ġdx", "[", "d", "],", "Ġy", "Ġ+", "Ġdy", "[", "d", "],", "Ġex", ",", "Ġey", ",", "Ġopen", "Ġ-", "Ġ1", ");", "<18>", "}", "<19>", "vis", "[", "x", "][", "y", "]", "Ġ=", "Ġfalse", ";", "<20>", "return", "Ġans", ";", "<21>", "}", "<22>", "<23>", "public", "Ġint", "Ġunique", "Path", "s", "III", "(", "int", "[", "][", "]", "Ġ_", "grid", ")", "Ġ{", "<24>", "grid", "Ġ=", "Ġ_", "grid", ";", "<25>", "int", "Ġn", "Ġ=", "Ġgrid", ".", "length", ";", "<26>", "int", "Ġm", "Ġ=", "Ġgrid", "[", "0", "].", "length", ";", "<27>", "vis", "Ġ=", "Ġnew", "Ġboolean", "[", "n", "][", "m", "];", "<28>", "int", "Ġopen", "Ġ=", "Ġ0", ";", "<29>", "int", "Ġs", "x", "Ġ=", "Ġ-", "1", ";", "<30>", "int", "Ġsy", "Ġ=", "Ġ-", "1", ";", "<31>", "int", "Ġex", "Ġ=", "Ġ-", "1", ";", "<32>", "int", "Ġey", "Ġ=", "Ġ-", "1", ";", "<33>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġ++", "i", ")", "Ġ{", "<34>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġm", ";", "Ġ++", "j", ")", "Ġ{", "<35>", "if", "Ġ(", "grid", "[", "i", "][", "j", "]", "Ġ==", "Ġ1", ")", "Ġ{", "<36>", "s", "x", "Ġ=", "Ġi", ";", "<37>", "sy", "Ġ=", "Ġj", ";", "<38>", "grid", "[", "i", "][", "j", "]", "Ġ=", "Ġ0", ";", "<39>", "}", "Ġelse", "Ġif", "Ġ(", "grid", "[", "i", "][", "j", "]", "Ġ==", "Ġ2", ")", "Ġ{", "<40>", "ex", "Ġ=", "Ġi", ";", "<41>", "ey", "Ġ=", "Ġj", ";", "<42>", "grid", "[", "i", "][", "j", "]", "Ġ=", "Ġ0", ";", "<43>", "}", "<44>", "<45>", "if", "Ġ(", "grid", "[", "i", "][", "j", "]", "Ġ==", "Ġ0", ")", "Ġ{", "<46>", "open", "++;", "<47>", "}", "<48>", "}", "<49>", "}", "<50>", "<51>", "return", "Ġd", "fs", "(", "s", "x", ",", "Ġsy", ",", "Ġex", ",", "Ġey", ",", "Ġopen", ");", "<52>", "}", "<53>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<54>", "D", "fs", "Ġd", "fs", "S", "olver", "Ġ=", "Ġnew", "ĠD", "fs", "();", "<55>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<56>", "{", "1", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", "},", "<57>", "{", "0", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", "},", "<58>", "{", "0", ",", "Ġ0", ",", "Ġ2", ",", "Ġ-", "1", "}", "<59>", "};", "<60>", "<61>", "int", "Ġresult", "Ġ=", "Ġd", "fs", "S", "olver", ".", "unique", "Path", "s", "III", "(", "grid", ");", "<62>", "System", ".", "out", ".", "println", "(\"", "Unique", "ĠPath", "s", "ĠIII", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<63>", "}", "<64>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"62": [[0, 3, 4, 2], [10, 15, 7, 4]]}}
{"id": 23, "code": "import java.util.*;\n\nclass DiagonalSort {\npublic int[][] diagonalSort(int[][] mat) {\nint n = mat.length;\nint m = mat[0].length;\nHashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\nHashMap<Integer, Integer> ind = new HashMap<>();\nfor (int i = 0; i < n; ++i) {\nfor (int j = 0; j < m; ++j) {\nint d = i-j;\nif (!hm.containsKey(d))\nhm.put(d, new ArrayList<>());\nhm.get(d).add(mat[i][j]);\nind.put(d, hm.get(d).size()-1);\n}\n}\nfor (int k : hm.keySet()) {\nCollections.sort(hm.get(k));\n}\nint[][] ans = new int[n][m];\nfor (int i = n-1; i >= 0; --i) {\nfor (int j = m-1; j >= 0; --j) {\nans[i][j] = hm.get(i-j).get(ind.get(i-j));\nind.put(i-j, ind.get(i-j)-1);\n}\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nDiagonalSort diagonalSort = new DiagonalSort();\nint[][] mat = {\n{3, 3, 1, 1},\n{2, 2, 1, 2},\n{1, 1, 1, 2}\n};\n\nint[][] sortedMat = diagonalSort.diagonalSort(mat);\nSystem.out.println(\"Sorted Matrix Diagonally:\");\nfor (int i = 0; i < sortedMat.length; i++) {\nfor (int j = 0; j < sortedMat[i].length; j++) {\nSystem.out.print(sortedMat[i][j] + \" \");\n}\nSystem.out.println();\n}\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠDi", "agonal", "Sort", "Ġ{", "<3>", "public", "Ġint", "[", "][", "]", "Ġdiagonal", "Sort", "(", "int", "[", "][", "]", "Ġmat", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġmat", ".", "length", ";", "<5>", "int", "Ġm", "Ġ=", "Ġmat", "[", "0", "].", "length", ";", "<6>", "Hash", "Map", "<", "Integer", ",", "ĠArray", "List", "<", "Integer", ">>", "Ġh", "m", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<7>", "Hash", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġind", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<8>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġ++", "i", ")", "Ġ{", "<9>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġm", ";", "Ġ++", "j", ")", "Ġ{", "<10>", "int", "Ġd", "Ġ=", "Ġi", "-", "j", ";", "<11>", "if", "Ġ(!", "hm", ".", "cont", "ains", "Key", "(", "d", "))", "<12>", "hm", ".", "put", "(", "d", ",", "Ġnew", "ĠArray", "List", "<", ">", "());", "<13>", "hm", ".", "get", "(", "d", ").", "add", "(", "mat", "[", "i", "][", "j", "]);", "<14>", "ind", ".", "put", "(", "d", ",", "Ġh", "m", ".", "get", "(", "d", ").", "size", "()", "-", "1", ");", "<15>", "}", "<16>", "}", "<17>", "for", "Ġ(", "int", "Ġk", "Ġ:", "Ġh", "m", ".", "key", "Set", "())", "Ġ{", "<18>", "Col", "lections", ".", "sort", "(", "hm", ".", "get", "(", "k", "));", "<19>", "}", "<20>", "int", "[", "][", "]", "Ġans", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "m", "];", "<21>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġn", "-", "1", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġ--", "i", ")", "Ġ{", "<22>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġm", "-", "1", ";", "Ġj", "Ġ>=", "Ġ0", ";", "Ġ--", "j", ")", "Ġ{", "<23>", "ans", "[", "i", "][", "j", "]", "Ġ=", "Ġh", "m", ".", "get", "(", "i", "-", "j", ").", "get", "(", "ind", ".", "get", "(", "i", "-", "j", "));", "<24>", "ind", ".", "put", "(", "i", "-", "j", ",", "Ġind", ".", "get", "(", "i", "-", "j", ")-", "1", ");", "<25>", "}", "<26>", "}", "<27>", "return", "Ġans", ";", "<28>", "}", "<29>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<30>", "Di", "agonal", "Sort", "Ġdiagonal", "Sort", "Ġ=", "Ġnew", "ĠDi", "agonal", "Sort", "();", "<31>", "int", "[", "][", "]", "Ġmat", "Ġ=", "Ġ{", "<32>", "{", "3", ",", "Ġ3", ",", "Ġ1", ",", "Ġ1", "},", "<33>", "{", "2", ",", "Ġ2", ",", "Ġ1", ",", "Ġ2", "},", "<34>", "{", "1", ",", "Ġ1", ",", "Ġ1", ",", "Ġ2", "}", "<35>", "};", "<36>", "<37>", "int", "[", "][", "]", "Ġsorted", "Mat", "Ġ=", "Ġdiagonal", "Sort", ".", "di", "agonal", "Sort", "(", "mat", ");", "<38>", "System", ".", "out", ".", "println", "(\"", "S", "orted", "ĠMatrix", "ĠDi", "agon", "ally", ":\"", ");", "<39>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġsorted", "Mat", ".", "length", ";", "Ġi", "++)", "Ġ{", "<40>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġsorted", "Mat", "[", "i", "].", "length", ";", "Ġj", "++)", "Ġ{", "<41>", "System", ".", "out", ".", "print", "(", "s", "orted", "Mat", "[", "i", "][", "j", "]", "Ġ+", "Ġ\"", "Ġ\"", ");", "<42>", "}", "<43>", "System", ".", "out", ".", "println", "();", "<44>", "}", "<45>", "}", "<46>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"38": [[0, 12], [3, 0, 9, 6]]}}
{"id": 24, "code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class FileSystem {\nprivate static class File {\nboolean isDir;\nMap<String, File> files;\nStringBuilder content;\n\npublic File(boolean isDir) {\nthis.isDir = isDir;\nif (isDir) {\nfiles = new HashMap<>();\n} else {\ncontent = new StringBuilder();\n}\n}\n}\n\nFile root;\n\npublic FileSystem() {\nroot = new File(true);\n}\n\npublic List<String> ls(String path) {\nString[] names = path.split(\"/\");\nFile cur = root;\nfor (String name : names) {\nif (!name.isEmpty()) {\ncur = cur.files.get(name);\n}\n}\nif (cur.isDir) {\nArrayList<String> strings = new ArrayList<>(cur.files.keySet());\nCollections.sort(strings);\nreturn strings;\n} else {\nreturn Collections.singletonList(names[names.length - 1]);\n}\n}\n\npublic void mkdir(String path) {\nString[] names = path.split(\"/\");\nFile cur = root;\nfor (String name : names) {\nif (!name.isEmpty()) {\nif (!cur.files.containsKey(name)) {\ncur.files.put(name, new File(true));\n}\ncur = cur.files.get(name);\n}\n}\n}\n\npublic void addContentToFile(String filePath, String content) {\nString[] names = filePath.split(\"/\");\nFile cur = root;\nfor (int i = 0; i < names.length; i++) {\nString name = names[i];\nif (!name.isEmpty()) {\nif (i == names.length - 1 && !cur.files.containsKey(name)) {\ncur.files.put(name, new File(false));\n}\ncur = cur.files.get(name);\n}\n}\ncur.content.append(content);\n}\n\npublic String readContentFromFile(String filePath) {\nString[] names = filePath.split(\"/\");\nFile cur = root;\nfor (String name : names) {\nif (!name.isEmpty()) {\ncur = cur.files.get(name);\n}\n}\nreturn cur.content.toString();\n}\n\npublic static void main(String[] args) {\nFileSystem fileSystem = new FileSystem();\nfileSystem.mkdir(\"/goowmfn\");\nSystem.out.println(fileSystem.ls(\"/\"));\nSystem.out.println(fileSystem.ls(\"/goowmfn\"));\nfileSystem.mkdir(\"/z\");\nSystem.out.println(fileSystem.ls(\"/\"));\nSystem.out.println(fileSystem.ls(\"/\"));\nfileSystem.addContentToFile(\"/goowmfn/c\", \"shetopcy\");\nSystem.out.println(fileSystem.ls(\"/goowmfn/c\"));\n\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".", "Array", "List", ";", "<1>", "import", "Ġjava", ".", "util", ".", "Col", "lections", ";", "<2>", "import", "Ġjava", ".", "util", ".", "Hash", "Map", ";", "<3>", "import", "Ġjava", ".", "util", ".", "List", ";", "<4>", "import", "Ġjava", ".", "util", ".", "Map", ";", "<5>", "<6>", "public", "Ġclass", "ĠFile", "System", "Ġ{", "<7>", "private", "Ġstatic", "Ġclass", "ĠFile", "Ġ{", "<8>", "bo", "olean", "Ġis", "Dir", ";", "<9>", "Map", "<", "String", ",", "ĠFile", ">", "Ġfiles", ";", "<10>", "String", "Builder", "Ġcontent", ";", "<11>", "<12>", "public", "ĠFile", "(", "bo", "olean", "Ġis", "Dir", ")", "Ġ{", "<13>", "this", ".", "is", "Dir", "Ġ=", "Ġis", "Dir", ";", "<14>", "if", "Ġ(", "is", "Dir", ")", "Ġ{", "<15>", "files", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<16>", "}", "Ġelse", "Ġ{", "<17>", "content", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<18>", "}", "<19>", "}", "<20>", "}", "<21>", "<22>", "File", "Ġroot", ";", "<23>", "<24>", "public", "ĠFile", "System", "()", "Ġ{", "<25>", "root", "Ġ=", "Ġnew", "ĠFile", "(", "true", ");", "<26>", "}", "<27>", "<28>", "public", "ĠList", "<", "String", ">", "Ġls", "(", "String", "Ġpath", ")", "Ġ{", "<29>", "String", "[]", "Ġnames", "Ġ=", "Ġpath", ".", "split", "(\"", "/", "\");", "<30>", "File", "Ġcur", "Ġ=", "Ġroot", ";", "<31>", "for", "Ġ(", "String", "Ġname", "Ġ:", "Ġnames", ")", "Ġ{", "<32>", "if", "Ġ(!", "name", ".", "is", "Empty", "())", "Ġ{", "<33>", "cur", "Ġ=", "Ġcur", ".", "files", ".", "get", "(", "name", ");", "<34>", "}", "<35>", "}", "<36>", "if", "Ġ(", "cur", ".", "is", "Dir", ")", "Ġ{", "<37>", "Array", "List", "<", "String", ">", "Ġstrings", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">(", "cur", ".", "files", ".", "key", "Set", "());", "<38>", "Col", "lections", ".", "sort", "(", "strings", ");", "<39>", "return", "Ġstrings", ";", "<40>", "}", "Ġelse", "Ġ{", "<41>", "return", "ĠCollections", ".", "sing", "leton", "List", "(", "names", "[", "names", ".", "length", "Ġ-", "Ġ1", "]);", "<42>", "}", "<43>", "}", "<44>", "<45>", "public", "Ġvoid", "Ġmk", "dir", "(", "String", "Ġpath", ")", "Ġ{", "<46>", "String", "[]", "Ġnames", "Ġ=", "Ġpath", ".", "split", "(\"", "/", "\");", "<47>", "File", "Ġcur", "Ġ=", "Ġroot", ";", "<48>", "for", "Ġ(", "String", "Ġname", "Ġ:", "Ġnames", ")", "Ġ{", "<49>", "if", "Ġ(!", "name", ".", "is", "Empty", "())", "Ġ{", "<50>", "if", "Ġ(!", "cur", ".", "files", ".", "cont", "ains", "Key", "(", "name", "))", "Ġ{", "<51>", "cur", ".", "files", ".", "put", "(", "name", ",", "Ġnew", "ĠFile", "(", "true", "));", "<52>", "}", "<53>", "cur", "Ġ=", "Ġcur", ".", "files", ".", "get", "(", "name", ");", "<54>", "}", "<55>", "}", "<56>", "}", "<57>", "<58>", "public", "Ġvoid", "Ġadd", "Content", "To", "File", "(", "String", "Ġfile", "Path", ",", "ĠString", "Ġcontent", ")", "Ġ{", "<59>", "String", "[]", "Ġnames", "Ġ=", "Ġfile", "Path", ".", "split", "(\"", "/", "\");", "<60>", "File", "Ġcur", "Ġ=", "Ġroot", ";", "<61>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġnames", ".", "length", ";", "Ġi", "++)", "Ġ{", "<62>", "String", "Ġname", "Ġ=", "Ġnames", "[", "i", "];", "<63>", "if", "Ġ(!", "name", ".", "is", "Empty", "())", "Ġ{", "<64>", "if", "Ġ(", "i", "Ġ==", "Ġnames", ".", "length", "Ġ-", "Ġ1", "Ġ&&", "Ġ!", "cur", ".", "files", ".", "cont", "ains", "Key", "(", "name", "))", "Ġ{", "<65>", "cur", ".", "files", ".", "put", "(", "name", ",", "Ġnew", "ĠFile", "(", "false", "));", "<66>", "}", "<67>", "cur", "Ġ=", "Ġcur", ".", "files", ".", "get", "(", "name", ");", "<68>", "}", "<69>", "}", "<70>", "cur", ".", "content", ".", "append", "(", "content", ");", "<71>", "}", "<72>", "<73>", "public", "ĠString", "Ġread", "Content", "From", "File", "(", "String", "Ġfile", "Path", ")", "Ġ{", "<74>", "String", "[]", "Ġnames", "Ġ=", "Ġfile", "Path", ".", "split", "(\"", "/", "\");", "<75>", "File", "Ġcur", "Ġ=", "Ġroot", ";", "<76>", "for", "Ġ(", "String", "Ġname", "Ġ:", "Ġnames", ")", "Ġ{", "<77>", "if", "Ġ(!", "name", ".", "is", "Empty", "())", "Ġ{", "<78>", "cur", "Ġ=", "Ġcur", ".", "files", ".", "get", "(", "name", ");", "<79>", "}", "<80>", "}", "<81>", "return", "Ġcur", ".", "content", ".", "to", "String", "();", "<82>", "}", "<83>", "<84>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<85>", "File", "System", "Ġfile", "System", "Ġ=", "Ġnew", "ĠFile", "System", "();", "<86>", "file", "System", ".", "mk", "dir", "(\"", "/", "go", "ow", "m", "fn", "\");", "<87>", "System", ".", "out", ".", "println", "(", "file", "System", ".", "ls", "(\"", "/", "\")", ");", "<88>", "System", ".", "out", ".", "println", "(", "file", "System", ".", "ls", "(\"", "/", "go", "ow", "m", "fn", "\")", ");", "<89>", "file", "System", ".", "mk", "dir", "(\"", "/", "z", "\");", "<90>", "System", ".", "out", ".", "println", "(", "file", "System", ".", "ls", "(\"", "/", "\")", ");", "<91>", "System", ".", "out", ".", "println", "(", "file", "System", ".", "ls", "(\"", "/", "\")", ");", "<92>", "file", "System", ".", "add", "Content", "To", "File", "(\"", "/", "go", "ow", "m", "fn", "/", "c", "\",", "Ġ\"", "s", "het", "op", "cy", "\");", "<93>", "System", ".", "out", ".", "println", "(", "file", "System", ".", "ls", "(\"", "/", "go", "ow", "m", "fn", "/", "c", "\")", ");", "<94>", "<95>", "}", "<96>", "}", "<97>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"93": [[12, 13], [6, 11, 3, 10]]}}
{"id": 25, "code": "import java.util.*;\n\npublic class FindBlackPixel {\npublic int findBlackPixel(char[][] picture, int N) {\nint m=picture.length; if (m==0) return 0;\nint n=picture[0].length;\nString[] rowStrings=new String[m];\nfor (int i=0;i<m;i++) rowStrings[i]=new String(picture[i]);\nint[] row=new int[m];\nHashSet<Integer>[] col=new HashSet[n];\nfor (int i=0;i<n;i++) col[i]=new HashSet<>();\nfor (int i=0;i<m;i++) {\nfor (int j=0;j<n;j++) {\nif (picture[i][j]=='B') {\nrow[i]++;\ncol[j].add(i);\n}\n}\n}\nint cnt=0;\nfor (int i=0;i<m;i++) {\nfor (int j=0;j<n;j++) {\nif (picture[i][j]=='B' && row[i]==N && col[j].size()==N) {\nboolean able=true;\nfor (int id: col[j]) {\nif (!rowStrings[id].equals(rowStrings[i])) {\nable=false;break;\n}\n}\nif (able) cnt++;\n}\n}\n}\nreturn cnt;\n}\npublic static void main(String[] args) {\nFindBlackPixel findBlackPixel = new FindBlackPixel();\nchar[][] picture = {\n{'W', 'B', 'W', 'B', 'B', 'W'},\n{'W', 'B', 'W', 'B', 'B', 'W'},\n{'W', 'B', 'W', 'B', 'B', 'W'},\n{'W', 'W', 'B', 'W', 'B', 'W'}\n};\nint N = 3;\nint result = findBlackPixel.findBlackPixel(picture, N);\nSystem.out.println(\"Number of black pixels: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠFind", "Black", "Pixel", "Ġ{", "<3>", "public", "Ġint", "Ġfind", "Black", "Pixel", "(", "char", "[", "][", "]", "Ġpicture", ",", "Ġint", "ĠN", ")", "Ġ{", "<4>", "int", "Ġm", "=", "picture", ".", "length", ";", "Ġif", "Ġ(", "m", "==", "0", ")", "Ġreturn", "Ġ0", ";", "<5>", "int", "Ġn", "=", "picture", "[", "0", "].", "length", ";", "<6>", "String", "[]", "Ġrow", "Str", "ings", "=", "new", "ĠString", "[", "m", "];", "<7>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "i", "<", "m", ";", "i", "++)", "Ġrow", "Str", "ings", "[", "i", "]=", "new", "ĠString", "(", "picture", "[", "i", "]);", "<8>", "int", "[]", "Ġrow", "=", "new", "Ġint", "[", "m", "];", "<9>", "Hash", "Set", "<", "Integer", ">", "[]", "Ġcol", "=", "new", "ĠHash", "Set", "[", "n", "];", "<10>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "i", "<", "n", ";", "i", "++)", "Ġcol", "[", "i", "]=", "new", "ĠHash", "Set", "<", ">", "();", "<11>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "i", "<", "m", ";", "i", "++)", "Ġ{", "<12>", "for", "Ġ(", "int", "Ġj", "=", "0", ";", "j", "<", "n", ";", "j", "++)", "Ġ{", "<13>", "if", "Ġ(", "picture", "[", "i", "][", "j", "]", "==", "'", "B", "')", "Ġ{", "<14>", "row", "[", "i", "]", "++;", "<15>", "col", "[", "j", "].", "add", "(", "i", ");", "<16>", "}", "<17>", "}", "<18>", "}", "<19>", "int", "Ġc", "nt", "=", "0", ";", "<20>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "i", "<", "m", ";", "i", "++)", "Ġ{", "<21>", "for", "Ġ(", "int", "Ġj", "=", "0", ";", "j", "<", "n", ";", "j", "++)", "Ġ{", "<22>", "if", "Ġ(", "picture", "[", "i", "][", "j", "]", "==", "'", "B", "'", "Ġ&&", "Ġrow", "[", "i", "]", "==", "N", "Ġ&&", "Ġcol", "[", "j", "].", "size", "()", "==", "N", ")", "Ġ{", "<23>", "bo", "olean", "Ġable", "=", "true", ";", "<24>", "for", "Ġ(", "int", "Ġid", ":", "Ġcol", "[", "j", "])", "Ġ{", "<25>", "if", "Ġ(!", "row", "Str", "ings", "[", "id", "].", "equ", "als", "(", "row", "Str", "ings", "[", "i", "]", "))", "Ġ{", "<26>", "able", "=", "false", ";", "break", ";", "<27>", "}", "<28>", "}", "<29>", "if", "Ġ(", "able", ")", "Ġc", "nt", "++;", "<30>", "}", "<31>", "}", "<32>", "}", "<33>", "return", "Ġc", "nt", ";", "<34>", "}", "<35>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<36>", "Find", "Black", "Pixel", "Ġfind", "Black", "Pixel", "Ġ=", "Ġnew", "ĠFind", "Black", "Pixel", "();", "<37>", "char", "[", "][", "]", "Ġpicture", "Ġ=", "Ġ{", "<38>", "{", "'", "W", "',", "Ġ'", "B", "',", "Ġ'", "W", "',", "Ġ'", "B", "',", "Ġ'", "B", "',", "Ġ'", "W", "'", "},", "<39>", "{", "'", "W", "',", "Ġ'", "B", "',", "Ġ'", "W", "',", "Ġ'", "B", "',", "Ġ'", "B", "',", "Ġ'", "W", "'", "},", "<40>", "{", "'", "W", "',", "Ġ'", "B", "',", "Ġ'", "W", "',", "Ġ'", "B", "',", "Ġ'", "B", "',", "Ġ'", "W", "'", "},", "<41>", "{", "'", "W", "',", "Ġ'", "W", "',", "Ġ'", "B", "',", "Ġ'", "W", "',", "Ġ'", "B", "',", "Ġ'", "W", "'", "}", "<42>", "};", "<43>", "int", "ĠN", "Ġ=", "Ġ3", ";", "<44>", "int", "Ġresult", "Ġ=", "Ġfind", "Black", "Pixel", ".", "find", "Black", "Pixel", "(", "picture", ",", "ĠN", ");", "<45>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġblack", "Ġpixels", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<46>", "}", "<47>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"45": [[13, 3], [9, 7, 12]]}}
{"id": 26, "code": "import java.util.*;\n\npublic class FindDiagonalOrder {\n\npublic int[] findDiagonalOrder(int[][] matrix) {\n\nint i , n = matrix.length;\nif (n == 0)\nreturn new int[] { };\nelse {\n\nList<Integer> list = new ArrayList<Integer>();\nint m = matrix[0].length , x = 0 , y = 0 , cnt = 0;\nboolean rightUp = true;\nwhile (cnt < n * m) {\n\nlist.add(matrix[x][y]);\nif (rightUp) {\nif (x - 1 >= 0 && y + 1 < m) {\nx --;\ny ++;\n} else {\ny ++;\nif (y >= m) {\ny = m - 1;\nx ++;\n}\nrightUp = false;\n}\n} else {\nif (x + 1 < n && y - 1 >= 0) {\nx ++;\ny --;\n} else {\nx ++;\nif (x >= n) {\nx = n - 1;\ny ++;\n}\nrightUp = true;\n}\n}\n\ncnt ++;\n}\n\nint[] ans = new int[list.size()];\nfor (i = 0;i < list.size();i ++)\nans[i] = list.get(i);\nreturn ans;\n\n}\n\n}\npublic static void main(String[] args) {\nFindDiagonalOrder solution = new FindDiagonalOrder();\nint[][] matrix = {\n{1, 2, 3},\n{4, 5, 6},\n{7, 8, 9}\n};\n\nint[] result = solution.findDiagonalOrder(matrix);\nSystem.out.println(\"Diagonal Order: \" + Arrays.toString(result));\n}\n\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠFind", "Di", "agonal", "Order", "Ġ{", "<3>", "<4>", "public", "Ġint", "[]", "Ġfind", "Di", "agonal", "Order", "(", "int", "[", "][", "]", "Ġmatrix", ")", "Ġ{", "<5>", "<6>", "int", "Ġi", "Ġ,", "Ġn", "Ġ=", "Ġmatrix", ".", "length", ";", "<7>", "if", "Ġ(", "n", "Ġ==", "Ġ0", ")", "<8>", "return", "Ġnew", "Ġint", "[]", "Ġ{", "Ġ};", "<9>", "else", "Ġ{", "<10>", "<11>", "List", "<", "Integer", ">", "Ġlist", "Ġ=", "Ġnew", "ĠArray", "List", "<", "Integer", ">", "();", "<12>", "int", "Ġm", "Ġ=", "Ġmatrix", "[", "0", "].", "length", "Ġ,", "Ġx", "Ġ=", "Ġ0", "Ġ,", "Ġy", "Ġ=", "Ġ0", "Ġ,", "Ġc", "nt", "Ġ=", "Ġ0", ";", "<13>", "bo", "olean", "Ġright", "Up", "Ġ=", "Ġtrue", ";", "<14>", "while", "Ġ(", "c", "nt", "Ġ<", "Ġn", "Ġ*", "Ġm", ")", "Ġ{", "<15>", "<16>", "list", ".", "add", "(", "mat", "rix", "[", "x", "][", "y", "]);", "<17>", "if", "Ġ(", "right", "Up", ")", "Ġ{", "<18>", "if", "Ġ(", "x", "Ġ-", "Ġ1", "Ġ>=", "Ġ0", "Ġ&&", "Ġy", "Ġ+", "Ġ1", "Ġ<", "Ġm", ")", "Ġ{", "<19>", "x", "Ġ--", ";", "<20>", "y", "Ġ++", ";", "<21>", "}", "Ġelse", "Ġ{", "<22>", "y", "Ġ++", ";", "<23>", "if", "Ġ(", "y", "Ġ>=", "Ġm", ")", "Ġ{", "<24>", "y", "Ġ=", "Ġm", "Ġ-", "Ġ1", ";", "<25>", "x", "Ġ++", ";", "<26>", "}", "<27>", "right", "Up", "Ġ=", "Ġfalse", ";", "<28>", "}", "<29>", "}", "Ġelse", "Ġ{", "<30>", "if", "Ġ(", "x", "Ġ+", "Ġ1", "Ġ<", "Ġn", "Ġ&&", "Ġy", "Ġ-", "Ġ1", "Ġ>=", "Ġ0", ")", "Ġ{", "<31>", "x", "Ġ++", ";", "<32>", "y", "Ġ--", ";", "<33>", "}", "Ġelse", "Ġ{", "<34>", "x", "Ġ++", ";", "<35>", "if", "Ġ(", "x", "Ġ>=", "Ġn", ")", "Ġ{", "<36>", "x", "Ġ=", "Ġn", "Ġ-", "Ġ1", ";", "<37>", "y", "Ġ++", ";", "<38>", "}", "<39>", "right", "Up", "Ġ=", "Ġtrue", ";", "<40>", "}", "<41>", "}", "<42>", "<43>", "c", "nt", "Ġ++", ";", "<44>", "}", "<45>", "<46>", "int", "[]", "Ġans", "Ġ=", "Ġnew", "Ġint", "[", "list", ".", "size", "()", "];", "<47>", "for", "Ġ(", "i", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġlist", ".", "size", "();", "i", "Ġ++", ")", "<48>", "ans", "[", "i", "]", "Ġ=", "Ġlist", ".", "get", "(", "i", ");", "<49>", "return", "Ġans", ";", "<50>", "<51>", "}", "<52>", "<53>", "}", "<54>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<55>", "Find", "Di", "agonal", "Order", "Ġsolution", "Ġ=", "Ġnew", "ĠFind", "Di", "agonal", "Order", "();", "<56>", "int", "[", "][", "]", "Ġmatrix", "Ġ=", "Ġ{", "<57>", "{", "1", ",", "Ġ2", ",", "Ġ3", "},", "<58>", "{", "4", ",", "Ġ5", ",", "Ġ6", "},", "<59>", "{", "7", ",", "Ġ8", ",", "Ġ9", "}", "<60>", "};", "<61>", "<62>", "int", "[]", "Ġresult", "Ġ=", "Ġsolution", ".", "find", "Di", "agonal", "Order", "(", "mat", "rix", ");", "<63>", "System", ".", "out", ".", "println", "(\"", "Di", "agonal", "ĠOrder", ":", "Ġ\"", "Ġ+", "ĠAr", "rays", ".", "to", "String", "(", "result", "));", "<64>", "}", "<65>", "<66>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"63": [[10, 12, 9, 14], [12]]}}
{"id": 27, "code": "class FindGoodStrings {\nint mod = 1000000007;\npublic int findGoodStrings(int n, String s1, String s2, String evil) {\nint[] mp = mpTable(evil.toCharArray());\nlong ret = count(s2.toCharArray(), n, mp, evil.toCharArray()) - count(s1.toCharArray(), n, mp, evil.toCharArray()) + mod;\nif(s1.indexOf(evil) < 0)ret++;\nreturn (int)(ret%mod);\n\n}\n\nlong count(char[] s, int n, int[] mp, char[] needle)\n{\nint m = mp.length-1;\nlong[] dp = new long[m];\ndp[0] = 1;\nint edge = 0;\nfor(int i = 0;i < n;i++){\nlong[] ndp = new long[m];\nfor(int j = 0;j < m;j++){\nfor(int k = 0;k < 26;k++){\nint p = j;\nwhile(p >= 0 && needle[p]-'a' != k){\np = mp[p];\n}\nif(++p < needle.length){\nndp[p] += dp[j];\nif(ndp[p] >= mod)ndp[p] -= mod;\n}\n}\n}\nif(edge != needle.length){\nfor(int k = 0;k < s[i]-'a';k++){\nint p = edge;\nwhile(p >= 0 && needle[p]-'a' != k){\np = mp[p];\n}\nif(++p < needle.length){\nndp[p] += 1;\nif(ndp[p] >= mod)ndp[p] -= mod;\n}\n}\n\nint p = edge;\nwhile(p >= 0 && needle[p] != s[i]){\np = mp[p];\n}\n++p;\nedge = p;\n}\n\ndp = ndp;\n}\n\nlong ret = 0;\nif(edge != needle.length)ret++;\nfor(long v : dp)ret += v;\nreturn ret%mod;\n}\n\npublic int[] mpTable(char[] str)\n{\nint n = str.length;\nint[] mp = new int[n+1];\nmp[0] = -1;\nfor(int i = 1, j = 0;i < n;i++){\nwhile(j >= 0 && str[i] != str[j])j = mp[j];\nmp[i+1] = ++j;\n}\nreturn mp;\n}\npublic static void main(String[] args) {\nFindGoodStrings findGoodStrings = new FindGoodStrings();\nint n = 3;\nString s1 = \"abc\";\nString s2 = \"bcd\";\nString evil = \"c\";\n\nint result = findGoodStrings.findGoodStrings(n, s1, s2, evil);\nSystem.out.println(\"Number of good strings: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "class", "ĠFind", "Good", "Str", "ings", "Ġ{", "<1>", "int", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<2>", "public", "Ġint", "Ġfind", "Good", "Str", "ings", "(", "int", "Ġn", ",", "ĠString", "Ġs", "1", ",", "ĠString", "Ġs", "2", ",", "ĠString", "Ġevil", ")", "Ġ{", "<3>", "int", "[]", "Ġmp", "Ġ=", "Ġmp", "Table", "(", "evil", ".", "to", "Char", "Array", "());", "<4>", "long", "Ġret", "Ġ=", "Ġcount", "(", "s", "2", ".", "to", "Char", "Array", "(),", "Ġn", ",", "Ġmp", ",", "Ġevil", ".", "to", "Char", "Array", "())", "Ġ-", "Ġcount", "(", "s", "1", ".", "to", "Char", "Array", "(),", "Ġn", ",", "Ġmp", ",", "Ġevil", ".", "to", "Char", "Array", "())", "Ġ+", "Ġmod", ";", "<5>", "if", "(", "s", "1", ".", "index", "Of", "(", "evil", ")", "Ġ<", "Ġ0", ")", "ret", "++;", "<6>", "return", "Ġ(", "int", ")(", "ret", "%", "mod", ");", "<7>", "<8>", "}", "<9>", "<10>", "long", "Ġcount", "(", "char", "[]", "Ġs", ",", "Ġint", "Ġn", ",", "Ġint", "[]", "Ġmp", ",", "Ġchar", "[]", "Ġneedle", ")", "<11>", "{", "<12>", "int", "Ġm", "Ġ=", "Ġmp", ".", "length", "-", "1", ";", "<13>", "long", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġlong", "[", "m", "];", "<14>", "dp", "[", "0", "]", "Ġ=", "Ġ1", ";", "<15>", "int", "Ġedge", "Ġ=", "Ġ0", ";", "<16>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<17>", "long", "[]", "Ġn", "dp", "Ġ=", "Ġnew", "Ġlong", "[", "m", "];", "<18>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<19>", "for", "(", "int", "Ġk", "Ġ=", "Ġ0", ";", "k", "Ġ<", "Ġ26", ";", "k", "++", "){", "<20>", "int", "Ġp", "Ġ=", "Ġj", ";", "<21>", "while", "(", "p", "Ġ>=", "Ġ0", "Ġ&&", "Ġneedle", "[", "p", "]", "-'", "a", "'", "Ġ!=", "Ġk", "){", "<22>", "p", "Ġ=", "Ġmp", "[", "p", "];", "<23>", "}", "<24>", "if", "(", "++", "p", "Ġ<", "Ġneedle", ".", "length", "){", "<25>", "nd", "p", "[", "p", "]", "Ġ+=", "Ġd", "p", "[", "j", "];", "<26>", "if", "(", "nd", "p", "[", "p", "]", "Ġ>=", "Ġmod", ")", "nd", "p", "[", "p", "]", "Ġ-=", "Ġmod", ";", "<27>", "}", "<28>", "}", "<29>", "}", "<30>", "if", "(", "edge", "Ġ!=", "Ġneedle", ".", "length", "){", "<31>", "for", "(", "int", "Ġk", "Ġ=", "Ġ0", ";", "k", "Ġ<", "Ġs", "[", "i", "]", "-'", "a", "';", "k", "++", "){", "<32>", "int", "Ġp", "Ġ=", "Ġedge", ";", "<33>", "while", "(", "p", "Ġ>=", "Ġ0", "Ġ&&", "Ġneedle", "[", "p", "]", "-'", "a", "'", "Ġ!=", "Ġk", "){", "<34>", "p", "Ġ=", "Ġmp", "[", "p", "];", "<35>", "}", "<36>", "if", "(", "++", "p", "Ġ<", "Ġneedle", ".", "length", "){", "<37>", "nd", "p", "[", "p", "]", "Ġ+=", "Ġ1", ";", "<38>", "if", "(", "nd", "p", "[", "p", "]", "Ġ>=", "Ġmod", ")", "nd", "p", "[", "p", "]", "Ġ-=", "Ġmod", ";", "<39>", "}", "<40>", "}", "<41>", "<42>", "int", "Ġp", "Ġ=", "Ġedge", ";", "<43>", "while", "(", "p", "Ġ>=", "Ġ0", "Ġ&&", "Ġneedle", "[", "p", "]", "Ġ!=", "Ġs", "[", "i", "])", "{", "<44>", "p", "Ġ=", "Ġmp", "[", "p", "];", "<45>", "}", "<46>", "++", "p", ";", "<47>", "edge", "Ġ=", "Ġp", ";", "<48>", "}", "<49>", "<50>", "dp", "Ġ=", "Ġn", "dp", ";", "<51>", "}", "<52>", "<53>", "long", "Ġret", "Ġ=", "Ġ0", ";", "<54>", "if", "(", "edge", "Ġ!=", "Ġneedle", ".", "length", ")", "ret", "++;", "<55>", "for", "(", "long", "Ġv", "Ġ:", "Ġd", "p", ")", "ret", "Ġ+=", "Ġv", ";", "<56>", "return", "Ġret", "%", "mod", ";", "<57>", "}", "<58>", "<59>", "public", "Ġint", "[]", "Ġmp", "Table", "(", "char", "[]", "Ġstr", ")", "<60>", "{", "<61>", "int", "Ġn", "Ġ=", "Ġstr", ".", "length", ";", "<62>", "int", "[]", "Ġmp", "Ġ=", "Ġnew", "Ġint", "[", "n", "+", "1", "];", "<63>", "mp", "[", "0", "]", "Ġ=", "Ġ-", "1", ";", "<64>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ",", "Ġj", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<65>", "while", "(", "j", "Ġ>=", "Ġ0", "Ġ&&", "Ġstr", "[", "i", "]", "Ġ!=", "Ġstr", "[", "j", "])", "j", "Ġ=", "Ġmp", "[", "j", "];", "<66>", "mp", "[", "i", "+", "1", "]", "Ġ=", "Ġ++", "j", ";", "<67>", "}", "<68>", "return", "Ġmp", ";", "<69>", "}", "<70>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<71>", "Find", "Good", "Str", "ings", "Ġfind", "Good", "Str", "ings", "Ġ=", "Ġnew", "ĠFind", "Good", "Str", "ings", "();", "<72>", "int", "Ġn", "Ġ=", "Ġ3", ";", "<73>", "String", "Ġs", "1", "Ġ=", "Ġ\"", "abc", "\";", "<74>", "String", "Ġs", "2", "Ġ=", "Ġ\"", "b", "cd", "\";", "<75>", "String", "Ġevil", "Ġ=", "Ġ\"", "c", "\";", "<76>", "<77>", "int", "Ġresult", "Ġ=", "Ġfind", "Good", "Str", "ings", ".", "find", "Good", "Str", "ings", "(", "n", ",", "Ġs", "1", ",", "Ġs", "2", ",", "Ġevil", ");", "<78>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġgood", "Ġstrings", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<79>", "}", "<80>", "<81>", "}", "<82>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"85": [[8], [5]]}}
{"id": 28, "code": "public class FindMaxConsecutiveOnes {\npublic int findMaxConsecutiveOnes(int[] nums) {\nint n = nums.length, con = 0, res = 0;\nint[] dp = new int [n];\nfor (int i = 0; i < n; i ++) {\nif (nums[i] == 1) {\ncon ++;\ndp[i] = con;\n} else {\ncon = 0;\n}\n}\ncon = 0;\nfor (int i = n - 1; i >= 0; i --) {\nint head = i - 1 >= 0 ? dp[i - 1] : 0;\nint one = head + con + 1;\nres = Math.max(one, res);\nif (nums[i] == 1) {\ncon ++;\n} else con = 0;\n}\nreturn res;\n}\npublic static void main(String[] args) {\nFindMaxConsecutiveOnes findMaxConsecutiveOnes = new FindMaxConsecutiveOnes();\nint[] nums = {1, 0, 1, 1, 0};\nint result = findMaxConsecutiveOnes.findMaxConsecutiveOnes(nums);\nSystem.out.println(\"Maximum number of consecutive ones: \" + result);\n}\n}", "code_tokens": ["<0>", "public", "Ġclass", "ĠFind", "Max", "Con", "secut", "ive", "On", "es", "Ġ{", "<1>", "public", "Ġint", "Ġfind", "Max", "Con", "secut", "ive", "On", "es", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġnum", "s", ".", "length", ",", "Ġcon", "Ġ=", "Ġ0", ",", "Ġres", "Ġ=", "Ġ0", ";", "<3>", "int", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "Ġ[", "n", "];", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "Ġ++", ")", "Ġ{", "<5>", "if", "Ġ(", "n", "ums", "[", "i", "]", "Ġ==", "Ġ1", ")", "Ġ{", "<6>", "con", "Ġ++", ";", "<7>", "dp", "[", "i", "]", "Ġ=", "Ġcon", ";", "<8>", "}", "Ġelse", "Ġ{", "<9>", "con", "Ġ=", "Ġ0", ";", "<10>", "}", "<11>", "}", "<12>", "con", "Ġ=", "Ġ0", ";", "<13>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġn", "Ġ-", "Ġ1", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġi", "Ġ--", ")", "Ġ{", "<14>", "int", "Ġhead", "Ġ=", "Ġi", "Ġ-", "Ġ1", "Ġ>=", "Ġ0", "Ġ?", "Ġd", "p", "[", "i", "Ġ-", "Ġ1", "]", "Ġ:", "Ġ0", ";", "<15>", "int", "Ġone", "Ġ=", "Ġhead", "Ġ+", "Ġcon", "Ġ+", "Ġ1", ";", "<16>", "res", "Ġ=", "ĠMath", ".", "max", "(", "one", ",", "Ġres", ");", "<17>", "if", "Ġ(", "n", "ums", "[", "i", "]", "Ġ==", "Ġ1", ")", "Ġ{", "<18>", "con", "Ġ++", ";", "<19>", "}", "Ġelse", "Ġcon", "Ġ=", "Ġ0", ";", "<20>", "}", "<21>", "return", "Ġres", ";", "<22>", "}", "<23>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<24>", "Find", "Max", "Con", "secut", "ive", "On", "es", "Ġfind", "Max", "Con", "secut", "ive", "On", "es", "Ġ=", "Ġnew", "ĠFind", "Max", "Con", "secut", "ive", "On", "es", "();", "<25>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "1", ",", "Ġ0", ",", "Ġ1", ",", "Ġ1", ",", "Ġ0", "};", "<26>", "int", "Ġresult", "Ġ=", "Ġfind", "Max", "Con", "secut", "ive", "On", "es", ".", "find", "Max", "Con", "secut", "ive", "On", "es", "(", "n", "ums", ");", "<27>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġnumber", "Ġof", "Ġconsecutive", "Ġones", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<28>", "}", "<29>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"27": [[14, 8, 2, 5], [13, 13, 13]]}}
{"id": 29, "code": "import java.util.*;\n\npublic class FindValueMostElement {\npublic class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\n\nTreeNode(int x) {\nthis.val = x;\n}\n}\n\npublic int[] findValueMostElement(TreeNode root) {\nif (root == null) return new int[0];\nList<Integer> level = new LinkedList<>();\n\nQueue<TreeNode> que = new LinkedList<>();\nque.add(root);\n\nwhile (!que.isEmpty()) {\nint currMax = que.peek().val;\nint size = que.size();\n\nwhile (size-- > 0) {\nTreeNode curr = que.remove();\n\nif (curr.left != null) que.add(curr.left);\nif (curr.right != null) que.add(curr.right);\ncurrMax = Math.max(currMax, curr.val);\n}\n\nlevel.add(currMax);\n}\n\nint[] maxLevel = new int[level.size()];\nint i = 0;\nfor (int c : level) {\nmaxLevel[i++] = c;\n}\nreturn maxLevel;\n}\npublic static void main(String[] args) {\nFindValueMostElement solution = new FindValueMostElement();\n\nTreeNode root = solution.new TreeNode(1);\nroot.left = solution.new TreeNode(3);\nroot.right = solution.new TreeNode(2);\nroot.left.left = solution.new TreeNode(5);\nroot.left.right = solution.new TreeNode(3);\nroot.right.right = solution.new TreeNode(9);\n\nint[] result = solution.findValueMostElement(root);\nSystem.out.println(\"The maximum value at each level is: \" + Arrays.toString(result));\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠFind", "Value", "Most", "Element", "Ġ{", "<3>", "public", "Ġclass", "ĠTree", "Node", "Ġ{", "<4>", "int", "Ġval", ";", "<5>", "Tree", "Node", "Ġleft", ";", "<6>", "Tree", "Node", "Ġright", ";", "<7>", "<8>", "Tree", "Node", "(", "int", "Ġx", ")", "Ġ{", "<9>", "this", ".", "val", "Ġ=", "Ġx", ";", "<10>", "}", "<11>", "}", "<12>", "<13>", "public", "Ġint", "[]", "Ġfind", "Value", "Most", "Element", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<14>", "if", "Ġ(", "root", "Ġ==", "Ġnull", ")", "Ġreturn", "Ġnew", "Ġint", "[", "0", "];", "<15>", "List", "<", "Integer", ">", "Ġlevel", "Ġ=", "Ġnew", "ĠLink", "ed", "List", "<", ">", "();", "<16>", "<17>", "Queue", "<", "Tree", "Node", ">", "Ġque", "Ġ=", "Ġnew", "ĠLink", "ed", "List", "<", ">", "();", "<18>", "que", ".", "add", "(", "root", ");", "<19>", "<20>", "while", "Ġ(!", "que", ".", "is", "Empty", "())", "Ġ{", "<21>", "int", "Ġcur", "r", "Max", "Ġ=", "Ġque", ".", "pe", "ek", "().", "val", ";", "<22>", "int", "Ġsize", "Ġ=", "Ġque", ".", "size", "();", "<23>", "<24>", "while", "Ġ(", "size", "--", "Ġ>", "Ġ0", ")", "Ġ{", "<25>", "Tree", "Node", "Ġcur", "r", "Ġ=", "Ġque", ".", "remove", "();", "<26>", "<27>", "if", "Ġ(", "cur", "r", ".", "left", "Ġ!=", "Ġnull", ")", "Ġque", ".", "add", "(", "cur", "r", ".", "left", ");", "<28>", "if", "Ġ(", "cur", "r", ".", "right", "Ġ!=", "Ġnull", ")", "Ġque", ".", "add", "(", "cur", "r", ".", "right", ");", "<29>", "cur", "r", "Max", "Ġ=", "ĠMath", ".", "max", "(", "cur", "r", "Max", ",", "Ġcur", "r", ".", "val", ");", "<30>", "}", "<31>", "<32>", "level", ".", "add", "(", "cur", "r", "Max", ");", "<33>", "}", "<34>", "<35>", "int", "[]", "Ġmax", "Level", "Ġ=", "Ġnew", "Ġint", "[", "level", ".", "size", "()", "];", "<36>", "int", "Ġi", "Ġ=", "Ġ0", ";", "<37>", "for", "Ġ(", "int", "Ġc", "Ġ:", "Ġlevel", ")", "Ġ{", "<38>", "max", "Level", "[", "i", "++", "]", "Ġ=", "Ġc", ";", "<39>", "}", "<40>", "return", "Ġmax", "Level", ";", "<41>", "}", "<42>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<43>", "Find", "Value", "Most", "Element", "Ġsolution", "Ġ=", "Ġnew", "ĠFind", "Value", "Most", "Element", "();", "<44>", "<45>", "Tree", "Node", "Ġroot", "Ġ=", "Ġsolution", ".", "new", "ĠTree", "Node", "(", "1", ");", "<46>", "root", ".", "left", "Ġ=", "Ġsolution", ".", "new", "ĠTree", "Node", "(", "3", ");", "<47>", "root", ".", "right", "Ġ=", "Ġsolution", ".", "new", "ĠTree", "Node", "(", "2", ");", "<48>", "root", ".", "left", ".", "left", "Ġ=", "Ġsolution", ".", "new", "ĠTree", "Node", "(", "5", ");", "<49>", "root", ".", "left", ".", "right", "Ġ=", "Ġsolution", ".", "new", "ĠTree", "Node", "(", "3", ");", "<50>", "root", ".", "right", ".", "right", "Ġ=", "Ġsolution", ".", "new", "ĠTree", "Node", "(", "9", ");", "<51>", "<52>", "int", "[]", "Ġresult", "Ġ=", "Ġsolution", ".", "find", "Value", "Most", "Element", "(", "root", ");", "<53>", "System", ".", "out", ".", "println", "(\"", "The", "Ġmaximum", "Ġvalue", "Ġat", "Ġeach", "Ġlevel", "Ġis", ":", "Ġ\"", "Ġ+", "ĠAr", "rays", ".", "to", "String", "(", "result", "));", "<54>", "}", "<55>", "}", "<56>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"59": [[8, 11], [10, 6, 1]]}}
{"id": 30, "code": "import java.util.*;\n\n\n\nclass FlipMatchVoyage {\npublic static class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\nTreeNode(int x) { val = x; }\n}\n\nSet<TreeNode> flipped = new HashSet<>();\nMap<TreeNode, TreeNode> parent = new HashMap<>();\nint index = 0;\nList<Integer> ans;\n\npublic List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {\nflipped = new HashSet<>();\nparent = new HashMap<>();\nindex = 0;\nans = new ArrayList<>();\n\nList<Integer> allValues = new ArrayList<>();\nvisitAll(root, allValues);\nif (allValues.size() != voyage.length) {\nans.add(-1);\nreturn ans;\n}\n\ngenParent(root);\n\nfor (int i = 0; i < voyage.length; i++) {\nindex = 0;\nint ret = dfs(root, voyage);\nif (ret == 0) return ans;\nelse if (ret == -1) {\nans = new ArrayList<>();\nans.add(-1);\nreturn ans;\n}\n}\n\nreturn ans;\n}\n\nprivate void visitAll(TreeNode root, List<Integer> list) {\nif (root == null) return;\nlist.add(root.val);\nvisitAll(root.left, list);\nvisitAll(root.right, list);\n}\n\nprivate void genParent(TreeNode root) {\nif (root == null) {\nreturn;\n}\nif (root.left != null) {\nparent.put(root.left, root);\n}\n\nif (root.right != null) {\nparent.put(root.right, root);\n}\n\ngenParent(root.left);\ngenParent(root.right);\n}\n\nprivate int dfs(TreeNode root, int[] voyage) {\nif (root == null) return 0;\n\nif (root.val != voyage[index]) {\nTreeNode p = parent.get(root);\nif (p == null || flipped.contains(p)) {\nans = new ArrayList<>();\nans.add(-1);\nreturn -1;\n} else {\nans.add(p.val);\nflipped.add(p);\nTreeNode t = p.left;\np.left = p.right;\np.right = t;\n}\nreturn 1;\n} else {\nif (root.left != null) {\nindex++;\nint ret = dfs(root.left, voyage);\nif (ret != 0) return ret;\n}\n\nif (root.right != null) {\nindex++;\nint ret = dfs(root.right, voyage);\nif (ret != 0) return ret;\n}\n\nreturn 0;\n}\n}\n\n\npublic static void main(String[] args) {\nFlipMatchVoyage solution = new FlipMatchVoyage();\nTreeNode root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\n\nint[] voyage = {1, 3, 2};\nList<Integer> result = solution.flipMatchVoyage(root, voyage);\nSystem.out.println(\"Result: \" + result);\n}\n\n\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "<3>", "<4>", "class", "ĠFlip", "Match", "V", "oy", "age", "Ġ{", "<5>", "public", "Ġstatic", "Ġclass", "ĠTree", "Node", "Ġ{", "<6>", "int", "Ġval", ";", "<7>", "Tree", "Node", "Ġleft", ";", "<8>", "Tree", "Node", "Ġright", ";", "<9>", "Tree", "Node", "(", "int", "Ġx", ")", "Ġ{", "Ġval", "Ġ=", "Ġx", ";", "Ġ}", "<10>", "}", "<11>", "<12>", "Set", "<", "Tree", "Node", ">", "Ġflipped", "Ġ=", "Ġnew", "ĠHash", "Set", "<", ">", "();", "<13>", "Map", "<", "Tree", "Node", ",", "ĠTree", "Node", ">", "Ġparent", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<14>", "int", "Ġindex", "Ġ=", "Ġ0", ";", "<15>", "List", "<", "Integer", ">", "Ġans", ";", "<16>", "<17>", "public", "ĠList", "<", "Integer", ">", "Ġflip", "Match", "V", "oy", "age", "(", "Tree", "Node", "Ġroot", ",", "Ġint", "[]", "Ġvoyage", ")", "Ġ{", "<18>", "fl", "ipped", "Ġ=", "Ġnew", "ĠHash", "Set", "<", ">", "();", "<19>", "parent", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<20>", "index", "Ġ=", "Ġ0", ";", "<21>", "ans", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<22>", "<23>", "List", "<", "Integer", ">", "Ġall", "Values", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<24>", "vis", "it", "All", "(", "root", ",", "Ġall", "Values", ");", "<25>", "if", "Ġ(", "all", "Values", ".", "size", "()", "Ġ!=", "Ġvoyage", ".", "length", ")", "Ġ{", "<26>", "ans", ".", "add", "(-", "1", ");", "<27>", "return", "Ġans", ";", "<28>", "}", "<29>", "<30>", "gen", "Parent", "(", "root", ");", "<31>", "<32>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġvoyage", ".", "length", ";", "Ġi", "++)", "Ġ{", "<33>", "index", "Ġ=", "Ġ0", ";", "<34>", "int", "Ġret", "Ġ=", "Ġd", "fs", "(", "root", ",", "Ġvoyage", ");", "<35>", "if", "Ġ(", "ret", "Ġ==", "Ġ0", ")", "Ġreturn", "Ġans", ";", "<36>", "else", "Ġif", "Ġ(", "ret", "Ġ==", "Ġ-", "1", ")", "Ġ{", "<37>", "ans", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<38>", "ans", ".", "add", "(-", "1", ");", "<39>", "return", "Ġans", ";", "<40>", "}", "<41>", "}", "<42>", "<43>", "return", "Ġans", ";", "<44>", "}", "<45>", "<46>", "private", "Ġvoid", "Ġvisit", "All", "(", "Tree", "Node", "Ġroot", ",", "ĠList", "<", "Integer", ">", "Ġlist", ")", "Ġ{", "<47>", "if", "Ġ(", "root", "Ġ==", "Ġnull", ")", "Ġreturn", ";", "<48>", "list", ".", "add", "(", "root", ".", "val", ");", "<49>", "vis", "it", "All", "(", "root", ".", "left", ",", "Ġlist", ");", "<50>", "vis", "it", "All", "(", "root", ".", "right", ",", "Ġlist", ");", "<51>", "}", "<52>", "<53>", "private", "Ġvoid", "Ġgen", "Parent", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<54>", "if", "Ġ(", "root", "Ġ==", "Ġnull", ")", "Ġ{", "<55>", "return", ";", "<56>", "}", "<57>", "if", "Ġ(", "root", ".", "left", "Ġ!=", "Ġnull", ")", "Ġ{", "<58>", "parent", ".", "put", "(", "root", ".", "left", ",", "Ġroot", ");", "<59>", "}", "<60>", "<61>", "if", "Ġ(", "root", ".", "right", "Ġ!=", "Ġnull", ")", "Ġ{", "<62>", "parent", ".", "put", "(", "root", ".", "right", ",", "Ġroot", ");", "<63>", "}", "<64>", "<65>", "gen", "Parent", "(", "root", ".", "left", ");", "<66>", "gen", "Parent", "(", "root", ".", "right", ");", "<67>", "}", "<68>", "<69>", "private", "Ġint", "Ġd", "fs", "(", "Tree", "Node", "Ġroot", ",", "Ġint", "[]", "Ġvoyage", ")", "Ġ{", "<70>", "if", "Ġ(", "root", "Ġ==", "Ġnull", ")", "Ġreturn", "Ġ0", ";", "<71>", "<72>", "if", "Ġ(", "root", ".", "val", "Ġ!=", "Ġvoyage", "[", "index", "])", "Ġ{", "<73>", "Tree", "Node", "Ġp", "Ġ=", "Ġparent", ".", "get", "(", "root", ");", "<74>", "if", "Ġ(", "p", "Ġ==", "Ġnull", "Ġ||", "Ġflipped", ".", "cont", "ains", "(", "p", "))", "Ġ{", "<75>", "ans", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<76>", "ans", ".", "add", "(-", "1", ");", "<77>", "return", "Ġ-", "1", ";", "<78>", "}", "Ġelse", "Ġ{", "<79>", "ans", ".", "add", "(", "p", ".", "val", ");", "<80>", "fl", "ipped", ".", "add", "(", "p", ");", "<81>", "Tree", "Node", "Ġt", "Ġ=", "Ġp", ".", "left", ";", "<82>", "p", ".", "left", "Ġ=", "Ġp", ".", "right", ";", "<83>", "p", ".", "right", "Ġ=", "Ġt", ";", "<84>", "}", "<85>", "return", "Ġ1", ";", "<86>", "}", "Ġelse", "Ġ{", "<87>", "if", "Ġ(", "root", ".", "left", "Ġ!=", "Ġnull", ")", "Ġ{", "<88>", "index", "++;", "<89>", "int", "Ġret", "Ġ=", "Ġd", "fs", "(", "root", ".", "left", ",", "Ġvoyage", ");", "<90>", "if", "Ġ(", "ret", "Ġ!=", "Ġ0", ")", "Ġreturn", "Ġret", ";", "<91>", "}", "<92>", "<93>", "if", "Ġ(", "root", ".", "right", "Ġ!=", "Ġnull", ")", "Ġ{", "<94>", "index", "++;", "<95>", "int", "Ġret", "Ġ=", "Ġd", "fs", "(", "root", ".", "right", ",", "Ġvoyage", ");", "<96>", "if", "Ġ(", "ret", "Ġ!=", "Ġ0", ")", "Ġreturn", "Ġret", ";", "<97>", "}", "<98>", "<99>", "return", "Ġ0", ";", "<100>", "}", "<101>", "}", "<102>", "<103>", "<104>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<105>", "Fl", "ip", "Match", "V", "oy", "age", "Ġsolution", "Ġ=", "Ġnew", "ĠFlip", "Match", "V", "oy", "age", "();", "<106>", "Tree", "Node", "Ġroot", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "1", ");", "<107>", "root", ".", "left", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "2", ");", "<108>", "root", ".", "right", "Ġ=", "Ġnew", "ĠTree", "Node", "(", "3", ");", "<109>", "<110>", "int", "[]", "Ġvoyage", "Ġ=", "Ġ{", "1", ",", "Ġ3", ",", "Ġ2", "};", "<111>", "List", "<", "Integer", ">", "Ġresult", "Ġ=", "Ġsolution", ".", "fl", "ip", "Match", "V", "oy", "age", "(", "root", ",", "Ġvoyage", ");", "<112>", "System", ".", "out", ".", "println", "(\"", "Result", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<113>", "}", "<114>", "<115>", "<116>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"121": [[11, 14], [5, 4, 12, 6]]}}
{"id": 31, "code": "import java.util.*;\nclass FreqStack {\nMap<Integer, Integer> map = new HashMap<>(); // heap-id\nMap<Integer, Deque<Integer>> dqs = new HashMap<>();\nMinHeapL h = new MinHeapL(10010);\nint[] imap = new int[10010];\nint gen = 0;\nint time = 0;\nlong O = 1000000000;\n\npublic FreqStack() {\n\n}\n\npublic void push(int x) {\nif(!map.containsKey(x)){\nimap[gen] = x;\nmap.put(x, gen++);\ndqs.put(x, new ArrayDeque<>());\n}\nh.update(map.get(x), O-dqs.get(x).size()-1<<32|O-time);\ndqs.get(x).addLast(time++);\n}\n\npublic int pop() {\nint argmin = h.argmin();\nh.remove(argmin);\nint x = imap[argmin];\ndqs.get(x).pollLast();\nif(!dqs.get(x).isEmpty()){\nh.update(map.get(x), O-dqs.get(x).size()<<32|O-dqs.get(x).peekLast());\n}\nreturn x;\n}\n\nclass MinHeapL {\npublic long[] a;\npublic int[] map;\npublic int[] imap;\npublic int n;\npublic int pos;\npublic long INF = Long.MAX_VALUE;\n\npublic MinHeapL(int m)\n{\nn = Integer.highestOneBit((m+1)<<1);\na = new long[n];\nmap = new int[n];\nimap = new int[n];\nArrays.fill(a, INF);\nArrays.fill(map, -1);\nArrays.fill(imap, -1);\npos = 1;\n}\n\npublic long add(int ind, long x)\n{\nint ret = imap[ind];\nif(imap[ind] < 0){\na[pos] = x; map[pos] = ind; imap[ind] = pos;\npos++;\nup(pos-1);\n}\nreturn ret != -1 ? a[ret] : x;\n}\n\npublic long update(int ind, long x)\n{\nint ret = imap[ind];\nif(imap[ind] < 0){\na[pos] = x; map[pos] = ind; imap[ind] = pos;\npos++;\nup(pos-1);\n}else{\na[ret] = x;\nup(ret);\ndown(ret);\n}\nreturn x;\n}\n\npublic long remove(int ind)\n{\nif(pos == 1)return INF;\nif(imap[ind] == -1)return INF;\n\npos--;\nint rem = imap[ind];\nlong ret = a[rem];\nmap[rem] = map[pos];\nimap[map[pos]] = rem;\nimap[ind] = -1;\na[rem] = a[pos];\na[pos] = INF;\nmap[pos] = -1;\n\nup(rem);\ndown(rem);\nreturn ret;\n}\n\npublic long min() { return a[1]; }\npublic int argmin() { return map[1]; }\npublic int size() {\treturn pos-1; }\n\nprivate void up(int cur)\n{\nfor(int c = cur, p = c>>>1;p >= 1 && a[p] > a[c];c>>>=1, p>>>=1){\nlong d = a[p]; a[p] = a[c]; a[c] = d;\nint e = imap[map[p]]; imap[map[p]] = imap[map[c]]; imap[map[c]] = e;\ne = map[p]; map[p] = map[c]; map[c] = e;\n}\n}\n\nprivate void down(int cur)\n{\nfor(int c = cur;2*c < pos;){\nint b = a[2*c] < a[2*c+1] ? 2*c : 2*c+1;\nif(a[b] < a[c]){\nlong d = a[c]; a[c] = a[b]; a[b] = d;\nint e = imap[map[c]]; imap[map[c]] = imap[map[b]]; imap[map[b]] = e;\ne = map[c]; map[c] = map[b]; map[b] = e;\nc = b;\n}else{\nbreak;\n}\n}\n}\n}\npublic static void main(String[] args) {\nFreqStack freqStack = new FreqStack();\n\nfreqStack.push(5);\nfreqStack.push(7);\nfreqStack.push(5);\nfreqStack.push(7);\nfreqStack.push(4);\nfreqStack.push(5);\n\nSystem.out.println(freqStack.pop()); // should return 5\nSystem.out.println(freqStack.pop()); // should return 7\nSystem.out.println(freqStack.pop()); // should return 5\nSystem.out.println(freqStack.pop()); // should return 4\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠFre", "q", "Stack", "Ġ{", "<2>", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġmap", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "Ġ//", "Ġheap", "-", "id", "<3>", "Map", "<", "Integer", ",", "ĠDe", "que", "<", "Integer", ">>", "Ġd", "qs", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<4>", "Min", "He", "ap", "L", "Ġh", "Ġ=", "Ġnew", "ĠMin", "He", "ap", "L", "(", "100", "10", ");", "<5>", "int", "[]", "Ġim", "ap", "Ġ=", "Ġnew", "Ġint", "[", "100", "10", "];", "<6>", "int", "Ġgen", "Ġ=", "Ġ0", ";", "<7>", "int", "Ġtime", "Ġ=", "Ġ0", ";", "<8>", "long", "ĠO", "Ġ=", "Ġ100", "0000000", ";", "<9>", "<10>", "public", "ĠFre", "q", "Stack", "()", "Ġ{", "<11>", "<12>", "}", "<13>", "<14>", "public", "Ġvoid", "Ġpush", "(", "int", "Ġx", ")", "Ġ{", "<15>", "if", "(", "!", "map", ".", "cont", "ains", "Key", "(", "x", "))", "{", "<16>", "im", "ap", "[", "gen", "]", "Ġ=", "Ġx", ";", "<17>", "map", ".", "put", "(", "x", ",", "Ġgen", "++", ");", "<18>", "d", "qs", ".", "put", "(", "x", ",", "Ġnew", "ĠArray", "De", "que", "<", ">", "());", "<19>", "}", "<20>", "h", ".", "update", "(", "map", ".", "get", "(", "x", "),", "ĠO", "-", "d", "qs", ".", "get", "(", "x", ").", "size", "()", "-", "1", "<<", "32", "|", "O", "-", "time", ");", "<21>", "d", "qs", ".", "get", "(", "x", ").", "add", "Last", "(", "time", "++", ");", "<22>", "}", "<23>", "<24>", "public", "Ġint", "Ġpop", "()", "Ġ{", "<25>", "int", "Ġarg", "min", "Ġ=", "Ġh", ".", "arg", "min", "();", "<26>", "h", ".", "remove", "(", "arg", "min", ");", "<27>", "int", "Ġx", "Ġ=", "Ġim", "ap", "[", "arg", "min", "];", "<28>", "d", "qs", ".", "get", "(", "x", ").", "poll", "Last", "();", "<29>", "if", "(", "!", "d", "qs", ".", "get", "(", "x", ").", "is", "Empty", "()", "){", "<30>", "h", ".", "update", "(", "map", ".", "get", "(", "x", "),", "ĠO", "-", "d", "qs", ".", "get", "(", "x", ").", "size", "()", "<<", "32", "|", "O", "-", "d", "qs", ".", "get", "(", "x", ").", "pe", "ek", "Last", "());", "<31>", "}", "<32>", "return", "Ġx", ";", "<33>", "}", "<34>", "<35>", "class", "ĠMin", "He", "ap", "L", "Ġ{", "<36>", "public", "Ġlong", "[]", "Ġa", ";", "<37>", "public", "Ġint", "[]", "Ġmap", ";", "<38>", "public", "Ġint", "[]", "Ġim", "ap", ";", "<39>", "public", "Ġint", "Ġn", ";", "<40>", "public", "Ġint", "Ġpos", ";", "<41>", "public", "Ġlong", "ĠINF", "Ġ=", "ĠLong", ".", "MAX", "_", "VALUE", ";", "<42>", "<43>", "public", "ĠMin", "He", "ap", "L", "(", "int", "Ġm", ")", "<44>", "{", "<45>", "n", "Ġ=", "ĠInteger", ".", "highest", "One", "Bit", "((", "m", "+", "1", ")", "<<", "1", ");", "<46>", "a", "Ġ=", "Ġnew", "Ġlong", "[", "n", "];", "<47>", "map", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<48>", "im", "ap", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<49>", "Ar", "rays", ".", "fill", "(", "a", ",", "ĠINF", ");", "<50>", "Ar", "rays", ".", "fill", "(", "map", ",", "Ġ-", "1", ");", "<51>", "Ar", "rays", ".", "fill", "(", "im", "ap", ",", "Ġ-", "1", ");", "<52>", "pos", "Ġ=", "Ġ1", ";", "<53>", "}", "<54>", "<55>", "public", "Ġlong", "Ġadd", "(", "int", "Ġind", ",", "Ġlong", "Ġx", ")", "<56>", "{", "<57>", "int", "Ġret", "Ġ=", "Ġim", "ap", "[", "ind", "];", "<58>", "if", "(", "im", "ap", "[", "ind", "]", "Ġ<", "Ġ0", "){", "<59>", "a", "[", "pos", "]", "Ġ=", "Ġx", ";", "Ġmap", "[", "pos", "]", "Ġ=", "Ġind", ";", "Ġim", "ap", "[", "ind", "]", "Ġ=", "Ġpos", ";", "<60>", "pos", "++;", "<61>", "up", "(", "pos", "-", "1", ");", "<62>", "}", "<63>", "return", "Ġret", "Ġ!=", "Ġ-", "1", "Ġ?", "Ġa", "[", "ret", "]", "Ġ:", "Ġx", ";", "<64>", "}", "<65>", "<66>", "public", "Ġlong", "Ġupdate", "(", "int", "Ġind", ",", "Ġlong", "Ġx", ")", "<67>", "{", "<68>", "int", "Ġret", "Ġ=", "Ġim", "ap", "[", "ind", "];", "<69>", "if", "(", "im", "ap", "[", "ind", "]", "Ġ<", "Ġ0", "){", "<70>", "a", "[", "pos", "]", "Ġ=", "Ġx", ";", "Ġmap", "[", "pos", "]", "Ġ=", "Ġind", ";", "Ġim", "ap", "[", "ind", "]", "Ġ=", "Ġpos", ";", "<71>", "pos", "++;", "<72>", "up", "(", "pos", "-", "1", ");", "<73>", "}", "else", "{", "<74>", "a", "[", "ret", "]", "Ġ=", "Ġx", ";", "<75>", "up", "(", "ret", ");", "<76>", "down", "(", "ret", ");", "<77>", "}", "<78>", "return", "Ġx", ";", "<79>", "}", "<80>", "<81>", "public", "Ġlong", "Ġremove", "(", "int", "Ġind", ")", "<82>", "{", "<83>", "if", "(", "pos", "Ġ==", "Ġ1", ")", "return", "ĠINF", ";", "<84>", "if", "(", "im", "ap", "[", "ind", "]", "Ġ==", "Ġ-", "1", ")", "return", "ĠINF", ";", "<85>", "<86>", "pos", "--", ";", "<87>", "int", "Ġrem", "Ġ=", "Ġim", "ap", "[", "ind", "];", "<88>", "long", "Ġret", "Ġ=", "Ġa", "[", "rem", "];", "<89>", "map", "[", "rem", "]", "Ġ=", "Ġmap", "[", "pos", "];", "<90>", "im", "ap", "[", "map", "[", "pos", "]]", "Ġ=", "Ġrem", ";", "<91>", "im", "ap", "[", "ind", "]", "Ġ=", "Ġ-", "1", ";", "<92>", "a", "[", "rem", "]", "Ġ=", "Ġa", "[", "pos", "];", "<93>", "a", "[", "pos", "]", "Ġ=", "ĠINF", ";", "<94>", "map", "[", "pos", "]", "Ġ=", "Ġ-", "1", ";", "<95>", "<96>", "up", "(", "rem", ");", "<97>", "down", "(", "rem", ");", "<98>", "return", "Ġret", ";", "<99>", "}", "<100>", "<101>", "public", "Ġlong", "Ġmin", "()", "Ġ{", "Ġreturn", "Ġa", "[", "1", "];", "Ġ}", "<102>", "public", "Ġint", "Ġarg", "min", "()", "Ġ{", "Ġreturn", "Ġmap", "[", "1", "];", "Ġ}", "<103>", "public", "Ġint", "Ġsize", "()", "Ġ{", "ĉ", "return", "Ġpos", "-", "1", ";", "Ġ}", "<104>", "<105>", "private", "Ġvoid", "Ġup", "(", "int", "Ġcur", ")", "<106>", "{", "<107>", "for", "(", "int", "Ġc", "Ġ=", "Ġcur", ",", "Ġp", "Ġ=", "Ġc", ">>>", "1", ";", "p", "Ġ>=", "Ġ1", "Ġ&&", "Ġa", "[", "p", "]", "Ġ>", "Ġa", "[", "c", "];", "c", ">>>", "=", "1", ",", "Ġp", ">>>", "=", "1", "){", "<108>", "long", "Ġd", "Ġ=", "Ġa", "[", "p", "];", "Ġa", "[", "p", "]", "Ġ=", "Ġa", "[", "c", "];", "Ġa", "[", "c", "]", "Ġ=", "Ġd", ";", "<109>", "int", "Ġe", "Ġ=", "Ġim", "ap", "[", "map", "[", "p", "]", "];", "Ġim", "ap", "[", "map", "[", "p", "]]", "Ġ=", "Ġim", "ap", "[", "map", "[", "c", "]", "];", "Ġim", "ap", "[", "map", "[", "c", "]]", "Ġ=", "Ġe", ";", "<110>", "e", "Ġ=", "Ġmap", "[", "p", "];", "Ġmap", "[", "p", "]", "Ġ=", "Ġmap", "[", "c", "];", "Ġmap", "[", "c", "]", "Ġ=", "Ġe", ";", "<111>", "}", "<112>", "}", "<113>", "<114>", "private", "Ġvoid", "Ġdown", "(", "int", "Ġcur", ")", "<115>", "{", "<116>", "for", "(", "int", "Ġc", "Ġ=", "Ġcur", ";", "2", "*", "c", "Ġ<", "Ġpos", ";", "){", "<117>", "int", "Ġb", "Ġ=", "Ġa", "[", "2", "*", "c", "]", "Ġ<", "Ġa", "[", "2", "*", "c", "+", "1", "]", "Ġ?", "Ġ2", "*", "c", "Ġ:", "Ġ2", "*", "c", "+", "1", ";", "<118>", "if", "(", "a", "[", "b", "]", "Ġ<", "Ġa", "[", "c", "])", "{", "<119>", "long", "Ġd", "Ġ=", "Ġa", "[", "c", "];", "Ġa", "[", "c", "]", "Ġ=", "Ġa", "[", "b", "];", "Ġa", "[", "b", "]", "Ġ=", "Ġd", ";", "<120>", "int", "Ġe", "Ġ=", "Ġim", "ap", "[", "map", "[", "c", "]", "];", "Ġim", "ap", "[", "map", "[", "c", "]]", "Ġ=", "Ġim", "ap", "[", "map", "[", "b", "]", "];", "Ġim", "ap", "[", "map", "[", "b", "]]", "Ġ=", "Ġe", ";", "<121>", "e", "Ġ=", "Ġmap", "[", "c", "];", "Ġmap", "[", "c", "]", "Ġ=", "Ġmap", "[", "b", "];", "Ġmap", "[", "b", "]", "Ġ=", "Ġe", ";", "<122>", "c", "Ġ=", "Ġb", ";", "<123>", "}", "else", "{", "<124>", "break", ";", "<125>", "}", "<126>", "}", "<127>", "}", "<128>", "}", "<129>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<130>", "Fre", "q", "Stack", "Ġfre", "q", "Stack", "Ġ=", "Ġnew", "ĠFre", "q", "Stack", "();", "<131>", "<132>", "fre", "q", "Stack", ".", "push", "(", "5", ");", "<133>", "fre", "q", "Stack", ".", "push", "(", "7", ");", "<134>", "fre", "q", "Stack", ".", "push", "(", "5", ");", "<135>", "fre", "q", "Stack", ".", "push", "(", "7", ");", "<136>", "fre", "q", "Stack", ".", "push", "(", "4", ");", "<137>", "fre", "q", "Stack", ".", "push", "(", "5", ");", "<138>", "<139>", "System", ".", "out", ".", "println", "(", "fre", "q", "Stack", ".", "pop", "());", "Ġ//", "Ġshould", "Ġreturn", "Ġ5", "<140>", "System", ".", "out", ".", "println", "(", "fre", "q", "Stack", ".", "pop", "());", "Ġ//", "Ġshould", "Ġreturn", "Ġ7", "<141>", "System", ".", "out", ".", "println", "(", "fre", "q", "Stack", ".", "pop", "());", "Ġ//", "Ġshould", "Ġreturn", "Ġ5", "<142>", "System", ".", "out", ".", "println", "(", "fre", "q", "Stack", ".", "pop", "());", "Ġ//", "Ġshould", "Ġreturn", "Ġ4", "<143>", "}", "<144>", "}", "<145>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"140": [[2, 7, 6], [8, 8, 6, 8]]}}
{"id": 32, "code": "import java.util.*;\n\n\n\nclass GetDirections {\npublic static class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\nTreeNode() {}\nTreeNode(int val) { this.val = val; }\nTreeNode(int val, TreeNode left, TreeNode right) {\nthis.val = val;\nthis.left = left;\nthis.right = right;\n}\n}\nchar[] res;\n\npublic String getDirections(TreeNode root, int startValue, int destValue) {\ndfs(root, startValue, 0, new char[100005]);\nchar[] s = res;\ndfs(root, destValue, 0, new char[100005]);\nchar[] t = res;\nint ld = 0;\nfor(int i = 0;i < s.length && i < t.length && s[i] == t[i];i++){\nld = i+1;\n}\nStringBuilder ret = new StringBuilder();\nfor(int i = ld;i < s.length;i++)ret.append('U');\nfor(int i = ld;i < t.length;i++)ret.append(t[i]);\nreturn ret.toString();\n}\n\nvoid dfs(TreeNode cur, int tar, int dep, char[] s)\n{\nif(cur == null)return;\nif(cur.val == tar){\nres = Arrays.copyOf(s, dep);\nreturn;\n}\n\ns[dep] = 'L';\ndfs(cur.left, tar, dep+1, s);\ns[dep] = 'R';\ndfs(cur.right, tar, dep+1, s);\n}\npublic static void main(String[] args) {\nGetDirections.TreeNode root = new GetDirections.TreeNode(5);\nroot.left = new GetDirections.TreeNode(3);\nroot.right = new GetDirections.TreeNode(6);\nroot.left.left = new GetDirections.TreeNode(2);\nroot.left.right = new GetDirections.TreeNode(4);\nroot.left.left.left = new GetDirections.TreeNode(1);\n\nGetDirections getDirections = new GetDirections();\n\nint startValue = 3;\nint destValue = 1;\nString result = getDirections.getDirections(root, startValue, destValue);\n\nSystem.out.println(\"Directions from \" + startValue + \" to \" + destValue + \": \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "<3>", "<4>", "class", "ĠGet", "Direct", "ions", "Ġ{", "<5>", "public", "Ġstatic", "Ġclass", "ĠTree", "Node", "Ġ{", "<6>", "int", "Ġval", ";", "<7>", "Tree", "Node", "Ġleft", ";", "<8>", "Tree", "Node", "Ġright", ";", "<9>", "Tree", "Node", "()", "Ġ{}", "<10>", "Tree", "Node", "(", "int", "Ġval", ")", "Ġ{", "Ġthis", ".", "val", "Ġ=", "Ġval", ";", "Ġ}", "<11>", "Tree", "Node", "(", "int", "Ġval", ",", "ĠTree", "Node", "Ġleft", ",", "ĠTree", "Node", "Ġright", ")", "Ġ{", "<12>", "this", ".", "val", "Ġ=", "Ġval", ";", "<13>", "this", ".", "left", "Ġ=", "Ġleft", ";", "<14>", "this", ".", "right", "Ġ=", "Ġright", ";", "<15>", "}", "<16>", "}", "<17>", "char", "[]", "Ġres", ";", "<18>", "<19>", "public", "ĠString", "Ġget", "Direct", "ions", "(", "Tree", "Node", "Ġroot", ",", "Ġint", "Ġstart", "Value", ",", "Ġint", "Ġdest", "Value", ")", "Ġ{", "<20>", "df", "s", "(", "root", ",", "Ġstart", "Value", ",", "Ġ0", ",", "Ġnew", "Ġchar", "[", "10000", "5", "]);", "<21>", "char", "[]", "Ġs", "Ġ=", "Ġres", ";", "<22>", "df", "s", "(", "root", ",", "Ġdest", "Value", ",", "Ġ0", ",", "Ġnew", "Ġchar", "[", "10000", "5", "]);", "<23>", "char", "[]", "Ġt", "Ġ=", "Ġres", ";", "<24>", "int", "Ġl", "d", "Ġ=", "Ġ0", ";", "<25>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġs", ".", "length", "Ġ&&", "Ġi", "Ġ<", "Ġt", ".", "length", "Ġ&&", "Ġs", "[", "i", "]", "Ġ==", "Ġt", "[", "i", "];", "i", "++", "){", "<26>", "ld", "Ġ=", "Ġi", "+", "1", ";", "<27>", "}", "<28>", "String", "Builder", "Ġret", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<29>", "for", "(", "int", "Ġi", "Ġ=", "Ġl", "d", ";", "i", "Ġ<", "Ġs", ".", "length", ";", "i", "++)", "ret", ".", "append", "('", "U", "');", "<30>", "for", "(", "int", "Ġi", "Ġ=", "Ġl", "d", ";", "i", "Ġ<", "Ġt", ".", "length", ";", "i", "++)", "ret", ".", "append", "(", "t", "[", "i", "]);", "<31>", "return", "Ġret", ".", "to", "String", "();", "<32>", "}", "<33>", "<34>", "void", "Ġd", "fs", "(", "Tree", "Node", "Ġcur", ",", "Ġint", "Ġtar", ",", "Ġint", "Ġdep", ",", "Ġchar", "[]", "Ġs", ")", "<35>", "{", "<36>", "if", "(", "cur", "Ġ==", "Ġnull", ")", "return", ";", "<37>", "if", "(", "cur", ".", "val", "Ġ==", "Ġtar", "){", "<38>", "res", "Ġ=", "ĠAr", "rays", ".", "copy", "Of", "(", "s", ",", "Ġdep", ");", "<39>", "return", ";", "<40>", "}", "<41>", "<42>", "s", "[", "dep", "]", "Ġ=", "Ġ'", "L", "';", "<43>", "df", "s", "(", "cur", ".", "left", ",", "Ġtar", ",", "Ġdep", "+", "1", ",", "Ġs", ");", "<44>", "s", "[", "dep", "]", "Ġ=", "Ġ'", "R", "';", "<45>", "df", "s", "(", "cur", ".", "right", ",", "Ġtar", ",", "Ġdep", "+", "1", ",", "Ġs", ");", "<46>", "}", "<47>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<48>", "Get", "Direct", "ions", ".", "Tree", "Node", "Ġroot", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", ".", "Tree", "Node", "(", "5", ");", "<49>", "root", ".", "left", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", ".", "Tree", "Node", "(", "3", ");", "<50>", "root", ".", "right", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", ".", "Tree", "Node", "(", "6", ");", "<51>", "root", ".", "left", ".", "left", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", ".", "Tree", "Node", "(", "2", ");", "<52>", "root", ".", "left", ".", "right", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", ".", "Tree", "Node", "(", "4", ");", "<53>", "root", ".", "left", ".", "left", ".", "left", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", ".", "Tree", "Node", "(", "1", ");", "<54>", "<55>", "Get", "Direct", "ions", "Ġget", "Direct", "ions", "Ġ=", "Ġnew", "ĠGet", "Direct", "ions", "();", "<56>", "<57>", "int", "Ġstart", "Value", "Ġ=", "Ġ3", ";", "<58>", "int", "Ġdest", "Value", "Ġ=", "Ġ1", ";", "<59>", "String", "Ġresult", "Ġ=", "Ġget", "Direct", "ions", ".", "get", "Direct", "ions", "(", "root", ",", "Ġstart", "Value", ",", "Ġdest", "Value", ");", "<60>", "<61>", "System", ".", "out", ".", "println", "(\"", "Direct", "ions", "Ġfrom", "Ġ\"", "Ġ+", "Ġstart", "Value", "Ġ+", "Ġ\"", "Ġto", "Ġ\"", "Ġ+", "Ġdest", "Value", "Ġ+", "Ġ\"", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<62>", "}", "<63>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"78": [[3], [10, 3, 6, 6]]}}
{"id": 33, "code": "import java.util.*;\n\nclass GroupStrings {\npublic int[] groupStrings(String[] words) {\nint n = words.length;\nint[] a = new int[n];\nDJSet ds = new DJSet(n);\nMap<Integer, Integer> map = new HashMap<>();\nfor(int i = 0;i < n;i++){\nfor(char c : words[i].toCharArray()){\na[i] |= 1<<c-'a';\n}\nif(map.containsKey(a[i])){\nds.union(i, map.get(a[i]));\n}\n\nmap.put(a[i], i);\n}\n\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < 26;j++){\nint k = a[i]^1<<j;\nif(map.containsKey(k)){\nds.union(i, map.get(k));\n}\n}\nfor(int j = 0;j < 26;j++){\nfor(int l = 0;l < 26;l++){\nif(a[i]<<~j<0 && a[i]<<~l>=0){\nint k = a[i]^1<<j^1<<l;\nif(map.containsKey(k)){\nds.union(i, map.get(k));\n}\n}\n}\n}\n}\n\nint min = 0;\nfor(int i = 0;i < n;i++){\nmin = Math.min(min, ds.upper[i]);\n}\nint[] ans = new int[]{ds.count(), -min};\nreturn ans;\n}\n\npublic class DJSet {\npublic int[] upper;\n\npublic DJSet(int n) {\nupper = new int[n];\nArrays.fill(upper, -1);\n}\n\npublic int root(int x) {\nreturn upper[x] < 0 ? x : (upper[x] = root(upper[x]));\n}\n\npublic boolean equiv(int x, int y) {\nreturn root(x) == root(y);\n}\n\npublic boolean union(int x, int y) {\nx = root(x);\ny = root(y);\nif (x != y) {\nif (upper[y] < upper[x]) {\nint d = x;\nx = y;\ny = d;\n}\nupper[x] += upper[y];\nupper[y] = x;\n}\nreturn x == y;\n}\n\npublic int count() {\nint ct = 0;\nfor (int u : upper) if (u < 0) ct++;\nreturn ct;\n}\n\npublic int[][] toBucket() {\nint n = upper.length;\nint[][] ret = new int[n][];\nint[] rp = new int[n];\nfor (int i = 0; i < n; i++) if (upper[i] < 0) ret[i] = new int[-upper[i]];\nfor (int i = 0; i < n; i++) {\nint r = root(i);\nret[r][rp[r]++] = i;\n}\nreturn ret;\n}\n}\npublic static void main(String[] args) {\nGroupStrings groupStrings = new GroupStrings();\n\nString[] words = {\"abc\", \"bcd\", \"ace\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"};\n\nint[] result = groupStrings.groupStrings(words);\n\nSystem.out.println(\"Number of groups: \" + result[0]);\nSystem.out.println(\"Size of the largest group: \" + result[1]);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠGroup", "Str", "ings", "Ġ{", "<3>", "public", "Ġint", "[]", "Ġgroup", "Str", "ings", "(", "String", "[]", "Ġwords", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġwords", ".", "length", ";", "<5>", "int", "[]", "Ġa", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<6>", "DJ", "Set", "Ġd", "s", "Ġ=", "Ġnew", "ĠDJ", "Set", "(", "n", ");", "<7>", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġmap", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<8>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<9>", "for", "(", "char", "Ġc", "Ġ:", "Ġwords", "[", "i", "].", "to", "Char", "Array", "()", "){", "<10>", "a", "[", "i", "]", "Ġ|", "=", "Ġ1", "<<", "c", "-'", "a", "';", "<11>", "}", "<12>", "if", "(", "map", ".", "cont", "ains", "Key", "(", "a", "[", "i", "]", "))", "{", "<13>", "ds", ".", "union", "(", "i", ",", "Ġmap", ".", "get", "(", "a", "[", "i", "])", ");", "<14>", "}", "<15>", "<16>", "map", ".", "put", "(", "a", "[", "i", "],", "Ġi", ");", "<17>", "}", "<18>", "<19>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<20>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġ26", ";", "j", "++", "){", "<21>", "int", "Ġk", "Ġ=", "Ġa", "[", "i", "]", "^", "1", "<<", "j", ";", "<22>", "if", "(", "map", ".", "cont", "ains", "Key", "(", "k", "))", "{", "<23>", "ds", ".", "union", "(", "i", ",", "Ġmap", ".", "get", "(", "k", "));", "<24>", "}", "<25>", "}", "<26>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġ26", ";", "j", "++", "){", "<27>", "for", "(", "int", "Ġl", "Ġ=", "Ġ0", ";", "l", "Ġ<", "Ġ26", ";", "l", "++", "){", "<28>", "if", "(", "a", "[", "i", "]", "<<", "~", "j", "<", "0", "Ġ&&", "Ġa", "[", "i", "]", "<<", "~", "l", ">", "=", "0", "){", "<29>", "int", "Ġk", "Ġ=", "Ġa", "[", "i", "]", "^", "1", "<<", "j", "^", "1", "<<", "l", ";", "<30>", "if", "(", "map", ".", "cont", "ains", "Key", "(", "k", "))", "{", "<31>", "ds", ".", "union", "(", "i", ",", "Ġmap", ".", "get", "(", "k", "));", "<32>", "}", "<33>", "}", "<34>", "}", "<35>", "}", "<36>", "}", "<37>", "<38>", "int", "Ġmin", "Ġ=", "Ġ0", ";", "<39>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<40>", "min", "Ġ=", "ĠMath", ".", "min", "(", "min", ",", "Ġd", "s", ".", "upper", "[", "i", "]);", "<41>", "}", "<42>", "int", "[]", "Ġans", "Ġ=", "Ġnew", "Ġint", "[]", "{", "ds", ".", "count", "(),", "Ġ-", "min", "};", "<43>", "return", "Ġans", ";", "<44>", "}", "<45>", "<46>", "public", "Ġclass", "ĠDJ", "Set", "Ġ{", "<47>", "public", "Ġint", "[]", "Ġupper", ";", "<48>", "<49>", "public", "ĠDJ", "Set", "(", "int", "Ġn", ")", "Ġ{", "<50>", "upper", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<51>", "Ar", "rays", ".", "fill", "(", "upper", ",", "Ġ-", "1", ");", "<52>", "}", "<53>", "<54>", "public", "Ġint", "Ġroot", "(", "int", "Ġx", ")", "Ġ{", "<55>", "return", "Ġupper", "[", "x", "]", "Ġ<", "Ġ0", "Ġ?", "Ġx", "Ġ:", "Ġ(", "upper", "[", "x", "]", "Ġ=", "Ġroot", "(", "upper", "[", "x", "])", ");", "<56>", "}", "<57>", "<58>", "public", "Ġboolean", "Ġequ", "iv", "(", "int", "Ġx", ",", "Ġint", "Ġy", ")", "Ġ{", "<59>", "return", "Ġroot", "(", "x", ")", "Ġ==", "Ġroot", "(", "y", ");", "<60>", "}", "<61>", "<62>", "public", "Ġboolean", "Ġunion", "(", "int", "Ġx", ",", "Ġint", "Ġy", ")", "Ġ{", "<63>", "x", "Ġ=", "Ġroot", "(", "x", ");", "<64>", "y", "Ġ=", "Ġroot", "(", "y", ");", "<65>", "if", "Ġ(", "x", "Ġ!=", "Ġy", ")", "Ġ{", "<66>", "if", "Ġ(", "upper", "[", "y", "]", "Ġ<", "Ġupper", "[", "x", "])", "Ġ{", "<67>", "int", "Ġd", "Ġ=", "Ġx", ";", "<68>", "x", "Ġ=", "Ġy", ";", "<69>", "y", "Ġ=", "Ġd", ";", "<70>", "}", "<71>", "upper", "[", "x", "]", "Ġ+=", "Ġupper", "[", "y", "];", "<72>", "upper", "[", "y", "]", "Ġ=", "Ġx", ";", "<73>", "}", "<74>", "return", "Ġx", "Ġ==", "Ġy", ";", "<75>", "}", "<76>", "<77>", "public", "Ġint", "Ġcount", "()", "Ġ{", "<78>", "int", "Ġc", "t", "Ġ=", "Ġ0", ";", "<79>", "for", "Ġ(", "int", "Ġu", "Ġ:", "Ġupper", ")", "Ġif", "Ġ(", "u", "Ġ<", "Ġ0", ")", "Ġc", "t", "++;", "<80>", "return", "Ġc", "t", ";", "<81>", "}", "<82>", "<83>", "public", "Ġint", "[", "][", "]", "Ġto", "B", "ucket", "()", "Ġ{", "<84>", "int", "Ġn", "Ġ=", "Ġupper", ".", "length", ";", "<85>", "int", "[", "][", "]", "Ġret", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "];", "<86>", "int", "[]", "Ġr", "p", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<87>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġif", "Ġ(", "upper", "[", "i", "]", "Ġ<", "Ġ0", ")", "Ġret", "[", "i", "]", "Ġ=", "Ġnew", "Ġint", "[", "-", "upper", "[", "i", "]", "];", "<88>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<89>", "int", "Ġr", "Ġ=", "Ġroot", "(", "i", ");", "<90>", "ret", "[", "r", "][", "r", "p", "[", "r", "]", "++", "]", "Ġ=", "Ġi", ";", "<91>", "}", "<92>", "return", "Ġret", ";", "<93>", "}", "<94>", "}", "<95>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<96>", "Group", "Str", "ings", "Ġgroup", "Str", "ings", "Ġ=", "Ġnew", "ĠGroup", "Str", "ings", "();", "<97>", "<98>", "String", "[]", "Ġwords", "Ġ=", "Ġ{\"", "abc", "\",", "Ġ\"", "b", "cd", "\",", "Ġ\"", "ace", "\",", "Ġ\"", "xy", "z", "\",", "Ġ\"", "az", "\",", "Ġ\"", "ba", "\",", "Ġ\"", "a", "\",", "Ġ\"", "z", "\"", "};", "<99>", "<100>", "int", "[]", "Ġresult", "Ġ=", "Ġgroup", "Str", "ings", ".", "group", "Str", "ings", "(", "words", ");", "<101>", "<102>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġgroups", ":", "Ġ\"", "Ġ+", "Ġresult", "[", "0", "]);", "<103>", "System", ".", "out", ".", "println", "(\"", "Size", "Ġof", "Ġthe", "Ġlargest", "Ġgroup", ":", "Ġ\"", "Ġ+", "Ġresult", "[", "1", "]);", "<104>", "}", "<105>", "}", "<106>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"103": [[9, 1], [4]]}}
{"id": 34, "code": "import java.math.BigDecimal;\nimport java.util.*;\n\nclass HalveArray {\n\npublic int halveArray(int[] nums) {\nPriorityQueue<BigDecimal> queue = new PriorityQueue<>();\nBigDecimal sum = BigDecimal.ZERO, curr = BigDecimal.ZERO;\nfor (int num : nums) {\nsum = sum.add(BigDecimal.valueOf(num).divide(BigDecimal.valueOf(2)));\nqueue.add(BigDecimal.valueOf(-num));\n}\nfor (int i = 1;; i++) {\nBigDecimal poll = queue.poll().divide(BigDecimal.valueOf(2));\nif ((curr = curr.subtract(poll)).compareTo(sum) >= 0) {\nreturn i;\n}\nqueue.add(poll);\n}\n}\npublic static void main(String[] args) {\nHalveArray halveArray = new HalveArray();\nint[] nums = {10, 20, 30};\nint result = halveArray.halveArray(nums);\nSystem.out.println(\"Number of operations to halve the array sum: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "math", ".", "Big", "Dec", "imal", ";", "<1>", "import", "Ġjava", ".", "util", ".*", ";", "<2>", "<3>", "class", "ĠHal", "ve", "Array", "Ġ{", "<4>", "<5>", "public", "Ġint", "Ġhal", "ve", "Array", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<6>", "Prior", "ity", "Queue", "<", "Big", "Dec", "imal", ">", "Ġqueue", "Ġ=", "Ġnew", "ĠPriority", "Queue", "<", ">", "();", "<7>", "Big", "Dec", "imal", "Ġsum", "Ġ=", "ĠBig", "Dec", "imal", ".", "Z", "ERO", ",", "Ġcur", "r", "Ġ=", "ĠBig", "Dec", "imal", ".", "Z", "ERO", ";", "<8>", "for", "Ġ(", "int", "Ġnum", "Ġ:", "Ġnum", "s", ")", "Ġ{", "<9>", "sum", "Ġ=", "Ġsum", ".", "add", "(", "Big", "Dec", "imal", ".", "value", "Of", "(", "num", ").", "div", "ide", "(", "Big", "Dec", "imal", ".", "value", "Of", "(", "2", "))", ");", "<10>", "queue", ".", "add", "(", "Big", "Dec", "imal", ".", "value", "Of", "(-", "num", "));", "<11>", "}", "<12>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";;", "Ġi", "++)", "Ġ{", "<13>", "Big", "Dec", "imal", "Ġpoll", "Ġ=", "Ġqueue", ".", "poll", "().", "div", "ide", "(", "Big", "Dec", "imal", ".", "value", "Of", "(", "2", "));", "<14>", "if", "Ġ((", "cur", "r", "Ġ=", "Ġcur", "r", ".", "sub", "t", "ract", "(", "poll", ")).", "comp", "are", "To", "(", "sum", ")", "Ġ>=", "Ġ0", ")", "Ġ{", "<15>", "return", "Ġi", ";", "<16>", "}", "<17>", "queue", ".", "add", "(", "poll", ");", "<18>", "}", "<19>", "}", "<20>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<21>", "Hal", "ve", "Array", "Ġhal", "ve", "Array", "Ġ=", "Ġnew", "ĠHal", "ve", "Array", "();", "<22>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "10", ",", "Ġ20", ",", "Ġ30", "};", "<23>", "int", "Ġresult", "Ġ=", "Ġhal", "ve", "Array", ".", "hal", "ve", "Array", "(", "n", "ums", ");", "<24>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġoperations", "Ġto", "Ġhal", "ve", "Ġthe", "Ġarray", "Ġsum", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<25>", "}", "<26>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"24": [[3, 5], [2, 15, 15]]}}
{"id": 35, "code": "import java.util.*;\n\npublic class HashCode {\n\nprivate static class Pair\n{\npublic int value1 , value2;\npublic Pair(int value1 , int value2)\n{\nthis.value1 = value1;\nthis.value2 = value2;\n}\n\npublic int hashCode()\n{\nreturn this.value1 * 31 + this.value2;\n}\n\npublic boolean equals(Object object)\n{\nPair pair = (Pair) object;\nreturn (this.value1 == pair.value1) && (this.value2 == pair.value2);\n}\n}\n\nprivate List<List<Integer>> ans = new ArrayList<List<Integer>>();\nprivate Set<Pair> set = new HashSet<Pair>();\n\npublic List<List<Integer>> findSubsequences(int[] nums) {\n\ndfs(nums , 0 , new ArrayList<Integer>());\nreturn ans;\n\n}\n\nprivate int hash1(List<Integer> list)\n{\nint value = 31;\nfor (int temp : list)\nvalue = value * 37 + temp;\nreturn value;\n}\n\nprivate int hash2(List<Integer> list)\n{\nint value = 71;\nfor (int temp : list)\nvalue = value * 73 + temp;\nreturn value;\n}\n\nprivate void dfs(int[] nums , int current , List<Integer> list)\n{\nif (current == nums.length)\n{\nif (list.size() > 1)\n{\nint hashValue1 = hash1(list);\nint hashValue2 = hash2(list);\nPair pair = new Pair(hashValue1 , hashValue2);\nif (!set.contains(pair))\n{\nset.add(pair);\nList<Integer> newList = new ArrayList<Integer>(list);\nans.add(newList);\n}\n}\n}\nelse\n{\nif (list.size() == 0 || (nums[current] >= list.get(list.size() - 1)))\n{\nlist.add(nums[current]);\ndfs(nums , current + 1 , list);\nlist.remove(list.size() - 1);\n}\ndfs(nums , current + 1 , list);\n}\n}\npublic static void main(String[] args) {\nHashCode hashCode = new HashCode();\nint[] nums = {4, 6, 7, 7};\nList<List<Integer>> result = hashCode.findSubsequences(nums);\n\nSystem.out.println(\"Subsequences:\");\nfor (List<Integer> subsequence : result) {\nSystem.out.println(subsequence);\n}\n}\n\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠHash", "Code", "Ġ{", "<3>", "<4>", "private", "Ġstatic", "Ġclass", "ĠPair", "<5>", "{", "<6>", "public", "Ġint", "Ġvalue", "1", "Ġ,", "Ġvalue", "2", ";", "<7>", "public", "ĠPair", "(", "int", "Ġvalue", "1", "Ġ,", "Ġint", "Ġvalue", "2", ")", "<8>", "{", "<9>", "this", ".", "value", "1", "Ġ=", "Ġvalue", "1", ";", "<10>", "this", ".", "value", "2", "Ġ=", "Ġvalue", "2", ";", "<11>", "}", "<12>", "<13>", "public", "Ġint", "Ġhash", "Code", "()", "<14>", "{", "<15>", "return", "Ġthis", ".", "value", "1", "Ġ*", "Ġ31", "Ġ+", "Ġthis", ".", "value", "2", ";", "<16>", "}", "<17>", "<18>", "public", "Ġboolean", "Ġequals", "(", "Object", "Ġobject", ")", "<19>", "{", "<20>", "P", "air", "Ġpair", "Ġ=", "Ġ(", "P", "air", ")", "Ġobject", ";", "<21>", "return", "Ġ(", "this", ".", "value", "1", "Ġ==", "Ġpair", ".", "value", "1", ")", "Ġ&&", "Ġ(", "this", ".", "value", "2", "Ġ==", "Ġpair", ".", "value", "2", ");", "<22>", "}", "<23>", "}", "<24>", "<25>", "private", "ĠList", "<", "List", "<", "Integer", ">>", "Ġans", "Ġ=", "Ġnew", "ĠArray", "List", "<", "List", "<", "Integer", ">>", "();", "<26>", "private", "ĠSet", "<", "P", "air", ">", "Ġset", "Ġ=", "Ġnew", "ĠHash", "Set", "<", "P", "air", ">", "();", "<27>", "<28>", "public", "ĠList", "<", "List", "<", "Integer", ">>", "Ġfind", "Sub", "sequ", "ences", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<29>", "<30>", "df", "s", "(", "n", "ums", "Ġ,", "Ġ0", "Ġ,", "Ġnew", "ĠArray", "List", "<", "Integer", ">", "());", "<31>", "return", "Ġans", ";", "<32>", "<33>", "}", "<34>", "<35>", "private", "Ġint", "Ġhash", "1", "(", "List", "<", "Integer", ">", "Ġlist", ")", "<36>", "{", "<37>", "int", "Ġvalue", "Ġ=", "Ġ31", ";", "<38>", "for", "Ġ(", "int", "Ġtemp", "Ġ:", "Ġlist", ")", "<39>", "value", "Ġ=", "Ġvalue", "Ġ*", "Ġ37", "Ġ+", "Ġtemp", ";", "<40>", "return", "Ġvalue", ";", "<41>", "}", "<42>", "<43>", "private", "Ġint", "Ġhash", "2", "(", "List", "<", "Integer", ">", "Ġlist", ")", "<44>", "{", "<45>", "int", "Ġvalue", "Ġ=", "Ġ71", ";", "<46>", "for", "Ġ(", "int", "Ġtemp", "Ġ:", "Ġlist", ")", "<47>", "value", "Ġ=", "Ġvalue", "Ġ*", "Ġ73", "Ġ+", "Ġtemp", ";", "<48>", "return", "Ġvalue", ";", "<49>", "}", "<50>", "<51>", "private", "Ġvoid", "Ġd", "fs", "(", "int", "[]", "Ġnum", "s", "Ġ,", "Ġint", "Ġcurrent", "Ġ,", "ĠList", "<", "Integer", ">", "Ġlist", ")", "<52>", "{", "<53>", "if", "Ġ(", "current", "Ġ==", "Ġnum", "s", ".", "length", ")", "<54>", "{", "<55>", "if", "Ġ(", "list", ".", "size", "()", "Ġ>", "Ġ1", ")", "<56>", "{", "<57>", "int", "Ġhash", "Value", "1", "Ġ=", "Ġhash", "1", "(", "list", ");", "<58>", "int", "Ġhash", "Value", "2", "Ġ=", "Ġhash", "2", "(", "list", ");", "<59>", "P", "air", "Ġpair", "Ġ=", "Ġnew", "ĠPair", "(", "hash", "Value", "1", "Ġ,", "Ġhash", "Value", "2", ");", "<60>", "if", "Ġ(!", "set", ".", "cont", "ains", "(", "pair", "))", "<61>", "{", "<62>", "set", ".", "add", "(", "pair", ");", "<63>", "List", "<", "Integer", ">", "Ġnew", "List", "Ġ=", "Ġnew", "ĠArray", "List", "<", "Integer", ">(", "list", ");", "<64>", "ans", ".", "add", "(", "new", "List", ");", "<65>", "}", "<66>", "}", "<67>", "}", "<68>", "else", "<69>", "{", "<70>", "if", "Ġ(", "list", ".", "size", "()", "Ġ==", "Ġ0", "Ġ||", "Ġ(", "n", "ums", "[", "current", "]", "Ġ>=", "Ġlist", ".", "get", "(", "list", ".", "size", "()", "Ġ-", "Ġ1", ")))", "<71>", "{", "<72>", "list", ".", "add", "(", "n", "ums", "[", "current", "]);", "<73>", "df", "s", "(", "n", "ums", "Ġ,", "Ġcurrent", "Ġ+", "Ġ1", "Ġ,", "Ġlist", ");", "<74>", "list", ".", "remove", "(", "list", ".", "size", "()", "Ġ-", "Ġ1", ");", "<75>", "}", "<76>", "df", "s", "(", "n", "ums", "Ġ,", "Ġcurrent", "Ġ+", "Ġ1", "Ġ,", "Ġlist", ");", "<77>", "}", "<78>", "}", "<79>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<80>", "Hash", "Code", "Ġhash", "Code", "Ġ=", "Ġnew", "ĠHash", "Code", "();", "<81>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "4", ",", "Ġ6", ",", "Ġ7", ",", "Ġ7", "};", "<82>", "List", "<", "List", "<", "Integer", ">>", "Ġresult", "Ġ=", "Ġhash", "Code", ".", "find", "Sub", "sequ", "ences", "(", "n", "ums", ");", "<83>", "<84>", "System", ".", "out", ".", "println", "(\"", "Sub", "sequ", "ences", ":\"", ");", "<85>", "for", "Ġ(", "List", "<", "Integer", ">", "Ġsubsequ", "ence", "Ġ:", "Ġresult", ")", "Ġ{", "<86>", "System", ".", "out", ".", "println", "(", "sub", "sequence", ");", "<87>", "}", "<88>", "}", "<89>", "<90>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"83": [[6], [1, 15, 15, 3]]}}
{"id": 36, "code": "import java.util.*;\n\nclass HighestPeak {\npublic int[][] highestPeak(int[][] isWater) {\nint n= isWater.length, m = isWater[0].length;\nQueue<int[]> q = new ArrayDeque<>();\nint[][] h = new int[n][m];\nfor(int i = 0;i < n;i++)Arrays.fill(h[i], 999999);\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < m;j++){\nif(isWater[i][j] == 1){\nh[i][j] = 0;\nq.add(new int[]{i, j});\n}\n}\n}\nint[] dr = {1, 0, -1, 0};\nint[] dc = {0, 1, 0, -1};\n\nwhile(!q.isEmpty()){\nint[] cur = q.poll();\nint r = cur[0], c = cur[1];\nfor(int k = 0;k < 4;k++){\nint nr = r + dr[k], nc = c + dc[k];\nif(nr >= 0 && nr < n && nc >= 0 && nc < m &&\nh[nr][nc] > h[r][c] + 1){\nh[nr][nc] = h[r][c] + 1;\nq.add(new int[]{nr, nc});\n}\n}\n}\nreturn h;\n}\npublic static void main(String[] args) {\nHighestPeak highestPeak = new HighestPeak();\nint[][] isWater = {\n{0, 1},\n{0, 0}\n};\nint[][] result = highestPeak.highestPeak(isWater);\n\nSystem.out.println(\"Highest Peak Matrix:\");\nfor (int[] row : result) {\nSystem.out.println(Arrays.toString(row));\n}\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠHighest", "Pe", "ak", "Ġ{", "<3>", "public", "Ġint", "[", "][", "]", "Ġhighest", "Pe", "ak", "(", "int", "[", "][", "]", "Ġis", "Water", ")", "Ġ{", "<4>", "int", "Ġn", "=", "Ġis", "Water", ".", "length", ",", "Ġm", "Ġ=", "Ġis", "Water", "[", "0", "].", "length", ";", "<5>", "Queue", "<", "int", "[]", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<6>", "int", "[", "][", "]", "Ġh", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "m", "];", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++)", "Ar", "rays", ".", "fill", "(", "h", "[", "i", "],", "Ġ999", "999", ");", "<8>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<9>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<10>", "if", "(", "is", "Water", "[", "i", "][", "j", "]", "Ġ==", "Ġ1", "){", "<11>", "h", "[", "i", "][", "j", "]", "Ġ=", "Ġ0", ";", "<12>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "i", ",", "Ġj", "});", "<13>", "}", "<14>", "}", "<15>", "}", "<16>", "int", "[]", "Ġdr", "Ġ=", "Ġ{", "1", ",", "Ġ0", ",", "Ġ-", "1", ",", "Ġ0", "};", "<17>", "int", "[]", "Ġdc", "Ġ=", "Ġ{", "0", ",", "Ġ1", ",", "Ġ0", ",", "Ġ-", "1", "};", "<18>", "<19>", "while", "(", "!", "q", ".", "is", "Empty", "()", "){", "<20>", "int", "[]", "Ġcur", "Ġ=", "Ġq", ".", "poll", "();", "<21>", "int", "Ġr", "Ġ=", "Ġcur", "[", "0", "],", "Ġc", "Ġ=", "Ġcur", "[", "1", "];", "<22>", "for", "(", "int", "Ġk", "Ġ=", "Ġ0", ";", "k", "Ġ<", "Ġ4", ";", "k", "++", "){", "<23>", "int", "Ġn", "r", "Ġ=", "Ġr", "Ġ+", "Ġdr", "[", "k", "],", "Ġn", "c", "Ġ=", "Ġc", "Ġ+", "Ġdc", "[", "k", "];", "<24>", "if", "(", "nr", "Ġ>=", "Ġ0", "Ġ&&", "Ġn", "r", "Ġ<", "Ġn", "Ġ&&", "Ġn", "c", "Ġ>=", "Ġ0", "Ġ&&", "Ġn", "c", "Ġ<", "Ġm", "Ġ&&", "<25>", "h", "[", "nr", "][", "nc", "]", "Ġ>", "Ġh", "[", "r", "][", "c", "]", "Ġ+", "Ġ1", "){", "<26>", "h", "[", "nr", "][", "nc", "]", "Ġ=", "Ġh", "[", "r", "][", "c", "]", "Ġ+", "Ġ1", ";", "<27>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "nr", ",", "Ġn", "c", "});", "<28>", "}", "<29>", "}", "<30>", "}", "<31>", "return", "Ġh", ";", "<32>", "}", "<33>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<34>", "Hig", "hest", "Pe", "ak", "Ġhighest", "Pe", "ak", "Ġ=", "Ġnew", "ĠHighest", "Pe", "ak", "();", "<35>", "int", "[", "][", "]", "Ġis", "Water", "Ġ=", "Ġ{", "<36>", "{", "0", ",", "Ġ1", "},", "<37>", "{", "0", ",", "Ġ0", "}", "<38>", "};", "<39>", "int", "[", "][", "]", "Ġresult", "Ġ=", "Ġhighest", "Pe", "ak", ".", "highest", "Pe", "ak", "(", "is", "Water", ");", "<40>", "<41>", "System", ".", "out", ".", "println", "(\"", "Hig", "hest", "ĠPeak", "ĠMatrix", ":\"", ");", "<42>", "for", "Ġ(", "int", "[]", "Ġrow", "Ġ:", "Ġresult", ")", "Ġ{", "<43>", "System", ".", "out", ".", "println", "(", "Ar", "rays", ".", "to", "String", "(", "row", "));", "<44>", "}", "<45>", "}", "<46>", "}", "<47>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"40": [[9, 7, 9, 11], [9]]}}
{"id": 37, "code": "import java.util.*;\nclass IsPossible {\npublic boolean isPossible(int[] target) {\nPriorityQueue<Integer> pq = new PriorityQueue<>();\nfor(int v : target){\npq.add(-v);\n}\nlong sum = 0;\nfor(int v : target){\nsum += v;\n}\nwhile(true){\nint cur = -pq.poll();\nif(cur == 1)break;\nif(cur-(sum-cur) > 0 && cur-(sum-cur) < cur){\nint an = (int)(cur-(sum-cur));\nsum -= cur - an;\ncur = an;\npq.add(-cur);\n}else{\nreturn false;\n}\n}\nreturn true;\n}\npublic static void main(String[] args) {\nIsPossible isPossible = new IsPossible();\nint[] target = {9, 3, 5};\nboolean result = isPossible.isPossible(target);\n\nSystem.out.println(\"Is it possible to construct the target array? \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠIs", "P", "ossible", "Ġ{", "<2>", "public", "Ġboolean", "Ġis", "P", "ossible", "(", "int", "[]", "Ġtarget", ")", "Ġ{", "<3>", "Prior", "ity", "Queue", "<", "Integer", ">", "Ġp", "q", "Ġ=", "Ġnew", "ĠPriority", "Queue", "<", ">", "();", "<4>", "for", "(", "int", "Ġv", "Ġ:", "Ġtarget", "){", "<5>", "p", "q", ".", "add", "(-", "v", ");", "<6>", "}", "<7>", "long", "Ġsum", "Ġ=", "Ġ0", ";", "<8>", "for", "(", "int", "Ġv", "Ġ:", "Ġtarget", "){", "<9>", "sum", "Ġ+=", "Ġv", ";", "<10>", "}", "<11>", "while", "(", "true", "){", "<12>", "int", "Ġcur", "Ġ=", "Ġ-", "p", "q", ".", "poll", "();", "<13>", "if", "(", "cur", "Ġ==", "Ġ1", ")", "break", ";", "<14>", "if", "(", "cur", "-(", "sum", "-", "cur", ")", "Ġ>", "Ġ0", "Ġ&&", "Ġcur", "-(", "sum", "-", "cur", ")", "Ġ<", "Ġcur", "){", "<15>", "int", "Ġan", "Ġ=", "Ġ(", "int", ")(", "cur", "-(", "sum", "-", "cur", "));", "<16>", "sum", "Ġ-=", "Ġcur", "Ġ-", "Ġan", ";", "<17>", "cur", "Ġ=", "Ġan", ";", "<18>", "p", "q", ".", "add", "(-", "cur", ");", "<19>", "}", "else", "{", "<20>", "return", "Ġfalse", ";", "<21>", "}", "<22>", "}", "<23>", "return", "Ġtrue", ";", "<24>", "}", "<25>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<26>", "Is", "P", "ossible", "Ġis", "P", "ossible", "Ġ=", "Ġnew", "ĠIs", "P", "ossible", "();", "<27>", "int", "[]", "Ġtarget", "Ġ=", "Ġ{", "9", ",", "Ġ3", ",", "Ġ5", "};", "<28>", "bo", "olean", "Ġresult", "Ġ=", "Ġis", "P", "ossible", ".", "is", "P", "ossible", "(", "target", ");", "<29>", "<30>", "System", ".", "out", ".", "println", "(\"", "Is", "Ġit", "Ġpossible", "Ġto", "Ġconstruct", "Ġthe", "Ġtarget", "Ġarray", "?", "Ġ\"", "Ġ+", "Ġresult", ");", "<31>", "}", "<32>", "}", "<33>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"29": [[7], [15]]}}
{"id": 38, "code": "class IsReachable {\npublic boolean isReachable(int targetX, int targetY) {\nwhile(targetX % 2 == 0){\ntargetX /= 2;\n}\nwhile(targetY % 2 == 0){\ntargetY /= 2;\n}\nreturn gcd(targetX, targetY) == 1;\n}\n\npublic static int gcd(int a, int b) {\nwhile (b > 0) {\nint c = a;\na = b;\nb = c % b;\n}\nreturn a;\n}\npublic static void main(String[] args) {\nIsReachable isReachable = new IsReachable();\nint targetX = 6;\nint targetY = 9;\nboolean result = isReachable.isReachable(targetX, targetY);\n\nSystem.out.println(\"Is it possible to reach (\" + targetX + \", \" + targetY + \")? \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "class", "ĠIs", "Re", "achable", "Ġ{", "<1>", "public", "Ġboolean", "Ġis", "Re", "achable", "(", "int", "Ġtarget", "X", ",", "Ġint", "Ġtarget", "Y", ")", "Ġ{", "<2>", "while", "(", "target", "X", "Ġ%", "Ġ2", "Ġ==", "Ġ0", "){", "<3>", "target", "X", "Ġ/", "=", "Ġ2", ";", "<4>", "}", "<5>", "while", "(", "target", "Y", "Ġ%", "Ġ2", "Ġ==", "Ġ0", "){", "<6>", "target", "Y", "Ġ/", "=", "Ġ2", ";", "<7>", "}", "<8>", "return", "Ġg", "cd", "(", "target", "X", ",", "Ġtarget", "Y", ")", "Ġ==", "Ġ1", ";", "<9>", "}", "<10>", "<11>", "public", "Ġstatic", "Ġint", "Ġg", "cd", "(", "int", "Ġa", ",", "Ġint", "Ġb", ")", "Ġ{", "<12>", "while", "Ġ(", "b", "Ġ>", "Ġ0", ")", "Ġ{", "<13>", "int", "Ġc", "Ġ=", "Ġa", ";", "<14>", "a", "Ġ=", "Ġb", ";", "<15>", "b", "Ġ=", "Ġc", "Ġ%", "Ġb", ";", "<16>", "}", "<17>", "return", "Ġa", ";", "<18>", "}", "<19>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<20>", "Is", "Re", "achable", "Ġis", "Re", "achable", "Ġ=", "Ġnew", "ĠIs", "Re", "achable", "();", "<21>", "int", "Ġtarget", "X", "Ġ=", "Ġ6", ";", "<22>", "int", "Ġtarget", "Y", "Ġ=", "Ġ9", ";", "<23>", "bo", "olean", "Ġresult", "Ġ=", "Ġis", "Re", "achable", ".", "is", "Re", "achable", "(", "target", "X", ",", "Ġtarget", "Y", ");", "<24>", "<25>", "System", ".", "out", ".", "println", "(\"", "Is", "Ġit", "Ġpossible", "Ġto", "Ġreach", "Ġ(\"", "Ġ+", "Ġtarget", "X", "Ġ+", "Ġ\",", "Ġ\"", "Ġ+", "Ġtarget", "Y", "Ġ+", "Ġ\"", ")?", "Ġ\"", "Ġ+", "Ġresult", ");", "<26>", "}", "<27>", "<28>", "}", "<29>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"24": [[1, 0, 15, 13], [11, 8, 11, 1]]}}
{"id": 39, "code": "public class KInversePairs {\npublic int kInversePairs(int n, int k) {\nlong[] dp = new long[k+n+2];\nint mod = 1000000007;\ndp[0] = 1;\nfor(int i = 1;i <= n;i++){\nfor(int j = dp.length-1-i;j >= 0;j--){\ndp[j+i] -= dp[j];\nif(dp[j+i] < 0)dp[j+i] += mod;\n}\n}\nfor(int i = 1;i <= n;i++){\nfor(int j = 0;j < dp.length-1;j++){\ndp[j+1] += dp[j];\ndp[j+1] %= mod;\n}\n}\nreturn (int)dp[k];\n}\npublic static void main(String[] args) {\nKInversePairs kInversePairs = new KInversePairs();\nint n = 3;\nint k = 1;\nint result = kInversePairs.kInversePairs(n, k);\n\nSystem.out.println(\"Number of arrays with \" + k + \" inverse pairs for n = \" + n + \": \" + result);\n}\n}\n", "code_tokens": ["<0>", "public", "Ġclass", "ĠK", "In", "verse", "P", "airs", "Ġ{", "<1>", "public", "Ġint", "Ġk", "In", "verse", "P", "airs", "(", "int", "Ġn", ",", "Ġint", "Ġk", ")", "Ġ{", "<2>", "long", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġlong", "[", "k", "+", "n", "+", "2", "];", "<3>", "int", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<4>", "dp", "[", "0", "]", "Ġ=", "Ġ1", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<=", "Ġn", ";", "i", "++", "){", "<6>", "for", "(", "int", "Ġj", "Ġ=", "Ġd", "p", ".", "length", "-", "1", "-", "i", ";", "j", "Ġ>=", "Ġ0", ";", "j", "--", "){", "<7>", "dp", "[", "j", "+", "i", "]", "Ġ-=", "Ġd", "p", "[", "j", "];", "<8>", "if", "(", "dp", "[", "j", "+", "i", "]", "Ġ<", "Ġ0", ")", "dp", "[", "j", "+", "i", "]", "Ġ+=", "Ġmod", ";", "<9>", "}", "<10>", "}", "<11>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<=", "Ġn", ";", "i", "++", "){", "<12>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġd", "p", ".", "length", "-", "1", ";", "j", "++", "){", "<13>", "dp", "[", "j", "+", "1", "]", "Ġ+=", "Ġd", "p", "[", "j", "];", "<14>", "dp", "[", "j", "+", "1", "]", "Ġ%", "=", "Ġmod", ";", "<15>", "}", "<16>", "}", "<17>", "return", "Ġ(", "int", ")", "dp", "[", "k", "];", "<18>", "}", "<19>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<20>", "K", "In", "verse", "P", "airs", "Ġk", "In", "verse", "P", "airs", "Ġ=", "Ġnew", "ĠK", "In", "verse", "P", "airs", "();", "<21>", "int", "Ġn", "Ġ=", "Ġ3", ";", "<22>", "int", "Ġk", "Ġ=", "Ġ1", ";", "<23>", "int", "Ġresult", "Ġ=", "Ġk", "In", "verse", "P", "airs", ".", "k", "In", "verse", "P", "airs", "(", "n", ",", "Ġk", ");", "<24>", "<25>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġarrays", "Ġwith", "Ġ\"", "Ġ+", "Ġk", "Ġ+", "Ġ\"", "Ġinverse", "Ġpairs", "Ġfor", "Ġn", "Ġ=", "Ġ\"", "Ġ+", "Ġn", "Ġ+", "Ġ\"", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<26>", "}", "<27>", "}", "<28>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"24": [[8, 7, 1, 5], [1, 4, 0, 2]]}}
{"id": 40, "code": "class KthPalindrome {\n\npublic long[] kthPalindrome(int[] queries, int intLength) {\nlong[] result = new long[queries.length];\nfor (int i = 0; i < queries.length; i++) {\nString s = (long) Math.pow(10, (intLength - 1) / 2) + queries[i] - 1 + \"\";\nresult[i] = s.length() > (intLength + 1) / 2 ? -1\n: Long.valueOf(s + new StringBuilder(s.substring(0, s.length() - intLength % 2)).reverse());\n}\nreturn result;\n}\npublic static void main(String[] args) {\nKthPalindrome kthPalindrome = new KthPalindrome();\nint[] queries = {1, 2, 3, 4, 5};\nint intLength = 3;\nlong[] result = kthPalindrome.kthPalindrome(queries, intLength);\n\nSystem.out.println(\"Kth Palindromes:\");\nfor (long palindrome : result) {\nSystem.out.println(palindrome);\n}\n}\n}", "code_tokens": ["<0>", "class", "ĠK", "th", "Pal", "ind", "rome", "Ġ{", "<1>", "<2>", "public", "Ġlong", "[]", "Ġk", "th", "Pal", "ind", "rome", "(", "int", "[]", "Ġqueries", ",", "Ġint", "Ġint", "Length", ")", "Ġ{", "<3>", "long", "[]", "Ġresult", "Ġ=", "Ġnew", "Ġlong", "[", "qu", "eries", ".", "length", "];", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġqueries", ".", "length", ";", "Ġi", "++)", "Ġ{", "<5>", "String", "Ġs", "Ġ=", "Ġ(", "long", ")", "ĠMath", ".", "p", "ow", "(", "10", ",", "Ġ(", "int", "Length", "Ġ-", "Ġ1", ")", "Ġ/", "Ġ2", ")", "Ġ+", "Ġqueries", "[", "i", "]", "Ġ-", "Ġ1", "Ġ+", "Ġ\"", "\";", "<6>", "result", "[", "i", "]", "Ġ=", "Ġs", ".", "length", "()", "Ġ>", "Ġ(", "int", "Length", "Ġ+", "Ġ1", ")", "Ġ/", "Ġ2", "Ġ?", "Ġ-", "1", "<7>", ":", "ĠLong", ".", "value", "Of", "(", "s", "Ġ+", "Ġnew", "ĠString", "Builder", "(", "s", ".", "sub", "string", "(", "0", ",", "Ġs", ".", "length", "()", "Ġ-", "Ġint", "Length", "Ġ%", "Ġ2", ")).", "reverse", "());", "<8>", "}", "<9>", "return", "Ġresult", ";", "<10>", "}", "<11>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<12>", "K", "th", "Pal", "ind", "rome", "Ġk", "th", "Pal", "ind", "rome", "Ġ=", "Ġnew", "ĠK", "th", "Pal", "ind", "rome", "();", "<13>", "int", "[]", "Ġqueries", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ3", ",", "Ġ4", ",", "Ġ5", "};", "<14>", "int", "Ġint", "Length", "Ġ=", "Ġ3", ";", "<15>", "long", "[]", "Ġresult", "Ġ=", "Ġk", "th", "Pal", "ind", "rome", ".", "k", "th", "Pal", "ind", "rome", "(", "qu", "eries", ",", "Ġint", "Length", ");", "<16>", "<17>", "System", ".", "out", ".", "println", "(\"", "K", "th", "ĠPal", "ind", "rom", "es", ":\"", ");", "<18>", "for", "Ġ(", "long", "Ġpal", "ind", "rome", "Ġ:", "Ġresult", ")", "Ġ{", "<19>", "System", ".", "out", ".", "println", "(", "pal", "ind", "rome", ");", "<20>", "}", "<21>", "}", "<22>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"16": [[15, 11, 9, 10], [14, 15, 0, 10]]}}
{"id": 41, "code": "class KthSmallestPath {\nint[][] cts = new int[16][16];\n\npublic String kthSmallestPath(int[] dest, int k) {\nint nv = dest[0];\nint nh = dest[1];\nfor (int i = 0; i <= 15; ++i) {\ncts[0][i]=1;\ncts[i][0]=1;\n}\nfor (int i = 1; i <= 15; ++i) {\nfor (int j = 1; j <= 15; ++j) {\ncts[i][j]=cts[i-1][j]+cts[i][j-1];\n}\n}\nreturn ksm(nh,nv,k);\n}\n\npublic String ksm(int nh, int nv, int k) {\nif (nh==0&&nv==0)\nreturn \"\";\nif (nh==0)\nreturn \"V\"+ksm(nh,nv-1,k);\nif (nv==0)\nreturn \"H\"+ksm(nh-1,nv,k);\nif (k>cts[nh-1][nv])\nreturn \"V\"+ksm(nh,nv-1,k-cts[nh-1][nv]);\nreturn \"H\"+ksm(nh-1,nv,k);\n}\npublic static void main(String[] args) {\nKthSmallestPath kthSmallestPath = new KthSmallestPath();\nint[] dest = {2, 3}; // Destination coordinates\nint k = 3; // k-th smallest path\n\nString result = kthSmallestPath.kthSmallestPath(dest, k);\n\nSystem.out.println(\"The \" + k + \"-th smallest path to destination \" +\n\"(\" + dest[0] + \", \" + dest[1] + \") is: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠK", "th", "Small", "est", "Path", "Ġ{", "<1>", "int", "[", "][", "]", "Ġc", "ts", "Ġ=", "Ġnew", "Ġint", "[", "16", "][", "16", "];", "<2>", "<3>", "public", "ĠString", "Ġk", "th", "Small", "est", "Path", "(", "int", "[]", "Ġdest", ",", "Ġint", "Ġk", ")", "Ġ{", "<4>", "int", "Ġn", "v", "Ġ=", "Ġdest", "[", "0", "];", "<5>", "int", "Ġn", "h", "Ġ=", "Ġdest", "[", "1", "];", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<=", "Ġ15", ";", "Ġ++", "i", ")", "Ġ{", "<7>", "ct", "s", "[", "0", "][", "i", "]=", "1", ";", "<8>", "ct", "s", "[", "i", "][", "0", "]=", "1", ";", "<9>", "}", "<10>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<=", "Ġ15", ";", "Ġ++", "i", ")", "Ġ{", "<11>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ1", ";", "Ġj", "Ġ<=", "Ġ15", ";", "Ġ++", "j", ")", "Ġ{", "<12>", "ct", "s", "[", "i", "][", "j", "]=", "ct", "s", "[", "i", "-", "1", "][", "j", "]+", "ct", "s", "[", "i", "][", "j", "-", "1", "];", "<13>", "}", "<14>", "}", "<15>", "return", "Ġk", "sm", "(", "n", "h", ",", "nv", ",", "k", ");", "<16>", "}", "<17>", "<18>", "public", "ĠString", "Ġk", "sm", "(", "int", "Ġn", "h", ",", "Ġint", "Ġn", "v", ",", "Ġint", "Ġk", ")", "Ġ{", "<19>", "if", "Ġ(", "n", "h", "==", "0", "&&", "nv", "==", "0", ")", "<20>", "return", "Ġ\"", "\";", "<21>", "if", "Ġ(", "n", "h", "==", "0", ")", "<22>", "return", "Ġ\"", "V", "\"", "+", "ks", "m", "(", "n", "h", ",", "nv", "-", "1", ",", "k", ");", "<23>", "if", "Ġ(", "nv", "==", "0", ")", "<24>", "return", "Ġ\"", "H", "\"", "+", "ks", "m", "(", "n", "h", "-", "1", ",", "nv", ",", "k", ");", "<25>", "if", "Ġ(", "k", ">", "ct", "s", "[", "n", "h", "-", "1", "][", "nv", "])", "<26>", "return", "Ġ\"", "V", "\"", "+", "ks", "m", "(", "n", "h", ",", "nv", "-", "1", ",", "k", "-", "ct", "s", "[", "n", "h", "-", "1", "][", "nv", "]);", "<27>", "return", "Ġ\"", "H", "\"", "+", "ks", "m", "(", "n", "h", "-", "1", ",", "nv", ",", "k", ");", "<28>", "}", "<29>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<30>", "K", "th", "Small", "est", "Path", "Ġk", "th", "Small", "est", "Path", "Ġ=", "Ġnew", "ĠK", "th", "Small", "est", "Path", "();", "<31>", "int", "[]", "Ġdest", "Ġ=", "Ġ{", "2", ",", "Ġ3", "};", "Ġ//", "ĠDestination", "Ġcoordinates", "<32>", "int", "Ġk", "Ġ=", "Ġ3", ";", "Ġ//", "Ġk", "-", "th", "Ġsmallest", "Ġpath", "<33>", "<34>", "String", "Ġresult", "Ġ=", "Ġk", "th", "Small", "est", "Path", ".", "k", "th", "Small", "est", "Path", "(", "dest", ",", "Ġk", ");", "<35>", "<36>", "System", ".", "out", ".", "println", "(\"", "The", "Ġ\"", "Ġ+", "Ġk", "Ġ+", "Ġ\"-", "th", "Ġsmallest", "Ġpath", "Ġto", "Ġdestination", "Ġ\"", "Ġ+", "<37>", "\"", "(\"", "Ġ+", "Ġdest", "[", "0", "]", "Ġ+", "Ġ\",", "Ġ\"", "Ġ+", "Ġdest", "[", "1", "]", "Ġ+", "Ġ\"", ")", "Ġis", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<38>", "}", "<39>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"35": [[0, 13], [3, 14, 6]]}}
{"id": 42, "code": "class Largest1BorderedSquare {\npublic int largest1BorderedSquare(int[][] grid) {\nint n = grid.length;\nint m = grid[0].length;\nboolean[][][] hl = new boolean[n][m][m];\nboolean[][][] vl = new boolean[n][n][m];\nfor (int i = 0; i < n; i++) {\nfor (int j = 0; j < m; j++) {\nif (grid[i][j]==0)\ncontinue;\nhl[i][j][j] = true;\nvl[i][i][j] = true;\nfor (int k = j+1; k < m; ++k) {\nif (grid[i][k] == 0)\nbreak;\nhl[i][j][k] = true;\n}\nfor (int k = i+1; k < n; ++k) {\nif (grid[k][j] == 0)\nbreak;\nvl[i][k][j] = true;\n}\n}\n}\nint ans = 0;\nfor (int a = 0; a < n; ++a) {\nfor (int b = 0; b < m; ++b) {\nif (grid[a][b]==0)\ncontinue;\nans = Math.max(ans, 1);\nfor (int c = 1; a+c<n&&b+c<m; ++c) {\nif (!hl[a][b][b+c]||!vl[a][a+c][b])\nbreak;\nif (hl[a+c][b][b+c]&&vl[a][a+c][b+c]) {\nans = Math.max(ans, (c+1)*(c+1));\n}\n}\n}\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nLargest1BorderedSquare largest1BorderedSquare = new Largest1BorderedSquare();\nint[][] grid = {\n{1, 1, 1},\n{1, 0, 1},\n{1, 1, 1}\n};\n\nint result = largest1BorderedSquare.largest1BorderedSquare(grid);\n\nSystem.out.println(\"The area of the largest 1-bordered square is: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠL", "arg", "est", "1", "B", "ordered", "Square", "Ġ{", "<1>", "public", "Ġint", "Ġlargest", "1", "B", "ordered", "Square", "(", "int", "[", "][", "]", "Ġgrid", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġgrid", ".", "length", ";", "<3>", "int", "Ġm", "Ġ=", "Ġgrid", "[", "0", "].", "length", ";", "<4>", "bo", "olean", "[", "][", "][", "]", "Ġh", "l", "Ġ=", "Ġnew", "Ġboolean", "[", "n", "][", "m", "][", "m", "];", "<5>", "bo", "olean", "[", "][", "][", "]", "Ġv", "l", "Ġ=", "Ġnew", "Ġboolean", "[", "n", "][", "n", "][", "m", "];", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<7>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġm", ";", "Ġj", "++)", "Ġ{", "<8>", "if", "Ġ(", "grid", "[", "i", "][", "j", "]", "==", "0", ")", "<9>", "continue", ";", "<10>", "hl", "[", "i", "][", "j", "][", "j", "]", "Ġ=", "Ġtrue", ";", "<11>", "vl", "[", "i", "][", "i", "][", "j", "]", "Ġ=", "Ġtrue", ";", "<12>", "for", "Ġ(", "int", "Ġk", "Ġ=", "Ġj", "+", "1", ";", "Ġk", "Ġ<", "Ġm", ";", "Ġ++", "k", ")", "Ġ{", "<13>", "if", "Ġ(", "grid", "[", "i", "][", "k", "]", "Ġ==", "Ġ0", ")", "<14>", "break", ";", "<15>", "hl", "[", "i", "][", "j", "][", "k", "]", "Ġ=", "Ġtrue", ";", "<16>", "}", "<17>", "for", "Ġ(", "int", "Ġk", "Ġ=", "Ġi", "+", "1", ";", "Ġk", "Ġ<", "Ġn", ";", "Ġ++", "k", ")", "Ġ{", "<18>", "if", "Ġ(", "grid", "[", "k", "][", "j", "]", "Ġ==", "Ġ0", ")", "<19>", "break", ";", "<20>", "vl", "[", "i", "][", "k", "][", "j", "]", "Ġ=", "Ġtrue", ";", "<21>", "}", "<22>", "}", "<23>", "}", "<24>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<25>", "for", "Ġ(", "int", "Ġa", "Ġ=", "Ġ0", ";", "Ġa", "Ġ<", "Ġn", ";", "Ġ++", "a", ")", "Ġ{", "<26>", "for", "Ġ(", "int", "Ġb", "Ġ=", "Ġ0", ";", "Ġb", "Ġ<", "Ġm", ";", "Ġ++", "b", ")", "Ġ{", "<27>", "if", "Ġ(", "grid", "[", "a", "][", "b", "]", "==", "0", ")", "<28>", "continue", ";", "<29>", "ans", "Ġ=", "ĠMath", ".", "max", "(", "ans", ",", "Ġ1", ");", "<30>", "for", "Ġ(", "int", "Ġc", "Ġ=", "Ġ1", ";", "Ġa", "+", "c", "<", "n", "&&", "b", "+", "c", "<", "m", ";", "Ġ++", "c", ")", "Ġ{", "<31>", "if", "Ġ(!", "hl", "[", "a", "][", "b", "][", "b", "+", "c", "]", "||", "!", "vl", "[", "a", "][", "a", "+", "c", "][", "b", "])", "<32>", "break", ";", "<33>", "if", "Ġ(", "hl", "[", "a", "+", "c", "][", "b", "][", "b", "+", "c", "]", "&&", "vl", "[", "a", "][", "a", "+", "c", "][", "b", "+", "c", "])", "Ġ{", "<34>", "ans", "Ġ=", "ĠMath", ".", "max", "(", "ans", ",", "Ġ(", "c", "+", "1", ")*", "(", "c", "+", "1", "));", "<35>", "}", "<36>", "}", "<37>", "}", "<38>", "}", "<39>", "return", "Ġans", ";", "<40>", "}", "<41>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<42>", "L", "arg", "est", "1", "B", "ordered", "Square", "Ġlargest", "1", "B", "ordered", "Square", "Ġ=", "Ġnew", "ĠL", "arg", "est", "1", "B", "ordered", "Square", "();", "<43>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<44>", "{", "1", ",", "Ġ1", ",", "Ġ1", "},", "<45>", "{", "1", ",", "Ġ0", ",", "Ġ1", "},", "<46>", "{", "1", ",", "Ġ1", ",", "Ġ1", "}", "<47>", "};", "<48>", "<49>", "int", "Ġresult", "Ġ=", "Ġlargest", "1", "B", "ordered", "Square", ".", "largest", "1", "B", "ordered", "Square", "(", "grid", ");", "<50>", "<51>", "System", ".", "out", ".", "println", "(\"", "The", "Ġarea", "Ġof", "Ġthe", "Ġlargest", "Ġ1", "-", "b", "ordered", "Ġsquare", "Ġis", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<52>", "}", "<53>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"50": [[13], [7, 15]]}}
{"id": 43, "code": "class LargestMerge {\npublic String largestMerge(String word1, String word2) {\nchar[] s = word1.toCharArray();\nchar[] t = word2.toCharArray();\nint n = s.length, m = t.length;\nchar[] ret = new char[n+m];\nint i = 0, j = 0, p = 0;\nfor(;i < n  && j < m;){\nint k, l;\nfor(k = i, l = j;k < n && l < m && s[k] == t[l];k++,l++);\nif(k >= n){\nret[p++] = t[j++];\n}else if(l >= m){\nret[p++] = s[i++];\n}else if(s[k] > t[l]){\nret[p++] = s[i++];\n}else{\nret[p++] = t[j++];\n}\n}\nwhile(i < n)ret[p++] = s[i++];\nwhile(j < m)ret[p++] = t[j++];\nreturn new String(ret);\n}\npublic static void main(String[] args) {\nLargestMerge largestMerge = new LargestMerge();\nString word1 = \"abcabc\";\nString word2 = \"abdcaba\";\n\nString result = largestMerge.largestMerge(word1, word2);\n\nSystem.out.println(\"The largest merge is: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠL", "arg", "est", "Mer", "ge", "Ġ{", "<1>", "public", "ĠString", "Ġlargest", "Mer", "ge", "(", "String", "Ġword", "1", ",", "ĠString", "Ġword", "2", ")", "Ġ{", "<2>", "char", "[]", "Ġs", "Ġ=", "Ġword", "1", ".", "to", "Char", "Array", "();", "<3>", "char", "[]", "Ġt", "Ġ=", "Ġword", "2", ".", "to", "Char", "Array", "();", "<4>", "int", "Ġn", "Ġ=", "Ġs", ".", "length", ",", "Ġm", "Ġ=", "Ġt", ".", "length", ";", "<5>", "char", "[]", "Ġret", "Ġ=", "Ġnew", "Ġchar", "[", "n", "+", "m", "];", "<6>", "int", "Ġi", "Ġ=", "Ġ0", ",", "Ġj", "Ġ=", "Ġ0", ",", "Ġp", "Ġ=", "Ġ0", ";", "<7>", "for", "(", ";", "i", "Ġ<", "Ġn", "Ġ", "Ġ&&", "Ġj", "Ġ<", "Ġm", ";", "){", "<8>", "int", "Ġk", ",", "Ġl", ";", "<9>", "for", "(", "k", "Ġ=", "Ġi", ",", "Ġl", "Ġ=", "Ġj", ";", "k", "Ġ<", "Ġn", "Ġ&&", "Ġl", "Ġ<", "Ġm", "Ġ&&", "Ġs", "[", "k", "]", "Ġ==", "Ġt", "[", "l", "];", "k", "++", ",", "l", "++", ");", "<10>", "if", "(", "k", "Ġ>=", "Ġn", "){", "<11>", "ret", "[", "p", "++", "]", "Ġ=", "Ġt", "[", "j", "++", "];", "<12>", "}", "else", "Ġif", "(", "l", "Ġ>=", "Ġm", "){", "<13>", "ret", "[", "p", "++", "]", "Ġ=", "Ġs", "[", "i", "++", "];", "<14>", "}", "else", "Ġif", "(", "s", "[", "k", "]", "Ġ>", "Ġt", "[", "l", "])", "{", "<15>", "ret", "[", "p", "++", "]", "Ġ=", "Ġs", "[", "i", "++", "];", "<16>", "}", "else", "{", "<17>", "ret", "[", "p", "++", "]", "Ġ=", "Ġt", "[", "j", "++", "];", "<18>", "}", "<19>", "}", "<20>", "while", "(", "i", "Ġ<", "Ġn", ")", "ret", "[", "p", "++", "]", "Ġ=", "Ġs", "[", "i", "++", "];", "<21>", "while", "(", "j", "Ġ<", "Ġm", ")", "ret", "[", "p", "++", "]", "Ġ=", "Ġt", "[", "j", "++", "];", "<22>", "return", "Ġnew", "ĠString", "(", "ret", ");", "<23>", "}", "<24>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<25>", "L", "arg", "est", "Mer", "ge", "Ġlargest", "Mer", "ge", "Ġ=", "Ġnew", "ĠL", "arg", "est", "Mer", "ge", "();", "<26>", "String", "Ġword", "1", "Ġ=", "Ġ\"", "abc", "abc", "\";", "<27>", "String", "Ġword", "2", "Ġ=", "Ġ\"", "ab", "dc", "aba", "\";", "<28>", "<29>", "String", "Ġresult", "Ġ=", "Ġlargest", "Mer", "ge", ".", "largest", "Mer", "ge", "(", "word", "1", ",", "Ġword", "2", ");", "<30>", "<31>", "System", ".", "out", ".", "println", "(\"", "The", "Ġlargest", "Ġmerge", "Ġis", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<32>", "}", "<33>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"30": [[7, 7, 3], [1, 7, 14, 4]]}}
{"id": 44, "code": "import java.util.*;\nclass LatestDayToCross {\npublic int latestDayToCross(int n, int m, int[][] cells) {\nint low = 0, high = n*m+1;\nwhile(high - low > 1){\nint h = high+low>>1;\nboolean[][] wa = new boolean[n][m];\nfor(int i = 0;i < h;i++){\nwa[cells[i][0]-1][cells[i][1]-1] = true;\n}\nDJSet ds = new DJSet(n*m+2);\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < m;j++){\nif(i+1 < n && !wa[i][j] && !wa[i+1][j]){\nds.union(i*m+j, (i+1)*m+j);\n}\nif(j+1 < m && !wa[i][j] && !wa[i][j+1]){\nds.union(i*m+j, i*m+j+1);\n}\n}\n}\nfor(int j = 0;j < m;j++){\nif(!wa[0][j])ds.union(n*m, 0*m+j);\nif(!wa[n-1][j])ds.union(n*m+1, (n-1)*m+j);\n}\nif(ds.equiv(n*m, n*m+1)){\nlow = h;\n}else{\nhigh = h;\n}\n}\nreturn low;\n}\n\npublic class DJSet {\npublic int[] upper;\n\npublic DJSet(int n) {\nupper = new int[n];\nArrays.fill(upper, -1);\n}\n\npublic int root(int x) {\nreturn upper[x] < 0 ? x : (upper[x] = root(upper[x]));\n}\n\npublic boolean equiv(int x, int y) {\nreturn root(x) == root(y);\n}\n\npublic boolean union(int x, int y) {\nx = root(x);\ny = root(y);\nif (x != y) {\nif (upper[y] < upper[x]) {\nint d = x;\nx = y;\ny = d;\n}\nupper[x] += upper[y];\nupper[y] = x;\n}\nreturn x == y;\n}\n\npublic int count() {\nint ct = 0;\nfor (int u : upper) if (u < 0) ct++;\nreturn ct;\n}\n\npublic int[][] toBucket() {\nint n = upper.length;\nint[][] ret = new int[n][];\nint[] rp = new int[n];\nfor (int i = 0; i < n; i++) if (upper[i] < 0) ret[i] = new int[-upper[i]];\nfor (int i = 0; i < n; i++) {\nint r = root(i);\nret[r][rp[r]++] = i;\n}\nreturn ret;\n}\n}\npublic static void main(String[] args) {\nLatestDayToCross latestDayToCross = new LatestDayToCross();\nint n = 3;\nint m = 3;\nint[][] cells = {\n{1, 2},\n{2, 1},\n{3, 3},\n{2, 2},\n{1, 1},\n{1, 3},\n{2, 3},\n{3, 1},\n{3, 2}\n};\n\nint result = latestDayToCross.latestDayToCross(n, m, cells);\nSystem.out.println(\"Latest day to cross: \" + result);\n}\n\n\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠLatest", "Day", "To", "Cross", "Ġ{", "<2>", "public", "Ġint", "Ġlatest", "Day", "To", "Cross", "(", "int", "Ġn", ",", "Ġint", "Ġm", ",", "Ġint", "[", "][", "]", "Ġcells", ")", "Ġ{", "<3>", "int", "Ġlow", "Ġ=", "Ġ0", ",", "Ġhigh", "Ġ=", "Ġn", "*", "m", "+", "1", ";", "<4>", "while", "(", "high", "Ġ-", "Ġlow", "Ġ>", "Ġ1", "){", "<5>", "int", "Ġh", "Ġ=", "Ġhigh", "+", "low", ">>", "1", ";", "<6>", "bo", "olean", "[", "][", "]", "Ġwa", "Ġ=", "Ġnew", "Ġboolean", "[", "n", "][", "m", "];", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġh", ";", "i", "++", "){", "<8>", "wa", "[", "cells", "[", "i", "][", "0", "]-", "1", "][", "cells", "[", "i", "][", "1", "]-", "1", "]", "Ġ=", "Ġtrue", ";", "<9>", "}", "<10>", "DJ", "Set", "Ġd", "s", "Ġ=", "Ġnew", "ĠDJ", "Set", "(", "n", "*", "m", "+", "2", ");", "<11>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<12>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<13>", "if", "(", "i", "+", "1", "Ġ<", "Ġn", "Ġ&&", "Ġ!", "wa", "[", "i", "][", "j", "]", "Ġ&&", "Ġ!", "wa", "[", "i", "+", "1", "][", "j", "])", "{", "<14>", "ds", ".", "union", "(", "i", "*", "m", "+", "j", ",", "Ġ(", "i", "+", "1", ")*", "m", "+", "j", ");", "<15>", "}", "<16>", "if", "(", "j", "+", "1", "Ġ<", "Ġm", "Ġ&&", "Ġ!", "wa", "[", "i", "][", "j", "]", "Ġ&&", "Ġ!", "wa", "[", "i", "][", "j", "+", "1", "])", "{", "<17>", "ds", ".", "union", "(", "i", "*", "m", "+", "j", ",", "Ġi", "*", "m", "+", "j", "+", "1", ");", "<18>", "}", "<19>", "}", "<20>", "}", "<21>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<22>", "if", "(", "!", "wa", "[", "0", "][", "j", "])", "ds", ".", "union", "(", "n", "*", "m", ",", "Ġ0", "*", "m", "+", "j", ");", "<23>", "if", "(", "!", "wa", "[", "n", "-", "1", "][", "j", "])", "ds", ".", "union", "(", "n", "*", "m", "+", "1", ",", "Ġ(", "n", "-", "1", ")*", "m", "+", "j", ");", "<24>", "}", "<25>", "if", "(", "ds", ".", "equ", "iv", "(", "n", "*", "m", ",", "Ġn", "*", "m", "+", "1", "))", "{", "<26>", "low", "Ġ=", "Ġh", ";", "<27>", "}", "else", "{", "<28>", "high", "Ġ=", "Ġh", ";", "<29>", "}", "<30>", "}", "<31>", "return", "Ġlow", ";", "<32>", "}", "<33>", "<34>", "public", "Ġclass", "ĠDJ", "Set", "Ġ{", "<35>", "public", "Ġint", "[]", "Ġupper", ";", "<36>", "<37>", "public", "ĠDJ", "Set", "(", "int", "Ġn", ")", "Ġ{", "<38>", "upper", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<39>", "Ar", "rays", ".", "fill", "(", "upper", ",", "Ġ-", "1", ");", "<40>", "}", "<41>", "<42>", "public", "Ġint", "Ġroot", "(", "int", "Ġx", ")", "Ġ{", "<43>", "return", "Ġupper", "[", "x", "]", "Ġ<", "Ġ0", "Ġ?", "Ġx", "Ġ:", "Ġ(", "upper", "[", "x", "]", "Ġ=", "Ġroot", "(", "upper", "[", "x", "])", ");", "<44>", "}", "<45>", "<46>", "public", "Ġboolean", "Ġequ", "iv", "(", "int", "Ġx", ",", "Ġint", "Ġy", ")", "Ġ{", "<47>", "return", "Ġroot", "(", "x", ")", "Ġ==", "Ġroot", "(", "y", ");", "<48>", "}", "<49>", "<50>", "public", "Ġboolean", "Ġunion", "(", "int", "Ġx", ",", "Ġint", "Ġy", ")", "Ġ{", "<51>", "x", "Ġ=", "Ġroot", "(", "x", ");", "<52>", "y", "Ġ=", "Ġroot", "(", "y", ");", "<53>", "if", "Ġ(", "x", "Ġ!=", "Ġy", ")", "Ġ{", "<54>", "if", "Ġ(", "upper", "[", "y", "]", "Ġ<", "Ġupper", "[", "x", "])", "Ġ{", "<55>", "int", "Ġd", "Ġ=", "Ġx", ";", "<56>", "x", "Ġ=", "Ġy", ";", "<57>", "y", "Ġ=", "Ġd", ";", "<58>", "}", "<59>", "upper", "[", "x", "]", "Ġ+=", "Ġupper", "[", "y", "];", "<60>", "upper", "[", "y", "]", "Ġ=", "Ġx", ";", "<61>", "}", "<62>", "return", "Ġx", "Ġ==", "Ġy", ";", "<63>", "}", "<64>", "<65>", "public", "Ġint", "Ġcount", "()", "Ġ{", "<66>", "int", "Ġc", "t", "Ġ=", "Ġ0", ";", "<67>", "for", "Ġ(", "int", "Ġu", "Ġ:", "Ġupper", ")", "Ġif", "Ġ(", "u", "Ġ<", "Ġ0", ")", "Ġc", "t", "++;", "<68>", "return", "Ġc", "t", ";", "<69>", "}", "<70>", "<71>", "public", "Ġint", "[", "][", "]", "Ġto", "B", "ucket", "()", "Ġ{", "<72>", "int", "Ġn", "Ġ=", "Ġupper", ".", "length", ";", "<73>", "int", "[", "][", "]", "Ġret", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "];", "<74>", "int", "[]", "Ġr", "p", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<75>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġif", "Ġ(", "upper", "[", "i", "]", "Ġ<", "Ġ0", ")", "Ġret", "[", "i", "]", "Ġ=", "Ġnew", "Ġint", "[", "-", "upper", "[", "i", "]", "];", "<76>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<77>", "int", "Ġr", "Ġ=", "Ġroot", "(", "i", ");", "<78>", "ret", "[", "r", "][", "r", "p", "[", "r", "]", "++", "]", "Ġ=", "Ġi", ";", "<79>", "}", "<80>", "return", "Ġret", ";", "<81>", "}", "<82>", "}", "<83>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<84>", "Latest", "Day", "To", "Cross", "Ġlatest", "Day", "To", "Cross", "Ġ=", "Ġnew", "ĠLatest", "Day", "To", "Cross", "();", "<85>", "int", "Ġn", "Ġ=", "Ġ3", ";", "<86>", "int", "Ġm", "Ġ=", "Ġ3", ";", "<87>", "int", "[", "][", "]", "Ġcells", "Ġ=", "Ġ{", "<88>", "{", "1", ",", "Ġ2", "},", "<89>", "{", "2", ",", "Ġ1", "},", "<90>", "{", "3", ",", "Ġ3", "},", "<91>", "{", "2", ",", "Ġ2", "},", "<92>", "{", "1", ",", "Ġ1", "},", "<93>", "{", "1", ",", "Ġ3", "},", "<94>", "{", "2", ",", "Ġ3", "},", "<95>", "{", "3", ",", "Ġ1", "},", "<96>", "{", "3", ",", "Ġ2", "}", "<97>", "};", "<98>", "<99>", "int", "Ġresult", "Ġ=", "Ġlatest", "Day", "To", "Cross", ".", "latest", "Day", "To", "Cross", "(", "n", ",", "Ġm", ",", "Ġcells", ");", "<100>", "System", ".", "out", ".", "println", "(\"", "Latest", "Ġday", "Ġto", "Ġcross", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<101>", "}", "<102>", "<103>", "<104>", "<105>", "}", "<106>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"100": [[8, 5, 3, 9], [8, 11]]}}
{"id": 45, "code": "import java.util.*;\nclass LenLongestFibSubseq {\npublic int lenLongestFibSubseq(int[] A) {\nHashMap<Integer, Integer> s = new HashMap<Integer, Integer>();\nint n = A.length;\nfor (int i = 0; i < n; i++) {\ns.put(A[i], i);\n}\nint[][] dp = new int[n][n];\nint max = 0;\nfor (int i = n-1; i >= 0; i--) {\nfor (int j = i; j < n; ++j) {\nint next = A[i]+A[j];\nif (s.containsKey(next)) {\nint k = s.get(next);\ndp[i][j] = dp[j][k]+1;\nmax = Math.max(max, dp[i][j]);\n} else {\ndp[i][j] = 2;\n}\n}\n}\nreturn max;\n}\npublic static void main(String[] args) {\nLenLongestFibSubseq lenLongestFibSubseq = new LenLongestFibSubseq();\nint[] A = {1, 3, 7, 11, 12, 14, 18};\n\nint result = lenLongestFibSubseq.lenLongestFibSubseq(A);\n\nSystem.out.println(\"Length of the longest Fibonacci-like subsequence: \" + result);\n\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠLen", "Long", "est", "F", "ib", "Sub", "seq", "Ġ{", "<2>", "public", "Ġint", "Ġlen", "Long", "est", "F", "ib", "Sub", "seq", "(", "int", "[]", "ĠA", ")", "Ġ{", "<3>", "Hash", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġs", "Ġ=", "Ġnew", "ĠHash", "Map", "<", "Integer", ",", "ĠInteger", ">", "();", "<4>", "int", "Ġn", "Ġ=", "ĠA", ".", "length", ";", "<5>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<6>", "s", ".", "put", "(", "A", "[", "i", "],", "Ġi", ");", "<7>", "}", "<8>", "int", "[", "][", "]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "n", "];", "<9>", "int", "Ġmax", "Ġ=", "Ġ0", ";", "<10>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġn", "-", "1", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<11>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġi", ";", "Ġj", "Ġ<", "Ġn", ";", "Ġ++", "j", ")", "Ġ{", "<12>", "int", "Ġnext", "Ġ=", "ĠA", "[", "i", "]+", "A", "[", "j", "];", "<13>", "if", "Ġ(", "s", ".", "cont", "ains", "Key", "(", "next", "))", "Ġ{", "<14>", "int", "Ġk", "Ġ=", "Ġs", ".", "get", "(", "next", ");", "<15>", "dp", "[", "i", "][", "j", "]", "Ġ=", "Ġd", "p", "[", "j", "][", "k", "]+", "1", ";", "<16>", "max", "Ġ=", "ĠMath", ".", "max", "(", "max", ",", "Ġd", "p", "[", "i", "][", "j", "]);", "<17>", "}", "Ġelse", "Ġ{", "<18>", "dp", "[", "i", "][", "j", "]", "Ġ=", "Ġ2", ";", "<19>", "}", "<20>", "}", "<21>", "}", "<22>", "return", "Ġmax", ";", "<23>", "}", "<24>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<25>", "Len", "Long", "est", "F", "ib", "Sub", "seq", "Ġlen", "Long", "est", "F", "ib", "Sub", "seq", "Ġ=", "Ġnew", "ĠLen", "Long", "est", "F", "ib", "Sub", "seq", "();", "<26>", "int", "[]", "ĠA", "Ġ=", "Ġ{", "1", ",", "Ġ3", ",", "Ġ7", ",", "Ġ11", ",", "Ġ12", ",", "Ġ14", ",", "Ġ18", "};", "<27>", "<28>", "int", "Ġresult", "Ġ=", "Ġlen", "Long", "est", "F", "ib", "Sub", "seq", ".", "len", "Long", "est", "F", "ib", "Sub", "seq", "(", "A", ");", "<29>", "<30>", "System", ".", "out", ".", "println", "(\"", "Length", "Ġof", "Ġthe", "Ġlongest", "ĠFib", "on", "acci", "-", "like", "Ġsubsequ", "ence", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<31>", "<32>", "}", "<33>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"29": [[2], [2]]}}
{"id": 46, "code": "import java.util.*;\nclass LongestStrChain {\nboolean check(String a, String b) {\nint idx = 0;\nfor (;idx < a.length(); idx++) if (a.charAt(idx) != b.charAt(idx)) break;\nfor (;idx < a.length(); idx++) if (a.charAt(idx) != b.charAt(idx+1)) break;\nreturn idx >= a.length();\n}\n\n\npublic int longestStrChain(String[] words) {\nint n = words.length;\nList<List<Integer>> graph = new ArrayList<>();\nfor (int i = 0; i < n; i++) graph.add(new ArrayList<>());\nfor (int i = 0; i < n; i++) for (int j = 0; j < n; j++) {\nString a = words[i];\nString b = words[j];\nif (a.length() + 1 == b.length() && check(a, b)) {\ngraph.get(i).add(j);\n}\n}\nint[] dp = new int[n];\nArrays.fill(dp, -1);\nint res = 0;\nfor (int i = 0; i < n; i++) if (dp[i] == -1) {\nres = Math.max(res, solve(dp, i, graph));\n}\nreturn res;\n}\n\nprivate int solve(int[] dp, int cur, List<List<Integer>> graph) {\nif (dp[cur] != -1) return dp[cur];\nint res = 1;\nfor (int to: graph.get(cur)) {\nres = Math.max(res, solve(dp, to, graph) + 1);\n}\nreturn dp[cur] = res;\n}\npublic static void main(String[] args) {\nLongestStrChain longestStrChain = new LongestStrChain();\nString[] words = {\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\"};\n\nint result = longestStrChain.longestStrChain(words);\n\nSystem.out.println(\"Length of the longest string chain: \" + result);\n}\n\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠLong", "est", "Str", "Chain", "Ġ{", "<2>", "bo", "olean", "Ġcheck", "(", "String", "Ġa", ",", "ĠString", "Ġb", ")", "Ġ{", "<3>", "int", "Ġid", "x", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", ";", "id", "x", "Ġ<", "Ġa", ".", "length", "();", "Ġid", "x", "++)", "Ġif", "Ġ(", "a", ".", "char", "At", "(", "id", "x", ")", "Ġ!=", "Ġb", ".", "char", "At", "(", "id", "x", "))", "Ġbreak", ";", "<5>", "for", "Ġ(", ";", "id", "x", "Ġ<", "Ġa", ".", "length", "();", "Ġid", "x", "++)", "Ġif", "Ġ(", "a", ".", "char", "At", "(", "id", "x", ")", "Ġ!=", "Ġb", ".", "char", "At", "(", "id", "x", "+", "1", "))", "Ġbreak", ";", "<6>", "return", "Ġid", "x", "Ġ>=", "Ġa", ".", "length", "();", "<7>", "}", "<8>", "<9>", "<10>", "public", "Ġint", "Ġlongest", "Str", "Chain", "(", "String", "[]", "Ġwords", ")", "Ġ{", "<11>", "int", "Ġn", "Ġ=", "Ġwords", ".", "length", ";", "<12>", "List", "<", "List", "<", "Integer", ">>", "Ġgraph", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<13>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġgraph", ".", "add", "(", "new", "ĠArray", "List", "<", ">", "());", "<14>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġfor", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġn", ";", "Ġj", "++)", "Ġ{", "<15>", "String", "Ġa", "Ġ=", "Ġwords", "[", "i", "];", "<16>", "String", "Ġb", "Ġ=", "Ġwords", "[", "j", "];", "<17>", "if", "Ġ(", "a", ".", "length", "()", "Ġ+", "Ġ1", "Ġ==", "Ġb", ".", "length", "()", "Ġ&&", "Ġcheck", "(", "a", ",", "Ġb", "))", "Ġ{", "<18>", "graph", ".", "get", "(", "i", ").", "add", "(", "j", ");", "<19>", "}", "<20>", "}", "<21>", "int", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<22>", "Ar", "rays", ".", "fill", "(", "dp", ",", "Ġ-", "1", ");", "<23>", "int", "Ġres", "Ġ=", "Ġ0", ";", "<24>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġif", "Ġ(", "dp", "[", "i", "]", "Ġ==", "Ġ-", "1", ")", "Ġ{", "<25>", "res", "Ġ=", "ĠMath", ".", "max", "(", "res", ",", "Ġsolve", "(", "dp", ",", "Ġi", ",", "Ġgraph", "));", "<26>", "}", "<27>", "return", "Ġres", ";", "<28>", "}", "<29>", "<30>", "private", "Ġint", "Ġsolve", "(", "int", "[]", "Ġd", "p", ",", "Ġint", "Ġcur", ",", "ĠList", "<", "List", "<", "Integer", ">>", "Ġgraph", ")", "Ġ{", "<31>", "if", "Ġ(", "dp", "[", "cur", "]", "Ġ!=", "Ġ-", "1", ")", "Ġreturn", "Ġd", "p", "[", "cur", "];", "<32>", "int", "Ġres", "Ġ=", "Ġ1", ";", "<33>", "for", "Ġ(", "int", "Ġto", ":", "Ġgraph", ".", "get", "(", "cur", "))", "Ġ{", "<34>", "res", "Ġ=", "ĠMath", ".", "max", "(", "res", ",", "Ġsolve", "(", "dp", ",", "Ġto", ",", "Ġgraph", ")", "Ġ+", "Ġ1", ");", "<35>", "}", "<36>", "return", "Ġd", "p", "[", "cur", "]", "Ġ=", "Ġres", ";", "<37>", "}", "<38>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<39>", "Long", "est", "Str", "Chain", "Ġlongest", "Str", "Chain", "Ġ=", "Ġnew", "ĠLong", "est", "Str", "Chain", "();", "<40>", "String", "[]", "Ġwords", "Ġ=", "Ġ{\"", "a", "\",", "Ġ\"", "b", "\",", "Ġ\"", "ba", "\",", "Ġ\"", "b", "ca", "\",", "Ġ\"", "bda", "\",", "Ġ\"", "bd", "ca", "\"", "};", "<41>", "<42>", "int", "Ġresult", "Ġ=", "Ġlongest", "Str", "Chain", ".", "long", "est", "Str", "Chain", "(", "words", ");", "<43>", "<44>", "System", ".", "out", ".", "println", "(\"", "Length", "Ġof", "Ġthe", "Ġlongest", "Ġstring", "Ġchain", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<45>", "}", "<46>", "<47>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"43": [[2, 15, 14, 4], [0]]}}
{"id": 47, "code": "import java.util.*;\nclass LongestSubarray {\npublic int longestSubarray(int[] nums, int limit) {\nint n = nums.length;\nTreeMap<Integer, Integer> tm = new TreeMap<>();\nint max = 0;\nint a = 0;\nfor (int i = 0; i < n; ++i) {\nif (!tm.containsKey(nums[i])) {\ntm.put(nums[i],1);\n} else {\ntm.put(nums[i],tm.get(nums[i])+1);\n}\nwhile (tm.lastKey()-tm.firstKey()>limit) {\ntm.put(nums[a], tm.get(nums[a])-1);\nif (tm.get(nums[a])==0)\ntm.remove(nums[a]);\na++;\n}\nmax = Math.max(max,i-a+1);\n}\nreturn max;\n}\npublic static void main(String[] args) {\nLongestSubarray longestSubarray = new LongestSubarray();\nint[] nums = {8, 2, 4, 7};\nint limit = 4;\n\nint result = longestSubarray.longestSubarray(nums, limit);\n\nSystem.out.println(\"Length of the longest subarray: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠLong", "est", "Sub", "array", "Ġ{", "<2>", "public", "Ġint", "Ġlongest", "Sub", "array", "(", "int", "[]", "Ġnum", "s", ",", "Ġint", "Ġlimit", ")", "Ġ{", "<3>", "int", "Ġn", "Ġ=", "Ġnum", "s", ".", "length", ";", "<4>", "Tree", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġt", "m", "Ġ=", "Ġnew", "ĠTree", "Map", "<", ">", "();", "<5>", "int", "Ġmax", "Ġ=", "Ġ0", ";", "<6>", "int", "Ġa", "Ġ=", "Ġ0", ";", "<7>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġ++", "i", ")", "Ġ{", "<8>", "if", "Ġ(!", "tm", ".", "cont", "ains", "Key", "(", "n", "ums", "[", "i", "]", "))", "Ġ{", "<9>", "tm", ".", "put", "(", "n", "ums", "[", "i", "],", "1", ");", "<10>", "}", "Ġelse", "Ġ{", "<11>", "tm", ".", "put", "(", "n", "ums", "[", "i", "],", "tm", ".", "get", "(", "n", "ums", "[", "i", "])", "+", "1", ");", "<12>", "}", "<13>", "while", "Ġ(", "tm", ".", "last", "Key", "()", "-", "tm", ".", "first", "Key", "()", ">", "limit", ")", "Ġ{", "<14>", "tm", ".", "put", "(", "n", "ums", "[", "a", "],", "Ġt", "m", ".", "get", "(", "n", "ums", "[", "a", "])", "-", "1", ");", "<15>", "if", "Ġ(", "tm", ".", "get", "(", "n", "ums", "[", "a", "])", "==", "0", ")", "<16>", "tm", ".", "remove", "(", "n", "ums", "[", "a", "]);", "<17>", "a", "++;", "<18>", "}", "<19>", "max", "Ġ=", "ĠMath", ".", "max", "(", "max", ",", "i", "-", "a", "+", "1", ");", "<20>", "}", "<21>", "return", "Ġmax", ";", "<22>", "}", "<23>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<24>", "Long", "est", "Sub", "array", "Ġlongest", "Sub", "array", "Ġ=", "Ġnew", "ĠLong", "est", "Sub", "array", "();", "<25>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "8", ",", "Ġ2", ",", "Ġ4", ",", "Ġ7", "};", "<26>", "int", "Ġlimit", "Ġ=", "Ġ4", ";", "<27>", "<28>", "int", "Ġresult", "Ġ=", "Ġlongest", "Sub", "array", ".", "long", "est", "Sub", "array", "(", "n", "ums", ",", "Ġlimit", ");", "<29>", "<30>", "System", ".", "out", ".", "println", "(\"", "Length", "Ġof", "Ġthe", "Ġlongest", "Ġsub", "array", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<31>", "}", "<32>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"29": [[6, 8, 6], [4]]}}
{"id": 48, "code": "class LongestWPI {\npublic int longestWPI(int[] hs) {\n\nint l = hs.length;\n\nint s[] = new int[l+1];\n\nfor(int i=0;i<l;++i){\ns[i+1] = s[i]+((hs[i]>8)?1:0);\n}\nint res = 0;\nfor(int i=0;i<l;++i){\nfor(int j=i;j<l;++j){\nint tot = j-i+1;\nif(tot<=res){\ncontinue;\n}\nint lao = s[j+1]-s[i];\nif(lao>tot-lao){\nres = Math.max(res,tot);\n}\n}\n}\nreturn res;\n\n}\npublic static void main(String[] args) {\nLongestWPI longestWPI = new LongestWPI();\nint[] hours = {9, 9, 6, 0, 6, 6, 9};\n\nint result = longestWPI.longestWPI(hours);\n\nSystem.out.println(\"Length of the longest well-performing interval: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠLong", "est", "W", "PI", "Ġ{", "<1>", "public", "Ġint", "Ġlongest", "W", "PI", "(", "int", "[]", "Ġh", "s", ")", "Ġ{", "<2>", "<3>", "int", "Ġl", "Ġ=", "Ġh", "s", ".", "length", ";", "<4>", "<5>", "int", "Ġs", "[]", "Ġ=", "Ġnew", "Ġint", "[", "l", "+", "1", "];", "<6>", "<7>", "for", "(", "int", "Ġi", "=", "0", ";", "i", "<", "l", ";", "++", "i", "){", "<8>", "s", "[", "i", "+", "1", "]", "Ġ=", "Ġs", "[", "i", "]+", "((", "hs", "[", "i", "]", ">", "8", ")?", "1", ":", "0", ");", "<9>", "}", "<10>", "int", "Ġres", "Ġ=", "Ġ0", ";", "<11>", "for", "(", "int", "Ġi", "=", "0", ";", "i", "<", "l", ";", "++", "i", "){", "<12>", "for", "(", "int", "Ġj", "=", "i", ";", "j", "<", "l", ";", "++", "j", "){", "<13>", "int", "Ġtot", "Ġ=", "Ġj", "-", "i", "+", "1", ";", "<14>", "if", "(", "t", "ot", "<", "=", "res", "){", "<15>", "continue", ";", "<16>", "}", "<17>", "int", "Ġl", "ao", "Ġ=", "Ġs", "[", "j", "+", "1", "]-", "s", "[", "i", "];", "<18>", "if", "(", "la", "o", ">", "t", "ot", "-", "la", "o", "){", "<19>", "res", "Ġ=", "ĠMath", ".", "max", "(", "res", ",", "t", "ot", ");", "<20>", "}", "<21>", "}", "<22>", "}", "<23>", "return", "Ġres", ";", "<24>", "<25>", "}", "<26>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<27>", "Long", "est", "W", "PI", "Ġlongest", "W", "PI", "Ġ=", "Ġnew", "ĠLong", "est", "W", "PI", "();", "<28>", "int", "[]", "Ġhours", "Ġ=", "Ġ{", "9", ",", "Ġ9", ",", "Ġ6", ",", "Ġ0", ",", "Ġ6", ",", "Ġ6", ",", "Ġ9", "};", "<29>", "<30>", "int", "Ġresult", "Ġ=", "Ġlongest", "W", "PI", ".", "long", "est", "W", "PI", "(", "hours", ");", "<31>", "<32>", "System", ".", "out", ".", "println", "(\"", "Length", "Ġof", "Ġthe", "Ġlongest", "Ġwell", "-", "performing", "Ġinterval", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<33>", "}", "<34>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"32": [[11, 7], [10, 7, 0]]}}
{"id": 49, "code": "\n\nclass LongestZigZag {\npublic static class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\nTreeNode(int x) { val = x; }\n}\nint res = 0;\npublic int longestZigZag(TreeNode root) {\nres = 0;\nsolve(root);\nreturn res - 1;\n}\n\nprivate int[] solve(TreeNode cur) {\nif (cur == null) return new int[] {0, 0};\nint[] left = solve(cur.left);\nint[] right = solve(cur.right);\nint[] ans = new int[] {left[1] + 1, right[0] + 1};\nthis.res = Math.max(this.res, ans[0]);\nthis.res = Math.max(this.res, ans[1]);\nreturn ans;\n}\npublic static void main(String[] args) {\nLongestZigZag longestZigZag = new LongestZigZag();\n\nLongestZigZag.TreeNode root = new LongestZigZag.TreeNode(1);\nroot.left = new LongestZigZag.TreeNode(2);\nroot.right = new LongestZigZag.TreeNode(3);\nroot.left.right = new LongestZigZag.TreeNode(4);\nroot.left.right.right = new LongestZigZag.TreeNode(5);\nroot.left.right.right.left = new LongestZigZag.TreeNode(6);\n\nint result = longestZigZag.longestZigZag(root);\n\nSystem.out.println(\"Length of the longest ZigZag path: \" + result);\n}\n}\n", "code_tokens": ["<0>", "<1>", "<2>", "class", "ĠLong", "est", "Z", "ig", "Z", "ag", "Ġ{", "<3>", "public", "Ġstatic", "Ġclass", "ĠTree", "Node", "Ġ{", "<4>", "int", "Ġval", ";", "<5>", "Tree", "Node", "Ġleft", ";", "<6>", "Tree", "Node", "Ġright", ";", "<7>", "Tree", "Node", "(", "int", "Ġx", ")", "Ġ{", "Ġval", "Ġ=", "Ġx", ";", "Ġ}", "<8>", "}", "<9>", "int", "Ġres", "Ġ=", "Ġ0", ";", "<10>", "public", "Ġint", "Ġlongest", "Z", "ig", "Z", "ag", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<11>", "res", "Ġ=", "Ġ0", ";", "<12>", "s", "olve", "(", "root", ");", "<13>", "return", "Ġres", "Ġ-", "Ġ1", ";", "<14>", "}", "<15>", "<16>", "private", "Ġint", "[]", "Ġsolve", "(", "Tree", "Node", "Ġcur", ")", "Ġ{", "<17>", "if", "Ġ(", "cur", "Ġ==", "Ġnull", ")", "Ġreturn", "Ġnew", "Ġint", "[]", "Ġ{", "0", ",", "Ġ0", "};", "<18>", "int", "[]", "Ġleft", "Ġ=", "Ġsolve", "(", "cur", ".", "left", ");", "<19>", "int", "[]", "Ġright", "Ġ=", "Ġsolve", "(", "cur", ".", "right", ");", "<20>", "int", "[]", "Ġans", "Ġ=", "Ġnew", "Ġint", "[]", "Ġ{", "left", "[", "1", "]", "Ġ+", "Ġ1", ",", "Ġright", "[", "0", "]", "Ġ+", "Ġ1", "};", "<21>", "this", ".", "res", "Ġ=", "ĠMath", ".", "max", "(", "this", ".", "res", ",", "Ġans", "[", "0", "]);", "<22>", "this", ".", "res", "Ġ=", "ĠMath", ".", "max", "(", "this", ".", "res", ",", "Ġans", "[", "1", "]);", "<23>", "return", "Ġans", ";", "<24>", "}", "<25>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<26>", "Long", "est", "Z", "ig", "Z", "ag", "Ġlongest", "Z", "ig", "Z", "ag", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", "();", "<27>", "<28>", "Long", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "Ġroot", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "(", "1", ");", "<29>", "root", ".", "left", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "(", "2", ");", "<30>", "root", ".", "right", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "(", "3", ");", "<31>", "root", ".", "left", ".", "right", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "(", "4", ");", "<32>", "root", ".", "left", ".", "right", ".", "right", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "(", "5", ");", "<33>", "root", ".", "left", ".", "right", ".", "right", ".", "left", "Ġ=", "Ġnew", "ĠLong", "est", "Z", "ig", "Z", "ag", ".", "Tree", "Node", "(", "6", ");", "<34>", "<35>", "int", "Ġresult", "Ġ=", "Ġlongest", "Z", "ig", "Z", "ag", ".", "long", "est", "Z", "ig", "Z", "ag", "(", "root", ");", "<36>", "<37>", "System", ".", "out", ".", "println", "(\"", "Length", "Ġof", "Ġthe", "Ġlongest", "ĠZig", "Z", "ag", "Ġpath", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<38>", "}", "<39>", "}", "<40>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"45": [[11, 2], [12, 3, 12, 12]]}}
{"id": 50, "code": "class MakeStringSorted {\npublic int makeStringSorted(String s) {\nint n = s.length();\nint[] a = new int[n];\nfor(int i = 0;i < n;i++){\na[i] = s.charAt(i)-'a';\n}\nint[] f = new int[26];\nfor(int v : a)f[v]++;\n\nfinal int mod = 1000000007;\n\nint[][] fif = enumFIF(5000, mod);\nlong ret = 0;\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < a[i];j++){\nif(f[j] == 0)continue;\nf[j]--;\nlong num = 1;\nint su = 0;\nfor(int k = 0;k < 26;k++){\nsu += f[k];\nnum = num * C(su, f[k], mod, fif) % mod;\n}\nret += num;\nf[j]++;\n}\nf[a[i]]--;\n}\nreturn (int)(ret%mod);\n}\n\npublic long C(int n, int r, int mod, int[][] fif) {\nif (n < 0 || r < 0 || r > n) return 0;\nreturn (long) fif[0][n] * fif[1][r] % mod * fif[1][n - r] % mod;\n}\n\n\npublic int[][] enumFIF(int n, int mod) {\nint[] f = new int[n + 1];\nint[] invf = new int[n + 1];\nf[0] = 1;\nfor (int i = 1; i <= n; i++) {\nf[i] = (int) ((long) f[i - 1] * i % mod);\n}\nlong a = f[n];\nlong b = mod;\nlong p = 1, q = 0;\nwhile (b > 0) {\nlong c = a / b;\nlong d;\nd = a;\na = b;\nb = d % b;\nd = p;\np = q;\nq = d - c * q;\n}\ninvf[n] = (int) (p < 0 ? p + mod : p);\nfor (int i = n - 1; i >= 0; i--) {\ninvf[i] = (int) ((long) invf[i + 1] * (i + 1) % mod);\n}\nreturn new int[][]{f, invf};\n}\npublic static void main(String[] args) {\nMakeStringSorted makeStringSorted = new MakeStringSorted();\n\nString s = \"cba\";\n\nint result = makeStringSorted.makeStringSorted(s);\n\nSystem.out.println(\"Number of steps to make the string sorted: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "class", "ĠMake", "String", "S", "orted", "Ġ{", "<1>", "public", "Ġint", "Ġmake", "String", "S", "orted", "(", "String", "Ġs", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġs", ".", "length", "();", "<3>", "int", "[]", "Ġa", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<4>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<5>", "a", "[", "i", "]", "Ġ=", "Ġs", ".", "char", "At", "(", "i", ")-", "'", "a", "';", "<6>", "}", "<7>", "int", "[]", "Ġf", "Ġ=", "Ġnew", "Ġint", "[", "26", "];", "<8>", "for", "(", "int", "Ġv", "Ġ:", "Ġa", ")", "f", "[", "v", "]", "++;", "<9>", "<10>", "final", "Ġint", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<11>", "<12>", "int", "[", "][", "]", "Ġfif", "Ġ=", "Ġenum", "F", "IF", "(", "5000", ",", "Ġmod", ");", "<13>", "long", "Ġret", "Ġ=", "Ġ0", ";", "<14>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<15>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġa", "[", "i", "];", "j", "++", "){", "<16>", "if", "(", "f", "[", "j", "]", "Ġ==", "Ġ0", ")", "continue", ";", "<17>", "f", "[", "j", "]", "--", ";", "<18>", "long", "Ġnum", "Ġ=", "Ġ1", ";", "<19>", "int", "Ġsu", "Ġ=", "Ġ0", ";", "<20>", "for", "(", "int", "Ġk", "Ġ=", "Ġ0", ";", "k", "Ġ<", "Ġ26", ";", "k", "++", "){", "<21>", "su", "Ġ+=", "Ġf", "[", "k", "];", "<22>", "num", "Ġ=", "Ġnum", "Ġ*", "ĠC", "(", "su", ",", "Ġf", "[", "k", "],", "Ġmod", ",", "Ġfif", ")", "Ġ%", "Ġmod", ";", "<23>", "}", "<24>", "ret", "Ġ+=", "Ġnum", ";", "<25>", "f", "[", "j", "]", "++;", "<26>", "}", "<27>", "f", "[", "a", "[", "i", "]]", "--", ";", "<28>", "}", "<29>", "return", "Ġ(", "int", ")(", "ret", "%", "mod", ");", "<30>", "}", "<31>", "<32>", "public", "Ġlong", "ĠC", "(", "int", "Ġn", ",", "Ġint", "Ġr", ",", "Ġint", "Ġmod", ",", "Ġint", "[", "][", "]", "Ġfif", ")", "Ġ{", "<33>", "if", "Ġ(", "n", "Ġ<", "Ġ0", "Ġ||", "Ġr", "Ġ<", "Ġ0", "Ġ||", "Ġr", "Ġ>", "Ġn", ")", "Ġreturn", "Ġ0", ";", "<34>", "return", "Ġ(", "long", ")", "Ġfif", "[", "0", "][", "n", "]", "Ġ*", "Ġfif", "[", "1", "][", "r", "]", "Ġ%", "Ġmod", "Ġ*", "Ġfif", "[", "1", "][", "n", "Ġ-", "Ġr", "]", "Ġ%", "Ġmod", ";", "<35>", "}", "<36>", "<37>", "<38>", "public", "Ġint", "[", "][", "]", "Ġenum", "F", "IF", "(", "int", "Ġn", ",", "Ġint", "Ġmod", ")", "Ġ{", "<39>", "int", "[]", "Ġf", "Ġ=", "Ġnew", "Ġint", "[", "n", "Ġ+", "Ġ1", "];", "<40>", "int", "[]", "Ġinv", "f", "Ġ=", "Ġnew", "Ġint", "[", "n", "Ġ+", "Ġ1", "];", "<41>", "f", "[", "0", "]", "Ġ=", "Ġ1", ";", "<42>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<=", "Ġn", ";", "Ġi", "++)", "Ġ{", "<43>", "f", "[", "i", "]", "Ġ=", "Ġ(", "int", ")", "Ġ((", "long", ")", "Ġf", "[", "i", "Ġ-", "Ġ1", "]", "Ġ*", "Ġi", "Ġ%", "Ġmod", ");", "<44>", "}", "<45>", "long", "Ġa", "Ġ=", "Ġf", "[", "n", "];", "<46>", "long", "Ġb", "Ġ=", "Ġmod", ";", "<47>", "long", "Ġp", "Ġ=", "Ġ1", ",", "Ġq", "Ġ=", "Ġ0", ";", "<48>", "while", "Ġ(", "b", "Ġ>", "Ġ0", ")", "Ġ{", "<49>", "long", "Ġc", "Ġ=", "Ġa", "Ġ/", "Ġb", ";", "<50>", "long", "Ġd", ";", "<51>", "d", "Ġ=", "Ġa", ";", "<52>", "a", "Ġ=", "Ġb", ";", "<53>", "b", "Ġ=", "Ġd", "Ġ%", "Ġb", ";", "<54>", "d", "Ġ=", "Ġp", ";", "<55>", "p", "Ġ=", "Ġq", ";", "<56>", "q", "Ġ=", "Ġd", "Ġ-", "Ġc", "Ġ*", "Ġq", ";", "<57>", "}", "<58>", "inv", "f", "[", "n", "]", "Ġ=", "Ġ(", "int", ")", "Ġ(", "p", "Ġ<", "Ġ0", "Ġ?", "Ġp", "Ġ+", "Ġmod", "Ġ:", "Ġp", ");", "<59>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġn", "Ġ-", "Ġ1", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<60>", "inv", "f", "[", "i", "]", "Ġ=", "Ġ(", "int", ")", "Ġ((", "long", ")", "Ġinv", "f", "[", "i", "Ġ+", "Ġ1", "]", "Ġ*", "Ġ(", "i", "Ġ+", "Ġ1", ")", "Ġ%", "Ġmod", ");", "<61>", "}", "<62>", "return", "Ġnew", "Ġint", "[", "][", "]", "{", "f", ",", "Ġinv", "f", "};", "<63>", "}", "<64>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<65>", "Make", "String", "S", "orted", "Ġmake", "String", "S", "orted", "Ġ=", "Ġnew", "ĠMake", "String", "S", "orted", "();", "<66>", "<67>", "String", "Ġs", "Ġ=", "Ġ\"", "c", "ba", "\";", "<68>", "<69>", "int", "Ġresult", "Ġ=", "Ġmake", "String", "S", "orted", ".", "make", "String", "S", "orted", "(", "s", ");", "<70>", "<71>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġsteps", "Ġto", "Ġmake", "Ġthe", "Ġstring", "Ġsorted", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<72>", "}", "<73>", "<74>", "}", "<75>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"70": [[2, 7, 4, 1], [5]]}}
{"id": 51, "code": "import java.util.*;\n\nclass MatrixSumQueries {\n\npublic long matrixSumQueries(int n, int[][] queries) {\nHashSet<Integer> row = new HashSet<>(), col = new HashSet<>();\nlong sum = 0;\nfor (int i = queries.length - 1; i >= 0; i--) {\nsum += !(queries[i][0] == 0 ? row : col).add(queries[i][1]) ? 0\n: queries[i][2] * (n - (queries[i][0] == 0 ? col : row).size());\n}\nreturn sum;\n}\npublic static void main(String[] args) {\nMatrixSumQueries matrixSumQueries = new MatrixSumQueries();\n\nint n = 3;\nint[][] queries = {\n{0, 0, 5},\n{1, 1, 7},\n{0, 2, -3},\n{1, 0, 2}\n};\n\nlong result = matrixSumQueries.matrixSumQueries(n, queries);\n\nSystem.out.println(\"Matrix sum after queries: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMatrix", "Sum", "Qu", "eries", "Ġ{", "<3>", "<4>", "public", "Ġlong", "Ġmatrix", "Sum", "Qu", "eries", "(", "int", "Ġn", ",", "Ġint", "[", "][", "]", "Ġqueries", ")", "Ġ{", "<5>", "Hash", "Set", "<", "Integer", ">", "Ġrow", "Ġ=", "Ġnew", "ĠHash", "Set", "<", ">", "(),", "Ġcol", "Ġ=", "Ġnew", "ĠHash", "Set", "<", ">", "();", "<6>", "long", "Ġsum", "Ġ=", "Ġ0", ";", "<7>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġqueries", ".", "length", "Ġ-", "Ġ1", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<8>", "sum", "Ġ+=", "Ġ!", "(", "qu", "eries", "[", "i", "][", "0", "]", "Ġ==", "Ġ0", "Ġ?", "Ġrow", "Ġ:", "Ġcol", ").", "add", "(", "qu", "eries", "[", "i", "][", "1", "])", "Ġ?", "Ġ0", "<9>", ":", "Ġqueries", "[", "i", "][", "2", "]", "Ġ*", "Ġ(", "n", "Ġ-", "Ġ(", "qu", "eries", "[", "i", "][", "0", "]", "Ġ==", "Ġ0", "Ġ?", "Ġcol", "Ġ:", "Ġrow", ").", "size", "());", "<10>", "}", "<11>", "return", "Ġsum", ";", "<12>", "}", "<13>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<14>", "Matrix", "Sum", "Qu", "eries", "Ġmatrix", "Sum", "Qu", "eries", "Ġ=", "Ġnew", "ĠMatrix", "Sum", "Qu", "eries", "();", "<15>", "<16>", "int", "Ġn", "Ġ=", "Ġ3", ";", "<17>", "int", "[", "][", "]", "Ġqueries", "Ġ=", "Ġ{", "<18>", "{", "0", ",", "Ġ0", ",", "Ġ5", "},", "<19>", "{", "1", ",", "Ġ1", ",", "Ġ7", "},", "<20>", "{", "0", ",", "Ġ2", ",", "Ġ-", "3", "},", "<21>", "{", "1", ",", "Ġ0", ",", "Ġ2", "}", "<22>", "};", "<23>", "<24>", "long", "Ġresult", "Ġ=", "Ġmatrix", "Sum", "Qu", "eries", ".", "mat", "rix", "Sum", "Qu", "eries", "(", "n", ",", "Ġqueries", ");", "<25>", "<26>", "System", ".", "out", ".", "println", "(\"", "Matrix", "Ġsum", "Ġafter", "Ġqueries", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<27>", "}", "<28>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"25": [[6, 10], [11, 0, 0]]}}
{"id": 52, "code": "import java.util.*;\n\nclass MaxDistance {\npublic int maxDistance(int[][] a) {\nint n = a.length, m = a[0].length;\nint[][] d = new int[n][m];\nQueue<int[]> q = new ArrayDeque<>();\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < m;j++){\nd[i][j] = a[i][j] == 1 ? 0 : 99999999;\nif(d[i][j] == 0)q.add(new int[]{i, j});\n}\n}\n\nint[] dr = { 1, 0, -1, 0 };\nint[] dc = { 0, 1, 0, -1 };\nwhile(!q.isEmpty()){\nint[] cur = q.poll();\nint r = cur[0], c = cur[1];\nfor(int k = 0;k < 4;k++){\nint nr = r + dr[k], nc = c + dc[k];\nif(nr >= 0 && nr < n && nc >= 0 && nc < m && d[nr][nc] > d[r][c] + 1){\nd[nr][nc] = d[r][c] + 1;\nq.add(new int[]{nr, nc});\n}\n}\n}\n\nint max = 0;\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < m;j++){\nmax = Math.max(max, d[i][j]);\n}\n}\nif(max == 99999999 || max == 0)max = -1;\nreturn max;\n}\npublic static void main(String[] args) {\nMaxDistance maxDistance = new MaxDistance();\n\nint[][] grid = {\n{1, 0, 1},\n{0, 0, 0},\n{1, 0, 1}\n};\n\nint result = maxDistance.maxDistance(grid);\n\nSystem.out.println(\"Maximum distance from land to water: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMax", "Distance", "Ġ{", "<3>", "public", "Ġint", "Ġmax", "Distance", "(", "int", "[", "][", "]", "Ġa", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġa", ".", "length", ",", "Ġm", "Ġ=", "Ġa", "[", "0", "].", "length", ";", "<5>", "int", "[", "][", "]", "Ġd", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "m", "];", "<6>", "Queue", "<", "int", "[]", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<8>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<9>", "d", "[", "i", "][", "j", "]", "Ġ=", "Ġa", "[", "i", "][", "j", "]", "Ġ==", "Ġ1", "Ġ?", "Ġ0", "Ġ:", "Ġ9", "9999", "999", ";", "<10>", "if", "(", "d", "[", "i", "][", "j", "]", "Ġ==", "Ġ0", ")", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "i", ",", "Ġj", "});", "<11>", "}", "<12>", "}", "<13>", "<14>", "int", "[]", "Ġdr", "Ġ=", "Ġ{", "Ġ1", ",", "Ġ0", ",", "Ġ-", "1", ",", "Ġ0", "Ġ};", "<15>", "int", "[]", "Ġdc", "Ġ=", "Ġ{", "Ġ0", ",", "Ġ1", ",", "Ġ0", ",", "Ġ-", "1", "Ġ};", "<16>", "while", "(", "!", "q", ".", "is", "Empty", "()", "){", "<17>", "int", "[]", "Ġcur", "Ġ=", "Ġq", ".", "poll", "();", "<18>", "int", "Ġr", "Ġ=", "Ġcur", "[", "0", "],", "Ġc", "Ġ=", "Ġcur", "[", "1", "];", "<19>", "for", "(", "int", "Ġk", "Ġ=", "Ġ0", ";", "k", "Ġ<", "Ġ4", ";", "k", "++", "){", "<20>", "int", "Ġn", "r", "Ġ=", "Ġr", "Ġ+", "Ġdr", "[", "k", "],", "Ġn", "c", "Ġ=", "Ġc", "Ġ+", "Ġdc", "[", "k", "];", "<21>", "if", "(", "nr", "Ġ>=", "Ġ0", "Ġ&&", "Ġn", "r", "Ġ<", "Ġn", "Ġ&&", "Ġn", "c", "Ġ>=", "Ġ0", "Ġ&&", "Ġn", "c", "Ġ<", "Ġm", "Ġ&&", "Ġd", "[", "nr", "][", "nc", "]", "Ġ>", "Ġd", "[", "r", "][", "c", "]", "Ġ+", "Ġ1", "){", "<22>", "d", "[", "nr", "][", "nc", "]", "Ġ=", "Ġd", "[", "r", "][", "c", "]", "Ġ+", "Ġ1", ";", "<23>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "nr", ",", "Ġn", "c", "});", "<24>", "}", "<25>", "}", "<26>", "}", "<27>", "<28>", "int", "Ġmax", "Ġ=", "Ġ0", ";", "<29>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<30>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<31>", "max", "Ġ=", "ĠMath", ".", "max", "(", "max", ",", "Ġd", "[", "i", "][", "j", "]);", "<32>", "}", "<33>", "}", "<34>", "if", "(", "max", "Ġ==", "Ġ9", "9999", "999", "Ġ||", "Ġmax", "Ġ==", "Ġ0", ")", "max", "Ġ=", "Ġ-", "1", ";", "<35>", "return", "Ġmax", ";", "<36>", "}", "<37>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<38>", "Max", "Distance", "Ġmax", "Distance", "Ġ=", "Ġnew", "ĠMax", "Distance", "();", "<39>", "<40>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<41>", "{", "1", ",", "Ġ0", ",", "Ġ1", "},", "<42>", "{", "0", ",", "Ġ0", ",", "Ġ0", "},", "<43>", "{", "1", ",", "Ġ0", ",", "Ġ1", "}", "<44>", "};", "<45>", "<46>", "int", "Ġresult", "Ġ=", "Ġmax", "Distance", ".", "max", "Distance", "(", "grid", ");", "<47>", "<48>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġdistance", "Ġfrom", "Ġland", "Ġto", "Ġwater", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<49>", "}", "<50>", "}", "<51>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"47": [[4, 3, 8], [13, 3, 9]]}}
{"id": 53, "code": "import java.util.*;\n\nclass MaxIncreasingCells {\npublic int maxIncreasingCells(int[][] mat) {\nint N = mat.length, M = mat[0].length;\nList<int[]> sort = new ArrayList<>();\nfor (int i = 0; i < N; i++) {\nfor (int j = 0; j < M; j++) {\nsort.add(new int[]{mat[i][j], i, j});\n}\n}\nCollections.sort(sort, ( a, b) -> a[0] - b[0]);\nint[][] dp = new int[N][M];\nint[] row = new int[N], col = new int[M];\nint res = 0;\nfor (int i = 0; i < sort.size(); i++) {\nint j = i;\nwhile (j + 1 < sort.size() && sort.get(j + 1)[0] == sort.get(i)[0]) j++;\nfor (int k = i; k <= j; k++) {\nint r = sort.get(k)[1], c = sort.get(k)[2];\ndp[r][c] = Math.max(row[r] + 1, col[c] + 1);\nres = Math.max(res, dp[r][c]);\n}\nfor (int k = i; k <= j; k++) {\nint r = sort.get(k)[1], c = sort.get(k)[2];\nrow[r] = Math.max(row[r], dp[r][c]);\ncol[c] = Math.max(col[c], dp[r][c]);\n}\ni = j;\n}\nreturn res;\n}\npublic static void main(String[] args) {\nMaxIncreasingCells maxIncreasingCells = new MaxIncreasingCells();\n\nint[][] mat = {\n{3, 1, 6},\n{7, 5, 8},\n{9, 2, 4}\n};\n\nint result = maxIncreasingCells.maxIncreasingCells(mat);\n\nSystem.out.println(\"Maximum number of increasing cells: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMax", "Incre", "asing", "C", "ells", "Ġ{", "<3>", "public", "Ġint", "Ġmax", "Incre", "asing", "C", "ells", "(", "int", "[", "][", "]", "Ġmat", ")", "Ġ{", "<4>", "int", "ĠN", "Ġ=", "Ġmat", ".", "length", ",", "ĠM", "Ġ=", "Ġmat", "[", "0", "].", "length", ";", "<5>", "List", "<", "int", "[]", ">", "Ġsort", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "ĠN", ";", "Ġi", "++)", "Ġ{", "<7>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "ĠM", ";", "Ġj", "++)", "Ġ{", "<8>", "sort", ".", "add", "(", "new", "Ġint", "[]", "{", "mat", "[", "i", "][", "j", "],", "Ġi", ",", "Ġj", "});", "<9>", "}", "<10>", "}", "<11>", "Col", "lections", ".", "sort", "(", "sort", ",", "Ġ(", "Ġa", ",", "Ġb", ")", "Ġ->", "Ġa", "[", "0", "]", "Ġ-", "Ġb", "[", "0", "]);", "<12>", "int", "[", "][", "]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "[", "N", "][", "M", "];", "<13>", "int", "[]", "Ġrow", "Ġ=", "Ġnew", "Ġint", "[", "N", "],", "Ġcol", "Ġ=", "Ġnew", "Ġint", "[", "M", "];", "<14>", "int", "Ġres", "Ġ=", "Ġ0", ";", "<15>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġsort", ".", "size", "();", "Ġi", "++)", "Ġ{", "<16>", "int", "Ġj", "Ġ=", "Ġi", ";", "<17>", "while", "Ġ(", "j", "Ġ+", "Ġ1", "Ġ<", "Ġsort", ".", "size", "()", "Ġ&&", "Ġsort", ".", "get", "(", "j", "Ġ+", "Ġ1", ")[", "0", "]", "Ġ==", "Ġsort", ".", "get", "(", "i", ")[", "0", "])", "Ġj", "++;", "<18>", "for", "Ġ(", "int", "Ġk", "Ġ=", "Ġi", ";", "Ġk", "Ġ<=", "Ġj", ";", "Ġk", "++)", "Ġ{", "<19>", "int", "Ġr", "Ġ=", "Ġsort", ".", "get", "(", "k", ")[", "1", "],", "Ġc", "Ġ=", "Ġsort", ".", "get", "(", "k", ")[", "2", "];", "<20>", "dp", "[", "r", "][", "c", "]", "Ġ=", "ĠMath", ".", "max", "(", "row", "[", "r", "]", "Ġ+", "Ġ1", ",", "Ġcol", "[", "c", "]", "Ġ+", "Ġ1", ");", "<21>", "res", "Ġ=", "ĠMath", ".", "max", "(", "res", ",", "Ġd", "p", "[", "r", "][", "c", "]);", "<22>", "}", "<23>", "for", "Ġ(", "int", "Ġk", "Ġ=", "Ġi", ";", "Ġk", "Ġ<=", "Ġj", ";", "Ġk", "++)", "Ġ{", "<24>", "int", "Ġr", "Ġ=", "Ġsort", ".", "get", "(", "k", ")[", "1", "],", "Ġc", "Ġ=", "Ġsort", ".", "get", "(", "k", ")[", "2", "];", "<25>", "row", "[", "r", "]", "Ġ=", "ĠMath", ".", "max", "(", "row", "[", "r", "],", "Ġd", "p", "[", "r", "][", "c", "]);", "<26>", "col", "[", "c", "]", "Ġ=", "ĠMath", ".", "max", "(", "col", "[", "c", "],", "Ġd", "p", "[", "r", "][", "c", "]);", "<27>", "}", "<28>", "i", "Ġ=", "Ġj", ";", "<29>", "}", "<30>", "return", "Ġres", ";", "<31>", "}", "<32>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<33>", "Max", "Incre", "asing", "C", "ells", "Ġmax", "Incre", "asing", "C", "ells", "Ġ=", "Ġnew", "ĠMax", "Incre", "asing", "C", "ells", "();", "<34>", "<35>", "int", "[", "][", "]", "Ġmat", "Ġ=", "Ġ{", "<36>", "{", "3", ",", "Ġ1", ",", "Ġ6", "},", "<37>", "{", "7", ",", "Ġ5", ",", "Ġ8", "},", "<38>", "{", "9", ",", "Ġ2", ",", "Ġ4", "}", "<39>", "};", "<40>", "<41>", "int", "Ġresult", "Ġ=", "Ġmax", "Incre", "asing", "C", "ells", ".", "max", "Incre", "asing", "C", "ells", "(", "mat", ");", "<42>", "<43>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġnumber", "Ġof", "Ġincreasing", "Ġcells", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<44>", "}", "<45>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"42": [[1, 15, 1, 8], [0, 0]]}}
{"id": 54, "code": "class MaxMoves {\n\npublic int maxMoves(int[][] grid) {\nint dp[][] = new int[grid.length][grid[0].length], max = 0;\nfor (int i = 1; i < grid[0].length; i++) {\nfor (int j = 0; j < grid.length; j++) {\nmax = (dp[j][i] = Math.max(j > 0 && grid[j][i] > grid[j - 1][i - 1] ? dp[j - 1][i - 1] + 1 : 0,\nMath.max(j < grid.length - 1 && grid[j][i] > grid[j + 1][i - 1] ? dp[j + 1][i - 1] + 1 : 0,\ngrid[j][i] > grid[j][i - 1] ? dp[j][i - 1] + 1 : 0))) == i ? i : max;\n}\n}\nreturn max;\n}\npublic static void main(String[] args) {\nMaxMoves maxMoves = new MaxMoves();\n\nint[][] grid = {\n{3, 4, 5},\n{3, 2, 6},\n{2, 2, 1}\n};\n\nint result = maxMoves.maxMoves(grid);\n\nSystem.out.println(\"Maximum number of moves: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMax", "M", "oves", "Ġ{", "<1>", "<2>", "public", "Ġint", "Ġmax", "M", "oves", "(", "int", "[", "][", "]", "Ġgrid", ")", "Ġ{", "<3>", "int", "Ġd", "p", "[", "][", "]", "Ġ=", "Ġnew", "Ġint", "[", "grid", ".", "length", "][", "grid", "[", "0", "].", "length", "],", "Ġmax", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<", "Ġgrid", "[", "0", "].", "length", ";", "Ġi", "++)", "Ġ{", "<5>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġgrid", ".", "length", ";", "Ġj", "++)", "Ġ{", "<6>", "max", "Ġ=", "Ġ(", "dp", "[", "j", "][", "i", "]", "Ġ=", "ĠMath", ".", "max", "(", "j", "Ġ>", "Ġ0", "Ġ&&", "Ġgrid", "[", "j", "][", "i", "]", "Ġ>", "Ġgrid", "[", "j", "Ġ-", "Ġ1", "][", "i", "Ġ-", "Ġ1", "]", "Ġ?", "Ġd", "p", "[", "j", "Ġ-", "Ġ1", "][", "i", "Ġ-", "Ġ1", "]", "Ġ+", "Ġ1", "Ġ:", "Ġ0", ",", "<7>", "Math", ".", "max", "(", "j", "Ġ<", "Ġgrid", ".", "length", "Ġ-", "Ġ1", "Ġ&&", "Ġgrid", "[", "j", "][", "i", "]", "Ġ>", "Ġgrid", "[", "j", "Ġ+", "Ġ1", "][", "i", "Ġ-", "Ġ1", "]", "Ġ?", "Ġd", "p", "[", "j", "Ġ+", "Ġ1", "][", "i", "Ġ-", "Ġ1", "]", "Ġ+", "Ġ1", "Ġ:", "Ġ0", ",", "<8>", "grid", "[", "j", "][", "i", "]", "Ġ>", "Ġgrid", "[", "j", "][", "i", "Ġ-", "Ġ1", "]", "Ġ?", "Ġd", "p", "[", "j", "][", "i", "Ġ-", "Ġ1", "]", "Ġ+", "Ġ1", "Ġ:", "Ġ0", ")))", "Ġ==", "Ġi", "Ġ?", "Ġi", "Ġ:", "Ġmax", ";", "<9>", "}", "<10>", "}", "<11>", "return", "Ġmax", ";", "<12>", "}", "<13>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<14>", "Max", "M", "oves", "Ġmax", "M", "oves", "Ġ=", "Ġnew", "ĠMax", "M", "oves", "();", "<15>", "<16>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<17>", "{", "3", ",", "Ġ4", ",", "Ġ5", "},", "<18>", "{", "3", ",", "Ġ2", ",", "Ġ6", "},", "<19>", "{", "2", ",", "Ġ2", ",", "Ġ1", "}", "<20>", "};", "<21>", "<22>", "int", "Ġresult", "Ġ=", "Ġmax", "M", "oves", ".", "max", "M", "oves", "(", "grid", ");", "<23>", "<24>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġnumber", "Ġof", "Ġmoves", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<25>", "}", "<26>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"23": [[15, 15], [1, 2]]}}
{"id": 55, "code": "import java.util.*;\n\nclass MaxPerformance {\npublic int maxPerformance(int n, int[] speed, int[] efficiency, int k) {\nint[][] se = new int[n][];\nfor(int i = 0;i < n;i++){\nse[i] = new int[]{speed[i], efficiency[i]};\n}\nint mod = 1000000007;\nArrays.sort(se, new Comparator<int[]>() {\npublic int compare(int[] a, int[] b) {\nreturn -(a[1] - b[1]);\n}\n});\nPriorityQueue<Integer> pq = new PriorityQueue<>();\nlong s = 0;\nlong max = 0;\nfor(int i = 0;i < n;i++){\npq.add(se[i][0]);\ns += se[i][0];\nif(pq.size() > k){\ns -= pq.poll();\n}\nmax = Math.max(max, s*se[i][1]);\n}\nreturn (int)(max % mod);\n}\npublic static void main(String[] args) {\nMaxPerformance maxPerformance = new MaxPerformance();\n\nint n = 6;\nint[] speed = {2, 10, 3, 1, 5, 8};\nint[] efficiency = {5, 4, 3, 9, 7, 2};\nint k = 3;\n\nint result = maxPerformance.maxPerformance(n, speed, efficiency, k);\n\nSystem.out.println(\"Maximum performance: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMax", "Performance", "Ġ{", "<3>", "public", "Ġint", "Ġmax", "Performance", "(", "int", "Ġn", ",", "Ġint", "[]", "Ġspeed", ",", "Ġint", "[]", "Ġefficiency", ",", "Ġint", "Ġk", ")", "Ġ{", "<4>", "int", "[", "][", "]", "Ġse", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "];", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<6>", "se", "[", "i", "]", "Ġ=", "Ġnew", "Ġint", "[]", "{", "speed", "[", "i", "],", "Ġefficiency", "[", "i", "]", "};", "<7>", "}", "<8>", "int", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<9>", "Ar", "rays", ".", "sort", "(", "se", ",", "Ġnew", "ĠCompar", "ator", "<", "int", "[]", ">", "()", "Ġ{", "<10>", "public", "Ġint", "Ġcompare", "(", "int", "[]", "Ġa", ",", "Ġint", "[]", "Ġb", ")", "Ġ{", "<11>", "return", "Ġ-", "(", "a", "[", "1", "]", "Ġ-", "Ġb", "[", "1", "]);", "<12>", "}", "<13>", "});", "<14>", "Prior", "ity", "Queue", "<", "Integer", ">", "Ġp", "q", "Ġ=", "Ġnew", "ĠPriority", "Queue", "<", ">", "();", "<15>", "long", "Ġs", "Ġ=", "Ġ0", ";", "<16>", "long", "Ġmax", "Ġ=", "Ġ0", ";", "<17>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<18>", "p", "q", ".", "add", "(", "se", "[", "i", "][", "0", "]);", "<19>", "s", "Ġ+=", "Ġse", "[", "i", "][", "0", "];", "<20>", "if", "(", "p", "q", ".", "size", "()", "Ġ>", "Ġk", "){", "<21>", "s", "Ġ-=", "Ġp", "q", ".", "poll", "();", "<22>", "}", "<23>", "max", "Ġ=", "ĠMath", ".", "max", "(", "max", ",", "Ġs", "*", "se", "[", "i", "][", "1", "]);", "<24>", "}", "<25>", "return", "Ġ(", "int", ")(", "max", "Ġ%", "Ġmod", ");", "<26>", "}", "<27>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<28>", "Max", "Performance", "Ġmax", "Performance", "Ġ=", "Ġnew", "ĠMax", "Performance", "();", "<29>", "<30>", "int", "Ġn", "Ġ=", "Ġ6", ";", "<31>", "int", "[]", "Ġspeed", "Ġ=", "Ġ{", "2", ",", "Ġ10", ",", "Ġ3", ",", "Ġ1", ",", "Ġ5", ",", "Ġ8", "};", "<32>", "int", "[]", "Ġefficiency", "Ġ=", "Ġ{", "5", ",", "Ġ4", ",", "Ġ3", ",", "Ġ9", ",", "Ġ7", ",", "Ġ2", "};", "<33>", "int", "Ġk", "Ġ=", "Ġ3", ";", "<34>", "<35>", "int", "Ġresult", "Ġ=", "Ġmax", "Performance", ".", "max", "Performance", "(", "n", ",", "Ġspeed", ",", "Ġefficiency", ",", "Ġk", ");", "<36>", "<37>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġperformance", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<38>", "}", "<39>", "}", "<40>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"36": [[6, 4], [12]]}}
{"id": 56, "code": "import java.util.*;\n\nclass MaxSatisfaction {\npublic int maxSatisfaction(int[] sf) {\nArrays.sort(sf);\nint n = sf.length;\nint curr = 0;\nint ans = 0;\nint sum = 0;\nfor (int i = n-1; i>=0; --i) {\nsum+=sf[i];\ncurr+=sum;\nans = Math.max(ans,curr);\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nMaxSatisfaction maxSatisfaction = new MaxSatisfaction();\n\nint[] sf = {-1, -8, 0, 5, -9};\n\nint result = maxSatisfaction.maxSatisfaction(sf);\n\nSystem.out.println(\"Maximum satisfaction: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMax", "S", "atisf", "action", "Ġ{", "<3>", "public", "Ġint", "Ġmax", "S", "atisf", "action", "(", "int", "[]", "Ġs", "f", ")", "Ġ{", "<4>", "Ar", "rays", ".", "sort", "(", "sf", ");", "<5>", "int", "Ġn", "Ġ=", "Ġs", "f", ".", "length", ";", "<6>", "int", "Ġcur", "r", "Ġ=", "Ġ0", ";", "<7>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<8>", "int", "Ġsum", "Ġ=", "Ġ0", ";", "<9>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġn", "-", "1", ";", "Ġi", ">", "=", "0", ";", "Ġ--", "i", ")", "Ġ{", "<10>", "sum", "+=", "sf", "[", "i", "];", "<11>", "cur", "r", "+=", "sum", ";", "<12>", "ans", "Ġ=", "ĠMath", ".", "max", "(", "ans", ",", "cur", "r", ");", "<13>", "}", "<14>", "return", "Ġans", ";", "<15>", "}", "<16>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<17>", "Max", "S", "atisf", "action", "Ġmax", "S", "atisf", "action", "Ġ=", "Ġnew", "ĠMax", "S", "atisf", "action", "();", "<18>", "<19>", "int", "[]", "Ġs", "f", "Ġ=", "Ġ{", "-", "1", ",", "Ġ-", "8", ",", "Ġ0", ",", "Ġ5", ",", "Ġ-", "9", "};", "<20>", "<21>", "int", "Ġresult", "Ġ=", "Ġmax", "S", "atisf", "action", ".", "max", "S", "atisf", "action", "(", "sf", ");", "<22>", "<23>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġsatisfaction", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<24>", "}", "<25>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"22": [[6, 9, 1, 14], [9, 14, 14]]}}
{"id": 57, "code": "class MaximumCandies {\n\npublic int maximumCandies(int[] candies, long k) {\nlong left = 0, right = 10000000;\nwhile (left < right) {\nlong mid = (left + right + 1) / 2, count = 0;\nfor (int candy : candies) {\ncount += candy / mid;\n}\nif (count < k) {\nright = mid - 1;\n} else {\nleft = mid;\n}\n}\nreturn (int) left;\n}\npublic static void main(String[] args) {\nMaximumCandies maximumCandies = new MaximumCandies();\n\nint[] candies = {5, 8, 6};\nlong k = 3;\n\nint result = maximumCandies.maximumCandies(candies, k);\n\nSystem.out.println(\"Maximum number of candies each child can get: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMaximum", "Cand", "ies", "Ġ{", "<1>", "<2>", "public", "Ġint", "Ġmaximum", "Cand", "ies", "(", "int", "[]", "Ġcand", "ies", ",", "Ġlong", "Ġk", ")", "Ġ{", "<3>", "long", "Ġleft", "Ġ=", "Ġ0", ",", "Ġright", "Ġ=", "Ġ100", "00000", ";", "<4>", "while", "Ġ(", "left", "Ġ<", "Ġright", ")", "Ġ{", "<5>", "long", "Ġmid", "Ġ=", "Ġ(", "left", "Ġ+", "Ġright", "Ġ+", "Ġ1", ")", "Ġ/", "Ġ2", ",", "Ġcount", "Ġ=", "Ġ0", ";", "<6>", "for", "Ġ(", "int", "Ġcandy", "Ġ:", "Ġcand", "ies", ")", "Ġ{", "<7>", "count", "Ġ+=", "Ġcandy", "Ġ/", "Ġmid", ";", "<8>", "}", "<9>", "if", "Ġ(", "count", "Ġ<", "Ġk", ")", "Ġ{", "<10>", "right", "Ġ=", "Ġmid", "Ġ-", "Ġ1", ";", "<11>", "}", "Ġelse", "Ġ{", "<12>", "left", "Ġ=", "Ġmid", ";", "<13>", "}", "<14>", "}", "<15>", "return", "Ġ(", "int", ")", "Ġleft", ";", "<16>", "}", "<17>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<18>", "Maximum", "Cand", "ies", "Ġmaximum", "Cand", "ies", "Ġ=", "Ġnew", "ĠMaximum", "Cand", "ies", "();", "<19>", "<20>", "int", "[]", "Ġcand", "ies", "Ġ=", "Ġ{", "5", ",", "Ġ8", ",", "Ġ6", "};", "<21>", "long", "Ġk", "Ġ=", "Ġ3", ";", "<22>", "<23>", "int", "Ġresult", "Ġ=", "Ġmaximum", "Cand", "ies", ".", "maximum", "Cand", "ies", "(", "cand", "ies", ",", "Ġk", ");", "<24>", "<25>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġnumber", "Ġof", "Ġcand", "ies", "Ġeach", "Ġchild", "Ġcan", "Ġget", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<26>", "}", "<27>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"24": [[13, 0, 8], [11, 7, 15, 15]]}}
{"id": 58, "code": "import java.util.*;\nclass MaximumMinimumPath {\n\nint dir[][] = {{0,-1},{0,1},{1,0},{-1,0}};\npublic int maximumMinimumPath(int[][] A) {\nQueue<int[]> q = new ArrayDeque<>();\n\nq.offer(new int[]{0,0,A[0][0]});\nint r = A.length;\nint c = A[0].length;\n\nint dp[][] = new int[r][c];\ndp[0][0] = A[0][0];\nwhile(q.size()>0){\nint[] ck = q.poll();\n\nfor(int d[]:dir){\n\nint nx = d[0]+ck[0];\nint ny = d[1]+ck[1];\n\nif(nx>=0&&ny>=0&&nx<r&&ny<c){\nint ma = Math.min(ck[2],A[nx][ny]);\nif(ma>dp[nx][ny]){\ndp[nx][ny] = ma;\nq.offer(new int[]{nx,ny,ma});\n}\n}\n\n}\n\n\n}\nreturn dp[r-1][c-1];\n\n\n\n}\npublic static void main(String[] args) {\nMaximumMinimumPath maximumMinimumPath = new MaximumMinimumPath();\n\nint[][] grid = {\n{5, 4, 5},\n{1, 2, 6},\n{7, 4, 6}\n};\n\nint result = maximumMinimumPath.maximumMinimumPath(grid);\n\nSystem.out.println(\"Maximum minimum value path: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠMaximum", "Minimum", "Path", "Ġ{", "<2>", "<3>", "int", "Ġdir", "[", "][", "]", "Ġ=", "Ġ{{", "0", ",-", "1", "},", "{", "0", ",", "1", "},", "{", "1", ",", "0", "},", "{", "-", "1", ",", "0", "}}", ";", "<4>", "public", "Ġint", "Ġmaximum", "Minimum", "Path", "(", "int", "[", "][", "]", "ĠA", ")", "Ġ{", "<5>", "Queue", "<", "int", "[]", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<6>", "<7>", "q", ".", "offer", "(", "new", "Ġint", "[]", "{", "0", ",", "0", ",", "A", "[", "0", "][", "0", "]", "});", "<8>", "int", "Ġr", "Ġ=", "ĠA", ".", "length", ";", "<9>", "int", "Ġc", "Ġ=", "ĠA", "[", "0", "].", "length", ";", "<10>", "<11>", "int", "Ġd", "p", "[", "][", "]", "Ġ=", "Ġnew", "Ġint", "[", "r", "][", "c", "];", "<12>", "dp", "[", "0", "][", "0", "]", "Ġ=", "ĠA", "[", "0", "][", "0", "];", "<13>", "while", "(", "q", ".", "size", "()", ">", "0", "){", "<14>", "int", "[]", "Ġc", "k", "Ġ=", "Ġq", ".", "poll", "();", "<15>", "<16>", "for", "(", "int", "Ġd", "[", "]:", "dir", "){", "<17>", "<18>", "int", "Ġn", "x", "Ġ=", "Ġd", "[", "0", "]+", "ck", "[", "0", "];", "<19>", "int", "Ġn", "y", "Ġ=", "Ġd", "[", "1", "]+", "ck", "[", "1", "];", "<20>", "<21>", "if", "(", "n", "x", ">", "=", "0", "&&", "ny", ">", "=", "0", "&&", "n", "x", "<", "r", "&&", "ny", "<", "c", "){", "<22>", "int", "Ġma", "Ġ=", "ĠMath", ".", "min", "(", "ck", "[", "2", "],", "A", "[", "n", "x", "][", "ny", "]);", "<23>", "if", "(", "ma", ">", "dp", "[", "n", "x", "][", "ny", "])", "{", "<24>", "dp", "[", "n", "x", "][", "ny", "]", "Ġ=", "Ġma", ";", "<25>", "q", ".", "offer", "(", "new", "Ġint", "[]", "{", "n", "x", ",", "ny", ",", "ma", "});", "<26>", "}", "<27>", "}", "<28>", "<29>", "}", "<30>", "<31>", "<32>", "}", "<33>", "return", "Ġd", "p", "[", "r", "-", "1", "][", "c", "-", "1", "];", "<34>", "<35>", "<36>", "<37>", "}", "<38>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<39>", "Maximum", "Minimum", "Path", "Ġmaximum", "Minimum", "Path", "Ġ=", "Ġnew", "ĠMaximum", "Minimum", "Path", "();", "<40>", "<41>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<42>", "{", "5", ",", "Ġ4", ",", "Ġ5", "},", "<43>", "{", "1", ",", "Ġ2", ",", "Ġ6", "},", "<44>", "{", "7", ",", "Ġ4", ",", "Ġ6", "}", "<45>", "};", "<46>", "<47>", "int", "Ġresult", "Ġ=", "Ġmaximum", "Minimum", "Path", ".", "maximum", "Minimum", "Path", "(", "grid", ");", "<48>", "<49>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġminimum", "Ġvalue", "Ġpath", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<50>", "}", "<51>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"48": [[8, 3], [13, 1]]}}
{"id": 59, "code": "import java.util.*;\n\nclass MaximumProduct {\n\npublic int maximumProduct(int[] nums, int k) {\nPriorityQueue<Integer> queue = new PriorityQueue<>();\nfor (int num : nums) {\nqueue.offer(num);\n}\nfor (int i = 0; i < k; i++) {\nqueue.offer(queue.poll() + 1);\n}\nlong prod = 1;\nfor (int num : queue) {\nprod = prod * num % 1000000007;\n}\nreturn (int) prod;\n}\npublic static void main(String[] args) {\nMaximumProduct mp = new MaximumProduct();\nint[] nums = {1, 2, 3, 4};\nint k = 2;\nint result = mp.maximumProduct(nums, k);\nSystem.out.println(\"The maximum product is: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMaximum", "Product", "Ġ{", "<3>", "<4>", "public", "Ġint", "Ġmaximum", "Product", "(", "int", "[]", "Ġnum", "s", ",", "Ġint", "Ġk", ")", "Ġ{", "<5>", "Prior", "ity", "Queue", "<", "Integer", ">", "Ġqueue", "Ġ=", "Ġnew", "ĠPriority", "Queue", "<", ">", "();", "<6>", "for", "Ġ(", "int", "Ġnum", "Ġ:", "Ġnum", "s", ")", "Ġ{", "<7>", "queue", ".", "offer", "(", "num", ");", "<8>", "}", "<9>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġk", ";", "Ġi", "++)", "Ġ{", "<10>", "queue", ".", "offer", "(", "queue", ".", "poll", "()", "Ġ+", "Ġ1", ");", "<11>", "}", "<12>", "long", "Ġprod", "Ġ=", "Ġ1", ";", "<13>", "for", "Ġ(", "int", "Ġnum", "Ġ:", "Ġqueue", ")", "Ġ{", "<14>", "pro", "d", "Ġ=", "Ġprod", "Ġ*", "Ġnum", "Ġ%", "Ġ100", "000000", "7", ";", "<15>", "}", "<16>", "return", "Ġ(", "int", ")", "Ġprod", ";", "<17>", "}", "<18>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<19>", "Maximum", "Product", "Ġmp", "Ġ=", "Ġnew", "ĠMaximum", "Product", "();", "<20>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ3", ",", "Ġ4", "};", "<21>", "int", "Ġk", "Ġ=", "Ġ2", ";", "<22>", "int", "Ġresult", "Ġ=", "Ġmp", ".", "maximum", "Product", "(", "n", "ums", ",", "Ġk", ");", "<23>", "System", ".", "out", ".", "println", "(\"", "The", "Ġmaximum", "Ġproduct", "Ġis", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<24>", "}", "<25>", "}", "<26>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"24": [[5, 1, 8], [0]]}}
{"id": 60, "code": "import java.util.*;\n\nclass MaximumRobots {\npublic int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {\nint n = chargeTimes.length;\nint p = 0;\n\nint[] c = new int[n];\nfor(int i = 0;i < n;i++)c[i] = -chargeTimes[i];\nSegmentTreeRMQ st = new SegmentTreeRMQ(c);\nlong[] cum = new long[n+1];\nfor(int i = 0;i < n;i++){\ncum[i+1] = cum[i] + runningCosts[i];\n}\nint ans = 0;\nfor(int i = 1;i <= n;i++){\nwhile(p < i) {\nlong v = (cum[i] - cum[p]) * (i - p) - st.min(p, i);\nif(v > budget){\np++;\n}else{\nbreak;\n}\n}\nans = Math.max(ans, i-p);\n}\nreturn ans;\n}\n\npublic static class SegmentTreeRMQ {\npublic final int M, H, N;\npublic int[] vals;\npublic final int I = Integer.MAX_VALUE;\n\npublic SegmentTreeRMQ(int n)\n{\nN = n;\nM = Integer.highestOneBit(Math.max(N-1, 1))<<2;\nH = M>>>1;\nvals = new int[M];\nArrays.fill(vals, 0, M, I);\n}\n\npublic SegmentTreeRMQ(int[] a)\n{\nthis(a.length);\nfor(int i = 0;i < N;i++){\nvals[H+i] = a[i];\n}\nfor(int i = H-1;i >= 1;i--)propagate(i);\n}\n\npublic void update(int pos, int x)\n{\nvals[H+pos] = x;\nfor(int i = (H+pos)>>>1;i >= 1;i >>>= 1)propagate(i);\n}\n\nprivate void propagate(int i)\n{\nvals[i] = Math.min(vals[2*i], vals[2*i+1]);\n}\n\npublic int min(int l, int r){\nint min = I;\nif(l >= r)return min;\nl += H; r += H;\nfor(;l < r;l>>>=1,r>>>=1){\nif((l&1) == 1)min = Math.min(min, vals[l++]);\nif((r&1) == 1)min = Math.min(min, vals[--r]);\n}\nreturn min;\n}\n\npublic int firstle(int l, int v) {\nif(l >= H)return -1;\nint cur = H+l;\nwhile(true){\nif(vals[cur] <= v){\nif(cur >= H)return cur-H;\ncur = 2*cur;\n}else{\ncur++;\nif((cur&cur-1) == 0)return -1;\nif((cur&1)==0)cur>>>=1;\n}\n}\n}\n\npublic int lastle(int l, int v) {\nif(l < 0)return -1;\nint cur = H+l;\nwhile(true){\nif(vals[cur] <= v){\nif(cur >= H)return cur-H;\ncur = 2*cur + 1;\n}else{\nif((cur&cur-1) == 0)return -1;\ncur--;\nif((cur&1)==1)cur>>>=1;\n}\n}\n}\n}\npublic static void main(String[] args) {\nMaximumRobots maximumRobots = new MaximumRobots();\n\nint[] chargeTimes = {3, 6, 1, 3, 4};\nint[] runningCosts = {2, 1, 3, 4, 5};\nlong budget = 25;\n\nint result = maximumRobots.maximumRobots(chargeTimes, runningCosts, budget);\n\nSystem.out.println(\"Maximum number of robots: \" + result);\n}\n\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMaximum", "Rob", "ots", "Ġ{", "<3>", "public", "Ġint", "Ġmaximum", "Rob", "ots", "(", "int", "[]", "Ġcharge", "Times", ",", "Ġint", "[]", "Ġrunning", "Cost", "s", ",", "Ġlong", "Ġbudget", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġcharge", "Times", ".", "length", ";", "<5>", "int", "Ġp", "Ġ=", "Ġ0", ";", "<6>", "<7>", "int", "[]", "Ġc", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<8>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++)", "c", "[", "i", "]", "Ġ=", "Ġ-", "charge", "Times", "[", "i", "];", "<9>", "Seg", "ment", "Tree", "RM", "Q", "Ġst", "Ġ=", "Ġnew", "ĠSe", "gment", "Tree", "RM", "Q", "(", "c", ");", "<10>", "long", "[]", "Ġcum", "Ġ=", "Ġnew", "Ġlong", "[", "n", "+", "1", "];", "<11>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<12>", "cum", "[", "i", "+", "1", "]", "Ġ=", "Ġcum", "[", "i", "]", "Ġ+", "Ġrunning", "Cost", "s", "[", "i", "];", "<13>", "}", "<14>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<15>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<=", "Ġn", ";", "i", "++", "){", "<16>", "while", "(", "p", "Ġ<", "Ġi", ")", "Ġ{", "<17>", "long", "Ġv", "Ġ=", "Ġ(", "cum", "[", "i", "]", "Ġ-", "Ġcum", "[", "p", "])", "Ġ*", "Ġ(", "i", "Ġ-", "Ġp", ")", "Ġ-", "Ġst", ".", "min", "(", "p", ",", "Ġi", ");", "<18>", "if", "(", "v", "Ġ>", "Ġbudget", "){", "<19>", "p", "++;", "<20>", "}", "else", "{", "<21>", "break", ";", "<22>", "}", "<23>", "}", "<24>", "ans", "Ġ=", "ĠMath", ".", "max", "(", "ans", ",", "Ġi", "-", "p", ");", "<25>", "}", "<26>", "return", "Ġans", ";", "<27>", "}", "<28>", "<29>", "public", "Ġstatic", "Ġclass", "ĠSe", "gment", "Tree", "RM", "Q", "Ġ{", "<30>", "public", "Ġfinal", "Ġint", "ĠM", ",", "ĠH", ",", "ĠN", ";", "<31>", "public", "Ġint", "[]", "Ġv", "als", ";", "<32>", "public", "Ġfinal", "Ġint", "ĠI", "Ġ=", "ĠInteger", ".", "MAX", "_", "VALUE", ";", "<33>", "<34>", "public", "ĠSe", "gment", "Tree", "RM", "Q", "(", "int", "Ġn", ")", "<35>", "{", "<36>", "N", "Ġ=", "Ġn", ";", "<37>", "M", "Ġ=", "ĠInteger", ".", "highest", "One", "Bit", "(", "Math", ".", "max", "(", "N", "-", "1", ",", "Ġ1", "))", "<<", "2", ";", "<38>", "H", "Ġ=", "ĠM", ">>>", "1", ";", "<39>", "vals", "Ġ=", "Ġnew", "Ġint", "[", "M", "];", "<40>", "Ar", "rays", ".", "fill", "(", "vals", ",", "Ġ0", ",", "ĠM", ",", "ĠI", ");", "<41>", "}", "<42>", "<43>", "public", "ĠSe", "gment", "Tree", "RM", "Q", "(", "int", "[]", "Ġa", ")", "<44>", "{", "<45>", "this", "(", "a", ".", "length", ");", "<46>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "ĠN", ";", "i", "++", "){", "<47>", "vals", "[", "H", "+", "i", "]", "Ġ=", "Ġa", "[", "i", "];", "<48>", "}", "<49>", "for", "(", "int", "Ġi", "Ġ=", "ĠH", "-", "1", ";", "i", "Ġ>=", "Ġ1", ";", "i", "--", ")", "prop", "agate", "(", "i", ");", "<50>", "}", "<51>", "<52>", "public", "Ġvoid", "Ġupdate", "(", "int", "Ġpos", ",", "Ġint", "Ġx", ")", "<53>", "{", "<54>", "vals", "[", "H", "+", "pos", "]", "Ġ=", "Ġx", ";", "<55>", "for", "(", "int", "Ġi", "Ġ=", "Ġ(", "H", "+", "pos", ")", ">>>", "1", ";", "i", "Ġ>=", "Ġ1", ";", "i", "Ġ>>>", "=", "Ġ1", ")", "prop", "agate", "(", "i", ");", "<56>", "}", "<57>", "<58>", "private", "Ġvoid", "Ġpropagate", "(", "int", "Ġi", ")", "<59>", "{", "<60>", "vals", "[", "i", "]", "Ġ=", "ĠMath", ".", "min", "(", "vals", "[", "2", "*", "i", "],", "Ġv", "als", "[", "2", "*", "i", "+", "1", "]);", "<61>", "}", "<62>", "<63>", "public", "Ġint", "Ġmin", "(", "int", "Ġl", ",", "Ġint", "Ġr", "){", "<64>", "int", "Ġmin", "Ġ=", "ĠI", ";", "<65>", "if", "(", "l", "Ġ>=", "Ġr", ")", "return", "Ġmin", ";", "<66>", "l", "Ġ+=", "ĠH", ";", "Ġr", "Ġ+=", "ĠH", ";", "<67>", "for", "(", ";", "l", "Ġ<", "Ġr", ";", "l", ">>>", "=", "1", ",", "r", ">>>", "=", "1", "){", "<68>", "if", "((", "l", "&", "1", ")", "Ġ==", "Ġ1", ")", "min", "Ġ=", "ĠMath", ".", "min", "(", "min", ",", "Ġv", "als", "[", "l", "++", "]);", "<69>", "if", "((", "r", "&", "1", ")", "Ġ==", "Ġ1", ")", "min", "Ġ=", "ĠMath", ".", "min", "(", "min", ",", "Ġv", "als", "[", "--", "r", "]);", "<70>", "}", "<71>", "return", "Ġmin", ";", "<72>", "}", "<73>", "<74>", "public", "Ġint", "Ġfirst", "le", "(", "int", "Ġl", ",", "Ġint", "Ġv", ")", "Ġ{", "<75>", "if", "(", "l", "Ġ>=", "ĠH", ")", "return", "Ġ-", "1", ";", "<76>", "int", "Ġcur", "Ġ=", "ĠH", "+", "l", ";", "<77>", "while", "(", "true", "){", "<78>", "if", "(", "vals", "[", "cur", "]", "Ġ<=", "Ġv", "){", "<79>", "if", "(", "cur", "Ġ>=", "ĠH", ")", "return", "Ġcur", "-", "H", ";", "<80>", "cur", "Ġ=", "Ġ2", "*", "cur", ";", "<81>", "}", "else", "{", "<82>", "cur", "++;", "<83>", "if", "((", "cur", "&", "cur", "-", "1", ")", "Ġ==", "Ġ0", ")", "return", "Ġ-", "1", ";", "<84>", "if", "((", "cur", "&", "1", ")", "==", "0", ")", "cur", ">>>", "=", "1", ";", "<85>", "}", "<86>", "}", "<87>", "}", "<88>", "<89>", "public", "Ġint", "Ġlast", "le", "(", "int", "Ġl", ",", "Ġint", "Ġv", ")", "Ġ{", "<90>", "if", "(", "l", "Ġ<", "Ġ0", ")", "return", "Ġ-", "1", ";", "<91>", "int", "Ġcur", "Ġ=", "ĠH", "+", "l", ";", "<92>", "while", "(", "true", "){", "<93>", "if", "(", "vals", "[", "cur", "]", "Ġ<=", "Ġv", "){", "<94>", "if", "(", "cur", "Ġ>=", "ĠH", ")", "return", "Ġcur", "-", "H", ";", "<95>", "cur", "Ġ=", "Ġ2", "*", "cur", "Ġ+", "Ġ1", ";", "<96>", "}", "else", "{", "<97>", "if", "((", "cur", "&", "cur", "-", "1", ")", "Ġ==", "Ġ0", ")", "return", "Ġ-", "1", ";", "<98>", "cur", "--", ";", "<99>", "if", "((", "cur", "&", "1", ")", "==", "1", ")", "cur", ">>>", "=", "1", ";", "<100>", "}", "<101>", "}", "<102>", "}", "<103>", "}", "<104>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<105>", "Maximum", "Rob", "ots", "Ġmaximum", "Rob", "ots", "Ġ=", "Ġnew", "ĠMaximum", "Rob", "ots", "();", "<106>", "<107>", "int", "[]", "Ġcharge", "Times", "Ġ=", "Ġ{", "3", ",", "Ġ6", ",", "Ġ1", ",", "Ġ3", ",", "Ġ4", "};", "<108>", "int", "[]", "Ġrunning", "Cost", "s", "Ġ=", "Ġ{", "2", ",", "Ġ1", ",", "Ġ3", ",", "Ġ4", ",", "Ġ5", "};", "<109>", "long", "Ġbudget", "Ġ=", "Ġ25", ";", "<110>", "<111>", "int", "Ġresult", "Ġ=", "Ġmaximum", "Rob", "ots", ".", "maximum", "Rob", "ots", "(", "charge", "Times", ",", "Ġrunning", "Cost", "s", ",", "Ġbudget", ");", "<112>", "<113>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġnumber", "Ġof", "Ġrobots", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<114>", "}", "<115>", "<116>", "<117>", "}", "<118>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"113": [[15, 0, 4, 11], [15, 5, 15, 9]]}}
{"id": 61, "code": "class MaximumScore {\npublic int maximumScore(int[] nums, int[] muls) {\nint n = nums.length;\nint m = muls.length;\nint[][] dp = new int[m+1][m+1];\nfor (int z = m-1; z>=0; --z) {\nfor (int i = 0; i <= z; ++i) {\nint y = z-i;\nint j = n-y-1;\ndp[i][y] = Math.max(dp[i+1][y]+nums[i]*muls[z], dp[i][y+1]+nums[j]*muls[z]);\n}\n}\nreturn dp[0][0];\n}\npublic static void main(String[] args) {\nMaximumScore maximumScore = new MaximumScore();\n\nint[] nums = {1, 2, 3};\nint[] muls = {3, 2, 1};\n\nint result = maximumScore.maximumScore(nums, muls);\n\nSystem.out.println(\"Maximum score: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMaximum", "Score", "Ġ{", "<1>", "public", "Ġint", "Ġmaximum", "Score", "(", "int", "[]", "Ġnum", "s", ",", "Ġint", "[]", "Ġm", "uls", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġnum", "s", ".", "length", ";", "<3>", "int", "Ġm", "Ġ=", "Ġm", "uls", ".", "length", ";", "<4>", "int", "[", "][", "]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "[", "m", "+", "1", "][", "m", "+", "1", "];", "<5>", "for", "Ġ(", "int", "Ġz", "Ġ=", "Ġm", "-", "1", ";", "Ġz", ">", "=", "0", ";", "Ġ--", "z", ")", "Ġ{", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<=", "Ġz", ";", "Ġ++", "i", ")", "Ġ{", "<7>", "int", "Ġy", "Ġ=", "Ġz", "-", "i", ";", "<8>", "int", "Ġj", "Ġ=", "Ġn", "-", "y", "-", "1", ";", "<9>", "dp", "[", "i", "][", "y", "]", "Ġ=", "ĠMath", ".", "max", "(", "dp", "[", "i", "+", "1", "][", "y", "]+", "n", "ums", "[", "i", "]", "*", "m", "uls", "[", "z", "],", "Ġd", "p", "[", "i", "][", "y", "+", "1", "]+", "n", "ums", "[", "j", "]", "*", "m", "uls", "[", "z", "]);", "<10>", "}", "<11>", "}", "<12>", "return", "Ġd", "p", "[", "0", "][", "0", "];", "<13>", "}", "<14>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<15>", "Maximum", "Score", "Ġmaximum", "Score", "Ġ=", "Ġnew", "ĠMaximum", "Score", "();", "<16>", "<17>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ3", "};", "<18>", "int", "[]", "Ġm", "uls", "Ġ=", "Ġ{", "3", ",", "Ġ2", ",", "Ġ1", "};", "<19>", "<20>", "int", "Ġresult", "Ġ=", "Ġmaximum", "Score", ".", "maximum", "Score", "(", "n", "ums", ",", "Ġm", "uls", ");", "<21>", "<22>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġscore", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<23>", "}", "<24>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"22": [[14], [0, 6]]}}
{"id": 62, "code": "class MaximumSwap {\npublic int maximumSwap(int num) {\nchar[] s = Integer.toString(num).toCharArray();\nint n = s.length;\nint max = -1;\nfor(int i = 0;i < n;i++){\nfor(int j = i;j < n;j++){\n{char d = s[i]; s[i] = s[j]; s[j] = d;}\nmax = Math.max(max, Integer.parseInt(new String(s)));\n{char d = s[i]; s[i] = s[j]; s[j] = d;}\n}\n}\nreturn max;\n}\npublic static void main(String[] args) {\nMaximumSwap maximumSwap = new MaximumSwap();\n\nint num = 2736;\n\nint result = maximumSwap.maximumSwap(num);\n\nSystem.out.println(\"Maximum number after swap: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "class", "ĠMaximum", "Sw", "ap", "Ġ{", "<1>", "public", "Ġint", "Ġmaximum", "Sw", "ap", "(", "int", "Ġnum", ")", "Ġ{", "<2>", "char", "[]", "Ġs", "Ġ=", "ĠInteger", ".", "to", "String", "(", "num", ").", "to", "Char", "Array", "();", "<3>", "int", "Ġn", "Ġ=", "Ġs", ".", "length", ";", "<4>", "int", "Ġmax", "Ġ=", "Ġ-", "1", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<6>", "for", "(", "int", "Ġj", "Ġ=", "Ġi", ";", "j", "Ġ<", "Ġn", ";", "j", "++", "){", "<7>", "{", "char", "Ġd", "Ġ=", "Ġs", "[", "i", "];", "Ġs", "[", "i", "]", "Ġ=", "Ġs", "[", "j", "];", "Ġs", "[", "j", "]", "Ġ=", "Ġd", ";}", "<8>", "max", "Ġ=", "ĠMath", ".", "max", "(", "max", ",", "ĠInteger", ".", "parse", "Int", "(", "new", "ĠString", "(", "s", "))", ");", "<9>", "{", "char", "Ġd", "Ġ=", "Ġs", "[", "i", "];", "Ġs", "[", "i", "]", "Ġ=", "Ġs", "[", "j", "];", "Ġs", "[", "j", "]", "Ġ=", "Ġd", ";}", "<10>", "}", "<11>", "}", "<12>", "return", "Ġmax", ";", "<13>", "}", "<14>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<15>", "Maximum", "Sw", "ap", "Ġmaximum", "Sw", "ap", "Ġ=", "Ġnew", "ĠMaximum", "Sw", "ap", "();", "<16>", "<17>", "int", "Ġnum", "Ġ=", "Ġ27", "36", ";", "<18>", "<19>", "int", "Ġresult", "Ġ=", "Ġmaximum", "Sw", "ap", ".", "maximum", "Sw", "ap", "(", "num", ");", "<20>", "<21>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġnumber", "Ġafter", "Ġswap", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<22>", "}", "<23>", "<24>", "}", "<25>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"20": [[15, 6, 5, 6], [11]]}}
{"id": 63, "code": "class MaximumXOR {\n\npublic int maximumXOR(int[] nums) {\nint max = 0;\nfor (int num : nums) {\nmax |= num;\n}\nreturn max;\n}\npublic static void main(String[] args) {\nMaximumXOR maximumXOR = new MaximumXOR();\n\nint[] nums = {3, 10, 5, 25, 2, 8};\n\nint result = maximumXOR.maximumXOR(nums);\n\nSystem.out.println(\"Maximum XOR: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMaximum", "X", "OR", "Ġ{", "<1>", "<2>", "public", "Ġint", "Ġmaximum", "X", "OR", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<3>", "int", "Ġmax", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "Ġnum", "Ġ:", "Ġnum", "s", ")", "Ġ{", "<5>", "max", "Ġ|", "=", "Ġnum", ";", "<6>", "}", "<7>", "return", "Ġmax", ";", "<8>", "}", "<9>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<10>", "Maximum", "X", "OR", "Ġmaximum", "X", "OR", "Ġ=", "Ġnew", "ĠMaximum", "X", "OR", "();", "<11>", "<12>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "3", ",", "Ġ10", ",", "Ġ5", ",", "Ġ25", ",", "Ġ2", ",", "Ġ8", "};", "<13>", "<14>", "int", "Ġresult", "Ġ=", "Ġmaximum", "X", "OR", ".", "maximum", "X", "OR", "(", "n", "ums", ");", "<15>", "<16>", "System", ".", "out", ".", "println", "(\"", "Maximum", "ĠX", "OR", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<17>", "}", "<18>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"15": [[13, 10, 14, 2], [0, 1]]}}
{"id": 64, "code": "import java.util.*;\n\nclass MinAbsDifference {\npublic int minAbsDifference(int[] a, int goal) {\nint n = a.length;\nint h = n/2;\nint[] L = new int[1<<h];\nfor(int i = 1;i < 1<<h;i++){\nL[i] += L[i&i-1] + a[Integer.numberOfTrailingZeros(i)];\n}\nArrays.sort(L);\nint[] R = new int[1<<n-h];\nfor(int i = 1;i < 1<<n-h;i++){\nR[i] += R[i&i-1] + a[h+Integer.numberOfTrailingZeros(i)];\n}\nint ans = Integer.MAX_VALUE;\nfor(int v : R){\nint ind = Arrays.binarySearch(L, goal-v);\nif(ind >= 0)return 0;\nif(-ind-1 < L.length)ans = Math.min(ans, Math.abs(L[-ind-1] + v - goal));\nif(-ind-2 >= 0)ans = Math.min(ans, Math.abs(L[-ind-2] + v - goal));\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nMinAbsDifference minAbsDifference = new MinAbsDifference();\n\nint[] a = {5, -7, 3, 5};\nint goal = 6;\n\nint result = minAbsDifference.minAbsDifference(a, goal);\n\nSystem.out.println(\"Minimum absolute difference: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠMin", "Abs", "Diff", "erence", "Ġ{", "<3>", "public", "Ġint", "Ġmin", "Abs", "Diff", "erence", "(", "int", "[]", "Ġa", ",", "Ġint", "Ġgoal", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġa", ".", "length", ";", "<5>", "int", "Ġh", "Ġ=", "Ġn", "/", "2", ";", "<6>", "int", "[]", "ĠL", "Ġ=", "Ġnew", "Ġint", "[", "1", "<<", "h", "];", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<", "Ġ1", "<<", "h", ";", "i", "++", "){", "<8>", "L", "[", "i", "]", "Ġ+=", "ĠL", "[", "i", "&", "i", "-", "1", "]", "Ġ+", "Ġa", "[", "Integer", ".", "number", "Of", "Tra", "iling", "Z", "eros", "(", "i", ")", "];", "<9>", "}", "<10>", "Ar", "rays", ".", "sort", "(", "L", ");", "<11>", "int", "[]", "ĠR", "Ġ=", "Ġnew", "Ġint", "[", "1", "<<", "n", "-", "h", "];", "<12>", "for", "(", "int", "Ġi", "Ġ=", "Ġ1", ";", "i", "Ġ<", "Ġ1", "<<", "n", "-", "h", ";", "i", "++", "){", "<13>", "R", "[", "i", "]", "Ġ+=", "ĠR", "[", "i", "&", "i", "-", "1", "]", "Ġ+", "Ġa", "[", "h", "+", "Integer", ".", "number", "Of", "Tra", "iling", "Z", "eros", "(", "i", ")", "];", "<14>", "}", "<15>", "int", "Ġans", "Ġ=", "ĠInteger", ".", "MAX", "_", "VALUE", ";", "<16>", "for", "(", "int", "Ġv", "Ġ:", "ĠR", "){", "<17>", "int", "Ġind", "Ġ=", "ĠAr", "rays", ".", "binary", "Search", "(", "L", ",", "Ġgoal", "-", "v", ");", "<18>", "if", "(", "ind", "Ġ>=", "Ġ0", ")", "return", "Ġ0", ";", "<19>", "if", "(-", "ind", "-", "1", "Ġ<", "ĠL", ".", "length", ")", "ans", "Ġ=", "ĠMath", ".", "min", "(", "ans", ",", "ĠMath", ".", "abs", "(", "L", "[", "-", "ind", "-", "1", "]", "Ġ+", "Ġv", "Ġ-", "Ġgoal", "));", "<20>", "if", "(-", "ind", "-", "2", "Ġ>=", "Ġ0", ")", "ans", "Ġ=", "ĠMath", ".", "min", "(", "ans", ",", "ĠMath", ".", "abs", "(", "L", "[", "-", "ind", "-", "2", "]", "Ġ+", "Ġv", "Ġ-", "Ġgoal", "));", "<21>", "}", "<22>", "return", "Ġans", ";", "<23>", "}", "<24>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<25>", "Min", "Abs", "Diff", "erence", "Ġmin", "Abs", "Diff", "erence", "Ġ=", "Ġnew", "ĠMin", "Abs", "Diff", "erence", "();", "<26>", "<27>", "int", "[]", "Ġa", "Ġ=", "Ġ{", "5", ",", "Ġ-", "7", ",", "Ġ3", ",", "Ġ5", "};", "<28>", "int", "Ġgoal", "Ġ=", "Ġ6", ";", "<29>", "<30>", "int", "Ġresult", "Ġ=", "Ġmin", "Abs", "Diff", "erence", ".", "min", "Abs", "Diff", "erence", "(", "a", ",", "Ġgoal", ");", "<31>", "<32>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġabsolute", "Ġdifference", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<33>", "}", "<34>", "<35>", "}", "<36>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"31": [[0, 8], [3, 10, 7]]}}
{"id": 65, "code": "class MinEatingSpeed {\npublic int minEatingSpeed(int[] piles, int H) {\nint min = 1;\nint max = 1000000000;\nwhile (min != max) {\nint m = (min+max)/2;\nint time = 0;\nfor (int pile : piles) {\ntime += pile/m;\nif (pile%m!=0)\ntime++;\n}\nif (time > H)\nmin = m+1;\nelse\nmax = m;\n}\nreturn min;\n}\npublic static void main(String[] args) {\nMinEatingSpeed minEatingSpeed = new MinEatingSpeed();\n\nint[] piles = {3, 6, 7, 11};\nint H = 8;\n\nint result = minEatingSpeed.minEatingSpeed(piles, H);\n\nSystem.out.println(\"Minimum eating speed: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMin", "E", "ating", "Speed", "Ġ{", "<1>", "public", "Ġint", "Ġmin", "E", "ating", "Speed", "(", "int", "[]", "Ġpiles", ",", "Ġint", "ĠH", ")", "Ġ{", "<2>", "int", "Ġmin", "Ġ=", "Ġ1", ";", "<3>", "int", "Ġmax", "Ġ=", "Ġ100", "0000000", ";", "<4>", "while", "Ġ(", "min", "Ġ!=", "Ġmax", ")", "Ġ{", "<5>", "int", "Ġm", "Ġ=", "Ġ(", "min", "+", "max", ")/", "2", ";", "<6>", "int", "Ġtime", "Ġ=", "Ġ0", ";", "<7>", "for", "Ġ(", "int", "Ġpile", "Ġ:", "Ġpiles", ")", "Ġ{", "<8>", "time", "Ġ+=", "Ġpile", "/", "m", ";", "<9>", "if", "Ġ(", "p", "ile", "%", "m", "!", "=", "0", ")", "<10>", "time", "++;", "<11>", "}", "<12>", "if", "Ġ(", "time", "Ġ>", "ĠH", ")", "<13>", "min", "Ġ=", "Ġm", "+", "1", ";", "<14>", "else", "<15>", "max", "Ġ=", "Ġm", ";", "<16>", "}", "<17>", "return", "Ġmin", ";", "<18>", "}", "<19>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<20>", "Min", "E", "ating", "Speed", "Ġmin", "E", "ating", "Speed", "Ġ=", "Ġnew", "ĠMin", "E", "ating", "Speed", "();", "<21>", "<22>", "int", "[]", "Ġpiles", "Ġ=", "Ġ{", "3", ",", "Ġ6", ",", "Ġ7", ",", "Ġ11", "};", "<23>", "int", "ĠH", "Ġ=", "Ġ8", ";", "<24>", "<25>", "int", "Ġresult", "Ġ=", "Ġmin", "E", "ating", "Speed", ".", "min", "E", "ating", "Speed", "(", "p", "iles", ",", "ĠH", ");", "<26>", "<27>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġeating", "Ġspeed", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<28>", "}", "<29>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"26": [[4, 14, 12, 4], [9, 1, 0]]}}
{"id": 66, "code": "class MinFlips {\npublic int minFlips(int[][] mat) {\nint u = 0;\nint n = mat.length, m = mat[0].length;\nfor(int i = 0;i < mat.length;i++){\nfor(int j = 0;j < mat[0].length;j++){\nu |= mat[i][j]<<i*mat[0].length+j;\n}\n}\nint[] ptns = new int[n*m];\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < m;j++){\nfor(int k = 0;k < n;k++){\nfor(int l = 0;l < m;l++){\nif(Math.abs(i-k) + Math.abs(j-l) <= 1){\nptns[i*m+j] |= 1<<k*m+l;\n}\n}\n}\n}\n}\n\nint ans = 99;\nfor(int i = 0;i < 1<<n*m;i++){\nint v = u;\nfor(int j = 0;j < n*m;j++){\nif(i<<~j<0){\nv ^= ptns[j];\n}\n}\nif(v == 0){\nans = Math.min(ans, Integer.bitCount(i));\n}\n}\nif(ans == 99)return -1;\nreturn ans;\n}\npublic static void main(String[] args) {\nMinFlips minFlips = new MinFlips();\n\nint[][] mat = {\n{0, 0},\n{0, 1}\n};\n\nint result = minFlips.minFlips(mat);\n\nSystem.out.println(\"Minimum number of flips: \" + result);\n}\n}\n", "code_tokens": ["<0>", "class", "ĠMin", "Fl", "ips", "Ġ{", "<1>", "public", "Ġint", "Ġmin", "Fl", "ips", "(", "int", "[", "][", "]", "Ġmat", ")", "Ġ{", "<2>", "int", "Ġu", "Ġ=", "Ġ0", ";", "<3>", "int", "Ġn", "Ġ=", "Ġmat", ".", "length", ",", "Ġm", "Ġ=", "Ġmat", "[", "0", "].", "length", ";", "<4>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġmat", ".", "length", ";", "i", "++", "){", "<5>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġmat", "[", "0", "].", "length", ";", "j", "++", "){", "<6>", "u", "Ġ|", "=", "Ġmat", "[", "i", "][", "j", "]", "<<", "i", "*", "mat", "[", "0", "].", "length", "+", "j", ";", "<7>", "}", "<8>", "}", "<9>", "int", "[]", "Ġpt", "ns", "Ġ=", "Ġnew", "Ġint", "[", "n", "*", "m", "];", "<10>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<11>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "j", "++", "){", "<12>", "for", "(", "int", "Ġk", "Ġ=", "Ġ0", ";", "k", "Ġ<", "Ġn", ";", "k", "++", "){", "<13>", "for", "(", "int", "Ġl", "Ġ=", "Ġ0", ";", "l", "Ġ<", "Ġm", ";", "l", "++", "){", "<14>", "if", "(", "Math", ".", "abs", "(", "i", "-", "k", ")", "Ġ+", "ĠMath", ".", "abs", "(", "j", "-", "l", ")", "Ġ<=", "Ġ1", "){", "<15>", "pt", "ns", "[", "i", "*", "m", "+", "j", "]", "Ġ|", "=", "Ġ1", "<<", "k", "*", "m", "+", "l", ";", "<16>", "}", "<17>", "}", "<18>", "}", "<19>", "}", "<20>", "}", "<21>", "<22>", "int", "Ġans", "Ġ=", "Ġ99", ";", "<23>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġ1", "<<", "n", "*", "m", ";", "i", "++", "){", "<24>", "int", "Ġv", "Ġ=", "Ġu", ";", "<25>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġn", "*", "m", ";", "j", "++", "){", "<26>", "if", "(", "i", "<<", "~", "j", "<", "0", "){", "<27>", "v", "Ġ^", "=", "Ġpt", "ns", "[", "j", "];", "<28>", "}", "<29>", "}", "<30>", "if", "(", "v", "Ġ==", "Ġ0", "){", "<31>", "ans", "Ġ=", "ĠMath", ".", "min", "(", "ans", ",", "ĠInteger", ".", "bit", "Count", "(", "i", "));", "<32>", "}", "<33>", "}", "<34>", "if", "(", "ans", "Ġ==", "Ġ99", ")", "return", "Ġ-", "1", ";", "<35>", "return", "Ġans", ";", "<36>", "}", "<37>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<38>", "Min", "Fl", "ips", "Ġmin", "Fl", "ips", "Ġ=", "Ġnew", "ĠMin", "Fl", "ips", "();", "<39>", "<40>", "int", "[", "][", "]", "Ġmat", "Ġ=", "Ġ{", "<41>", "{", "0", ",", "Ġ0", "},", "<42>", "{", "0", ",", "Ġ1", "}", "<43>", "};", "<44>", "<45>", "int", "Ġresult", "Ġ=", "Ġmin", "Fl", "ips", ".", "min", "Fl", "ips", "(", "mat", ");", "<46>", "<47>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġnumber", "Ġof", "Ġflips", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<48>", "}", "<49>", "}", "<50>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"46": [[10, 9], [14, 13]]}}
{"id": 67, "code": "import java.util.*;\nclass MinJumps {\n\nprivate Set<Integer> set = new HashSet<>();\nprivate Map<Integer , List<Integer>> map = new HashMap<>();\nprivate int[] dist;\n\npublic int minJumps(int[] arr) {\nint i , j , n = arr.length;\nfor (i = 0;i < n;i ++) {\nmap.putIfAbsent(arr[i] , new ArrayList<>());\nmap.get(arr[i]).add(i);\n}\ndist = new int[n];\nArrays.fill(dist , - 1);\ndist[0] = 0;\nQueue<Integer> queue = new LinkedList<>();\nqueue.add(0);\nwhile (!queue.isEmpty()) {\nint current = queue.poll();\nif (current == n - 1) {\nreturn dist[current];\n}\nif (current + 1 < n && dist[current + 1] < 0) {\ndist[current + 1] = dist[current] + 1;\nqueue.add(current + 1);\n}\nif (current - 1 >= 0 && dist[current - 1] < 0) {\ndist[current - 1] = dist[current] + 1;\nqueue.add(current - 1);\n}\nif (!set.contains(arr[current])) {\nset.add(arr[current]);\nfor (int index : map.get(arr[current])) {\nif (dist[index] < 0) {\ndist[index] = dist[current] + 1;\nqueue.add(index);\n}\n}\n}\n}\nreturn - 1;\n}\npublic static void main(String[] args) {\nMinJumps minJumps = new MinJumps();\n\nint[] arr = {100,-23,100,100,3,2,1,100};\n\nint result = minJumps.minJumps(arr);\n\nSystem.out.println(\"Minimum jumps needed: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠMin", "J", "umps", "Ġ{", "<2>", "<3>", "private", "ĠSet", "<", "Integer", ">", "Ġset", "Ġ=", "Ġnew", "ĠHash", "Set", "<", ">", "();", "<4>", "private", "ĠMap", "<", "Integer", "Ġ,", "ĠList", "<", "Integer", ">>", "Ġmap", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<5>", "private", "Ġint", "[]", "Ġdist", ";", "<6>", "<7>", "public", "Ġint", "Ġmin", "J", "umps", "(", "int", "[]", "Ġarr", ")", "Ġ{", "<8>", "int", "Ġi", "Ġ,", "Ġj", "Ġ,", "Ġn", "Ġ=", "Ġarr", ".", "length", ";", "<9>", "for", "Ġ(", "i", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "Ġ++", ")", "Ġ{", "<10>", "map", ".", "put", "If", "Abs", "ent", "(", "arr", "[", "i", "]", "Ġ,", "Ġnew", "ĠArray", "List", "<", ">", "());", "<11>", "map", ".", "get", "(", "arr", "[", "i", "]).", "add", "(", "i", ");", "<12>", "}", "<13>", "dist", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<14>", "Ar", "rays", ".", "fill", "(", "dist", "Ġ,", "Ġ-", "Ġ1", ");", "<15>", "dist", "[", "0", "]", "Ġ=", "Ġ0", ";", "<16>", "Queue", "<", "Integer", ">", "Ġqueue", "Ġ=", "Ġnew", "ĠLink", "ed", "List", "<", ">", "();", "<17>", "queue", ".", "add", "(", "0", ");", "<18>", "while", "Ġ(!", "queue", ".", "is", "Empty", "())", "Ġ{", "<19>", "int", "Ġcurrent", "Ġ=", "Ġqueue", ".", "poll", "();", "<20>", "if", "Ġ(", "current", "Ġ==", "Ġn", "Ġ-", "Ġ1", ")", "Ġ{", "<21>", "return", "Ġdist", "[", "current", "];", "<22>", "}", "<23>", "if", "Ġ(", "current", "Ġ+", "Ġ1", "Ġ<", "Ġn", "Ġ&&", "Ġdist", "[", "current", "Ġ+", "Ġ1", "]", "Ġ<", "Ġ0", ")", "Ġ{", "<24>", "dist", "[", "current", "Ġ+", "Ġ1", "]", "Ġ=", "Ġdist", "[", "current", "]", "Ġ+", "Ġ1", ";", "<25>", "queue", ".", "add", "(", "current", "Ġ+", "Ġ1", ");", "<26>", "}", "<27>", "if", "Ġ(", "current", "Ġ-", "Ġ1", "Ġ>=", "Ġ0", "Ġ&&", "Ġdist", "[", "current", "Ġ-", "Ġ1", "]", "Ġ<", "Ġ0", ")", "Ġ{", "<28>", "dist", "[", "current", "Ġ-", "Ġ1", "]", "Ġ=", "Ġdist", "[", "current", "]", "Ġ+", "Ġ1", ";", "<29>", "queue", ".", "add", "(", "current", "Ġ-", "Ġ1", ");", "<30>", "}", "<31>", "if", "Ġ(!", "set", ".", "cont", "ains", "(", "arr", "[", "current", "]", "))", "Ġ{", "<32>", "set", ".", "add", "(", "arr", "[", "current", "]);", "<33>", "for", "Ġ(", "int", "Ġindex", "Ġ:", "Ġmap", ".", "get", "(", "arr", "[", "current", "]", "))", "Ġ{", "<34>", "if", "Ġ(", "dist", "[", "index", "]", "Ġ<", "Ġ0", ")", "Ġ{", "<35>", "dist", "[", "index", "]", "Ġ=", "Ġdist", "[", "current", "]", "Ġ+", "Ġ1", ";", "<36>", "queue", ".", "add", "(", "index", ");", "<37>", "}", "<38>", "}", "<39>", "}", "<40>", "}", "<41>", "return", "Ġ-", "Ġ1", ";", "<42>", "}", "<43>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<44>", "Min", "J", "umps", "Ġmin", "J", "umps", "Ġ=", "Ġnew", "ĠMin", "J", "umps", "();", "<45>", "<46>", "int", "[]", "Ġarr", "Ġ=", "Ġ{", "100", ",-", "23", ",", "100", ",", "100", ",", "3", ",", "2", ",", "1", ",", "100", "};", "<47>", "<48>", "int", "Ġresult", "Ġ=", "Ġmin", "J", "umps", ".", "min", "J", "umps", "(", "arr", ");", "<49>", "<50>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġjumps", "Ġneeded", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<51>", "}", "<52>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"53": [[3, 12, 4], [13, 11, 1]]}}
{"id": 68, "code": "class MinMovesToMakePalindrome {\n\npublic int minMovesToMakePalindrome(String s) {\nfor (int i = 0; i < s.length() - 1; i++) {\nif (s.charAt(i) == s.charAt(s.length() - 1)) {\nreturn i + minMovesToMakePalindrome(s.substring(0, i) + s.substring(i + 1, s.length() - 1));\n} else if (s.charAt(s.length() - 1 - i) == s.charAt(0)) {\nreturn i + minMovesToMakePalindrome(s.substring(1, s.length() - 1 - i) + s.substring(s.length() - i));\n}\n}\nreturn 0;\n}\npublic static void main(String[] args) {\nMinMovesToMakePalindrome minMovesToMakePalindrome = new MinMovesToMakePalindrome();\n\nString s = \"aabb\";\n\nint result = minMovesToMakePalindrome.minMovesToMakePalindrome(s);\n\nSystem.out.println(\"Minimum moves to make palindrome: \" + result);\n}\n\n}", "code_tokens": ["<0>", "class", "ĠMin", "M", "oves", "To", "Make", "Pal", "ind", "rome", "Ġ{", "<1>", "<2>", "public", "Ġint", "Ġmin", "M", "oves", "To", "Make", "Pal", "ind", "rome", "(", "String", "Ġs", ")", "Ġ{", "<3>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġs", ".", "length", "()", "Ġ-", "Ġ1", ";", "Ġi", "++)", "Ġ{", "<4>", "if", "Ġ(", "s", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġs", ".", "char", "At", "(", "s", ".", "length", "()", "Ġ-", "Ġ1", "))", "Ġ{", "<5>", "return", "Ġi", "Ġ+", "Ġmin", "M", "oves", "To", "Make", "Pal", "ind", "rome", "(", "s", ".", "sub", "string", "(", "0", ",", "Ġi", ")", "Ġ+", "Ġs", ".", "sub", "string", "(", "i", "Ġ+", "Ġ1", ",", "Ġs", ".", "length", "()", "Ġ-", "Ġ1", "));", "<6>", "}", "Ġelse", "Ġif", "Ġ(", "s", ".", "char", "At", "(", "s", ".", "length", "()", "Ġ-", "Ġ1", "Ġ-", "Ġi", ")", "Ġ==", "Ġs", ".", "char", "At", "(", "0", "))", "Ġ{", "<7>", "return", "Ġi", "Ġ+", "Ġmin", "M", "oves", "To", "Make", "Pal", "ind", "rome", "(", "s", ".", "sub", "string", "(", "1", ",", "Ġs", ".", "length", "()", "Ġ-", "Ġ1", "Ġ-", "Ġi", ")", "Ġ+", "Ġs", ".", "sub", "string", "(", "s", ".", "length", "()", "Ġ-", "Ġi", "));", "<8>", "}", "<9>", "}", "<10>", "return", "Ġ0", ";", "<11>", "}", "<12>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<13>", "Min", "M", "oves", "To", "Make", "Pal", "ind", "rome", "Ġmin", "M", "oves", "To", "Make", "Pal", "ind", "rome", "Ġ=", "Ġnew", "ĠMin", "M", "oves", "To", "Make", "Pal", "ind", "rome", "();", "<14>", "<15>", "String", "Ġs", "Ġ=", "Ġ\"", "a", "abb", "\";", "<16>", "<17>", "int", "Ġresult", "Ġ=", "Ġmin", "M", "oves", "To", "Make", "Pal", "ind", "rome", ".", "min", "M", "oves", "To", "Make", "Pal", "ind", "rome", "(", "s", ");", "<18>", "<19>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġmoves", "Ġto", "Ġmake", "Ġpal", "ind", "rome", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<20>", "}", "<21>", "<22>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"18": [[0, 9, 8, 11], [13]]}}
{"id": 69, "code": "class MinNonZeroProduct {\npublic int minNonZeroProduct(int p) {\n\n\nfinal int mod = 1000000007;\nif(p == 1){\nreturn 1;\n}else if(p == 2){\nreturn 6;\n}\nreturn (int)(pow((1L<<p)-2, (1L<<p-1)-1, mod) * (((1L<<p)-1)%mod) % mod);\n}\n\npublic long pow(long a, long n, long mod) {\na %= mod;\nlong ret = 1;\nint x = 63 - Long.numberOfLeadingZeros(n);\nfor (; x >= 0; x--) {\nret = ret * ret % mod;\nif (n << 63 - x < 0) ret = ret * a % mod;\n}\nreturn ret;\n}\npublic static void main(String[] args) {\nMinNonZeroProduct minNonZeroProduct = new MinNonZeroProduct();\n\nint p = 3;\n\nint result = minNonZeroProduct.minNonZeroProduct(p);\n\nSystem.out.println(\"Minimum non-zero product for p=\" + p + \": \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "class", "ĠMin", "Non", "Zero", "Product", "Ġ{", "<1>", "public", "Ġint", "Ġmin", "Non", "Zero", "Product", "(", "int", "Ġp", ")", "Ġ{", "<2>", "<3>", "<4>", "final", "Ġint", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<5>", "if", "(", "p", "Ġ==", "Ġ1", "){", "<6>", "return", "Ġ1", ";", "<7>", "}", "else", "Ġif", "(", "p", "Ġ==", "Ġ2", "){", "<8>", "return", "Ġ6", ";", "<9>", "}", "<10>", "return", "Ġ(", "int", ")(", "p", "ow", "((", "1", "L", "<<", "p", ")-", "2", ",", "Ġ(", "1", "L", "<<", "p", "-", "1", ")-", "1", ",", "Ġmod", ")", "Ġ*", "Ġ((", "(", "1", "L", "<<", "p", ")-", "1", ")", "%", "mod", ")", "Ġ%", "Ġmod", ");", "<11>", "}", "<12>", "<13>", "public", "Ġlong", "Ġpow", "(", "long", "Ġa", ",", "Ġlong", "Ġn", ",", "Ġlong", "Ġmod", ")", "Ġ{", "<14>", "a", "Ġ%", "=", "Ġmod", ";", "<15>", "long", "Ġret", "Ġ=", "Ġ1", ";", "<16>", "int", "Ġx", "Ġ=", "Ġ63", "Ġ-", "ĠLong", ".", "number", "Of", "Lead", "ing", "Z", "eros", "(", "n", ");", "<17>", "for", "Ġ(", ";", "Ġx", "Ġ>=", "Ġ0", ";", "Ġx", "--", ")", "Ġ{", "<18>", "ret", "Ġ=", "Ġret", "Ġ*", "Ġret", "Ġ%", "Ġmod", ";", "<19>", "if", "Ġ(", "n", "Ġ<<", "Ġ63", "Ġ-", "Ġx", "Ġ<", "Ġ0", ")", "Ġret", "Ġ=", "Ġret", "Ġ*", "Ġa", "Ġ%", "Ġmod", ";", "<20>", "}", "<21>", "return", "Ġret", ";", "<22>", "}", "<23>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<24>", "Min", "Non", "Zero", "Product", "Ġmin", "Non", "Zero", "Product", "Ġ=", "Ġnew", "ĠMin", "Non", "Zero", "Product", "();", "<25>", "<26>", "int", "Ġp", "Ġ=", "Ġ3", ";", "<27>", "<28>", "int", "Ġresult", "Ġ=", "Ġmin", "Non", "Zero", "Product", ".", "min", "Non", "Zero", "Product", "(", "p", ");", "<29>", "<30>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġnon", "-", "zero", "Ġproduct", "Ġfor", "Ġp", "=\"", "Ġ+", "Ġp", "Ġ+", "Ġ\"", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<31>", "}", "<32>", "<33>", "}", "<34>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"35": [[15, 5, 11, 4], [6]]}}
{"id": 70, "code": "class MinNumberOperations {\npublic int minNumberOperations(int[] target) {\nint free = 0;\nint req = 0;\nfor (int i = 0; i < target.length; i++) {\nif (target[i] > free) {\nreq += target[i] - free;\nfree = target[i];\n} else if (target[i] < free) {\nfree = target[i];\n}\n}\nreturn req;\n}\npublic static void main(String[] args) {\nMinNumberOperations minNumberOperations = new MinNumberOperations();\n\nint[] target = {3, 1, 5, 4, 2};\n\nint result = minNumberOperations.minNumberOperations(target);\n\nSystem.out.println(\"Minimum number of operations: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMin", "Number", "Oper", "ations", "Ġ{", "<1>", "public", "Ġint", "Ġmin", "Number", "Oper", "ations", "(", "int", "[]", "Ġtarget", ")", "Ġ{", "<2>", "int", "Ġfree", "Ġ=", "Ġ0", ";", "<3>", "int", "Ġreq", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġtarget", ".", "length", ";", "Ġi", "++)", "Ġ{", "<5>", "if", "Ġ(", "target", "[", "i", "]", "Ġ>", "Ġfree", ")", "Ġ{", "<6>", "req", "Ġ+=", "Ġtarget", "[", "i", "]", "Ġ-", "Ġfree", ";", "<7>", "free", "Ġ=", "Ġtarget", "[", "i", "];", "<8>", "}", "Ġelse", "Ġif", "Ġ(", "target", "[", "i", "]", "Ġ<", "Ġfree", ")", "Ġ{", "<9>", "free", "Ġ=", "Ġtarget", "[", "i", "];", "<10>", "}", "<11>", "}", "<12>", "return", "Ġreq", ";", "<13>", "}", "<14>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<15>", "Min", "Number", "Oper", "ations", "Ġmin", "Number", "Oper", "ations", "Ġ=", "Ġnew", "ĠMin", "Number", "Oper", "ations", "();", "<16>", "<17>", "int", "[]", "Ġtarget", "Ġ=", "Ġ{", "3", ",", "Ġ1", ",", "Ġ5", ",", "Ġ4", ",", "Ġ2", "};", "<18>", "<19>", "int", "Ġresult", "Ġ=", "Ġmin", "Number", "Oper", "ations", ".", "min", "Number", "Oper", "ations", "(", "target", ");", "<20>", "<21>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġnumber", "Ġof", "Ġoperations", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<22>", "}", "<23>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"20": [[8, 7, 0], [11, 6, 2, 2]]}}
{"id": 71, "code": "import java.util.*;\nclass MinRemoveToMakeValid {\npublic String minRemoveToMakeValid(String s) {\nfinal int N = s.length();\nStack<Integer> open = new Stack<>();\nchar[] A = s.toCharArray();\nfor (int i = 0; i < N; ++i) {\nif (A[i] == '(') {\nopen.push(i);\n} else if (A[i] == ')') {\nif (open.isEmpty()) {\nA[i] = '#';\n} else {\nopen.pop();\n}\n}\n}\nwhile (!open.isEmpty()) {\nint idx = open.pop();\nA[idx] = '#';\n}\nStringBuilder sb = new StringBuilder();\nfor (char c : A) {\nif (c != '#') {\nsb.append(c);\n}\n}\nreturn sb.toString();\n}\npublic static void main(String[] args) {\nMinRemoveToMakeValid minRemoveToMakeValid = new MinRemoveToMakeValid();\n\nString s = \"lee(t(c)o)de)\";\n\nString result = minRemoveToMakeValid.minRemoveToMakeValid(s);\n\nSystem.out.println(\"String after removing invalid parentheses: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠMin", "Remove", "To", "Make", "Valid", "Ġ{", "<2>", "public", "ĠString", "Ġmin", "Remove", "To", "Make", "Valid", "(", "String", "Ġs", ")", "Ġ{", "<3>", "final", "Ġint", "ĠN", "Ġ=", "Ġs", ".", "length", "();", "<4>", "Stack", "<", "Integer", ">", "Ġopen", "Ġ=", "Ġnew", "ĠStack", "<", ">", "();", "<5>", "char", "[]", "ĠA", "Ġ=", "Ġs", ".", "to", "Char", "Array", "();", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "ĠN", ";", "Ġ++", "i", ")", "Ġ{", "<7>", "if", "Ġ(", "A", "[", "i", "]", "Ġ==", "Ġ'", "('", ")", "Ġ{", "<8>", "open", ".", "push", "(", "i", ");", "<9>", "}", "Ġelse", "Ġif", "Ġ(", "A", "[", "i", "]", "Ġ==", "Ġ'", ")", "')", "Ġ{", "<10>", "if", "Ġ(", "open", ".", "is", "Empty", "())", "Ġ{", "<11>", "A", "[", "i", "]", "Ġ=", "Ġ'", "#", "';", "<12>", "}", "Ġelse", "Ġ{", "<13>", "open", ".", "pop", "();", "<14>", "}", "<15>", "}", "<16>", "}", "<17>", "while", "Ġ(!", "open", ".", "is", "Empty", "())", "Ġ{", "<18>", "int", "Ġid", "x", "Ġ=", "Ġopen", ".", "pop", "();", "<19>", "A", "[", "id", "x", "]", "Ġ=", "Ġ'", "#", "';", "<20>", "}", "<21>", "String", "Builder", "Ġs", "b", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<22>", "for", "Ġ(", "char", "Ġc", "Ġ:", "ĠA", ")", "Ġ{", "<23>", "if", "Ġ(", "c", "Ġ!=", "Ġ'", "#", "')", "Ġ{", "<24>", "sb", ".", "append", "(", "c", ");", "<25>", "}", "<26>", "}", "<27>", "return", "Ġs", "b", ".", "to", "String", "();", "<28>", "}", "<29>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<30>", "Min", "Remove", "To", "Make", "Valid", "Ġmin", "Remove", "To", "Make", "Valid", "Ġ=", "Ġnew", "ĠMin", "Remove", "To", "Make", "Valid", "();", "<31>", "<32>", "String", "Ġs", "Ġ=", "Ġ\"", "lee", "(", "t", "(", "c", ")", "o", ")", "de", ")", "\";", "<33>", "<34>", "String", "Ġresult", "Ġ=", "Ġmin", "Remove", "To", "Make", "Valid", ".", "min", "Remove", "To", "Make", "Valid", "(", "s", ");", "<35>", "<36>", "System", ".", "out", ".", "println", "(\"", "String", "Ġafter", "Ġremoving", "Ġinvalid", "Ġparentheses", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<37>", "}", "<38>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"35": [[8], [1, 14, 8]]}}
{"id": 72, "code": "\npublic class MinSumSquareOff {\n\npublic long minSumSquareDiff(int[] nums1, int[] nums2, int k1, int k2) {\nlong nums[] = new long[nums1.length], left = 0, right = 1000000000, count = 0, result = 0;\nfor (int i = 0; i < nums1.length; i++) {\nnums[i] = Math.abs(nums1[i] - nums2[i]);\n}\nwhile (left < right) {\nlong mid = (left + right) / 2, sum = 0;\nfor (long num : nums) {\nsum += Math.max(0, num - mid);\n}\nif (sum > k1 + k2) {\nleft = mid + 1;\n} else {\nright = mid;\ncount = k1 + k2 - sum;\n}\n}\nfor (long num : nums) {\nresult += Math.pow(num < left ? num : left - Math.min(1, Math.max(0, count--)), 2);\n}\nreturn left > 0 ? result : 0;\n}\n\npublic static void main(String[] args) {\nint[] nums1 = {1, 2, 3, 4};\nint[] nums2 = {2, 3, 4, 5};\nint k1 = 1;\nint k2 = 2;\n\nMinSumSquareOff solution = new MinSumSquareOff();\n\nlong result = solution.minSumSquareDiff(nums1, nums2, k1, k2);\n\nSystem.out.println(\"Minimum Sum of Squared Differences: \" + result);\n}\n}\n", "code_tokens": ["<0>", "<1>", "public", "Ġclass", "ĠMin", "Sum", "Square", "Off", "Ġ{", "<2>", "<3>", "public", "Ġlong", "Ġmin", "Sum", "Square", "Diff", "(", "int", "[]", "Ġnum", "s", "1", ",", "Ġint", "[]", "Ġnum", "s", "2", ",", "Ġint", "Ġk", "1", ",", "Ġint", "Ġk", "2", ")", "Ġ{", "<4>", "long", "Ġnum", "s", "[]", "Ġ=", "Ġnew", "Ġlong", "[", "n", "ums", "1", ".", "length", "],", "Ġleft", "Ġ=", "Ġ0", ",", "Ġright", "Ġ=", "Ġ100", "0000000", ",", "Ġcount", "Ġ=", "Ġ0", ",", "Ġresult", "Ġ=", "Ġ0", ";", "<5>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġnum", "s", "1", ".", "length", ";", "Ġi", "++)", "Ġ{", "<6>", "n", "ums", "[", "i", "]", "Ġ=", "ĠMath", ".", "abs", "(", "n", "ums", "1", "[", "i", "]", "Ġ-", "Ġnum", "s", "2", "[", "i", "]);", "<7>", "}", "<8>", "while", "Ġ(", "left", "Ġ<", "Ġright", ")", "Ġ{", "<9>", "long", "Ġmid", "Ġ=", "Ġ(", "left", "Ġ+", "Ġright", ")", "Ġ/", "Ġ2", ",", "Ġsum", "Ġ=", "Ġ0", ";", "<10>", "for", "Ġ(", "long", "Ġnum", "Ġ:", "Ġnum", "s", ")", "Ġ{", "<11>", "sum", "Ġ+=", "ĠMath", ".", "max", "(", "0", ",", "Ġnum", "Ġ-", "Ġmid", ");", "<12>", "}", "<13>", "if", "Ġ(", "sum", "Ġ>", "Ġk", "1", "Ġ+", "Ġk", "2", ")", "Ġ{", "<14>", "left", "Ġ=", "Ġmid", "Ġ+", "Ġ1", ";", "<15>", "}", "Ġelse", "Ġ{", "<16>", "right", "Ġ=", "Ġmid", ";", "<17>", "count", "Ġ=", "Ġk", "1", "Ġ+", "Ġk", "2", "Ġ-", "Ġsum", ";", "<18>", "}", "<19>", "}", "<20>", "for", "Ġ(", "long", "Ġnum", "Ġ:", "Ġnum", "s", ")", "Ġ{", "<21>", "result", "Ġ+=", "ĠMath", ".", "p", "ow", "(", "num", "Ġ<", "Ġleft", "Ġ?", "Ġnum", "Ġ:", "Ġleft", "Ġ-", "ĠMath", ".", "min", "(", "1", ",", "ĠMath", ".", "max", "(", "0", ",", "Ġcount", "--", ")),", "Ġ2", ");", "<22>", "}", "<23>", "return", "Ġleft", "Ġ>", "Ġ0", "Ġ?", "Ġresult", "Ġ:", "Ġ0", ";", "<24>", "}", "<25>", "<26>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<27>", "int", "[]", "Ġnum", "s", "1", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ3", ",", "Ġ4", "};", "<28>", "int", "[]", "Ġnum", "s", "2", "Ġ=", "Ġ{", "2", ",", "Ġ3", ",", "Ġ4", ",", "Ġ5", "};", "<29>", "int", "Ġk", "1", "Ġ=", "Ġ1", ";", "<30>", "int", "Ġk", "2", "Ġ=", "Ġ2", ";", "<31>", "<32>", "Min", "Sum", "Square", "Off", "Ġsolution", "Ġ=", "Ġnew", "ĠMin", "Sum", "Square", "Off", "();", "<33>", "<34>", "long", "Ġresult", "Ġ=", "Ġsolution", ".", "min", "Sum", "Square", "Diff", "(", "n", "ums", "1", ",", "Ġnum", "s", "2", ",", "Ġk", "1", ",", "Ġk", "2", ");", "<35>", "<36>", "System", ".", "out", ".", "println", "(\"", "Minimum", "ĠSum", "Ġof", "ĠSqu", "ared", "ĠDifferences", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<37>", "}", "<38>", "}", "<39>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"25": [[1, 8, 8, 3], [0]]}}
{"id": 73, "code": "class MinimizeXor {\npublic int minimizeXor(int num1, int num2) {\nint o = num1;\nint s = Integer.bitCount(num2);\nfor(int d = 29;d >= 0 && s > 0;d--){\nif(num1<<~d<0){\nnum1 ^= 1<<d;\ns--;\n}\n}\nfor(int d = 0;d < 30 && s > 0;d++){\nif(o<<~d>=0){\nnum1 ^= 1<<d;\ns--;\n}\n}\nreturn num1 ^ o;\n}\npublic static void main(String[] args) {\nMinimizeXor minimizeXor = new MinimizeXor();\n\nint num1 = 3;\nint num2 = 5;\n\nint result = minimizeXor.minimizeXor(num1, num2);\n\nSystem.out.println(\"Minimum XOR value: \" + result);\n}\n}\n", "code_tokens": ["<0>", "class", "ĠMin", "imize", "X", "or", "Ġ{", "<1>", "public", "Ġint", "Ġminimize", "X", "or", "(", "int", "Ġnum", "1", ",", "Ġint", "Ġnum", "2", ")", "Ġ{", "<2>", "int", "Ġo", "Ġ=", "Ġnum", "1", ";", "<3>", "int", "Ġs", "Ġ=", "ĠInteger", ".", "bit", "Count", "(", "num", "2", ");", "<4>", "for", "(", "int", "Ġd", "Ġ=", "Ġ29", ";", "d", "Ġ>=", "Ġ0", "Ġ&&", "Ġs", "Ġ>", "Ġ0", ";", "d", "--", "){", "<5>", "if", "(", "num", "1", "<<", "~", "d", "<", "0", "){", "<6>", "num", "1", "Ġ^", "=", "Ġ1", "<<", "d", ";", "<7>", "s", "--", ";", "<8>", "}", "<9>", "}", "<10>", "for", "(", "int", "Ġd", "Ġ=", "Ġ0", ";", "d", "Ġ<", "Ġ30", "Ġ&&", "Ġs", "Ġ>", "Ġ0", ";", "d", "++", "){", "<11>", "if", "(", "o", "<<", "~", "d", ">", "=", "0", "){", "<12>", "num", "1", "Ġ^", "=", "Ġ1", "<<", "d", ";", "<13>", "s", "--", ";", "<14>", "}", "<15>", "}", "<16>", "return", "Ġnum", "1", "Ġ^", "Ġo", ";", "<17>", "}", "<18>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<19>", "Min", "imize", "X", "or", "Ġminimize", "X", "or", "Ġ=", "Ġnew", "ĠMin", "imize", "X", "or", "();", "<20>", "<21>", "int", "Ġnum", "1", "Ġ=", "Ġ3", ";", "<22>", "int", "Ġnum", "2", "Ġ=", "Ġ5", ";", "<23>", "<24>", "int", "Ġresult", "Ġ=", "Ġminimize", "X", "or", ".", "min", "imize", "X", "or", "(", "num", "1", ",", "Ġnum", "2", ");", "<25>", "<26>", "System", ".", "out", ".", "println", "(\"", "Minimum", "ĠX", "OR", "Ġvalue", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<27>", "}", "<28>", "}", "<29>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"28": [[2, 3, 11], [14, 14, 8, 4]]}}
{"id": 74, "code": "class MinimumMoney {\npublic long minimumMoney(int[][] ts) {\nint n = ts.length;\nlong costtot = 0;\nfor (int[] t : ts) {\nif (t[0]>t[1])\ncosttot += t[0]-t[1];\n}\nlong ans = costtot;\nfor (int[] t : ts) {\nif (t[0]>t[1])\nans = Math.max(ans, costtot+t[1]);\nelse\nans = Math.max(ans, costtot+t[0]);\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nMinimumMoney minimumMoney = new MinimumMoney();\n\nint[][] transactions = {\n{10, 20},\n{20, 30},\n{30, 40},\n{40, 50}\n};\n\nlong result = minimumMoney.minimumMoney(transactions);\n\nSystem.out.println(\"Minimum money required: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMinimum", "Money", "Ġ{", "<1>", "public", "Ġlong", "Ġminimum", "Money", "(", "int", "[", "][", "]", "Ġts", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġts", ".", "length", ";", "<3>", "long", "Ġcost", "t", "ot", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "[]", "Ġt", "Ġ:", "Ġts", ")", "Ġ{", "<5>", "if", "Ġ(", "t", "[", "0", "]", ">", "t", "[", "1", "])", "<6>", "cost", "t", "ot", "Ġ+=", "Ġt", "[", "0", "]-", "t", "[", "1", "];", "<7>", "}", "<8>", "long", "Ġans", "Ġ=", "Ġcost", "t", "ot", ";", "<9>", "for", "Ġ(", "int", "[]", "Ġt", "Ġ:", "Ġts", ")", "Ġ{", "<10>", "if", "Ġ(", "t", "[", "0", "]", ">", "t", "[", "1", "])", "<11>", "ans", "Ġ=", "ĠMath", ".", "max", "(", "ans", ",", "Ġcost", "t", "ot", "+", "t", "[", "1", "]);", "<12>", "else", "<13>", "ans", "Ġ=", "ĠMath", ".", "max", "(", "ans", ",", "Ġcost", "t", "ot", "+", "t", "[", "0", "]);", "<14>", "}", "<15>", "return", "Ġans", ";", "<16>", "}", "<17>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<18>", "Minimum", "Money", "Ġminimum", "Money", "Ġ=", "Ġnew", "ĠMinimum", "Money", "();", "<19>", "<20>", "int", "[", "][", "]", "Ġtransactions", "Ġ=", "Ġ{", "<21>", "{", "10", ",", "Ġ20", "},", "<22>", "{", "20", ",", "Ġ30", "},", "<23>", "{", "30", ",", "Ġ40", "},", "<24>", "{", "40", ",", "Ġ50", "}", "<25>", "};", "<26>", "<27>", "long", "Ġresult", "Ġ=", "Ġminimum", "Money", ".", "minimum", "Money", "(", "trans", "actions", ");", "<28>", "<29>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġmoney", "Ġrequired", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<30>", "}", "<31>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"40": [[5, 14], [10]]}}
{"id": 75, "code": "class MinimumMountainRemovals {\npublic int minimumMountainRemovals(int[] nums) {\nint n = nums.length;\nint[] left = new int[n];\n\nfor (int i = 1; i < n; i++) {\nleft[i] = i;\n\nfor (int j = 0; j < i; j++) {\nif (nums[j] < nums[i]) {\nleft[i] = Math.min(left[i], left[j] + (i - j - 1));\n}\n}\n}\n\nint[] right = new int[n];\n\nfor (int i = n - 2; i >= 0; i--) {\nright[i] = n - i - 1;\n\nfor (int j = i + 1; j < n; j++) {\nif (nums[j] < nums[i]) {\nright[i] = Math.min(right[i], right[j] + (j - i - 1));\n}\n}\n}\n\nint answer = Integer.MAX_VALUE;\nfor (int i = 1; i < n - 1; i++) {\nanswer = Math.min(answer, left[i] + right[i]);\n}\n\nreturn answer;\n}\npublic static void main(String[] args) {\nMinimumMountainRemovals minimumMountainRemovals = new MinimumMountainRemovals();\n\nint[] nums = {2, 1, 1, 5, 6, 2, 3, 1};\n\nint result = minimumMountainRemovals.minimumMountainRemovals(nums);\n\nSystem.out.println(\"Minimum mountain removals: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMinimum", "M", "ountain", "Rem", "ov", "als", "Ġ{", "<1>", "public", "Ġint", "Ġminimum", "M", "ountain", "Rem", "ov", "als", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġnum", "s", ".", "length", ";", "<3>", "int", "[]", "Ġleft", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<4>", "<5>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<6>", "left", "[", "i", "]", "Ġ=", "Ġi", ";", "<7>", "<8>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġi", ";", "Ġj", "++)", "Ġ{", "<9>", "if", "Ġ(", "n", "ums", "[", "j", "]", "Ġ<", "Ġnum", "s", "[", "i", "])", "Ġ{", "<10>", "left", "[", "i", "]", "Ġ=", "ĠMath", ".", "min", "(", "left", "[", "i", "],", "Ġleft", "[", "j", "]", "Ġ+", "Ġ(", "i", "Ġ-", "Ġj", "Ġ-", "Ġ1", "));", "<11>", "}", "<12>", "}", "<13>", "}", "<14>", "<15>", "int", "[]", "Ġright", "Ġ=", "Ġnew", "Ġint", "[", "n", "];", "<16>", "<17>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġn", "Ġ-", "Ġ2", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<18>", "right", "[", "i", "]", "Ġ=", "Ġn", "Ġ-", "Ġi", "Ġ-", "Ġ1", ";", "<19>", "<20>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġi", "Ġ+", "Ġ1", ";", "Ġj", "Ġ<", "Ġn", ";", "Ġj", "++)", "Ġ{", "<21>", "if", "Ġ(", "n", "ums", "[", "j", "]", "Ġ<", "Ġnum", "s", "[", "i", "])", "Ġ{", "<22>", "right", "[", "i", "]", "Ġ=", "ĠMath", ".", "min", "(", "right", "[", "i", "],", "Ġright", "[", "j", "]", "Ġ+", "Ġ(", "j", "Ġ-", "Ġi", "Ġ-", "Ġ1", "));", "<23>", "}", "<24>", "}", "<25>", "}", "<26>", "<27>", "int", "Ġanswer", "Ġ=", "ĠInteger", ".", "MAX", "_", "VALUE", ";", "<28>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<", "Ġn", "Ġ-", "Ġ1", ";", "Ġi", "++)", "Ġ{", "<29>", "answer", "Ġ=", "ĠMath", ".", "min", "(", "answer", ",", "Ġleft", "[", "i", "]", "Ġ+", "Ġright", "[", "i", "]);", "<30>", "}", "<31>", "<32>", "return", "Ġanswer", ";", "<33>", "}", "<34>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<35>", "Minimum", "M", "ountain", "Rem", "ov", "als", "Ġminimum", "M", "ountain", "Rem", "ov", "als", "Ġ=", "Ġnew", "ĠMinimum", "M", "ountain", "Rem", "ov", "als", "();", "<36>", "<37>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "2", ",", "Ġ1", ",", "Ġ1", ",", "Ġ5", ",", "Ġ6", ",", "Ġ2", ",", "Ġ3", ",", "Ġ1", "};", "<38>", "<39>", "int", "Ġresult", "Ġ=", "Ġminimum", "M", "ountain", "Rem", "ov", "als", ".", "minimum", "M", "ountain", "Rem", "ov", "als", "(", "n", "ums", ");", "<40>", "<41>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġmountain", "Ġrem", "ov", "als", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<42>", "}", "<43>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"54": [[1, 11, 14], [14]]}}
{"id": 76, "code": "import java.util.*;\nclass MinimumMoves {\npublic int minimumMoves(int[][] g) {\nint n = g.length, m = g[0].length;\nQueue<int[]> q = new ArrayDeque<>();\nq.add(new int[]{0, 0, 0});\nint[][][] d = new int[2][n][m];\nfor(int i = 0;i < 2;i++){\nfor(int j = 0;j < n;j++){\nArrays.fill(d[i][j], 99999999);\n}\n}\nd[0][0][0] = 0;\nwhile(!q.isEmpty()){\nint[] cur = q.poll();\nint st = cur[0], r = cur[1], c = cur[2];\nint ur = r + (st == 1 ? 1 : 0), uc = c + (st == 1 ? 0 : 1);\nif(r == n-1 && c == n-2 && st == 0){\nreturn d[st][r][c];\n}\nif(uc+1 < m && g[r][c+1] == 0 && g[ur][uc+1] == 0 &&\nd[st][r][c+1] > d[st][r][c] + 1){\nd[st][r][c+1] = d[st][r][c] + 1;\nq.add(new int[]{st, r, c+1});\n}\nif(ur+1 < n && g[r+1][c] == 0 && g[ur+1][uc] == 0 &&\nd[st][r+1][c] > d[st][r][c] + 1){\nd[st][r+1][c] = d[st][r][c] + 1;\nq.add(new int[]{st, r+1, c});\n}\nint xr = r + (st == 0 ? 1 : 0), xc = c + (st == 0 ? 0 : 1);\nif(xr < n && xc < m && g[xr][xc] == 0 && g[r+1][c+1] == 0 &&\nd[st^1][r][c] > d[st][r][c] + 1){\nd[st^1][r][c] = d[st][r][c] + 1;\nq.add(new int[]{st^1, r, c});\n}\n}\nreturn -1;\n}\npublic static void main(String[] args) {\nMinimumMoves minimumMoves = new MinimumMoves();\n\nint[][] grid = {\n{0, 0, 0, 0, 0, 1},\n{1, 1, 0, 0, 1, 0},\n{0, 0, 0, 0, 1, 1},\n{0, 0, 1, 0, 1, 0},\n{0, 1, 1, 0, 0, 0},\n{0, 1, 1, 0, 0, 0}\n};\n\nint result = minimumMoves.minimumMoves(grid);\n\nSystem.out.println(\"Minimum moves: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠMinimum", "M", "oves", "Ġ{", "<2>", "public", "Ġint", "Ġminimum", "M", "oves", "(", "int", "[", "][", "]", "Ġg", ")", "Ġ{", "<3>", "int", "Ġn", "Ġ=", "Ġg", ".", "length", ",", "Ġm", "Ġ=", "Ġg", "[", "0", "].", "length", ";", "<4>", "Queue", "<", "int", "[]", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<5>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "0", ",", "Ġ0", ",", "Ġ0", "});", "<6>", "int", "[", "][", "][", "]", "Ġd", "Ġ=", "Ġnew", "Ġint", "[", "2", "][", "n", "][", "m", "];", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġ2", ";", "i", "++", "){", "<8>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġn", ";", "j", "++", "){", "<9>", "Ar", "rays", ".", "fill", "(", "d", "[", "i", "][", "j", "],", "Ġ9", "9999", "999", ");", "<10>", "}", "<11>", "}", "<12>", "d", "[", "0", "][", "0", "][", "0", "]", "Ġ=", "Ġ0", ";", "<13>", "while", "(", "!", "q", ".", "is", "Empty", "()", "){", "<14>", "int", "[]", "Ġcur", "Ġ=", "Ġq", ".", "poll", "();", "<15>", "int", "Ġst", "Ġ=", "Ġcur", "[", "0", "],", "Ġr", "Ġ=", "Ġcur", "[", "1", "],", "Ġc", "Ġ=", "Ġcur", "[", "2", "];", "<16>", "int", "Ġur", "Ġ=", "Ġr", "Ġ+", "Ġ(", "st", "Ġ==", "Ġ1", "Ġ?", "Ġ1", "Ġ:", "Ġ0", "),", "Ġu", "c", "Ġ=", "Ġc", "Ġ+", "Ġ(", "st", "Ġ==", "Ġ1", "Ġ?", "Ġ0", "Ġ:", "Ġ1", ");", "<17>", "if", "(", "r", "Ġ==", "Ġn", "-", "1", "Ġ&&", "Ġc", "Ġ==", "Ġn", "-", "2", "Ġ&&", "Ġst", "Ġ==", "Ġ0", "){", "<18>", "return", "Ġd", "[", "st", "][", "r", "][", "c", "];", "<19>", "}", "<20>", "if", "(", "uc", "+", "1", "Ġ<", "Ġm", "Ġ&&", "Ġg", "[", "r", "][", "c", "+", "1", "]", "Ġ==", "Ġ0", "Ġ&&", "Ġg", "[", "ur", "][", "uc", "+", "1", "]", "Ġ==", "Ġ0", "Ġ&&", "<21>", "d", "[", "st", "][", "r", "][", "c", "+", "1", "]", "Ġ>", "Ġd", "[", "st", "][", "r", "][", "c", "]", "Ġ+", "Ġ1", "){", "<22>", "d", "[", "st", "][", "r", "][", "c", "+", "1", "]", "Ġ=", "Ġd", "[", "st", "][", "r", "][", "c", "]", "Ġ+", "Ġ1", ";", "<23>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "st", ",", "Ġr", ",", "Ġc", "+", "1", "});", "<24>", "}", "<25>", "if", "(", "ur", "+", "1", "Ġ<", "Ġn", "Ġ&&", "Ġg", "[", "r", "+", "1", "][", "c", "]", "Ġ==", "Ġ0", "Ġ&&", "Ġg", "[", "ur", "+", "1", "][", "uc", "]", "Ġ==", "Ġ0", "Ġ&&", "<26>", "d", "[", "st", "][", "r", "+", "1", "][", "c", "]", "Ġ>", "Ġd", "[", "st", "][", "r", "][", "c", "]", "Ġ+", "Ġ1", "){", "<27>", "d", "[", "st", "][", "r", "+", "1", "][", "c", "]", "Ġ=", "Ġd", "[", "st", "][", "r", "][", "c", "]", "Ġ+", "Ġ1", ";", "<28>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "st", ",", "Ġr", "+", "1", ",", "Ġc", "});", "<29>", "}", "<30>", "int", "Ġx", "r", "Ġ=", "Ġr", "Ġ+", "Ġ(", "st", "Ġ==", "Ġ0", "Ġ?", "Ġ1", "Ġ:", "Ġ0", "),", "Ġx", "c", "Ġ=", "Ġc", "Ġ+", "Ġ(", "st", "Ġ==", "Ġ0", "Ġ?", "Ġ0", "Ġ:", "Ġ1", ");", "<31>", "if", "(", "x", "r", "Ġ<", "Ġn", "Ġ&&", "Ġx", "c", "Ġ<", "Ġm", "Ġ&&", "Ġg", "[", "x", "r", "][", "xc", "]", "Ġ==", "Ġ0", "Ġ&&", "Ġg", "[", "r", "+", "1", "][", "c", "+", "1", "]", "Ġ==", "Ġ0", "Ġ&&", "<32>", "d", "[", "st", "^", "1", "][", "r", "][", "c", "]", "Ġ>", "Ġd", "[", "st", "][", "r", "][", "c", "]", "Ġ+", "Ġ1", "){", "<33>", "d", "[", "st", "^", "1", "][", "r", "][", "c", "]", "Ġ=", "Ġd", "[", "st", "][", "r", "][", "c", "]", "Ġ+", "Ġ1", ";", "<34>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "st", "^", "1", ",", "Ġr", ",", "Ġc", "});", "<35>", "}", "<36>", "}", "<37>", "return", "Ġ-", "1", ";", "<38>", "}", "<39>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<40>", "Minimum", "M", "oves", "Ġminimum", "M", "oves", "Ġ=", "Ġnew", "ĠMinimum", "M", "oves", "();", "<41>", "<42>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<43>", "{", "0", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", ",", "Ġ1", "},", "<44>", "{", "1", ",", "Ġ1", ",", "Ġ0", ",", "Ġ0", ",", "Ġ1", ",", "Ġ0", "},", "<45>", "{", "0", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", ",", "Ġ1", ",", "Ġ1", "},", "<46>", "{", "0", ",", "Ġ0", ",", "Ġ1", ",", "Ġ0", ",", "Ġ1", ",", "Ġ0", "},", "<47>", "{", "0", ",", "Ġ1", ",", "Ġ1", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", "},", "<48>", "{", "0", ",", "Ġ1", ",", "Ġ1", ",", "Ġ0", ",", "Ġ0", ",", "Ġ0", "}", "<49>", "};", "<50>", "<51>", "int", "Ġresult", "Ġ=", "Ġminimum", "M", "oves", ".", "minimum", "M", "oves", "(", "grid", ");", "<52>", "<53>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġmoves", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<54>", "}", "<55>", "<56>", "}", "<57>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"15": [[13, 14, 3], [2, 3, 15]]}}
{"id": 77, "code": "class MinimumOneBitOperations {\n\npublic int minimumOneBitOperations(int n) {\nint ans = 0;\nfor (int i = 1; i <= n; i *= 2) {\nans ^= n / i;\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nMinimumOneBitOperations minimumOneBitOperations = new MinimumOneBitOperations();\n\nint n = 3;\n\nint result = minimumOneBitOperations.minimumOneBitOperations(n);\n\nSystem.out.println(\"Minimum one bit operations to make \" + n + \" zero: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMinimum", "One", "Bit", "Oper", "ations", "Ġ{", "<1>", "<2>", "public", "Ġint", "Ġminimum", "One", "Bit", "Oper", "ations", "(", "int", "Ġn", ")", "Ġ{", "<3>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<=", "Ġn", ";", "Ġi", "Ġ*", "=", "Ġ2", ")", "Ġ{", "<5>", "ans", "Ġ^", "=", "Ġn", "Ġ/", "Ġi", ";", "<6>", "}", "<7>", "return", "Ġans", ";", "<8>", "}", "<9>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<10>", "Minimum", "One", "Bit", "Oper", "ations", "Ġminimum", "One", "Bit", "Oper", "ations", "Ġ=", "Ġnew", "ĠMinimum", "One", "Bit", "Oper", "ations", "();", "<11>", "<12>", "int", "Ġn", "Ġ=", "Ġ3", ";", "<13>", "<14>", "int", "Ġresult", "Ġ=", "Ġminimum", "One", "Bit", "Oper", "ations", ".", "minimum", "One", "Bit", "Oper", "ations", "(", "n", ");", "<15>", "<16>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġone", "Ġbit", "Ġoperations", "Ġto", "Ġmake", "Ġ\"", "Ġ+", "Ġn", "Ġ+", "Ġ\"", "Ġzero", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<17>", "}", "<18>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"16": [[11, 6, 13], [4, 0]]}}
{"id": 78, "code": "class MinimumReplacement {\n\npublic long minimumReplacement(int[] nums) {\nlong count = 0;\nfor (int i = nums.length - 2, j = nums[nums.length - 1]; i >= 0; i--) {\ncount += (nums[i] - 1) / j;\nj = nums[i] / ((nums[i] + j - 1) / j);\n}\nreturn count;\n}\npublic static void main(String[] args) {\nMinimumReplacement minimumReplacement = new MinimumReplacement();\n\nint[] nums = {5, 6, 7, 8};\n\nlong result = minimumReplacement.minimumReplacement(nums);\n\nSystem.out.println(\"Minimum replacements needed: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠMinimum", "Repl", "acement", "Ġ{", "<1>", "<2>", "public", "Ġlong", "Ġminimum", "Repl", "acement", "(", "int", "[]", "Ġnum", "s", ")", "Ġ{", "<3>", "long", "Ġcount", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġnum", "s", ".", "length", "Ġ-", "Ġ2", ",", "Ġj", "Ġ=", "Ġnum", "s", "[", "n", "ums", ".", "length", "Ġ-", "Ġ1", "];", "Ġi", "Ġ>=", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<5>", "count", "Ġ+=", "Ġ(", "n", "ums", "[", "i", "]", "Ġ-", "Ġ1", ")", "Ġ/", "Ġj", ";", "<6>", "j", "Ġ=", "Ġnum", "s", "[", "i", "]", "Ġ/", "Ġ((", "n", "ums", "[", "i", "]", "Ġ+", "Ġj", "Ġ-", "Ġ1", ")", "Ġ/", "Ġj", ");", "<7>", "}", "<8>", "return", "Ġcount", ";", "<9>", "}", "<10>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<11>", "Minimum", "Repl", "acement", "Ġminimum", "Repl", "acement", "Ġ=", "Ġnew", "ĠMinimum", "Repl", "acement", "();", "<12>", "<13>", "int", "[]", "Ġnum", "s", "Ġ=", "Ġ{", "5", ",", "Ġ6", ",", "Ġ7", ",", "Ġ8", "};", "<14>", "<15>", "long", "Ġresult", "Ġ=", "Ġminimum", "Repl", "acement", ".", "minimum", "Repl", "acement", "(", "n", "ums", ");", "<16>", "<17>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġreplacements", "Ġneeded", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<18>", "}", "<19>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"52": [[7, 12], [12, 11, 15]]}}
{"id": 79, "code": "public class NextGreaterElement {\npublic int nextGreaterElement(int n) {\nchar[] s = Integer.valueOf(n).toString().toCharArray();\nnextPermutation(s);\ntry{\nint ans = Integer.valueOf(String.valueOf(s));\nif (ans <= n) {\nreturn -1;\n}\nreturn ans;\n} catch (NumberFormatException e) {\nreturn -1;\n}\n}\n\nprivate void swap(char[] nums, int i, int j) {\nchar temp = nums[i];\nnums[i] = nums[j];\nnums[j] = temp;\n}\npublic void nextPermutation(char[] nums) {\nif (nums == null || nums.length <= 1) {\nreturn;\n}\n\nint i = nums.length - 2;\nwhile (i >= 0 && nums[i] >= nums[i + 1]) {\ni--;\n}\n\nif (i >= 0) {\nint j = nums.length - 1;\nwhile (j >= 0 && nums[j] <= nums[i]) {\nj--;\n}\nswap(nums, i, j);\n}\n\nfor (int p = i + 1, q = nums.length - 1; p < q; p++, q--) {\nswap(nums, p, q);\n}\n}\npublic static void main(String[] args) {\nNextGreaterElement nextGreaterElement = new NextGreaterElement();\n\nint n = 12;\n\nint result = nextGreaterElement.nextGreaterElement(n);\n\nSystem.out.println(\"Next greater element: \" + result);\n}\n}", "code_tokens": ["<0>", "public", "Ġclass", "ĠNext", "Great", "er", "Element", "Ġ{", "<1>", "public", "Ġint", "Ġnext", "Great", "er", "Element", "(", "int", "Ġn", ")", "Ġ{", "<2>", "char", "[]", "Ġs", "Ġ=", "ĠInteger", ".", "value", "Of", "(", "n", ").", "to", "String", "().", "to", "Char", "Array", "();", "<3>", "next", "Per", "m", "utation", "(", "s", ");", "<4>", "try", "{", "<5>", "int", "Ġans", "Ġ=", "ĠInteger", ".", "value", "Of", "(", "String", ".", "value", "Of", "(", "s", "));", "<6>", "if", "Ġ(", "ans", "Ġ<=", "Ġn", ")", "Ġ{", "<7>", "return", "Ġ-", "1", ";", "<8>", "}", "<9>", "return", "Ġans", ";", "<10>", "}", "Ġcatch", "Ġ(", "Number", "Format", "Exception", "Ġe", ")", "Ġ{", "<11>", "return", "Ġ-", "1", ";", "<12>", "}", "<13>", "}", "<14>", "<15>", "private", "Ġvoid", "Ġswap", "(", "char", "[]", "Ġnum", "s", ",", "Ġint", "Ġi", ",", "Ġint", "Ġj", ")", "Ġ{", "<16>", "char", "Ġtemp", "Ġ=", "Ġnum", "s", "[", "i", "];", "<17>", "n", "ums", "[", "i", "]", "Ġ=", "Ġnum", "s", "[", "j", "];", "<18>", "n", "ums", "[", "j", "]", "Ġ=", "Ġtemp", ";", "<19>", "}", "<20>", "public", "Ġvoid", "Ġnext", "Per", "m", "utation", "(", "char", "[]", "Ġnum", "s", ")", "Ġ{", "<21>", "if", "Ġ(", "n", "ums", "Ġ==", "Ġnull", "Ġ||", "Ġnum", "s", ".", "length", "Ġ<=", "Ġ1", ")", "Ġ{", "<22>", "return", ";", "<23>", "}", "<24>", "<25>", "int", "Ġi", "Ġ=", "Ġnum", "s", ".", "length", "Ġ-", "Ġ2", ";", "<26>", "while", "Ġ(", "i", "Ġ>=", "Ġ0", "Ġ&&", "Ġnum", "s", "[", "i", "]", "Ġ>=", "Ġnum", "s", "[", "i", "Ġ+", "Ġ1", "])", "Ġ{", "<27>", "i", "--", ";", "<28>", "}", "<29>", "<30>", "if", "Ġ(", "i", "Ġ>=", "Ġ0", ")", "Ġ{", "<31>", "int", "Ġj", "Ġ=", "Ġnum", "s", ".", "length", "Ġ-", "Ġ1", ";", "<32>", "while", "Ġ(", "j", "Ġ>=", "Ġ0", "Ġ&&", "Ġnum", "s", "[", "j", "]", "Ġ<=", "Ġnum", "s", "[", "i", "])", "Ġ{", "<33>", "j", "--", ";", "<34>", "}", "<35>", "sw", "ap", "(", "n", "ums", ",", "Ġi", ",", "Ġj", ");", "<36>", "}", "<37>", "<38>", "for", "Ġ(", "int", "Ġp", "Ġ=", "Ġi", "Ġ+", "Ġ1", ",", "Ġq", "Ġ=", "Ġnum", "s", ".", "length", "Ġ-", "Ġ1", ";", "Ġp", "Ġ<", "Ġq", ";", "Ġp", "++", ",", "Ġq", "--", ")", "Ġ{", "<39>", "sw", "ap", "(", "n", "ums", ",", "Ġp", ",", "Ġq", ");", "<40>", "}", "<41>", "}", "<42>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<43>", "Next", "Great", "er", "Element", "Ġnext", "Great", "er", "Element", "Ġ=", "Ġnew", "ĠNext", "Great", "er", "Element", "();", "<44>", "<45>", "int", "Ġn", "Ġ=", "Ġ12", ";", "<46>", "<47>", "int", "Ġresult", "Ġ=", "Ġnext", "Great", "er", "Element", ".", "next", "Great", "er", "Element", "(", "n", ");", "<48>", "<49>", "System", ".", "out", ".", "println", "(\"", "Next", "Ġgreater", "Ġelement", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<50>", "}", "<51>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"67": [[4, 7, 0, 13], [5]]}}
{"id": 80, "code": "import java.util.*;\npublic class NumDecodings {\npublic int numDecodings(String s) {\nlong div = 1_000_000_007;\nif (s.isEmpty()) {\nreturn 1;\n}\nlong[] dp = new long[s.length() + 1];\ndp[0] = 1;\nchar c0 = s.charAt(0);\nif (c0 == '*') {\ndp[1] = 9;\n} else if(c0 == '0') {\nreturn 0;\n} else {\ndp[1] = 1;\n}\nSet<Character> set2 = new HashSet<>();\nset2.addAll(Arrays.asList('1','2','3','4','5','6'));\n\nfor (int i = 1; i < s.length(); i++) {\nchar curr = s.charAt(i);\nchar prev = s.charAt(i-1);\nlong prevCnt = dp[i];\nlong prevPrevCnt = dp[i-1];\nif (curr == '0') {\nif (prev == '1' || prev == '2') {\ndp[i+1] = prevPrevCnt;\n} else if (prev == '*') {\ndp[i+1] = (prevPrevCnt * 2) % div;\n} else {\nreturn 0;\n}\n} else if (curr == '*') {\nlong currCnt = prevCnt * 9;\nif (prev == '1') {\ncurrCnt = currCnt + prevPrevCnt * 9;\n} else if (prev == '2') {\ncurrCnt = currCnt + prevPrevCnt * 6;\n} else if (prev == '*') {\ncurrCnt = currCnt + prevPrevCnt * 15;\n}\ndp[i+1] = currCnt % div;\n} else {\nlong currCnt = prevCnt;\nif (prev == '1') {\ncurrCnt += prevPrevCnt;\n} else if (prev == '2' && set2.contains(curr)) {\ncurrCnt += prevPrevCnt;\n} else if (prev == '*') {\nif (set2.contains(curr)) {\ncurrCnt += prevPrevCnt * 2;\n} else {\ncurrCnt += prevPrevCnt;\n}\n}\ndp[i+1] = currCnt % div;\n}\n}\nreturn (int) dp[s.length()];\n}\npublic static void main(String[] args) {\nNumDecodings numDecodings = new NumDecodings();\n\nString s = \"*1*1*0\";\n\nint result = numDecodings.numDecodings(s);\n\nSystem.out.println(\"Number of ways to decode the string: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "public", "Ġclass", "ĠNum", "Dec", "od", "ings", "Ġ{", "<2>", "public", "Ġint", "Ġnum", "Dec", "od", "ings", "(", "String", "Ġs", ")", "Ġ{", "<3>", "long", "Ġdiv", "Ġ=", "Ġ1", "_", "000", "_", "000", "_", "007", ";", "<4>", "if", "Ġ(", "s", ".", "is", "Empty", "())", "Ġ{", "<5>", "return", "Ġ1", ";", "<6>", "}", "<7>", "long", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġlong", "[", "s", ".", "length", "()", "Ġ+", "Ġ1", "];", "<8>", "dp", "[", "0", "]", "Ġ=", "Ġ1", ";", "<9>", "char", "Ġc", "0", "Ġ=", "Ġs", ".", "char", "At", "(", "0", ");", "<10>", "if", "Ġ(", "c", "0", "Ġ==", "Ġ'", "*", "')", "Ġ{", "<11>", "dp", "[", "1", "]", "Ġ=", "Ġ9", ";", "<12>", "}", "Ġelse", "Ġif", "(", "c", "0", "Ġ==", "Ġ'", "0", "')", "Ġ{", "<13>", "return", "Ġ0", ";", "<14>", "}", "Ġelse", "Ġ{", "<15>", "dp", "[", "1", "]", "Ġ=", "Ġ1", ";", "<16>", "}", "<17>", "Set", "<", "Character", ">", "Ġset", "2", "Ġ=", "Ġnew", "ĠHash", "Set", "<", ">", "();", "<18>", "set", "2", ".", "add", "All", "(", "Ar", "rays", ".", "as", "List", "('", "1", "','", "2", "','", "3", "','", "4", "','", "5", "','", "6", "')", ");", "<19>", "<20>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<", "Ġs", ".", "length", "();", "Ġi", "++)", "Ġ{", "<21>", "char", "Ġcur", "r", "Ġ=", "Ġs", ".", "char", "At", "(", "i", ");", "<22>", "char", "Ġprev", "Ġ=", "Ġs", ".", "char", "At", "(", "i", "-", "1", ");", "<23>", "long", "Ġprev", "C", "nt", "Ġ=", "Ġd", "p", "[", "i", "];", "<24>", "long", "Ġprev", "Prev", "C", "nt", "Ġ=", "Ġd", "p", "[", "i", "-", "1", "];", "<25>", "if", "Ġ(", "cur", "r", "Ġ==", "Ġ'", "0", "')", "Ġ{", "<26>", "if", "Ġ(", "prev", "Ġ==", "Ġ'", "1", "'", "Ġ||", "Ġprev", "Ġ==", "Ġ'", "2", "')", "Ġ{", "<27>", "dp", "[", "i", "+", "1", "]", "Ġ=", "Ġprev", "Prev", "C", "nt", ";", "<28>", "}", "Ġelse", "Ġif", "Ġ(", "prev", "Ġ==", "Ġ'", "*", "')", "Ġ{", "<29>", "dp", "[", "i", "+", "1", "]", "Ġ=", "Ġ(", "prev", "Prev", "C", "nt", "Ġ*", "Ġ2", ")", "Ġ%", "Ġdiv", ";", "<30>", "}", "Ġelse", "Ġ{", "<31>", "return", "Ġ0", ";", "<32>", "}", "<33>", "}", "Ġelse", "Ġif", "Ġ(", "cur", "r", "Ġ==", "Ġ'", "*", "')", "Ġ{", "<34>", "long", "Ġcur", "r", "C", "nt", "Ġ=", "Ġprev", "C", "nt", "Ġ*", "Ġ9", ";", "<35>", "if", "Ġ(", "prev", "Ġ==", "Ġ'", "1", "')", "Ġ{", "<36>", "cur", "r", "C", "nt", "Ġ=", "Ġcur", "r", "C", "nt", "Ġ+", "Ġprev", "Prev", "C", "nt", "Ġ*", "Ġ9", ";", "<37>", "}", "Ġelse", "Ġif", "Ġ(", "prev", "Ġ==", "Ġ'", "2", "')", "Ġ{", "<38>", "cur", "r", "C", "nt", "Ġ=", "Ġcur", "r", "C", "nt", "Ġ+", "Ġprev", "Prev", "C", "nt", "Ġ*", "Ġ6", ";", "<39>", "}", "Ġelse", "Ġif", "Ġ(", "prev", "Ġ==", "Ġ'", "*", "')", "Ġ{", "<40>", "cur", "r", "C", "nt", "Ġ=", "Ġcur", "r", "C", "nt", "Ġ+", "Ġprev", "Prev", "C", "nt", "Ġ*", "Ġ15", ";", "<41>", "}", "<42>", "dp", "[", "i", "+", "1", "]", "Ġ=", "Ġcur", "r", "C", "nt", "Ġ%", "Ġdiv", ";", "<43>", "}", "Ġelse", "Ġ{", "<44>", "long", "Ġcur", "r", "C", "nt", "Ġ=", "Ġprev", "C", "nt", ";", "<45>", "if", "Ġ(", "prev", "Ġ==", "Ġ'", "1", "')", "Ġ{", "<46>", "cur", "r", "C", "nt", "Ġ+=", "Ġprev", "Prev", "C", "nt", ";", "<47>", "}", "Ġelse", "Ġif", "Ġ(", "prev", "Ġ==", "Ġ'", "2", "'", "Ġ&&", "Ġset", "2", ".", "cont", "ains", "(", "cur", "r", "))", "Ġ{", "<48>", "cur", "r", "C", "nt", "Ġ+=", "Ġprev", "Prev", "C", "nt", ";", "<49>", "}", "Ġelse", "Ġif", "Ġ(", "prev", "Ġ==", "Ġ'", "*", "')", "Ġ{", "<50>", "if", "Ġ(", "set", "2", ".", "cont", "ains", "(", "cur", "r", "))", "Ġ{", "<51>", "cur", "r", "C", "nt", "Ġ+=", "Ġprev", "Prev", "C", "nt", "Ġ*", "Ġ2", ";", "<52>", "}", "Ġelse", "Ġ{", "<53>", "cur", "r", "C", "nt", "Ġ+=", "Ġprev", "Prev", "C", "nt", ";", "<54>", "}", "<55>", "}", "<56>", "dp", "[", "i", "+", "1", "]", "Ġ=", "Ġcur", "r", "C", "nt", "Ġ%", "Ġdiv", ";", "<57>", "}", "<58>", "}", "<59>", "return", "Ġ(", "int", ")", "Ġd", "p", "[", "s", ".", "length", "()", "];", "<60>", "}", "<61>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<62>", "Num", "Dec", "od", "ings", "Ġnum", "Dec", "od", "ings", "Ġ=", "Ġnew", "ĠNum", "Dec", "od", "ings", "();", "<63>", "<64>", "String", "Ġs", "Ġ=", "Ġ\"", "*", "1", "*", "1", "*", "0", "\";", "<65>", "<66>", "int", "Ġresult", "Ġ=", "Ġnum", "Dec", "od", "ings", ".", "num", "Dec", "od", "ings", "(", "s", ");", "<67>", "<68>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġways", "Ġto", "Ġdecode", "Ġthe", "Ġstring", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<69>", "}", "<70>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"9": [[4], [4, 3]]}}
{"id": 81, "code": "\n\nimport java.util.*;\n\npublic class NumSubseq {\npublic static void main(String[] args) {\nint[] input = new int[]{};\nint[] output = new int[]{2, 3};\nSystem.out.println(new NumSubseq());\n}\n\npublic int numSubseq(int[] a, int target) {\nint n = a.length;\nInteger[] indices = new Integer[n];\nfor (int i = 0; i < n; i++) {\nindices[i] = i;\n}\nArrays.sort(indices, 0, n, (Integer x, Integer y) -> a[x] == a[y] ? Integer.compare(x, y) : Integer.compare(a[x], a[y]));\nint r = 0;\nint[] pow2 = new int[n + 1];\npow2[0] = 1;\nfor (int i = 1; i <= n; i++) {\npow2[i] = pow2[i - 1] * 2 % mod;\n}\nint ans = 0;\nr = n - 1;\nfor (int i = 0; i < n; i++) {\nr = Math.max(r, i);\nwhile (r - 1 >= i && a[indices[r]] + a[indices[i]] > target) {\nr--;\n}\nif (a[indices[r]] + a[indices[i]] <= target) {\nint cnt = r - i;\nans = (ans + pow2[cnt]) % mod;\n}\n\n}\n\nreturn ans;\n}\n\nint mod = (int) (1e9 + 7);\n}\n", "code_tokens": ["<0>", "<1>", "<2>", "import", "Ġjava", ".", "util", ".*", ";", "<3>", "<4>", "public", "Ġclass", "ĠNum", "Sub", "seq", "Ġ{", "<5>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<6>", "int", "[]", "Ġinput", "Ġ=", "Ġnew", "Ġint", "[]", "{", "};", "<7>", "int", "[]", "Ġoutput", "Ġ=", "Ġnew", "Ġint", "[]", "{", "2", ",", "Ġ3", "};", "<8>", "System", ".", "out", ".", "println", "(", "new", "ĠNum", "Sub", "seq", "());", "<9>", "}", "<10>", "<11>", "public", "Ġint", "Ġnum", "Sub", "seq", "(", "int", "[]", "Ġa", ",", "Ġint", "Ġtarget", ")", "Ġ{", "<12>", "int", "Ġn", "Ġ=", "Ġa", ".", "length", ";", "<13>", "Integer", "[]", "Ġindices", "Ġ=", "Ġnew", "ĠInteger", "[", "n", "];", "<14>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<15>", "ind", "ices", "[", "i", "]", "Ġ=", "Ġi", ";", "<16>", "}", "<17>", "Ar", "rays", ".", "sort", "(", "ind", "ices", ",", "Ġ0", ",", "Ġn", ",", "Ġ(", "Integer", "Ġx", ",", "ĠInteger", "Ġy", ")", "Ġ->", "Ġa", "[", "x", "]", "Ġ==", "Ġa", "[", "y", "]", "Ġ?", "ĠInteger", ".", "comp", "are", "(", "x", ",", "Ġy", ")", "Ġ:", "ĠInteger", ".", "comp", "are", "(", "a", "[", "x", "],", "Ġa", "[", "y", "])", ");", "<18>", "int", "Ġr", "Ġ=", "Ġ0", ";", "<19>", "int", "[]", "Ġpow", "2", "Ġ=", "Ġnew", "Ġint", "[", "n", "Ġ+", "Ġ1", "];", "<20>", "p", "ow", "2", "[", "0", "]", "Ġ=", "Ġ1", ";", "<21>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<=", "Ġn", ";", "Ġi", "++)", "Ġ{", "<22>", "p", "ow", "2", "[", "i", "]", "Ġ=", "Ġpow", "2", "[", "i", "Ġ-", "Ġ1", "]", "Ġ*", "Ġ2", "Ġ%", "Ġmod", ";", "<23>", "}", "<24>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<25>", "r", "Ġ=", "Ġn", "Ġ-", "Ġ1", ";", "<26>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġi", "++)", "Ġ{", "<27>", "r", "Ġ=", "ĠMath", ".", "max", "(", "r", ",", "Ġi", ");", "<28>", "while", "Ġ(", "r", "Ġ-", "Ġ1", "Ġ>=", "Ġi", "Ġ&&", "Ġa", "[", "ind", "ices", "[", "r", "]]", "Ġ+", "Ġa", "[", "ind", "ices", "[", "i", "]]", "Ġ>", "Ġtarget", ")", "Ġ{", "<29>", "r", "--", ";", "<30>", "}", "<31>", "if", "Ġ(", "a", "[", "ind", "ices", "[", "r", "]]", "Ġ+", "Ġa", "[", "ind", "ices", "[", "i", "]]", "Ġ<=", "Ġtarget", ")", "Ġ{", "<32>", "int", "Ġc", "nt", "Ġ=", "Ġr", "Ġ-", "Ġi", ";", "<33>", "ans", "Ġ=", "Ġ(", "ans", "Ġ+", "Ġpow", "2", "[", "c", "nt", "])", "Ġ%", "Ġmod", ";", "<34>", "}", "<35>", "<36>", "}", "<37>", "<38>", "return", "Ġans", ";", "<39>", "}", "<40>", "<41>", "int", "Ġmod", "Ġ=", "Ġ(", "int", ")", "Ġ(", "1", "e", "9", "Ġ+", "Ġ7", ");", "<42>", "}", "<43>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"44": [[11, 7, 4, 11], [13]]}}
{"id": 82, "code": "import java.util.*;\n\npublic class NumberOfArithmeticSlices {\nHashMap<String, Integer> check = new HashMap<>();\n\npublic int numberOfArithmeticSlices(int[] A) {\nif (A==null || A.length<3) return 0;\nHashMap<Long, List<Integer>> map = new HashMap<>();\nfor (int i=0; i<A.length; i++) {\nif (!map.containsKey((long)A[i])) map.put((long)A[i], new ArrayList<Integer>());\nmap.get((long)A[i]).add(i);\n}\nint count = 0;\nfor (int i=0; i<A.length-2; i++) {\nfor (int j=i+1; j<A.length-1; j++) {\nlong dif = (long)A[j]-(long)A[i];\nlong target = (long)A[j]+dif;\ncount += helper(map, j, target, dif);\n}\n}\nreturn count;\n}\n\nprivate int helper(HashMap<Long, List<Integer>> map, int thred, long target, long dif) {\nString key = thred+\",\"+target+\",\"+dif;\nif (check.containsKey(key)) return check.get(key);\nif (map.containsKey(target)) {\nList<Integer> list = map.get(target);\nint count = 0;\nfor (int each:list) {\nif (each > thred) {\ncount += helper(map, each, target+dif, dif) + 1;\n}\n}\ncheck.put(key, count);\nreturn count;\n} else return 0;\n}\npublic static void main(String[] args) {\nNumberOfArithmeticSlices numberOfArithmeticSlices = new NumberOfArithmeticSlices();\n\nint[] A = {2, 4, 6, 8, 10};\n\nint result = numberOfArithmeticSlices.numberOfArithmeticSlices(A);\n\nSystem.out.println(\"Number of arithmetic slices: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "public", "Ġclass", "ĠNumber", "Of", "Ar", "ithmetic", "S", "lic", "es", "Ġ{", "<3>", "Hash", "Map", "<", "String", ",", "ĠInteger", ">", "Ġcheck", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<4>", "<5>", "public", "Ġint", "Ġnumber", "Of", "Ar", "ithmetic", "S", "lic", "es", "(", "int", "[]", "ĠA", ")", "Ġ{", "<6>", "if", "Ġ(", "A", "==", "null", "Ġ||", "ĠA", ".", "length", "<", "3", ")", "Ġreturn", "Ġ0", ";", "<7>", "Hash", "Map", "<", "Long", ",", "ĠList", "<", "Integer", ">>", "Ġmap", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<8>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "Ġi", "<", "A", ".", "length", ";", "Ġi", "++)", "Ġ{", "<9>", "if", "Ġ(!", "map", ".", "cont", "ains", "Key", "((", "long", ")", "A", "[", "i", "]", "))", "Ġmap", ".", "put", "((", "long", ")", "A", "[", "i", "],", "Ġnew", "ĠArray", "List", "<", "Integer", ">", "());", "<10>", "map", ".", "get", "((", "long", ")", "A", "[", "i", "]).", "add", "(", "i", ");", "<11>", "}", "<12>", "int", "Ġcount", "Ġ=", "Ġ0", ";", "<13>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "Ġi", "<", "A", ".", "length", "-", "2", ";", "Ġi", "++)", "Ġ{", "<14>", "for", "Ġ(", "int", "Ġj", "=", "i", "+", "1", ";", "Ġj", "<", "A", ".", "length", "-", "1", ";", "Ġj", "++)", "Ġ{", "<15>", "long", "Ġd", "if", "Ġ=", "Ġ(", "long", ")", "A", "[", "j", "]", "-(", "long", ")", "A", "[", "i", "];", "<16>", "long", "Ġtarget", "Ġ=", "Ġ(", "long", ")", "A", "[", "j", "]+", "d", "if", ";", "<17>", "count", "Ġ+=", "Ġhelper", "(", "map", ",", "Ġj", ",", "Ġtarget", ",", "Ġd", "if", ");", "<18>", "}", "<19>", "}", "<20>", "return", "Ġcount", ";", "<21>", "}", "<22>", "<23>", "private", "Ġint", "Ġhelper", "(", "Hash", "Map", "<", "Long", ",", "ĠList", "<", "Integer", ">>", "Ġmap", ",", "Ġint", "Ġth", "red", ",", "Ġlong", "Ġtarget", ",", "Ġlong", "Ġd", "if", ")", "Ġ{", "<24>", "String", "Ġkey", "Ġ=", "Ġth", "red", "+", "\",\"", "+", "target", "+", "\",\"", "+", "d", "if", ";", "<25>", "if", "Ġ(", "check", ".", "cont", "ains", "Key", "(", "key", "))", "Ġreturn", "Ġcheck", ".", "get", "(", "key", ");", "<26>", "if", "Ġ(", "map", ".", "cont", "ains", "Key", "(", "target", "))", "Ġ{", "<27>", "List", "<", "Integer", ">", "Ġlist", "Ġ=", "Ġmap", ".", "get", "(", "target", ");", "<28>", "int", "Ġcount", "Ġ=", "Ġ0", ";", "<29>", "for", "Ġ(", "int", "Ġeach", ":", "list", ")", "Ġ{", "<30>", "if", "Ġ(", "each", "Ġ>", "Ġth", "red", ")", "Ġ{", "<31>", "count", "Ġ+=", "Ġhelper", "(", "map", ",", "Ġeach", ",", "Ġtarget", "+", "d", "if", ",", "Ġd", "if", ")", "Ġ+", "Ġ1", ";", "<32>", "}", "<33>", "}", "<34>", "check", ".", "put", "(", "key", ",", "Ġcount", ");", "<35>", "return", "Ġcount", ";", "<36>", "}", "Ġelse", "Ġreturn", "Ġ0", ";", "<37>", "}", "<38>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<39>", "Number", "Of", "Ar", "ithmetic", "S", "lic", "es", "Ġnumber", "Of", "Ar", "ithmetic", "S", "lic", "es", "Ġ=", "Ġnew", "ĠNumber", "Of", "Ar", "ithmetic", "S", "lic", "es", "();", "<40>", "<41>", "int", "[]", "ĠA", "Ġ=", "Ġ{", "2", ",", "Ġ4", ",", "Ġ6", ",", "Ġ8", ",", "Ġ10", "};", "<42>", "<43>", "int", "Ġresult", "Ġ=", "Ġnumber", "Of", "Ar", "ithmetic", "S", "lic", "es", ".", "number", "Of", "Ar", "ithmetic", "S", "lic", "es", "(", "A", ");", "<44>", "<45>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġarithmetic", "Ġslices", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<46>", "}", "<47>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"29": [[9, 0, 7], [10]]}}
{"id": 83, "code": "class NumberOfArrays {\npublic int numberOfArrays(String S, int k) {\nint n = S.length();\nchar[] s = S.toCharArray();\nlong[] dp = new long[n+1];\ndp[0] = 1;\nint mod = 1000000007;\nfor(int i = 0;i < n;i++){\nif(s[i] == '0')continue;\nlong u = 0;\nfor(int j = i;j < n;j++){\nu = u * 10 + (s[j]-'0');\nif(u >= 1 && u <= k){\ndp[j+1] += dp[i];\nif(dp[j+1] >= mod)dp[j+1] -= mod;\n}else{\nbreak;\n}\n}\n}\nreturn (int)dp[n];\n}\npublic static void main(String[] args) {\nNumberOfArrays numberOfArrays = new NumberOfArrays();\n\nString S = \"1317\";\nint k = 10;\n\nint result = numberOfArrays.numberOfArrays(S, k);\n\nSystem.out.println(\"Number of ways to split the string: \" + result);\n}\n}\n", "code_tokens": ["<0>", "class", "ĠNumber", "Of", "Ar", "rays", "Ġ{", "<1>", "public", "Ġint", "Ġnumber", "Of", "Ar", "rays", "(", "String", "ĠS", ",", "Ġint", "Ġk", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "ĠS", ".", "length", "();", "<3>", "char", "[]", "Ġs", "Ġ=", "ĠS", ".", "to", "Char", "Array", "();", "<4>", "long", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġlong", "[", "n", "+", "1", "];", "<5>", "dp", "[", "0", "]", "Ġ=", "Ġ1", ";", "<6>", "int", "Ġmod", "Ġ=", "Ġ100", "000000", "7", ";", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<8>", "if", "(", "s", "[", "i", "]", "Ġ==", "Ġ'", "0", "')", "continue", ";", "<9>", "long", "Ġu", "Ġ=", "Ġ0", ";", "<10>", "for", "(", "int", "Ġj", "Ġ=", "Ġi", ";", "j", "Ġ<", "Ġn", ";", "j", "++", "){", "<11>", "u", "Ġ=", "Ġu", "Ġ*", "Ġ10", "Ġ+", "Ġ(", "s", "[", "j", "]", "-'", "0", "');", "<12>", "if", "(", "u", "Ġ>=", "Ġ1", "Ġ&&", "Ġu", "Ġ<=", "Ġk", "){", "<13>", "dp", "[", "j", "+", "1", "]", "Ġ+=", "Ġd", "p", "[", "i", "];", "<14>", "if", "(", "dp", "[", "j", "+", "1", "]", "Ġ>=", "Ġmod", ")", "dp", "[", "j", "+", "1", "]", "Ġ-=", "Ġmod", ";", "<15>", "}", "else", "{", "<16>", "break", ";", "<17>", "}", "<18>", "}", "<19>", "}", "<20>", "return", "Ġ(", "int", ")", "dp", "[", "n", "];", "<21>", "}", "<22>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<23>", "Number", "Of", "Ar", "rays", "Ġnumber", "Of", "Ar", "rays", "Ġ=", "Ġnew", "ĠNumber", "Of", "Ar", "rays", "();", "<24>", "<25>", "String", "ĠS", "Ġ=", "Ġ\"", "13", "17", "\";", "<26>", "int", "Ġk", "Ġ=", "Ġ10", ";", "<27>", "<28>", "int", "Ġresult", "Ġ=", "Ġnumber", "Of", "Ar", "rays", ".", "number", "Of", "Ar", "rays", "(", "S", ",", "Ġk", ");", "<29>", "<30>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġways", "Ġto", "Ġsplit", "Ġthe", "Ġstring", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<31>", "}", "<32>", "}", "<33>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"19": [[1, 0], [7, 15]]}}
{"id": 84, "code": "class NumberOfWays {\n\npublic long numberOfWays(String s) {\nlong right[] = new long[s.length()], one = 0, count = 0;\nfor (int i = s.length() - 1; i > 0; i--) {\nright[i - 1] = (s.charAt(i) - '0') + right[i];\n}\nfor (int i = 0; i < s.length(); i++) {\ncount += s.charAt(i) == '0' ? one * right[i] : (i - one) * (s.length() - i - right[i] - 1);\none += s.charAt(i) - '0';\n}\nreturn count;\n}\npublic static void main(String[] args) {\nNumberOfWays numberOfWays = new NumberOfWays();\n\nString s = \"001101\";\n\nlong result = numberOfWays.numberOfWays(s);\n\nSystem.out.println(\"Number of ways to choose triples: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠNumber", "Of", "W", "ays", "Ġ{", "<1>", "<2>", "public", "Ġlong", "Ġnumber", "Of", "W", "ays", "(", "String", "Ġs", ")", "Ġ{", "<3>", "long", "Ġright", "[]", "Ġ=", "Ġnew", "Ġlong", "[", "s", ".", "length", "()", "],", "Ġone", "Ġ=", "Ġ0", ",", "Ġcount", "Ġ=", "Ġ0", ";", "<4>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġs", ".", "length", "()", "Ġ-", "Ġ1", ";", "Ġi", "Ġ>", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<5>", "right", "[", "i", "Ġ-", "Ġ1", "]", "Ġ=", "Ġ(", "s", ".", "char", "At", "(", "i", ")", "Ġ-", "Ġ'", "0", "')", "Ġ+", "Ġright", "[", "i", "];", "<6>", "}", "<7>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġs", ".", "length", "();", "Ġi", "++)", "Ġ{", "<8>", "count", "Ġ+=", "Ġs", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "0", "'", "Ġ?", "Ġone", "Ġ*", "Ġright", "[", "i", "]", "Ġ:", "Ġ(", "i", "Ġ-", "Ġone", ")", "Ġ*", "Ġ(", "s", ".", "length", "()", "Ġ-", "Ġi", "Ġ-", "Ġright", "[", "i", "]", "Ġ-", "Ġ1", ");", "<9>", "one", "Ġ+=", "Ġs", ".", "char", "At", "(", "i", ")", "Ġ-", "Ġ'", "0", "';", "<10>", "}", "<11>", "return", "Ġcount", ";", "<12>", "}", "<13>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<14>", "Number", "Of", "W", "ays", "Ġnumber", "Of", "W", "ays", "Ġ=", "Ġnew", "ĠNumber", "Of", "W", "ays", "();", "<15>", "<16>", "String", "Ġs", "Ġ=", "Ġ\"", "00", "11", "01", "\";", "<17>", "<18>", "long", "Ġresult", "Ġ=", "Ġnumber", "Of", "W", "ays", ".", "number", "Of", "W", "ays", "(", "s", ");", "<19>", "<20>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġways", "Ġto", "Ġchoose", "Ġtri", "ples", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<21>", "}", "<22>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"63": [[15], [3]]}}
{"id": 85, "code": "class PlaceWordInCrossword {\nboolean go(char[][] board, char[] w)\n{\nint n = board.length;\nint m = board[0].length;\nfor(int i = 0;i < n;i++){\nfor(int j = 0;j < m;){\nint k = j;\nwhile(k < m && board[i][k] != '#')k++;\n\nif(w.length == k-j){\n{\nboolean valid = true;\nfor(int t = 0;t < w.length;t++){\nif(board[i][j+t] != ' ' && board[i][j+t] != w[t]){\nvalid = false;\n}\n}\nif(valid)return true;\n}\n{\nboolean valid = true;\nfor(int t = 0;t < w.length;t++){\nif(board[i][j+t] != ' ' && board[i][j+t] != w[w.length-1-t]){\nvalid = false;\n}\n}\nif(valid)return true;\n}\n}\n\nif(k == j)k++;\nj = k;\n}\n}\nreturn false;\n}\n\npublic boolean placeWordInCrossword(char[][] board, String word) {\nchar[] w = word.toCharArray();\nif(go(board, w))return true;\n\nint n = board.length;\nint m = board[0].length;\nchar[][] nb = new char[m][n];\nfor(int i = 0;i < m;i++){\nfor(int j = 0;j < n;j++){\nnb[i][j] = board[j][i];\n}\n}\nreturn go(nb, w);\n}\npublic static void main(String[] args) {\nPlaceWordInCrossword placeWordInCrossword = new PlaceWordInCrossword();\n\nchar[][] board = {\n{'#', ' ', '#'},\n{' ', ' ', '#'},\n{'#', 'c', ' '}\n};\nString word = \"abc\";\n\nboolean result = placeWordInCrossword.placeWordInCrossword(board, word);\n\nSystem.out.println(\"Can place the word in the crossword: \" + result);\n}\n\n}", "code_tokens": ["<0>", "class", "ĠPlace", "Word", "In", "Cross", "word", "Ġ{", "<1>", "bo", "olean", "Ġgo", "(", "char", "[", "][", "]", "Ġboard", ",", "Ġchar", "[]", "Ġw", ")", "<2>", "{", "<3>", "int", "Ġn", "Ġ=", "Ġboard", ".", "length", ";", "<4>", "int", "Ġm", "Ġ=", "Ġboard", "[", "0", "].", "length", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<6>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġm", ";", "){", "<7>", "int", "Ġk", "Ġ=", "Ġj", ";", "<8>", "while", "(", "k", "Ġ<", "Ġm", "Ġ&&", "Ġboard", "[", "i", "][", "k", "]", "Ġ!=", "Ġ'", "#", "')", "k", "++;", "<9>", "<10>", "if", "(", "w", ".", "length", "Ġ==", "Ġk", "-", "j", "){", "<11>", "{", "<12>", "bo", "olean", "Ġvalid", "Ġ=", "Ġtrue", ";", "<13>", "for", "(", "int", "Ġt", "Ġ=", "Ġ0", ";", "t", "Ġ<", "Ġw", ".", "length", ";", "t", "++", "){", "<14>", "if", "(", "board", "[", "i", "][", "j", "+", "t", "]", "Ġ!=", "Ġ'", "Ġ'", "Ġ&&", "Ġboard", "[", "i", "][", "j", "+", "t", "]", "Ġ!=", "Ġw", "[", "t", "])", "{", "<15>", "valid", "Ġ=", "Ġfalse", ";", "<16>", "}", "<17>", "}", "<18>", "if", "(", "valid", ")", "return", "Ġtrue", ";", "<19>", "}", "<20>", "{", "<21>", "bo", "olean", "Ġvalid", "Ġ=", "Ġtrue", ";", "<22>", "for", "(", "int", "Ġt", "Ġ=", "Ġ0", ";", "t", "Ġ<", "Ġw", ".", "length", ";", "t", "++", "){", "<23>", "if", "(", "board", "[", "i", "][", "j", "+", "t", "]", "Ġ!=", "Ġ'", "Ġ'", "Ġ&&", "Ġboard", "[", "i", "][", "j", "+", "t", "]", "Ġ!=", "Ġw", "[", "w", ".", "length", "-", "1", "-", "t", "])", "{", "<24>", "valid", "Ġ=", "Ġfalse", ";", "<25>", "}", "<26>", "}", "<27>", "if", "(", "valid", ")", "return", "Ġtrue", ";", "<28>", "}", "<29>", "}", "<30>", "<31>", "if", "(", "k", "Ġ==", "Ġj", ")", "k", "++;", "<32>", "j", "Ġ=", "Ġk", ";", "<33>", "}", "<34>", "}", "<35>", "return", "Ġfalse", ";", "<36>", "}", "<37>", "<38>", "public", "Ġboolean", "Ġplace", "Word", "In", "Cross", "word", "(", "char", "[", "][", "]", "Ġboard", ",", "ĠString", "Ġword", ")", "Ġ{", "<39>", "char", "[]", "Ġw", "Ġ=", "Ġword", ".", "to", "Char", "Array", "();", "<40>", "if", "(", "go", "(", "board", ",", "Ġw", "))", "return", "Ġtrue", ";", "<41>", "<42>", "int", "Ġn", "Ġ=", "Ġboard", ".", "length", ";", "<43>", "int", "Ġm", "Ġ=", "Ġboard", "[", "0", "].", "length", ";", "<44>", "char", "[", "][", "]", "Ġn", "b", "Ġ=", "Ġnew", "Ġchar", "[", "m", "][", "n", "];", "<45>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġm", ";", "i", "++", "){", "<46>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġn", ";", "j", "++", "){", "<47>", "nb", "[", "i", "][", "j", "]", "Ġ=", "Ġboard", "[", "j", "][", "i", "];", "<48>", "}", "<49>", "}", "<50>", "return", "Ġgo", "(", "nb", ",", "Ġw", ");", "<51>", "}", "<52>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<53>", "Place", "Word", "In", "Cross", "word", "Ġplace", "Word", "In", "Cross", "word", "Ġ=", "Ġnew", "ĠPlace", "Word", "In", "Cross", "word", "();", "<54>", "<55>", "char", "[", "][", "]", "Ġboard", "Ġ=", "Ġ{", "<56>", "{", "'", "#", "',", "Ġ'", "Ġ',", "Ġ'", "#", "'", "},", "<57>", "{", "'", "Ġ',", "Ġ'", "Ġ',", "Ġ'", "#", "'", "},", "<58>", "{", "'", "#", "',", "Ġ'", "c", "',", "Ġ'", "Ġ'", "}", "<59>", "};", "<60>", "String", "Ġword", "Ġ=", "Ġ\"", "abc", "\";", "<61>", "<62>", "bo", "olean", "Ġresult", "Ġ=", "Ġplace", "Word", "In", "Cross", "word", ".", "place", "Word", "In", "Cross", "word", "(", "board", ",", "Ġword", ");", "<63>", "<64>", "System", ".", "out", ".", "println", "(\"", "Can", "Ġplace", "Ġthe", "Ġword", "Ġin", "Ġthe", "Ġcross", "word", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<65>", "}", "<66>", "<67>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"20": [[0, 10], [13, 8, 2]]}}
{"id": 86, "code": "class ProbabilityOfHeads {\npublic double probabilityOfHeads(double[] prob, int target) {\nint n = prob.length;\ndouble[][] p = new double[1+n][1+n];\np[0][0] = 1;\nfor(int i = 0; i< n; i++){\nfor(int j = 0; j<= n; j++){\np[i+1][j] += p[i][j]*(1-prob[i]);\nif(j < n)p[i+1][j+1] += p[i][j]*prob[i];\n}\n}\nreturn p[n][target];\n}\npublic static void main(String[] args) {\nProbabilityOfHeads probabilityOfHeads = new ProbabilityOfHeads();\n\ndouble[] prob = {0.5, 0.5, 0.5, 0.5};\nint target = 2;\n\ndouble result = probabilityOfHeads.probabilityOfHeads(prob, target);\n\nSystem.out.println(\"Probability of getting exactly \" + target + \" heads: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠProb", "ability", "Of", "Head", "s", "Ġ{", "<1>", "public", "Ġdouble", "Ġprobability", "Of", "Head", "s", "(", "double", "[]", "Ġprob", ",", "Ġint", "Ġtarget", ")", "Ġ{", "<2>", "int", "Ġn", "Ġ=", "Ġprob", ".", "length", ";", "<3>", "double", "[", "][", "]", "Ġp", "Ġ=", "Ġnew", "Ġdouble", "[", "1", "+", "n", "][", "1", "+", "n", "];", "<4>", "p", "[", "0", "][", "0", "]", "Ġ=", "Ġ1", ";", "<5>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "<", "Ġn", ";", "Ġi", "++", "){", "<6>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "<", "=", "Ġn", ";", "Ġj", "++", "){", "<7>", "p", "[", "i", "+", "1", "][", "j", "]", "Ġ+=", "Ġp", "[", "i", "][", "j", "]", "*", "(", "1", "-", "pro", "b", "[", "i", "]);", "<8>", "if", "(", "j", "Ġ<", "Ġn", ")", "p", "[", "i", "+", "1", "][", "j", "+", "1", "]", "Ġ+=", "Ġp", "[", "i", "][", "j", "]", "*", "pro", "b", "[", "i", "];", "<9>", "}", "<10>", "}", "<11>", "return", "Ġp", "[", "n", "][", "target", "];", "<12>", "}", "<13>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<14>", "Pro", "b", "ability", "Of", "Head", "s", "Ġprobability", "Of", "Head", "s", "Ġ=", "Ġnew", "ĠProb", "ability", "Of", "Head", "s", "();", "<15>", "<16>", "double", "[]", "Ġprob", "Ġ=", "Ġ{", "0", ".", "5", ",", "Ġ0", ".", "5", ",", "Ġ0", ".", "5", ",", "Ġ0", ".", "5", "};", "<17>", "int", "Ġtarget", "Ġ=", "Ġ2", ";", "<18>", "<19>", "double", "Ġresult", "Ġ=", "Ġprobability", "Of", "Head", "s", ".", "pro", "b", "ability", "Of", "Head", "s", "(", "pro", "b", ",", "Ġtarget", ");", "<20>", "<21>", "System", ".", "out", ".", "println", "(\"", "Pro", "b", "ability", "Ġof", "Ġgetting", "Ġexactly", "Ġ\"", "Ġ+", "Ġtarget", "Ġ+", "Ġ\"", "Ġheads", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<22>", "}", "<23>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"40": [[1, 14], [13, 14]]}}
{"id": 87, "code": "class Query {\n\n\nprivate int query(int pos) {\nint ans = 0;\nwhile (pos >= 1) {\nans += tree[pos];\npos -= (pos & (- pos));\n}\nreturn ans;\n}\n\nprivate void update(int pos) {\nwhile (pos <= 300000) {\ntree[pos] ++;\npos += (pos & (- pos));\n}\n}\n\nprivate int OFFSET = 100000;\nprivate int[] tree = new int[300010];\n\npublic long numberOfPairs(int[] nums1, int[] nums2, int diff) {\nlong ans = 0;\nfor (int i = 0;i < nums1.length;i ++) {\nint val = nums1[i] - nums2[i] + OFFSET;\nint expect = val + diff;\nans += query(expect);\nupdate(val);\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nQuery query = new Query();\n\nint[] nums1 = {3, 1, 4, 1, 5};\nint[] nums2 = {2, 7, 1, 8, 2};\nint diff = 1;\n\nlong result = query.numberOfPairs(nums1, nums2, diff);\n\nSystem.out.println(\"Number of pairs: \" + result);\n}\n\n}", "code_tokens": ["<0>", "class", "ĠQuery", "Ġ{", "<1>", "<2>", "<3>", "private", "Ġint", "Ġquery", "(", "int", "Ġpos", ")", "Ġ{", "<4>", "int", "Ġans", "Ġ=", "Ġ0", ";", "<5>", "while", "Ġ(", "pos", "Ġ>=", "Ġ1", ")", "Ġ{", "<6>", "ans", "Ġ+=", "Ġtree", "[", "pos", "];", "<7>", "pos", "Ġ-=", "Ġ(", "pos", "Ġ&", "Ġ(-", "Ġpos", "));", "<8>", "}", "<9>", "return", "Ġans", ";", "<10>", "}", "<11>", "<12>", "private", "Ġvoid", "Ġupdate", "(", "int", "Ġpos", ")", "Ġ{", "<13>", "while", "Ġ(", "pos", "Ġ<=", "Ġ300", "000", ")", "Ġ{", "<14>", "tree", "[", "pos", "]", "Ġ++", ";", "<15>", "pos", "Ġ+=", "Ġ(", "pos", "Ġ&", "Ġ(-", "Ġpos", "));", "<16>", "}", "<17>", "}", "<18>", "<19>", "private", "Ġint", "ĠOF", "FS", "ET", "Ġ=", "Ġ100", "000", ";", "<20>", "private", "Ġint", "[]", "Ġtree", "Ġ=", "Ġnew", "Ġint", "[", "300", "010", "];", "<21>", "<22>", "public", "Ġlong", "Ġnumber", "Of", "P", "airs", "(", "int", "[]", "Ġnum", "s", "1", ",", "Ġint", "[]", "Ġnum", "s", "2", ",", "Ġint", "Ġdiff", ")", "Ġ{", "<23>", "long", "Ġans", "Ġ=", "Ġ0", ";", "<24>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġnum", "s", "1", ".", "length", ";", "i", "Ġ++", ")", "Ġ{", "<25>", "int", "Ġval", "Ġ=", "Ġnum", "s", "1", "[", "i", "]", "Ġ-", "Ġnum", "s", "2", "[", "i", "]", "Ġ+", "ĠOF", "FS", "ET", ";", "<26>", "int", "Ġexpect", "Ġ=", "Ġval", "Ġ+", "Ġdiff", ";", "<27>", "ans", "Ġ+=", "Ġquery", "(", "ex", "pect", ");", "<28>", "update", "(", "val", ");", "<29>", "}", "<30>", "return", "Ġans", ";", "<31>", "}", "<32>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<33>", "Query", "Ġquery", "Ġ=", "Ġnew", "ĠQuery", "();", "<34>", "<35>", "int", "[]", "Ġnum", "s", "1", "Ġ=", "Ġ{", "3", ",", "Ġ1", ",", "Ġ4", ",", "Ġ1", ",", "Ġ5", "};", "<36>", "int", "[]", "Ġnum", "s", "2", "Ġ=", "Ġ{", "2", ",", "Ġ7", ",", "Ġ1", ",", "Ġ8", ",", "Ġ2", "};", "<37>", "int", "Ġdiff", "Ġ=", "Ġ1", ";", "<38>", "<39>", "long", "Ġresult", "Ġ=", "Ġquery", ".", "number", "Of", "P", "airs", "(", "n", "ums", "1", ",", "Ġnum", "s", "2", ",", "Ġdiff", ");", "<40>", "<41>", "System", ".", "out", ".", "println", "(\"", "Number", "Ġof", "Ġpairs", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<42>", "}", "<43>", "<44>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"52": [[10, 7, 10, 15], [9]]}}
{"id": 88, "code": "import java.util.*;\n\n\n\n\nclass ReplaceValueInTree {\npublic static class TreeNode {\nint val;\nTreeNode left;\nTreeNode right;\nTreeNode(int x) { val = x; }\n}\n\npublic TreeNode replaceValueInTree(TreeNode root) {\nHashMap<TreeNode, Integer> map = new HashMap<>();\nHashMap<Integer, Integer> map2 = new HashMap<>();\nreplaceValueInTree(root, null, 0, map, map2);\nreplaceValueInTree(root, 0, null, map, map2);\nreturn root;\n}\n\nprivate void replaceValueInTree(TreeNode root, TreeNode parent, int depth, HashMap<TreeNode, Integer> map,\nHashMap<Integer, Integer> map2) {\nif (root != null) {\nif (parent != null) {\nmap.put(parent, map.getOrDefault(parent, 0) + root.val);\n}\nmap2.put(depth, map2.getOrDefault(depth, 0) + root.val);\nreplaceValueInTree(root.left, root, depth + 1, map, map2);\nreplaceValueInTree(root.right, root, depth + 1, map, map2);\n}\n}\n\nprivate void replaceValueInTree(TreeNode root, int depth, TreeNode parent, HashMap<TreeNode, Integer> map,\nHashMap<Integer, Integer> map2) {\nif (root != null) {\nroot.val = parent == null ? 0 : map2.get(depth) - map.get(parent);\nreplaceValueInTree(root.left, depth + 1, root, map, map2);\nreplaceValueInTree(root.right, depth + 1, root, map, map2);\n}\n}\npublic static void main(String[] args) {\n\nReplaceValueInTree.TreeNode root = new ReplaceValueInTree.TreeNode(1);\nroot.left = new ReplaceValueInTree.TreeNode(2);\nroot.right = new ReplaceValueInTree.TreeNode(3);\nroot.left.left = new ReplaceValueInTree.TreeNode(4);\nroot.left.right = new ReplaceValueInTree.TreeNode(5);\nroot.right.right = new ReplaceValueInTree.TreeNode(6);\n\nReplaceValueInTree replaceValueInTree = new ReplaceValueInTree();\nReplaceValueInTree.TreeNode newRoot = replaceValueInTree.replaceValueInTree(root);\n\n\n}\n\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "<3>", "<4>", "<5>", "class", "ĠReplace", "Value", "In", "Tree", "Ġ{", "<6>", "public", "Ġstatic", "Ġclass", "ĠTree", "Node", "Ġ{", "<7>", "int", "Ġval", ";", "<8>", "Tree", "Node", "Ġleft", ";", "<9>", "Tree", "Node", "Ġright", ";", "<10>", "Tree", "Node", "(", "int", "Ġx", ")", "Ġ{", "Ġval", "Ġ=", "Ġx", ";", "Ġ}", "<11>", "}", "<12>", "<13>", "public", "ĠTree", "Node", "Ġreplace", "Value", "In", "Tree", "(", "Tree", "Node", "Ġroot", ")", "Ġ{", "<14>", "Hash", "Map", "<", "Tree", "Node", ",", "ĠInteger", ">", "Ġmap", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<15>", "Hash", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġmap", "2", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<16>", "replace", "Value", "In", "Tree", "(", "root", ",", "Ġnull", ",", "Ġ0", ",", "Ġmap", ",", "Ġmap", "2", ");", "<17>", "replace", "Value", "In", "Tree", "(", "root", ",", "Ġ0", ",", "Ġnull", ",", "Ġmap", ",", "Ġmap", "2", ");", "<18>", "return", "Ġroot", ";", "<19>", "}", "<20>", "<21>", "private", "Ġvoid", "Ġreplace", "Value", "In", "Tree", "(", "Tree", "Node", "Ġroot", ",", "ĠTree", "Node", "Ġparent", ",", "Ġint", "Ġdepth", ",", "ĠHash", "Map", "<", "Tree", "Node", ",", "ĠInteger", ">", "Ġmap", ",", "<22>", "Hash", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġmap", "2", ")", "Ġ{", "<23>", "if", "Ġ(", "root", "Ġ!=", "Ġnull", ")", "Ġ{", "<24>", "if", "Ġ(", "parent", "Ġ!=", "Ġnull", ")", "Ġ{", "<25>", "map", ".", "put", "(", "parent", ",", "Ġmap", ".", "get", "Or", "Default", "(", "parent", ",", "Ġ0", ")", "Ġ+", "Ġroot", ".", "val", ");", "<26>", "}", "<27>", "map", "2", ".", "put", "(", "depth", ",", "Ġmap", "2", ".", "get", "Or", "Default", "(", "depth", ",", "Ġ0", ")", "Ġ+", "Ġroot", ".", "val", ");", "<28>", "replace", "Value", "In", "Tree", "(", "root", ".", "left", ",", "Ġroot", ",", "Ġdepth", "Ġ+", "Ġ1", ",", "Ġmap", ",", "Ġmap", "2", ");", "<29>", "replace", "Value", "In", "Tree", "(", "root", ".", "right", ",", "Ġroot", ",", "Ġdepth", "Ġ+", "Ġ1", ",", "Ġmap", ",", "Ġmap", "2", ");", "<30>", "}", "<31>", "}", "<32>", "<33>", "private", "Ġvoid", "Ġreplace", "Value", "In", "Tree", "(", "Tree", "Node", "Ġroot", ",", "Ġint", "Ġdepth", ",", "ĠTree", "Node", "Ġparent", ",", "ĠHash", "Map", "<", "Tree", "Node", ",", "ĠInteger", ">", "Ġmap", ",", "<34>", "Hash", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġmap", "2", ")", "Ġ{", "<35>", "if", "Ġ(", "root", "Ġ!=", "Ġnull", ")", "Ġ{", "<36>", "root", ".", "val", "Ġ=", "Ġparent", "Ġ==", "Ġnull", "Ġ?", "Ġ0", "Ġ:", "Ġmap", "2", ".", "get", "(", "depth", ")", "Ġ-", "Ġmap", ".", "get", "(", "parent", ");", "<37>", "replace", "Value", "In", "Tree", "(", "root", ".", "left", ",", "Ġdepth", "Ġ+", "Ġ1", ",", "Ġroot", ",", "Ġmap", ",", "Ġmap", "2", ");", "<38>", "replace", "Value", "In", "Tree", "(", "root", ".", "right", ",", "Ġdepth", "Ġ+", "Ġ1", ",", "Ġroot", ",", "Ġmap", ",", "Ġmap", "2", ");", "<39>", "}", "<40>", "}", "<41>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<42>", "<43>", "Re", "place", "Value", "In", "Tree", ".", "Tree", "Node", "Ġroot", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", ".", "Tree", "Node", "(", "1", ");", "<44>", "root", ".", "left", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", ".", "Tree", "Node", "(", "2", ");", "<45>", "root", ".", "right", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", ".", "Tree", "Node", "(", "3", ");", "<46>", "root", ".", "left", ".", "left", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", ".", "Tree", "Node", "(", "4", ");", "<47>", "root", ".", "left", ".", "right", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", ".", "Tree", "Node", "(", "5", ");", "<48>", "root", ".", "right", ".", "right", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", ".", "Tree", "Node", "(", "6", ");", "<49>", "<50>", "Re", "place", "Value", "In", "Tree", "Ġreplace", "Value", "In", "Tree", "Ġ=", "Ġnew", "ĠReplace", "Value", "In", "Tree", "();", "<51>", "Re", "place", "Value", "In", "Tree", ".", "Tree", "Node", "Ġnew", "Root", "Ġ=", "Ġreplace", "Value", "In", "Tree", ".", "replace", "Value", "In", "Tree", "(", "root", ");", "<52>", "<53>", "<54>", "}", "<55>", "<56>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"55": [[10], [9, 13]]}}
{"id": 89, "code": "import java.util.*;\npublic class ReplaceWords {\nclass TrieNode\n{\nTrieNode[] next=new TrieNode[26];\nString word;\n}\nTrieNode buildTrie(List<String> words)\n{\nTrieNode root=new TrieNode();\nfor (String w:words)\n{\nTrieNode p=root;\nfor (char c:w.toCharArray())\n{\nif (p.next[c-97]==null) p.next[c-97]=new TrieNode();\np=p.next[c-97];\n}\np.word=w;\n}\nreturn root;\n}\nString find(TrieNode now,String s)\n{\nint l=s.length();\nfor (int i=0;i<l;i++)\n{\nchar c=s.charAt(i);\nif (now.next[c-97]==null) return \"\"; else now=now.next[c-97];\nif (now.word!=null) return now.word;\n}\nreturn \"\";\n}\npublic String replaceWords(List<String> dict, String sentence) {\nTrieNode root=buildTrie(dict);\nString[] ss=sentence.split(\" \");\nStringBuilder ans=new StringBuilder();\nboolean bo=false;\nfor (String s:ss)\n{\nString t=find(root,s);\nif (t==\"\") t=s;\nif (bo) ans.append(\" \");\nans.append(t);\nbo=true;\n}\nreturn ans+\"\";\n}\npublic static void main(String[] args) {\nReplaceWords replaceWords = new ReplaceWords();\n\nList<String> dict = Arrays.asList(\"cat\", \"bat\", \"rat\");\nString sentence = \"the cattle was rattled by the battery\";\n\nString result = replaceWords.replaceWords(dict, sentence);\n\nSystem.out.println(\"Replaced sentence: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "public", "Ġclass", "ĠReplace", "Words", "Ġ{", "<2>", "class", "ĠT", "rie", "Node", "<3>", "{", "<4>", "T", "rie", "Node", "[]", "Ġnext", "=", "new", "ĠT", "rie", "Node", "[", "26", "];", "<5>", "String", "Ġword", ";", "<6>", "}", "<7>", "T", "rie", "Node", "Ġbuild", "T", "rie", "(", "List", "<", "String", ">", "Ġwords", ")", "<8>", "{", "<9>", "T", "rie", "Node", "Ġroot", "=", "new", "ĠT", "rie", "Node", "();", "<10>", "for", "Ġ(", "String", "Ġw", ":", "words", ")", "<11>", "{", "<12>", "T", "rie", "Node", "Ġp", "=", "root", ";", "<13>", "for", "Ġ(", "char", "Ġc", ":", "w", ".", "to", "Char", "Array", "())", "<14>", "{", "<15>", "if", "Ġ(", "p", ".", "next", "[", "c", "-", "97", "]", "==", "null", ")", "Ġp", ".", "next", "[", "c", "-", "97", "]=", "new", "ĠT", "rie", "Node", "();", "<16>", "p", "=", "p", ".", "next", "[", "c", "-", "97", "];", "<17>", "}", "<18>", "p", ".", "word", "=", "w", ";", "<19>", "}", "<20>", "return", "Ġroot", ";", "<21>", "}", "<22>", "String", "Ġfind", "(", "T", "rie", "Node", "Ġnow", ",", "String", "Ġs", ")", "<23>", "{", "<24>", "int", "Ġl", "=", "s", ".", "length", "();", "<25>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "i", "<", "l", ";", "i", "++)", "<26>", "{", "<27>", "char", "Ġc", "=", "s", ".", "char", "At", "(", "i", ");", "<28>", "if", "Ġ(", "now", ".", "next", "[", "c", "-", "97", "]", "==", "null", ")", "Ġreturn", "Ġ\"", "\";", "Ġelse", "Ġnow", "=", "now", ".", "next", "[", "c", "-", "97", "];", "<29>", "if", "Ġ(", "now", ".", "word", "!", "=", "null", ")", "Ġreturn", "Ġnow", ".", "word", ";", "<30>", "}", "<31>", "return", "Ġ\"", "\";", "<32>", "}", "<33>", "public", "ĠString", "Ġreplace", "Words", "(", "List", "<", "String", ">", "Ġdict", ",", "ĠString", "Ġsentence", ")", "Ġ{", "<34>", "T", "rie", "Node", "Ġroot", "=", "build", "T", "rie", "(", "dict", ");", "<35>", "String", "[]", "Ġss", "=", "sent", "ence", ".", "split", "(\"", "Ġ\"", ");", "<36>", "String", "Builder", "Ġans", "=", "new", "ĠString", "Builder", "();", "<37>", "bo", "olean", "Ġbo", "=", "false", ";", "<38>", "for", "Ġ(", "String", "Ġs", ":", "ss", ")", "<39>", "{", "<40>", "String", "Ġt", "=", "find", "(", "root", ",", "s", ");", "<41>", "if", "Ġ(", "t", "==", "\"", "\")", "Ġt", "=", "s", ";", "<42>", "if", "Ġ(", "bo", ")", "Ġans", ".", "append", "(\"", "Ġ\"", ");", "<43>", "ans", ".", "append", "(", "t", ");", "<44>", "bo", "=", "true", ";", "<45>", "}", "<46>", "return", "Ġans", "+", "\"", "\";", "<47>", "}", "<48>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<49>", "Re", "place", "Words", "Ġreplace", "Words", "Ġ=", "Ġnew", "ĠReplace", "Words", "();", "<50>", "<51>", "List", "<", "String", ">", "Ġdict", "Ġ=", "ĠAr", "rays", ".", "as", "List", "(\"", "cat", "\",", "Ġ\"", "bat", "\",", "Ġ\"", "rat", "\");", "<52>", "String", "Ġsentence", "Ġ=", "Ġ\"", "the", "Ġcattle", "Ġwas", "Ġrattled", "Ġby", "Ġthe", "Ġbattery", "\";", "<53>", "<54>", "String", "Ġresult", "Ġ=", "Ġreplace", "Words", ".", "replace", "Words", "(", "dict", ",", "Ġsentence", ");", "<55>", "<56>", "System", ".", "out", ".", "println", "(\"", "Re", "placed", "Ġsentence", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<57>", "}", "<58>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"26": [[14], [15]]}}
{"id": 90, "code": "import java.util.*;\nclass RobotWithString {\n\npublic String robotWithString(String s) {\nint[] min = new int[s.length()];\nfor (int i = s.length() - 1; i > 0; i--) {\nmin[i - 1] = Math.min(s.charAt(i), i < s.length() - 1 ? min[i] : 'z');\n}\nStringBuilder sb = new StringBuilder();\nArrayDeque<Character> deque = new ArrayDeque<>();\nfor (int i = 0; i < s.length(); i++) {\nfor (deque.push(s.charAt(i)); !deque.isEmpty() && deque.peek() <= min[i];) {\nsb.append(deque.pop());\n}\n}\nwhile (!deque.isEmpty()) {\nsb.append(deque.pop());\n}\nreturn sb.toString();\n}\npublic static void main(String[] args) {\nRobotWithString robotWithString = new RobotWithString();\n\nString s = \"bac\";\n\nString result = robotWithString.robotWithString(s);\n\nSystem.out.println(\"Resulting string: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠRobot", "With", "String", "Ġ{", "<2>", "<3>", "public", "ĠString", "Ġrobot", "With", "String", "(", "String", "Ġs", ")", "Ġ{", "<4>", "int", "[]", "Ġmin", "Ġ=", "Ġnew", "Ġint", "[", "s", ".", "length", "()", "];", "<5>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġs", ".", "length", "()", "Ġ-", "Ġ1", ";", "Ġi", "Ġ>", "Ġ0", ";", "Ġi", "--", ")", "Ġ{", "<6>", "min", "[", "i", "Ġ-", "Ġ1", "]", "Ġ=", "ĠMath", ".", "min", "(", "s", ".", "char", "At", "(", "i", "),", "Ġi", "Ġ<", "Ġs", ".", "length", "()", "Ġ-", "Ġ1", "Ġ?", "Ġmin", "[", "i", "]", "Ġ:", "Ġ'", "z", "');", "<7>", "}", "<8>", "String", "Builder", "Ġs", "b", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<9>", "Array", "De", "que", "<", "Character", ">", "Ġde", "que", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<10>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġs", ".", "length", "();", "Ġi", "++)", "Ġ{", "<11>", "for", "Ġ(", "de", "que", ".", "push", "(", "s", ".", "char", "At", "(", "i", "));", "Ġ!", "de", "que", ".", "is", "Empty", "()", "Ġ&&", "Ġde", "que", ".", "pe", "ek", "()", "Ġ<=", "Ġmin", "[", "i", "];", ")", "Ġ{", "<12>", "sb", ".", "append", "(", "de", "que", ".", "pop", "());", "<13>", "}", "<14>", "}", "<15>", "while", "Ġ(!", "de", "que", ".", "is", "Empty", "())", "Ġ{", "<16>", "sb", ".", "append", "(", "de", "que", ".", "pop", "());", "<17>", "}", "<18>", "return", "Ġs", "b", ".", "to", "String", "();", "<19>", "}", "<20>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<21>", "Rob", "ot", "With", "String", "Ġrobot", "With", "String", "Ġ=", "Ġnew", "ĠRobot", "With", "String", "();", "<22>", "<23>", "String", "Ġs", "Ġ=", "Ġ\"", "b", "ac", "\";", "<24>", "<25>", "String", "Ġresult", "Ġ=", "Ġrobot", "With", "String", ".", "ro", "bot", "With", "String", "(", "s", ");", "<26>", "<27>", "System", ".", "out", ".", "println", "(\"", "Result", "ing", "Ġstring", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<28>", "}", "<29>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"39": [[5, 4, 4], [12]]}}
{"id": 91, "code": "import java.util.*;\nclass RotateTheBox {\npublic char[][] rotateTheBox(char[][] box) {\nint n = box.length;\nint m = box[0].length;\nchar[][] ans = new char[m][n];\nfor (int i = 0; i < n; ++i) {\nfor (int j = 0; j < m; ++j) {\nans[j][i] = box[n-i-1][j];\n}\n}\nfor (int j = 0; j < n; ++j) {\nint ns = m-1;\nfor (int i = m-1; i >= 0; --i) {\nif (ans[i][j]=='*') {\nns = i-1;\n} else if (ans[i][j]=='#') {\nans[i][j] = '.';\nans[ns][j] = '#';\n--ns;\n}\n}\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nRotateTheBox rotateTheBox = new RotateTheBox();\n\nchar[][] box = {\n{'#', '.', '#'},\n{'#', '#', '*'},\n{'#', '.', '.'}\n};\n\nchar[][] result = rotateTheBox.rotateTheBox(box);\n\nSystem.out.println(\"Rotated box:\");\nfor (char[] row : result) {\nSystem.out.println(Arrays.toString(row));\n}\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠRot", "ate", "The", "Box", "Ġ{", "<2>", "public", "Ġchar", "[", "][", "]", "Ġrotate", "The", "Box", "(", "char", "[", "][", "]", "Ġbox", ")", "Ġ{", "<3>", "int", "Ġn", "Ġ=", "Ġbox", ".", "length", ";", "<4>", "int", "Ġm", "Ġ=", "Ġbox", "[", "0", "].", "length", ";", "<5>", "char", "[", "][", "]", "Ġans", "Ġ=", "Ġnew", "Ġchar", "[", "m", "][", "n", "];", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġn", ";", "Ġ++", "i", ")", "Ġ{", "<7>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġm", ";", "Ġ++", "j", ")", "Ġ{", "<8>", "ans", "[", "j", "][", "i", "]", "Ġ=", "Ġbox", "[", "n", "-", "i", "-", "1", "][", "j", "];", "<9>", "}", "<10>", "}", "<11>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ0", ";", "Ġj", "Ġ<", "Ġn", ";", "Ġ++", "j", ")", "Ġ{", "<12>", "int", "Ġns", "Ġ=", "Ġm", "-", "1", ";", "<13>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġm", "-", "1", ";", "Ġi", "Ġ>=", "Ġ0", ";", "Ġ--", "i", ")", "Ġ{", "<14>", "if", "Ġ(", "ans", "[", "i", "][", "j", "]", "==", "'", "*", "')", "Ġ{", "<15>", "ns", "Ġ=", "Ġi", "-", "1", ";", "<16>", "}", "Ġelse", "Ġif", "Ġ(", "ans", "[", "i", "][", "j", "]", "==", "'", "#", "')", "Ġ{", "<17>", "ans", "[", "i", "][", "j", "]", "Ġ=", "Ġ'", ".'", ";", "<18>", "ans", "[", "ns", "][", "j", "]", "Ġ=", "Ġ'", "#", "';", "<19>", "--", "ns", ";", "<20>", "}", "<21>", "}", "<22>", "}", "<23>", "return", "Ġans", ";", "<24>", "}", "<25>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<26>", "Rot", "ate", "The", "Box", "Ġrotate", "The", "Box", "Ġ=", "Ġnew", "ĠRot", "ate", "The", "Box", "();", "<27>", "<28>", "char", "[", "][", "]", "Ġbox", "Ġ=", "Ġ{", "<29>", "{", "'", "#", "',", "Ġ'", ".'", ",", "Ġ'", "#", "'", "},", "<30>", "{", "'", "#", "',", "Ġ'", "#", "',", "Ġ'", "*", "'", "},", "<31>", "{", "'", "#", "',", "Ġ'", ".'", ",", "Ġ'", ".'", "}", "<32>", "};", "<33>", "<34>", "char", "[", "][", "]", "Ġresult", "Ġ=", "Ġrotate", "The", "Box", ".", "rot", "ate", "The", "Box", "(", "box", ");", "<35>", "<36>", "System", ".", "out", ".", "println", "(\"", "Rot", "ated", "Ġbox", ":\"", ");", "<37>", "for", "Ġ(", "char", "[]", "Ġrow", "Ġ:", "Ġresult", ")", "Ġ{", "<38>", "System", ".", "out", ".", "println", "(", "Ar", "rays", ".", "to", "String", "(", "row", "));", "<39>", "}", "<40>", "}", "<41>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"32": [[1], [15, 1, 1, 10]]}}
{"id": 92, "code": "class SellingWood {\n\npublic long sellingWood(int m, int n, int[][] prices) {\nlong[][] map = new long[m + 1][n + 1], dp = new long[m + 1][n + 1];\nfor (int[] price : prices) {\nmap[price[0]][price[1]] = price[2];\n}\nfor (int i = 1; i <= m; i++) {\nfor (int j = 1; j <= n; j++) {\ndp[i][j] = map[i][j];\nfor (int k = 1; k < i; k++) {\ndp[i][j] = Math.max(dp[i][j], dp[k][j] + dp[i - k][j]);\n}\nfor (int k = 1; k < j; k++) {\ndp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[i][j - k]);\n}\n}\n}\nreturn dp[m][n];\n}\npublic static void main(String[] args) {\nSellingWood sellingWood = new SellingWood();\n\nint m = 3;\nint n = 5;\nint[][] prices = {\n{1, 4, 2},\n{2, 2, 7},\n{2, 1, 3}\n};\n\nlong result = sellingWood.sellingWood(m, n, prices);\n\nSystem.out.println(\"Maximum profit from selling wood: \" + result);\n}\n}", "code_tokens": ["<0>", "class", "ĠSelling", "Wood", "Ġ{", "<1>", "<2>", "public", "Ġlong", "Ġselling", "Wood", "(", "int", "Ġm", ",", "Ġint", "Ġn", ",", "Ġint", "[", "][", "]", "Ġprices", ")", "Ġ{", "<3>", "long", "[", "][", "]", "Ġmap", "Ġ=", "Ġnew", "Ġlong", "[", "m", "Ġ+", "Ġ1", "][", "n", "Ġ+", "Ġ1", "],", "Ġd", "p", "Ġ=", "Ġnew", "Ġlong", "[", "m", "Ġ+", "Ġ1", "][", "n", "Ġ+", "Ġ1", "];", "<4>", "for", "Ġ(", "int", "[]", "Ġprice", "Ġ:", "Ġprices", ")", "Ġ{", "<5>", "map", "[", "price", "[", "0", "]", "][", "price", "[", "1", "]]", "Ġ=", "Ġprice", "[", "2", "];", "<6>", "}", "<7>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<=", "Ġm", ";", "Ġi", "++)", "Ġ{", "<8>", "for", "Ġ(", "int", "Ġj", "Ġ=", "Ġ1", ";", "Ġj", "Ġ<=", "Ġn", ";", "Ġj", "++)", "Ġ{", "<9>", "dp", "[", "i", "][", "j", "]", "Ġ=", "Ġmap", "[", "i", "][", "j", "];", "<10>", "for", "Ġ(", "int", "Ġk", "Ġ=", "Ġ1", ";", "Ġk", "Ġ<", "Ġi", ";", "Ġk", "++)", "Ġ{", "<11>", "dp", "[", "i", "][", "j", "]", "Ġ=", "ĠMath", ".", "max", "(", "dp", "[", "i", "][", "j", "],", "Ġd", "p", "[", "k", "][", "j", "]", "Ġ+", "Ġd", "p", "[", "i", "Ġ-", "Ġk", "][", "j", "]);", "<12>", "}", "<13>", "for", "Ġ(", "int", "Ġk", "Ġ=", "Ġ1", ";", "Ġk", "Ġ<", "Ġj", ";", "Ġk", "++)", "Ġ{", "<14>", "dp", "[", "i", "][", "j", "]", "Ġ=", "ĠMath", ".", "max", "(", "dp", "[", "i", "][", "j", "],", "Ġd", "p", "[", "i", "][", "k", "]", "Ġ+", "Ġd", "p", "[", "i", "][", "j", "Ġ-", "Ġk", "]);", "<15>", "}", "<16>", "}", "<17>", "}", "<18>", "return", "Ġd", "p", "[", "m", "][", "n", "];", "<19>", "}", "<20>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<21>", "S", "elling", "Wood", "Ġselling", "Wood", "Ġ=", "Ġnew", "ĠSelling", "Wood", "();", "<22>", "<23>", "int", "Ġm", "Ġ=", "Ġ3", ";", "<24>", "int", "Ġn", "Ġ=", "Ġ5", ";", "<25>", "int", "[", "][", "]", "Ġprices", "Ġ=", "Ġ{", "<26>", "{", "1", ",", "Ġ4", ",", "Ġ2", "},", "<27>", "{", "2", ",", "Ġ2", ",", "Ġ7", "},", "<28>", "{", "2", ",", "Ġ1", ",", "Ġ3", "}", "<29>", "};", "<30>", "<31>", "long", "Ġresult", "Ġ=", "Ġselling", "Wood", ".", "selling", "Wood", "(", "m", ",", "Ġn", ",", "Ġprices", ");", "<32>", "<33>", "System", ".", "out", ".", "println", "(\"", "Maximum", "Ġprofit", "Ġfrom", "Ġselling", "Ġwood", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<34>", "}", "<35>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"84": [[12, 9], [0]]}}
{"id": 93, "code": "import java.util.*;\nimport java.math.*;\n\npublic class SequenceReconstruction {\n\npublic boolean sequenceReconstruction(int[] org, int[][] seqs) {\nMap<Integer, List<Integer>> g = new HashMap<>();\nMap<Integer, Integer> in = new HashMap<>();\nfor (int[] seq : seqs)\nfor (int i : seq)\nin.putIfAbsent(i, 0);\nfor (int[] seq : seqs)\nfor (int i = 1; i < seq.length; i++) {\nint u = seq[i - 1], v = seq[i];\ng.putIfAbsent(u, new ArrayList<>());\ng.get(u).add(v);\nin.put(v, in.get(v) + 1);\n}\nif (org.length != in.size()) return false;\n\nMap<Integer, Integer> dist = new HashMap<>();\nint[] queue = new int[in.size() + 10];\nint head = 0, tail = 0;\nfor (int u : in.keySet())\nif (in.get(u) == 0) {\ndist.put(u, 0);\nqueue[tail++] = u;\n}\nif (tail > 1) return false;\n\n\nList<Integer> topSeq = new ArrayList<>();\nwhile (head < tail) {\nint u = queue[head++], d = dist.get(u);\ntopSeq.add(u);\nif (head < tail && d == dist.get(queue[head])) return false;\n\nif (g.containsKey(u))\nfor (int v : g.get(u)) {\nin.put(v, in.get(v) - 1);\nif (in.get(v) == 0) {\nqueue[tail++] = v;\ndist.put(v, d + 1);\n}\n}\n}\n\nif (topSeq.size() != org.length) return false;\nfor (int i = 0; i < org.length; i++)\nif (org[i] != topSeq.get(i)) return false;\nreturn true;\n}\n\npublic static void main(String[] args) {\nSequenceReconstruction sol = new SequenceReconstruction();\n\nint[] ori = {4, 1, 5, 2, 6, 3};\nint[][] seqs = {\n{5, 2, 6, 3},\n{4, 1, 5, 2},\n};\n\n\n\nSystem.out.println(sol.sequenceReconstruction(ori, seqs));\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "import", "Ġjava", ".", "math", ".*", ";", "<2>", "<3>", "public", "Ġclass", "ĠSequence", "Rec", "on", "struction", "Ġ{", "<4>", "<5>", "public", "Ġboolean", "Ġsequence", "Rec", "on", "struction", "(", "int", "[]", "Ġorg", ",", "Ġint", "[", "][", "]", "Ġseq", "s", ")", "Ġ{", "<6>", "Map", "<", "Integer", ",", "ĠList", "<", "Integer", ">>", "Ġg", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<7>", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġin", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<8>", "for", "Ġ(", "int", "[]", "Ġseq", "Ġ:", "Ġseq", "s", ")", "<9>", "for", "Ġ(", "int", "Ġi", "Ġ:", "Ġseq", ")", "<10>", "in", ".", "put", "If", "Abs", "ent", "(", "i", ",", "Ġ0", ");", "<11>", "for", "Ġ(", "int", "[]", "Ġseq", "Ġ:", "Ġseq", "s", ")", "<12>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ1", ";", "Ġi", "Ġ<", "Ġseq", ".", "length", ";", "Ġi", "++)", "Ġ{", "<13>", "int", "Ġu", "Ġ=", "Ġseq", "[", "i", "Ġ-", "Ġ1", "],", "Ġv", "Ġ=", "Ġseq", "[", "i", "];", "<14>", "g", ".", "put", "If", "Abs", "ent", "(", "u", ",", "Ġnew", "ĠArray", "List", "<", ">", "());", "<15>", "g", ".", "get", "(", "u", ").", "add", "(", "v", ");", "<16>", "in", ".", "put", "(", "v", ",", "Ġin", ".", "get", "(", "v", ")", "Ġ+", "Ġ1", ");", "<17>", "}", "<18>", "if", "Ġ(", "org", ".", "length", "Ġ!=", "Ġin", ".", "size", "())", "Ġreturn", "Ġfalse", ";", "<19>", "<20>", "Map", "<", "Integer", ",", "ĠInteger", ">", "Ġdist", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<21>", "int", "[]", "Ġqueue", "Ġ=", "Ġnew", "Ġint", "[", "in", ".", "size", "()", "Ġ+", "Ġ10", "];", "<22>", "int", "Ġhead", "Ġ=", "Ġ0", ",", "Ġtail", "Ġ=", "Ġ0", ";", "<23>", "for", "Ġ(", "int", "Ġu", "Ġ:", "Ġin", ".", "key", "Set", "())", "<24>", "if", "Ġ(", "in", ".", "get", "(", "u", ")", "Ġ==", "Ġ0", ")", "Ġ{", "<25>", "dist", ".", "put", "(", "u", ",", "Ġ0", ");", "<26>", "queue", "[", "tail", "++", "]", "Ġ=", "Ġu", ";", "<27>", "}", "<28>", "if", "Ġ(", "tail", "Ġ>", "Ġ1", ")", "Ġreturn", "Ġfalse", ";", "<29>", "<30>", "<31>", "List", "<", "Integer", ">", "Ġtop", "Se", "q", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<32>", "while", "Ġ(", "head", "Ġ<", "Ġtail", ")", "Ġ{", "<33>", "int", "Ġu", "Ġ=", "Ġqueue", "[", "head", "++", "],", "Ġd", "Ġ=", "Ġdist", ".", "get", "(", "u", ");", "<34>", "top", "Se", "q", ".", "add", "(", "u", ");", "<35>", "if", "Ġ(", "head", "Ġ<", "Ġtail", "Ġ&&", "Ġd", "Ġ==", "Ġdist", ".", "get", "(", "queue", "[", "head", "]", "))", "Ġreturn", "Ġfalse", ";", "<36>", "<37>", "if", "Ġ(", "g", ".", "cont", "ains", "Key", "(", "u", "))", "<38>", "for", "Ġ(", "int", "Ġv", "Ġ:", "Ġg", ".", "get", "(", "u", "))", "Ġ{", "<39>", "in", ".", "put", "(", "v", ",", "Ġin", ".", "get", "(", "v", ")", "Ġ-", "Ġ1", ");", "<40>", "if", "Ġ(", "in", ".", "get", "(", "v", ")", "Ġ==", "Ġ0", ")", "Ġ{", "<41>", "queue", "[", "tail", "++", "]", "Ġ=", "Ġv", ";", "<42>", "dist", ".", "put", "(", "v", ",", "Ġd", "Ġ+", "Ġ1", ");", "<43>", "}", "<44>", "}", "<45>", "}", "<46>", "<47>", "if", "Ġ(", "top", "Se", "q", ".", "size", "()", "Ġ!=", "Ġorg", ".", "length", ")", "Ġreturn", "Ġfalse", ";", "<48>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġorg", ".", "length", ";", "Ġi", "++)", "<49>", "if", "Ġ(", "org", "[", "i", "]", "Ġ!=", "Ġtop", "Se", "q", ".", "get", "(", "i", "))", "Ġreturn", "Ġfalse", ";", "<50>", "return", "Ġtrue", ";", "<51>", "}", "<52>", "<53>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<54>", "Sequ", "ence", "Rec", "on", "struction", "Ġsol", "Ġ=", "Ġnew", "ĠSequence", "Rec", "on", "struction", "();", "<55>", "<56>", "int", "[]", "Ġori", "Ġ=", "Ġ{", "4", ",", "Ġ1", ",", "Ġ5", ",", "Ġ2", ",", "Ġ6", ",", "Ġ3", "};", "<57>", "int", "[", "][", "]", "Ġseq", "s", "Ġ=", "Ġ{", "<58>", "{", "5", ",", "Ġ2", ",", "Ġ6", ",", "Ġ3", "},", "<59>", "{", "4", ",", "Ġ1", ",", "Ġ5", ",", "Ġ2", "},", "<60>", "};", "<61>", "<62>", "<63>", "<64>", "System", ".", "out", ".", "println", "(", "sol", ".", "sequence", "Rec", "on", "struction", "(", "ori", ",", "Ġseq", "s", "));", "<65>", "}", "<66>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"38": [[10], [15]]}}
{"id": 94, "code": "import java.util.*;\n\nclass ShortestPathBinaryMatrix {\npublic int shortestPathBinaryMatrix(int[][] a) {\nint n = a.length;\nif(a[0][0] == 1 || a[n-1][n-1] == 1)return -1;\nint[][] d = new int[n][n];\nfor(int i = 0;i < n;i++){\nArrays.fill(d[i], 999999999);\n}\nd[0][0] = 0;\nQueue<int[]> q = new ArrayDeque<>();\nq.add(new int[]{0, 0});\nwhile(!q.isEmpty()){\nint[] cur = q.poll();\nint r = cur[0], c = cur[1];\nfor(int k = -1;k <= 1;k++){\nfor(int l = -1;l <= 1;l++){\nint nr = r + k, nc = c + l;\nif(nr >= 0 && nr < n && nc >= 0 && nc < n && a[nr][nc] == 0 && d[nr][nc] > d[r][c] + 1){\nd[nr][nc] = d[r][c] + 1;\nq.add(new int[]{nr, nc});\n}\n}\n}\n}\nif(d[n-1][n-1] > 99999)return -1;\nreturn d[n-1][n-1]+1;\n}\npublic static void main(String[] args) {\nShortestPathBinaryMatrix shortestPathBinaryMatrix = new ShortestPathBinaryMatrix();\n\nint[][] grid = {\n{0, 1},\n{1, 0}\n};\n\nint result = shortestPathBinaryMatrix.shortestPathBinaryMatrix(grid);\n\nSystem.out.println(\"Shortest path length in binary matrix: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠShort", "est", "Path", "B", "inary", "Matrix", "Ġ{", "<3>", "public", "Ġint", "Ġshortest", "Path", "B", "inary", "Matrix", "(", "int", "[", "][", "]", "Ġa", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġa", ".", "length", ";", "<5>", "if", "(", "a", "[", "0", "][", "0", "]", "Ġ==", "Ġ1", "Ġ||", "Ġa", "[", "n", "-", "1", "][", "n", "-", "1", "]", "Ġ==", "Ġ1", ")", "return", "Ġ-", "1", ";", "<6>", "int", "[", "][", "]", "Ġd", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "n", "];", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġn", ";", "i", "++", "){", "<8>", "Ar", "rays", ".", "fill", "(", "d", "[", "i", "],", "Ġ9", "9999", "9999", ");", "<9>", "}", "<10>", "d", "[", "0", "][", "0", "]", "Ġ=", "Ġ0", ";", "<11>", "Queue", "<", "int", "[]", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<12>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "0", ",", "Ġ0", "});", "<13>", "while", "(", "!", "q", ".", "is", "Empty", "()", "){", "<14>", "int", "[]", "Ġcur", "Ġ=", "Ġq", ".", "poll", "();", "<15>", "int", "Ġr", "Ġ=", "Ġcur", "[", "0", "],", "Ġc", "Ġ=", "Ġcur", "[", "1", "];", "<16>", "for", "(", "int", "Ġk", "Ġ=", "Ġ-", "1", ";", "k", "Ġ<=", "Ġ1", ";", "k", "++", "){", "<17>", "for", "(", "int", "Ġl", "Ġ=", "Ġ-", "1", ";", "l", "Ġ<=", "Ġ1", ";", "l", "++", "){", "<18>", "int", "Ġn", "r", "Ġ=", "Ġr", "Ġ+", "Ġk", ",", "Ġn", "c", "Ġ=", "Ġc", "Ġ+", "Ġl", ";", "<19>", "if", "(", "nr", "Ġ>=", "Ġ0", "Ġ&&", "Ġn", "r", "Ġ<", "Ġn", "Ġ&&", "Ġn", "c", "Ġ>=", "Ġ0", "Ġ&&", "Ġn", "c", "Ġ<", "Ġn", "Ġ&&", "Ġa", "[", "nr", "][", "nc", "]", "Ġ==", "Ġ0", "Ġ&&", "Ġd", "[", "nr", "][", "nc", "]", "Ġ>", "Ġd", "[", "r", "][", "c", "]", "Ġ+", "Ġ1", "){", "<20>", "d", "[", "nr", "][", "nc", "]", "Ġ=", "Ġd", "[", "r", "][", "c", "]", "Ġ+", "Ġ1", ";", "<21>", "q", ".", "add", "(", "new", "Ġint", "[]", "{", "nr", ",", "Ġn", "c", "});", "<22>", "}", "<23>", "}", "<24>", "}", "<25>", "}", "<26>", "if", "(", "d", "[", "n", "-", "1", "][", "n", "-", "1", "]", "Ġ>", "Ġ9", "9999", ")", "return", "Ġ-", "1", ";", "<27>", "return", "Ġd", "[", "n", "-", "1", "][", "n", "-", "1", "]+", "1", ";", "<28>", "}", "<29>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<30>", "Short", "est", "Path", "B", "inary", "Matrix", "Ġshortest", "Path", "B", "inary", "Matrix", "Ġ=", "Ġnew", "ĠShort", "est", "Path", "B", "inary", "Matrix", "();", "<31>", "<32>", "int", "[", "][", "]", "Ġgrid", "Ġ=", "Ġ{", "<33>", "{", "0", ",", "Ġ1", "},", "<34>", "{", "1", ",", "Ġ0", "}", "<35>", "};", "<36>", "<37>", "int", "Ġresult", "Ġ=", "Ġshortest", "Path", "B", "inary", "Matrix", ".", "short", "est", "Path", "B", "inary", "Matrix", "(", "grid", ");", "<38>", "<39>", "System", ".", "out", ".", "println", "(\"", "Short", "est", "Ġpath", "Ġlength", "Ġin", "Ġbinary", "Ġmatrix", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<40>", "}", "<41>", "}", "<42>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"59": [[0, 5], [0, 6]]}}
{"id": 95, "code": "import java.util.*;\n\nclass Spellchecker {\nString changeVowel(String s) {\nStringBuilder sb = new StringBuilder();\ns = s.toLowerCase();\nfor (int i = 0; i < s.length(); i++) {\nif (s.charAt(i) == 'a' ||\ns.charAt(i) == 'e' ||\ns.charAt(i) == 'i' ||\ns.charAt(i) == 'o' ||\ns.charAt(i) == 'u') {\nsb.append('a');\n} else {\nsb.append(s.charAt(i));\n}\n}\nreturn sb.toString();\n}\n\npublic String[] spellchecker(String[] wordlist, String[] queries) {\nMap<String, String> ori = new HashMap<>();\nMap<String, String> lowerCase = new HashMap<>();\nMap<String, String> vowel = new HashMap<>();\n\nfor (int i = 0; i < wordlist.length; i++) {\nori.put(wordlist[i], wordlist[i]);\nString lower = wordlist[i].toLowerCase();\nif (!lowerCase.containsKey(lower)) {\nlowerCase.put(lower, wordlist[i]);\n}\n\nString vowelString = changeVowel(wordlist[i]);\nif (!vowel.containsKey(vowelString)) {\nvowel.put(vowelString, wordlist[i]);\n}\n}\n\nString[] ans = new String[queries.length];\nfor (int i = 0; i < queries.length; i++) {\nif (ori.containsKey(queries[i])) {\nans[i] = ori.get(queries[i]);\n} else if (lowerCase.containsKey(queries[i].toLowerCase())) {\nans[i] = lowerCase.get(queries[i].toLowerCase());\n} else if (vowel.containsKey(changeVowel(queries[i]))) {\nans[i] = vowel.get(changeVowel(queries[i]));\n} else {\nans[i] = \"\";\n}\n}\nreturn ans;\n}\npublic static void main(String[] args) {\nSpellchecker spellchecker = new Spellchecker();\n\nString[] wordlist = {\"KiTe\", \"kite\", \"hare\", \"Hare\"};\nString[] queries = {\"kite\", \"Kite\", \"KiTe\", \"Hare\", \"HARE\", \"Hear\", \"hear\", \"keti\", \"keet\", \"keto\"};\n\nString[] results = spellchecker.spellchecker(wordlist, queries);\n\nSystem.out.println(\"Spellcheck results:\");\nfor (String result : results) {\nSystem.out.println(result);\n}\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "<2>", "class", "ĠSpell", "check", "er", "Ġ{", "<3>", "String", "Ġchange", "V", "ow", "el", "(", "String", "Ġs", ")", "Ġ{", "<4>", "String", "Builder", "Ġs", "b", "Ġ=", "Ġnew", "ĠString", "Builder", "();", "<5>", "s", "Ġ=", "Ġs", ".", "to", "Lower", "Case", "();", "<6>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġs", ".", "length", "();", "Ġi", "++)", "Ġ{", "<7>", "if", "Ġ(", "s", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "a", "'", "Ġ||", "<8>", "s", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "e", "'", "Ġ||", "<9>", "s", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "i", "'", "Ġ||", "<10>", "s", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "o", "'", "Ġ||", "<11>", "s", ".", "char", "At", "(", "i", ")", "Ġ==", "Ġ'", "u", "')", "Ġ{", "<12>", "sb", ".", "append", "('", "a", "');", "<13>", "}", "Ġelse", "Ġ{", "<14>", "sb", ".", "append", "(", "s", ".", "char", "At", "(", "i", "));", "<15>", "}", "<16>", "}", "<17>", "return", "Ġs", "b", ".", "to", "String", "();", "<18>", "}", "<19>", "<20>", "public", "ĠString", "[]", "Ġspell", "check", "er", "(", "String", "[]", "Ġword", "list", ",", "ĠString", "[]", "Ġqueries", ")", "Ġ{", "<21>", "Map", "<", "String", ",", "ĠString", ">", "Ġori", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<22>", "Map", "<", "String", ",", "ĠString", ">", "Ġlower", "Case", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<23>", "Map", "<", "String", ",", "ĠString", ">", "Ġvowel", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<24>", "<25>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġword", "list", ".", "length", ";", "Ġi", "++)", "Ġ{", "<26>", "ori", ".", "put", "(", "word", "list", "[", "i", "],", "Ġword", "list", "[", "i", "]);", "<27>", "String", "Ġlower", "Ġ=", "Ġword", "list", "[", "i", "].", "to", "Lower", "Case", "();", "<28>", "if", "Ġ(!", "lower", "Case", ".", "cont", "ains", "Key", "(", "lower", "))", "Ġ{", "<29>", "lower", "Case", ".", "put", "(", "lower", ",", "Ġword", "list", "[", "i", "]);", "<30>", "}", "<31>", "<32>", "String", "Ġvowel", "String", "Ġ=", "Ġchange", "V", "ow", "el", "(", "word", "list", "[", "i", "]);", "<33>", "if", "Ġ(!", "v", "ow", "el", ".", "cont", "ains", "Key", "(", "v", "ow", "el", "String", "))", "Ġ{", "<34>", "v", "ow", "el", ".", "put", "(", "v", "ow", "el", "String", ",", "Ġword", "list", "[", "i", "]);", "<35>", "}", "<36>", "}", "<37>", "<38>", "String", "[]", "Ġans", "Ġ=", "Ġnew", "ĠString", "[", "qu", "eries", ".", "length", "];", "<39>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġqueries", ".", "length", ";", "Ġi", "++)", "Ġ{", "<40>", "if", "Ġ(", "ori", ".", "cont", "ains", "Key", "(", "qu", "eries", "[", "i", "]", "))", "Ġ{", "<41>", "ans", "[", "i", "]", "Ġ=", "Ġori", ".", "get", "(", "qu", "eries", "[", "i", "]);", "<42>", "}", "Ġelse", "Ġif", "Ġ(", "lower", "Case", ".", "cont", "ains", "Key", "(", "qu", "eries", "[", "i", "].", "to", "Lower", "Case", "()", "))", "Ġ{", "<43>", "ans", "[", "i", "]", "Ġ=", "Ġlower", "Case", ".", "get", "(", "qu", "eries", "[", "i", "].", "to", "Lower", "Case", "());", "<44>", "}", "Ġelse", "Ġif", "Ġ(", "v", "ow", "el", ".", "cont", "ains", "Key", "(", "change", "V", "ow", "el", "(", "qu", "eries", "[", "i", "]", ")))", "Ġ{", "<45>", "ans", "[", "i", "]", "Ġ=", "Ġvowel", ".", "get", "(", "change", "V", "ow", "el", "(", "qu", "eries", "[", "i", "])", ");", "<46>", "}", "Ġelse", "Ġ{", "<47>", "ans", "[", "i", "]", "Ġ=", "Ġ\"", "\";", "<48>", "}", "<49>", "}", "<50>", "return", "Ġans", ";", "<51>", "}", "<52>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<53>", "Spell", "check", "er", "Ġspell", "check", "er", "Ġ=", "Ġnew", "ĠSpell", "check", "er", "();", "<54>", "<55>", "String", "[]", "Ġword", "list", "Ġ=", "Ġ{\"", "K", "i", "Te", "\",", "Ġ\"", "k", "ite", "\",", "Ġ\"", "hare", "\",", "Ġ\"", "H", "are", "\"", "};", "<56>", "String", "[]", "Ġqueries", "Ġ=", "Ġ{\"", "k", "ite", "\",", "Ġ\"", "K", "ite", "\",", "Ġ\"", "K", "i", "Te", "\",", "Ġ\"", "H", "are", "\",", "Ġ\"", "H", "ARE", "\",", "Ġ\"", "H", "ear", "\",", "Ġ\"", "he", "ar", "\",", "Ġ\"", "ket", "i", "\",", "Ġ\"", "ke", "et", "\",", "Ġ\"", "ket", "o", "\"", "};", "<57>", "<58>", "String", "[]", "Ġresults", "Ġ=", "Ġspell", "check", "er", ".", "spell", "check", "er", "(", "word", "list", ",", "Ġqueries", ");", "<59>", "<60>", "System", ".", "out", ".", "println", "(\"", "Spell", "check", "Ġresults", ":\"", ");", "<61>", "for", "Ġ(", "String", "Ġresult", "Ġ:", "Ġresults", ")", "Ġ{", "<62>", "System", ".", "out", ".", "println", "(", "result", ");", "<63>", "}", "<64>", "}", "<65>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"61": [[12, 12], [14, 13]]}}
{"id": 96, "code": "import java.util.*;\nclass StrangePrinter {\nint[][][] f;\npublic int strangePrinter(String s) {\nint n = s.length();\nif (n==0)\nreturn 0;\n\nf = new int[n][n][27];\nfor (int i=0;i<n;i++)\nfor (int j=0;j<n;j++)\nArrays.fill(f[i][j], Integer.MAX_VALUE);\nreturn calc(s, 0, n-1, 0);\n}\n\nprivate int calc(String s, int lo, int hi, int color){\nif (f[lo][hi][color] != Integer.MAX_VALUE)\nreturn f[lo][hi][color];\n\nint res = Integer.MAX_VALUE;\nif (s.charAt(lo) == s.charAt(hi)){\nchar c = s.charAt(lo);\nint idx = getIdx(c);\nint start = lo;\nwhile (s.charAt(start)==c && start<hi)\nstart++;\n\n\nif (start==hi){\nif (idx==color)\nres = 0;\nelse\nres = 1;\n}\nelse{\nint end = hi;\nwhile (s.charAt(end)==c)\nend--;\nif (color==idx)\nres = Math.min(res, calc(s, start, end, idx));\nelse\nres = Math.min(res, calc(s, start, end, idx) + 1);\n}\n}\n\nfor (int i=lo; i<hi; i++)\nres = Math.min(res, calc(s,lo,i,color) + calc(s,i+1,hi,color));\n\nf[lo][hi][color] = res;\nreturn res;\n}\n\nprivate int getIdx(char c){\nreturn c-'a'+1;\n}\npublic static void main(String[] args) {\nStrangePrinter strangePrinter = new StrangePrinter();\n\nString s = \"aaabbb\";\n\nint result = strangePrinter.strangePrinter(s);\n\nSystem.out.println(\"Minimum number of turns the printer needed: \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠStrange", "Pr", "inter", "Ġ{", "<2>", "int", "[", "][", "][", "]", "Ġf", ";", "<3>", "public", "Ġint", "Ġstrange", "Pr", "inter", "(", "String", "Ġs", ")", "Ġ{", "<4>", "int", "Ġn", "Ġ=", "Ġs", ".", "length", "();", "<5>", "if", "Ġ(", "n", "==", "0", ")", "<6>", "return", "Ġ0", ";", "<7>", "<8>", "f", "Ġ=", "Ġnew", "Ġint", "[", "n", "][", "n", "][", "27", "];", "<9>", "for", "Ġ(", "int", "Ġi", "=", "0", ";", "i", "<", "n", ";", "i", "++)", "<10>", "for", "Ġ(", "int", "Ġj", "=", "0", ";", "j", "<", "n", ";", "j", "++)", "<11>", "Ar", "rays", ".", "fill", "(", "f", "[", "i", "][", "j", "],", "ĠInteger", ".", "MAX", "_", "VALUE", ");", "<12>", "return", "Ġcalc", "(", "s", ",", "Ġ0", ",", "Ġn", "-", "1", ",", "Ġ0", ");", "<13>", "}", "<14>", "<15>", "private", "Ġint", "Ġcalc", "(", "String", "Ġs", ",", "Ġint", "Ġlo", ",", "Ġint", "Ġhi", ",", "Ġint", "Ġcolor", "){", "<16>", "if", "Ġ(", "f", "[", "lo", "][", "hi", "][", "color", "]", "Ġ!=", "ĠInteger", ".", "MAX", "_", "VALUE", ")", "<17>", "return", "Ġf", "[", "lo", "][", "hi", "][", "color", "];", "<18>", "<19>", "int", "Ġres", "Ġ=", "ĠInteger", ".", "MAX", "_", "VALUE", ";", "<20>", "if", "Ġ(", "s", ".", "char", "At", "(", "lo", ")", "Ġ==", "Ġs", ".", "char", "At", "(", "hi", "))", "{", "<21>", "char", "Ġc", "Ġ=", "Ġs", ".", "char", "At", "(", "lo", ");", "<22>", "int", "Ġid", "x", "Ġ=", "Ġget", "Id", "x", "(", "c", ");", "<23>", "int", "Ġstart", "Ġ=", "Ġlo", ";", "<24>", "while", "Ġ(", "s", ".", "char", "At", "(", "start", ")", "==", "c", "Ġ&&", "Ġstart", "<", "hi", ")", "<25>", "start", "++;", "<26>", "<27>", "<28>", "if", "Ġ(", "start", "==", "hi", "){", "<29>", "if", "Ġ(", "id", "x", "==", "color", ")", "<30>", "res", "Ġ=", "Ġ0", ";", "<31>", "else", "<32>", "res", "Ġ=", "Ġ1", ";", "<33>", "}", "<34>", "else", "{", "<35>", "int", "Ġend", "Ġ=", "Ġhi", ";", "<36>", "while", "Ġ(", "s", ".", "char", "At", "(", "end", ")", "==", "c", ")", "<37>", "end", "--", ";", "<38>", "if", "Ġ(", "color", "==", "id", "x", ")", "<39>", "res", "Ġ=", "ĠMath", ".", "min", "(", "res", ",", "Ġcalc", "(", "s", ",", "Ġstart", ",", "Ġend", ",", "Ġid", "x", "));", "<40>", "else", "<41>", "res", "Ġ=", "ĠMath", ".", "min", "(", "res", ",", "Ġcalc", "(", "s", ",", "Ġstart", ",", "Ġend", ",", "Ġid", "x", ")", "Ġ+", "Ġ1", ");", "<42>", "}", "<43>", "}", "<44>", "<45>", "for", "Ġ(", "int", "Ġi", "=", "lo", ";", "Ġi", "<", "hi", ";", "Ġi", "++)", "<46>", "res", "Ġ=", "ĠMath", ".", "min", "(", "res", ",", "Ġcalc", "(", "s", ",", "lo", ",", "i", ",", "color", ")", "Ġ+", "Ġcalc", "(", "s", ",", "i", "+", "1", ",", "hi", ",", "color", "));", "<47>", "<48>", "f", "[", "lo", "][", "hi", "][", "color", "]", "Ġ=", "Ġres", ";", "<49>", "return", "Ġres", ";", "<50>", "}", "<51>", "<52>", "private", "Ġint", "Ġget", "Id", "x", "(", "char", "Ġc", "){", "<53>", "return", "Ġc", "-'", "a", "'", "+", "1", ";", "<54>", "}", "<55>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<56>", "Strange", "Pr", "inter", "Ġstrange", "Pr", "inter", "Ġ=", "Ġnew", "ĠStrange", "Pr", "inter", "();", "<57>", "<58>", "String", "Ġs", "Ġ=", "Ġ\"", "aa", "abb", "b", "\";", "<59>", "<60>", "int", "Ġresult", "Ġ=", "Ġstrange", "Pr", "inter", ".", "str", "ange", "Pr", "inter", "(", "s", ");", "<61>", "<62>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġnumber", "Ġof", "Ġturns", "Ġthe", "Ġprinter", "Ġneeded", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<63>", "}", "<64>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"53": [[15, 14, 0], [12]]}}
{"id": 97, "code": "import java.util.*;\nclass TallestBillboard {\npublic int tallestBillboard(int[] rods) {\nint n = rods.length;\nint h = n/2;\nint o = 10002;\nint[] ls = new int[20005];\nArrays.fill(ls, -99999999);\nfor(int i = 0;i < (int)Math.pow(3, h);i++){\nint s = 0;\nint as = 0;\nint v = i;\nfor(int j = 0;j < h;j++){\nint w = v % 3;\nif(w == 1){\n}else if(w == 0){\ns += rods[j];\nas += rods[j];\n}else{\ns -= rods[j];\nas += rods[j];\n}\nv /= 3;\n}\nls[s+o] = Math.max(ls[s+o], as);\n}\nint ret = 0;\nfor(int i = 0;i < (int)Math.pow(3, n-h);i++){\nint s = 0;\nint as = 0;\nint v = i;\nfor(int j = 0;j < n-h;j++){\nint w = v % 3;\nif(w == 1){\n}else if(w == 0){\ns += rods[j+h];\nas += rods[j+h];\n}else{\ns -= rods[j+h];\nas += rods[j+h];\n}\nv /= 3;\n}\nret = Math.max(ret, (ls[o-s] + as) / 2);\n}\nreturn ret;\n}\npublic static void main(String[] args) {\nTallestBillboard tallestBillboard = new TallestBillboard();\n\nint[] rods = {1, 2, 3, 6};\n\nint result = tallestBillboard.tallestBillboard(rods);\n\nSystem.out.println(\"Tallest possible height of the billboard: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠTall", "est", "Bill", "board", "Ġ{", "<2>", "public", "Ġint", "Ġtallest", "Bill", "board", "(", "int", "[]", "Ġrods", ")", "Ġ{", "<3>", "int", "Ġn", "Ġ=", "Ġrods", ".", "length", ";", "<4>", "int", "Ġh", "Ġ=", "Ġn", "/", "2", ";", "<5>", "int", "Ġo", "Ġ=", "Ġ1000", "2", ";", "<6>", "int", "[]", "Ġls", "Ġ=", "Ġnew", "Ġint", "[", "2000", "5", "];", "<7>", "Ar", "rays", ".", "fill", "(", "ls", ",", "Ġ-", "9999", "9999", ");", "<8>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġ(", "int", ")", "Math", ".", "p", "ow", "(", "3", ",", "Ġh", ");", "i", "++", "){", "<9>", "int", "Ġs", "Ġ=", "Ġ0", ";", "<10>", "int", "Ġas", "Ġ=", "Ġ0", ";", "<11>", "int", "Ġv", "Ġ=", "Ġi", ";", "<12>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġh", ";", "j", "++", "){", "<13>", "int", "Ġw", "Ġ=", "Ġv", "Ġ%", "Ġ3", ";", "<14>", "if", "(", "w", "Ġ==", "Ġ1", "){", "<15>", "}", "else", "Ġif", "(", "w", "Ġ==", "Ġ0", "){", "<16>", "s", "Ġ+=", "Ġrods", "[", "j", "];", "<17>", "as", "Ġ+=", "Ġrods", "[", "j", "];", "<18>", "}", "else", "{", "<19>", "s", "Ġ-=", "Ġrods", "[", "j", "];", "<20>", "as", "Ġ+=", "Ġrods", "[", "j", "];", "<21>", "}", "<22>", "v", "Ġ/", "=", "Ġ3", ";", "<23>", "}", "<24>", "ls", "[", "s", "+", "o", "]", "Ġ=", "ĠMath", ".", "max", "(", "ls", "[", "s", "+", "o", "],", "Ġas", ");", "<25>", "}", "<26>", "int", "Ġret", "Ġ=", "Ġ0", ";", "<27>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "Ġ(", "int", ")", "Math", ".", "p", "ow", "(", "3", ",", "Ġn", "-", "h", ");", "i", "++", "){", "<28>", "int", "Ġs", "Ġ=", "Ġ0", ";", "<29>", "int", "Ġas", "Ġ=", "Ġ0", ";", "<30>", "int", "Ġv", "Ġ=", "Ġi", ";", "<31>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "Ġn", "-", "h", ";", "j", "++", "){", "<32>", "int", "Ġw", "Ġ=", "Ġv", "Ġ%", "Ġ3", ";", "<33>", "if", "(", "w", "Ġ==", "Ġ1", "){", "<34>", "}", "else", "Ġif", "(", "w", "Ġ==", "Ġ0", "){", "<35>", "s", "Ġ+=", "Ġrods", "[", "j", "+", "h", "];", "<36>", "as", "Ġ+=", "Ġrods", "[", "j", "+", "h", "];", "<37>", "}", "else", "{", "<38>", "s", "Ġ-=", "Ġrods", "[", "j", "+", "h", "];", "<39>", "as", "Ġ+=", "Ġrods", "[", "j", "+", "h", "];", "<40>", "}", "<41>", "v", "Ġ/", "=", "Ġ3", ";", "<42>", "}", "<43>", "ret", "Ġ=", "ĠMath", ".", "max", "(", "ret", ",", "Ġ(", "ls", "[", "o", "-", "s", "]", "Ġ+", "Ġas", ")", "Ġ/", "Ġ2", ");", "<44>", "}", "<45>", "return", "Ġret", ";", "<46>", "}", "<47>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<48>", "T", "all", "est", "Bill", "board", "Ġtallest", "Bill", "board", "Ġ=", "Ġnew", "ĠTall", "est", "Bill", "board", "();", "<49>", "<50>", "int", "[]", "Ġrods", "Ġ=", "Ġ{", "1", ",", "Ġ2", ",", "Ġ3", ",", "Ġ6", "};", "<51>", "<52>", "int", "Ġresult", "Ġ=", "Ġtallest", "Bill", "board", ".", "tall", "est", "Bill", "board", "(", "ro", "ds", ");", "<53>", "<54>", "System", ".", "out", ".", "println", "(\"", "T", "all", "est", "Ġpossible", "Ġheight", "Ġof", "Ġthe", "Ġbillboard", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<55>", "}", "<56>", "}", "<57>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"60": [[2, 3, 6], [4, 13, 3, 5]]}}
{"id": 98, "code": "class TilingRectangle {\npublic int tilingRectangle(int n, int m) {\nans = 99999999;\nboolean[][] g = new boolean[n][m];\ndfs(0, 0, g, 0);\nreturn ans;\n}\n\nint ans;\n\nvoid dfs(int r, int c, boolean[][] g, int num)\n{\nint n = g.length, m = g[0].length;\nif(num >= ans)return;\nif(r >= n){\nans = num;\nreturn;\n}\nif(c >= m){\ndfs(r+1, 0, g, num); return;\n}\nif(g[r][c]){\ndfs(r, c+1, g, num); return;\n}\nout:\nfor(int K = Math.min(n-r, m-c);K >= 1;K--){\nfor(int i = 0;i < K;i++){\nfor(int j = 0;j < K;j++){\nif(g[r+i][c+j])break out;\n}\n}\nfor(int i = 0;i < K;i++){\nfor(int j = 0;j < K;j++){\ng[r+i][c+j] = true;\n}\n}\ndfs(r, c+1, g, num+1);\nfor(int i = 0;i < K;i++){\nfor(int j = 0;j < K;j++){\ng[r+i][c+j] = false;\n}\n}\n}\n}\n\npublic void tf(boolean[]... b)\n{\nfor(boolean[] r : b) {\nfor(boolean x : r)System.out.print(x?'#':'.');\nSystem.out.println();\n}\nSystem.out.println();\n}\npublic static void main(String[] args) {\nTilingRectangle tilingRectangle = new TilingRectangle();\n\nint n = 2;\nint m = 3;\n\nint result = tilingRectangle.tilingRectangle(n, m);\n\nSystem.out.println(\"Minimum number of squares to tile a \" + n + \"x\" + m + \" rectangle: \" + result);\n}\n\n}\n", "code_tokens": ["<0>", "class", "ĠT", "iling", "Rect", "angle", "Ġ{", "<1>", "public", "Ġint", "Ġt", "iling", "Rect", "angle", "(", "int", "Ġn", ",", "Ġint", "Ġm", ")", "Ġ{", "<2>", "ans", "Ġ=", "Ġ9", "9999", "999", ";", "<3>", "bo", "olean", "[", "][", "]", "Ġg", "Ġ=", "Ġnew", "Ġboolean", "[", "n", "][", "m", "];", "<4>", "df", "s", "(", "0", ",", "Ġ0", ",", "Ġg", ",", "Ġ0", ");", "<5>", "return", "Ġans", ";", "<6>", "}", "<7>", "<8>", "int", "Ġans", ";", "<9>", "<10>", "void", "Ġd", "fs", "(", "int", "Ġr", ",", "Ġint", "Ġc", ",", "Ġboolean", "[", "][", "]", "Ġg", ",", "Ġint", "Ġnum", ")", "<11>", "{", "<12>", "int", "Ġn", "Ġ=", "Ġg", ".", "length", ",", "Ġm", "Ġ=", "Ġg", "[", "0", "].", "length", ";", "<13>", "if", "(", "num", "Ġ>=", "Ġans", ")", "return", ";", "<14>", "if", "(", "r", "Ġ>=", "Ġn", "){", "<15>", "ans", "Ġ=", "Ġnum", ";", "<16>", "return", ";", "<17>", "}", "<18>", "if", "(", "c", "Ġ>=", "Ġm", "){", "<19>", "df", "s", "(", "r", "+", "1", ",", "Ġ0", ",", "Ġg", ",", "Ġnum", ");", "Ġreturn", ";", "<20>", "}", "<21>", "if", "(", "g", "[", "r", "][", "c", "])", "{", "<22>", "df", "s", "(", "r", ",", "Ġc", "+", "1", ",", "Ġg", ",", "Ġnum", ");", "Ġreturn", ";", "<23>", "}", "<24>", "out", ":", "<25>", "for", "(", "int", "ĠK", "Ġ=", "ĠMath", ".", "min", "(", "n", "-", "r", ",", "Ġm", "-", "c", ");", "K", "Ġ>=", "Ġ1", ";", "K", "--", "){", "<26>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "ĠK", ";", "i", "++", "){", "<27>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "ĠK", ";", "j", "++", "){", "<28>", "if", "(", "g", "[", "r", "+", "i", "][", "c", "+", "j", "])", "break", "Ġout", ";", "<29>", "}", "<30>", "}", "<31>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "ĠK", ";", "i", "++", "){", "<32>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "ĠK", ";", "j", "++", "){", "<33>", "g", "[", "r", "+", "i", "][", "c", "+", "j", "]", "Ġ=", "Ġtrue", ";", "<34>", "}", "<35>", "}", "<36>", "df", "s", "(", "r", ",", "Ġc", "+", "1", ",", "Ġg", ",", "Ġnum", "+", "1", ");", "<37>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "ĠK", ";", "i", "++", "){", "<38>", "for", "(", "int", "Ġj", "Ġ=", "Ġ0", ";", "j", "Ġ<", "ĠK", ";", "j", "++", "){", "<39>", "g", "[", "r", "+", "i", "][", "c", "+", "j", "]", "Ġ=", "Ġfalse", ";", "<40>", "}", "<41>", "}", "<42>", "}", "<43>", "}", "<44>", "<45>", "public", "Ġvoid", "Ġtf", "(", "bo", "olean", "[]", "...", "Ġb", ")", "<46>", "{", "<47>", "for", "(", "bo", "olean", "[]", "Ġr", "Ġ:", "Ġb", ")", "Ġ{", "<48>", "for", "(", "bo", "olean", "Ġx", "Ġ:", "Ġr", ")", "System", ".", "out", ".", "print", "(", "x", "?'", "#", "':", "'", ".'", ");", "<49>", "System", ".", "out", ".", "println", "();", "<50>", "}", "<51>", "System", ".", "out", ".", "println", "();", "<52>", "}", "<53>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<54>", "T", "iling", "Rect", "angle", "Ġt", "iling", "Rect", "angle", "Ġ=", "Ġnew", "ĠT", "iling", "Rect", "angle", "();", "<55>", "<56>", "int", "Ġn", "Ġ=", "Ġ2", ";", "<57>", "int", "Ġm", "Ġ=", "Ġ3", ";", "<58>", "<59>", "int", "Ġresult", "Ġ=", "Ġt", "iling", "Rect", "angle", ".", "t", "iling", "Rect", "angle", "(", "n", ",", "Ġm", ");", "<60>", "<61>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġnumber", "Ġof", "Ġsquares", "Ġto", "Ġtile", "Ġa", "Ġ\"", "Ġ+", "Ġn", "Ġ+", "Ġ\"", "x", "\"", "Ġ+", "Ġm", "Ġ+", "Ġ\"", "Ġrectangle", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<62>", "}", "<63>", "<64>", "}", "<65>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"36": [[0, 15, 6, 7], [2, 12, 12]]}}
{"id": 99, "code": "import java.util.*;\nclass VideoStitching {\npublic int videoStitching(int[][] clips, int T) {\nint[] dp = new int[T+1];\nint I = Integer.MAX_VALUE / 2;\nArrays.fill(dp, I);\ndp[0] = 0;\nfor(int i = 0;i < T;i++){\nfor(int[] c : clips){\nif(c[0] == i){\ndp[Math.min(c[1], T)] = Math.min(\ndp[Math.min(c[1], T)],\ndp[i] + 1\n);\n}\n}\nfor(int j = T-1;j >= 0;j--){\ndp[j] = Math.min(dp[j], dp[j+1]);\n}\n}\nreturn dp[T] < I ? dp[T] : -1;\n}\npublic static void main(String[] args) {\nVideoStitching videoStitching = new VideoStitching();\n\nint[][] clips = {\n{0, 2},\n{4, 6},\n{8, 10},\n{1, 9},\n{1, 5},\n{5, 9}\n};\nint T = 10;\n\nint result = videoStitching.videoStitching(clips, T);\n\nSystem.out.println(\"Minimum number of clips to cover the entire interval [0, \" + T + \"]: \" + result);\n}\n}\n", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠVideo", "St", "itching", "Ġ{", "<2>", "public", "Ġint", "Ġvideo", "St", "itching", "(", "int", "[", "][", "]", "Ġclips", ",", "Ġint", "ĠT", ")", "Ġ{", "<3>", "int", "[]", "Ġd", "p", "Ġ=", "Ġnew", "Ġint", "[", "T", "+", "1", "];", "<4>", "int", "ĠI", "Ġ=", "ĠInteger", ".", "MAX", "_", "VALUE", "Ġ/", "Ġ2", ";", "<5>", "Ar", "rays", ".", "fill", "(", "dp", ",", "ĠI", ");", "<6>", "dp", "[", "0", "]", "Ġ=", "Ġ0", ";", "<7>", "for", "(", "int", "Ġi", "Ġ=", "Ġ0", ";", "i", "Ġ<", "ĠT", ";", "i", "++", "){", "<8>", "for", "(", "int", "[]", "Ġc", "Ġ:", "Ġclips", "){", "<9>", "if", "(", "c", "[", "0", "]", "Ġ==", "Ġi", "){", "<10>", "dp", "[", "Math", ".", "min", "(", "c", "[", "1", "],", "ĠT", ")]", "Ġ=", "ĠMath", ".", "min", "(", "<11>", "dp", "[", "Math", ".", "min", "(", "c", "[", "1", "],", "ĠT", ")", "],", "<12>", "dp", "[", "i", "]", "Ġ+", "Ġ1", "<13>", ");", "<14>", "}", "<15>", "}", "<16>", "for", "(", "int", "Ġj", "Ġ=", "ĠT", "-", "1", ";", "j", "Ġ>=", "Ġ0", ";", "j", "--", "){", "<17>", "dp", "[", "j", "]", "Ġ=", "ĠMath", ".", "min", "(", "dp", "[", "j", "],", "Ġd", "p", "[", "j", "+", "1", "]);", "<18>", "}", "<19>", "}", "<20>", "return", "Ġd", "p", "[", "T", "]", "Ġ<", "ĠI", "Ġ?", "Ġd", "p", "[", "T", "]", "Ġ:", "Ġ-", "1", ";", "<21>", "}", "<22>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<23>", "Video", "St", "itching", "Ġvideo", "St", "itching", "Ġ=", "Ġnew", "ĠVideo", "St", "itching", "();", "<24>", "<25>", "int", "[", "][", "]", "Ġclips", "Ġ=", "Ġ{", "<26>", "{", "0", ",", "Ġ2", "},", "<27>", "{", "4", ",", "Ġ6", "},", "<28>", "{", "8", ",", "Ġ10", "},", "<29>", "{", "1", ",", "Ġ9", "},", "<30>", "{", "1", ",", "Ġ5", "},", "<31>", "{", "5", ",", "Ġ9", "}", "<32>", "};", "<33>", "int", "ĠT", "Ġ=", "Ġ10", ";", "<34>", "<35>", "int", "Ġresult", "Ġ=", "Ġvideo", "St", "itching", ".", "video", "St", "itching", "(", "clips", ",", "ĠT", ");", "<36>", "<37>", "System", ".", "out", ".", "println", "(\"", "Minimum", "Ġnumber", "Ġof", "Ġclips", "Ġto", "Ġcover", "Ġthe", "Ġentire", "Ġinterval", "Ġ[", "0", ",", "Ġ\"", "Ġ+", "ĠT", "Ġ+", "Ġ\"", "]:", "Ġ\"", "Ġ+", "Ġresult", ");", "<38>", "}", "<39>", "}", "<40>"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"59": [[5, 2, 3], [3, 5]]}}
{"id": 100, "code": "import java.util.*;\nclass WatchedVideosByFriends {\npublic List<String> watchedVideosByFriends(List<List<String>> watchedVideos, int[][] friends, int id, int level) {\nint n = friends.length;\nDeque<Integer> q = new ArrayDeque<>();\nboolean[] visited = new boolean[n];\nMap<String, Integer> freq = new HashMap<>();\n\nint dist = 0;\nq.addLast(id);\nvisited[id] = true;\nwhile (!q.isEmpty()) {\nint size = q.size();\nfor (int i = 0; i < size; i++) {\nint u = q.removeFirst();\nif (dist == level) {\nfor (String video : watchedVideos.get(u)) {\nfreq.put(video, freq.getOrDefault(video, 0) + 1);\n}\n}\nfor (int v : friends[u]) {\nif (!visited[v]) {\nvisited[v] = true;\nq.addLast(v);\n}\n}\n}\nif (dist == level) break;\ndist++;\n}\nList<String> ans = new ArrayList<>(freq.keySet());\nCollections.sort(ans, (String s1,String s2) -> {\nif (freq.get(s1) == freq.get(s2)) {\nreturn s1.compareTo(s2);\n}\nreturn Integer.compare(freq.get(s1), freq.get(s2));\n});\nreturn ans;\n}\npublic static void main(String[] args) {\nWatchedVideosByFriends watchedVideosByFriends = new WatchedVideosByFriends();\n\nList<List<String>> watchedVideos = new ArrayList<>();\nwatchedVideos.add(Arrays.asList(\"A\", \"B\"));\nwatchedVideos.add(Arrays.asList(\"C\"));\nwatchedVideos.add(Arrays.asList(\"B\", \"C\"));\nwatchedVideos.add(Arrays.asList(\"D\"));\n\nint[][] friends = {\n{1, 2},\n{0, 3},\n{0, 3},\n{1, 2}\n};\n\nint id = 0;\nint level = 1;\n\nList<String> result = watchedVideosByFriends.watchedVideosByFriends(watchedVideos, friends, id, level);\n\nSystem.out.println(\"Videos watched by friends at level \" + level + \": \" + result);\n}\n}", "code_tokens": ["<0>", "import", "Ġjava", ".", "util", ".*", ";", "<1>", "class", "ĠWat", "ched", "V", "ideos", "By", "Friends", "Ġ{", "<2>", "public", "ĠList", "<", "String", ">", "Ġwatched", "V", "ideos", "By", "Friends", "(", "List", "<", "List", "<", "String", ">>", "Ġwatched", "V", "ideos", ",", "Ġint", "[", "][", "]", "Ġfriends", ",", "Ġint", "Ġid", ",", "Ġint", "Ġlevel", ")", "Ġ{", "<3>", "int", "Ġn", "Ġ=", "Ġfriends", ".", "length", ";", "<4>", "De", "que", "<", "Integer", ">", "Ġq", "Ġ=", "Ġnew", "ĠArray", "De", "que", "<", ">", "();", "<5>", "bo", "olean", "[]", "Ġvisited", "Ġ=", "Ġnew", "Ġboolean", "[", "n", "];", "<6>", "Map", "<", "String", ",", "ĠInteger", ">", "Ġfre", "q", "Ġ=", "Ġnew", "ĠHash", "Map", "<", ">", "();", "<7>", "<8>", "int", "Ġdist", "Ġ=", "Ġ0", ";", "<9>", "q", ".", "add", "Last", "(", "id", ");", "<10>", "vis", "ited", "[", "id", "]", "Ġ=", "Ġtrue", ";", "<11>", "while", "Ġ(!", "q", ".", "is", "Empty", "())", "Ġ{", "<12>", "int", "Ġsize", "Ġ=", "Ġq", ".", "size", "();", "<13>", "for", "Ġ(", "int", "Ġi", "Ġ=", "Ġ0", ";", "Ġi", "Ġ<", "Ġsize", ";", "Ġi", "++)", "Ġ{", "<14>", "int", "Ġu", "Ġ=", "Ġq", ".", "remove", "First", "();", "<15>", "if", "Ġ(", "dist", "Ġ==", "Ġlevel", ")", "Ġ{", "<16>", "for", "Ġ(", "String", "Ġvideo", "Ġ:", "Ġwatched", "V", "ideos", ".", "get", "(", "u", "))", "Ġ{", "<17>", "fre", "q", ".", "put", "(", "video", ",", "Ġfre", "q", ".", "get", "Or", "Default", "(", "video", ",", "Ġ0", ")", "Ġ+", "Ġ1", ");", "<18>", "}", "<19>", "}", "<20>", "for", "Ġ(", "int", "Ġv", "Ġ:", "Ġfriends", "[", "u", "])", "Ġ{", "<21>", "if", "Ġ(!", "vis", "ited", "[", "v", "])", "Ġ{", "<22>", "vis", "ited", "[", "v", "]", "Ġ=", "Ġtrue", ";", "<23>", "q", ".", "add", "Last", "(", "v", ");", "<24>", "}", "<25>", "}", "<26>", "}", "<27>", "if", "Ġ(", "dist", "Ġ==", "Ġlevel", ")", "Ġbreak", ";", "<28>", "dist", "++;", "<29>", "}", "<30>", "List", "<", "String", ">", "Ġans", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">(", "fre", "q", ".", "key", "Set", "());", "<31>", "Col", "lections", ".", "sort", "(", "ans", ",", "Ġ(", "String", "Ġs", "1", ",", "String", "Ġs", "2", ")", "Ġ->", "Ġ{", "<32>", "if", "Ġ(", "fre", "q", ".", "get", "(", "s", "1", ")", "Ġ==", "Ġfre", "q", ".", "get", "(", "s", "2", "))", "Ġ{", "<33>", "return", "Ġs", "1", ".", "comp", "are", "To", "(", "s", "2", ");", "<34>", "}", "<35>", "return", "ĠInteger", ".", "comp", "are", "(", "fre", "q", ".", "get", "(", "s", "1", "),", "Ġfre", "q", ".", "get", "(", "s", "2", "));", "<36>", "});", "<37>", "return", "Ġans", ";", "<38>", "}", "<39>", "public", "Ġstatic", "Ġvoid", "Ġmain", "(", "String", "[]", "Ġargs", ")", "Ġ{", "<40>", "W", "atched", "V", "ideos", "By", "Friends", "Ġwatched", "V", "ideos", "By", "Friends", "Ġ=", "Ġnew", "ĠWat", "ched", "V", "ideos", "By", "Friends", "();", "<41>", "<42>", "List", "<", "List", "<", "String", ">>", "Ġwatched", "V", "ideos", "Ġ=", "Ġnew", "ĠArray", "List", "<", ">", "();", "<43>", "w", "atched", "V", "ideos", ".", "add", "(", "Ar", "rays", ".", "as", "List", "(\"", "A", "\",", "Ġ\"", "B", "\")", ");", "<44>", "w", "atched", "V", "ideos", ".", "add", "(", "Ar", "rays", ".", "as", "List", "(\"", "C", "\")", ");", "<45>", "w", "atched", "V", "ideos", ".", "add", "(", "Ar", "rays", ".", "as", "List", "(\"", "B", "\",", "Ġ\"", "C", "\")", ");", "<46>", "w", "atched", "V", "ideos", ".", "add", "(", "Ar", "rays", ".", "as", "List", "(\"", "D", "\")", ");", "<47>", "<48>", "int", "[", "][", "]", "Ġfriends", "Ġ=", "Ġ{", "<49>", "{", "1", ",", "Ġ2", "},", "<50>", "{", "0", ",", "Ġ3", "},", "<51>", "{", "0", ",", "Ġ3", "},", "<52>", "{", "1", ",", "Ġ2", "}", "<53>", "};", "<54>", "<55>", "int", "Ġid", "Ġ=", "Ġ0", ";", "<56>", "int", "Ġlevel", "Ġ=", "Ġ1", ";", "<57>", "<58>", "List", "<", "String", ">", "Ġresult", "Ġ=", "Ġwatched", "V", "ideos", "By", "Friends", ".", "w", "atched", "V", "ideos", "By", "Friends", "(", "w", "atched", "V", "ideos", ",", "Ġfriends", ",", "Ġid", ",", "Ġlevel", ");", "<59>", "<60>", "System", ".", "out", ".", "println", "(\"", "V", "ideos", "Ġwatched", "Ġby", "Ġfriends", "Ġat", "Ġlevel", "Ġ\"", "Ġ+", "Ġlevel", "Ġ+", "Ġ\"", ":", "Ġ\"", "Ġ+", "Ġresult", ");", "<61>", "}", "<62>", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [[]]}], "slices": {"34": [[7, 5, 8], [5, 14]]}}
