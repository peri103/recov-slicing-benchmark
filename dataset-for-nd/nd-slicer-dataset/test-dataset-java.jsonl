{"id": 6559, "code": "int N = 2;\nint[] As = {1, 5};\nint[] Bs = {2, 4};\nint[] Cs = {3, 6};\nint cnt = 0;\nfor (int b : Bs) {\nint ind_c = bisectLeft(Cs, b + 1);\nint ind_a = bisectRight(As, b - 1);\nif (ind_c == N) continue;\ncnt += (N - ind_c) * (ind_a);}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "As", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "Bs", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "Cs", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "cnt", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "Bs", ")", "{", "<6>", "int", "ind_c", "=", "bisectLeft", "(", "Cs", ",", "b", "+", "1", ")", ";", "<7>", "int", "ind_a", "=", "bisectRight", "(", "As", ",", "b", "-", "1", ")", ";", "<8>", "if", "(", "ind_c", "==", "N", ")", "continue", ";", "<9>", "cnt", "+=", "(", "N", "-", "ind_c", ")", "*", "(", "ind_a", ")", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "2"]]}, {"line": 3, "state": [["N", "2"], ["As", "[ 1 , 5 ]"]]}, {"line": 4, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"]]}, {"line": 5, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "0"]]}, {"line": 7, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "0"], ["b", "2"]]}, {"line": 8, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "0"], ["b", "2"], ["ind_c", "0"]]}, {"line": 9, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "0"], ["b", "2"], ["ind_c", "0"], ["ind_a", "1"]]}, {"line": 10, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "0"], ["b", "2"], ["ind_c", "0"], ["ind_a", "1"]]}, {"line": 11, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "2"], ["b", "2"], ["ind_c", "0"], ["ind_a", "1"]]}, {"line": 7, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "2"], ["b", "4"], ["ind_c", "0"], ["ind_a", "1"]]}, {"line": 8, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "2"], ["b", "4"], ["ind_c", "1"], ["ind_a", "1"]]}, {"line": 9, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "2"], ["b", "4"], ["ind_c", "1"], ["ind_a", "1"]]}, {"line": 10, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "2"], ["b", "4"], ["ind_c", "1"], ["ind_a", "1"]]}, {"line": 11, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "3"], ["b", "4"], ["ind_c", "1"], ["ind_a", "1"]]}, {"line": 7, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "3"], ["b", "4"], ["ind_c", "1"], ["ind_a", "1"]]}, {"line": 12, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["cnt", "3"], ["b", "4"], ["ind_c", "1"], ["ind_a", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 4], [7, 9, 8, 7, 4], [7, 9, 8, 7, 9, 8, 7, 4]], "8": [[8, 7, 4], [8, 7, 9, 8, 7, 4]], "9": [[9, 8, 7, 4], [9, 8, 7, 9, 8, 7, 4]], "10": [[10, 8, 7, 4], [10, 8, 7, 9, 8, 7, 4]], "11": [[11, 10, 8, 7, 4], [11, 10, 8, 7, 9, 8, 7, 4]], "12": [[12, 11, 10, 8, 7, 9, 8, 7, 4]]}}
{"id": 1181, "code": "int N = 750;\nint a = N / 100;\nif (N > (a * 111)) {\nint b = a + 1;\nSystem.out.println(b * 111);\n} else {\nSystem.out.println(a * 111);}", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "int", "a", "=", "N", "/", "100", ";", "<2>", "if", "(", "N", ">", "(", "a", "*", "111", ")", ")", "{", "<3>", "int", "b", "=", "a", "+", "1", ";", "<4>", "System", ".", "out", ".", "println", "(", "b", "*", "111", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "a", "*", "111", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": [["N", "750"], ["a", "7"]]}, {"line": 2, "state": [["N", "750"], ["a", "7"]]}, {"line": 6, "state": [["N", "750"], ["a", "7"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "6": [[6, 2, 1, 0]]}}
{"id": 793, "code": "int K = 2;\nint ans = 1;\nint num = 0;\nint seven = 7;\nif (K % 2 == 0) {\nSystem.out.println(-1);}\nelse {\nfor (int i = 0; i < K; i++) {\nnum = num + seven;\nseven = seven * 10 % K;\nnum = num % K;\nif (num == 0) {\nSystem.out.println(ans);\nbreak;}\nans += 1;}\nelse {\nSystem.out.println(-1);}}", "code_tokens": ["<0>", "int", "K", "=", "2", ";", "<1>", "int", "ans", "=", "1", ";", "<2>", "int", "num", "=", "0", ";", "<3>", "int", "seven", "=", "7", ";", "<4>", "if", "(", "K", "%", "2", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "<6>", "else", "{", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "K", ";", "i", "++", ")", "{", "<8>", "num", "=", "num", "+", "seven", ";", "<9>", "seven", "=", "seven", "*", "10", "%", "K", ";", "<10>", "num", "=", "num", "%", "K", ";", "<11>", "if", "(", "num", "==", "0", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "<13>", "break", ";", "}", "<14>", "ans", "+=", "1", ";", "}", "<15>", "else", "{", "<16>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["K", "2"]]}, {"line": 1, "state": [["K", "2"], ["ans", "1"]]}, {"line": 2, "state": [["K", "2"], ["ans", "1"], ["num", "0"]]}, {"line": 3, "state": [["K", "2"], ["ans", "1"], ["num", "0"], ["seven", "7"]]}, {"line": 4, "state": [["K", "2"], ["ans", "1"], ["num", "0"], ["seven", "7"]]}, {"line": 5, "state": [["K", "2"], ["ans", "1"], ["num", "0"], ["seven", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0]], "5": [[5]]}}
{"id": 6051, "code": "int n = 100;\nSystem.out.println(n / 2 + n % 2);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "n", "%", "2", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15382, "code": "int x = 12, y = 3, z = 1;\nint ret = (x - z) / (y + z);\nSystem.out.println(ret);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "ret", "=", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ret", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ret", "2"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ret", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3583, "code": "int A = 12, B = 4;\nint ans = A - B * 2;\nSystem.out.println(Math.max(0, ans));", "code_tokens": ["<0>", "int", "A", "=", "12", ",", "B", "=", "4", ";", "<1>", "int", "ans", "=", "A", "-", "B", "*", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["A", "12"], ["B", "4"]]}, {"line": 1, "state": [["A", "12"], ["B", "4"], ["ans", "4"]]}, {"line": 2, "state": [["A", "12"], ["B", "4"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 8811, "code": "int n = 1;\nint[] au = {2};\nint[] al = {3};\nau = accumulate(au);\nal = reverseAccumulate(al);\nint maxSum = Integer.MIN_VALUE;for (int i = 0; i < au.length; i++) {maxSum = Math.max(maxSum, au[i] + al[i]);}System.out.println(maxSum);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "au", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "al", "=", "{", "3", "}", ";", "<3>", "au", "=", "accumulate", "(", "au", ")", ";", "<4>", "al", "=", "reverseAccumulate", "(", "al", ")", ";", "<5>", "int", "maxSum", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "au", ".", "length", ";", "i", "++", ")", "{", "maxSum", "=", "Math", ".", "max", "(", "maxSum", ",", "au", "[", "i", "]", "+", "al", "[", "i", "]", ")", ";", "}", "System", ".", "out", ".", "println", "(", "maxSum", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "1"]]}, {"line": 2, "state": [["n", "1"], ["au", "[ 2 ]"]]}, {"line": 3, "state": [["n", "1"], ["au", "[ 2 ]"], ["al", "[ 3 ]"]]}, {"line": 4, "state": [["n", "1"], ["al", "[ 3 ]"]]}, {"line": 5, "state": [["n", "1"]]}, {"line": 6, "state": []}, {"line": 6, "state": []}, {"line": 6, "state": [["x", "2"], ["y", "3"]]}, {"line": 6, "state": [["x", "2"], ["y", "3"]]}, {"line": 6, "state": [["x", "2"], ["y", "3"]]}, {"line": 6, "state": [["x", "2"], ["y", "3"]]}, {"line": 6, "state": [["n", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2]], "5": [[5, 4, 2]], "6": [[6, 5, 4, 2], [6, 5, 4, 2], [6, 5, 4, 2], [6, 5, 4, 2], [6, 5, 4, 2], [6, 5, 4, 2], [6, 5, 4, 2]]}}
{"id": 2260, "code": "int n = 10, a = 3, b = 5;\nSystem.out.println(Math.min(a, b) + \" \" + (a + b - n > 0 ? a + b - n : 0));", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "(", "a", "+", "b", "-", "n", ">", "0", "?", "a", "+", "b", "-", "n", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15561, "code": "int x = 64146, y = 123, z = 456;\nint ans = x / (y + z);\nif (x % (y + z) < z) {\nans -= 1;}\nSystem.out.println(Math.max(0, ans));", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "ans", "=", "x", "/", "(", "y", "+", "z", ")", ";", "<2>", "if", "(", "x", "%", "(", "y", "+", "z", ")", "<", "z", ")", "{", "<3>", "ans", "-=", "1", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}, {"line": 4, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 1, 0]]}}
{"id": 13581, "code": "String S = \"haiku,atcoder,tasks\";\nSystem.out.println(S.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "S", "=", "\"haiku,atcoder,tasks\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "S", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "haiku , atcoder , tasks"]]}, {"line": 1, "state": [["S", "haiku , atcoder , tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16771, "code": "String a = \"D\"; String b = \"H\";\nif (a.equals(b)) {System.out.println(\"H\");}\nelse {System.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "b", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<2>", "else", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 2, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 19119, "code": "int n = 5;\nint ans = 0;\nif (n % 2 == 0) {\nfor (int i = 1; i < 10000; i++) {\nlong waru = 2 * Math.pow(5, i);\nif (n < waru) {\nbreak;}\nelse {\nint tmp = n / (int) waru;\nans += tmp;}}}\nSystem.out.println(String.valueOf(ans));", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "10000", ";", "i", "++", ")", "{", "<4>", "long", "waru", "=", "2", "*", "Math", ".", "pow", "(", "5", ",", "i", ")", ";", "<5>", "if", "(", "n", "<", "waru", ")", "{", "<6>", "break", ";", "}", "<7>", "else", "{", "<8>", "int", "tmp", "=", "n", "/", "(", "int", ")", "waru", ";", "<9>", "ans", "+=", "tmp", ";", "}", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["ans", "0"]]}, {"line": 2, "state": [["n", "5"], ["ans", "0"]]}, {"line": 10, "state": [["n", "5"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "10": [[10, 1]]}}
{"id": 8633, "code": "int N = 5;\nint[] A = {3, 2, 2, 4, 1};\nint[] B = {1, 2, 2, 2, 1};\nfor (int i = 1; i < N; i++) {A[i] += A[i - 1];}\nfor (int i = N - 2; i >= 0; i--) {B[i] += B[i + 1];}\nint ans = Integer.MIN_VALUE;for (int i = 0; i < N; i++) {ans = Math.max(ans, A[i] + B[i]);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "A", "[", "i", "]", "+=", "A", "[", "i", "-", "1", "]", ";", "}", "<4>", "for", "(", "int", "i", "=", "N", "-", "2", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "B", "[", "i", "]", "+=", "B", "[", "i", "+", "1", "]", ";", "}", "<5>", "int", "ans", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "ans", "=", "Math", ".", "max", "(", "ans", ",", "A", "[", "i", "]", "+", "B", "[", "i", "]", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 5 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["i", "1"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["i", "2"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["i", "3"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["i", "4"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["i", "4"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 1 , 2 , 2 , 3 , 1 ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 1 , 2 , 5 , 3 , 1 ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 1 , 7 , 5 , 3 , 1 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 8 , 7 , 5 , 3 , 1 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 8 , 7 , 5 , 3 , 1 ]"], ["i", "0"]]}, {"line": 5, "state": []}, {"line": 5, "state": []}, {"line": 5, "state": [["i", "0"]]}, {"line": 5, "state": [["i", "0"]]}, {"line": 5, "state": [["i", "0"]]}, {"line": 5, "state": [["i", "1"]]}, {"line": 5, "state": [["i", "1"]]}, {"line": 5, "state": [["i", "1"]]}, {"line": 5, "state": [["i", "2"]]}, {"line": 5, "state": [["i", "2"]]}, {"line": 5, "state": [["i", "2"]]}, {"line": 5, "state": [["i", "3"]]}, {"line": 5, "state": [["i", "3"]]}, {"line": 5, "state": [["i", "3"]]}, {"line": 5, "state": [["i", "4"]]}, {"line": 5, "state": [["i", "4"]]}, {"line": 5, "state": [["i", "4"]]}, {"line": 5, "state": [["i", "4"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 8 , 7 , 5 , 3 , 1 ]"], ["i", "0"], ["ans", "14"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 5 , 7 , 11 , 12 ]"], ["B", "[ 8 , 7 , 5 , 3 , 1 ]"], ["i", "0"], ["ans", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0], [3, 1, 0], [3, 1, 0], [3, 1, 0], [3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 1, 0], [4, 3, 1, 0], [4, 3, 1, 0], [4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0], [5, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 1, 0]]}}
{"id": 2067, "code": "int B = 5, A = 7, N = 10;\nSystem.out.println(B + \", \" + Math.max(A + B - N, 0));", "code_tokens": ["<0>", "int", "B", "=", "5", ",", "A", "=", "7", ",", "N", "=", "10", ";", "<1>", "System", ".", "out", ".", "println", "(", "B", "+", "\", \"", "+", "Math", ".", "max", "(", "A", "+", "B", "-", "N", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["B", "5"], ["A", "7"], ["N", "10"]]}, {"line": 1, "state": [["B", "5"], ["A", "7"], ["N", "10"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16434, "code": "int n = 2;\nint[] a = {100, 0};\nint m = a[0];for (int num : a) {if (num > m) {m = num;}}\nint r = 0;\nfor (int i = 0; i < n; i++) {\nif (Math.abs(m / 2.0 - a[i]) < Math.abs(m / 2.0 - r)) {\nr = a[i];}}\nSystem.out.println(m + \" \" + r);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "int", "m", "=", "a", "[", "0", "]", ";", "for", "(", "int", "num", ":", "a", ")", "{", "if", "(", "num", ">", "m", ")", "{", "m", "=", "num", ";", "}", "}", "<3>", "int", "r", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "Math", ".", "abs", "(", "m", "/", "2.0", "-", "a", "[", "i", "]", ")", "<", "Math", ".", "abs", "(", "m", "/", "2.0", "-", "r", ")", ")", "{", "<6>", "r", "=", "a", "[", "i", "]", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "m", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"], ["i", "0"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["r", "0"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0]], "7": [[7, 5, 4, 5, 4, 0]]}}
{"id": 18257, "code": "int H = 3;\nint W = 7;\nint N = 10;\nint A_div = N / H;int A_mod = N % H;\nif (A_mod != 0) {\nA_div += 1;}\nint B_div = N / W;int B_mod = N % W;\nif (B_mod != 0) {\nB_div += 1;}\nSystem.out.println(Math.min(A_div, B_div));", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "int", "A_div", "=", "N", "/", "H", ";", "int", "A_mod", "=", "N", "%", "H", ";", "<4>", "if", "(", "A_mod", "!=", "0", ")", "{", "<5>", "A_div", "+=", "1", ";", "}", "<6>", "int", "B_div", "=", "N", "/", "W", ";", "int", "B_mod", "=", "N", "%", "W", ";", "<7>", "if", "(", "B_mod", "!=", "0", ")", "{", "<8>", "B_div", "+=", "1", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A_div", ",", "B_div", ")", ")", ";"], "trace": [{"line": 0, "state": [["H", "3"]]}, {"line": 1, "state": [["H", "3"], ["W", "7"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "3"], ["A_mod", "1"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "3"], ["A_mod", "1"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "4"], ["A_mod", "1"]]}, {"line": 6, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "4"], ["A_mod", "1"], ["B_div", "1"], ["B_mod", "3"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "4"], ["A_mod", "1"], ["B_div", "1"], ["B_mod", "3"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "4"], ["A_mod", "1"], ["B_div", "2"], ["B_mod", "3"]]}, {"line": 9, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["A_div", "4"], ["A_mod", "1"], ["B_div", "2"], ["B_mod", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]], "5": [[5, 3, 2, 0]], "6": [[6, 3, 2, 0]], "7": [[7, 6, 3, 2, 0]], "8": [[8, 6, 3, 2, 0]], "9": [[9, 8, 6, 3, 2, 0]]}}
{"id": 5811, "code": "int n = 100;\nif (n % 2 == 0) {\nSystem.out.println(n / 2);}\nif (n % 2 != 0) {\nSystem.out.println(n / 2 + 1);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}", "<3>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}, {"line": 2, "state": [["n", "100"]]}, {"line": 3, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 15193, "code": "int X = 12, Y = 3, Z = 1;\nint result = X / (Y + Z) - 1;\nwhile (X >= (result + 1) * Y + (result + 2) * Z) {\nresult += 1;}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "result", "=", "X", "/", "(", "Y", "+", "Z", ")", "-", "1", ";", "<2>", "while", "(", "X", ">=", "(", "result", "+", "1", ")", "*", "Y", "+", "(", "result", "+", "2", ")", "*", "Z", ")", "{", "<3>", "result", "+=", "1", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["result", "2"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["result", "2"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["result", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]]}}
{"id": 13538, "code": "String a = \"happy\"; String b = \"newyear\"; String c = \"enjoy\";\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "a", "=", "\"happy\"", ";", "String", "b", "=", "\"newyear\"", ";", "String", "c", "=", "\"enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}, {"line": 1, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4845, "code": "char[] s = {'x', 'y', 'z'};\nString ans = s[0] + String.valueOf(s.length - 2) + s[s.length - 1];\nSystem.out.println(ans);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "String", "ans", "=", "s", "[", "0", "]", "+", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", "+", "s", "[", "s", ".", "length", "-", "1", "]", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["ans", "x1z"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["ans", "x1z"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1656, "code": "int n = 10, a = 7, b = 5;\nint max;if (a < b) {\nmax = a;}\nelse {\nmax = b;}\nint min = (a + b) - n;\nif (min < 0) {\nmin = 0;}\nSystem.out.println(max + \" \" + min);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "max", ";", "if", "(", "a", "<", "b", ")", "{", "<2>", "max", "=", "a", ";", "}", "<3>", "else", "{", "<4>", "max", "=", "b", ";", "}", "<5>", "int", "min", "=", "(", "a", "+", "b", ")", "-", "n", ";", "<6>", "if", "(", "min", "<", "0", ")", "{", "<7>", "min", "=", "0", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "max", "+", "\" \"", "+", "min", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 4, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max", "5"]]}, {"line": 5, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max", "5"], ["min", "2"]]}, {"line": 6, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max", "5"], ["min", "2"]]}, {"line": 8, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max", "5"], ["min", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]], "6": [[6, 5, 4, 1, 0]], "8": [[8, 6, 5, 4, 1, 0]]}}
{"id": 13272, "code": "String a = \"haiku,atcoder,tasks\";\nString b = a.replace(\",\", \" \");\nSystem.out.println(b);", "code_tokens": ["<0>", "String", "a", "=", "\"haiku,atcoder,tasks\"", ";", "<1>", "String", "b", "=", "a", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";"], "trace": [{"line": 0, "state": [["a", "haiku , atcoder , tasks"]]}, {"line": 1, "state": [["a", "haiku , atcoder , tasks"], ["b", "haiku atcoder tasks"]]}, {"line": 2, "state": [["a", "haiku , atcoder , tasks"], ["b", "haiku atcoder tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 972, "code": "int n = 112;\nwhile (String.valueOf(n).chars().distinct().count() != 1) {\nn += 1;}\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "n", "=", "112", ";", "<1>", "while", "(", "String", ".", "valueOf", "(", "n", ")", ".", "chars", "(", ")", ".", "distinct", "(", ")", ".", "count", "(", ")", "!=", "1", ")", "{", "<2>", "n", "+=", "1", ";", "}", "<3>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["n", "112"]]}, {"line": 1, "state": [["n", "112"]]}, {"line": 2, "state": [["n", "113"]]}, {"line": 1, "state": [["n", "113"]]}, {"line": 2, "state": [["n", "114"]]}, {"line": 1, "state": [["n", "114"]]}, {"line": 2, "state": [["n", "115"]]}, {"line": 1, "state": [["n", "115"]]}, {"line": 2, "state": [["n", "116"]]}, {"line": 1, "state": [["n", "116"]]}, {"line": 2, "state": [["n", "117"]]}, {"line": 1, "state": [["n", "117"]]}, {"line": 2, "state": [["n", "118"]]}, {"line": 1, "state": [["n", "118"]]}, {"line": 2, "state": [["n", "119"]]}, {"line": 1, "state": [["n", "119"]]}, {"line": 2, "state": [["n", "120"]]}, {"line": 1, "state": [["n", "120"]]}, {"line": 2, "state": [["n", "121"]]}, {"line": 1, "state": [["n", "121"]]}, {"line": 2, "state": [["n", "122"]]}, {"line": 1, "state": [["n", "122"]]}, {"line": 2, "state": [["n", "123"]]}, {"line": 1, "state": [["n", "123"]]}, {"line": 2, "state": [["n", "124"]]}, {"line": 1, "state": [["n", "124"]]}, {"line": 2, "state": [["n", "125"]]}, {"line": 1, "state": [["n", "125"]]}, {"line": 2, "state": [["n", "126"]]}, {"line": 1, "state": [["n", "126"]]}, {"line": 2, "state": [["n", "127"]]}, {"line": 1, "state": [["n", "127"]]}, {"line": 2, "state": [["n", "128"]]}, {"line": 1, "state": [["n", "128"]]}, {"line": 2, "state": [["n", "129"]]}, {"line": 1, "state": [["n", "129"]]}, {"line": 2, "state": [["n", "130"]]}, {"line": 1, "state": [["n", "130"]]}, {"line": 2, "state": [["n", "131"]]}, {"line": 1, "state": [["n", "131"]]}, {"line": 2, "state": [["n", "132"]]}, {"line": 1, "state": [["n", "132"]]}, {"line": 2, "state": [["n", "133"]]}, {"line": 1, "state": [["n", "133"]]}, {"line": 2, "state": [["n", "134"]]}, {"line": 1, "state": [["n", "134"]]}, {"line": 2, "state": [["n", "135"]]}, {"line": 1, "state": [["n", "135"]]}, {"line": 2, "state": [["n", "136"]]}, {"line": 1, "state": [["n", "136"]]}, {"line": 2, "state": [["n", "137"]]}, {"line": 1, "state": [["n", "137"]]}, {"line": 2, "state": [["n", "138"]]}, {"line": 1, "state": [["n", "138"]]}, {"line": 2, "state": [["n", "139"]]}, {"line": 1, "state": [["n", "139"]]}, {"line": 2, "state": [["n", "140"]]}, {"line": 1, "state": [["n", "140"]]}, {"line": 2, "state": [["n", "141"]]}, {"line": 1, "state": [["n", "141"]]}, {"line": 2, "state": [["n", "142"]]}, {"line": 1, "state": [["n", "142"]]}, {"line": 2, "state": [["n", "143"]]}, {"line": 1, "state": [["n", "143"]]}, {"line": 2, "state": [["n", "144"]]}, {"line": 1, "state": [["n", "144"]]}, {"line": 2, "state": [["n", "145"]]}, {"line": 1, "state": [["n", "145"]]}, {"line": 2, "state": [["n", "146"]]}, {"line": 1, "state": [["n", "146"]]}, {"line": 2, "state": [["n", "147"]]}, {"line": 1, "state": [["n", "147"]]}, {"line": 2, "state": [["n", "148"]]}, {"line": 1, "state": [["n", "148"]]}, {"line": 2, "state": [["n", "149"]]}, {"line": 1, "state": [["n", "149"]]}, {"line": 2, "state": [["n", "150"]]}, {"line": 1, "state": [["n", "150"]]}, {"line": 2, "state": [["n", "151"]]}, {"line": 1, "state": [["n", "151"]]}, {"line": 2, "state": [["n", "152"]]}, {"line": 1, "state": [["n", "152"]]}, {"line": 2, "state": [["n", "153"]]}, {"line": 1, "state": [["n", "153"]]}, {"line": 2, "state": [["n", "154"]]}, {"line": 1, "state": [["n", "154"]]}, {"line": 2, "state": [["n", "155"]]}, {"line": 1, "state": [["n", "155"]]}, {"line": 2, "state": [["n", "156"]]}, {"line": 1, "state": [["n", "156"]]}, {"line": 2, "state": [["n", "157"]]}, {"line": 1, "state": [["n", "157"]]}, {"line": 2, "state": [["n", "158"]]}, {"line": 1, "state": [["n", "158"]]}, {"line": 2, "state": [["n", "159"]]}, {"line": 1, "state": [["n", "159"]]}, {"line": 2, "state": [["n", "160"]]}, {"line": 1, "state": [["n", "160"]]}, {"line": 2, "state": [["n", "161"]]}, {"line": 1, "state": [["n", "161"]]}, {"line": 2, "state": [["n", "162"]]}, {"line": 1, "state": [["n", "162"]]}, {"line": 2, "state": [["n", "163"]]}, {"line": 1, "state": [["n", "163"]]}, {"line": 2, "state": [["n", "164"]]}, {"line": 1, "state": [["n", "164"]]}, {"line": 2, "state": [["n", "165"]]}, {"line": 1, "state": [["n", "165"]]}, {"line": 2, "state": [["n", "166"]]}, {"line": 1, "state": [["n", "166"]]}, {"line": 2, "state": [["n", "167"]]}, {"line": 1, "state": [["n", "167"]]}, {"line": 2, "state": [["n", "168"]]}, {"line": 1, "state": [["n", "168"]]}, {"line": 2, "state": [["n", "169"]]}, {"line": 1, "state": [["n", "169"]]}, {"line": 2, "state": [["n", "170"]]}, {"line": 1, "state": [["n", "170"]]}, {"line": 2, "state": [["n", "171"]]}, {"line": 1, "state": [["n", "171"]]}, {"line": 2, "state": [["n", "172"]]}, {"line": 1, "state": [["n", "172"]]}, {"line": 2, "state": [["n", "173"]]}, {"line": 1, "state": [["n", "173"]]}, {"line": 2, "state": [["n", "174"]]}, {"line": 1, "state": [["n", "174"]]}, {"line": 2, "state": [["n", "175"]]}, {"line": 1, "state": [["n", "175"]]}, {"line": 2, "state": [["n", "176"]]}, {"line": 1, "state": [["n", "176"]]}, {"line": 2, "state": [["n", "177"]]}, {"line": 1, "state": [["n", "177"]]}, {"line": 2, "state": [["n", "178"]]}, {"line": 1, "state": [["n", "178"]]}, {"line": 2, "state": [["n", "179"]]}, {"line": 1, "state": [["n", "179"]]}, {"line": 2, "state": [["n", "180"]]}, {"line": 1, "state": [["n", "180"]]}, {"line": 2, "state": [["n", "181"]]}, {"line": 1, "state": [["n", "181"]]}, {"line": 2, "state": [["n", "182"]]}, {"line": 1, "state": [["n", "182"]]}, {"line": 2, "state": [["n", "183"]]}, {"line": 1, "state": [["n", "183"]]}, {"line": 2, "state": [["n", "184"]]}, {"line": 1, "state": [["n", "184"]]}, {"line": 2, "state": [["n", "185"]]}, {"line": 1, "state": [["n", "185"]]}, {"line": 2, "state": [["n", "186"]]}, {"line": 1, "state": [["n", "186"]]}, {"line": 2, "state": [["n", "187"]]}, {"line": 1, "state": [["n", "187"]]}, {"line": 2, "state": [["n", "188"]]}, {"line": 1, "state": [["n", "188"]]}, {"line": 2, "state": [["n", "189"]]}, {"line": 1, "state": [["n", "189"]]}, {"line": 2, "state": [["n", "190"]]}, {"line": 1, "state": [["n", "190"]]}, {"line": 2, "state": [["n", "191"]]}, {"line": 1, "state": [["n", "191"]]}, {"line": 2, "state": [["n", "192"]]}, {"line": 1, "state": [["n", "192"]]}, {"line": 2, "state": [["n", "193"]]}, {"line": 1, "state": [["n", "193"]]}, {"line": 2, "state": [["n", "194"]]}, {"line": 1, "state": [["n", "194"]]}, {"line": 2, "state": [["n", "195"]]}, {"line": 1, "state": [["n", "195"]]}, {"line": 2, "state": [["n", "196"]]}, {"line": 1, "state": [["n", "196"]]}, {"line": 2, "state": [["n", "197"]]}, {"line": 1, "state": [["n", "197"]]}, {"line": 2, "state": [["n", "198"]]}, {"line": 1, "state": [["n", "198"]]}, {"line": 2, "state": [["n", "199"]]}, {"line": 1, "state": [["n", "199"]]}, {"line": 2, "state": [["n", "200"]]}, {"line": 1, "state": [["n", "200"]]}, {"line": 2, "state": [["n", "201"]]}, {"line": 1, "state": [["n", "201"]]}, {"line": 2, "state": [["n", "202"]]}, {"line": 1, "state": [["n", "202"]]}, {"line": 2, "state": [["n", "203"]]}, {"line": 1, "state": [["n", "203"]]}, {"line": 2, "state": [["n", "204"]]}, {"line": 1, "state": [["n", "204"]]}, {"line": 2, "state": [["n", "205"]]}, {"line": 1, "state": [["n", "205"]]}, {"line": 2, "state": [["n", "206"]]}, {"line": 1, "state": [["n", "206"]]}, {"line": 2, "state": [["n", "207"]]}, {"line": 1, "state": [["n", "207"]]}, {"line": 2, "state": [["n", "208"]]}, {"line": 1, "state": [["n", "208"]]}, {"line": 2, "state": [["n", "209"]]}, {"line": 1, "state": [["n", "209"]]}, {"line": 2, "state": [["n", "210"]]}, {"line": 1, "state": [["n", "210"]]}, {"line": 2, "state": [["n", "211"]]}, {"line": 1, "state": [["n", "211"]]}, {"line": 2, "state": [["n", "212"]]}, {"line": 1, "state": [["n", "212"]]}, {"line": 2, "state": [["n", "213"]]}, {"line": 1, "state": [["n", "213"]]}, {"line": 2, "state": [["n", "214"]]}, {"line": 1, "state": [["n", "214"]]}, {"line": 2, "state": [["n", "215"]]}, {"line": 1, "state": [["n", "215"]]}, {"line": 2, "state": [["n", "216"]]}, {"line": 1, "state": [["n", "216"]]}, {"line": 2, "state": [["n", "217"]]}, {"line": 1, "state": [["n", "217"]]}, {"line": 2, "state": [["n", "218"]]}, {"line": 1, "state": [["n", "218"]]}, {"line": 2, "state": [["n", "219"]]}, {"line": 1, "state": [["n", "219"]]}, {"line": 2, "state": [["n", "220"]]}, {"line": 1, "state": [["n", "220"]]}, {"line": 2, "state": [["n", "221"]]}, {"line": 1, "state": [["n", "221"]]}, {"line": 2, "state": [["n", "222"]]}, {"line": 1, "state": [["n", "222"]]}, {"line": 3, "state": [["n", "222"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "2": [[2, 1, 0], [2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "3": [[3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]]}}
{"id": 11344, "code": "String s = \"SAT\";\nString[] youbi = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint index = java.util.Arrays.asList(youbi).indexOf(s);\nint day = 7 - index;\nif (day == 0) {\nSystem.out.println(7);\n} else {\nSystem.out.println(day);}", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "youbi", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "index", "=", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "youbi", ")", ".", "indexOf", "(", "s", ")", ";", "<3>", "int", "day", "=", "7", "-", "index", ";", "<4>", "if", "(", "day", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "day", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["youbi", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["s", "SAT"], ["youbi", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["index", "6"]]}, {"line": 3, "state": [["s", "SAT"], ["youbi", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["index", "6"], ["day", "1"]]}, {"line": 4, "state": [["s", "SAT"], ["youbi", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["index", "6"], ["day", "1"]]}, {"line": 7, "state": [["s", "SAT"], ["youbi", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["index", "6"], ["day", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "7": [[7, 4, 3, 2, 1, 0]]}}
{"id": 9612, "code": "char[] S = {'2', '0', '1', '7', '/', '0', '1', '/', '0', '7'};\nS[3] = '8';\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'2'", ",", "'0'", ",", "'1'", ",", "'7'", ",", "'/'", ",", "'0'", ",", "'1'", ",", "'/'", ",", "'0'", ",", "'7'", "}", ";", "<1>", "S", "[", "3", "]", "=", "'8'", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ 2 , 0 , 1 , 7 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 1, "state": [["S", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 2, "state": [["S", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 16747, "code": "char[] i_list = {'D', 'H'};\nchar a = i_list[0];\nchar b = i_list[1];\nchar r = ' ';\nif (a == 'H') {\nr = b;}\nelse {\nr = (b == 'D') ? 'H' : 'D';}\nSystem.out.println(r);", "code_tokens": ["<0>", "char", "[", "]", "i_list", "=", "{", "'D'", ",", "'H'", "}", ";", "<1>", "char", "a", "=", "i_list", "[", "0", "]", ";", "<2>", "char", "b", "=", "i_list", "[", "1", "]", ";", "<3>", "char", "r", "=", "' '", ";", "<4>", "if", "(", "a", "==", "'H'", ")", "{", "<5>", "r", "=", "b", ";", "}", "<6>", "else", "{", "<7>", "r", "=", "(", "b", "==", "'D'", ")", "?", "'H'", ":", "'D'", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "r", ")", ";"], "trace": [{"line": 0, "state": [["i_list", "[ D , H ]"]]}, {"line": 1, "state": [["i_list", "[ D , H ]"], ["a", "D"]]}, {"line": 2, "state": [["i_list", "[ D , H ]"], ["a", "D"], ["b", "H"]]}, {"line": 3, "state": [["i_list", "[ D , H ]"], ["a", "D"], ["b", "H"], ["r", ""]]}, {"line": 4, "state": [["i_list", "[ D , H ]"], ["a", "D"], ["b", "H"], ["r", ""]]}, {"line": 7, "state": [["i_list", "[ D , H ]"], ["a", "D"], ["b", "H"], ["r", "D"]]}, {"line": 8, "state": [["i_list", "[ D , H ]"], ["a", "D"], ["b", "H"], ["r", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]], "4": [[4, 1, 0]], "7": [[7, 3, 2, 1, 0]], "8": [[8, 7, 3, 2, 1, 0]]}}
{"id": 15833, "code": "int X = 12, Y = 3, Z = 1;\nint sum = 0;int ans = 0; // Initialize ans to be used later\nfor (int i = 1; i < X; i++) {\nif (sum > X) {\nans = i - 2;\nbreak;}\nif (sum == X) {\nans = i - 1;\nbreak;}\nelse {\nsum = Y * i + Z * (i + 1);}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "sum", "=", "0", ";", "int", "ans", "=", "0", ";", "// Initialize ans to be used later", "<2>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "X", ";", "i", "++", ")", "{", "<3>", "if", "(", "sum", ">", "X", ")", "{", "<4>", "ans", "=", "i", "-", "2", ";", "<5>", "break", ";", "}", "<6>", "if", "(", "sum", "==", "X", ")", "{", "<7>", "ans", "=", "i", "-", "1", ";", "<8>", "break", ";", "}", "<9>", "else", "{", "<10>", "sum", "=", "Y", "*", "i", "+", "Z", "*", "(", "i", "+", "1", ")", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "0"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "0"], ["i", "1"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "0"], ["i", "1"]]}, {"line": 6, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "0"], ["i", "1"]]}, {"line": 10, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "5"], ["i", "1"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "5"], ["i", "2"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "5"], ["i", "2"]]}, {"line": 6, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "5"], ["i", "2"]]}, {"line": 10, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "9"], ["i", "2"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "9"], ["i", "3"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "9"], ["i", "3"]]}, {"line": 6, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "9"], ["i", "3"]]}, {"line": 10, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "13"], ["i", "3"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "13"], ["i", "4"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "13"], ["i", "4"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "13"], ["i", "4"], ["ans", "2"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "13"], ["i", "4"], ["ans", "2"]]}, {"line": 11, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["sum", "13"], ["i", "4"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 10, 6, 3, 2, 0], [2, 10, 6, 3, 2, 10, 6, 3, 2, 0], [2, 10, 6, 3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 10, 6, 3, 2, 0], [3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0], [3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0]], "4": [[4, 2, 10, 6, 3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0]], "5": [[5]], "6": [[6, 3, 2, 0], [6, 3, 2, 10, 6, 3, 2, 0], [6, 3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0]], "10": [[10, 6, 3, 2, 0], [10, 6, 3, 2, 10, 6, 3, 2, 0], [10, 6, 3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0]], "11": [[11, 4, 2, 10, 6, 3, 2, 10, 6, 3, 2, 10, 6, 3, 2, 0]]}}
{"id": 13455, "code": "String a = \"haiku,atcoder,tasks\";\nSystem.out.println(a.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "a", "=", "\"haiku,atcoder,tasks\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "haiku , atcoder , tasks"]]}, {"line": 1, "state": [["a", "haiku , atcoder , tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6381, "code": "int N = 6;\nint[] A = {3, 14, 159, 2, 6, 53};\nint[] B = {58, 9, 79, 323, 84, 6};\nint[] C = {2643, 383, 2, 79, 50, 288};\nArrays.sort(A);\nArrays.sort(C);\nint ans = 0;\nfor (int b : B) {\nint x = bisectLeft(A, b);\nint y = N - bisectRight(C, b);\nans += x * y;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "14", ",", "159", ",", "2", ",", "6", ",", "53", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "58", ",", "9", ",", "79", ",", "323", ",", "84", ",", "6", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "2643", ",", "383", ",", "2", ",", "79", ",", "50", ",", "288", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A", ")", ";", "<5>", "Arrays", ".", "sort", "(", "C", ")", ";", "<6>", "int", "ans", "=", "0", ";", "<7>", "for", "(", "int", "b", ":", "B", ")", "{", "<8>", "int", "x", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<9>", "int", "y", "=", "N", "-", "bisectRight", "(", "C", ",", "b", ")", ";", "<10>", "ans", "+=", "x", "*", "y", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["A", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"], ["x", "5"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"], ["x", "5"], ["y", "4"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "58"], ["x", "5"], ["y", "4"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"], ["x", "5"], ["y", "4"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"], ["x", "3"], ["y", "4"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"], ["x", "3"], ["y", "5"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "9"], ["x", "3"], ["y", "5"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"], ["x", "3"], ["y", "5"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"], ["x", "5"], ["y", "5"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"], ["x", "5"], ["y", "3"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "79"], ["x", "5"], ["y", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"], ["x", "5"], ["y", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"], ["x", "6"], ["y", "3"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"], ["x", "6"], ["y", "2"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "323"], ["x", "6"], ["y", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"], ["x", "6"], ["y", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"], ["x", "5"], ["y", "2"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"], ["x", "5"], ["y", "3"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "84"], ["x", "5"], ["y", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"], ["x", "5"], ["y", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"], ["x", "2"], ["y", "3"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"], ["x", "2"], ["y", "5"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"], ["x", "2"], ["y", "5"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"], ["x", "2"], ["y", "5"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"], ["x", "2"], ["y", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 3]], "6": [[6]], "7": [[7]], "8": [[8, 2], [8, 10, 9, 8, 2], [8, 10, 9, 8, 10, 9, 8, 2], [8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2]], "9": [[9, 8, 2], [9, 8, 10, 9, 8, 2], [9, 8, 10, 9, 8, 10, 9, 8, 2], [9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2]], "10": [[10, 9, 8, 2], [10, 9, 8, 10, 9, 8, 2], [10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2]], "11": [[11, 10, 9, 8, 2], [11, 10, 9, 8, 10, 9, 8, 2], [11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2], [11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2]], "12": [[12, 11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 2]]}}
{"id": 7598, "code": "int h = 20, n = 3;\nint[] a = {4, 5, 6};\nSystem.out.println((sum(a) >= h) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "sum", "(", "a", ")", ">=", "h", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 11214, "code": "String S = \"SAT\";\nint a = -1; // Initialize a with an invalid valueif (S.equals(\"SUN\")) {\na = 0;}\nelse if (S.equals(\"MON\")) {\na = 1;}\nelse if (S.equals(\"TUE\")) {\na = 2;}\nelse if (S.equals(\"WED\")) {\na = 3;}\nelse if (S.equals(\"THU\")) {\na = 4;}\nelse if (S.equals(\"FRI\")) {\na = 5;}\nelse if (S.equals(\"SAT\")) {\na = 6;}\nint answer = 7 - a;\nSystem.out.println(answer);", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "int", "a", "=", "-", "1", ";", "// Initialize a with an invalid valueif (S.equals(\"SUN\")) {", "<2>", "a", "=", "0", ";", "}", "<3>", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "a", "=", "1", ";", "}", "<5>", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "a", "=", "2", ";", "}", "<7>", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "a", "=", "3", ";", "}", "<9>", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "a", "=", "4", ";", "}", "<11>", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "a", "=", "5", ";", "}", "<13>", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "a", "=", "6", ";", "}", "<15>", "int", "answer", "=", "7", "-", "a", ";", "<16>", "System", ".", "out", ".", "println", "(", "answer", ")", ";"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"]]}, {"line": 3, "state": [["S", "SAT"]]}, {"line": 5, "state": [["S", "SAT"]]}, {"line": 7, "state": [["S", "SAT"]]}, {"line": 9, "state": [["S", "SAT"]]}, {"line": 11, "state": [["S", "SAT"]]}, {"line": 13, "state": [["S", "SAT"]]}, {"line": 14, "state": [["S", "SAT"], ["a", "6"]]}, {"line": 15, "state": [["S", "SAT"], ["a", "6"], ["answer", "1"]]}, {"line": 16, "state": [["S", "SAT"], ["a", "6"], ["answer", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]], "7": [[7, 5, 3, 1, 0]], "9": [[9, 7, 5, 3, 1, 0]], "11": [[11, 9, 7, 5, 3, 1, 0]], "13": [[13, 11, 9, 7, 5, 3, 1, 0]], "14": [[14]], "15": [[15, 14]], "16": [[16, 15, 14]]}}
{"id": 14873, "code": "int N = 2, P = 0;\nint[] A = {1, 3};\nint[][] dp = new int[N + 1][2];\ndp[0][0] = 1;\nfor (int k = 0; k < N; k++) {\nif (A[k] % 2 == 0) {\ndp[k + 1][0] = dp[k][0] * 2;\ndp[k + 1][1] = dp[k][1] * 2;}\nelse {\ndp[k + 1][0] = dp[k][0] + dp[k][1];\ndp[k + 1][1] = dp[k][1] + dp[k][0];}}\nSystem.out.println(dp[N][P]);", "code_tokens": ["<0>", "int", "N", "=", "2", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "[", "]", "[", "]", "dp", "=", "new", "int", "[", "N", "+", "1", "]", "[", "2", "]", ";", "<3>", "dp", "[", "0", "]", "[", "0", "]", "=", "1", ";", "<4>", "for", "(", "int", "k", "=", "0", ";", "k", "<", "N", ";", "k", "++", ")", "{", "<5>", "if", "(", "A", "[", "k", "]", "%", "2", "==", "0", ")", "{", "<6>", "dp", "[", "k", "+", "1", "]", "[", "0", "]", "=", "dp", "[", "k", "]", "[", "0", "]", "*", "2", ";", "<7>", "dp", "[", "k", "+", "1", "]", "[", "1", "]", "=", "dp", "[", "k", "]", "[", "1", "]", "*", "2", ";", "}", "<8>", "else", "{", "<9>", "dp", "[", "k", "+", "1", "]", "[", "0", "]", "=", "dp", "[", "k", "]", "[", "0", "]", "+", "dp", "[", "k", "]", "[", "1", "]", ";", "<10>", "dp", "[", "k", "+", "1", "]", "[", "1", "]", "=", "dp", "[", "k", "]", "[", "1", "]", "+", "dp", "[", "k", "]", "[", "0", "]", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "dp", "[", "N", "]", "[", "P", "]", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"], ["P", "0"]]}, {"line": 1, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["k", "0"]]}, {"line": 2, "state": [["k", "1"]]}, {"line": 2, "state": [["k", "2"]]}, {"line": 2, "state": [["k", "2"]]}, {"line": 2, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"]]}, {"line": 3, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["k", "0"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["k", "0"]]}, {"line": 9, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 0 ] , [ 0 , 0 ] ]"], ["k", "0"]]}, {"line": 10, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] ]"], ["k", "0"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] ]"], ["k", "1"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] ]"], ["k", "1"]]}, {"line": 9, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 0 ] ]"], ["k", "1"]]}, {"line": 10, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ]"], ["k", "1"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ]"], ["k", "1"]]}, {"line": 11, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ]"], ["k", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0]], "3": [[3, 2, 0]], "4": [[4, 2, 0], [4, 10, 9, 5, 4, 2, 0], [4, 10, 9, 5, 4, 10, 9, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 10, 9, 5, 4, 2, 0]], "9": [[9, 5, 4, 2, 0], [9, 5, 4, 10, 9, 5, 4, 2, 0]], "10": [[10, 9, 5, 4, 2, 0], [10, 9, 5, 4, 10, 9, 5, 4, 2, 0]], "11": [[11, 4, 10, 9, 5, 4, 10, 9, 5, 4, 2, 0]]}}
{"id": 6640, "code": "int n = 2;\nint[] A = {1, 5};\nint[] B = {2, 4};\nint[] C = {3, 6};\nint ans = 0;\nfor (int b : B) {\nint index_a = bisectLeft(A, b);\nint index_c = bisectRight(C, b);\nans += index_a * (n - index_c);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "B", ")", "{", "<6>", "int", "index_a", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<7>", "int", "index_c", "=", "bisectRight", "(", "C", ",", "b", ")", ";", "<8>", "ans", "+=", "index_a", "*", "(", "n", "-", "index_c", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["A", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"], ["index_a", "1"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"], ["index_a", "1"], ["index_c", "0"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "2"], ["index_a", "1"], ["index_c", "0"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["index_a", "1"], ["index_c", "0"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["index_a", "1"], ["index_c", "0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["index_a", "1"], ["index_c", "1"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["index_a", "1"], ["index_c", "1"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["index_a", "1"], ["index_c", "1"]]}, {"line": 10, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["index_a", "1"], ["index_c", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 1886, "code": "int[] num = {10, 7, 5};\nint a = Math.min(num[1], num[2]);\nint b = Math.max(0, (num[1] + num[2]) - num[0]);\nSystem.out.println(a + \" \" + b);", "code_tokens": ["<0>", "int", "[", "]", "num", "=", "{", "10", ",", "7", ",", "5", "}", ";", "<1>", "int", "a", "=", "Math", ".", "min", "(", "num", "[", "1", "]", ",", "num", "[", "2", "]", ")", ";", "<2>", "int", "b", "=", "Math", ".", "max", "(", "0", ",", "(", "num", "[", "1", "]", "+", "num", "[", "2", "]", ")", "-", "num", "[", "0", "]", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["num", "[ 10 , 7 , 5 ]"]]}, {"line": 1, "state": [["num", "[ 10 , 7 , 5 ]"], ["a", "5"]]}, {"line": 2, "state": [["num", "[ 10 , 7 , 5 ]"], ["a", "5"], ["b", "2"]]}, {"line": 3, "state": [["num", "[ 10 , 7 , 5 ]"], ["a", "5"], ["b", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 14018, "code": "int n = 9;\nint[] A = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint ans = 1;\nint d = 0;\nfor (int i = 1; i < n; i++) {\nint diff = A[i] - A[i - 1];\nif (d == 0) {\nd = diff;}\nelse if (d * diff < 0) {\nd = 0;\nans += 1;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "9", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "int", "d", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "diff", "=", "A", "[", "i", "]", "-", "A", "[", "i", "-", "1", "]", ";", "<6>", "if", "(", "d", "==", "0", ")", "{", "<7>", "d", "=", "diff", ";", "}", "<8>", "else", "if", "(", "d", "*", "diff", "<", "0", ")", "{", "<9>", "d", "=", "0", ";", "<10>", "ans", "+=", "1", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "9"]]}, {"line": 1, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "0"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "0"], ["i", "1"], ["diff", "1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "0"], ["i", "1"], ["diff", "1"]]}, {"line": 7, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "1"], ["i", "1"], ["diff", "1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "-1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "-1"]]}, {"line": 8, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "-1"]]}, {"line": 9, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["d", "0"], ["i", "2"], ["diff", "-1"]]}, {"line": 10, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "0"], ["i", "2"], ["diff", "-1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "0"], ["i", "3"], ["diff", "-1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "0"], ["i", "3"], ["diff", "1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "0"], ["i", "3"], ["diff", "1"]]}, {"line": 7, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "1"], ["i", "3"], ["diff", "1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "1"], ["i", "4"], ["diff", "1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "1"], ["i", "4"], ["diff", "-1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "1"], ["i", "4"], ["diff", "-1"]]}, {"line": 8, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "1"], ["i", "4"], ["diff", "-1"]]}, {"line": 9, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["d", "0"], ["i", "4"], ["diff", "-1"]]}, {"line": 10, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "0"], ["i", "4"], ["diff", "-1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "0"], ["i", "5"], ["diff", "-1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "0"], ["i", "5"], ["diff", "1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "0"], ["i", "5"], ["diff", "1"]]}, {"line": 7, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "1"], ["i", "5"], ["diff", "1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "-1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "-1"]]}, {"line": 8, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "-1"]]}, {"line": 9, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["d", "0"], ["i", "6"], ["diff", "-1"]]}, {"line": 10, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "0"], ["i", "6"], ["diff", "-1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "0"], ["i", "7"], ["diff", "-1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "0"], ["i", "7"], ["diff", "1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "0"], ["i", "7"], ["diff", "1"]]}, {"line": 7, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "1"], ["i", "7"], ["diff", "1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "1"], ["i", "8"], ["diff", "1"]]}, {"line": 5, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "1"], ["i", "8"], ["diff", "-1"]]}, {"line": 6, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "1"], ["i", "8"], ["diff", "-1"]]}, {"line": 8, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "1"], ["i", "8"], ["diff", "-1"]]}, {"line": 9, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["d", "0"], ["i", "8"], ["diff", "-1"]]}, {"line": 10, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["d", "0"], ["i", "8"], ["diff", "-1"]]}, {"line": 4, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["d", "0"], ["i", "8"], ["diff", "-1"]]}, {"line": 11, "state": [["n", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["d", "0"], ["i", "8"], ["diff", "-1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 3], [6, 7, 6, 3], [6, 9, 8, 6, 7, 6, 3], [6, 7, 6, 9, 8, 6, 7, 6, 3], [6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 9, 8, 6, 7, 6, 3], [7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3]], "8": [[8, 6, 7, 6, 3], [8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3]], "9": [[9, 8, 6, 7, 6, 3], [9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3], [9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 7, 6, 3]], "10": [[10, 2], [10, 2], [10, 2], [10, 2]], "11": [[11, 10, 2]]}}
{"id": 7924, "code": "int n = 3, k = 3;\nint[] a = Arrays.stream(\"1 2 3\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nSystem.out.println((int) Math.ceil((double) (n - 1) / (k - 1)));", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "Arrays", ".", "stream", "(", "\"1 2 3\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "(", "n", "-", "1", ")", "/", "(", "k", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"], ["k", "3"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]]}}
{"id": 15354, "code": "int X = 64145, Y = 123, Z = 456;\nSystem.out.println((X - Z) / (Z + Y));", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "X", "-", "Z", ")", "/", "(", "Z", "+", "Y", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13391, "code": "String a = \"happy\";String b = \"newyear\";String c = \"enjoy\";\nSystem.out.println(String.format(\"%s %s %s\", a, b, c));", "code_tokens": ["<0>", "String", "a", "=", "\"happy\"", ";", "String", "b", "=", "\"newyear\"", ";", "String", "c", "=", "\"enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s %s %s\"", ",", "a", ",", "b", ",", "c", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}, {"line": 1, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6826, "code": "int H = 20, N = 3;\nString[] input = \"4 5 6\".split(\" \");int[] A = new int[input.length];for (int i = 0; i < input.length; i++) {A[i] = Integer.parseInt(input[i]);}\nint a_sum = 0;for (int num : A) {a_sum += num;}\nif (H - a_sum <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "String", "[", "]", "input", "=", "\"4 5 6\"", ".", "split", "(", "\" \"", ")", ";", "int", "[", "]", "A", "=", "new", "int", "[", "input", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "input", ".", "length", ";", "i", "++", ")", "{", "A", "[", "i", "]", "=", "Integer", ".", "parseInt", "(", "input", "[", "i", "]", ")", ";", "}", "<2>", "int", "a_sum", "=", "0", ";", "for", "(", "int", "num", ":", "A", ")", "{", "a_sum", "+=", "num", ";", "}", "<3>", "if", "(", "H", "-", "a_sum", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "20"], ["N", "3"]]}, {"line": 1, "state": [["H", "20"], ["N", "3"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["a_sum", "15"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["a_sum", "15"]]}, {"line": 6, "state": [["H", "20"], ["N", "3"], ["a_sum", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 19210, "code": "int n = 12;\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse if (n % 2 == 0) {\nint ans = 0;\nint k = 10;\nwhile (n >= k) {\nans += n / k;\nk *= 5;}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<4>", "int", "ans", "=", "0", ";", "<5>", "int", "k", "=", "10", ";", "<6>", "while", "(", "n", ">=", "k", ")", "{", "<7>", "ans", "+=", "n", "/", "k", ";", "<8>", "k", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"]]}, {"line": 3, "state": [["n", "12"]]}, {"line": 4, "state": [["n", "12"], ["ans", "0"]]}, {"line": 5, "state": [["n", "12"], ["ans", "0"], ["k", "10"]]}, {"line": 6, "state": [["n", "12"], ["ans", "0"], ["k", "10"]]}, {"line": 7, "state": [["n", "12"], ["ans", "1"], ["k", "10"]]}, {"line": 8, "state": [["n", "12"], ["ans", "1"], ["k", "50"]]}, {"line": 6, "state": [["n", "12"], ["ans", "1"], ["k", "50"]]}, {"line": 9, "state": [["n", "12"], ["ans", "1"], ["k", "50"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 5, 3, 1, 0], [6, 8, 7, 6, 5, 3, 1, 0]], "7": [[7, 6, 5, 3, 1, 0]], "8": [[8, 7, 6, 5, 3, 1, 0]], "9": [[9, 7, 6, 5, 3, 1, 0]]}}
{"id": 9284, "code": "String S = \"2017/01/07\";\nString ans = \"\";\nfor (int i = 0; i < S.length(); i++) {\nif (i == 3) {\nans += '8';}\nelse {\nans += S.charAt(i);}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/07\"", ";", "<1>", "String", "ans", "=", "\"\"", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<3>", "if", "(", "i", "==", "3", ")", "{", "<4>", "ans", "+=", "'8'", ";", "}", "<5>", "else", "{", "<6>", "ans", "+=", "S", ".", "charAt", "(", "i", ")", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/07"]]}, {"line": 1, "state": [["S", "2017/01/07"], ["ans", ""]]}, {"line": 2, "state": [["S", "2017/01/07"], ["ans", ""], ["i", "0"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["ans", ""], ["i", "0"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["ans", "2"], ["i", "0"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["ans", "2"], ["i", "1"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["ans", "2"], ["i", "1"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["ans", "20"], ["i", "1"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["ans", "20"], ["i", "2"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["ans", "20"], ["i", "2"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "2"], ["ans", "201"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "3"], ["ans", "201"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "3"], ["ans", "201"]]}, {"line": 4, "state": [["S", "2017/01/07"], ["i", "3"], ["ans", "2018"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "4"], ["ans", "2018"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "4"], ["ans", "2018"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "4"], ["ans", "2018/"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "5"], ["ans", "2018/"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "5"], ["ans", "2018/"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "5"], ["ans", "2018/0"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "6"], ["ans", "2018/0"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "6"], ["ans", "2018/0"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "6"], ["ans", "2018/01"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "7"], ["ans", "2018/01"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "7"], ["ans", "2018/01"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "7"], ["ans", "2018/01/"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "8"], ["ans", "2018/01/"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "8"], ["ans", "2018/01/"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "8"], ["ans", "2018/01/0"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "9"], ["ans", "2018/01/0"]]}, {"line": 3, "state": [["S", "2017/01/07"], ["i", "9"], ["ans", "2018/01/0"]]}, {"line": 6, "state": [["S", "2017/01/07"], ["i", "9"], ["ans", "2018/01/07"]]}, {"line": 2, "state": [["S", "2017/01/07"], ["i", "9"], ["ans", "2018/01/07"]]}, {"line": 7, "state": [["S", "2017/01/07"], ["i", "9"], ["ans", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0]], "4": [[4, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0]], "6": [[6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0], [6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0]], "7": [[7, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 0]]}}
{"id": 1781, "code": "String input = \"10 3 5\";String[] parts = input.split(\" \");int[] x = new int[3];for (int i = 0; i < parts.length; i++) {x[i] = Integer.parseInt(parts[i]);}int minValue = Math.min(x[1], x[2]);int sumValue = x[1] + x[2] - x[0] > 0 ? x[1] + x[2] - x[0] : 0;System.out.println(minValue + \" \" + sumValue);", "code_tokens": ["<0>", "String", "input", "=", "\"10 3 5\"", ";", "String", "[", "]", "parts", "=", "input", ".", "split", "(", "\" \"", ")", ";", "int", "[", "]", "x", "=", "new", "int", "[", "3", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "parts", ".", "length", ";", "i", "++", ")", "{", "x", "[", "i", "]", "=", "Integer", ".", "parseInt", "(", "parts", "[", "i", "]", ")", ";", "}", "int", "minValue", "=", "Math", ".", "min", "(", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ";", "int", "sumValue", "=", "x", "[", "1", "]", "+", "x", "[", "2", "]", "-", "x", "[", "0", "]", ">", "0", "?", "x", "[", "1", "]", "+", "x", "[", "2", "]", "-", "x", "[", "0", "]", ":", "0", ";", "System", ".", "out", ".", "println", "(", "minValue", "+", "\" \"", "+", "sumValue", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["x", "10"]]}, {"line": 0, "state": [["x", "3"]]}, {"line": 0, "state": [["x", "5"]]}, {"line": 0, "state": [["x", "5"]]}, {"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["x", "[ 10 , 3 , 5 ]"]]}, {"line": 0, "state": [["x", "[ 10 , 3 , 5 ]"]]}, {"line": 0, "state": []}], "slices": {"0": [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]}}
{"id": 3342, "code": "int A = 20, B = 30;\nint ans = A - (2 * B);\nif (ans > 0) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "int", "ans", "=", "A", "-", "(", "2", "*", "B", ")", ";", "<2>", "if", "(", "ans", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"], ["ans", "-40"]]}, {"line": 2, "state": [["A", "20"], ["B", "30"], ["ans", "-40"]]}, {"line": 5, "state": [["A", "20"], ["B", "30"], ["ans", "-40"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 14211, "code": "int n = 7;\nint[] a = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint ans = 1;\nString flag = \"Init\";\nfor (int i = 1; i < n; i++) {\nif (flag.equals(\"Init\")) {\nif (a[i - 1] == a[i]) {\ncontinue;}\nelse if (a[i - 1] > a[i]) {\nflag = \"-\";}\nelse {\nflag = \"+\";}}\nelse if (flag.equals(\"-\")) {\nif (a[i - 1] < a[i]) {\nans += 1;\nflag = \"Init\";}}\nelse {\nif (a[i - 1] > a[i]) {\nans += 1;\nflag = \"Init\";}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "String", "flag", "=", "\"Init\"", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "flag", ".", "equals", "(", "\"Init\"", ")", ")", "{", "<6>", "if", "(", "a", "[", "i", "-", "1", "]", "==", "a", "[", "i", "]", ")", "{", "<7>", "continue", ";", "}", "<8>", "else", "if", "(", "a", "[", "i", "-", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<9>", "flag", "=", "\"-\"", ";", "}", "<10>", "else", "{", "<11>", "flag", "=", "\"+\"", ";", "}", "}", "<12>", "else", "if", "(", "flag", ".", "equals", "(", "\"-\"", ")", ")", "{", "<13>", "if", "(", "a", "[", "i", "-", "1", "]", "<", "a", "[", "i", "]", ")", "{", "<14>", "ans", "+=", "1", ";", "<15>", "flag", "=", "\"Init\"", ";", "}", "}", "<16>", "else", "{", "<17>", "if", "(", "a", "[", "i", "-", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<18>", "ans", "+=", "1", ";", "<19>", "flag", "=", "\"Init\"", ";", "}", "}", "}", "<20>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "7"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "Init"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 12, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 13, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 18, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "3"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "3"]]}, {"line": 13, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "3"]]}, {"line": 18, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "+"], ["i", "3"]]}, {"line": 19, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "+"], ["i", "3"]]}, {"line": 20, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "Init"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "Init"], ["i", "4"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "Init"], ["i", "4"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "Init"], ["i", "4"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "Init"], ["i", "4"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "-"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "-"], ["i", "5"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "-"], ["i", "5"]]}, {"line": 13, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "-"], ["i", "5"]]}, {"line": 14, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "-"], ["i", "5"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "-"], ["i", "5"]]}, {"line": 16, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "Init"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "Init"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "Init"], ["i", "6"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "Init"], ["i", "6"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "Init"], ["i", "6"]]}, {"line": 12, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}, {"line": 21, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 9, 7, 5, 1], [5, 18, 5, 9, 7, 5, 1], [5, 18, 5, 18, 5, 9, 7, 5, 1], [5, 9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1], [5, 14, 5, 9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1], [5, 9, 7, 5, 14, 5, 9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1]], "6": [[6, 4], [6, 12, 6, 4], [6, 13, 6, 12, 6, 4], [6, 20, 13, 6, 13, 6, 12, 6, 4], [6, 10, 6, 20, 13, 6, 13, 6, 12, 6, 4], [6, 16, 13, 6, 10, 6, 20, 13, 6, 13, 6, 12, 6, 4]], "7": [[7, 5, 1], [7, 5, 18, 5, 18, 5, 9, 7, 5, 1], [7, 5, 14, 5, 9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1]], "9": [[9, 7, 5, 1], [9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1], [9, 7, 5, 14, 5, 9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1]], "10": [[10, 6, 20, 13, 6, 13, 6, 12, 6, 4]], "12": [[12, 6, 4], [12, 6, 16, 13, 6, 10, 6, 20, 13, 6, 13, 6, 12, 6, 4]], "13": [[13, 6, 12, 6, 4], [13, 6, 13, 6, 12, 6, 4], [13, 6, 10, 6, 20, 13, 6, 13, 6, 12, 6, 4]], "14": [[14, 5, 9, 7, 5, 18, 5, 18, 5, 9, 7, 5, 1]], "15": [[15, 19, 3]], "16": [[16, 13, 6, 10, 6, 20, 13, 6, 13, 6, 12, 6, 4]], "18": [[18, 5, 9, 7, 5, 1], [18, 5, 18, 5, 9, 7, 5, 1]], "19": [[19, 3]], "20": [[20, 13, 6, 13, 6, 12, 6, 4]], "21": [[21, 15, 19, 3]]}}
{"id": 8172, "code": "int n = 8, k = 3;\nint[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nint ans = a.length;\nans -= k;\nif (ans % (k - 1) == 0) {\nSystem.out.println(ans / (k - 1) + 1);}\nelse {\nSystem.out.println(ans / (k - 1) + 2);}", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "int", "ans", "=", "a", ".", "length", ";", "<3>", "ans", "-=", "k", ";", "<4>", "if", "(", "ans", "%", "(", "k", "-", "1", ")", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "ans", "/", "(", "k", "-", "1", ")", "+", "1", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "ans", "/", "(", "k", "-", "1", ")", "+", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "8"]]}, {"line": 3, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "5"]]}, {"line": 4, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "5"]]}, {"line": 7, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "7": [[7, 4, 3, 2, 1]]}}
{"id": 3153, "code": "String s = \"1234567876\";\nint d = 1000;\nfor (int i = 0; i < s.length() - 2; i++) {\nif (Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753) < d) {\nd = Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753);}}\nSystem.out.println(d);", "code_tokens": ["<0>", "String", "s", "=", "\"1234567876\"", ";", "<1>", "int", "d", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "if", "(", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", "<", "d", ")", "{", "<4>", "d", "=", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ";", "}", "}", "<5>", "System", ".", "out", ".", "println", "(", "d", ")", ";"], "trace": [{"line": 0, "state": [["s", "1234567876"]]}, {"line": 1, "state": [["s", "1234567876"], ["d", "1000"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "1000"], ["i", "0"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "1000"], ["i", "0"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "630"], ["i", "0"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "630"], ["i", "1"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "630"], ["i", "1"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "519"], ["i", "1"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "519"], ["i", "2"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "519"], ["i", "2"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "408"], ["i", "2"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "408"], ["i", "3"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "408"], ["i", "3"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "297"], ["i", "3"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "297"], ["i", "4"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "297"], ["i", "4"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "186"], ["i", "4"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "186"], ["i", "5"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "186"], ["i", "5"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "75"], ["i", "5"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "75"], ["i", "6"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "75"], ["i", "6"]]}, {"line": 4, "state": [["s", "1234567876"], ["d", "34"], ["i", "6"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "34"], ["i", "7"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "34"], ["i", "7"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "34"], ["i", "8"]]}, {"line": 3, "state": [["s", "1234567876"], ["d", "34"], ["i", "8"]]}, {"line": 2, "state": [["s", "1234567876"], ["d", "34"], ["i", "8"]]}, {"line": 5, "state": [["s", "1234567876"], ["d", "34"], ["i", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 3, 2, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "5": [[5, 3, 2, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]]}}
{"id": 15919, "code": "Scanner input = new Scanner(System.in);\nint a = 20, b = 30;\nif (2 * b >= a) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(a - 2 * b);}", "code_tokens": ["<0>", "Scanner", "input", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<2>", "if", "(", "2", "*", "b", ">=", "a", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "a", "-", "2", "*", "b", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}, {"line": 3, "state": [["a", "20"], ["b", "30"]]}, {"line": 4, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]]}}
{"id": 435, "code": "char[] S = {'c', 'o', 'd', 'e', 'f', 'e', 's', 't', 'i', 'v', 'a', 'l'};\nint K = 100;\nint N = S.length;\nfor (int i = 0; i < N; i++) {\nif (S[i] == 'a') {\ncontinue;}\nint sa = 'z' - S[i] + 1;\nif (sa <= K) {\nK -= sa;\nS[i] = 'a';}}\nif (K != 0) {\nK %= 26;\nS[N - 1] = (char) (S[N - 1] + K);}\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'c'", ",", "'o'", ",", "'d'", ",", "'e'", ",", "'f'", ",", "'e'", ",", "'s'", ",", "'t'", ",", "'i'", ",", "'v'", ",", "'a'", ",", "'l'", "}", ";", "<1>", "int", "K", "=", "100", ";", "<2>", "int", "N", "=", "S", ".", "length", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "if", "(", "S", "[", "i", "]", "==", "'a'", ")", "{", "<5>", "continue", ";", "}", "<6>", "int", "sa", "=", "'z'", "-", "S", "[", "i", "]", "+", "1", ";", "<7>", "if", "(", "sa", "<=", "K", ")", "{", "<8>", "K", "-=", "sa", ";", "<9>", "S", "[", "i", "]", "=", "'a'", ";", "}", "}", "<10>", "if", "(", "K", "!=", "0", ")", "{", "<11>", "K", "%=", "26", ";", "<12>", "S", "[", "N", "-", "1", "]", "=", "(", "char", ")", "(", "S", "[", "N", "-", "1", "]", "+", "K", ")", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"]]}, {"line": 1, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"]]}, {"line": 2, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["N", "12"]]}, {"line": 3, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["N", "12"], ["i", "0"]]}, {"line": 4, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["N", "12"], ["i", "0"]]}, {"line": 6, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["N", "12"], ["i", "0"], ["sa", "24"]]}, {"line": 7, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["N", "12"], ["i", "0"], ["sa", "24"]]}, {"line": 8, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["N", "12"], ["i", "0"], ["sa", "24"]]}, {"line": 9, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["N", "12"], ["i", "0"], ["sa", "24"]]}, {"line": 3, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["N", "12"], ["i", "1"], ["sa", "24"]]}, {"line": 4, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["N", "12"], ["i", "1"], ["sa", "24"]]}, {"line": 6, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["N", "12"], ["i", "1"], ["sa", "12"]]}, {"line": 7, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["N", "12"], ["i", "1"], ["sa", "12"]]}, {"line": 8, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["N", "12"], ["i", "1"], ["sa", "12"]]}, {"line": 9, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["N", "12"], ["i", "1"], ["sa", "12"]]}, {"line": 3, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["N", "12"], ["i", "2"], ["sa", "12"]]}, {"line": 4, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["N", "12"], ["i", "2"], ["sa", "12"]]}, {"line": 6, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["N", "12"], ["i", "2"], ["sa", "23"]]}, {"line": 7, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["N", "12"], ["i", "2"], ["sa", "23"]]}, {"line": 8, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["N", "12"], ["i", "2"], ["sa", "23"]]}, {"line": 9, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["N", "12"], ["i", "2"], ["sa", "23"]]}, {"line": 3, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["N", "12"], ["i", "3"], ["sa", "23"]]}, {"line": 4, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["N", "12"], ["i", "3"], ["sa", "23"]]}, {"line": 6, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["N", "12"], ["i", "3"], ["sa", "22"]]}, {"line": 7, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["N", "12"], ["i", "3"], ["sa", "22"]]}, {"line": 8, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "3"], ["sa", "22"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "3"], ["sa", "22"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "4"], ["sa", "22"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "4"], ["sa", "22"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "4"], ["sa", "21"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "4"], ["sa", "21"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "5"], ["sa", "21"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "5"], ["sa", "21"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "5"], ["sa", "22"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "5"], ["sa", "22"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "6"], ["sa", "22"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "6"], ["sa", "22"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "6"], ["sa", "8"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["N", "12"], ["i", "6"], ["sa", "8"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "11"], ["N", "12"], ["i", "6"], ["sa", "8"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["N", "12"], ["i", "6"], ["sa", "8"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["N", "12"], ["i", "7"], ["sa", "8"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["N", "12"], ["i", "7"], ["sa", "8"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["N", "12"], ["i", "7"], ["sa", "7"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["N", "12"], ["i", "7"], ["sa", "7"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "7"], ["sa", "7"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "7"], ["sa", "7"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "8"], ["sa", "7"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "8"], ["sa", "7"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "8"], ["sa", "18"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "8"], ["sa", "18"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "9"], ["sa", "18"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "9"], ["sa", "18"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "9"], ["sa", "5"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "9"], ["sa", "5"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "10"], ["sa", "5"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "10"], ["sa", "5"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "10"], ["sa", "5"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "5"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "5"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}, {"line": 10, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}, {"line": 11, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}, {"line": 12, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}, {"line": 13, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["K", "4"], ["N", "12"], ["i", "11"], ["sa", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 9, 6, 4, 3, 2, 0], [3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [3, 6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "5": [[5]], "6": [[6, 4, 3, 2, 0], [6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "7": [[7, 6, 4, 3, 2, 0], [7, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [7, 6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "8": [[8, 7, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 9, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "9": [[9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "10": [[10, 7, 6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "11": [[11, 10, 7, 6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "12": [[12, 11, 10, 7, 6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]], "13": [[13, 12, 11, 10, 7, 6, 4, 3, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 6, 4, 3, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 9, 6, 4, 3, 2, 0]]}}
{"id": 9060, "code": "int a = Integer.parseInt(\"1\");\nint e = Integer.parseInt(\"9\");\nint k = Integer.parseInt(\"15\");\nSystem.out.println(k >= e - a ? \"Yay!\" : \":(\");", "code_tokens": ["<0>", "int", "a", "=", "Integer", ".", "parseInt", "(", "\"1\"", ")", ";", "<1>", "int", "e", "=", "Integer", ".", "parseInt", "(", "\"9\"", ")", ";", "<2>", "int", "k", "=", "Integer", ".", "parseInt", "(", "\"15\"", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "k", ">=", "e", "-", "a", "?", "\"Yay!\"", ":", "\":(\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "1"]]}, {"line": 1, "state": [["a", "1"], ["e", "9"]]}, {"line": 2, "state": [["a", "1"], ["e", "9"], ["k", "15"]]}, {"line": 3, "state": [["a", "1"], ["e", "9"], ["k", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 10863, "code": "char[] S = {'l', 'e', 'v', 'e', 'l'};\nint N = S.length;\nint x = 0;\nfor (int i = 0; i < (N - 1) / 2; i++) {\nif (S[i] != S[N - (i + 1)]) {\nSystem.out.println(\"No\");\nbreak;}\nelse if (i == (N - 1) / 2 - 1) {\nx += 1;}}\nif (x == 1) {\nchar[] S_l = Arrays.copyOfRange(S, 0, (N - 1) / 2);\nfor (int i = 0; i < Math.ceil(S_l.length / 2.0); i++) {\nif (S_l[i] != S_l[S_l.length - (i + 1)]) {\nSystem.out.println(\"No\");\nbreak;}\nelse if (i == Math.ceil(S_l.length / 2.0) - 1) {\nx += 1;}}}\nif (x == 2) {\nchar[] S_m = Arrays.copyOfRange(S, (N + 3) / 2 - 1, N);\nfor (int i = 0; i < Math.ceil(S_m.length / 2.0); i++) {\nif (S_m[i] != S_m[S_m.length - (i + 1)]) {\nSystem.out.println(\"No\");\nbreak;}\nelse if (i == Math.ceil(S_m.length / 2.0) - 1) {\nSystem.out.println(\"Yes\");}}}", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'l'", ",", "'e'", ",", "'v'", ",", "'e'", ",", "'l'", "}", ";", "<1>", "int", "N", "=", "S", ".", "length", ";", "<2>", "int", "x", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "(", "N", "-", "1", ")", "/", "2", ";", "i", "++", ")", "{", "<4>", "if", "(", "S", "[", "i", "]", "!=", "S", "[", "N", "-", "(", "i", "+", "1", ")", "]", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<6>", "break", ";", "}", "<7>", "else", "if", "(", "i", "==", "(", "N", "-", "1", ")", "/", "2", "-", "1", ")", "{", "<8>", "x", "+=", "1", ";", "}", "}", "<9>", "if", "(", "x", "==", "1", ")", "{", "<10>", "char", "[", "]", "S_l", "=", "Arrays", ".", "copyOfRange", "(", "S", ",", "0", ",", "(", "N", "-", "1", ")", "/", "2", ")", ";", "<11>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "Math", ".", "ceil", "(", "S_l", ".", "length", "/", "2.0", ")", ";", "i", "++", ")", "{", "<12>", "if", "(", "S_l", "[", "i", "]", "!=", "S_l", "[", "S_l", ".", "length", "-", "(", "i", "+", "1", ")", "]", ")", "{", "<13>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<14>", "break", ";", "}", "<15>", "else", "if", "(", "i", "==", "Math", ".", "ceil", "(", "S_l", ".", "length", "/", "2.0", ")", "-", "1", ")", "{", "<16>", "x", "+=", "1", ";", "}", "}", "}", "<17>", "if", "(", "x", "==", "2", ")", "{", "<18>", "char", "[", "]", "S_m", "=", "Arrays", ".", "copyOfRange", "(", "S", ",", "(", "N", "+", "3", ")", "/", "2", "-", "1", ",", "N", ")", ";", "<19>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "Math", ".", "ceil", "(", "S_m", ".", "length", "/", "2.0", ")", ";", "i", "++", ")", "{", "<20>", "if", "(", "S_m", "[", "i", "]", "!=", "S_m", "[", "S_m", ".", "length", "-", "(", "i", "+", "1", ")", "]", ")", "{", "<21>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<22>", "break", ";", "}", "<23>", "else", "if", "(", "i", "==", "Math", ".", "ceil", "(", "S_m", ".", "length", "/", "2.0", ")", "-", "1", ")", "{", "<24>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "}", "}"], "trace": [{"line": 0, "state": [["S", "[ l , e , v , e , l ]"]]}, {"line": 1, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"]]}, {"line": 2, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"]]}, {"line": 3, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"], ["i", "0"]]}, {"line": 4, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"], ["i", "0"]]}, {"line": 7, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"], ["i", "0"]]}, {"line": 3, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"], ["i", "1"]]}, {"line": 4, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"], ["i", "1"]]}, {"line": 7, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "0"], ["i", "1"]]}, {"line": 8, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "1"]]}, {"line": 3, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "1"]]}, {"line": 9, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "1"]]}, {"line": 10, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "1"]]}, {"line": 11, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "1"], ["S_l", "[ l , e ]"]]}, {"line": 12, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "0"], ["S_l", "[ l , e ]"]]}, {"line": 13, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "0"], ["S_l", "[ l , e ]"]]}, {"line": 14, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "0"], ["S_l", "[ l , e ]"]]}, {"line": 15, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "0"], ["S_l", "[ l , e ]"]]}, {"line": 18, "state": [["S", "[ l , e , v , e , l ]"], ["N", "5"], ["x", "1"], ["i", "0"], ["S_l", "[ l , e ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 7, 4, 3, 1, 0], [3, 7, 4, 3, 7, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 7, 4, 3, 1, 0]], "7": [[7, 4, 3, 1, 0], [7, 4, 3, 7, 4, 3, 1, 0]], "8": [[8, 2]], "9": [[9]], "10": [[10, 8, 2]], "11": [[11, 3, 7, 4, 3, 7, 4, 3, 1, 0]], "12": [[12, 11, 3, 7, 4, 3, 7, 4, 3, 1, 0]], "13": [[13, 12, 11, 3, 7, 4, 3, 7, 4, 3, 1, 0]], "14": [[14]], "15": [[15]], "18": [[18, 10, 8, 2]]}}
{"id": 2247, "code": "int N = 100, A = 100, B = 100;\nint MAX = Math.min(A, B);\nint MIN = Math.max(0, A + B - N);\nSystem.out.println(MAX + \" \" + MIN);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "MAX", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "MIN", "=", "Math", ".", "max", "(", "0", ",", "A", "+", "B", "-", "N", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "MAX", "+", "\" \"", "+", "MIN", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["MAX", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["MAX", "100"], ["MIN", "100"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["MAX", "100"], ["MIN", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 8755, "code": "int N = 1;\nint[] h = {2};\nint[] l = {3};\nint c = 0;\nfor (int i = 0; i < N; i++) {\nc = Math.max(sum(h, 0, i + 1) + sum(l, i, N), c);}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "h", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "l", "=", "{", "3", "}", ";", "<3>", "int", "c", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "c", "=", "Math", ".", "max", "(", "sum", "(", "h", ",", "0", ",", "i", "+", "1", ")", "+", "sum", "(", "l", ",", "i", ",", "N", ")", ",", "c", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["h", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["h", "[ 2 ]"], ["l", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["h", "[ 2 ]"], ["l", "[ 3 ]"], ["c", "0"]]}, {"line": 4, "state": [["N", "1"], ["h", "[ 2 ]"], ["l", "[ 3 ]"], ["c", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["h", "[ 2 ]"], ["l", "[ 3 ]"], ["c", "5"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["h", "[ 2 ]"], ["l", "[ 3 ]"], ["c", "5"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["h", "[ 2 ]"], ["l", "[ 3 ]"], ["c", "5"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]]}}
{"id": 2258, "code": "int a = 10, b = 7, c = 5;\nSystem.out.println(Math.min(b, c) + \" \" + (b + c >= a ? (b + c - a) : 0));", "code_tokens": ["<0>", "int", "a", "=", "10", ",", "b", "=", "7", ",", "c", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "b", ",", "c", ")", "+", "\" \"", "+", "(", "b", "+", "c", ">=", "a", "?", "(", "b", "+", "c", "-", "a", ")", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "10"], ["b", "7"], ["c", "5"]]}, {"line": 1, "state": [["a", "10"], ["b", "7"], ["c", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6707, "code": "int H = 10, N = 3;\nint[] A = {4, 5, 6};\nSystem.out.println(H <= sum(A) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "H", "<=", "sum", "(", "A", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 12401, "code": "String s = \"level\";System.out.println(new String[]{\"No\", \"Yes\"}[s.substring(0, s.length() / 2).equals(s.substring(s.length() / 2 + 1)) ? 1 : 0]);", "code_tokens": ["<0>", "String", "s", "=", "\"level\"", ";", "System", ".", "out", ".", "println", "(", "new", "String", "[", "]", "{", "\"No\"", ",", "\"Yes\"", "}", "[", "s", ".", "substring", "(", "0", ",", "s", ".", "length", "(", ")", "/", "2", ")", ".", "equals", "(", "s", ".", "substring", "(", "s", ".", "length", "(", ")", "/", "2", "+", "1", ")", ")", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "level"]]}], "slices": {"0": [[0]]}}
{"id": 9911, "code": "int N = 3;\nString S = \"())\";\nString ans = S;\nint cnt = 0;\nString now = \"\";\nfor (char s : S.toCharArray()) {\nnow = String.valueOf(s);\nif (s == '(') {\ncnt++;}\nelse if (s == ')') {\ncnt--;}\nif (cnt == -1) {\nans = \"(\" + ans;\ncnt = 0;}}\nif (cnt > 0) {\nans = ans + \")\".repeat(cnt);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "String", "S", "=", "\"())\"", ";", "<2>", "String", "ans", "=", "S", ";", "<3>", "int", "cnt", "=", "0", ";", "<4>", "String", "now", "=", "\"\"", ";", "<5>", "for", "(", "char", "s", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<6>", "now", "=", "String", ".", "valueOf", "(", "s", ")", ";", "<7>", "if", "(", "s", "==", "'('", ")", "{", "<8>", "cnt", "++", ";", "}", "<9>", "else", "if", "(", "s", "==", "')'", ")", "{", "<10>", "cnt", "--", ";", "}", "<11>", "if", "(", "cnt", "==", "-", "1", ")", "{", "<12>", "ans", "=", "\"(\"", "+", "ans", ";", "<13>", "cnt", "=", "0", ";", "}", "}", "<14>", "if", "(", "cnt", ">", "0", ")", "{", "<15>", "ans", "=", "ans", "+", "\")\"", ".", "repeat", "(", "cnt", ")", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"], ["S", "())"]]}, {"line": 2, "state": [["N", "3"], ["S", "())"], ["ans", "())"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ""]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ""], ["s", "("]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", "("], ["s", "("]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", "("], ["s", "("]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "1"], ["now", "("], ["s", "("]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "1"], ["now", "("], ["s", "("]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "1"], ["now", "("], ["s", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "1"], ["now", ")"], ["s", ")"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "1"], ["now", ")"], ["s", ")"]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "1"], ["now", ")"], ["s", ")"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "-1"], ["now", ")"], ["s", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["ans", "())"], ["cnt", "-1"], ["now", ")"], ["s", ")"]]}, {"line": 12, "state": [["N", "3"], ["S", "())"], ["ans", "()"], ["cnt", "-1"], ["now", ")"], ["s", ")"]]}, {"line": 13, "state": [["N", "3"], ["S", "())"], ["ans", "()"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["ans", "()"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 14, "state": [["N", "3"], ["S", "())"], ["ans", "()"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}, {"line": 16, "state": [["N", "3"], ["S", "())"], ["ans", "()"], ["cnt", "0"], ["now", ")"], ["s", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 2, 1], [5, 7, 6, 5, 2, 1], [5, 9, 7, 6, 5, 7, 6, 5, 2, 1], [5, 9, 7, 6, 5, 9, 7, 6, 5, 7, 6, 5, 2, 1]], "6": [[6, 5, 2, 1], [6, 5, 7, 6, 5, 2, 1], [6, 5, 9, 7, 6, 5, 7, 6, 5, 2, 1]], "7": [[7, 6, 5, 2, 1], [7, 6, 5, 7, 6, 5, 2, 1], [7, 6, 5, 9, 7, 6, 5, 7, 6, 5, 2, 1]], "8": [[8, 3]], "9": [[9, 7, 6, 5, 7, 6, 5, 2, 1], [9, 7, 6, 5, 9, 7, 6, 5, 7, 6, 5, 2, 1]], "10": [[10, 11, 8, 3], [10, 11, 10, 11, 8, 3]], "11": [[11, 8, 3], [11, 10, 11, 8, 3], [11, 10, 11, 10, 11, 8, 3]], "12": [[12, 2, 1]], "13": [[13, 11, 10, 11, 10, 11, 8, 3]], "14": [[14, 13, 11, 10, 11, 10, 11, 8, 3]], "16": [[16, 12, 2, 1]]}}
{"id": 18243, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint A = (H > W) ? H : W;\nif (N % A == 0) {\nSystem.out.println(N / A);}\nelse {\nSystem.out.println(N / A + 1);}", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "A", "=", "(", "H", ">", "W", ")", "?", "H", ":", "W", ";", "<4>", "if", "(", "N", "%", "A", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "N", "/", "A", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "N", "/", "A", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["A", "14"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["A", "14"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["A", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 993, "code": "int N = 112;\nint x = 111;\nwhile (x < N) {\nx += 111;}\nSystem.out.println(x);", "code_tokens": ["<0>", "int", "N", "=", "112", ";", "<1>", "int", "x", "=", "111", ";", "<2>", "while", "(", "x", "<", "N", ")", "{", "<3>", "x", "+=", "111", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["N", "112"]]}, {"line": 1, "state": [["N", "112"], ["x", "111"]]}, {"line": 2, "state": [["N", "112"], ["x", "111"]]}, {"line": 3, "state": [["N", "112"], ["x", "222"]]}, {"line": 2, "state": [["N", "112"], ["x", "222"]]}, {"line": 4, "state": [["N", "112"], ["x", "222"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 2, 3, 2, 1, 0]]}}
{"id": 9776, "code": "int n = 6;\nString s = \")))())\";\nint R = 0, L = 0;\nfor (int i = 0; i < s.length(); i++) {\nif (s.charAt(i) == '(') {\nR += 1;}\nelse {\nif (R > 0) {\nR -= 1;}\nelse {\nL += 1;}}}\nSystem.out.print(\"(\".repeat(L) + s + \")\".repeat(R));", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "int", "R", "=", "0", ",", "L", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<4>", "if", "(", "s", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<5>", "R", "+=", "1", ";", "}", "<6>", "else", "{", "<7>", "if", "(", "R", ">", "0", ")", "{", "<8>", "R", "-=", "1", ";", "}", "<9>", "else", "{", "<10>", "L", "+=", "1", ";", "}", "}", "}", "<11>", "System", ".", "out", ".", "print", "(", "\"(\"", ".", "repeat", "(", "L", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "R", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "0"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "0"], ["i", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "1"], ["i", "0"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "1"], ["i", "1"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "2"], ["i", "1"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "2"], ["i", "2"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "2"], ["i", "2"]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "2"], ["i", "2"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "2"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "3"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["R", "1"], ["L", "3"], ["i", "3"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "1"], ["L", "3"], ["i", "4"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["R", "1"], ["L", "3"], ["i", "4"]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["R", "1"], ["L", "3"], ["i", "4"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "4"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "5"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "5"]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "3"], ["i", "5"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "4"], ["i", "5"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "4"], ["i", "5"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["R", "0"], ["L", "4"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "5": [[5, 7, 2]], "7": [[7, 2], [7, 2], [7, 2], [7, 5, 7, 2], [7, 8, 7, 5, 7, 2]], "8": [[8, 7, 5, 7, 2]], "10": [[10, 2], [10, 2], [10, 2], [10, 2]], "11": [[11, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]]}}
{"id": 3299, "code": "int a = 20, b = 15;\nSystem.out.println((a - (b * 2)) > 0 ? (a - (b * 2)) : 0);", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "(", "b", "*", "2", ")", ")", ">", "0", "?", "(", "a", "-", "(", "b", "*", "2", ")", ")", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 14091, "code": "int N = 6;\nint[] A = {1, 2, 3, 2, 2, 1};\nint[][] dp = new int[N][2];for (int i = 0; i < N; i++) {dp[i][0] = N;dp[i][1] = N;}\ndp[0][0] = 1;dp[0][1] = 1;\nfor (int i = 1; i < A.length; i++) {int a = A[i];\nint pre_a = A[i - 1];\nif (pre_a < a) {\ndp[i][0] = Math.min(dp[i - 1][0], dp[i - 1][1] + 1);\ndp[i][1] = Math.min(dp[i - 1][0] + 1, dp[i - 1][1] + 1);}\nelse if (pre_a == a) {\ndp[i][0] = Math.min(dp[i - 1][0], dp[i - 1][1] + 1);\ndp[i][1] = Math.min(dp[i - 1][0] + 1, dp[i - 1][1]);}\nelse {\ndp[i][0] = Math.min(dp[i - 1][0] + 1, dp[i - 1][1] + 1);\ndp[i][1] = Math.min(dp[i - 1][0] + 1, dp[i - 1][1]);}}\nSystem.out.println(Math.min(dp[N - 1][0], dp[N - 1][1]));", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "[", "]", "[", "]", "dp", "=", "new", "int", "[", "N", "]", "[", "2", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "dp", "[", "i", "]", "[", "0", "]", "=", "N", ";", "dp", "[", "i", "]", "[", "1", "]", "=", "N", ";", "}", "<3>", "dp", "[", "0", "]", "[", "0", "]", "=", "1", ";", "dp", "[", "0", "]", "[", "1", "]", "=", "1", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "A", ".", "length", ";", "i", "++", ")", "{", "int", "a", "=", "A", "[", "i", "]", ";", "<5>", "int", "pre_a", "=", "A", "[", "i", "-", "1", "]", ";", "<6>", "if", "(", "pre_a", "<", "a", ")", "{", "<7>", "dp", "[", "i", "]", "[", "0", "]", "=", "Math", ".", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "0", "]", ",", "dp", "[", "i", "-", "1", "]", "[", "1", "]", "+", "1", ")", ";", "<8>", "dp", "[", "i", "]", "[", "1", "]", "=", "Math", ".", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "0", "]", "+", "1", ",", "dp", "[", "i", "-", "1", "]", "[", "1", "]", "+", "1", ")", ";", "}", "<9>", "else", "if", "(", "pre_a", "==", "a", ")", "{", "<10>", "dp", "[", "i", "]", "[", "0", "]", "=", "Math", ".", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "0", "]", ",", "dp", "[", "i", "-", "1", "]", "[", "1", "]", "+", "1", ")", ";", "<11>", "dp", "[", "i", "]", "[", "1", "]", "=", "Math", ".", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "0", "]", "+", "1", ",", "dp", "[", "i", "-", "1", "]", "[", "1", "]", ")", ";", "}", "<12>", "else", "{", "<13>", "dp", "[", "i", "]", "[", "0", "]", "=", "Math", ".", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "0", "]", "+", "1", ",", "dp", "[", "i", "-", "1", "]", "[", "1", "]", "+", "1", ")", ";", "<14>", "dp", "[", "i", "]", "[", "1", "]", "=", "Math", ".", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "0", "]", "+", "1", ",", "dp", "[", "i", "-", "1", "]", "[", "1", "]", ")", ";", "}", "}", "<15>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "dp", "[", "N", "-", "1", "]", "[", "0", "]", ",", "dp", "[", "N", "-", "1", "]", "[", "1", "]", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["i", "0"]]}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["i", "2"]]}, {"line": 2, "state": [["i", "3"]]}, {"line": 2, "state": [["i", "4"]]}, {"line": 2, "state": [["i", "5"]]}, {"line": 2, "state": [["i", "5"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "1"], ["a", "2"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "1"], ["a", "2"], ["pre_a", "1"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "1"], ["a", "2"], ["pre_a", "1"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "1"], ["a", "2"], ["pre_a", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "1"], ["a", "2"], ["pre_a", "1"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "2"], ["a", "3"], ["pre_a", "1"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "2"], ["a", "3"], ["pre_a", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "2"], ["a", "3"], ["pre_a", "2"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "2"], ["a", "3"], ["pre_a", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "2"], ["a", "3"], ["pre_a", "2"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "3"], ["a", "2"], ["pre_a", "2"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "3"], ["a", "2"], ["pre_a", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "3"], ["a", "2"], ["pre_a", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "3"], ["a", "2"], ["pre_a", "3"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 6 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "3"], ["a", "2"], ["pre_a", "3"]]}, {"line": 14, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "3"], ["a", "2"], ["pre_a", "3"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "4"], ["a", "2"], ["pre_a", "3"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "4"], ["a", "2"], ["pre_a", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "4"], ["a", "2"], ["pre_a", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] , [ 6 , 6 ] ]"], ["i", "4"], ["a", "2"], ["pre_a", "2"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 6 ] , [ 6 , 6 ] ]"], ["i", "4"], ["a", "2"], ["pre_a", "2"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] ]"], ["i", "4"], ["a", "2"], ["pre_a", "2"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 6 , 6 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 3 , 6 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 14, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 3 , 2 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 3 , 2 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}, {"line": 15, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["dp", "[ [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 2 ] , [ 3 , 2 ] ]"], ["i", "5"], ["a", "1"], ["pre_a", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0]], "3": [[3, 2, 0]], "4": [[4, 2, 0], [4, 8, 7, 5, 4, 2, 0], [4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [4, 14, 13, 5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 8, 7, 5, 4, 2, 0], [5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "6": [[6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 5, 4, 2, 0], [6, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [6, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [6, 5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "7": [[7, 5, 4, 2, 0], [7, 5, 4, 8, 7, 5, 4, 2, 0]], "8": [[8, 7, 5, 4, 2, 0], [8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "9": [[9, 6, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [9, 6, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [9, 6, 5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "10": [[10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "11": [[11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "13": [[13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [13, 5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "14": [[14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0], [14, 13, 5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]], "15": [[15, 14, 13, 5, 4, 11, 10, 5, 4, 14, 13, 5, 4, 8, 7, 5, 4, 8, 7, 5, 4, 2, 0]]}}
{"id": 14497, "code": "int n = 9;\nint[] l = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint ans = 0;\nint now = 0;\nint m = 0;\nint c = 0;\nfor (int i : l) {\nif (now == 0) {\nnow = i;}\nelse {\nif (m == 0) {\nif (now < i) {\nm = 1;}\nelse if (now > i) {\nm = -1;}}\nelse if (m == 1) {\nif (now > i) {\nans += 1;\nm = 0;}}\nelse {\nif (now < i) {\nans += 1;\nm = 0;}}\nnow = i;}}\nSystem.out.println(ans + 1);", "code_tokens": ["<0>", "int", "n", "=", "9", ";", "<1>", "int", "[", "]", "l", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "0", ";", "<3>", "int", "now", "=", "0", ";", "<4>", "int", "m", "=", "0", ";", "<5>", "int", "c", "=", "0", ";", "<6>", "for", "(", "int", "i", ":", "l", ")", "{", "<7>", "if", "(", "now", "==", "0", ")", "{", "<8>", "now", "=", "i", ";", "}", "<9>", "else", "{", "<10>", "if", "(", "m", "==", "0", ")", "{", "<11>", "if", "(", "now", "<", "i", ")", "{", "<12>", "m", "=", "1", ";", "}", "<13>", "else", "if", "(", "now", ">", "i", ")", "{", "<14>", "m", "=", "-", "1", ";", "}", "}", "<15>", "else", "if", "(", "m", "==", "1", ")", "{", "<16>", "if", "(", "now", ">", "i", ")", "{", "<17>", "ans", "+=", "1", ";", "<18>", "m", "=", "0", ";", "}", "}", "<19>", "else", "{", "<20>", "if", "(", "now", "<", "i", ")", "{", "<21>", "ans", "+=", "1", ";", "<22>", "m", "=", "0", ";", "}", "}", "<23>", "now", "=", "i", ";", "}", "}", "<24>", "System", ".", "out", ".", "println", "(", "ans", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["n", "9"]]}, {"line": 1, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"]]}, {"line": 3, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "0"]]}, {"line": 4, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "0"], ["m", "0"]]}, {"line": 5, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "0"], ["m", "0"], ["c", "0"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "0"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "0"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 8, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 12, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "1"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 15, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 16, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "0"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 18, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 12, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "1"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 15, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 16, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 18, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 12, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "1"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 15, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 16, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 18, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "2"]]}, {"line": 12, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "1"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 10, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 15, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 16, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["now", "2"], ["m", "1"], ["c", "0"], ["i", "1"]]}, {"line": 18, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["now", "2"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 23, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}, {"line": 24, "state": [["n", "9"], ["l", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["now", "1"], ["m", "0"], ["c", "0"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 8, 7, 3], [6, 23, 11, 7, 8, 7, 3], [6, 23, 16, 7, 23, 11, 7, 8, 7, 3], [6, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [6, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [6, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [6, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [6, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [6, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3]], "7": [[7, 3], [7, 8, 7, 3], [7, 23, 11, 7, 8, 7, 3], [7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3]], "8": [[8, 7, 3]], "10": [[10, 4], [10, 12, 10, 4], [10, 18, 15, 10, 12, 10, 4], [10, 12, 10, 18, 15, 10, 12, 10, 4], [10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4]], "11": [[11, 7, 8, 7, 3], [11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3]], "12": [[12, 10, 4], [12, 10, 18, 15, 10, 12, 10, 4], [12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4]], "15": [[15, 10, 12, 10, 4], [15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4]], "16": [[16, 7, 23, 11, 7, 8, 7, 3], [16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3]], "17": [[17, 2], [17, 2], [17, 2], [17, 2]], "18": [[18, 15, 10, 12, 10, 4], [18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4], [18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 18, 15, 10, 12, 10, 4]], "23": [[23, 11, 7, 8, 7, 3], [23, 16, 7, 23, 11, 7, 8, 7, 3], [23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3], [23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 23, 16, 7, 23, 11, 7, 8, 7, 3]], "24": [[24, 17, 2]]}}
{"id": 7705, "code": "int N = 8, K = 3;\nint[] A = {7, 3, 1, 8, 4, 6, 2, 5};\nSystem.out.println(Math.ceil((double)(N - 1) / (K - 1)));", "code_tokens": ["<0>", "int", "N", "=", "8", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "ceil", "(", "(", "double", ")", "(", "N", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "8"], ["K", "3"]]}, {"line": 3, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 4, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2]]}}
{"id": 7618, "code": "public class Main {public static void main(String[] args) throws IOException {\nBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\nint H = 20, N = 3;\nint[] A = {4, 5, 6};\nif (H - Arrays.stream(A).sum() <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "public", "class", "Main", "{", "public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "throws", "IOException", "{", "<1>", "BufferedReader", "input", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "System", ".", "in", ")", ")", ";", "<2>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<3>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<4>", "if", "(", "H", "-", "Arrays", ".", "stream", "(", "A", ")", ".", "sum", "(", ")", "<=", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["namedtuple", "<function>"]]}, {"line": 3, "state": [["namedtuple", "<function>"], ["H", "20"], ["N", "3"]]}, {"line": 4, "state": [["namedtuple", "<function>"], ["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 5, "state": [["namedtuple", "<function>"], ["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 8, "state": [["namedtuple", "<function>"], ["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 4, 3]], "8": [[8]]}}
{"id": 15588, "code": "int x = 100000, y = 1, z = 1;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19140, "code": "int n = 5;\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint cnt = 0;\nn /= 2;\nwhile (n != 0) {\nn /= 5;\ncnt += n;}\nSystem.out.println(cnt);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "cnt", "=", "0", ";", "<5>", "n", "/=", "2", ";", "<6>", "while", "(", "n", "!=", "0", ")", "{", "<7>", "n", "/=", "5", ";", "<8>", "cnt", "+=", "n", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 16384, "code": "int n = 2;\nint[] a = {100, 0};\nArrays.sort(a);\nint ci = a[a.length - 1];\nint index = Arrays.binarySearch(a, (int)(ci / 2));if (index < 0) {index = -(index + 1); // This will give us the position where ci/2 would fit}\nif (index > 0 && Math.abs(a[index] - ci / 2) < Math.abs(a[index - 1] - ci / 2)) {\nSystem.out.println(ci + \" \" + a[index]);\n} else {\nSystem.out.println(ci + \" \" + a[index - 1]);}", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "ci", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<4>", "int", "index", "=", "Arrays", ".", "binarySearch", "(", "a", ",", "(", "int", ")", "(", "ci", "/", "2", ")", ")", ";", "if", "(", "index", "<", "0", ")", "{", "index", "=", "-", "(", "index", "+", "1", ")", ";", "// This will give us the position where ci/2 would fit}", "<5>", "if", "(", "index", ">", "0", "&&", "Math", ".", "abs", "(", "a", "[", "index", "]", "-", "ci", "/", "2", ")", "<", "Math", ".", "abs", "(", "a", "[", "index", "-", "1", "]", "-", "ci", "/", "2", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "ci", "+", "\" \"", "+", "a", "[", "index", "]", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "ci", "+", "\" \"", "+", "a", "[", "index", "-", "1", "]", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ci", "100"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ci", "100"], ["index", "1"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ci", "100"], ["index", "1"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ci", "100"], ["index", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 4, 3, 2]], "6": [[6, 5, 4, 3, 2]], "9": [[9, 6, 5, 4, 3, 2]]}}
{"id": 6414, "code": "int n = 6;\nint[] a = {3, 14, 159, 2, 6, 53};\nint[] b = {58, 9, 79, 323, 84, 6};\nint[] c = {2643, 383, 2, 79, 50, 288};\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nint count = 0;\nfor (int i = 0; i < n; i++) {\nint A = upperBound(a, b[i] - 1);\nint C = lowerBound(c, b[i] + 1);\ncount += A * (n - C);}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "14", ",", "159", ",", "2", ",", "6", ",", "53", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "58", ",", "9", ",", "79", ",", "323", ",", "84", ",", "6", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "2643", ",", "383", ",", "2", ",", "79", ",", "50", ",", "288", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "count", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<9>", "int", "A", "=", "upperBound", "(", "a", ",", "b", "[", "i", "]", "-", "1", ")", ";", "<10>", "int", "C", "=", "lowerBound", "(", "c", ",", "b", "[", "i", "]", "+", "1", ")", ";", "<11>", "count", "+=", "A", "*", "(", "n", "-", "C", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "0"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "0"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "0"], ["i", "0"], ["A", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "0"], ["i", "0"], ["A", "2"], ["C", "1"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "10"], ["i", "0"], ["A", "2"], ["C", "1"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "10"], ["i", "1"], ["A", "2"], ["C", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "10"], ["i", "1"], ["A", "3"], ["C", "1"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "10"], ["i", "1"], ["A", "3"], ["C", "1"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "25"], ["i", "1"], ["A", "3"], ["C", "1"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "25"], ["i", "2"], ["A", "3"], ["C", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "25"], ["i", "2"], ["A", "5"], ["C", "1"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "25"], ["i", "2"], ["A", "5"], ["C", "2"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "45"], ["i", "2"], ["A", "5"], ["C", "2"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "45"], ["i", "3"], ["A", "5"], ["C", "2"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "45"], ["i", "3"], ["A", "5"], ["C", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "45"], ["i", "3"], ["A", "5"], ["C", "3"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "60"], ["i", "3"], ["A", "5"], ["C", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "60"], ["i", "4"], ["A", "5"], ["C", "3"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "60"], ["i", "4"], ["A", "5"], ["C", "3"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "60"], ["i", "4"], ["A", "5"], ["C", "3"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "75"], ["i", "4"], ["A", "5"], ["C", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "75"], ["i", "5"], ["A", "5"], ["C", "3"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "75"], ["i", "5"], ["A", "6"], ["C", "3"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "75"], ["i", "5"], ["A", "6"], ["C", "4"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "87"], ["i", "5"], ["A", "6"], ["C", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "87"], ["i", "5"], ["A", "6"], ["C", "4"]]}, {"line": 13, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["count", "87"], ["i", "5"], ["A", "6"], ["C", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 4, 1]], "6": [[6, 5, 4, 1]], "7": [[7]], "8": [[8]], "9": [[9, 0], [9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "10": [[10, 9, 0], [10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "11": [[11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "12": [[12, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]]}}
{"id": 1143, "code": "int n = 111;\nint tmp = (n + 110) / 111;\nSystem.out.println(111 * tmp);", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "int", "tmp", "=", "(", "n", "+", "110", ")", "/", "111", ";", "<2>", "System", ".", "out", ".", "println", "(", "111", "*", "tmp", ")", ";"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"], ["tmp", "1"]]}, {"line": 2, "state": [["n", "111"], ["tmp", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 8188, "code": "int N = 4, K = 3;\nint[] A = {2, 3, 1, 4};\nSystem.out.println((N + K - 3) / (K - 1));", "code_tokens": ["<0>", "int", "N", "=", "4", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "K", "-", "3", ")", "/", "(", "K", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"], ["K", "3"]]}, {"line": 1, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]]}}
{"id": 17131, "code": "String a = \"D\"; String b = \"H\";\na = a.equals(\"H\") ? \"1\" : \"-1\";\nb = b.equals(\"H\") ? \"1\" : \"-1\";\nSystem.out.println((Integer.parseInt(a) * Integer.parseInt(b) == 1) ? \"H\" : \"D\");", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "a", "=", "a", ".", "equals", "(", "\"H\"", ")", "?", "\"1\"", ":", "\"-1\"", ";", "<2>", "b", "=", "b", ".", "equals", "(", "\"H\"", ")", "?", "\"1\"", ":", "\"-1\"", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "Integer", ".", "parseInt", "(", "a", ")", "*", "Integer", ".", "parseInt", "(", "b", ")", "==", "1", ")", "?", "\"H\"", ":", "\"D\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "-1"], ["b", "H"]]}, {"line": 2, "state": [["a", "-1"], ["b", "1"]]}, {"line": 3, "state": [["a", "-1"], ["b", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 4822, "code": "char[] lit = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nint mojisu = lit.length - 2;\nString ans = lit[0] + Integer.toString(mojisu) + lit[lit.length - 1];\nSystem.out.println(ans);", "code_tokens": ["<0>", "char", "[", "]", "lit", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "int", "mojisu", "=", "lit", ".", "length", "-", "2", ";", "<2>", "String", "ans", "=", "lit", "[", "0", "]", "+", "Integer", ".", "toString", "(", "mojisu", ")", "+", "lit", "[", "lit", ".", "length", "-", "1", "]", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["lit", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["lit", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["mojisu", "18"]]}, {"line": 2, "state": [["lit", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["mojisu", "18"], ["ans", "i18n"]]}, {"line": 3, "state": [["lit", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["mojisu", "18"], ["ans", "i18n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 7646, "code": "int h = 20, n = 3;\nint[] a = {4, 5, 6};\nfor (int i = 0; i < n; i++) {\nh -= a[i];}\nSystem.out.println(h <= 0 ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<3>", "h", "-=", "a", "[", "i", "]", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "h", "<=", "0", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "0"]]}, {"line": 3, "state": [["h", "16"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "0"]]}, {"line": 2, "state": [["h", "16"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "1"]]}, {"line": 3, "state": [["h", "11"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "1"]]}, {"line": 2, "state": [["h", "11"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "2"]]}, {"line": 3, "state": [["h", "5"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "2"]]}, {"line": 2, "state": [["h", "5"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "2"]]}, {"line": 4, "state": [["h", "5"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 11912, "code": "int a = 11, b = 16;\nint c = 11, d = 17;\nif (d == 1) {\nSystem.out.println(\"1\");}\nelse {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "int", "a", "=", "11", ",", "b", "=", "16", ";", "<1>", "int", "c", "=", "11", ",", "d", "=", "17", ";", "<2>", "if", "(", "d", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "16"]]}, {"line": 1, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}, {"line": 2, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}, {"line": 5, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5]]}}
{"id": 4914, "code": "String s = \"xyz\";\nchar fir = s.charAt(0);\nchar las = s.charAt(s.length() - 1);\ns = s.substring(1);\ns = s.substring(0, s.length() - 1);\nSystem.out.println(fir + String.valueOf(s.length()) + las);", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "char", "fir", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "las", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "s", "=", "s", ".", "substring", "(", "1", ")", ";", "<4>", "s", "=", "s", ".", "substring", "(", "0", ",", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "fir", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", ")", "+", "las", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["fir", "x"]]}, {"line": 2, "state": [["s", "xyz"], ["fir", "x"], ["las", "z"]]}, {"line": 3, "state": [["s", "yz"], ["fir", "x"], ["las", "z"]]}, {"line": 4, "state": [["s", "y"], ["fir", "x"], ["las", "z"]]}, {"line": 5, "state": [["s", "y"], ["fir", "x"], ["las", "z"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 15439, "code": "int x = 64146, y = 123, z = 456;\nSystem.out.println(-(-((x - z) / (y + z))));", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4010, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint all = 0;\nif (m2 >= m1) {\nall += (h2 - h1) * 60 + (m2 - m1);\nall -= k;}\nelse {\nall += (h2 - 1 - h1) * 60 + (m2 + 60 - m1);\nall -= k;}\nSystem.out.println(all);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "all", "=", "0", ";", "<2>", "if", "(", "m2", ">=", "m1", ")", "{", "<3>", "all", "+=", "(", "h2", "-", "h1", ")", "*", "60", "+", "(", "m2", "-", "m1", ")", ";", "<4>", "all", "-=", "k", ";", "}", "<5>", "else", "{", "<6>", "all", "+=", "(", "h2", "-", "1", "-", "h1", ")", "*", "60", "+", "(", "m2", "+", "60", "-", "m1", ")", ";", "<7>", "all", "-=", "k", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "all", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["all", "0"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["all", "0"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["all", "300"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["all", "270"]]}, {"line": 8, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["all", "270"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]], "8": [[8, 4, 3, 2, 0]]}}
{"id": 6496, "code": "int N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint b = B[i];\nint ab = bisectLeft(A, b);\nint bc = N - bisectRight(C, b);\nans += ab * bc;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "int", "b", "=", "B", "[", "i", "]", ";", "<7>", "int", "ab", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<8>", "int", "bc", "=", "N", "-", "bisectRight", "(", "C", ",", "b", ")", ";", "<9>", "ans", "+=", "ab", "*", "bc", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["b", "2"], ["ab", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "0"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "1"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["b", "2"], ["ab", "3"], ["bc", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 7, 6, 1], [6, 7, 6, 7, 6, 1], [6, 7, 6, 7, 6, 7, 6, 1]], "7": [[7, 6, 1], [7, 6, 7, 6, 1], [7, 6, 7, 6, 7, 6, 1]], "8": [[8, 7, 6, 1], [8, 7, 6, 7, 6, 1], [8, 7, 6, 7, 6, 7, 6, 1]], "9": [[9, 8, 7, 6, 1], [9, 8, 7, 6, 7, 6, 1], [9, 8, 7, 6, 7, 6, 7, 6, 1]], "10": [[10, 9, 8, 7, 6, 1], [10, 9, 8, 7, 6, 7, 6, 1], [10, 9, 8, 7, 6, 7, 6, 7, 6, 1]], "11": [[11, 10, 9, 8, 7, 6, 7, 6, 7, 6, 1]]}}
{"id": 9030, "code": "int a = 1;\nint b = 2;\nint c = 4;\nint d = 8;\nint e = 9;\nint k = 15;\nif (k < b - a) {\nSystem.out.println(\":(\");\n} else if (k < c - a) {\nSystem.out.println(\":(\");\n} else if (k < d - a) {\nSystem.out.println(\":(\");\n} else if (k < e - a) {\nSystem.out.println(\":(\");\n} else if (k < c - b) {\nSystem.out.println(\":(\");\n} else if (k < d - b) {\nSystem.out.println(\":(\");\n} else if (k < e - b) {\nSystem.out.println(\":(\");\n} else if (k < d - c) {\nSystem.out.println(\":(\");\n} else if (k < e - c) {\nSystem.out.println(\":(\");\n} else if (k < e - d) {\nSystem.out.println(\":(\");\n} else {\nSystem.out.println(\"Yay!\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ";", "<1>", "int", "b", "=", "2", ";", "<2>", "int", "c", "=", "4", ";", "<3>", "int", "d", "=", "8", ";", "<4>", "int", "e", "=", "9", ";", "<5>", "int", "k", "=", "15", ";", "<6>", "if", "(", "k", "<", "b", "-", "a", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<8>", "}", "else", "if", "(", "k", "<", "c", "-", "a", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<10>", "}", "else", "if", "(", "k", "<", "d", "-", "a", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<12>", "}", "else", "if", "(", "k", "<", "e", "-", "a", ")", "{", "<13>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<14>", "}", "else", "if", "(", "k", "<", "c", "-", "b", ")", "{", "<15>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<16>", "}", "else", "if", "(", "k", "<", "d", "-", "b", ")", "{", "<17>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<18>", "}", "else", "if", "(", "k", "<", "e", "-", "b", ")", "{", "<19>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<20>", "}", "else", "if", "(", "k", "<", "d", "-", "c", ")", "{", "<21>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<22>", "}", "else", "if", "(", "k", "<", "e", "-", "c", ")", "{", "<23>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<24>", "}", "else", "if", "(", "k", "<", "e", "-", "d", ")", "{", "<25>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<26>", "}", "else", "{", "<27>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "2"]]}, {"line": 2, "state": [["a", "1"], ["b", "2"], ["c", "4"]]}, {"line": 3, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"]]}, {"line": 4, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"]]}, {"line": 5, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 6, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 10, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 12, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 14, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 16, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 18, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 20, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 22, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 24, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 27, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 5, 1, 0]], "8": [[8, 6, 5, 1, 0]], "10": [[10, 8, 6, 5, 1, 0]], "12": [[12, 10, 8, 6, 5, 1, 0]], "14": [[14, 12, 10, 8, 6, 5, 1, 0]], "16": [[16, 14, 12, 10, 8, 6, 5, 1, 0]], "18": [[18, 16, 14, 12, 10, 8, 6, 5, 1, 0]], "20": [[20, 18, 16, 14, 12, 10, 8, 6, 5, 1, 0]], "22": [[22, 20, 18, 16, 14, 12, 10, 8, 6, 5, 1, 0]], "24": [[24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 5, 1, 0]], "27": [[27]]}}
{"id": 7548, "code": "int H = 211, N = 5;\nString[] input = \"31 41 59 26 53\".split(\" \");int[] A = new int[N];for (int i = 0; i < N; i++) {A[i] = Integer.parseInt(input[i]);}\nint sum = 0;for (int num : A) {sum += num;}System.out.println(H <= sum ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "String", "[", "]", "input", "=", "\"31 41 59 26 53\"", ".", "split", "(", "\" \"", ")", ";", "int", "[", "]", "A", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "A", "[", "i", "]", "=", "Integer", ".", "parseInt", "(", "input", "[", "i", "]", ")", ";", "}", "<2>", "int", "sum", "=", "0", ";", "for", "(", "int", "num", ":", "A", ")", "{", "sum", "+=", "num", ";", "}", "System", ".", "out", ".", "println", "(", "H", "<=", "sum", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 11387, "code": "String s = \"SUN\";\nString[] apple = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"};\nSystem.out.println(7 - java.util.Arrays.asList(apple).indexOf(s));", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "apple", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ",", "\"SUN\"", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "7", "-", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "apple", ")", ".", "indexOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"], ["apple", "[ SUN , MON , TUE , WED , THU , FRI , SAT , SUN ]"]]}, {"line": 2, "state": [["s", "SUN"], ["apple", "[ SUN , MON , TUE , WED , THU , FRI , SAT , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 16842, "code": "char[] a = {'H', 'H'};\nif (a[0] == a[1]) {\nSystem.out.println(\"H\");\n} else {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "char", "[", "]", "a", "=", "{", "'H'", ",", "'H'", "}", ";", "<1>", "if", "(", "a", "[", "0", "]", "==", "a", "[", "1", "]", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "[ H , H ]"]]}, {"line": 1, "state": [["a", "[ H , H ]"]]}, {"line": 2, "state": [["a", "[ H , H ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 11540, "code": "double INF = Double.POSITIVE_INFINITY;\nString S = \"SUN\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(7);\n} else if (S.equals(\"MON\")) {\nSystem.out.println(6);\n} else if (S.equals(\"TUE\")) {\nSystem.out.println(5);\n} else if (S.equals(\"WED\")) {\nSystem.out.println(4);\n} else if (S.equals(\"THU\")) {\nSystem.out.println(3);\n} else if (S.equals(\"FRI\")) {\nSystem.out.println(2);\n} else if (S.equals(\"SAT\")) {\nSystem.out.println(1);}", "code_tokens": ["<0>", "double", "INF", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<1>", "String", "S", "=", "\"SUN\"", ";", "<2>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "<4>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "6", ")", ";", "<6>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "5", ")", ";", "<8>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "4", ")", ";", "<10>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "3", ")", ";", "<12>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<13>", "System", ".", "out", ".", "println", "(", "2", ")", ";", "<14>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<15>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": []}, {"line": 5, "state": []}, {"line": 6, "state": []}, {"line": 7, "state": []}, {"line": 8, "state": []}, {"line": 9, "state": []}, {"line": 10, "state": []}, {"line": 11, "state": [["INF", "inf"]]}, {"line": 12, "state": [["INF", "inf"]]}, {"line": 13, "state": [["INF", "inf"], ["S", "SUN"]]}, {"line": 14, "state": [["INF", "inf"], ["S", "SUN"]]}, {"line": 15, "state": [["INF", "inf"], ["S", "SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8]], "9": [[9]], "10": [[10]], "11": [[11]], "12": [[12]], "13": [[13]], "14": [[14, 13]], "15": [[15]]}}
{"id": 6714, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nString ans = \"No\";\nint sum_ = 0;for (int num : A) {sum_ += num;}\nif (H <= sum_) {\nans = \"Yes\";}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "String", "ans", "=", "\"No\"", ";", "<3>", "int", "sum_", "=", "0", ";", "for", "(", "int", "num", ":", "A", ")", "{", "sum_", "+=", "num", ";", "}", "<4>", "if", "(", "H", "<=", "sum_", ")", "{", "<5>", "ans", "=", "\"Yes\"", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"], ["sum_", "210"]]}, {"line": 4, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"], ["sum_", "210"]]}, {"line": 6, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"], ["sum_", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 3, 1]], "6": [[6, 2]]}}
{"id": 6954, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nSystem.out.println(H <= sum(A) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "H", "<=", "sum", "(", "A", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 9549, "code": "String s = \"2017/01/31\";\nint a = Integer.parseInt(s.substring(0, 4));\nSystem.out.println((a + 1) + s.substring(4));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "int", "a", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "4", ")", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "a", "+", "1", ")", "+", "s", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2017/01/31"], ["a", "2017"]]}, {"line": 2, "state": [["s", "2017/01/31"], ["a", "2017"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11302, "code": "String s = \"SAT\";\njava.util.HashMap<Integer, String> dict1 = new java.util.HashMap<>();dict1.put(7, \"SUN\");dict1.put(6, \"MON\");dict1.put(5, \"TUE\");dict1.put(4, \"WED\");dict1.put(3, \"THU\");dict1.put(2, \"FRI\");dict1.put(1, \"SAT\");\njava.util.List<Integer> keys = new java.util.ArrayList<>();for (java.util.Map.Entry<Integer, String> entry : dict1.entrySet()) {if (entry.getValue().equals(s)) {keys.add(entry.getKey());}}\nSystem.out.println(keys.get(0));", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "java", ".", "util", ".", "HashMap", "<", "Integer", ",", "String", ">", "dict1", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "dict1", ".", "put", "(", "7", ",", "\"SUN\"", ")", ";", "dict1", ".", "put", "(", "6", ",", "\"MON\"", ")", ";", "dict1", ".", "put", "(", "5", ",", "\"TUE\"", ")", ";", "dict1", ".", "put", "(", "4", ",", "\"WED\"", ")", ";", "dict1", ".", "put", "(", "3", ",", "\"THU\"", ")", ";", "dict1", ".", "put", "(", "2", ",", "\"FRI\"", ")", ";", "dict1", ".", "put", "(", "1", ",", "\"SAT\"", ")", ";", "<2>", "java", ".", "util", ".", "List", "<", "Integer", ">", "keys", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "java", ".", "util", ".", "Map", ".", "Entry", "<", "Integer", ",", "String", ">", "entry", ":", "dict1", ".", "entrySet", "(", ")", ")", "{", "if", "(", "entry", ".", "getValue", "(", ")", ".", "equals", "(", "s", ")", ")", "{", "keys", ".", "add", "(", "entry", ".", "getKey", "(", ")", ")", ";", "}", "}", "<3>", "System", ".", "out", ".", "println", "(", "keys", ".", "get", "(", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["dict1", "{ 7"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["k", "7"], ["v", "SUN"]]}, {"line": 2, "state": [["k", "6"], ["v", "MON"]]}, {"line": 2, "state": [["k", "5"], ["v", "TUE"]]}, {"line": 2, "state": [["k", "4"], ["v", "WED"]]}, {"line": 2, "state": [["k", "3"], ["v", "THU"]]}, {"line": 2, "state": [["k", "2"], ["v", "FRI"]]}, {"line": 2, "state": [["k", "1"], ["v", "SAT"]]}, {"line": 2, "state": [["k", "1"], ["v", "SAT"]]}, {"line": 2, "state": [["s", "SAT"], ["dict1", "{ 7"], ["keys", "[ 1 ]"]]}, {"line": 3, "state": [["s", "SAT"], ["dict1", "{ 7"], ["keys", "[ 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 8862, "code": "int N = 1;\nint[] U = {2};\nint[] D = {3};\nint[] U_reversed = new int[N];for (int i = 0; i < N; i++) {U_reversed[i] = U[N - 1 - i];}U = U_reversed;\nint[] D_reversed = new int[N];for (int i = 0; i < N; i++) {D_reversed[i] = D[N - 1 - i];}D = D_reversed;\nint up = 0;\nint down = 0;\nint[] upper = new int[N + 1];upper[0] = 0;\nint[] downer = new int[N];\nfor (int i = 0; i < N; i++) {\nup += U[i];\ndown += D[i];\nupper[i + 1] = up;\ndowner[i] = down;}\nint[] upper_reversed = new int[N + 1];for (int i = 0; i <= N; i++) {upper_reversed[i] = upper[N - i];}upper = upper_reversed;\nint[] downer_reversed = new int[N];for (int i = 0; i < N; i++) {downer_reversed[i] = downer[N - 1 - i];}downer = downer_reversed;\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint ret = upper[0] - upper[i + 1] + downer[i];\nans = Math.max(ans, ret);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "U", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "D", "=", "{", "3", "}", ";", "<3>", "int", "[", "]", "U_reversed", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "U_reversed", "[", "i", "]", "=", "U", "[", "N", "-", "1", "-", "i", "]", ";", "}", "U", "=", "U_reversed", ";", "<4>", "int", "[", "]", "D_reversed", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "D_reversed", "[", "i", "]", "=", "D", "[", "N", "-", "1", "-", "i", "]", ";", "}", "D", "=", "D_reversed", ";", "<5>", "int", "up", "=", "0", ";", "<6>", "int", "down", "=", "0", ";", "<7>", "int", "[", "]", "upper", "=", "new", "int", "[", "N", "+", "1", "]", ";", "upper", "[", "0", "]", "=", "0", ";", "<8>", "int", "[", "]", "downer", "=", "new", "int", "[", "N", "]", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<10>", "up", "+=", "U", "[", "i", "]", ";", "<11>", "down", "+=", "D", "[", "i", "]", ";", "<12>", "upper", "[", "i", "+", "1", "]", "=", "up", ";", "<13>", "downer", "[", "i", "]", "=", "down", ";", "}", "<14>", "int", "[", "]", "upper_reversed", "=", "new", "int", "[", "N", "+", "1", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "N", ";", "i", "++", ")", "{", "upper_reversed", "[", "i", "]", "=", "upper", "[", "N", "-", "i", "]", ";", "}", "upper", "=", "upper_reversed", ";", "<15>", "int", "[", "]", "downer_reversed", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "downer_reversed", "[", "i", "]", "=", "downer", "[", "N", "-", "1", "-", "i", "]", ";", "}", "downer", "=", "downer_reversed", ";", "<16>", "int", "ans", "=", "0", ";", "<17>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<18>", "int", "ret", "=", "upper", "[", "0", "]", "-", "upper", "[", "i", "+", "1", "]", "+", "downer", "[", "i", "]", ";", "<19>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "ret", ")", ";", "}", "<20>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["U", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"]]}, {"line": 4, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"]]}, {"line": 5, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "0"]]}, {"line": 6, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "0"], ["down", "0"]]}, {"line": 7, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "0"], ["down", "0"], ["upper", "[ 0 ]"]]}, {"line": 8, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "0"], ["down", "0"], ["upper", "[ 0 ]"], ["downer", "[ ]"]]}, {"line": 9, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "0"], ["down", "0"], ["upper", "[ 0 ]"], ["downer", "[ ]"], ["i", "0"]]}, {"line": 10, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "0"], ["upper", "[ 0 ]"], ["downer", "[ ]"], ["i", "0"]]}, {"line": 11, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 0 ]"], ["downer", "[ ]"], ["i", "0"]]}, {"line": 12, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 0 , 2 ]"], ["downer", "[ ]"], ["i", "0"]]}, {"line": 13, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 0 , 2 ]"], ["downer", "[ 3 ]"], ["i", "0"]]}, {"line": 9, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 0 , 2 ]"], ["downer", "[ 3 ]"], ["i", "0"]]}, {"line": 14, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"]]}, {"line": 15, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"]]}, {"line": 16, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"], ["ans", "0"]]}, {"line": 17, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"], ["ans", "0"]]}, {"line": 18, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"], ["ans", "0"], ["ret", "5"]]}, {"line": 19, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"], ["ans", "5"], ["ret", "5"]]}, {"line": 17, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"], ["ans", "5"], ["ret", "5"]]}, {"line": 20, "state": [["N", "1"], ["U", "[ 2 ]"], ["D", "[ 3 ]"], ["up", "2"], ["down", "3"], ["upper", "[ 2 , 0 ]"], ["downer", "[ 3 ]"], ["i", "0"], ["ans", "5"], ["ret", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 2]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8]], "9": [[9, 0], [9, 11, 10, 9, 0]], "10": [[10, 9, 0]], "11": [[11, 10, 9, 0]], "12": [[12, 10, 9, 0]], "13": [[13, 11, 10, 9, 0]], "14": [[14, 12, 10, 9, 0]], "15": [[15, 13, 11, 10, 9, 0]], "16": [[16]], "17": [[17, 9, 11, 10, 9, 0], [17, 18, 17, 9, 11, 10, 9, 0]], "18": [[18, 17, 9, 11, 10, 9, 0]], "19": [[19, 18, 17, 9, 11, 10, 9, 0]], "20": [[20, 19, 18, 17, 9, 11, 10, 9, 0]]}}
{"id": 3238, "code": "int a = 20, b = 15;\nif (a > 2 * b) {System.out.println(a - 2 * b);} else {System.out.println(0);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "if", "(", "a", ">", "2", "*", "b", ")", "{", "System", ".", "out", ".", "println", "(", "a", "-", "2", "*", "b", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9646, "code": "int N = 8;\nchar[] S = {')', ')', ')', ')', '(', '(', '(', '('};\nint[] d = new int[N + 1];\nfor (int i = 0; i <= N; i++) {\nString partial = new String(S, 0, i);\nd[i] = countCharacter(partial, '(') - countCharacter(partial, ')');}\nint a = -min(d);\nint b = d[d.length - 1];\nSystem.out.println(\"(\".repeat(a) + String.valueOf(S) + \")\".repeat(b + a));", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "char", "[", "]", "S", "=", "{", "')'", ",", "')'", ",", "')'", ",", "')'", ",", "'('", ",", "'('", ",", "'('", ",", "'('", "}", ";", "<2>", "int", "[", "]", "d", "=", "new", "int", "[", "N", "+", "1", "]", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "N", ";", "i", "++", ")", "{", "<4>", "String", "partial", "=", "new", "String", "(", "S", ",", "0", ",", "i", ")", ";", "<5>", "d", "[", "i", "]", "=", "countCharacter", "(", "partial", ",", "'('", ")", "-", "countCharacter", "(", "partial", ",", "')'", ")", ";", "}", "<6>", "int", "a", "=", "-", "min", "(", "d", ")", ";", "<7>", "int", "b", "=", "d", "[", "d", ".", "length", "-", "1", "]", ";", "<8>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "a", ")", "+", "String", ".", "valueOf", "(", "S", ")", "+", "\")\"", ".", "repeat", "(", "b", "+", "a", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "8"]]}, {"line": 1, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 2, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ ]"], ["i", "0"], ["partial", "[ ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 ]"], ["i", "0"], ["partial", "[ ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 ]"], ["i", "1"], ["partial", "[ ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 ]"], ["i", "1"], ["partial", "[ ) ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 ]"], ["i", "1"], ["partial", "[ ) ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 ]"], ["i", "2"], ["partial", "[ ) ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 ]"], ["i", "2"], ["partial", "[ ) , ) ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 ]"], ["i", "2"], ["partial", "[ ) , ) ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 ]"], ["i", "3"], ["partial", "[ ) , ) ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 ]"], ["i", "3"], ["partial", "[ ) , ) , ) ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 ]"], ["i", "3"], ["partial", "[ ) , ) , ) ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 ]"], ["i", "4"], ["partial", "[ ) , ) , ) ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 ]"], ["i", "4"], ["partial", "[ ) , ) , ) , ) ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 ]"], ["i", "4"], ["partial", "[ ) , ) , ) , ) ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 ]"], ["i", "5"], ["partial", "[ ) , ) , ) , ) ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 ]"], ["i", "5"], ["partial", "[ ) , ) , ) , ) , ( ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 ]"], ["i", "5"], ["partial", "[ ) , ) , ) , ) , ( ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 ]"], ["i", "6"], ["partial", "[ ) , ) , ) , ) , ( ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 ]"], ["i", "6"], ["partial", "[ ) , ) , ) , ) , ( , ( ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 ]"], ["i", "6"], ["partial", "[ ) , ) , ) , ) , ( , ( ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 ]"], ["i", "7"], ["partial", "[ ) , ) , ) , ) , ( , ( ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 ]"], ["i", "7"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 ]"], ["i", "7"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["a", "4"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["a", "4"], ["b", "0"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["d", "[ 0 , -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["i", "8"], ["partial", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["a", "4"], ["b", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "6": [[6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "7": [[7, 6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "8": [[8, 7, 6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]]}}
{"id": 14374, "code": "int N = 9;\nint[] A = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint last = 0;\nint ans = 1;\nfor (int i = 0; i < N - 1; i++) {\nint diff = A[i] - A[i + 1];\nif (last == 0) {\nif (diff > 0) {\nlast = 1;}\nelse if (diff < 0) {\nlast = -1;}}\nelse if (last * diff < 0) {\nans += 1;\nlast = 0;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "9", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "last", "=", "0", ";", "<3>", "int", "ans", "=", "1", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<5>", "int", "diff", "=", "A", "[", "i", "]", "-", "A", "[", "i", "+", "1", "]", ";", "<6>", "if", "(", "last", "==", "0", ")", "{", "<7>", "if", "(", "diff", ">", "0", ")", "{", "<8>", "last", "=", "1", ";", "}", "<9>", "else", "if", "(", "diff", "<", "0", ")", "{", "<10>", "last", "=", "-", "1", ";", "}", "}", "<11>", "else", "if", "(", "last", "*", "diff", "<", "0", ")", "{", "<12>", "ans", "+=", "1", ";", "<13>", "last", "=", "0", ";", "}", "}", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "9"]]}, {"line": 1, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"]]}, {"line": 3, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "-1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "1"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "2"], ["i", "1"], ["diff", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "2"], ["i", "1"], ["diff", "1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "2"], ["i", "2"], ["diff", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "2"], ["i", "2"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "2"], ["i", "2"], ["diff", "-1"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "2"], ["i", "2"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "2"], ["i", "2"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "2"], ["i", "2"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "2"], ["i", "3"], ["diff", "-1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "3"], ["i", "3"], ["diff", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "3"], ["i", "3"], ["diff", "1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "3"], ["i", "4"], ["diff", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "3"], ["i", "4"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "3"], ["i", "4"], ["diff", "-1"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "3"], ["i", "4"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "3"], ["i", "4"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "3"], ["i", "4"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "1"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "4"], ["i", "5"], ["diff", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "4"], ["i", "5"], ["diff", "1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "4"], ["i", "6"], ["diff", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "4"], ["i", "6"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "4"], ["i", "6"], ["diff", "-1"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "4"], ["i", "6"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "4"], ["i", "6"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "4"], ["i", "6"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "4"], ["i", "7"], ["diff", "-1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "4"], ["i", "7"], ["diff", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "4"], ["i", "7"], ["diff", "1"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "4"], ["i", "7"], ["diff", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "-1"], ["ans", "5"], ["i", "7"], ["diff", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "5"], ["i", "7"], ["diff", "1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "5"], ["i", "7"], ["diff", "1"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["last", "0"], ["ans", "5"], ["i", "7"], ["diff", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 2], [6, 10, 6, 2], [6, 13, 11, 6, 10, 6, 2], [6, 10, 6, 13, 11, 6, 10, 6, 2], [6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2]], "7": [[7, 5, 4, 0], [7, 5, 4, 5, 4, 5, 4, 0], [7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "9": [[9, 7, 5, 4, 0], [9, 7, 5, 4, 5, 4, 5, 4, 0], [9, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [9, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "10": [[10, 6, 2], [10, 6, 13, 11, 6, 10, 6, 2], [10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2]], "11": [[11, 6, 10, 6, 2], [11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2]], "12": [[12, 3], [12, 3], [12, 3], [12, 3]], "13": [[13, 11, 6, 10, 6, 2], [13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2], [13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 13, 11, 6, 10, 6, 2]], "14": [[14, 12, 3]]}}
{"id": 12087, "code": "String m1 = \"11\"; String d1 = \"16\";\nString m2 = \"11\"; String d2 = \"17\";\nif (!m1.equals(m2)) {\nSystem.out.println(\"1\");\n} else {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "String", "m1", "=", "\"11\"", ";", "String", "d1", "=", "\"16\"", ";", "<1>", "String", "m2", "=", "\"11\"", ";", "String", "d2", "=", "\"17\"", ";", "<2>", "if", "(", "!", "m1", ".", "equals", "(", "m2", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "16"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 5, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 12241, "code": "String a = \"level\";\nint b = a.length();\ndouble c = (b - 1) / 2.0;\ndouble d = (b + 1) / 2.0;\nif (a.substring(0, (int)c).equals(a.substring((int)d))) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "a", "=", "\"level\"", ";", "<1>", "int", "b", "=", "a", ".", "length", "(", ")", ";", "<2>", "double", "c", "=", "(", "b", "-", "1", ")", "/", "2.0", ";", "<3>", "double", "d", "=", "(", "b", "+", "1", ")", "/", "2.0", ";", "<4>", "if", "(", "a", ".", "substring", "(", "0", ",", "(", "int", ")", "c", ")", ".", "equals", "(", "a", ".", "substring", "(", "(", "int", ")", "d", ")", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "level"]]}, {"line": 1, "state": [["a", "level"], ["b", "5"]]}, {"line": 2, "state": [["a", "level"], ["b", "5"], ["c", "2.0"]]}, {"line": 3, "state": [["a", "level"], ["b", "5"], ["c", "2.0"], ["d", "3.0"]]}, {"line": 4, "state": [["a", "level"], ["b", "5"], ["c", "2.0"], ["d", "3.0"]]}, {"line": 7, "state": [["a", "level"], ["b", "5"], ["c", "2.0"], ["d", "3.0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "7": [[7]]}}
{"id": 6036, "code": "Scanner input = new Scanner(System.in);\nint n = 100;\nSystem.out.println((int) Math.ceil(n / 2.0));", "code_tokens": ["<0>", "Scanner", "input", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "n", "=", "100", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "n", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["n", "100"]]}, {"line": 4, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3]]}}
{"id": 15993, "code": "String a1 = \"20 15\";\nString[] a2 = a1.split(\" \");\nString a3 = a2[0];String a4 = a2[1];\nint A = Integer.parseInt(a3);int B = Integer.parseInt(a4);\nSystem.out.println(Math.max(0, A - 2 * B));", "code_tokens": ["<0>", "String", "a1", "=", "\"20 15\"", ";", "<1>", "String", "[", "]", "a2", "=", "a1", ".", "split", "(", "\" \"", ")", ";", "<2>", "String", "a3", "=", "a2", "[", "0", "]", ";", "String", "a4", "=", "a2", "[", "1", "]", ";", "<3>", "int", "A", "=", "Integer", ".", "parseInt", "(", "a3", ")", ";", "int", "B", "=", "Integer", ".", "parseInt", "(", "a4", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "A", "-", "2", "*", "B", ")", ")", ";"], "trace": [{"line": 0, "state": [["a1", "20 15"]]}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": [["i", "20"]]}, {"line": 1, "state": [["i", "15"]]}, {"line": 1, "state": [["i", "15"]]}, {"line": 1, "state": [["a1", "20 15"], ["a2", "[ 20 , 15 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["i", "0"]]}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["a1", "20 15"], ["a2", "[ 20 , 15 ]"], ["a3", "20"], ["a4", "15"]]}, {"line": 3, "state": [["a1", "20 15"], ["a2", "[ 20 , 15 ]"], ["a3", "20"], ["a4", "15"], ["A", "20"], ["B", "15"]]}, {"line": 4, "state": [["a1", "20 15"], ["a2", "[ 20 , 15 ]"], ["a3", "20"], ["a4", "15"], ["A", "20"], ["B", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], "2": [[2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 5731, "code": "System.out.println(-(-Integer.parseInt(\"5\") / 2));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "Integer", ".", "parseInt", "(", "\"5\"", ")", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 65, "code": "char[] S = {'c', 'o', 'd', 'e', 'f', 'e', 's', 't', 'i', 'v', 'a', 'l'};\nint K = 100;\nfor (int i = 0; i < S.length; i++) {\nif (S[i] == 'a') {\ncontinue;}\nint d = 'z' - S[i] + 1;\nif (K >= d) {\nS[i] = 'a';\nK -= d;}}\nif (K > 0) {\nint j = S[S.length - 1] + K % 26;\nS[S.length - 1] = (char) j;}\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'c'", ",", "'o'", ",", "'d'", ",", "'e'", ",", "'f'", ",", "'e'", ",", "'s'", ",", "'t'", ",", "'i'", ",", "'v'", ",", "'a'", ",", "'l'", "}", ";", "<1>", "int", "K", "=", "100", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", ";", "i", "++", ")", "{", "<3>", "if", "(", "S", "[", "i", "]", "==", "'a'", ")", "{", "<4>", "continue", ";", "}", "<5>", "int", "d", "=", "'z'", "-", "S", "[", "i", "]", "+", "1", ";", "<6>", "if", "(", "K", ">=", "d", ")", "{", "<7>", "S", "[", "i", "]", "=", "'a'", ";", "<8>", "K", "-=", "d", ";", "}", "}", "<9>", "if", "(", "K", ">", "0", ")", "{", "<10>", "int", "j", "=", "S", "[", "S", ".", "length", "-", "1", "]", "+", "K", "%", "26", ";", "<11>", "S", "[", "S", ".", "length", "-", "1", "]", "=", "(", "char", ")", "j", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"]]}, {"line": 1, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"]]}, {"line": 2, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"]]}, {"line": 3, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"]]}, {"line": 5, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"], ["d", "24"]]}, {"line": 6, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"], ["d", "24"]]}, {"line": 7, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"], ["d", "24"]]}, {"line": 8, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "0"], ["d", "24"]]}, {"line": 2, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["d", "24"]]}, {"line": 3, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["d", "24"]]}, {"line": 5, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["d", "12"]]}, {"line": 6, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["d", "12"]]}, {"line": 7, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["d", "12"]]}, {"line": 8, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "1"], ["d", "12"]]}, {"line": 2, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["d", "12"]]}, {"line": 3, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["d", "12"]]}, {"line": 5, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["d", "23"]]}, {"line": 6, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["d", "23"]]}, {"line": 7, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["d", "23"]]}, {"line": 8, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "2"], ["d", "23"]]}, {"line": 2, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["d", "23"]]}, {"line": 3, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["d", "23"]]}, {"line": 5, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["d", "22"]]}, {"line": 6, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["d", "22"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["d", "22"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "3"], ["d", "22"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["d", "22"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["d", "22"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["d", "21"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["d", "21"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["d", "21"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["d", "21"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["d", "22"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["d", "22"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["d", "22"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["d", "22"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["d", "8"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["d", "8"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["d", "8"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "6"], ["d", "8"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["d", "8"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["d", "8"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["d", "7"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["d", "7"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["d", "7"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "7"], ["d", "7"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["d", "7"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["d", "7"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["d", "18"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["d", "18"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["d", "18"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["d", "18"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["d", "5"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["d", "5"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["d", "5"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["d", "5"]]}, {"line": 4, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["d", "5"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "5"]]}, {"line": 3, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "5"]]}, {"line": 5, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "15"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "15"]]}, {"line": 2, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "15"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "15"]]}, {"line": 10, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "11"], ["d", "15"], ["j", "112"]]}, {"line": 11, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["K", "4"], ["i", "11"], ["d", "15"], ["j", "112"]]}, {"line": 12, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["K", "4"], ["i", "11"], ["d", "15"], ["j", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 7, 5, 3, 2, 0], [2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [2, 5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 7, 5, 3, 2, 0], [3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "4": [[4]], "5": [[5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "6": [[6, 5, 3, 2, 0], [6, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [6, 5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "7": [[7, 5, 3, 2, 0], [7, 5, 3, 2, 7, 5, 3, 2, 0], [7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "8": [[8, 6, 5, 3, 2, 0], [8, 6, 5, 3, 2, 7, 5, 3, 2, 0], [8, 6, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [8, 6, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [8, 6, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0], [8, 6, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "9": [[9, 6, 5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "10": [[10, 9, 6, 5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "11": [[11, 10, 9, 6, 5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]], "12": [[12, 11, 10, 9, 6, 5, 3, 2, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 7, 5, 3, 2, 0]]}}
{"id": 5441, "code": "int n = 2;\nSystem.out.println(n / 2 + (n % 2) * 1);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "(", "n", "%", "2", ")", "*", "1", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 10033, "code": "int N = 8;\nchar[] S = {')', ')', ')', ')', '(', '(', '(', '('};\nint count = 0;\nint[] LR = {0, 0};\nfor (int i = 0; i < N; i++) {\nif (S[i] == '(') {\ncount += 1;}\nelse {\nif (count == 0) {\nLR[0] += 1;\ncontinue;}\ncount -= 1;}}\nLR[1] = count;\nfor (int i = 0; i < 2; i++) {\nfor (int j = 0; j < LR[i]; j++) {\nif (i == 0) {\nS = insertAtBeginning(S, '(');}\nelse {\nS = appendToEnd(S, ')');}}}\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "char", "[", "]", "S", "=", "{", "')'", ",", "')'", ",", "')'", ",", "')'", ",", "'('", ",", "'('", ",", "'('", ",", "'('", "}", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "int", "[", "]", "LR", "=", "{", "0", ",", "0", "}", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "S", "[", "i", "]", "==", "'('", ")", "{", "<6>", "count", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "count", "==", "0", ")", "{", "<9>", "LR", "[", "0", "]", "+=", "1", ";", "<10>", "continue", ";", "}", "<11>", "count", "-=", "1", ";", "}", "}", "<12>", "LR", "[", "1", "]", "=", "count", ";", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "2", ";", "i", "++", ")", "{", "<14>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "LR", "[", "i", "]", ";", "j", "++", ")", "{", "<15>", "if", "(", "i", "==", "0", ")", "{", "<16>", "S", "=", "insertAtBeginning", "(", "S", ",", "'('", ")", ";", "}", "<17>", "else", "{", "<18>", "S", "=", "appendToEnd", "(", "S", ",", "')'", ")", ";", "}", "}", "}", "<19>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "8"]]}, {"line": 1, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 2, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"], ["i", "0"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"], ["i", "0"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "0"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "1"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "1"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "1"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "2"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "2"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "2"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "3"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "3"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "3"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "4"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "4"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "1"], ["LR", "[ 4 , 0 ]"], ["i", "4"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "1"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "1"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "2"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "2"], ["LR", "[ 4 , 0 ]"], ["i", "6"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "2"], ["LR", "[ 4 , 0 ]"], ["i", "6"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "3"], ["LR", "[ 4 , 0 ]"], ["i", "6"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "3"], ["LR", "[ 4 , 0 ]"], ["i", "7"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "3"], ["LR", "[ 4 , 0 ]"], ["i", "7"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 0 ]"], ["i", "7"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 0 ]"], ["i", "7"]]}, {"line": 12, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "7"]]}, {"line": 13, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "0"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "0"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "0"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "1"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "1"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "1"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "2"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "2"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "2"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "3"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "3"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "3"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "0"], ["j", "3"]]}, {"line": 13, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "0"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "0"]]}, {"line": 18, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "0"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "1"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "1"]]}, {"line": 18, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "1"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "2"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "2"]]}, {"line": 18, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "2"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}, {"line": 18, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}, {"line": 14, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}, {"line": 13, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}, {"line": 19, "state": [["N", "8"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["LR", "[ 4 , 4 ]"], ["i", "1"], ["j", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 8, 2], [6, 8, 2], [6, 8, 2], [6, 8, 2]], "8": [[8, 2], [8, 2], [8, 2], [8, 2]], "9": [[9, 3], [9, 3], [9, 3], [9, 3]], "10": [[10], [10], [10], [10]], "12": [[12, 6, 8, 2]], "13": [[13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "14": [[14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "15": [[15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 15, 14, 15, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "16": [[16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "18": [[18, 16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [18, 16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [18, 16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [18, 16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "19": [[19, 18, 16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 6852, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nif (H <= Arrays.stream(A).sum()) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "H", "<=", "Arrays", ".", "stream", "(", "A", ")", ".", "sum", "(", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["H", "211"], ["N", "5"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 6, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 8265, "code": "int n = 8, k = 3;\nint[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nint ans = 1;\nn -= k;\nk -= 1;\nif (n % k == 0) {\nans += n / k;}\nelse {\nans += n / k + 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "n", "-=", "k", ";", "<4>", "k", "-=", "1", ";", "<5>", "if", "(", "n", "%", "k", "==", "0", ")", "{", "<6>", "ans", "+=", "n", "/", "k", ";", "}", "<7>", "else", "{", "<8>", "ans", "+=", "n", "/", "k", "+", "1", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 4, "state": [["n", "5"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 5, "state": [["n", "5"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 8, "state": [["n", "5"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "4"]]}, {"line": 9, "state": [["n", "5"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]], "5": [[5, 4, 3, 0]], "8": [[8, 5, 4, 3, 0]], "9": [[9, 8, 5, 4, 3, 0]]}}
{"id": 17066, "code": "System.out.println(\"HD\"[(\"D D\".contains(\"H D H\")) ? 1 : 0]);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"HD\"", "[", "(", "\"D D\"", ".", "contains", "(", "\"H D H\"", ")", ")", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 18336, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint A = Math.max(H, W);\nint ans = (N + A - 1) / A;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "A", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "int", "ans", "=", "(", "N", "+", "A", "-", "1", ")", "/", "A", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["A", "14"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["A", "14"], ["ans", "8"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["A", "14"], ["ans", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 1678, "code": "int n = 100, a = 100, b = 100;\nint MAX, MIN;if (n >= (a + b)) {\nMAX = Math.min(a, b);\nMIN = 0;} else {\nMAX = Math.min(a, b);\nMIN = a + b - n;}\nSystem.out.println(MAX + \" \" + MIN);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "MAX", ",", "MIN", ";", "if", "(", "n", ">=", "(", "a", "+", "b", ")", ")", "{", "<2>", "MAX", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<3>", "MIN", "=", "0", ";", "}", "else", "{", "<4>", "MAX", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<5>", "MIN", "=", "a", "+", "b", "-", "n", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "MAX", "+", "\" \"", "+", "MIN", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 5, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["MAX", "100"]]}, {"line": 6, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["MAX", "100"], ["MIN", "100"]]}, {"line": 7, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["MAX", "100"], ["MIN", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "5": [[5, 1, 0]], "6": [[6, 5, 1, 0]], "7": [[7, 6, 5, 1, 0]]}}
{"id": 3007, "code": "String S = \"35753\";\nint ans = 1000;\nfor (int i = 0; i < S.length() - 2; i++) {\nint t = Math.abs(Integer.parseInt(S.substring(i, i + 3)) - 753);\nif (t < ans) {\nans = t;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"35753\"", ";", "<1>", "int", "ans", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "t", "=", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ";", "<4>", "if", "(", "t", "<", "ans", ")", "{", "<5>", "ans", "=", "t", ";", "}", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "35753"]]}, {"line": 1, "state": [["S", "35753"], ["ans", "1000"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "1000"], ["i", "0"]]}, {"line": 3, "state": [["S", "35753"], ["ans", "1000"], ["i", "0"], ["t", "396"]]}, {"line": 4, "state": [["S", "35753"], ["ans", "1000"], ["i", "0"], ["t", "396"]]}, {"line": 5, "state": [["S", "35753"], ["ans", "396"], ["i", "0"], ["t", "396"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "396"], ["i", "1"], ["t", "396"]]}, {"line": 3, "state": [["S", "35753"], ["ans", "396"], ["i", "1"], ["t", "178"]]}, {"line": 4, "state": [["S", "35753"], ["ans", "396"], ["i", "1"], ["t", "178"]]}, {"line": 5, "state": [["S", "35753"], ["ans", "178"], ["i", "1"], ["t", "178"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "178"], ["i", "2"], ["t", "178"]]}, {"line": 3, "state": [["S", "35753"], ["ans", "178"], ["i", "2"], ["t", "0"]]}, {"line": 4, "state": [["S", "35753"], ["ans", "178"], ["i", "2"], ["t", "0"]]}, {"line": 5, "state": [["S", "35753"], ["ans", "0"], ["i", "2"], ["t", "0"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "0"], ["i", "2"], ["t", "0"]]}, {"line": 6, "state": [["S", "35753"], ["ans", "0"], ["i", "2"], ["t", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 16424, "code": "int n = 2;\nint[] l = {100, 0};\njava.util.Arrays.sort(l);\nint ans1 = l[l.length - 1];\nint ans2 = -1;\nint diff = 1000000000;\nfor (int i = 0; i < n - 1; i++) {\nif (diff >= Math.abs(l[i] - ans1 / 2)) {\nans2 = l[i];\ndiff = Math.abs(l[i] - ans1 / 2);}}\nSystem.out.println(ans1 + \" \" + ans2);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "l", "=", "{", "100", ",", "0", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "l", ")", ";", "<3>", "int", "ans1", "=", "l", "[", "l", ".", "length", "-", "1", "]", ";", "<4>", "int", "ans2", "=", "-", "1", ";", "<5>", "int", "diff", "=", "1000000000", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<7>", "if", "(", "diff", ">=", "Math", ".", "abs", "(", "l", "[", "i", "]", "-", "ans1", "/", "2", ")", ")", "{", "<8>", "ans2", "=", "l", "[", "i", "]", ";", "<9>", "diff", "=", "Math", ".", "abs", "(", "l", "[", "i", "]", "-", "ans1", "/", "2", ")", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans1", "+", "\" \"", "+", "ans2", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["l", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["l", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"]]}, {"line": 4, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "-1"]]}, {"line": 5, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "-1"], ["diff", "1000000000"]]}, {"line": 6, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "-1"], ["diff", "1000000000"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "-1"], ["diff", "1000000000"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "0"], ["diff", "1000000000"], ["i", "0"]]}, {"line": 9, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "0"], ["diff", "50"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "0"], ["diff", "50"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["l", "[ 0 , 100 ]"], ["ans1", "100"], ["ans2", "0"], ["diff", "50"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5]], "6": [[6, 0], [6, 9, 8, 7, 6, 0]], "7": [[7, 6, 0]], "8": [[8, 7, 6, 0]], "9": [[9, 8, 7, 6, 0]], "10": [[10, 9, 8, 7, 6, 0]]}}
{"id": 10045, "code": "String n = \"3\";\nString s = \"())\";\nString ss = s;\nfor (int i = 0; i < 50; i++) {\ns = s.replace(\"()\", \"\");}\nint l = s.length() - s.replace(\")\", \"\").length();\nint r = s.length() - s.replace(\"(\", \"\").length();\nSystem.out.print(\"(\"repeat(l) + ss + \")\"repeat(r));", "code_tokens": ["<0>", "String", "n", "=", "\"3\"", ";", "<1>", "String", "s", "=", "\"())\"", ";", "<2>", "String", "ss", "=", "s", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "50", ";", "i", "++", ")", "{", "<4>", "s", "=", "s", ".", "replace", "(", "\"()\"", ",", "\"\"", ")", ";", "}", "<5>", "int", "l", "=", "s", ".", "length", "(", ")", "-", "s", ".", "replace", "(", "\")\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<6>", "int", "r", "=", "s", ".", "length", "(", ")", "-", "s", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<7>", "System", ".", "out", ".", "print", "(", "\"(\"", "repeat", "(", "l", ")", "+", "ss", "+", "\")\"", "repeat", "(", "r", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "())"]]}, {"line": 2, "state": [["n", "3"], ["s", "())"], ["ss", "())"]]}, {"line": 3, "state": [["n", "3"], ["s", "())"], ["ss", "())"], ["i", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "0"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "1"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "1"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "2"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "2"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "3"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "3"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "4"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "4"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "5"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "5"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "6"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "6"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "7"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "7"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "8"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "8"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "9"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "9"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "10"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "10"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "11"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "11"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "12"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "12"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "13"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "13"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "14"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "14"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "15"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "15"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "16"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "16"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "17"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "17"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "18"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "18"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "19"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "19"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "20"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "20"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "21"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "21"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "22"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "22"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "23"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "23"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "24"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "24"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "25"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "25"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "26"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "26"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "27"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "27"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "28"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "28"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "29"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "29"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "30"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "30"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "31"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "31"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "32"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "32"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "33"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "33"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "34"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "34"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "35"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "35"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "36"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "36"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "37"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "37"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "38"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "38"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "39"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "39"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "40"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "40"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "41"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "41"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "42"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "42"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "43"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "43"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "44"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "44"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "45"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "45"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "46"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "46"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "47"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "47"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "48"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "48"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "49"]]}, {"line": 4, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "49"]]}, {"line": 3, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "49"]]}, {"line": 5, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "49"], ["l", "1"]]}, {"line": 6, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "49"], ["l", "1"], ["r", "0"]]}, {"line": 7, "state": [["n", "3"], ["s", ")"], ["ss", "())"], ["i", "49"], ["l", "1"], ["r", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3]], "4": [[4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1]], "5": [[5, 4, 2, 1]], "6": [[6, 5, 4, 2, 1]], "7": [[7, 6, 5, 4, 2, 1]]}}
{"id": 12832, "code": "String x = \"5\";\nif (\"753\".contains(x)) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "String", "x", "=", "\"5\"", ";", "<1>", "if", "(", "\"753\"", ".", "contains", "(", "x", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "5"]]}, {"line": 1, "state": [["x", "5"]]}, {"line": 2, "state": [["x", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 4044, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nint HM1 = H1 * 60 + M1;\nint HM2 = H2 * 60 + M2;\nSystem.out.println(Math.max(HM2 - HM1 - K, 0));", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "int", "HM1", "=", "H1", "*", "60", "+", "M1", ";", "<2>", "int", "HM2", "=", "H2", "*", "60", "+", "M2", ";", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "HM2", "-", "HM1", "-", "K", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["HM1", "600"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["HM1", "600"], ["HM2", "900"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["HM1", "600"], ["HM2", "900"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 7656, "code": "int h = 211, n = 5;\nint[] A = {31, 41, 59, 26, 53};\nfor (int a : A) {\nh -= a;}\nSystem.out.println(h <= 0 ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "for", "(", "int", "a", ":", "A", ")", "{", "<3>", "h", "-=", "a", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "h", "<=", "0", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}, {"line": 1, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "31"]]}, {"line": 3, "state": [["h", "180"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "31"]]}, {"line": 2, "state": [["h", "180"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "41"]]}, {"line": 3, "state": [["h", "139"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "41"]]}, {"line": 2, "state": [["h", "139"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "59"]]}, {"line": 3, "state": [["h", "80"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "59"]]}, {"line": 2, "state": [["h", "80"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "26"]]}, {"line": 3, "state": [["h", "54"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "26"]]}, {"line": 2, "state": [["h", "54"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "53"]]}, {"line": 3, "state": [["h", "1"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "53"]]}, {"line": 2, "state": [["h", "1"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "53"]]}, {"line": 4, "state": [["h", "1"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "53"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1], [2, 3, 2, 1], [2, 3, 2, 3, 2, 1], [2, 3, 2, 3, 2, 3, 2, 1], [2, 3, 2, 3, 2, 3, 2, 3, 2, 1], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1]], "3": [[3, 2, 1], [3, 2, 3, 2, 1], [3, 2, 3, 2, 3, 2, 1], [3, 2, 3, 2, 3, 2, 3, 2, 1], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1]]}}
{"id": 3161, "code": "String S = \"1111111111\";\nint ans = Math.abs(753 - Integer.parseInt(S.substring(0, 3)));\nfor (int i = 1; i < S.length() - 2; i++) {\nint tmp = Integer.parseInt(S.substring(i, i + 3));\nans = Math.min(Math.abs(753 - tmp), ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"1111111111\"", ";", "<1>", "int", "ans", "=", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "0", ",", "3", ")", ")", ")", ";", "<2>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "tmp", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "ans", "=", "Math", ".", "min", "(", "Math", ".", "abs", "(", "753", "-", "tmp", ")", ",", "ans", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "1111111111"]]}, {"line": 1, "state": [["S", "1111111111"], ["ans", "642"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "1"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "1"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "1"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "2"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "2"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "2"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "3"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "3"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "3"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "4"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "4"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "4"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "5"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "5"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "5"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "6"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "6"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "6"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "7"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "7"], ["tmp", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "7"], ["tmp", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "8"], ["tmp", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["i", "8"], ["tmp", "11"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["i", "8"], ["tmp", "11"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "642"], ["i", "8"], ["tmp", "11"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["i", "8"], ["tmp", "11"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0], [2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0], [4, 3, 2, 3, 2, 1, 0], [4, 3, 2, 3, 2, 3, 2, 1, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]]}}
{"id": 11527, "code": "String s = \"SAT\";\nString[] days = {\"\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nSystem.out.println(java.util.Arrays.asList(days).indexOf(s));", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "days", "=", "{", "\"\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "days", ")", ".", "indexOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["days", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["s", "SAT"], ["days", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 9057, "code": "int a = 15;\nint b = 18;\nint c = 26;\nint d = 35;\nint e = 36;\nint k = 18;\nint f = 0;\nint[] values = {a, b, c, d, e};for (int i : values) {\nfor (int j : values) {\nif (Math.abs(i - j) > k) {\nf = f + 1;}}}\nif (f > 0) {\nSystem.out.println(\":(\");\n} else {\nSystem.out.println(\"Yay!\");}", "code_tokens": ["<0>", "int", "a", "=", "15", ";", "<1>", "int", "b", "=", "18", ";", "<2>", "int", "c", "=", "26", ";", "<3>", "int", "d", "=", "35", ";", "<4>", "int", "e", "=", "36", ";", "<5>", "int", "k", "=", "18", ";", "<6>", "int", "f", "=", "0", ";", "<7>", "int", "[", "]", "values", "=", "{", "a", ",", "b", ",", "c", ",", "d", ",", "e", "}", ";", "for", "(", "int", "i", ":", "values", ")", "{", "<8>", "for", "(", "int", "j", ":", "values", ")", "{", "<9>", "if", "(", "Math", ".", "abs", "(", "i", "-", "j", ")", ">", "k", ")", "{", "<10>", "f", "=", "f", "+", "1", ";", "}", "}", "}", "<11>", "if", "(", "f", ">", "0", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<13>", "}", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "15"]]}, {"line": 1, "state": [["a", "15"], ["b", "18"]]}, {"line": 2, "state": [["a", "15"], ["b", "18"], ["c", "26"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "15"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "15"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "18"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "18"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "26"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "26"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "35"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "0"], ["i", "15"], ["j", "35"]]}, {"line": 10, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "1"], ["i", "15"], ["j", "35"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "1"], ["i", "15"], ["j", "36"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "1"], ["i", "15"], ["j", "36"]]}, {"line": 10, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "15"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "15"], ["j", "36"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "15"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "15"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "18"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "18"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "26"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "26"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "35"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "35"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "36"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "18"], ["j", "36"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "15"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "15"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "18"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "18"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "26"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "26"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "35"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "35"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "36"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "26"], ["j", "36"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "35"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "35"], ["j", "15"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "2"], ["i", "35"], ["j", "15"]]}, {"line": 10, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "15"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "18"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "18"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "26"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "26"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "35"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "35"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "36"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "35"], ["j", "36"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "36"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "36"], ["j", "15"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "3"], ["i", "36"], ["j", "15"]]}, {"line": 10, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "15"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "18"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "18"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "26"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "26"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "35"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "35"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "36"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "36"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "36"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "36"]]}, {"line": 11, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "36"]]}, {"line": 12, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["f", "4"], ["i", "36"], ["j", "36"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 4, 3, 2, 1, 0], [7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0]], "8": [[8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0]], "9": [[9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 4, 3, 2, 1, 0]], "10": [[10, 6], [10, 6], [10, 6], [10, 6]], "11": [[11, 10, 6]], "12": [[12]]}}
{"id": 4998, "code": "String S = \"xyz\";System.out.println(S.charAt(0) + String.valueOf(S.length() - 2) + S.charAt(S.length() - 1));", "code_tokens": ["<0>", "String", "S", "=", "\"xyz\"", ";", "System", ".", "out", ".", "println", "(", "S", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "S", ".", "length", "(", ")", "-", "2", ")", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "xyz"]]}], "slices": {"0": [[0]]}}
{"id": 9330, "code": "String S = \"2017/01/07\";\nSystem.out.println(\"2018\" + S.substring(4));", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "S", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/07"]]}, {"line": 1, "state": [["S", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9513, "code": "String s = \"2017/01/31\";\nSystem.out.println(\"2018/01\" + s.substring(s.length() - 3));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018/01\"", "+", "s", ".", "substring", "(", "s", ".", "length", "(", ")", "-", "3", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8277, "code": "int n = 8, k = 3;\nk -= 1;\nint[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nint i = n - 1;\nSystem.out.println(-(-i / k) - (-(n - i - 1) / k));", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "k", "-=", "1", ";", "<2>", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<3>", "int", "i", "=", "n", "-", "1", ";", "<4>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "i", "/", "k", ")", "-", "(", "-", "(", "n", "-", "i", "-", "1", ")", "/", "k", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "2"]]}, {"line": 2, "state": [["n", "8"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 3, "state": [["n", "8"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "7"]]}, {"line": 4, "state": [["n", "8"], ["k", "2"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]]}}
{"id": 5555, "code": "int n = 2;\nint a = 0;\nif (n % 2 == 0) {\na = n / 2;} else {\na = n / 2 + 1;}\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "a", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "a", "=", "n", "/", "2", ";", "}", "else", "{", "<4>", "a", "=", "n", "/", "2", "+", "1", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "0"]]}, {"line": 2, "state": [["n", "2"], ["a", "0"]]}, {"line": 3, "state": [["n", "2"], ["a", "1"]]}, {"line": 6, "state": [["n", "2"], ["a", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "6": [[6, 3, 2, 0]]}}
{"id": 15591, "code": "int X = 13, Y = 3, Z = 1;\nX -= Z;\nSystem.out.println(X / (Y + Z));", "code_tokens": ["<0>", "int", "X", "=", "13", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "X", "-=", "Z", ";", "<2>", "System", ".", "out", ".", "println", "(", "X", "/", "(", "Y", "+", "Z", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "13"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 10063, "code": "int n = 6;\nString s = \")))())\";\nint a = 0;\nint b = 0;\nfor (int i = 0; i < n; i++) {\nif (s.charAt(i) == '(') {\na += 1;}\nelse {\nif (a == 0) {\nb += 1;}\nelse {\na -= 1;}}}\nSystem.out.println(\"(\".repeat(b) + s + \")\".repeat(a));", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "int", "a", "=", "0", ";", "<3>", "int", "b", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<6>", "a", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "a", "==", "0", ")", "{", "<9>", "b", "+=", "1", ";", "}", "<10>", "else", "{", "<11>", "a", "-=", "1", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "b", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "a", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["a", "0"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "1"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "1"], ["i", "1"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "2"], ["i", "1"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "2"], ["i", "2"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "2"], ["i", "2"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "2"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["a", "1"], ["b", "3"], ["i", "3"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "1"], ["b", "3"], ["i", "4"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["a", "1"], ["b", "3"], ["i", "4"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["a", "1"], ["b", "3"], ["i", "4"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "4"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "5"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "5"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "3"], ["i", "5"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "4"], ["i", "5"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "4"], ["i", "5"]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["a", "0"], ["b", "4"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 8, 2]], "8": [[8, 2], [8, 2], [8, 2], [8, 6, 8, 2], [8, 11, 8, 6, 8, 2]], "9": [[9, 3], [9, 3], [9, 3], [9, 3]], "11": [[11, 8, 6, 8, 2]], "12": [[12, 9, 3]]}}
{"id": 5890, "code": "int N = 5;\nif (N % 2 == 0) {System.out.println(N / 2);} else {System.out.println(N / 2 + 1);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "System", ".", "out", ".", "println", "(", "N", "/", "2", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "N", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15793, "code": "int X = 12, Y = 3, Z = 1;\nint cnt = 0;\nwhile ((X - Z) >= (Z + Y)) {\nX -= (Z + Y);\ncnt += 1;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "cnt", "=", "0", ";", "<2>", "while", "(", "(", "X", "-", "Z", ")", ">=", "(", "Z", "+", "Y", ")", ")", "{", "<3>", "X", "-=", "(", "Z", "+", "Y", ")", ";", "<4>", "cnt", "+=", "1", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["cnt", "0"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["cnt", "0"]]}, {"line": 3, "state": [["X", "8"], ["Y", "3"], ["Z", "1"], ["cnt", "0"]]}, {"line": 4, "state": [["X", "8"], ["Y", "3"], ["Z", "1"], ["cnt", "1"]]}, {"line": 2, "state": [["X", "8"], ["Y", "3"], ["Z", "1"], ["cnt", "1"]]}, {"line": 3, "state": [["X", "4"], ["Y", "3"], ["Z", "1"], ["cnt", "1"]]}, {"line": 4, "state": [["X", "4"], ["Y", "3"], ["Z", "1"], ["cnt", "2"]]}, {"line": 2, "state": [["X", "4"], ["Y", "3"], ["Z", "1"], ["cnt", "2"]]}, {"line": 5, "state": [["X", "4"], ["Y", "3"], ["Z", "1"], ["cnt", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0]], "4": [[4, 1], [4, 1]], "5": [[5, 4, 1]]}}
{"id": 9835, "code": "String _ = \"6\";\nString S = \")))())\";\nint needs_right = 0;\nint needs_left = 0;\nfor (char c : S.toCharArray()) {\nif (c == '(') {\nneeds_right += 1;}\nelse {\nif (needs_right == 0) {\nneeds_left += 1;}\nelse {\nneeds_right -= 1;}}}\nSystem.out.println(\"(\".repeat(needs_left) + S + \")\".repeat(needs_right));", "code_tokens": ["<0>", "String", "_", "=", "\"6\"", ";", "<1>", "String", "S", "=", "\")))())\"", ";", "<2>", "int", "needs_right", "=", "0", ";", "<3>", "int", "needs_left", "=", "0", ";", "<4>", "for", "(", "char", "c", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "c", "==", "'('", ")", "{", "<6>", "needs_right", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "needs_right", "==", "0", ")", "{", "<9>", "needs_left", "+=", "1", ";", "}", "<10>", "else", "{", "<11>", "needs_right", "-=", "1", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "needs_left", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "needs_right", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["S", ")))())"]]}, {"line": 2, "state": [["S", ")))())"], ["needs_right", "0"]]}, {"line": 3, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "0"]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "0"], ["c", ")"]]}, {"line": 5, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "0"], ["c", ")"]]}, {"line": 8, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "0"], ["c", ")"]]}, {"line": 9, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "1"], ["c", ")"]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "1"], ["c", ")"]]}, {"line": 5, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "1"], ["c", ")"]]}, {"line": 8, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "1"], ["c", ")"]]}, {"line": 9, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "2"], ["c", ")"]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "2"], ["c", ")"]]}, {"line": 5, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "2"], ["c", ")"]]}, {"line": 8, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "2"], ["c", ")"]]}, {"line": 9, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", ")"]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", "("]]}, {"line": 5, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", "("]]}, {"line": 6, "state": [["S", ")))())"], ["needs_right", "1"], ["needs_left", "3"], ["c", "("]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "1"], ["needs_left", "3"], ["c", ")"]]}, {"line": 5, "state": [["S", ")))())"], ["needs_right", "1"], ["needs_left", "3"], ["c", ")"]]}, {"line": 8, "state": [["S", ")))())"], ["needs_right", "1"], ["needs_left", "3"], ["c", ")"]]}, {"line": 11, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", ")"]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", ")"]]}, {"line": 5, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", ")"]]}, {"line": 8, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "3"], ["c", ")"]]}, {"line": 9, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "4"], ["c", ")"]]}, {"line": 4, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "4"], ["c", ")"]]}, {"line": 12, "state": [["S", ")))())"], ["needs_right", "0"], ["needs_left", "4"], ["c", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "6": [[6, 8, 2]], "8": [[8, 2], [8, 2], [8, 2], [8, 6, 8, 2], [8, 11, 8, 6, 8, 2]], "9": [[9, 3], [9, 3], [9, 3], [9, 3]], "11": [[11, 8, 6, 8, 2]], "12": [[12, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 3332, "code": "あ = 20;い = 15\nprint(max(0,あ-い*2))", "code_tokens": ["<0>", "あ", "=", "20", ";", "い", "=", "15", "<1>", "print", "(", "max", "(", "0", ",", "あ", "-", "い", "*", "2", ")", ")"], "trace": [{"line": 0, "state": [["あ", "20"], ["い", "15"]]}, {"line": 1, "state": [["あ", "20"], ["い", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13923, "code": "int n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nint ans = 1;\nif (n == 1) {\nSystem.out.println(ans);\nSystem.exit(0);}\nint c = 0;\nfor (int i = 0; i < n; i++) {\nif (i != n - 1) {\nif (c == 1) {\nif (a[i + 1] < a[i]) {\nans += 1;\nc = 0;\ncontinue;}}\nelse if (c == 2) {\nif (a[i + 1] > a[i]) {\nans += 1;\nc = 0;\ncontinue;}}\nif (a[i + 1] > a[i]) {\nc = 1;}\nelse if (a[i + 1] < a[i]) {\nc = 2;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "if", "(", "n", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "<5>", "System", ".", "exit", "(", "0", ")", ";", "}", "<6>", "int", "c", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<8>", "if", "(", "i", "!=", "n", "-", "1", ")", "{", "<9>", "if", "(", "c", "==", "1", ")", "{", "<10>", "if", "(", "a", "[", "i", "+", "1", "]", "<", "a", "[", "i", "]", ")", "{", "<11>", "ans", "+=", "1", ";", "<12>", "c", "=", "0", ";", "<13>", "continue", ";", "}", "}", "<14>", "else", "if", "(", "c", "==", "2", ")", "{", "<15>", "if", "(", "a", "[", "i", "+", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<16>", "ans", "+=", "1", ";", "<17>", "c", "=", "0", ";", "<18>", "continue", ";", "}", "}", "<19>", "if", "(", "a", "[", "i", "+", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<20>", "c", "=", "1", ";", "}", "<21>", "else", "if", "(", "a", "[", "i", "+", "1", "]", "<", "a", "[", "i", "]", ")", "{", "<22>", "c", "=", "2", ";", "}", "}", "}", "<23>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "0"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "0"], ["i", "0"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "0"], ["i", "0"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "0"], ["i", "0"]]}, {"line": 20, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "0"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "1"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "1"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "1"]]}, {"line": 20, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "2"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "2"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["c", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "1"], ["i", "2"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "2"]]}, {"line": 13, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "2"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "3"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "3"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "3"]]}, {"line": 21, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "4"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "4"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "4"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "4"]]}, {"line": 21, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "0"], ["i", "4"]]}, {"line": 22, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "2"], ["i", "4"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "2"], ["i", "5"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "2"], ["i", "5"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "2"], ["i", "5"]]}, {"line": 23, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["c", "2"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "6": [[6]], "7": [[7, 3, 0], [7, 19, 8, 7, 3, 0], [7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [7, 21, 19, 8, 7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [7, 8, 7, 21, 19, 8, 7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0]], "8": [[8, 7, 3, 0], [8, 7, 19, 8, 7, 3, 0], [8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [8, 7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [8, 7, 21, 19, 8, 7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0]], "9": [[9, 6], [9, 20, 14, 9, 6], [9, 20, 9, 20, 14, 9, 6], [9, 12, 9, 20, 9, 20, 14, 9, 6], [9, 14, 9, 12, 9, 20, 9, 20, 14, 9, 6]], "10": [[10, 8, 7, 19, 8, 7, 3, 0], [10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0]], "11": [[11, 2]], "12": [[12, 9, 20, 9, 20, 14, 9, 6]], "13": [[13]], "14": [[14, 9, 6], [14, 9, 12, 9, 20, 9, 20, 14, 9, 6], [14, 9, 14, 9, 12, 9, 20, 9, 20, 14, 9, 6]], "19": [[19, 8, 7, 3, 0], [19, 10, 8, 7, 19, 8, 7, 3, 0], [19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [19, 8, 7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0]], "20": [[20, 14, 9, 6], [20, 9, 20, 14, 9, 6]], "21": [[21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0], [21, 19, 8, 7, 21, 19, 8, 7, 10, 8, 7, 19, 10, 8, 7, 19, 8, 7, 3, 0]], "22": [[22, 14, 9, 14, 9, 12, 9, 20, 9, 20, 14, 9, 6]], "23": [[23, 11, 2]]}}
{"id": 2625, "code": "System.out.println(java.util.Arrays.equals(java.util.Arrays.stream(\"1 9 7 4\".split(\" \")).mapToInt(Integer::parseInt).sorted().toArray(), new int[]{1, 4, 7, 9}) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "equals", "(", "java", ".", "util", ".", "Arrays", ".", "stream", "(", "\"1 9 7 4\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "sorted", "(", ")", ".", "toArray", "(", ")", ",", "new", "int", "[", "]", "{", "1", ",", "4", ",", "7", ",", "9", "}", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 9142, "code": "String s = \"2017/01/07\";\nString S = \"2018\";\nS += s.substring(4);\nSystem.out.println(S);", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/07\"", ";", "<1>", "String", "S", "=", "\"2018\"", ";", "<2>", "S", "+=", "s", ".", "substring", "(", "4", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/07"]]}, {"line": 1, "state": [["s", "2017/01/07"], ["S", "2018"]]}, {"line": 2, "state": [["s", "2017/01/07"], ["S", "2018/01/07"]]}, {"line": 3, "state": [["s", "2017/01/07"], ["S", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 2535, "code": "int a = 1, b = 9, c = 7, d = 4;\njava.util.Set<Integer> S = new java.util.HashSet<>();S.add(a);S.add(b);S.add(c);S.add(d);\nif (S.equals(java.util.Set.of(1, 7, 9, 4))) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ",", "b", "=", "9", ",", "c", "=", "7", ",", "d", "=", "4", ";", "<1>", "java", ".", "util", ".", "Set", "<", "Integer", ">", "S", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "S", ".", "add", "(", "a", ")", ";", "S", ".", "add", "(", "b", ")", ";", "S", ".", "add", "(", "c", ")", ";", "S", ".", "add", "(", "d", ")", ";", "<2>", "if", "(", "S", ".", "equals", "(", "java", ".", "util", ".", "Set", ".", "of", "(", "1", ",", "7", ",", "9", ",", "4", ")", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"]]}, {"line": 1, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"], ["S", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 2, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"], ["S", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 3, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"], ["S", "{ 1 , 4 , 9 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 19182, "code": "int N = 5;\nint N1 = N / 10;\nif (N % 2 == 1) {\nSystem.out.println(0);} else {\nint counter = 0;\nint div = 10;\nwhile (true) {\nint num = N / div;\nif (num == 0) {\nbreak;}\ncounter += num;\ndiv *= 5;}\nSystem.out.println(counter);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "N1", "=", "N", "/", "10", ";", "<2>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "else", "{", "<4>", "int", "counter", "=", "0", ";", "<5>", "int", "div", "=", "10", ";", "<6>", "while", "(", "true", ")", "{", "<7>", "int", "num", "=", "N", "/", "div", ";", "<8>", "if", "(", "num", "==", "0", ")", "{", "<9>", "break", ";", "}", "<10>", "counter", "+=", "num", ";", "<11>", "div", "*=", "5", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "counter", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["N1", "0"]]}, {"line": 2, "state": [["N", "5"], ["N1", "0"]]}, {"line": 3, "state": [["N", "5"], ["N1", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 2120, "code": "int n = 10, a = 7, b = 5;\nint ma = Math.min(a, b);\nint mi = Math.max(ma - (n - Math.max(a, b)), 0);\nSystem.out.println(ma + \" \" + mi);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "mi", "=", "Math", ".", "max", "(", "ma", "-", "(", "n", "-", "Math", ".", "max", "(", "a", ",", "b", ")", ")", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "mi", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ma", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ma", "5"], ["mi", "2"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ma", "5"], ["mi", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 8133, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nArrays.sort(A);\nint cnt = 1;\nfor (int i = 1; i < N; i++) {\nif (A[0] == A[i]) {\ncnt++;}}\nSystem.out.println((int) Math.ceil((N - cnt) / (double) (K - 1)));", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "Arrays", ".", "sort", "(", "A", ")", ";", "<3>", "int", "cnt", "=", "1", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "A", "[", "0", "]", "==", "A", "[", "i", "]", ")", "{", "<6>", "cnt", "++", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "N", "-", "cnt", ")", "/", "(", "double", ")", "(", "K", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"], ["K", "3"]]}, {"line": 2, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 4, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"]]}, {"line": 5, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"], ["i", "1"]]}, {"line": 6, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"], ["i", "2"]]}, {"line": 6, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"], ["i", "2"]]}, {"line": 5, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"], ["i", "2"]]}, {"line": 8, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["cnt", "1"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5, 1], [5, 6, 5, 1], [5, 6, 5, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 6, 5, 1]], "8": [[8, 5, 6, 5, 6, 5, 1]]}}
{"id": 11546, "code": "String S = \"SUN\";\nString[] A = {\"a\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nSystem.out.println(java.util.Arrays.asList(A).indexOf(S));", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "A", "=", "{", "\"a\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "A", ")", ".", "indexOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["A", "[ a , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["S", "SUN"], ["A", "[ a , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 381, "code": "char[] s = {'a'};\nint K = 25;\nint i = 0;\nwhile (i < s.length) {\nif (i == s.length - 1) {\ns[i] = (char) (97 + (s[i] - 97 + K) % 26);\nbreak;}\nif (K < Math.abs(123 - s[i]) % 26) {\ni += 1;}\nelse if (K >= Math.abs(123 - s[i]) % 26) {\nint sub = Math.abs(123 - s[i]) % 26;\ns[i] = 'a';\nK -= sub;\ni += 1;}}\nSystem.out.println(String.valueOf(s));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'a'", "}", ";", "<1>", "int", "K", "=", "25", ";", "<2>", "int", "i", "=", "0", ";", "<3>", "while", "(", "i", "<", "s", ".", "length", ")", "{", "<4>", "if", "(", "i", "==", "s", ".", "length", "-", "1", ")", "{", "<5>", "s", "[", "i", "]", "=", "(", "char", ")", "(", "97", "+", "(", "s", "[", "i", "]", "-", "97", "+", "K", ")", "%", "26", ")", ";", "<6>", "break", ";", "}", "<7>", "if", "(", "K", "<", "Math", ".", "abs", "(", "123", "-", "s", "[", "i", "]", ")", "%", "26", ")", "{", "<8>", "i", "+=", "1", ";", "}", "<9>", "else", "if", "(", "K", ">=", "Math", ".", "abs", "(", "123", "-", "s", "[", "i", "]", ")", "%", "26", ")", "{", "<10>", "int", "sub", "=", "Math", ".", "abs", "(", "123", "-", "s", "[", "i", "]", ")", "%", "26", ";", "<11>", "s", "[", "i", "]", "=", "'a'", ";", "<12>", "K", "-=", "sub", ";", "<13>", "i", "+=", "1", ";", "}", "}", "<14>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ a ]"]]}, {"line": 1, "state": [["s", "[ a ]"], ["K", "25"]]}, {"line": 2, "state": [["s", "[ a ]"], ["K", "25"], ["i", "0"]]}, {"line": 3, "state": [["s", "[ a ]"], ["K", "25"], ["i", "0"]]}, {"line": 4, "state": [["s", "[ a ]"], ["K", "25"], ["i", "0"]]}, {"line": 5, "state": [["s", "[ z ]"], ["K", "25"], ["i", "0"]]}, {"line": 6, "state": [["s", "[ z ]"], ["K", "25"], ["i", "0"]]}, {"line": 14, "state": [["s", "[ z ]"], ["K", "25"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]], "5": [[5, 4, 3, 2, 0]], "6": [[6]], "14": [[14, 5, 4, 3, 2, 0]]}}
{"id": 11518, "code": "String[] base = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nString S = \"SUN\";\nif (Arrays.asList(base).indexOf(S) == -1) System.exit(0);\nSystem.out.println(7 - Arrays.asList(base).indexOf(S));", "code_tokens": ["<0>", "String", "[", "]", "base", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "String", "S", "=", "\"SUN\"", ";", "<2>", "if", "(", "Arrays", ".", "asList", "(", "base", ")", ".", "indexOf", "(", "S", ")", "==", "-", "1", ")", "System", ".", "exit", "(", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "7", "-", "Arrays", ".", "asList", "(", "base", ")", ".", "indexOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["base", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["base", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SUN"]]}, {"line": 3, "state": [["base", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SUN"]]}, {"line": 4, "state": [["base", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]]}}
{"id": 6259, "code": "int N = 3;\nint[] A_list = {1, 1, 1};\nint[] B_list = {2, 2, 2};\nint[] C_list = {3, 3, 3};\nArrays.sort(A_list);\nArrays.sort(B_list);\nArrays.sort(C_list);\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint b = B_list[i];\nint a_nums = bisectLeft(A_list, b);\nint c_nums = N - bisectRight(C_list, b);\nans += a_nums * c_nums;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A_list", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B_list", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C_list", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A_list", ")", ";", "<5>", "Arrays", ".", "sort", "(", "B_list", ")", ";", "<6>", "Arrays", ".", "sort", "(", "C_list", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<9>", "int", "b", "=", "B_list", "[", "i", "]", ";", "<10>", "int", "a_nums", "=", "bisectLeft", "(", "A_list", ",", "b", ")", ";", "<11>", "int", "c_nums", "=", "N", "-", "bisectRight", "(", "C_list", ",", "b", ")", ";", "<12>", "ans", "+=", "a_nums", "*", "c_nums", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 9, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 11, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["b", "2"], ["a_nums", "3"]]}, {"line": 12, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 13, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "0"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 9, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 10, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 11, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 12, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 13, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "1"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 9, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 10, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 11, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 12, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 13, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 9, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}, {"line": 14, "state": [["N", "3"], ["A_list", "[ 1 , 1 , 1 ]"], ["B_list", "[ 2 , 2 , 2 ]"], ["C_list", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["b", "2"], ["a_nums", "3"], ["c_nums", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 5, 2]], "7": [[7, 6, 5, 2]], "8": [[8]], "9": [[9, 1], [9, 10, 9, 1], [9, 10, 9, 10, 9, 1], [9, 10, 9, 10, 9, 10, 9, 1]], "10": [[10, 9, 1], [10, 9, 10, 9, 1], [10, 9, 10, 9, 10, 9, 1]], "11": [[11, 10, 9, 1], [11, 10, 9, 10, 9, 1], [11, 10, 9, 10, 9, 10, 9, 1]], "12": [[12, 11, 10, 9, 1], [12, 11, 10, 9, 10, 9, 1], [12, 11, 10, 9, 10, 9, 10, 9, 1]], "13": [[13, 12, 11, 10, 9, 1], [13, 12, 11, 10, 9, 10, 9, 1], [13, 12, 11, 10, 9, 10, 9, 10, 9, 1]], "14": [[14, 13, 12, 11, 10, 9, 10, 9, 10, 9, 1]]}}
{"id": 3419, "code": "int a = 20, b = 15;\nint ans = a - b - b;\nif (ans < 0) {\nSystem.out.println(\"0\");\n} else {\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "int", "ans", "=", "a", "-", "b", "-", "b", ";", "<2>", "if", "(", "ans", "<", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"], ["ans", "-10"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"], ["ans", "-10"]]}, {"line": 3, "state": [["a", "20"], ["b", "15"], ["ans", "-10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 15675, "code": "String[] input = \"12 3 1\".split(\" \");int a = Integer.parseInt(input[0]);int b = Integer.parseInt(input[1]);int c = Integer.parseInt(input[2]);System.out.println((a - c) / (b + c));", "code_tokens": ["<0>", "String", "[", "]", "input", "=", "\"12 3 1\"", ".", "split", "(", "\" \"", ")", ";", "int", "a", "=", "Integer", ".", "parseInt", "(", "input", "[", "0", "]", ")", ";", "int", "b", "=", "Integer", ".", "parseInt", "(", "input", "[", "1", "]", ")", ";", "int", "c", "=", "Integer", ".", "parseInt", "(", "input", "[", "2", "]", ")", ";", "System", ".", "out", ".", "println", "(", "(", "a", "-", "c", ")", "/", "(", "b", "+", "c", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "3"], ["c", "1"]]}], "slices": {"0": [[0]]}}
{"id": 4922, "code": "char[] letter = {'s', 'm', 'i', 'l', 'e', 's'};\nString ans = letter[0] + Integer.toString(letter.length - 2) + letter[letter.length - 1];\nSystem.out.println(ans);", "code_tokens": ["<0>", "char", "[", "]", "letter", "=", "{", "'s'", ",", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", ",", "'s'", "}", ";", "<1>", "String", "ans", "=", "letter", "[", "0", "]", "+", "Integer", ".", "toString", "(", "letter", ".", "length", "-", "2", ")", "+", "letter", "[", "letter", ".", "length", "-", "1", "]", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["letter", "[ s , m , i , l , e , s ]"]]}, {"line": 1, "state": [["letter", "[ s , m , i , l , e , s ]"], ["ans", "s4s"]]}, {"line": 2, "state": [["letter", "[ s , m , i , l , e , s ]"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 13093, "code": "int x = 6;\nif (x == 3 || x == 5 || x == 7) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "x", "=", "6", ";", "<1>", "if", "(", "x", "==", "3", "||", "x", "==", "5", "||", "x", "==", "7", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "6"]]}, {"line": 1, "state": [["x", "6"]]}, {"line": 4, "state": [["x", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 13514, "code": "String s = \"happy,newyear,enjoy\";System.out.println(s.substring(0, 5) + \" \" + s.substring(6, 13) + \" \" + s.substring(14));", "code_tokens": ["<0>", "String", "s", "=", "\"happy,newyear,enjoy\"", ";", "System", ".", "out", ".", "println", "(", "s", ".", "substring", "(", "0", ",", "5", ")", "+", "\" \"", "+", "s", ".", "substring", "(", "6", ",", "13", ")", "+", "\" \"", "+", "s", ".", "substring", "(", "14", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "happy , newyear , enjoy"]]}], "slices": {"0": [[0]]}}
{"id": 791, "code": "int k = 2;\nint num = 0;\nif (k % 2 == 0) {\nSystem.out.println(-1);}\nelse {\nfor (int i = 0; i < k; i++) {\nnum = (num * 10 + 7) % k;\nif (num == 0) {\nSystem.out.println(i + 1);\nbreak;}}\nelse {\nSystem.out.println(-1);}}", "code_tokens": ["<0>", "int", "k", "=", "2", ";", "<1>", "int", "num", "=", "0", ";", "<2>", "if", "(", "k", "%", "2", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "<4>", "else", "{", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "k", ";", "i", "++", ")", "{", "<6>", "num", "=", "(", "num", "*", "10", "+", "7", ")", "%", "k", ";", "<7>", "if", "(", "num", "==", "0", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "i", "+", "1", ")", ";", "<9>", "break", ";", "}", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["k", "2"]]}, {"line": 1, "state": [["k", "2"], ["num", "0"]]}, {"line": 2, "state": [["k", "2"], ["num", "0"]]}, {"line": 3, "state": [["k", "2"], ["num", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]]}}
{"id": 2714, "code": "System.out.println(\"YNEOS\"[isSorted(new int[]{1, 2, 9, 1}) ? 0 : 1]);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"YNEOS\"", "[", "isSorted", "(", "new", "int", "[", "]", "{", "1", ",", "2", ",", "9", ",", "1", "}", ")", "?", "0", ":", "1", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": [["x", "2"]]}, {"line": 0, "state": [["x", "9"]]}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": []}], "slices": {"0": [[0], [0], [0], [0], [0], [0], [0], [0]]}}
{"id": 9555, "code": "String s = \"2017/01/31\";\ns = s.replace(\"2017\", \"2018\");\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "s", "=", "s", ".", "replace", "(", "\"2017\"", ",", "\"2018\"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2018/01/31"]]}, {"line": 2, "state": [["s", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15452, "code": "int x = 100000, y = 1, z = 1;\nint rm = x % (y + z);\nint a = (rm < z) ? -1 : 0;\nSystem.out.println(x / (y + z) + a);", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "int", "rm", "=", "x", "%", "(", "y", "+", "z", ")", ";", "<2>", "int", "a", "=", "(", "rm", "<", "z", ")", "?", "-", "1", ":", "0", ";", "<3>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", "+", "a", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"], ["rm", "0"]]}, {"line": 2, "state": [["x", "100000"], ["y", "1"], ["z", "1"], ["rm", "0"], ["a", "-1"]]}, {"line": 3, "state": [["x", "100000"], ["y", "1"], ["z", "1"], ["rm", "0"], ["a", "-1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 8712, "code": "int N = 1;\nint[] A1 = {2};\nint[] A2 = {3};\nfor (int i = 0; i < A2.length / 2; i++) {int temp = A2[i];A2[i] = A2[A2.length - 1 - i];A2[A2.length - 1 - i] = temp;}\nfor (int i = 0; i < N - 1; i++) {\nA1[i + 1] += A1[i];\nA2[i + 1] += A2[i];}\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nans = Math.max(ans, A1[i] + A2[N - 1 - i]);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "A1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "3", "}", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "A2", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "A2", "[", "i", "]", ";", "A2", "[", "i", "]", "=", "A2", "[", "A2", ".", "length", "-", "1", "-", "i", "]", ";", "A2", "[", "A2", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<5>", "A1", "[", "i", "+", "1", "]", "+=", "A1", "[", "i", "]", ";", "<6>", "A2", "[", "i", "+", "1", "]", "+=", "A2", "[", "i", "]", ";", "}", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<9>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "A1", "[", "i", "]", "+", "A2", "[", "N", "-", "1", "-", "i", "]", ")", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["A1", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"]]}, {"line": 4, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"]]}, {"line": 7, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["ans", "0"]]}, {"line": 8, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["ans", "5"], ["i", "0"]]}, {"line": 8, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["ans", "5"], ["i", "0"]]}, {"line": 10, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["ans", "5"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 0]], "7": [[7]], "8": [[8, 4, 0], [8, 9, 8, 4, 0]], "9": [[9, 8, 4, 0]], "10": [[10, 9, 8, 4, 0]]}}
{"id": 5825, "code": "int n = 2;\nint a = (n % 2 == 0) ? (n / 2) : (n / 2) + 1;\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "a", "=", "(", "n", "%", "2", "==", "0", ")", "?", "(", "n", "/", "2", ")", ":", "(", "n", "/", "2", ")", "+", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "1"]]}, {"line": 2, "state": [["n", "2"], ["a", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 2902, "code": "String S = \"1234567876\";\nint S_len = S.length();\nint ans = 1000;\nfor (int i = 0; i < S_len - 2; i++) {\nint t = Integer.parseInt(S.substring(i, i + 3));\nint t_abs = Math.abs(t - 753);\nans = Math.min(ans, t_abs);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"1234567876\"", ";", "<1>", "int", "S_len", "=", "S", ".", "length", "(", ")", ";", "<2>", "int", "ans", "=", "1000", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S_len", "-", "2", ";", "i", "++", ")", "{", "<4>", "int", "t", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<5>", "int", "t_abs", "=", "Math", ".", "abs", "(", "t", "-", "753", ")", ";", "<6>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "t_abs", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "1234567876"]]}, {"line": 1, "state": [["S", "1234567876"], ["S_len", "10"]]}, {"line": 2, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "1000"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "1000"], ["i", "0"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "1000"], ["i", "0"], ["t", "123"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "1000"], ["i", "0"], ["t", "123"], ["t_abs", "630"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "630"], ["i", "0"], ["t", "123"], ["t_abs", "630"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "630"], ["i", "1"], ["t", "123"], ["t_abs", "630"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "630"], ["i", "1"], ["t", "234"], ["t_abs", "630"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "630"], ["i", "1"], ["t", "234"], ["t_abs", "519"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "519"], ["i", "1"], ["t", "234"], ["t_abs", "519"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "519"], ["i", "2"], ["t", "234"], ["t_abs", "519"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "519"], ["i", "2"], ["t", "345"], ["t_abs", "519"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "519"], ["i", "2"], ["t", "345"], ["t_abs", "408"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "408"], ["i", "2"], ["t", "345"], ["t_abs", "408"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "408"], ["i", "3"], ["t", "345"], ["t_abs", "408"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "408"], ["i", "3"], ["t", "456"], ["t_abs", "408"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "408"], ["i", "3"], ["t", "456"], ["t_abs", "297"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "297"], ["i", "3"], ["t", "456"], ["t_abs", "297"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "297"], ["i", "4"], ["t", "456"], ["t_abs", "297"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "297"], ["i", "4"], ["t", "567"], ["t_abs", "297"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "297"], ["i", "4"], ["t", "567"], ["t_abs", "186"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "186"], ["i", "4"], ["t", "567"], ["t_abs", "186"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "186"], ["i", "5"], ["t", "567"], ["t_abs", "186"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "186"], ["i", "5"], ["t", "678"], ["t_abs", "186"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "186"], ["i", "5"], ["t", "678"], ["t_abs", "75"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "75"], ["i", "5"], ["t", "678"], ["t_abs", "75"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "75"], ["i", "6"], ["t", "678"], ["t_abs", "75"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "75"], ["i", "6"], ["t", "787"], ["t_abs", "75"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "75"], ["i", "6"], ["t", "787"], ["t_abs", "34"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "6"], ["t", "787"], ["t_abs", "34"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "7"], ["t", "787"], ["t_abs", "34"]]}, {"line": 4, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "7"], ["t", "876"], ["t_abs", "34"]]}, {"line": 5, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "7"], ["t", "876"], ["t_abs", "123"]]}, {"line": 6, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "7"], ["t", "876"], ["t_abs", "123"]]}, {"line": 3, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "7"], ["t", "876"], ["t_abs", "123"]]}, {"line": 7, "state": [["S", "1234567876"], ["S_len", "10"], ["ans", "34"], ["i", "7"], ["t", "876"], ["t_abs", "123"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "7": [[7, 6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 11490, "code": "HashMap<String, Integer> a = new HashMap<>();a.put(\"SUN\", 7);a.put(\"MON\", 6);a.put(\"TUE\", 5);a.put(\"WED\", 4);a.put(\"THU\", 3);a.put(\"FRI\", 2);a.put(\"SAT\", 1);\nSystem.out.println(a.get(\"SAT\"));", "code_tokens": ["<0>", "HashMap", "<", "String", ",", "Integer", ">", "a", "=", "new", "HashMap", "<", ">", "(", ")", ";", "a", ".", "put", "(", "\"SUN\"", ",", "7", ")", ";", "a", ".", "put", "(", "\"MON\"", ",", "6", ")", ";", "a", ".", "put", "(", "\"TUE\"", ",", "5", ")", ";", "a", ".", "put", "(", "\"WED\"", ",", "4", ")", ";", "a", ".", "put", "(", "\"THU\"", ",", "3", ")", ";", "a", ".", "put", "(", "\"FRI\"", ",", "2", ")", ";", "a", ".", "put", "(", "\"SAT\"", ",", "1", ")", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "get", "(", "\"SAT\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "{ SUN"]]}, {"line": 1, "state": [["a", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5439, "code": "int n = 100;\nif (n % 2 == 0) {System.out.println(n / 2);} else {System.out.println(n / 2 + 1);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18925, "code": "int n = 5;\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint ans = 0;\nint i = 10;\nwhile (n / i != 0) {\nans += (n / i);\ni *= 5;}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "ans", "=", "0", ";", "<5>", "int", "i", "=", "10", ";", "<6>", "while", "(", "n", "/", "i", "!=", "0", ")", "{", "<7>", "ans", "+=", "(", "n", "/", "i", ")", ";", "<8>", "i", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 1299, "code": "int[] N = {1, 1, 2};\nif (N[1] < N[0]) {\nSystem.out.println(N[0] * 111);\n} else if (N[1] > N[0]) {\nSystem.out.println((N[0] + 1) * 111);\n} else {\nif (N[2] <= N[0]) {\nSystem.out.println(N[0] * 111);\n} else {\nSystem.out.println((N[0] + 1) * 111);}}", "code_tokens": ["<0>", "int", "[", "]", "N", "=", "{", "1", ",", "1", ",", "2", "}", ";", "<1>", "if", "(", "N", "[", "1", "]", "<", "N", "[", "0", "]", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "N", "[", "0", "]", "*", "111", ")", ";", "<3>", "}", "else", "if", "(", "N", "[", "1", "]", ">", "N", "[", "0", "]", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "[", "0", "]", "+", "1", ")", "*", "111", ")", ";", "<5>", "}", "else", "{", "<6>", "if", "(", "N", "[", "2", "]", "<=", "N", "[", "0", "]", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "N", "[", "0", "]", "*", "111", ")", ";", "<8>", "}", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "(", "N", "[", "0", "]", "+", "1", ")", "*", "111", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["N", "[ 1 , 1 , 2 ]"]]}, {"line": 1, "state": [["N", "[ 1 , 1 , 2 ]"]]}, {"line": 3, "state": [["N", "[ 1 , 1 , 2 ]"]]}, {"line": 6, "state": [["N", "[ 1 , 1 , 2 ]"]]}, {"line": 9, "state": [["N", "[ 1 , 1 , 2 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "6": [[6, 3, 1, 0]], "9": [[9, 6, 3, 1, 0]]}}
{"id": 16762, "code": "String A = \"D\", B = \"H\";\nHashMap<String, Integer> d = new HashMap<>();d.put(\"H\", 0);d.put(\"D\", 1);\nString[] Ans = {\"H\", \"D\"};\nSystem.out.println(Ans[d.get(A) ^ d.get(B)]);", "code_tokens": ["<0>", "String", "A", "=", "\"D\"", ",", "B", "=", "\"H\"", ";", "<1>", "HashMap", "<", "String", ",", "Integer", ">", "d", "=", "new", "HashMap", "<", ">", "(", ")", ";", "d", ".", "put", "(", "\"H\"", ",", "0", ")", ";", "d", ".", "put", "(", "\"D\"", ",", "1", ")", ";", "<2>", "String", "[", "]", "Ans", "=", "{", "\"H\"", ",", "\"D\"", "}", ";", "<3>", "System", ".", "out", ".", "println", "(", "Ans", "[", "d", ".", "get", "(", "A", ")", "^", "d", ".", "get", "(", "B", ")", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["A", "D"], ["B", "H"]]}, {"line": 3, "state": [["A", "D"], ["B", "H"], ["d", "{ H"]]}, {"line": 4, "state": [["A", "D"], ["B", "H"], ["d", "{ H"], ["Ans", "[ H , D ]"]]}, {"line": 5, "state": [["A", "D"], ["B", "H"], ["d", "{ H"], ["Ans", "[ H , D ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 4, 3, 2]]}}
{"id": 8784, "code": "int n = 7;\nint[] a = {3, 3, 4, 5, 4, 5, 3};\nint[] b = {5, 3, 4, 4, 2, 3, 2};\nint t = 0;\nfor (int i = 0; i < n; i++) {\nint c = sum(a, 0, i + 1) + sum(b, i, n);\nt = Math.max(t, c);}\nSystem.out.println(t);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "t", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "c", "=", "sum", "(", "a", ",", "0", ",", "i", "+", "1", ")", "+", "sum", "(", "b", ",", "i", ",", "n", ")", ";", "<6>", "t", "=", "Math", ".", "max", "(", "t", ",", "c", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "t", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "0"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "0"], ["i", "0"], ["c", "26"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "0"], ["c", "26"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "1"], ["c", "26"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "1"], ["c", "24"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "1"], ["c", "24"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "2"], ["c", "24"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "2"], ["c", "25"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "2"], ["c", "25"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "3"], ["c", "25"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "3"], ["c", "26"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "3"], ["c", "26"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "4"], ["c", "26"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "4"], ["c", "26"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "4"], ["c", "26"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "5"], ["c", "26"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "26"], ["i", "5"], ["c", "29"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "29"], ["i", "5"], ["c", "29"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "29"], ["i", "6"], ["c", "29"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "29"], ["i", "6"], ["c", "29"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "29"], ["i", "6"], ["c", "29"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "29"], ["i", "6"], ["c", "29"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["t", "29"], ["i", "6"], ["c", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 13426, "code": "String s = \"abcde,fghihgf,edcba\";\nString a = s.substring(0, 5);\nString b = s.substring(6, 13);\nString c = s.substring(14);\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "s", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "String", "a", "=", "s", ".", "substring", "(", "0", ",", "5", ")", ";", "<2>", "String", "b", "=", "s", ".", "substring", "(", "6", ",", "13", ")", ";", "<3>", "String", "c", "=", "s", ".", "substring", "(", "14", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["s", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["s", "abcde , fghihgf , edcba"], ["a", "abcde"]]}, {"line": 2, "state": [["s", "abcde , fghihgf , edcba"], ["a", "abcde"], ["b", "fghihgf"]]}, {"line": 3, "state": [["s", "abcde , fghihgf , edcba"], ["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}, {"line": 4, "state": [["s", "abcde , fghihgf , edcba"], ["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 9840, "code": "int n = 3;\nchar[] s = {'(', ')', ')'};\nint ins = 0;\nint app = 0;\nfor (int i = 0; i < n; i++) {\nif (s[i] == '(') {\napp += 1;}\nelse {\nif (app > 0) {\napp -= 1;}\nelse {\nins += 1;}}}\nchar[] inL = new char[ins];for (int j = 0; j < ins; j++) {inL[j] = '(';}\nchar[] appArr = new char[app];for (int j = 0; j < app; j++) {appArr[j] = ')';}\nchar[] ans = new char[inL.length + s.length + appArr.length];System.arraycopy(inL, 0, ans, 0, inL.length);System.arraycopy(s, 0, ans, inL.length, s.length);System.arraycopy(appArr, 0, ans, inL.length + s.length, appArr.length);\nSystem.out.println(String.valueOf(ans));", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "char", "[", "]", "s", "=", "{", "'('", ",", "')'", ",", "')'", "}", ";", "<2>", "int", "ins", "=", "0", ";", "<3>", "int", "app", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", "[", "i", "]", "==", "'('", ")", "{", "<6>", "app", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "app", ">", "0", ")", "{", "<9>", "app", "-=", "1", ";", "}", "<10>", "else", "{", "<11>", "ins", "+=", "1", ";", "}", "}", "}", "<12>", "char", "[", "]", "inL", "=", "new", "char", "[", "ins", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "ins", ";", "j", "++", ")", "{", "inL", "[", "j", "]", "=", "'('", ";", "}", "<13>", "char", "[", "]", "appArr", "=", "new", "char", "[", "app", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "app", ";", "j", "++", ")", "{", "appArr", "[", "j", "]", "=", "')'", ";", "}", "<14>", "char", "[", "]", "ans", "=", "new", "char", "[", "inL", ".", "length", "+", "s", ".", "length", "+", "appArr", ".", "length", "]", ";", "System", ".", "arraycopy", "(", "inL", ",", "0", ",", "ans", ",", "0", ",", "inL", ".", "length", ")", ";", "System", ".", "arraycopy", "(", "s", ",", "0", ",", "ans", ",", "inL", ".", "length", ",", "s", ".", "length", ")", ";", "System", ".", "arraycopy", "(", "appArr", ",", "0", ",", "ans", ",", "inL", ".", "length", "+", "s", ".", "length", ",", "appArr", ".", "length", ")", ";", "<15>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"]]}, {"line": 2, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"]]}, {"line": 3, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "1"], ["i", "1"]]}, {"line": 8, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "1"], ["i", "1"]]}, {"line": 9, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"], ["i", "2"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"], ["i", "2"]]}, {"line": 8, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "0"], ["app", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "1"], ["app", "0"], ["i", "2"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "1"], ["app", "0"], ["i", "2"]]}, {"line": 12, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "1"], ["app", "0"], ["i", "2"], ["inL", "[ ( ]"]]}, {"line": 13, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "1"], ["app", "[ ]"], ["i", "2"], ["inL", "[ ( ]"]]}, {"line": 14, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "1"], ["app", "[ ]"], ["i", "2"], ["inL", "[ ( ]"], ["ans", "[ ( , ( , ) , ) ]"]]}, {"line": 15, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ins", "1"], ["app", "[ ]"], ["i", "2"], ["inL", "[ ( ]"], ["ans", "[ ( , ( , ) , ) ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0]], "6": [[6, 3]], "8": [[8, 6, 3], [8, 9, 8, 6, 3]], "9": [[9, 8, 6, 3]], "11": [[11, 2]], "12": [[12, 11, 2]], "13": [[13, 8, 9, 8, 6, 3]], "14": [[14, 13, 8, 9, 8, 6, 3]], "15": [[15, 14, 13, 8, 9, 8, 6, 3]]}}
{"id": 16665, "code": "String a = \"H\";String b = \"H\";\nSystem.out.println(\"DH\".charAt(a.equals(b) ? 0 : 1));", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"DH\"", ".", "charAt", "(", "a", ".", "equals", "(", "b", ")", "?", "0", ":", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13381, "code": "String s = \"abcde,fghihgf,edcba\";\nSystem.out.println(s.substring(0, 5) + \" \" + s.substring(6, 13) + \" \" + s.substring(14, 20));", "code_tokens": ["<0>", "String", "s", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "substring", "(", "0", ",", "5", ")", "+", "\" \"", "+", "s", ".", "substring", "(", "6", ",", "13", ")", "+", "\" \"", "+", "s", ".", "substring", "(", "14", ",", "20", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["s", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7271, "code": "int h = 10, n = 3;\nint[] a = {4, 5, 6};\nif (h <= sum(a)) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "if", "(", "h", "<=", "sum", "(", "a", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "10"], ["n", "3"]]}, {"line": 1, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 3, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 10288, "code": "int n = 8;\nString s = \"))))((((\";\nString s_ = s;\nwhile (countOccurrences(s_, \"()\") > 0) {\ns_ = s_.replace(\"()\", \"\");}\nint l = countOccurrences(s_, \")\");\nint r = s_.length() - l;\nString ans = \"(\" + repeatString(\"(\", l) + s + repeatString(\")\", r);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "8", ";", "<1>", "String", "s", "=", "\"))))((((\"", ";", "<2>", "String", "s_", "=", "s", ";", "<3>", "while", "(", "countOccurrences", "(", "s_", ",", "\"()\"", ")", ">", "0", ")", "{", "<4>", "s_", "=", "s_", ".", "replace", "(", "\"()\"", ",", "\"\"", ")", ";", "}", "<5>", "int", "l", "=", "countOccurrences", "(", "s_", ",", "\")\"", ")", ";", "<6>", "int", "r", "=", "s_", ".", "length", "(", ")", "-", "l", ";", "<7>", "String", "ans", "=", "\"(\"", "+", "repeatString", "(", "\"(\"", ",", "l", ")", "+", "s", "+", "repeatString", "(", "\")\"", ",", "r", ")", ";", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"]]}, {"line": 1, "state": [["n", "8"], ["s", "))))(((("]]}, {"line": 2, "state": [["n", "8"], ["s", "))))(((("], ["s_", "))))(((("]]}, {"line": 3, "state": [["n", "8"], ["s", "))))(((("], ["s_", "))))(((("]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["s_", "))))(((("], ["l", "4"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["s_", "))))(((("], ["l", "4"], ["r", "4"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["s_", "))))(((("], ["l", "4"], ["r", "4"], ["ans", "(((())))(((())))"]]}, {"line": 8, "state": [["n", "8"], ["s", "))))(((("], ["s_", "))))(((("], ["l", "4"], ["r", "4"], ["ans", "(((())))(((())))"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "5": [[5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1]], "7": [[7, 6, 5, 3, 2, 1]], "8": [[8, 7, 6, 5, 3, 2, 1]]}}
{"id": 3992, "code": "int a = 100000, b = 1, c = 1;\na -= c;\nSystem.out.println(a / (b + c));", "code_tokens": ["<0>", "int", "a", "=", "100000", ",", "b", "=", "1", ",", "c", "=", "1", ";", "<1>", "a", "-=", "c", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", "/", "(", "b", "+", "c", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "100000"], ["b", "1"], ["c", "1"]]}, {"line": 1, "state": [["a", "99999"], ["b", "1"], ["c", "1"]]}, {"line": 2, "state": [["a", "99999"], ["b", "1"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1361, "code": "int n = 112;\nfor (int i = 1; i < 10; i++) {\nint ans = i * 111;\nif (ans >= n) {\nSystem.out.println(ans);\nbreak;}}", "code_tokens": ["<0>", "int", "n", "=", "112", ";", "<1>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "10", ";", "i", "++", ")", "{", "<2>", "int", "ans", "=", "i", "*", "111", ";", "<3>", "if", "(", "ans", ">=", "n", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "<5>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "112"]]}, {"line": 1, "state": [["n", "112"], ["i", "1"]]}, {"line": 2, "state": [["n", "112"], ["i", "1"], ["ans", "111"]]}, {"line": 3, "state": [["n", "112"], ["i", "1"], ["ans", "111"]]}, {"line": 1, "state": [["n", "112"], ["i", "2"], ["ans", "111"]]}, {"line": 2, "state": [["n", "112"], ["i", "2"], ["ans", "222"]]}, {"line": 3, "state": [["n", "112"], ["i", "2"], ["ans", "222"]]}, {"line": 4, "state": [["n", "112"], ["i", "2"], ["ans", "222"]]}, {"line": 5, "state": [["n", "112"], ["i", "2"], ["ans", "222"]]}], "slices": {"0": [[0]], "1": [[1], [1, 2, 1]], "2": [[2, 1], [2, 1, 2, 1]], "3": [[3, 2, 1], [3, 2, 1, 2, 1]], "4": [[4, 3, 2, 1, 2, 1]], "5": [[5]]}}
{"id": 8231, "code": "int n = 3, k = 3;\nint[] a = {1, 2, 3};\nint ans = (n / k > 0) ? 1 : 0;\nint mod = (n - k) / (k - 1) + Math.min((n - k) % (k - 1), 1);\nSystem.out.println(ans + mod);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "int", "ans", "=", "(", "n", "/", "k", ">", "0", ")", "?", "1", ":", "0", ";", "<3>", "int", "mod", "=", "(", "n", "-", "k", ")", "/", "(", "k", "-", "1", ")", "+", "Math", ".", "min", "(", "(", "n", "-", "k", ")", "%", "(", "k", "-", "1", ")", ",", "1", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", "+", "mod", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["mod", "0"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["mod", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 9151, "code": "String S = \"2017/01/31\";\nS = \"2018/01/\" + S.substring(8, 10);\nSystem.out.println(S);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "S", "=", "\"2018/01/\"", "+", "S", ".", "substring", "(", "8", ",", "10", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2018/01/31"]]}, {"line": 2, "state": [["S", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11371, "code": "String S = \"SUN\";\nString[] week = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint ans = 7 - java.util.Arrays.asList(week).indexOf(S);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "week", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "ans", "=", "7", "-", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "week", ")", ".", "indexOf", "(", "S", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["S", "SUN"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["ans", "7"]]}, {"line": 3, "state": [["S", "SUN"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["ans", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 14313, "code": "String input = \"<function <lambda>>\"; // Not used in the code\nint n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nArrayList<Integer> l = new ArrayList<>();\nInteger prev = null;\nfor (int i = 0; i < n; i++) {\nif (prev != a[i]) {\nl.add(a[i]);}\nprev = a[i];}\nint ans;if (l.size() == 1) {\nans = 1;} else {\nint m = l.size();\nprev = null;\nans = 0;\nfor (int i = 0; i < m - 1; i++) {\nboolean s = (l.get(i) < l.get(i + 1));\nif (prev == null) {\nprev = s;\n} else if (prev != s) {\nans += 1;\nprev = null;}}\nans += 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "input", "=", "\"<function <lambda>>\"", ";", "// Not used in the code", "<1>", "int", "n", "=", "6", ";", "<2>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "ArrayList", "<", "Integer", ">", "l", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<4>", "Integer", "prev", "=", "null", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "if", "(", "prev", "!=", "a", "[", "i", "]", ")", "{", "<7>", "l", ".", "add", "(", "a", "[", "i", "]", ")", ";", "}", "<8>", "prev", "=", "a", "[", "i", "]", ";", "}", "<9>", "int", "ans", ";", "if", "(", "l", ".", "size", "(", ")", "==", "1", ")", "{", "<10>", "ans", "=", "1", ";", "}", "else", "{", "<11>", "int", "m", "=", "l", ".", "size", "(", ")", ";", "<12>", "prev", "=", "null", ";", "<13>", "ans", "=", "0", ";", "<14>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", "-", "1", ";", "i", "++", ")", "{", "<15>", "boolean", "s", "=", "(", "l", ".", "get", "(", "i", ")", "<", "l", ".", "get", "(", "i", "+", "1", ")", ")", ";", "<16>", "if", "(", "prev", "==", "null", ")", "{", "<17>", "prev", "=", "s", ";", "<18>", "}", "else", "if", "(", "prev", "!=", "s", ")", "{", "<19>", "ans", "+=", "1", ";", "<20>", "prev", "=", "null", ";", "}", "}", "<21>", "ans", "+=", "1", ";", "}", "<22>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["write", "<function>"]]}, {"line": 4, "state": [["write", "<function>"], ["n", "6"]]}, {"line": 5, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 6, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ ]"]]}, {"line": 7, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ ]"], ["prev", "None"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ ]"], ["prev", "None"], ["i", "0"]]}, {"line": 9, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ ]"], ["prev", "None"], ["i", "0"]]}, {"line": 10, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 ]"], ["prev", "None"], ["i", "0"]]}, {"line": 11, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 ]"], ["prev", "1"], ["i", "0"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 ]"], ["prev", "1"], ["i", "1"]]}, {"line": 9, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 ]"], ["prev", "1"], ["i", "1"]]}, {"line": 10, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 ]"], ["prev", "1"], ["i", "1"]]}, {"line": 11, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 ]"], ["prev", "2"], ["i", "1"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 ]"], ["prev", "2"], ["i", "2"]]}, {"line": 9, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 ]"], ["prev", "2"], ["i", "2"]]}, {"line": 10, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 ]"], ["prev", "2"], ["i", "2"]]}, {"line": 11, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 ]"], ["prev", "3"], ["i", "2"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 ]"], ["prev", "3"], ["i", "3"]]}, {"line": 9, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 ]"], ["prev", "3"], ["i", "3"]]}, {"line": 10, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "3"], ["i", "3"]]}, {"line": 11, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "2"], ["i", "3"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "2"], ["i", "4"]]}, {"line": 9, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "2"], ["i", "4"]]}, {"line": 11, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "2"], ["i", "4"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "2"], ["i", "5"]]}, {"line": 9, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 ]"], ["prev", "2"], ["i", "5"]]}, {"line": 10, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "2"], ["i", "5"]]}, {"line": 11, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "1"], ["i", "5"]]}, {"line": 8, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "1"], ["i", "5"]]}, {"line": 12, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "1"], ["i", "5"]]}, {"line": 15, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "1"], ["i", "5"], ["m", "5"]]}, {"line": 16, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "5"], ["m", "5"]]}, {"line": 17, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "5"], ["m", "5"], ["ans", "0"]]}, {"line": 18, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "0"], ["m", "5"], ["ans", "0"]]}, {"line": 19, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "0"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 20, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "0"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 21, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "0"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 18, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "1"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 19, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "1"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 20, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "1"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 22, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "1"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 18, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "2"], ["m", "5"], ["ans", "0"], ["s", "True"]]}, {"line": 19, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "2"], ["m", "5"], ["ans", "0"], ["s", "False"]]}, {"line": 20, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "2"], ["m", "5"], ["ans", "0"], ["s", "False"]]}, {"line": 22, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "2"], ["m", "5"], ["ans", "0"], ["s", "False"]]}, {"line": 23, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "True"], ["i", "2"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 24, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "2"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 18, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "3"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 19, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "3"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 20, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "None"], ["i", "3"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 21, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "False"], ["i", "3"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 18, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "False"], ["i", "3"], ["m", "5"], ["ans", "1"], ["s", "False"]]}, {"line": 25, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "False"], ["i", "3"], ["m", "5"], ["ans", "2"], ["s", "False"]]}, {"line": 26, "state": [["write", "<function>"], ["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["l", "[ 1 , 2 , 3 , 2 , 1 ]"], ["prev", "False"], ["i", "3"], ["m", "5"], ["ans", "2"], ["s", "False"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8, 4], [8, 11, 10, 9, 8, 4], [8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [8, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "9": [[9, 8, 4], [9, 8, 11, 10, 9, 8, 4], [9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "10": [[10, 9, 8, 4], [10, 9, 8, 11, 10, 9, 8, 4], [10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "11": [[11, 10, 9, 8, 4], [11, 10, 9, 8, 11, 10, 9, 8, 4], [11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "12": [[12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "15": [[15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "16": [[16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "17": [[17]], "18": [[18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [18, 19, 18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [18, 19, 18, 19, 18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [18, 19, 18, 19, 18, 19, 18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "19": [[19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [19, 18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [19, 18, 19, 18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [19, 18, 19, 18, 19, 18, 19, 18, 15, 12, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "20": [[20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [20, 22, 20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [20, 24, 22, 20, 22, 20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "21": [[21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [21, 20, 24, 22, 20, 22, 20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "22": [[22, 20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4], [22, 20, 22, 20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "23": [[23, 17]], "24": [[24, 22, 20, 22, 20, 21, 20, 16, 11, 10, 9, 8, 11, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 11, 10, 9, 8, 4]], "25": [[25, 23, 17]], "26": [[26, 25, 23, 17]]}}
{"id": 27, "code": "String s = \"codefestival\";\nint K = 100;\nint[] S = new int[s.length()];for (int i = 0; i < s.length(); i++) {S[i] = s.charAt(i) - 'a';}\nint last = K;\nfor (int i = 0; i < S.length; i++) {\nif (S[i] != 0) {\nif (26 - S[i] <= last) {\nlast -= 26 - S[i];\nS[i] = 0;}}}\nif (last > 0) {\nS[S.length - 1] += last;\nS[S.length - 1] %= 26;}\nStringBuilder result = new StringBuilder();for (int i : S) {result.append((char) (i + 'a'));}\nSystem.out.println(result.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"codefestival\"", ";", "<1>", "int", "K", "=", "100", ";", "<2>", "int", "[", "]", "S", "=", "new", "int", "[", "s", ".", "length", "(", ")", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "++", ")", "{", "S", "[", "i", "]", "=", "s", ".", "charAt", "(", "i", ")", "-", "'a'", ";", "}", "<3>", "int", "last", "=", "K", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", ";", "i", "++", ")", "{", "<5>", "if", "(", "S", "[", "i", "]", "!=", "0", ")", "{", "<6>", "if", "(", "26", "-", "S", "[", "i", "]", "<=", "last", ")", "{", "<7>", "last", "-=", "26", "-", "S", "[", "i", "]", ";", "<8>", "S", "[", "i", "]", "=", "0", ";", "}", "}", "}", "<9>", "if", "(", "last", ">", "0", ")", "{", "<10>", "S", "[", "S", ".", "length", "-", "1", "]", "+=", "last", ";", "<11>", "S", "[", "S", ".", "length", "-", "1", "]", "%=", "26", ";", "}", "<12>", "StringBuilder", "result", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "i", ":", "S", ")", "{", "result", ".", "append", "(", "(", "char", ")", "(", "i", "+", "'a'", ")", ")", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "result", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "codefestival"]]}, {"line": 1, "state": [["s", "codefestival"], ["K", "100"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["i", "c"]]}, {"line": 2, "state": [["i", "o"]]}, {"line": 2, "state": [["i", "d"]]}, {"line": 2, "state": [["i", "e"]]}, {"line": 2, "state": [["i", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"]]}, {"line": 2, "state": [["i", "e"]]}, {"line": 2, "state": [["i", "s"]]}, {"line": 2, "state": [["i", "t"]]}, {"line": 2, "state": [["i", "0"]]}, {"line": 2, "state": [["i", "v"]]}, {"line": 2, "state": [["i", "a"]]}, {"line": 2, "state": [["i", "l"]]}, {"line": 2, "state": [["i", "l"]]}, {"line": 2, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"]]}, {"line": 3, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "100"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "100"], ["i", "0"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "100"], ["i", "0"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "100"], ["i", "0"]]}, {"line": 7, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "76"], ["i", "0"]]}, {"line": 8, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "76"], ["i", "0"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "76"], ["i", "1"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "76"], ["i", "1"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "76"], ["i", "1"]]}, {"line": 7, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "64"], ["i", "1"]]}, {"line": 8, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "64"], ["i", "1"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "64"], ["i", "2"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "64"], ["i", "2"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "64"], ["i", "2"]]}, {"line": 7, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "41"], ["i", "2"]]}, {"line": 8, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "41"], ["i", "2"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "41"], ["i", "3"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "41"], ["i", "3"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "41"], ["i", "3"]]}, {"line": 7, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "3"]]}, {"line": 8, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "3"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "4"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "4"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "4"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "5"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "5"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "5"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "6"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "6"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "19"], ["i", "6"]]}, {"line": 7, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "11"], ["i", "6"]]}, {"line": 8, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "11"], ["i", "6"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "11"], ["i", "7"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "11"], ["i", "7"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "11"], ["i", "7"]]}, {"line": 7, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "7"]]}, {"line": 8, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "7"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "8"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "8"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "8"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "9"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "9"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "9"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "10"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "10"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "11"]]}, {"line": 5, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "11"]]}, {"line": 6, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "11"]]}, {"line": 4, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "11"]]}, {"line": 9, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["last", "4"], ["i", "11"]]}, {"line": 10, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 15 ]"], ["last", "4"], ["i", "11"]]}, {"line": 11, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 15 ]"], ["last", "4"], ["i", "11"]]}, {"line": 12, "state": []}, {"line": 12, "state": []}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "5"]]}, {"line": 12, "state": [["i", "4"]]}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "8"]]}, {"line": 12, "state": [["i", "21"]]}, {"line": 12, "state": [["i", "0"]]}, {"line": 12, "state": [["i", "15"]]}, {"line": 12, "state": [["i", "15"]]}, {"line": 12, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["last", "4"], ["i", "11"]]}, {"line": 13, "state": [["s", "codefestival"], ["K", "100"], ["S", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["last", "4"], ["i", "11"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0]], "3": [[3, 1]], "4": [[4, 2, 0], [4, 8, 7, 6, 5, 4, 2, 0], [4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [4, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "6": [[6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "7": [[7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "8": [[8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "9": [[9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "10": [[10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "11": [[11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "12": [[12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0], [12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]], "13": [[13, 12, 11, 10, 9, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 2, 0]]}}
{"id": 10207, "code": "int N = 8;\nString S = \"))))((((\";\nint[] SS = new int[N];for (int i = 0; i < N; i++) {SS[i] = (S.charAt(i) == '(') ? 1 : -1;}\nArrayList<Integer> SSS = new ArrayList<>();int sum = 0;for (int value : SS) {sum += value;SSS.add(sum);}\nint m = Math.max(0, -SSS.stream().min(Integer::compare).orElse(0));\nint M = SSS.get(SSS.size() - 1);\nStringBuilder result = new StringBuilder();for (int i = 0; i < m; i++) {result.append('(');}result.append(S);for (int i = 0; i < (M + m); i++) {result.append(')');}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "String", "S", "=", "\"))))((((\"", ";", "<2>", "int", "[", "]", "SS", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "SS", "[", "i", "]", "=", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "?", "1", ":", "-", "1", ";", "}", "<3>", "ArrayList", "<", "Integer", ">", "SSS", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "int", "sum", "=", "0", ";", "for", "(", "int", "value", ":", "SS", ")", "{", "sum", "+=", "value", ";", "SSS", ".", "add", "(", "sum", ")", ";", "}", "<4>", "int", "m", "=", "Math", ".", "max", "(", "0", ",", "-", "SSS", ".", "stream", "(", ")", ".", "min", "(", "Integer", "::", "compare", ")", ".", "orElse", "(", "0", ")", ")", ";", "<5>", "int", "M", "=", "SSS", ".", "get", "(", "SSS", ".", "size", "(", ")", "-", "1", ")", ";", "<6>", "StringBuilder", "result", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "result", ".", "append", "(", "'('", ")", ";", "}", "result", ".", "append", "(", "S", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "(", "M", "+", "m", ")", ";", "i", "++", ")", "{", "result", ".", "append", "(", "')'", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "8"]]}, {"line": 2, "state": [["N", "8"], ["S", "))))(((("]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["i", "0"]]}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "4"]]}, {"line": 3, "state": [["i", "5"]]}, {"line": 3, "state": [["i", "6"]]}, {"line": 3, "state": [["i", "7"]]}, {"line": 3, "state": [["i", "7"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["SS", "[ -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 ]"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["SS", "[ -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 ]"], ["SSS", "[ -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"]]}, {"line": 5, "state": [["N", "8"], ["S", "))))(((("], ["SS", "[ -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 ]"], ["SSS", "[ -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["m", "4"]]}, {"line": 6, "state": [["N", "8"], ["S", "))))(((("], ["SS", "[ -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 ]"], ["SSS", "[ -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["m", "4"], ["M", "0"]]}, {"line": 7, "state": [["N", "8"], ["S", "))))(((("], ["SS", "[ -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 ]"], ["SSS", "[ -1 , -2 , -3 , -4 , -3 , -2 , -1 , 0 ]"], ["m", "4"], ["M", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 5, 4, 3, 2, 1]], "7": [[7, 6, 5, 4, 3, 2, 1]]}}
{"id": 8056, "code": "int[] s = {8, 3};\nint n = s[0];\nint k = s[1] - 1;\ns = new int[]{7, 3, 1, 8, 4, 6, 2, 5};\nint ind = -1;for (int i = 0; i < s.length; i++) {if (s[i] == 1) {ind = i;break;}}\nSystem.out.println((int) Math.ceil((n - 1) / (double) k));", "code_tokens": ["<0>", "int", "[", "]", "s", "=", "{", "8", ",", "3", "}", ";", "<1>", "int", "n", "=", "s", "[", "0", "]", ";", "<2>", "int", "k", "=", "s", "[", "1", "]", "-", "1", ";", "<3>", "s", "=", "new", "int", "[", "]", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<4>", "int", "ind", "=", "-", "1", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", ";", "i", "++", ")", "{", "if", "(", "s", "[", "i", "]", "==", "1", ")", "{", "ind", "=", "i", ";", "break", ";", "}", "}", "<5>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "n", "-", "1", ")", "/", "(", "double", ")", "k", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["s", "[ 8 , 3 ]"]]}, {"line": 2, "state": [["s", "[ 8 , 3 ]"], ["n", "8"]]}, {"line": 3, "state": [["s", "[ 8 , 3 ]"], ["n", "8"], ["k", "2"]]}, {"line": 4, "state": [["s", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["n", "8"], ["k", "2"]]}, {"line": 5, "state": [["s", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["n", "8"], ["k", "2"], ["ind", "2"]]}, {"line": 6, "state": [["s", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["n", "8"], ["k", "2"], ["ind", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 3, 2, 1]]}}
{"id": 17064, "code": "System.out.println(\"HD\"[(\"H H\".contains(\"H D H\")) ? 1 : 0]);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"HD\"", "[", "(", "\"H H\"", ".", "contains", "(", "\"H D H\"", ")", ")", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 2580, "code": "java.util.Set<Integer> n = new java.util.HashSet<>();n.add(1);n.add(4);n.add(9);n.add(7);\nSystem.out.println((len(new java.util.HashSet<>(java.util.Arrays.asList(1, 9, 7, 4))).equals(n.size()) ? \"YES\" : \"NO\"));", "code_tokens": ["<0>", "java", ".", "util", ".", "Set", "<", "Integer", ">", "n", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "n", ".", "add", "(", "1", ")", ";", "n", ".", "add", "(", "4", ")", ";", "n", ".", "add", "(", "9", ")", ";", "n", ".", "add", "(", "7", ")", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "len", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "9", ",", "7", ",", "4", ")", ")", ")", ".", "equals", "(", "n", ".", "size", "(", ")", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 1, "state": [["n", "{ 1 , 4 , 9 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6530, "code": "int n = 6;\nint[] a = {2, 3, 6, 14, 53, 159};\nint[] b = {6, 9, 58, 79, 84, 323};\nint[] c = {2, 50, 79, 288, 383, 2643};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint num1 = bisectLeft(a, b[i]);\nint num2 = n - bisect(c, b[i]);\nans += num1 * num2;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "6", ",", "14", ",", "53", ",", "159", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "6", ",", "9", ",", "58", ",", "79", ",", "84", ",", "323", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "2", ",", "50", ",", "79", ",", "288", ",", "383", ",", "2643", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "int", "num1", "=", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", ";", "<7>", "int", "num2", "=", "n", "-", "bisect", "(", "c", ",", "b", "[", "i", "]", ")", ";", "<8>", "ans", "+=", "num1", "*", "num2", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "6"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["i", "0"], ["num1", "2"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["i", "0"], ["num1", "2"], ["num2", "5"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "0"], ["num1", "2"], ["num2", "5"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "1"], ["num1", "2"], ["num2", "5"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "1"], ["num1", "3"], ["num2", "5"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "1"], ["num1", "3"], ["num2", "5"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "1"], ["num1", "3"], ["num2", "5"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "2"], ["num1", "3"], ["num2", "5"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "2"], ["num1", "5"], ["num2", "5"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "2"], ["num1", "5"], ["num2", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "2"], ["num1", "5"], ["num2", "4"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "3"], ["num1", "5"], ["num2", "4"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "3"], ["num1", "5"], ["num2", "4"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "3"], ["num1", "5"], ["num2", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "3"], ["num1", "5"], ["num2", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "4"], ["num1", "5"], ["num2", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "4"], ["num1", "5"], ["num2", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "4"], ["num1", "5"], ["num2", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "4"], ["num1", "5"], ["num2", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "5"], ["num1", "5"], ["num2", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "5"], ["num1", "6"], ["num2", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "5"], ["num1", "6"], ["num2", "2"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["i", "5"], ["num1", "6"], ["num2", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["i", "5"], ["num1", "6"], ["num2", "2"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["i", "5"], ["num1", "6"], ["num2", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "7": [[7, 6, 1], [7, 6, 8, 7, 6, 1], [7, 6, 8, 7, 6, 8, 7, 6, 1], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "8": [[8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "9": [[9, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]]}}
{"id": 5149, "code": "String s = \"internationalization\";\nchar start = s.charAt(0);\nchar end = s.charAt(s.length() - 1);\nString length = String.valueOf(s.length() - 2);\nSystem.out.println(start + length + end);", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "char", "start", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "end", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "String", "length", "=", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "start", "+", "length", "+", "end", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["start", "0"]]}, {"line": 2, "state": [["s", "internationalization"], ["start", "1"], ["end", "n"]]}, {"line": 3, "state": [["s", "internationalization"], ["start", "2"], ["end", "n"], ["length", "18"]]}, {"line": 4, "state": [["s", "internationalization"], ["start", "3"], ["end", "n"], ["length", "18"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 6331, "code": "int N = 2;\nint[] As = {1, 5};\nint[] Bs = {2, 4};\nint[] Cs = {3, 6};\nint ans = 0;\nfor (int B : Bs) {\nint A_idx = bisectLeft(As, B);\nint C_idx = bisectRight(Cs, B);\nans += A_idx * (N - C_idx);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "As", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "Bs", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "Cs", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "B", ":", "Bs", ")", "{", "<6>", "int", "A_idx", "=", "bisectLeft", "(", "As", ",", "B", ")", ";", "<7>", "int", "C_idx", "=", "bisectRight", "(", "Cs", ",", "B", ")", ";", "<8>", "ans", "+=", "A_idx", "*", "(", "N", "-", "C_idx", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"], ["As", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "0"], ["B", "2"]]}, {"line": 7, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "0"], ["B", "2"], ["A_idx", "1"]]}, {"line": 8, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "0"], ["B", "2"], ["A_idx", "1"], ["C_idx", "0"]]}, {"line": 9, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "2"], ["B", "2"], ["A_idx", "1"], ["C_idx", "0"]]}, {"line": 6, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "2"], ["B", "4"], ["A_idx", "1"], ["C_idx", "0"]]}, {"line": 7, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "2"], ["B", "4"], ["A_idx", "1"], ["C_idx", "0"]]}, {"line": 8, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "2"], ["B", "4"], ["A_idx", "1"], ["C_idx", "1"]]}, {"line": 9, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "3"], ["B", "4"], ["A_idx", "1"], ["C_idx", "1"]]}, {"line": 6, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "3"], ["B", "4"], ["A_idx", "1"], ["C_idx", "1"]]}, {"line": 10, "state": [["N", "2"], ["As", "[ 1 , 5 ]"], ["Bs", "[ 2 , 4 ]"], ["Cs", "[ 3 , 6 ]"], ["ans", "3"], ["B", "4"], ["A_idx", "1"], ["C_idx", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 2026, "code": "Scanner scanner = new Scanner(System.in);\nint n = 100, a = 100, b = 100;\nSystem.out.println(Math.min(a, b) + \" \" + Math.max(a + b - n, 0));", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 4, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 3]]}}
{"id": 9017, "code": "int a = 15;\nint b = 18;\nint c = 26;\nint d = 35;\nint e = 36;\nint k = 18;\nif (Math.abs(a - e) > k) {\nSystem.out.println(\":(\");}\nelse {\nSystem.out.println(\"Yay!\");}", "code_tokens": ["<0>", "int", "a", "=", "15", ";", "<1>", "int", "b", "=", "18", ";", "<2>", "int", "c", "=", "26", ";", "<3>", "int", "d", "=", "35", ";", "<4>", "int", "e", "=", "36", ";", "<5>", "int", "k", "=", "18", ";", "<6>", "if", "(", "Math", ".", "abs", "(", "a", "-", "e", ")", ">", "k", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "15"]]}, {"line": 1, "state": [["a", "15"], ["b", "18"]]}, {"line": 2, "state": [["a", "15"], ["b", "18"], ["c", "26"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 5, 4, 0]], "7": [[7]]}}
{"id": 985, "code": "int N = 750;\nint[] arr = {111, 222, 333, 444, 555, 666, 777, 888, 999};\nint ans_idx = Arrays.binarySearch(arr, N);if (ans_idx < 0) {ans_idx = -ans_idx - 1; // Convert to insertion point}\nSystem.out.println(arr[ans_idx]);", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "int", "[", "]", "arr", "=", "{", "111", ",", "222", ",", "333", ",", "444", ",", "555", ",", "666", ",", "777", ",", "888", ",", "999", "}", ";", "<2>", "int", "ans_idx", "=", "Arrays", ".", "binarySearch", "(", "arr", ",", "N", ")", ";", "if", "(", "ans_idx", "<", "0", ")", "{", "ans_idx", "=", "-", "ans_idx", "-", "1", ";", "// Convert to insertion point}", "<3>", "System", ".", "out", ".", "println", "(", "arr", "[", "ans_idx", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "750"]]}, {"line": 2, "state": [["N", "750"], ["arr", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"]]}, {"line": 3, "state": [["N", "750"], ["arr", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans_idx", "6"]]}, {"line": 4, "state": [["N", "750"], ["arr", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans_idx", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]]}}
{"id": 11506, "code": "String[] week = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nString s = \"SAT\";\nif (java.util.Arrays.asList(week).contains(s)) {\nint x = java.util.Arrays.asList(week).indexOf(s);\nSystem.out.println(7 - x);}", "code_tokens": ["<0>", "String", "[", "]", "week", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "String", "s", "=", "\"SAT\"", ";", "<2>", "if", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "week", ")", ".", "contains", "(", "s", ")", ")", "{", "<3>", "int", "x", "=", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "week", ")", ".", "indexOf", "(", "s", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "7", "-", "x", ")", ";", "}"], "trace": [{"line": 0, "state": [["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"]]}, {"line": 2, "state": [["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"]]}, {"line": 3, "state": [["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["x", "6"]]}, {"line": 4, "state": [["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["x", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 16774, "code": "String a = \"D\"; String t = \"H\";\nSystem.out.println(a.equals(t) ? \"H\" : \"D\");", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "t", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "equals", "(", "t", ")", "?", "\"H\"", ":", "\"D\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["t", "H"]]}, {"line": 1, "state": [["a", "D"], ["t", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7979, "code": "int N = 8, K = 3;\nint window = K - 1;\nint[] A = {7, 3, 1, 8, 4, 6, 2, 5};\nint l = K;\nint count = 1;\nif (l >= N) {\nSystem.out.println(count);\nSystem.exit(0);}\nwhile (l < N) {\nl += K - 1;\ncount++;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "N", "=", "8", ",", "K", "=", "3", ";", "<1>", "int", "window", "=", "K", "-", "1", ";", "<2>", "int", "[", "]", "A", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<3>", "int", "l", "=", "K", ";", "<4>", "int", "count", "=", "1", ";", "<5>", "if", "(", "l", ">=", "N", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "count", ")", ";", "<7>", "System", ".", "exit", "(", "0", ")", ";", "}", "<8>", "while", "(", "l", "<", "N", ")", "{", "<9>", "l", "+=", "K", "-", "1", ";", "<10>", "count", "++", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "8"], ["K", "3"]]}, {"line": 2, "state": [["N", "8"], ["K", "3"], ["window", "2"]]}, {"line": 3, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 4, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "3"]]}, {"line": 5, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "3"], ["count", "1"]]}, {"line": 6, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "3"], ["count", "1"]]}, {"line": 9, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "3"], ["count", "1"]]}, {"line": 10, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "5"], ["count", "1"]]}, {"line": 11, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "5"], ["count", "2"]]}, {"line": 9, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "5"], ["count", "2"]]}, {"line": 10, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "7"], ["count", "2"]]}, {"line": 11, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "7"], ["count", "3"]]}, {"line": 9, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "7"], ["count", "3"]]}, {"line": 10, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "9"], ["count", "3"]]}, {"line": 11, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "9"], ["count", "4"]]}, {"line": 9, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "9"], ["count", "4"]]}, {"line": 12, "state": [["N", "8"], ["K", "3"], ["window", "2"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["l", "9"], ["count", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 2, 1]], "5": [[5]], "6": [[6, 4, 2, 1]], "9": [[9, 6, 4, 2, 1], [9, 10, 9, 6, 4, 2, 1], [9, 10, 9, 10, 9, 6, 4, 2, 1], [9, 10, 9, 10, 9, 10, 9, 6, 4, 2, 1]], "10": [[10, 9, 6, 4, 2, 1], [10, 9, 10, 9, 6, 4, 2, 1], [10, 9, 10, 9, 10, 9, 6, 4, 2, 1]], "11": [[11, 5], [11, 5], [11, 5]], "12": [[12, 11, 5]]}}
{"id": 14470, "code": "int n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nint c = 1;\nint d = 0;\nfor (int i = 0; i < n - 1; i++) {\nif (a[i] == a[i + 1]) {\n}\nelse if (a[i] < a[i + 1]) {\nif (d < 0) {\nd = 0;\nc += 1;}\nelse {\nd += 1;}}\nelse {\nif (d > 0) {\nd = 0;\nc += 1;}\nelse {\nd -= 1;}}}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "c", "=", "1", ";", "<3>", "int", "d", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<5>", "if", "(", "a", "[", "i", "]", "==", "a", "[", "i", "+", "1", "]", ")", "{", "<6>", "}", "<7>", "else", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "+", "1", "]", ")", "{", "<8>", "if", "(", "d", "<", "0", ")", "{", "<9>", "d", "=", "0", ";", "<10>", "c", "+=", "1", ";", "}", "<11>", "else", "{", "<12>", "d", "+=", "1", ";", "}", "}", "<13>", "else", "{", "<14>", "if", "(", "d", ">", "0", ")", "{", "<15>", "d", "=", "0", ";", "<16>", "c", "+=", "1", ";", "}", "<17>", "else", "{", "<18>", "d", "-=", "1", ";", "}", "}", "}", "<19>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "0"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "0"], ["i", "0"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "1"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "1"], ["i", "1"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "2"], ["i", "1"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "2"], ["i", "2"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "2"], ["i", "2"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "2"], ["i", "2"]]}, {"line": 15, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "1"], ["d", "0"], ["i", "2"]]}, {"line": 16, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "2"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "3"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "4"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "4"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "4"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "0"], ["i", "4"]]}, {"line": 18, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "-1"], ["i", "4"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "-1"], ["i", "4"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["c", "2"], ["d", "-1"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 7, 5, 4, 0], [4, 7, 5, 4, 7, 5, 4, 0], [4, 7, 5, 4, 7, 5, 4, 7, 5, 4, 0], [4, 5, 4, 7, 5, 4, 7, 5, 4, 7, 5, 4, 0], [4, 7, 5, 4, 5, 4, 7, 5, 4, 7, 5, 4, 7, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 7, 5, 4, 0], [5, 4, 7, 5, 4, 7, 5, 4, 0], [5, 4, 7, 5, 4, 7, 5, 4, 7, 5, 4, 0], [5, 4, 5, 4, 7, 5, 4, 7, 5, 4, 7, 5, 4, 0]], "6": [[6]], "7": [[7, 5, 4, 0], [7, 5, 4, 7, 5, 4, 0], [7, 5, 4, 7, 5, 4, 7, 5, 4, 0], [7, 5, 4, 5, 4, 7, 5, 4, 7, 5, 4, 7, 5, 4, 0]], "8": [[8, 3], [8, 12, 8, 3]], "12": [[12, 8, 3], [12, 8, 12, 8, 3]], "14": [[14, 12, 8, 12, 8, 3], [14, 15, 14, 12, 8, 12, 8, 3]], "15": [[15, 14, 12, 8, 12, 8, 3]], "16": [[16, 2]], "18": [[18, 14, 15, 14, 12, 8, 12, 8, 3]], "19": [[19, 16, 2]]}}
{"id": 5828, "code": "int a = 2;\nSystem.out.println(Math.ceil(a / 2.0));", "code_tokens": ["<0>", "int", "a", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "ceil", "(", "a", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "2"]]}, {"line": 2, "state": [["a", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 9778, "code": "int n = 3;\nchar[] s = {'(', ')', ')'};\nString ans = \"\";\nint l = 0;\nfor (int i = 0; i < n; i++) {\nans += s[i];\nif (s[i] == ')') {\nif (l == 0) {\nans = '(' + ans;}\nelse {\nl -= 1;}}\nelse {\nl += 1;}}\nans += \")\".repeat(l);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "char", "[", "]", "s", "=", "{", "'('", ",", "')'", ",", "')'", "}", ";", "<2>", "String", "ans", "=", "\"\"", ";", "<3>", "int", "l", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "ans", "+=", "s", "[", "i", "]", ";", "<6>", "if", "(", "s", "[", "i", "]", "==", "')'", ")", "{", "<7>", "if", "(", "l", "==", "0", ")", "{", "<8>", "ans", "=", "'('", "+", "ans", ";", "}", "<9>", "else", "{", "<10>", "l", "-=", "1", ";", "}", "}", "<11>", "else", "{", "<12>", "l", "+=", "1", ";", "}", "}", "<13>", "ans", "+=", "\")\"", ".", "repeat", "(", "l", ")", ";", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"]]}, {"line": 2, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", ""]]}, {"line": 3, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", ""], ["l", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", ""], ["l", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "("], ["l", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "("], ["l", "0"], ["i", "0"]]}, {"line": 12, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "("], ["l", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "("], ["l", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "()"], ["l", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "()"], ["l", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "()"], ["l", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "()"], ["l", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["ans", "()"], ["l", "0"], ["i", "2"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "())"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "())"]]}, {"line": 7, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "())"]]}, {"line": 8, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "()"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "()"]]}, {"line": 13, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "()"]]}, {"line": 14, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l", "0"], ["i", "2"], ["ans", "()"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "7": [[7, 12, 3], [7, 10, 7, 12, 3]], "8": [[8, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "10": [[10, 7, 12, 3]], "12": [[12, 3]], "13": [[13, 8, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "14": [[14, 13, 8, 5, 4, 6, 5, 4, 6, 5, 4, 0]]}}
{"id": 15375, "code": "int x = 12, y = 3, z = 1;\nint[] divmodResult = divmod(x, y + z);int ans = divmodResult[0];int mod = divmodResult[1];\nif (mod >= z) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(ans - 1);}", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "[", "]", "divmodResult", "=", "divmod", "(", "x", ",", "y", "+", "z", ")", ";", "int", "ans", "=", "divmodResult", "[", "0", "]", ";", "int", "mod", "=", "divmodResult", "[", "1", "]", ";", "<2>", "if", "(", "mod", ">=", "z", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "ans", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ans", "3"], ["mod", "0"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ans", "3"], ["mod", "0"]]}, {"line": 5, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ans", "3"], ["mod", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 1, 0]]}}
{"id": 8202, "code": "int N = 8, K = 3;\nint[] A = {7, 3, 1, 8, 4, 6, 2, 5};\nint ans = 0;\nwhile (true) {\nif (N > K) {\nN -= (K - 1);\nans += 1;\n} else {\nans += 1;\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "8", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "int", "ans", "=", "0", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "if", "(", "N", ">", "K", ")", "{", "<5>", "N", "-=", "(", "K", "-", "1", ")", ";", "<6>", "ans", "+=", "1", ";", "<7>", "}", "else", "{", "<8>", "ans", "+=", "1", ";", "<9>", "break", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "8"], ["K", "3"]]}, {"line": 1, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "0"]]}, {"line": 3, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "0"]]}, {"line": 4, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "0"]]}, {"line": 5, "state": [["N", "6"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "6"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 4, "state": [["N", "6"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 5, "state": [["N", "4"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "1"]]}, {"line": 6, "state": [["N", "4"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "2"]]}, {"line": 4, "state": [["N", "4"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "2"]]}, {"line": 5, "state": [["N", "2"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "2"]]}, {"line": 6, "state": [["N", "2"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "3"]]}, {"line": 4, "state": [["N", "2"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "3"]]}, {"line": 8, "state": [["N", "2"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "4"]]}, {"line": 9, "state": [["N", "2"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "4"]]}, {"line": 10, "state": [["N", "2"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0]], "6": [[6, 2], [6, 2], [6, 2]], "8": [[8, 6, 2]], "9": [[9]], "10": [[10, 8, 6, 2]]}}
{"id": 6667, "code": "int H = 10, N = 3;\nint[] A_ls = Arrays.stream(\"4 5 6\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nif (Arrays.stream(A_ls).sum() >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A_ls", "=", "Arrays", ".", "stream", "(", "\"4 5 6\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "if", "(", "Arrays", ".", "stream", "(", "A_ls", ")", ".", "sum", "(", ")", ">=", "H", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"]]}, {"line": 3, "state": [["H", "10"], ["N", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 3471, "code": "int A = 20, B = 30;\nSystem.out.println(Math.max(0, (int)(A - 2 * B)));", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "(", "int", ")", "(", "A", "-", "2", "*", "B", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2333, "code": "int N = 0, M = 3;\nint a = N * (N - 1) / 2;\nint b = M * (M - 1) / 2;\nSystem.out.println(a + b);", "code_tokens": ["<0>", "int", "N", "=", "0", ",", "M", "=", "3", ";", "<1>", "int", "a", "=", "N", "*", "(", "N", "-", "1", ")", "/", "2", ";", "<2>", "int", "b", "=", "M", "*", "(", "M", "-", "1", ")", "/", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "a", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["N", "0"], ["M", "3"]]}, {"line": 1, "state": [["N", "0"], ["M", "3"], ["a", "0"]]}, {"line": 2, "state": [["N", "0"], ["M", "3"], ["a", "0"], ["b", "3"]]}, {"line": 3, "state": [["N", "0"], ["M", "3"], ["a", "0"], ["b", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 14731, "code": "int N = 1, P = 1;\nint[] A = {50};\nint[] dic = {0, 0}; // dic[\"even\"] = dic[0], dic[\"odd\"] = dic[1]\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 == 0) {\ndic[0] += 1; // even count}\nelse {\ndic[1] += 1; // odd count}}\nif (dic[1] == 0) { // If odd count is zero\nif (P == 1) {\nSystem.out.println(0);}\nelse {\nSystem.out.println((int) Math.pow(2, dic[0])); // 2 ** dic[\"even\"]}}\nelse {\nSystem.out.println((int) Math.pow(2, N - 1)); // 2 ** (N - 1)}", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "50", "}", ";", "<2>", "int", "[", "]", "dic", "=", "{", "0", ",", "0", "}", ";", "// dic[\"even\"] = dic[0], dic[\"odd\"] = dic[1]", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "[", "i", "]", "%", "2", "==", "0", ")", "{", "<5>", "dic", "[", "0", "]", "+=", "1", ";", "// even count}", "<6>", "else", "{", "<7>", "dic", "[", "1", "]", "+=", "1", ";", "// odd count}}", "<8>", "if", "(", "dic", "[", "1", "]", "==", "0", ")", "{", "// If odd count is zero", "<9>", "if", "(", "P", "==", "1", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "dic", "[", "0", "]", ")", ")", ";", "// 2 ** dic[\"even\"]}}", "<13>", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", "-", "1", ")", ")", ";", "// 2 ** (N - 1)}"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 8, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 10, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["dic", "{ even"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0]], "4": [[4, 3, 0]], "5": [[5, 2]], "8": [[8, 5, 2]], "9": [[9, 0]], "10": [[10]]}}
{"id": 6479, "code": "int n = 2;\nint[] al = {1, 5};\nint[] bl = {2, 4};\nint[] cl = {3, 6};\nArrays.sort(al);\nArrays.sort(bl);\nArrays.sort(cl);\nint ans = 0;\nint[] tmp1 = new int[n];Arrays.fill(tmp1, n);\nint[] tmp2 = new int[n];Arrays.fill(tmp2, n);\nfor (int i = 0; i < n; i++) {\nint j = bisectLeft(al, bl[i]);\ntmp1[i] = j;}\nfor (int i = 0; i < n; i++) {\nint j = bisectRight(cl, bl[i]);\ntmp2[i] = n - j;}\nfor (int i = 0; i < n; i++) {\nans += tmp1[i] * tmp2[i];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "al", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "bl", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "cl", "=", "{", "3", ",", "6", "}", ";", "<4>", "Arrays", ".", "sort", "(", "al", ")", ";", "<5>", "Arrays", ".", "sort", "(", "bl", ")", ";", "<6>", "Arrays", ".", "sort", "(", "cl", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "int", "[", "]", "tmp1", "=", "new", "int", "[", "n", "]", ";", "Arrays", ".", "fill", "(", "tmp1", ",", "n", ")", ";", "<9>", "int", "[", "]", "tmp2", "=", "new", "int", "[", "n", "]", ";", "Arrays", ".", "fill", "(", "tmp2", ",", "n", ")", ";", "<10>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<11>", "int", "j", "=", "bisectLeft", "(", "al", ",", "bl", "[", "i", "]", ")", ";", "<12>", "tmp1", "[", "i", "]", "=", "j", ";", "}", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<14>", "int", "j", "=", "bisectRight", "(", "cl", ",", "bl", "[", "i", "]", ")", ";", "<15>", "tmp2", "[", "i", "]", "=", "n", "-", "j", ";", "}", "<16>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<17>", "ans", "+=", "tmp1", "[", "i", "]", "*", "tmp2", "[", "i", "]", ";", "}", "<18>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["al", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"]]}, {"line": 7, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"]]}, {"line": 8, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 9, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 2 , 2 ]"]]}, {"line": 10, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 2 , 2 ]"], ["tmp2", "[ 2 , 2 ]"]]}, {"line": 11, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 2 , 2 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "0"]]}, {"line": 12, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 2 , 2 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "0"], ["j", "1"]]}, {"line": 13, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 2 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "0"], ["j", "1"]]}, {"line": 11, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 2 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "1"], ["j", "1"]]}, {"line": 12, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 2 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "1"], ["j", "1"]]}, {"line": 13, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "1"], ["j", "1"]]}, {"line": 11, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "1"], ["j", "1"]]}, {"line": 14, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "0"], ["j", "1"]]}, {"line": 15, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "0"], ["j", "0"]]}, {"line": 16, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "0"], ["j", "0"]]}, {"line": 14, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "1"], ["j", "0"]]}, {"line": 15, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 2 ]"], ["i", "1"], ["j", "1"]]}, {"line": 16, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "1"], ["j", "1"]]}, {"line": 14, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "1"], ["j", "1"]]}, {"line": 17, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "0"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "0"], ["j", "1"]]}, {"line": 18, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "2"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "0"], ["j", "1"]]}, {"line": 17, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "2"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "1"], ["j", "1"]]}, {"line": 18, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "3"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "1"], ["j", "1"]]}, {"line": 17, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "3"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "1"], ["j", "1"]]}, {"line": 19, "state": [["n", "2"], ["al", "[ 1 , 5 ]"], ["bl", "[ 2 , 4 ]"], ["cl", "[ 3 , 6 ]"], ["ans", "3"], ["tmp1", "[ 1 , 1 ]"], ["tmp2", "[ 2 , 1 ]"], ["i", "1"], ["j", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8]], "9": [[9, 1]], "10": [[10, 9, 1]], "11": [[11, 10, 9, 1], [11, 13, 12, 11, 10, 9, 1], [11, 13, 12, 11, 13, 12, 11, 10, 9, 1]], "12": [[12, 11, 10, 9, 1], [12, 11, 13, 12, 11, 10, 9, 1]], "13": [[13, 12, 11, 10, 9, 1], [13, 12, 11, 13, 12, 11, 10, 9, 1]], "14": [[14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1]], "15": [[15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1]], "16": [[16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1]], "17": [[17, 14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [17, 18, 17, 14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [17, 18, 17, 18, 17, 14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1]], "18": [[18, 17, 14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1], [18, 17, 18, 17, 14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1]], "19": [[19, 18, 17, 18, 17, 14, 16, 15, 14, 16, 15, 14, 11, 13, 12, 11, 13, 12, 11, 10, 9, 1]]}}
{"id": 6728, "code": "int h = 20, n = 3;\nint[] a = {4, 5, 6};\nint s = 0;for (int num : a) {s += num;}\nif (h > s) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "s", "=", "0", ";", "for", "(", "int", "num", ":", "a", ")", "{", "s", "+=", "num", ";", "}", "<3>", "if", "(", "h", ">", "s", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["s", "15"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["s", "15"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["s", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 8139, "code": "int n = 3, k = 3;\nString A = \"1 2 3\";\nint ans = 1 + -(-(n - k) / (k - 1));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "String", "A", "=", "\"1 2 3\"", ";", "<2>", "int", "ans", "=", "1", "+", "-", "(", "-", "(", "n", "-", "k", ")", "/", "(", "k", "-", "1", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["A", "1 2 3"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["A", "1 2 3"], ["ans", "1"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"], ["A", "1 2 3"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 7008, "code": "int h = 20, n = 3;\nint[] a = {4, 5, 6};\nint x = 0;\nfor (int i = 0; i < n; i++) {\nx = x + a[i];}\nSystem.out.println(x >= h ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "x", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "x", "=", "x", "+", "a", "[", "i", "]", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "x", ">=", "h", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "0"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "0"], ["i", "0"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "4"], ["i", "0"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "4"], ["i", "1"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "9"], ["i", "1"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "9"], ["i", "2"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"], ["i", "2"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"], ["i", "2"]]}, {"line": 5, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 0]]}}
{"id": 9292, "code": "char[] S = {'2', '0', '1', '7', '/', '0', '1', '/', '0', '7'};\nS[3] = '8';\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'2'", ",", "'0'", ",", "'1'", ",", "'7'", ",", "'/'", ",", "'0'", ",", "'1'", ",", "'/'", ",", "'0'", ",", "'7'", "}", ";", "<1>", "S", "[", "3", "]", "=", "'8'", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ 2 , 0 , 1 , 7 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 1, "state": [["S", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 2, "state": [["S", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 2081, "code": "int n = 10, a = 7, b = 5;\nint and_ = Math.min(a, b);\nint or_ = Math.max(0, a + b - n);\nSystem.out.println(and_ + \" \" + or_);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "and_", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "or_", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "and_", "+", "\" \"", "+", "or_", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["and_", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["and_", "5"], ["or_", "2"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["and_", "5"], ["or_", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 18224, "code": "int H = 2;\nint W = 100;\nint N = 200;\nfor (int i = 1; i <= Math.max(H, W); i++) {\nif (Math.max(H, W) * i >= N) {\nSystem.out.println(i);\nbreak;}}", "code_tokens": ["<0>", "int", "H", "=", "2", ";", "<1>", "int", "W", "=", "100", ";", "<2>", "int", "N", "=", "200", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "i", "++", ")", "{", "<4>", "if", "(", "Math", ".", "max", "(", "H", ",", "W", ")", "*", "i", ">=", "N", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<6>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["H", "2"]]}, {"line": 2, "state": [["H", "2"], ["W", "100"]]}, {"line": 3, "state": [["H", "2"], ["W", "100"], ["N", "200"]]}, {"line": 4, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["i", "1"]]}, {"line": 5, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["i", "1"]]}, {"line": 4, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["i", "2"]]}, {"line": 5, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["i", "2"]]}, {"line": 6, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["i", "2"]]}, {"line": 7, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2, 1], [4, 5, 4, 2, 1]], "5": [[5, 4, 2, 1], [5, 4, 5, 4, 2, 1]], "6": [[6, 5, 4, 5, 4, 2, 1]], "7": [[7]]}}
{"id": 13601, "code": "String a = \"happy\"; String b = \"newyear\"; String c = \"enjoy\";\nString s = a + \" \" + b + \" \" + c;\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "a", "=", "\"happy\"", ";", "String", "b", "=", "\"newyear\"", ";", "String", "c", "=", "\"enjoy\"", ";", "<1>", "String", "s", "=", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}, {"line": 1, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"], ["s", "happy newyear enjoy"]]}, {"line": 2, "state": [["a", "happy"], ["b", "newyear"], ["c", "enjoy"], ["s", "happy newyear enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 8669, "code": "int N = 4;\nint[] A = {1, 1, 1, 1};\nint[] B = {1, 1, 1, 1};\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint tmp = sum(A, i + 1) + sum(B, N - i);\nif (ans < tmp) {\nans = tmp;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "tmp", "=", "sum", "(", "A", ",", "i", "+", "1", ")", "+", "sum", "(", "B", ",", "N", "-", "i", ")", ";", "<6>", "if", "(", "ans", "<", "tmp", ")", "{", "<7>", "ans", "=", "tmp", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"]]}, {"line": 1, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["tmp", "5"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "0"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["tmp", "5"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["tmp", "5"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["tmp", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 12194, "code": "int m = 11, d = 30;\nint mm = 12, dd = 1;\nif (m != mm) {\nSystem.out.println(1);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "m", "=", "11", ",", "d", "=", "30", ";", "<1>", "int", "mm", "=", "12", ",", "dd", "=", "1", ";", "<2>", "if", "(", "m", "!=", "mm", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["m", "11"], ["d", "30"]]}, {"line": 1, "state": [["m", "11"], ["d", "30"], ["mm", "12"], ["dd", "1"]]}, {"line": 2, "state": [["m", "11"], ["d", "30"], ["mm", "12"], ["dd", "1"]]}, {"line": 3, "state": [["m", "11"], ["d", "30"], ["mm", "12"], ["dd", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 3878, "code": "int X = 64145, Y = 123, Z = 456;\nX -= 2 * Z;\nX -= Y;\nint ans = 0;\nif (0 <= X) {\nans = 1 + X / (Y + Z);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "X", "-=", "2", "*", "Z", ";", "<2>", "X", "-=", "Y", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "if", "(", "0", "<=", "X", ")", "{", "<5>", "ans", "=", "1", "+", "X", "/", "(", "Y", "+", "Z", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "63233"], ["Y", "123"], ["Z", "456"]]}, {"line": 2, "state": [["X", "63110"], ["Y", "123"], ["Z", "456"]]}, {"line": 3, "state": [["X", "63110"], ["Y", "123"], ["Z", "456"], ["ans", "0"]]}, {"line": 4, "state": [["X", "63110"], ["Y", "123"], ["Z", "456"], ["ans", "0"]]}, {"line": 5, "state": [["X", "63110"], ["Y", "123"], ["Z", "456"], ["ans", "109"]]}, {"line": 6, "state": [["X", "63110"], ["Y", "123"], ["Z", "456"], ["ans", "109"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]], "4": [[4, 2, 1, 0]], "5": [[5, 4, 2, 1, 0]], "6": [[6, 5, 4, 2, 1, 0]]}}
{"id": 19490, "code": "int n = 3;\nif (n % 2 != 0) n *= 2;\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "n", "*=", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "6"]]}, {"line": 2, "state": [["n", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 8787, "code": "int n = 4;\nint[] A1 = {1, 1, 1, 1};\nint[] A2 = {1, 1, 1, 1};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint x = 0;for (int j = 0; j <= i; j++) {x += A1[j];}for (int j = i; j < n; j++) {x += A2[j];}\nif (ans < x) {\nans = x;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "A1", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "x", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "x", "+=", "A1", "[", "j", "]", ";", "}", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "x", "+=", "A2", "[", "j", "]", ";", "}", "<6>", "if", "(", "ans", "<", "x", ")", "{", "<7>", "ans", "=", "x", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["x", "5"]]}, {"line": 6, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["x", "5"]]}, {"line": 7, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "0"], ["x", "5"]]}, {"line": 4, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["x", "5"]]}, {"line": 5, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["x", "5"]]}, {"line": 6, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["x", "5"]]}, {"line": 4, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["x", "5"]]}, {"line": 5, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["x", "5"]]}, {"line": 6, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["x", "5"]]}, {"line": 4, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["x", "5"]]}, {"line": 5, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["x", "5"]]}, {"line": 6, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["x", "5"]]}, {"line": 4, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["x", "5"]]}, {"line": 8, "state": [["n", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["x", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 14074, "code": "int n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nint cnt = 1;\nint dr = 0;\nint sav = a[0];\nfor (int i = 1; i < n; i++) {\nif (dr == 0) {\nif (sav < a[i]) {\ndr = 1;}\nelse if (sav > a[i]) {\ndr = -1;}}\nelse if (dr == 1) {\nif (sav > a[i]) {\ncnt = cnt + 1;\ndr = 0;}}\nelse if (dr == -1) {\nif (sav < a[i]) {\ncnt = cnt + 1;\ndr = 0;}}\nsav = a[i];}\nint ans = cnt;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "cnt", "=", "1", ";", "<3>", "int", "dr", "=", "0", ";", "<4>", "int", "sav", "=", "a", "[", "0", "]", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "if", "(", "dr", "==", "0", ")", "{", "<7>", "if", "(", "sav", "<", "a", "[", "i", "]", ")", "{", "<8>", "dr", "=", "1", ";", "}", "<9>", "else", "if", "(", "sav", ">", "a", "[", "i", "]", ")", "{", "<10>", "dr", "=", "-", "1", ";", "}", "}", "<11>", "else", "if", "(", "dr", "==", "1", ")", "{", "<12>", "if", "(", "sav", ">", "a", "[", "i", "]", ")", "{", "<13>", "cnt", "=", "cnt", "+", "1", ";", "<14>", "dr", "=", "0", ";", "}", "}", "<15>", "else", "if", "(", "dr", "==", "-", "1", ")", "{", "<16>", "if", "(", "sav", "<", "a", "[", "i", "]", ")", "{", "<17>", "cnt", "=", "cnt", "+", "1", ";", "<18>", "dr", "=", "0", ";", "}", "}", "<19>", "sav", "=", "a", "[", "i", "]", ";", "}", "<20>", "int", "ans", "=", "cnt", ";", "<21>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "0"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "0"], ["sav", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "0"], ["sav", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "0"], ["sav", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "0"], ["sav", "1"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "1"], ["i", "1"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "2"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "2"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "2"], ["i", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "2"], ["i", "2"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "2"], ["i", "2"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "3"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "3"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "3"], ["i", "3"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "3"], ["i", "3"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "1"], ["dr", "1"], ["sav", "3"], ["i", "3"]]}, {"line": 13, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "1"], ["sav", "3"], ["i", "3"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "3"], ["i", "3"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "4"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "4"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "4"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "4"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "5"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "5"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "5"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "0"], ["sav", "2"], ["i", "5"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "-1"], ["sav", "2"], ["i", "5"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "-1"], ["sav", "1"], ["i", "5"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "-1"], ["sav", "1"], ["i", "5"]]}, {"line": 20, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "-1"], ["sav", "1"], ["i", "5"], ["ans", "2"]]}, {"line": 21, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["cnt", "2"], ["dr", "-1"], ["sav", "1"], ["i", "5"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 0], [5, 19, 7, 5, 0], [5, 19, 12, 5, 19, 7, 5, 0], [5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0], [5, 19, 9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0], [5, 19, 9, 7, 5, 19, 9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0]], "6": [[6, 3], [6, 8, 6, 3], [6, 11, 6, 8, 6, 3], [6, 14, 11, 6, 11, 6, 8, 6, 3], [6, 14, 11, 6, 11, 6, 8, 6, 3]], "7": [[7, 5, 0], [7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0], [7, 5, 19, 9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0]], "8": [[8, 6, 3]], "9": [[9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0], [9, 7, 5, 19, 9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0]], "10": [[10, 6, 14, 11, 6, 11, 6, 8, 6, 3]], "11": [[11, 6, 8, 6, 3], [11, 6, 11, 6, 8, 6, 3]], "12": [[12, 5, 19, 7, 5, 0], [12, 5, 19, 12, 5, 19, 7, 5, 0]], "13": [[13, 2]], "14": [[14, 11, 6, 11, 6, 8, 6, 3]], "19": [[19, 7, 5, 0], [19, 12, 5, 19, 7, 5, 0], [19, 12, 5, 19, 12, 5, 19, 7, 5, 0], [19, 9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0], [19, 9, 7, 5, 19, 9, 7, 5, 19, 12, 5, 19, 12, 5, 19, 7, 5, 0]], "20": [[20, 13, 2]], "21": [[21, 20, 13, 2]]}}
{"id": 10296, "code": "int n = 6;\nString s = \")))())\";\nString ss = s;\nint l = 0;\nfor (char c : ss.toCharArray()) {\nif (c == '(') {\nl += 1;}\nelse {\nif (l > 0) {\nl -= 1;}\nelse {\ns = \"(\" + s;}}}\nfor (int i = 0; i < l; i++) {\ns = s + \")\";}\nSystem.out.println(s);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "String", "ss", "=", "s", ";", "<3>", "int", "l", "=", "0", ";", "<4>", "for", "(", "char", "c", ":", "ss", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "c", "==", "'('", ")", "{", "<6>", "l", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "l", ">", "0", ")", "{", "<9>", "l", "-=", "1", ";", "}", "<10>", "else", "{", "<11>", "s", "=", "\"(\"", "+", "s", ";", "}", "}", "}", "<12>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l", ";", "i", "++", ")", "{", "<13>", "s", "=", "s", "+", "\")\"", ";", "}", "<14>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["ss", ")))())"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["ss", ")))())"], ["l", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 11, "state": [["n", "6"], ["s", "()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", "()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", "()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", "()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 11, "state": [["n", "6"], ["s", "(()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", "(()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", "(()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", "(()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 11, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", "("]]}, {"line": 5, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", "("]]}, {"line": 6, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "1"], ["c", "("]]}, {"line": 4, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "1"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "1"], ["c", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "1"], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", "((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 11, "state": [["n", "6"], ["s", "(((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", "(((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 12, "state": [["n", "6"], ["s", "(((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}, {"line": 14, "state": [["n", "6"], ["s", "(((()))())"], ["ss", ")))())"], ["l", "0"], ["c", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 2, 1], [4, 5, 4, 2, 1], [4, 5, 4, 5, 4, 2, 1], [4, 5, 4, 5, 4, 5, 4, 2, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 1]], "5": [[5, 4, 2, 1], [5, 4, 5, 4, 2, 1], [5, 4, 5, 4, 5, 4, 2, 1], [5, 4, 5, 4, 5, 4, 5, 4, 2, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 1]], "6": [[6, 8, 3]], "8": [[8, 3], [8, 3], [8, 3], [8, 6, 8, 3], [8, 9, 8, 6, 8, 3]], "9": [[9, 8, 6, 8, 3]], "11": [[11, 2, 1], [11, 2, 1], [11, 2, 1], [11, 2, 1]], "12": [[12, 8, 9, 8, 6, 8, 3]], "14": [[14, 11, 2, 1]]}}
{"id": 9302, "code": "String a = \"2017\"; String b = \"01\"; String c = \"07\";\nint n = Integer.parseInt(a);\nn += 1;\nSystem.out.printf(\"%d/%s/%s%n\", n, b, c);", "code_tokens": ["<0>", "String", "a", "=", "\"2017\"", ";", "String", "b", "=", "\"01\"", ";", "String", "c", "=", "\"07\"", ";", "<1>", "int", "n", "=", "Integer", ".", "parseInt", "(", "a", ")", ";", "<2>", "n", "+=", "1", ";", "<3>", "System", ".", "out", ".", "printf", "(", "\"%d/%s/%s%n\"", ",", "n", ",", "b", ",", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017"], ["b", "01"], ["c", "07"]]}, {"line": 1, "state": [["a", "2017"], ["b", "01"], ["c", "07"], ["n", "2017"]]}, {"line": 2, "state": [["a", "2017"], ["b", "01"], ["c", "07"], ["n", "2018"]]}, {"line": 3, "state": [["a", "2017"], ["b", "01"], ["c", "07"], ["n", "2018"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 3760, "code": "int X = 12, Y = 3, Z = 1;\nint b = Y + 2 * Z;\nint ans = 1;\nwhile (true) {\nb += Y + Z;\nif (b > X) {\nbreak;}\nelse {\nans += 1;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "b", "=", "Y", "+", "2", "*", "Z", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "b", "+=", "Y", "+", "Z", ";", "<5>", "if", "(", "b", ">", "X", ")", "{", "<6>", "break", ";", "}", "<7>", "else", "{", "<8>", "ans", "+=", "1", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "5"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "5"], ["ans", "1"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "5"], ["ans", "1"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "9"], ["ans", "1"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "9"], ["ans", "1"]]}, {"line": 8, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "9"], ["ans", "2"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "13"], ["ans", "2"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "13"], ["ans", "2"]]}, {"line": 6, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "13"], ["ans", "2"]]}, {"line": 9, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["b", "13"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0], [4, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 5, 4, 1, 0]], "6": [[6]], "8": [[8, 2]], "9": [[9, 8, 2]]}}
{"id": 16662, "code": "String[] deck = {\"H\", \"D\"};\nString a = \"H\", b = \"H\";\nif (indexOf(deck, a) == 0) {\nSystem.out.println(b);\n} else if (indexOf(deck, b) == 0) {\nSystem.out.println(deck[1]);\n} else {\nSystem.out.println(deck[0]);}", "code_tokens": ["<0>", "String", "[", "]", "deck", "=", "{", "\"H\"", ",", "\"D\"", "}", ";", "<1>", "String", "a", "=", "\"H\"", ",", "b", "=", "\"H\"", ";", "<2>", "if", "(", "indexOf", "(", "deck", ",", "a", ")", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "<4>", "}", "else", "if", "(", "indexOf", "(", "deck", ",", "b", ")", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "deck", "[", "1", "]", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "deck", "[", "0", "]", ")", ";", "}"], "trace": [{"line": 0, "state": [["deck", "[ H , D ]"]]}, {"line": 1, "state": [["deck", "[ H , D ]"], ["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["deck", "[ H , D ]"], ["a", "H"], ["b", "H"]]}, {"line": 3, "state": [["deck", "[ H , D ]"], ["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 1]]}}
{"id": 16852, "code": "String a = \"D\"; String b = \"H\";\nSystem.out.println(a.equals(b) ? \"H\" : \"D\");", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "equals", "(", "b", ")", "?", "\"H\"", ":", "\"D\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18470, "code": "int h = 3;\nint w = 7;\nint n = 10;\nSystem.out.println(Math.min((int) Math.ceil((double) n / h), (int) Math.ceil((double) n / w)));", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "h", ")", ",", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "w", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]]}}
{"id": 12007, "code": "int m1 = 11, d1 = 30;\nint m2 = 12, d2 = 1;\nint ans = 1;\nif (m1 == m2) {\nans = 0;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "30", ";", "<1>", "int", "m2", "=", "12", ",", "d2", "=", "1", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "if", "(", "m1", "==", "m2", ")", "{", "<4>", "ans", "=", "0", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "30"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"], ["ans", "1"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"], ["ans", "1"]]}, {"line": 5, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "5": [[5, 2]]}}
{"id": 5491, "code": "int N = 5;\nif ((N & 0b1) != 0) {\nint ans = N / 2 + 1;\nSystem.out.println(ans);} else {\nint ans = N / 2;\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "(", "N", "&", "0b1", ")", "!=", "0", ")", "{", "<2>", "int", "ans", "=", "N", "/", "2", "+", "1", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "else", "{", "<4>", "int", "ans", "=", "N", "/", "2", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 2, "state": [["N", "5"], ["ans", "3"]]}, {"line": 5, "state": [["N", "5"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 2, 1, 0]]}}
{"id": 14788, "code": "int n = 3, p = 0;\nint[] a = {1, 1, 1};\nboolean allEven = true;for (int i : a) {if (i % 2 != 0) {allEven = false;break;}}if (allEven) {\nif (p == 1) {\nSystem.out.println(0);}\nelse {\nSystem.out.println((int) Math.pow(2, n));}}\nelse {\nSystem.out.println((int) Math.pow(2, n - 1));}", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "p", "=", "0", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "boolean", "allEven", "=", "true", ";", "for", "(", "int", "i", ":", "a", ")", "{", "if", "(", "i", "%", "2", "!=", "0", ")", "{", "allEven", "=", "false", ";", "break", ";", "}", "}", "if", "(", "allEven", ")", "{", "<3>", "if", "(", "p", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", ")", ")", ";", "}", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "3"], ["p", "0"]]}, {"line": 1, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["i", "1"]]}, {"line": 2, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 8, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1]], "8": [[8, 0]]}}
{"id": 16891, "code": "char[] s = {'D', 'H'};\nchar a = s[0];\nchar b = s[1];\nif ((a == 'H') ^ (b == 'H')) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'D'", ",", "'H'", "}", ";", "<1>", "char", "a", "=", "s", "[", "0", "]", ";", "<2>", "char", "b", "=", "s", "[", "1", "]", ";", "<3>", "if", "(", "(", "a", "==", "'H'", ")", "^", "(", "b", "==", "'H'", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "[ D , H ]"]]}, {"line": 1, "state": [["s", "[ D , H ]"], ["a", "D"]]}, {"line": 2, "state": [["s", "[ D , H ]"], ["a", "D"], ["b", "H"]]}, {"line": 3, "state": [["s", "[ D , H ]"], ["a", "D"], ["b", "H"]]}, {"line": 4, "state": [["s", "[ D , H ]"], ["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4]]}}
{"id": 579, "code": "char[] S = {'x', 'y', 'z'};\nint N = S.length;\nint K = 4;\nfor (int i = 0; i < N - 1; i++) {\nint d = ('a' - S[i]) % 26;\nif (d <= K) {\nS[i] = 'a';\nK -= d;}}\nS[S.length - 1] = (char) ((S[S.length - 1] - 'a' + K) % 26 + 'a');\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "N", "=", "S", ".", "length", ";", "<2>", "int", "K", "=", "4", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<4>", "int", "d", "=", "(", "'a'", "-", "S", "[", "i", "]", ")", "%", "26", ";", "<5>", "if", "(", "d", "<=", "K", ")", "{", "<6>", "S", "[", "i", "]", "=", "'a'", ";", "<7>", "K", "-=", "d", ";", "}", "}", "<8>", "S", "[", "S", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "(", "S", "[", "S", ".", "length", "-", "1", "]", "-", "'a'", "+", "K", ")", "%", "26", "+", "'a'", ")", ";", "<9>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ x , y , z ]"]]}, {"line": 1, "state": [["S", "[ x , y , z ]"], ["N", "3"]]}, {"line": 2, "state": [["S", "[ x , y , z ]"], ["N", "3"], ["K", "4"]]}, {"line": 3, "state": [["S", "[ x , y , z ]"], ["N", "3"], ["K", "4"], ["i", "0"]]}, {"line": 4, "state": [["S", "[ x , y , z ]"], ["N", "3"], ["K", "4"], ["i", "0"], ["d", "3"]]}, {"line": 5, "state": [["S", "[ x , y , z ]"], ["N", "3"], ["K", "4"], ["i", "0"], ["d", "3"]]}, {"line": 6, "state": [["S", "[ a , y , z ]"], ["N", "3"], ["K", "4"], ["i", "0"], ["d", "3"]]}, {"line": 7, "state": [["S", "[ a , y , z ]"], ["N", "3"], ["K", "1"], ["i", "0"], ["d", "3"]]}, {"line": 3, "state": [["S", "[ a , y , z ]"], ["N", "3"], ["K", "1"], ["i", "1"], ["d", "3"]]}, {"line": 4, "state": [["S", "[ a , y , z ]"], ["N", "3"], ["K", "1"], ["i", "1"], ["d", "2"]]}, {"line": 5, "state": [["S", "[ a , y , z ]"], ["N", "3"], ["K", "1"], ["i", "1"], ["d", "2"]]}, {"line": 3, "state": [["S", "[ a , y , z ]"], ["N", "3"], ["K", "1"], ["i", "1"], ["d", "2"]]}, {"line": 8, "state": [["S", "[ a , y , a ]"], ["N", "3"], ["K", "1"], ["i", "1"], ["d", "2"]]}, {"line": 9, "state": [["S", "[ a , y , a ]"], ["N", "3"], ["K", "1"], ["i", "1"], ["d", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 6, 4, 3, 1, 0], [3, 4, 3, 6, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 6, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 6, 4, 3, 1, 0]], "6": [[6, 4, 3, 1, 0]], "7": [[7, 5, 4, 3, 1, 0]], "8": [[8, 5, 4, 3, 6, 4, 3, 1, 0]], "9": [[9, 8, 5, 4, 3, 6, 4, 3, 1, 0]]}}
{"id": 12247, "code": "String s = \"level\";\nint n = s.length();\nif (!s.equals(new StringBuilder(s).reverse().toString())) {\nSystem.out.println(\"No\");\n} else if (!s.substring(0, (n - 1) / 2).equals(new StringBuilder(s.substring(0, (n - 1) / 2)).reverse().toString())) {\nSystem.out.println(\"No\");\n} else if (!s.substring((n + 3) / 2 - 1).equals(new StringBuilder(s.substring((n + 3) / 2 - 1)).reverse().toString())) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "String", "s", "=", "\"level\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "if", "(", "!", "s", ".", "equals", "(", "new", "StringBuilder", "(", "s", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<4>", "}", "else", "if", "(", "!", "s", ".", "substring", "(", "0", ",", "(", "n", "-", "1", ")", "/", "2", ")", ".", "equals", "(", "new", "StringBuilder", "(", "s", ".", "substring", "(", "0", ",", "(", "n", "-", "1", ")", "/", "2", ")", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<6>", "}", "else", "if", "(", "!", "s", ".", "substring", "(", "(", "n", "+", "3", ")", "/", "2", "-", "1", ")", ".", "equals", "(", "new", "StringBuilder", "(", "s", ".", "substring", "(", "(", "n", "+", "3", ")", "/", "2", "-", "1", ")", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<8>", "}", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "level"]]}, {"line": 1, "state": [["s", "level"], ["n", "5"]]}, {"line": 2, "state": [["s", "level"], ["n", "5"]]}, {"line": 4, "state": [["s", "level"], ["n", "5"]]}, {"line": 5, "state": [["s", "level"], ["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5]]}}
{"id": 11984, "code": "int m1 = 11, d1 = 16;\nint m2 = 11, d2 = 17;\nSystem.out.println(m1 != m2 ? \"1\" : \"0\");", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "16", ";", "<1>", "int", "m2", "=", "11", ",", "d2", "=", "17", ";", "<2>", "System", ".", "out", ".", "println", "(", "m1", "!=", "m2", "?", "\"1\"", ":", "\"0\"", ")", ";"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "16"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 14869, "code": "int N = 3, P = 0;\nint[] A = {1, 1, 1};\nint f = 0;\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 == 1) {\nf = 1;}}\nif (f == 0) {\nif (P == 0) {\nSystem.out.println((int) Math.pow(2, N));}\nelse {\nSystem.out.println(0);}}\nelse {\nSystem.out.println((int) Math.pow(2, N - 1));}", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "f", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "[", "i", "]", "%", "2", "==", "1", ")", "{", "<5>", "f", "=", "1", ";", "}", "}", "<6>", "if", "(", "f", "==", "0", ")", "{", "<7>", "if", "(", "P", "==", "0", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", ")", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "3"], ["P", "0"]]}, {"line": 1, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "0"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "0"], ["i", "0"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "0"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "2"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "2"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "2"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "2"]]}, {"line": 6, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "2"]]}, {"line": 12, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["f", "1"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0]], "5": [[5, 2], [5, 2], [5, 2]], "6": [[6, 5, 2]], "12": [[12, 3, 4, 3, 4, 3, 4, 3, 0]]}}
{"id": 19163, "code": "int n = 12;\nint p = 10;\nint a = 0;\nif (n % 2 == 0) {\nwhile (p <= n) {\na += n / p;\np *= 5;}}\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "int", "p", "=", "10", ";", "<2>", "int", "a", "=", "0", ";", "<3>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<4>", "while", "(", "p", "<=", "n", ")", "{", "<5>", "a", "+=", "n", "/", "p", ";", "<6>", "p", "*=", "5", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"], ["p", "10"]]}, {"line": 2, "state": [["n", "12"], ["p", "10"], ["a", "0"]]}, {"line": 3, "state": [["n", "12"], ["p", "10"], ["a", "0"]]}, {"line": 4, "state": [["n", "12"], ["p", "10"], ["a", "0"]]}, {"line": 5, "state": [["n", "12"], ["p", "10"], ["a", "1"]]}, {"line": 6, "state": [["n", "12"], ["p", "50"], ["a", "1"]]}, {"line": 4, "state": [["n", "12"], ["p", "50"], ["a", "1"]]}, {"line": 7, "state": [["n", "12"], ["p", "50"], ["a", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0], [4, 6, 5, 4, 3, 0]], "5": [[5, 4, 3, 0]], "6": [[6, 5, 4, 3, 0]], "7": [[7, 5, 4, 3, 0]]}}
{"id": 2083, "code": "int n = 10, a = 3, b = 5;\nint high = Math.min(a, b);\nint low = Math.max(0, a + b - n);\nSystem.out.println(high + \" \" + low);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "high", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "low", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "high", "+", "\" \"", "+", "low", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["high", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["high", "3"], ["low", "0"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["high", "3"], ["low", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 722, "code": "int k = 101;\nint n = 7;\nint cnt = 1;\nfor (int i = 0; i < k; i++) {\nif (n % k == 0) {\nbreak;}\nn = (n * 10 + 7) % k;\ncnt += 1;}\nif (n % k == 0) {\nSystem.out.println(cnt);}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "k", "=", "101", ";", "<1>", "int", "n", "=", "7", ";", "<2>", "int", "cnt", "=", "1", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "k", ";", "i", "++", ")", "{", "<4>", "if", "(", "n", "%", "k", "==", "0", ")", "{", "<5>", "break", ";", "}", "<6>", "n", "=", "(", "n", "*", "10", "+", "7", ")", "%", "k", ";", "<7>", "cnt", "+=", "1", ";", "}", "<8>", "if", "(", "n", "%", "k", "==", "0", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["k", "101"]]}, {"line": 1, "state": [["k", "101"], ["n", "7"]]}, {"line": 2, "state": [["k", "101"], ["n", "7"], ["cnt", "1"]]}, {"line": 3, "state": [["k", "101"], ["n", "7"], ["cnt", "1"], ["i", "0"]]}, {"line": 4, "state": [["k", "101"], ["n", "7"], ["cnt", "1"], ["i", "0"]]}, {"line": 6, "state": [["k", "101"], ["n", "77"], ["cnt", "1"], ["i", "0"]]}, {"line": 7, "state": [["k", "101"], ["n", "77"], ["cnt", "2"], ["i", "0"]]}, {"line": 3, "state": [["k", "101"], ["n", "77"], ["cnt", "2"], ["i", "1"]]}, {"line": 4, "state": [["k", "101"], ["n", "77"], ["cnt", "2"], ["i", "1"]]}, {"line": 6, "state": [["k", "101"], ["n", "70"], ["cnt", "2"], ["i", "1"]]}, {"line": 7, "state": [["k", "101"], ["n", "70"], ["cnt", "3"], ["i", "1"]]}, {"line": 3, "state": [["k", "101"], ["n", "70"], ["cnt", "3"], ["i", "2"]]}, {"line": 4, "state": [["k", "101"], ["n", "70"], ["cnt", "3"], ["i", "2"]]}, {"line": 6, "state": [["k", "101"], ["n", "0"], ["cnt", "3"], ["i", "2"]]}, {"line": 7, "state": [["k", "101"], ["n", "0"], ["cnt", "4"], ["i", "2"]]}, {"line": 3, "state": [["k", "101"], ["n", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 4, "state": [["k", "101"], ["n", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 5, "state": [["k", "101"], ["n", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 8, "state": [["k", "101"], ["n", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 9, "state": [["k", "101"], ["n", "0"], ["cnt", "4"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 0], [3, 0], [3, 0]], "4": [[4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0]], "5": [[5]], "6": [[6, 4, 3, 0], [6, 4, 3, 0], [6, 4, 3, 0]], "7": [[7, 2], [7, 2], [7, 2]], "8": [[8, 4, 3, 0]], "9": [[9, 7, 2]]}}
{"id": 5116, "code": "String s = \"internationalization\";\nint l = s.length() - 2;\nSystem.out.print(s.charAt(0));System.out.print(l);System.out.print(s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "int", "l", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "0", ")", ")", ";", "System", ".", "out", ".", "print", "(", "l", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["l", "18"]]}, {"line": 2, "state": [["s", "internationalization"], ["l", "18"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 19467, "code": "int n = 3;\nif (n % 2 == 0) {\nSystem.out.println(n);}\nif (n % 2 == 1) {\nSystem.out.println(n * 2);}", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "}", "<3>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"]]}, {"line": 3, "state": [["n", "3"]]}, {"line": 4, "state": [["n", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 18362, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint count = 0;\nint a, b;if (h < w) {\na = w;\nb = h;\n} else {\na = h;\nb = w;}\nint x = n / a;\nif (n % a != 0) {\nx += 1;}\nSystem.out.println(x);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "count", "=", "0", ";", "<4>", "int", "a", ",", "b", ";", "if", "(", "h", "<", "w", ")", "{", "<5>", "a", "=", "w", ";", "<6>", "b", "=", "h", ";", "<7>", "}", "else", "{", "<8>", "a", "=", "h", ";", "<9>", "b", "=", "w", ";", "}", "<10>", "int", "x", "=", "n", "/", "a", ";", "<11>", "if", "(", "n", "%", "a", "!=", "0", ")", "{", "<12>", "x", "+=", "1", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"], ["a", "7"]]}, {"line": 6, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"], ["a", "7"], ["b", "3"]]}, {"line": 10, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"], ["a", "7"], ["b", "3"], ["x", "1"]]}, {"line": 11, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"], ["a", "7"], ["b", "3"], ["x", "1"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"], ["a", "7"], ["b", "3"], ["x", "2"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count", "0"], ["a", "7"], ["b", "3"], ["x", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]], "6": [[6, 4, 1, 0]], "10": [[10, 5, 4, 1, 0]], "11": [[11, 10, 5, 4, 1, 0]], "12": [[12, 10, 5, 4, 1, 0]], "13": [[13, 12, 10, 5, 4, 1, 0]]}}
{"id": 16163, "code": "int n = 2;\nint[] a_list = {0, 100};\ndouble base = a_list[a_list.length - 1] / 2.0;\nint i = Arrays.binarySearch(a_list, (int) base);if (i < 0) {i = -(i + 1);}\nif (i > 0) {\ni--;}\nint[] ans = {a_list[a_list.length - 1], a_list[i], Math.abs(a_list[i] - (int) base)};\nfor (int j = i + 1; j < n; j++) {\nint temp = Math.abs(a_list[j] - (int) base);\nif (temp >= ans[2]) {\nbreak;}\nans[1] = a_list[j];\nans[2] = temp;}\nSystem.out.println(ans[0] + \" \" + ans[1]);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a_list", "=", "{", "0", ",", "100", "}", ";", "<2>", "double", "base", "=", "a_list", "[", "a_list", ".", "length", "-", "1", "]", "/", "2.0", ";", "<3>", "int", "i", "=", "Arrays", ".", "binarySearch", "(", "a_list", ",", "(", "int", ")", "base", ")", ";", "if", "(", "i", "<", "0", ")", "{", "i", "=", "-", "(", "i", "+", "1", ")", ";", "}", "<4>", "if", "(", "i", ">", "0", ")", "{", "<5>", "i", "--", ";", "}", "<6>", "int", "[", "]", "ans", "=", "{", "a_list", "[", "a_list", ".", "length", "-", "1", "]", ",", "a_list", "[", "i", "]", ",", "Math", ".", "abs", "(", "a_list", "[", "i", "]", "-", "(", "int", ")", "base", ")", "}", ";", "<7>", "for", "(", "int", "j", "=", "i", "+", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "<8>", "int", "temp", "=", "Math", ".", "abs", "(", "a_list", "[", "j", "]", "-", "(", "int", ")", "base", ")", ";", "<9>", "if", "(", "temp", ">=", "ans", "[", "2", "]", ")", "{", "<10>", "break", ";", "}", "<11>", "ans", "[", "1", "]", "=", "a_list", "[", "j", "]", ";", "<12>", "ans", "[", "2", "]", "=", "temp", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "ans", "[", "0", "]", "+", "\" \"", "+", "ans", "[", "1", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"]]}, {"line": 4, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"]]}, {"line": 5, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"]]}, {"line": 6, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "0"], ["ans", "[ 100 , 0 , 50.0 ]"]]}, {"line": 8, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"], ["ans", "[ 100 , 0 , 50.0 ]"]]}, {"line": 9, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"], ["ans", "[ 100 , 0 , 50.0 ]"], ["temp", "50.0"]]}, {"line": 10, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"], ["ans", "[ 100 , 0 , 50.0 ]"], ["temp", "50.0"]]}, {"line": 11, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"], ["ans", "[ 100 , 0 , 50.0 ]"], ["temp", "50.0"]]}, {"line": 14, "state": [["n", "2"], ["a_list", "[ 0 , 100 ]"], ["base", "50.0"], ["i", "1"], ["ans", "[ 100 , 0 , 50.0 ]"], ["temp", "50.0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 4, 3, 2]], "6": [[6, 5, 4, 3, 2]], "7": [[7, 6, 5, 4, 3, 2]], "8": [[8, 7, 6, 5, 4, 3, 2]], "9": [[9, 8, 7, 6, 5, 4, 3, 2]], "10": [[10, 9, 8, 7, 6, 5, 4, 3, 2]], "11": [[11]], "14": [[14, 10, 9, 8, 7, 6, 5, 4, 3, 2]]}}
{"id": 8597, "code": "int n = 1;\nint[] a = {2};\nint[] b = {3};\nint[][] candy = {a, b};\nint n_i = 0;\nint n_j = 0;\nint score = 0;\nfor (int i = 0; i < n; i++) {\nint[] tmp_a = new int[i + 1];System.arraycopy(a, 0, tmp_a, 0, i + 1);\nint[] tmp_b = new int[b.length - i];System.arraycopy(b, i, tmp_b, 0, b.length - i);\nint tmp_score = sum(tmp_a) + sum(tmp_b);\nscore = Math.max(score, tmp_score);}\nSystem.out.println(score);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "3", "}", ";", "<3>", "int", "[", "]", "[", "]", "candy", "=", "{", "a", ",", "b", "}", ";", "<4>", "int", "n_i", "=", "0", ";", "<5>", "int", "n_j", "=", "0", ";", "<6>", "int", "score", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<8>", "int", "[", "]", "tmp_a", "=", "new", "int", "[", "i", "+", "1", "]", ";", "System", ".", "arraycopy", "(", "a", ",", "0", ",", "tmp_a", ",", "0", ",", "i", "+", "1", ")", ";", "<9>", "int", "[", "]", "tmp_b", "=", "new", "int", "[", "b", ".", "length", "-", "i", "]", ";", "System", ".", "arraycopy", "(", "b", ",", "i", ",", "tmp_b", ",", "0", ",", "b", ".", "length", "-", "i", ")", ";", "<10>", "int", "tmp_score", "=", "sum", "(", "tmp_a", ")", "+", "sum", "(", "tmp_b", ")", ";", "<11>", "score", "=", "Math", ".", "max", "(", "score", ",", "tmp_score", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "score", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"]]}, {"line": 4, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"]]}, {"line": 5, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"]]}, {"line": 6, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "0"]]}, {"line": 7, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "0"], ["i", "0"], ["tmp_a", "[ 2 ]"]]}, {"line": 9, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "0"], ["i", "0"], ["tmp_a", "[ 2 ]"], ["tmp_b", "[ 3 ]"]]}, {"line": 10, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "0"], ["i", "0"], ["tmp_a", "[ 2 ]"], ["tmp_b", "[ 3 ]"], ["tmp_score", "5"]]}, {"line": 11, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "5"], ["i", "0"], ["tmp_a", "[ 2 ]"], ["tmp_b", "[ 3 ]"], ["tmp_score", "5"]]}, {"line": 7, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "5"], ["i", "0"], ["tmp_a", "[ 2 ]"], ["tmp_b", "[ 3 ]"], ["tmp_score", "5"]]}, {"line": 12, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["candy", "[ [ 2 ] , [ 3 ] ]"], ["n_i", "0"], ["n_j", "0"], ["score", "5"], ["i", "0"], ["tmp_a", "[ 2 ]"], ["tmp_b", "[ 3 ]"], ["tmp_score", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 0], [7, 9, 8, 7, 0]], "8": [[8, 7, 0]], "9": [[9, 8, 7, 0]], "10": [[10, 9, 8, 7, 0]], "11": [[11, 10, 9, 8, 7, 0]], "12": [[12, 11, 10, 9, 8, 7, 0]]}}
{"id": 18864, "code": "int N = 2;\nint[] A = {10, 0};\nint x = A[A.length - 1];\nint y = A[0];\nint ans = Math.abs(x - y - y);\nfor (int i = 0; i < A.length - 1; i++) {int a = A[i];\nans = Math.min(ans, Math.abs(x - a - a));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "10", ",", "0", "}", ";", "<2>", "int", "x", "=", "A", "[", "A", ".", "length", "-", "1", "]", ";", "<3>", "int", "y", "=", "A", "[", "0", "]", ";", "<4>", "int", "ans", "=", "Math", ".", "abs", "(", "x", "-", "y", "-", "y", ")", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "A", ".", "length", "-", "1", ";", "i", "++", ")", "{", "int", "a", "=", "A", "[", "i", "]", ";", "<6>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "Math", ".", "abs", "(", "x", "-", "a", "-", "a", ")", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"], ["A", "(10 , 0)"]]}, {"line": 3, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"]]}, {"line": 4, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"], ["y", "10"]]}, {"line": 5, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"], ["y", "10"], ["ans", "20"]]}, {"line": 6, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"], ["y", "10"], ["ans", "20"], ["a", "10"]]}, {"line": 7, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"], ["y", "10"], ["ans", "20"], ["a", "10"]]}, {"line": 6, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"], ["y", "10"], ["ans", "20"], ["a", "10"]]}, {"line": 8, "state": [["N", "2"], ["A", "(10 , 0)"], ["x", "0"], ["y", "10"], ["ans", "20"], ["a", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 4, 3, 2]], "6": [[6, 4, 3, 2], [6, 7, 6, 4, 3, 2]], "7": [[7, 6, 4, 3, 2]], "8": [[8, 7, 6, 4, 3, 2]]}}
{"id": 12780, "code": "String X = \"5\";\nSystem.out.println(X.contains(\"5\") ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "String", "X", "=", "\"5\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "X", ".", "contains", "(", "\"5\"", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["X", "5"]]}, {"line": 1, "state": [["X", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1888, "code": "int n = 10, a = 3, b = 5;\nif (a + b > n) {\nint q = a + b - n;\n} else {\nint q = 0;}\nSystem.out.println(Math.min(a, b) + \" \" + q);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "if", "(", "a", "+", "b", ">", "n", ")", "{", "<2>", "int", "q", "=", "a", "+", "b", "-", "n", ";", "<3>", "}", "else", "{", "<4>", "int", "q", "=", "0", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "q", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 4, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["q", "0"]]}, {"line": 5, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["q", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5, 4, 1, 0]]}}
{"id": 8706, "code": "int N = 4;\nint[] A1 = {0, 1, 2, 3, 4};\nint[] A2 = {0, 1, 2, 3, 4};\nint ans = 0;\nfor (int i = 1; i <= N; i++) {\nint cur = A1[i - 1];\nif (i < N) {\ncur += A2[N] - A2[i];}\nans = Math.max(ans, cur + A1[i] - A1[i - 1] + A2[i] - A2[i - 1]);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "A1", "=", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "N", ";", "i", "++", ")", "{", "<5>", "int", "cur", "=", "A1", "[", "i", "-", "1", "]", ";", "<6>", "if", "(", "i", "<", "N", ")", "{", "<7>", "cur", "+=", "A2", "[", "N", "]", "-", "A2", "[", "i", "]", ";", "}", "<8>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "cur", "+", "A1", "[", "i", "]", "-", "A1", "[", "i", "-", "1", "]", "+", "A2", "[", "i", "]", "-", "A2", "[", "i", "-", "1", "]", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "4"]]}, {"line": 2, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"]]}, {"line": 3, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "0"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "0"], ["i", "1"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "0"], ["i", "1"], ["cur", "0"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "0"], ["i", "1"], ["cur", "0"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "0"], ["i", "1"], ["cur", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "1"], ["cur", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "2"], ["cur", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "2"], ["cur", "1"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "2"], ["cur", "1"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "2"], ["cur", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "2"], ["cur", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "3"], ["cur", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "3"], ["cur", "2"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "3"], ["cur", "2"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "3"], ["cur", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "3"], ["cur", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "4"], ["cur", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "4"], ["cur", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "4"], ["cur", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "4"], ["cur", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "4"], ["cur", "3"]]}, {"line": 10, "state": [["N", "4"], ["A1", "[ 0 , 1 , 2 , 3 , 4 ]"], ["A2", "[ 0 , 1 , 2 , 3 , 4 ]"], ["ans", "5"], ["i", "4"], ["cur", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 9, 8, 7, 6, 5, 1], [5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [5, 9, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 9, 8, 7, 6, 5, 1], [6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1]], "7": [[7, 6, 5, 1], [7, 6, 5, 9, 8, 7, 6, 5, 1], [7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1]], "8": [[8, 7, 6, 5, 1], [8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1]], "9": [[9, 8, 7, 6, 5, 1], [9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1], [9, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1]], "10": [[10, 9, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 1]]}}
{"id": 9736, "code": "int N = 3;\nString S = \"())\";\nint L = 0;\nint R = 0;\nint cnt = 0;\nfor (char s : S.toCharArray()) {\nif (s == '(') {\ncnt += 1;}\nelse {\ncnt -= 1;\nif (cnt < 0) {\ncnt = 0;\nL += 1;}}}\nR += cnt;\nSystem.out.println(\"(\".repeat(L) + S + \")\".repeat(R));", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "String", "S", "=", "\"())\"", ";", "<2>", "int", "L", "=", "0", ";", "<3>", "int", "R", "=", "0", ";", "<4>", "int", "cnt", "=", "0", ";", "<5>", "for", "(", "char", "s", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<6>", "if", "(", "s", "==", "'('", ")", "{", "<7>", "cnt", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "cnt", "-=", "1", ";", "<10>", "if", "(", "cnt", "<", "0", ")", "{", "<11>", "cnt", "=", "0", ";", "<12>", "L", "+=", "1", ";", "}", "}", "}", "<13>", "R", "+=", "cnt", ";", "<14>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "L", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "R", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"], ["S", "())"]]}, {"line": 2, "state": [["N", "3"], ["S", "())"], ["L", "0"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", "("]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", "("]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "1"], ["d", "[ ]"], ["s", "("]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "1"], ["d", "[ ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "1"], ["d", "[ ]"], ["s", ")"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "-1"], ["d", "[ ]"], ["s", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "-1"], ["d", "[ ]"], ["s", ")"]]}, {"line": 12, "state": [["N", "3"], ["S", "())"], ["L", "0"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 13, "state": [["N", "3"], ["S", "())"], ["L", "1"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["L", "1"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 14, "state": [["N", "3"], ["S", "())"], ["L", "1"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}, {"line": 15, "state": [["N", "3"], ["S", "())"], ["L", "1"], ["R", "0"], ["cnt", "0"], ["d", "[ ]"], ["s", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 7, 6, 1], [6, 7, 6, 7, 6, 1], [6, 7, 6, 7, 6, 7, 6, 1]], "7": [[7, 6, 1], [7, 6, 7, 6, 1], [7, 6, 7, 6, 7, 6, 1]], "8": [[8, 4]], "10": [[10, 8, 4], [10, 11, 10, 8, 4]], "11": [[11, 10, 8, 4], [11, 10, 11, 10, 8, 4]], "12": [[12, 11, 10, 11, 10, 8, 4]], "13": [[13, 2]], "14": [[14, 12, 11, 10, 11, 10, 8, 4]], "15": [[15, 14, 12, 11, 10, 11, 10, 8, 4]]}}
{"id": 11325, "code": "String s = \"SUN\";\nint res = 0;\nif (s.equals(\"SUN\")) {\nres = 7;\n} else if (s.equals(\"MON\")) {\nres = 6;\n} else if (s.equals(\"TUE\")) {\nres = 5;\n} else if (s.equals(\"WED\")) {\nres = 4;\n} else if (s.equals(\"THU\")) {\nres = 3;\n} else if (s.equals(\"FRI\")) {\nres = 2;\n} else if (s.equals(\"SAT\")) {\nres = 1;}\nSystem.out.println(res);", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "int", "res", "=", "0", ";", "<2>", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<3>", "res", "=", "7", ";", "<4>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<5>", "res", "=", "6", ";", "<6>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<7>", "res", "=", "5", ";", "<8>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<9>", "res", "=", "4", ";", "<10>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<11>", "res", "=", "3", ";", "<12>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<13>", "res", "=", "2", ";", "<14>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<15>", "res", "=", "1", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"], ["res", "0"]]}, {"line": 2, "state": [["s", "SUN"], ["res", "0"]]}, {"line": 3, "state": [["s", "SUN"], ["res", "7"]]}, {"line": 16, "state": [["s", "SUN"], ["res", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 1]], "16": [[16, 3, 1]]}}
{"id": 9878, "code": "int n = 3;\nString s = \"())\";\nint L = 0;\nint R = 0;\nfor (char i : s.toCharArray()) {\nif (i == ')') {\nif (R > 0) {R--;}\nelse {L++;}}\nelse {\nR++;}}\nSystem.out.println(\"(\".repeat(L) + s + \")\".repeat(R));", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "String", "s", "=", "\"())\"", ";", "<2>", "int", "L", "=", "0", ";", "<3>", "int", "R", "=", "0", ";", "<4>", "for", "(", "char", "i", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "i", "==", "')'", ")", "{", "<6>", "if", "(", "R", ">", "0", ")", "{", "R", "--", ";", "}", "<7>", "else", "{", "L", "++", ";", "}", "}", "<8>", "else", "{", "<9>", "R", "++", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "L", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "R", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "())"]]}, {"line": 2, "state": [["n", "3"], ["s", "())"], ["L", "0"]]}, {"line": 3, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"], ["i", "("]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"], ["i", "("]]}, {"line": 9, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "1"], ["i", "("]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "1"], ["i", ")"]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "1"], ["i", ")"]]}, {"line": 6, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 6, "state": [["n", "3"], ["s", "())"], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 7, "state": [["n", "3"], ["s", "())"], ["L", "1"], ["R", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["L", "1"], ["R", "0"], ["i", ")"]]}, {"line": 10, "state": [["n", "3"], ["s", "())"], ["L", "1"], ["R", "0"], ["i", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1]], "6": [[6, 9, 3], [6, 9, 3]], "7": [[7, 2]], "9": [[9, 3]], "10": [[10, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 5536, "code": "int n = 5;\nint gou = n / 2;\ngou += n % 2;\nSystem.out.println(gou);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "gou", "=", "n", "/", "2", ";", "<2>", "gou", "+=", "n", "%", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "gou", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["gou", "2"]]}, {"line": 2, "state": [["n", "5"], ["gou", "3"]]}, {"line": 3, "state": [["n", "5"], ["gou", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 8018, "code": "int N = 4, K = 3;\nint[] A = {2, 3, 1, 4};\nint ans = N; // Initialize ans to Nfor (int i = 0; i < N; i++) {\nif (A[i] == 1) {\nans = N;\nfor (int j = Math.max(0, i - (K - 1)); j < Math.min(N, i + K - 1); j++) {\nans = Math.min((int) Math.ceil((double) j / (K - 1)) + (int) Math.ceil((double) (N - j - 1) / (K - 1)), ans);}\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "4", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "ans", "=", "N", ";", "// Initialize ans to Nfor (int i = 0; i < N; i++) {", "<3>", "if", "(", "A", "[", "i", "]", "==", "1", ")", "{", "<4>", "ans", "=", "N", ";", "<5>", "for", "(", "int", "j", "=", "Math", ".", "max", "(", "0", ",", "i", "-", "(", "K", "-", "1", ")", ")", ";", "j", "<", "Math", ".", "min", "(", "N", ",", "i", "+", "K", "-", "1", ")", ";", "j", "++", ")", "{", "<6>", "ans", "=", "Math", ".", "min", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "j", "/", "(", "K", "-", "1", ")", ")", "+", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "(", "N", "-", "j", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ",", "ans", ")", ";", "}", "<7>", "break", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "4"], ["K", "3"]]}, {"line": 3, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 4, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"]]}, {"line": 6, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "4"]]}, {"line": 7, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "4"], ["j", "0"]]}, {"line": 8, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "0"]]}, {"line": 7, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "1"]]}, {"line": 8, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "1"]]}, {"line": 7, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "2"]]}, {"line": 8, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "2"]]}, {"line": 7, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "3"]]}, {"line": 9, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "3"]]}, {"line": 10, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["i", "2"], ["ans", "2"], ["j", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2], [4, 5, 4, 2], [4, 5, 4, 5, 4, 2]], "5": [[5, 4, 2], [5, 4, 5, 4, 2], [5, 4, 5, 4, 5, 4, 2]], "6": [[6, 4, 5, 4, 5, 4, 2]], "7": [[7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2]], "8": [[8, 7, 6, 4, 5, 4, 5, 4, 2], [8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [8, 7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2]], "9": [[9]], "10": [[10, 8, 7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2]]}}
{"id": 15476, "code": "int x = 64146, y = 123, z = 456;\nint tmp = (x - z) / (y + z);\nint amari = (x - z) % (y + z);\nSystem.out.println(tmp);", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "tmp", "=", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ";", "<2>", "int", "amari", "=", "(", "x", "-", "z", ")", "%", "(", "y", "+", "z", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "tmp", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["tmp", "110"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["tmp", "110"], ["amari", "0"]]}, {"line": 3, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["tmp", "110"], ["amari", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]]}}
{"id": 6136, "code": "int N = 6;\nint[] A = {2, 3, 6, 14, 53, 159};\nint[] B = {6, 9, 58, 79, 84, 323};\nint[] C = {2, 50, 79, 288, 383, 2643};\nint ans = 0;\nfor (int b : B) {\nint i = bisectLeft(A, b);\nint j = bisect(C, b);\nans += i * (N - j);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", ",", "3", ",", "6", ",", "14", ",", "53", ",", "159", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "6", ",", "9", ",", "58", ",", "79", ",", "84", ",", "323", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "2", ",", "50", ",", "79", ",", "288", ",", "383", ",", "2643", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "B", ")", "{", "<6>", "int", "i", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<7>", "int", "j", "=", "bisect", "(", "C", ",", "b", ")", ";", "<8>", "ans", "+=", "i", "*", "(", "N", "-", "j", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "6"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "6"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "6"], ["i", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "6"], ["i", "2"], ["j", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["b", "6"], ["i", "2"], ["j", "1"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["b", "9"], ["i", "2"], ["j", "1"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["b", "9"], ["i", "3"], ["j", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["b", "9"], ["i", "3"], ["j", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["b", "9"], ["i", "3"], ["j", "1"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["b", "58"], ["i", "3"], ["j", "1"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["b", "58"], ["i", "5"], ["j", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["b", "58"], ["i", "5"], ["j", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["b", "58"], ["i", "5"], ["j", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["b", "79"], ["i", "5"], ["j", "2"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["b", "79"], ["i", "5"], ["j", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["b", "79"], ["i", "5"], ["j", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["b", "79"], ["i", "5"], ["j", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["b", "84"], ["i", "5"], ["j", "3"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["b", "84"], ["i", "5"], ["j", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["b", "84"], ["i", "5"], ["j", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["b", "84"], ["i", "5"], ["j", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["b", "323"], ["i", "5"], ["j", "3"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["b", "323"], ["i", "6"], ["j", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["b", "323"], ["i", "6"], ["j", "4"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "323"], ["i", "6"], ["j", "4"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "323"], ["i", "6"], ["j", "4"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "323"], ["i", "6"], ["j", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 15278, "code": "int X = 12, Y = 3, Z = 1;\nSystem.out.println((X - Z) / (Y + Z));", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "X", "-", "Z", ")", "/", "(", "Y", "+", "Z", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9271, "code": "System.out.println(\"2018/01/\" + \"2017/01/31\".substring(\"2017/01/31\".length() - 2));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2018/01/\"", "+", "\"2017/01/31\"", ".", "substring", "(", "\"2017/01/31\"", ".", "length", "(", ")", "-", "2", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 2778, "code": "String s = \"1111111111\";\nint m = 1000;\nfor (int i = 0; i < s.length(); i++) {\nint x = Integer.parseInt(s.substring(i, Math.min(i + 3, s.length())));\nif (m > Math.abs(753 - x)) {\nm = Math.abs(753 - x);}}\nSystem.out.println(m);", "code_tokens": ["<0>", "String", "s", "=", "\"1111111111\"", ";", "<1>", "int", "m", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<3>", "int", "x", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "Math", ".", "min", "(", "i", "+", "3", ",", "s", ".", "length", "(", ")", ")", ")", ")", ";", "<4>", "if", "(", "m", ">", "Math", ".", "abs", "(", "753", "-", "x", ")", ")", "{", "<5>", "m", "=", "Math", ".", "abs", "(", "753", "-", "x", ")", ";", "}", "}", "<6>", "System", ".", "out", ".", "println", "(", "m", ")", ";"], "trace": [{"line": 0, "state": [["s", "1111111111"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "1000"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "1000"], ["i", "0"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "1000"], ["i", "0"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "1000"], ["i", "0"], ["x", "111"]]}, {"line": 5, "state": [["s", "1111111111"], ["m", "642"], ["i", "0"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "1"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "1"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "1"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "2"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "2"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "2"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "3"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "3"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "3"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "4"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "4"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "4"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "5"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "5"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "5"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "6"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "6"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "6"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "7"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "7"], ["x", "111"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "7"], ["x", "111"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "8"], ["x", "111"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "8"], ["x", "11"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "8"], ["x", "11"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "9"], ["x", "11"]]}, {"line": 3, "state": [["s", "1111111111"], ["m", "642"], ["i", "9"], ["x", "1"]]}, {"line": 4, "state": [["s", "1111111111"], ["m", "642"], ["i", "9"], ["x", "1"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "9"], ["x", "1"]]}, {"line": 6, "state": [["s", "1111111111"], ["m", "642"], ["i", "9"], ["x", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 0]], "6": [[6, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 8729, "code": "int n = 1;\nint[] a1 = {2};\nint[] a2 = {3};\nint res = 0;\nfor (int i = 0; i < n; i++) {\nint a1_sum = 0;for (int j = 0; j <= i; j++) {a1_sum += a1[j];}\nint a2_sum = 0;for (int j = i; j < a2.length; j++) {a2_sum += a2[j];}\nres = Math.max(res, a1_sum + a2_sum);}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "3", "}", ";", "<3>", "int", "res", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "a1_sum", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "a1_sum", "+=", "a1", "[", "j", "]", ";", "}", "<6>", "int", "a2_sum", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "a2", ".", "length", ";", "j", "++", ")", "{", "a2_sum", "+=", "a2", "[", "j", "]", ";", "}", "<7>", "res", "=", "Math", ".", "max", "(", "res", ",", "a1_sum", "+", "a2_sum", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"], ["i", "0"], ["a1_sum", "2"]]}, {"line": 6, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"], ["i", "0"], ["a1_sum", "2"], ["a2_sum", "3"]]}, {"line": 7, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "5"], ["i", "0"], ["a1_sum", "2"], ["a2_sum", "3"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "5"], ["i", "0"], ["a1_sum", "2"], ["a2_sum", "3"]]}, {"line": 8, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "5"], ["i", "0"], ["a1_sum", "2"], ["a2_sum", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 0]]}}
{"id": 5834, "code": "System.out.println((Integer.parseInt(\"2\") + 1) / 2);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "(", "Integer", ".", "parseInt", "(", "\"2\"", ")", "+", "1", ")", "/", "2", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 11869, "code": "String a = \"11\"; String b = \"30\";\nString c = \"12\"; String d = \"1\";\nSystem.out.println(!a.equals(c) ? 1 : 0);", "code_tokens": ["<0>", "String", "a", "=", "\"11\"", ";", "String", "b", "=", "\"30\"", ";", "<1>", "String", "c", "=", "\"12\"", ";", "String", "d", "=", "\"1\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "!", "a", ".", "equals", "(", "c", ")", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "30"]]}, {"line": 1, "state": [["a", "11"], ["b", "30"], ["c", "12"], ["d", "1"]]}, {"line": 2, "state": [["a", "11"], ["b", "30"], ["c", "12"], ["d", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 16474, "code": "Scanner scanner = new Scanner(System.in);\nint n = 2;\nint[] A = {100, 0};\nArrays.sort(A);\nint N = A[A.length - 1];\nint R = 0;\nint tmpR = 0;\nfor (int i = 1; i < n; i++) {\nint tmp = Math.min(A[i], N - A[i]);\nif (tmpR < tmp) {\ntmpR = tmp;\nR = A[i];}}\nSystem.out.println(N + \" \" + R);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "n", "=", "2", ";", "<2>", "int", "[", "]", "A", "=", "{", "100", ",", "0", "}", ";", "<3>", "Arrays", ".", "sort", "(", "A", ")", ";", "<4>", "int", "N", "=", "A", "[", "A", ".", "length", "-", "1", "]", ";", "<5>", "int", "R", "=", "0", ";", "<6>", "int", "tmpR", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<8>", "int", "tmp", "=", "Math", ".", "min", "(", "A", "[", "i", "]", ",", "N", "-", "A", "[", "i", "]", ")", ";", "<9>", "if", "(", "tmpR", "<", "tmp", ")", "{", "<10>", "tmpR", "=", "tmp", ";", "<11>", "R", "=", "A", "[", "i", "]", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "N", "+", "\" \"", "+", "R", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["n", "2"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 100 , 0 ]"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 100 , 0 ]"]]}, {"line": 5, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"], ["tmpR", "0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"], ["tmpR", "0"], ["i", "1"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"], ["tmpR", "0"], ["i", "1"], ["tmp", "0"]]}, {"line": 10, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"], ["tmpR", "0"], ["i", "1"], ["tmp", "0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"], ["tmpR", "0"], ["i", "1"], ["tmp", "0"]]}, {"line": 13, "state": [["n", "2"], ["A", "[ 100 , 0 ]"], ["N", "100"], ["R", "0"], ["tmpR", "0"], ["i", "1"], ["tmp", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3]], "5": [[5, 4, 3]], "6": [[6]], "7": [[7]], "8": [[8, 2], [8, 9, 8, 2]], "9": [[9, 8, 2]], "10": [[10, 9, 8, 2]], "13": [[13, 9, 8, 2]]}}
{"id": 19024, "code": "int n = 12;\nif (n % 2 == 1) {\nSystem.out.println(0);} else {\nint s = 0;\nint p = 0;\nwhile (10 * Math.pow(5, p) <= n) {\ns += n / (10 * (int) Math.pow(5, p));\np += 1;}\nSystem.out.println(s);}", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "else", "{", "<3>", "int", "s", "=", "0", ";", "<4>", "int", "p", "=", "0", ";", "<5>", "while", "(", "10", "*", "Math", ".", "pow", "(", "5", ",", "p", ")", "<=", "n", ")", "{", "<6>", "s", "+=", "n", "/", "(", "10", "*", "(", "int", ")", "Math", ".", "pow", "(", "5", ",", "p", ")", ")", ";", "<7>", "p", "+=", "1", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "s", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "12"]]}, {"line": 2, "state": [["n", "12"]]}, {"line": 5, "state": [["n", "12"], ["s", "0"]]}, {"line": 6, "state": [["n", "12"], ["s", "0"], ["p", "0"]]}, {"line": 7, "state": [["n", "12"], ["s", "0"], ["p", "0"]]}, {"line": 8, "state": [["n", "12"], ["s", "1"], ["p", "0"]]}, {"line": 9, "state": [["n", "12"], ["s", "1"], ["p", "1"]]}, {"line": 7, "state": [["n", "12"], ["s", "1"], ["p", "1"]]}, {"line": 10, "state": [["n", "12"], ["s", "1"], ["p", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5]], "6": [[6]], "7": [[7, 6, 2, 1], [7, 9, 8, 7, 6, 2, 1]], "8": [[8, 7, 6, 2, 1]], "9": [[9, 8, 7, 6, 2, 1]], "10": [[10, 8, 7, 6, 2, 1]]}}
{"id": 6196, "code": "int n = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nint ans = 0;\nfor (int b : B) {\nint a_index = bisectLeft(A, b);\nint c_index = bisectRight(C, b);\nans += a_index * (n - c_index);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "B", ")", "{", "<6>", "int", "a_index", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<7>", "int", "c_index", "=", "bisectRight", "(", "C", ",", "b", ")", ";", "<8>", "ans", "+=", "a_index", "*", "(", "n", "-", "c_index", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"]]}, {"line": 2, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 6, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["b", "2"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["b", "2"], ["a_index", "3"]]}, {"line": 8, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 9, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 6, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 8, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 9, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 6, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 8, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 9, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 6, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}, {"line": 10, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["b", "2"], ["a_index", "3"], ["c_index", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 3576, "code": "Scanner scanner = new Scanner(System.in);\nint a = 20, b = 30;\nSystem.out.println((a - 2 * b > 0) ? (a - 2 * b) : 0);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "2", "*", "b", ">", "0", ")", "?", "(", "a", "-", "2", "*", "b", ")", ":", "0", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 1479, "code": "int N = 750;\nint[] A = {111, 222, 333, 444, 555, 666, 777, 888, 999};\nint index = Arrays.binarySearch(A, N);if (index < 0) {index = -index - 1; // Convert to insertion point}System.out.println(A[index]);", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "int", "[", "]", "A", "=", "{", "111", ",", "222", ",", "333", ",", "444", ",", "555", ",", "666", ",", "777", ",", "888", ",", "999", "}", ";", "<2>", "int", "index", "=", "Arrays", ".", "binarySearch", "(", "A", ",", "N", ")", ";", "if", "(", "index", "<", "0", ")", "{", "index", "=", "-", "index", "-", "1", ";", "// Convert to insertion point}System.out.println(A[index]);"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "750"]]}, {"line": 2, "state": [["N", "750"], ["A", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"]]}, {"line": 3, "state": [["N", "750"], ["A", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]]}}
{"id": 19417, "code": "int a = 10;\nif (a % 2 == 0) {\nSystem.out.println(a);}\nelse {\nSystem.out.println(a * 2);}", "code_tokens": ["<0>", "int", "a", "=", "10", ";", "<1>", "if", "(", "a", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "a", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "a", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "10"]]}, {"line": 1, "state": [["a", "10"]]}, {"line": 2, "state": [["a", "10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3116, "code": "String S = \"1234567876\";\nint n = S.length();\nint res = 1000000;\nfor (int i = 0; i < n - 2; i++) {\nint s = Integer.parseInt(S.substring(i, i + 3));\nres = Math.min(res, Math.abs(s - 753));}\nSystem.out.println(res);", "code_tokens": ["<0>", "String", "S", "=", "\"1234567876\"", ";", "<1>", "int", "n", "=", "S", ".", "length", "(", ")", ";", "<2>", "int", "res", "=", "1000000", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "2", ";", "i", "++", ")", "{", "<4>", "int", "s", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<5>", "res", "=", "Math", ".", "min", "(", "res", ",", "Math", ".", "abs", "(", "s", "-", "753", ")", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["S", "1234567876"]]}, {"line": 1, "state": [["S", "1234567876"], ["n", "10"]]}, {"line": 2, "state": [["S", "1234567876"], ["n", "10"], ["res", "1000000"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "1000000"], ["i", "0"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "1000000"], ["i", "0"], ["s", "123"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "630"], ["i", "0"], ["s", "123"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "630"], ["i", "1"], ["s", "123"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "630"], ["i", "1"], ["s", "234"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "519"], ["i", "1"], ["s", "234"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "519"], ["i", "2"], ["s", "234"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "519"], ["i", "2"], ["s", "345"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "408"], ["i", "2"], ["s", "345"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "408"], ["i", "3"], ["s", "345"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "408"], ["i", "3"], ["s", "456"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "297"], ["i", "3"], ["s", "456"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "297"], ["i", "4"], ["s", "456"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "297"], ["i", "4"], ["s", "567"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "186"], ["i", "4"], ["s", "567"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "186"], ["i", "5"], ["s", "567"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "186"], ["i", "5"], ["s", "678"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "75"], ["i", "5"], ["s", "678"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "75"], ["i", "6"], ["s", "678"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "75"], ["i", "6"], ["s", "787"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "34"], ["i", "6"], ["s", "787"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "34"], ["i", "7"], ["s", "787"]]}, {"line": 4, "state": [["S", "1234567876"], ["n", "10"], ["res", "34"], ["i", "7"], ["s", "876"]]}, {"line": 5, "state": [["S", "1234567876"], ["n", "10"], ["res", "34"], ["i", "7"], ["s", "876"]]}, {"line": 3, "state": [["S", "1234567876"], ["n", "10"], ["res", "34"], ["i", "7"], ["s", "876"]]}, {"line": 6, "state": [["S", "1234567876"], ["n", "10"], ["res", "34"], ["i", "7"], ["s", "876"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 5410, "code": "class Main {public static void main(String[] args) {\nint x = Integer.parseInt(\"5\");\nSystem.out.println(ceil(x / 2.0));", "code_tokens": ["<0>", "class", "Main", "{", "public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "{", "<1>", "int", "x", "=", "Integer", ".", "parseInt", "(", "\"5\"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ceil", "(", "x", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": [["pi", "3.14"], ["e", "2.72"], ["tau", "6.28"], ["inf", "inf"], ["nan", "nan"]]}, {"line": 1, "state": [["pi", "3.14"], ["e", "2.72"], ["tau", "6.28"], ["inf", "inf"], ["nan", "nan"], ["x", "5"]]}, {"line": 2, "state": [["pi", "3.14"], ["e", "2.72"], ["tau", "6.28"], ["inf", "inf"], ["nan", "nan"], ["x", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 3245, "code": "int a = 20, b = 30;\nif (a <= 2 * b) {\nint x = 0;\nSystem.out.println(x);} else {\nint x = a - 2 * b;\nSystem.out.println(x);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<1>", "if", "(", "a", "<=", "2", "*", "b", ")", "{", "<2>", "int", "x", "=", "0", ";", "<3>", "System", ".", "out", ".", "println", "(", "x", ")", ";", "}", "else", "{", "<4>", "int", "x", "=", "a", "-", "2", "*", "b", ";", "<5>", "System", ".", "out", ".", "println", "(", "x", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"], ["x", "0"]]}, {"line": 5, "state": [["a", "20"], ["b", "30"], ["x", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "5": [[5, 2]]}}
{"id": 13921, "code": "int n = 9;\nint[] a = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint state = 100;\nint count = 1;\nint tmp = a[0];\nfor (int i : a) {\nif (i == tmp) {\n}\nelse if (i > tmp) {\nif (state == 1) {\n}\nelse if (state == 0) {\ncount += 1;\nstate = 100;}\nelse {\nstate = 1;}}\nelse {\nif (state == 0) {\n}\nelse if (state == 1) {\ncount += 1;\nstate = 100;}\nelse {\nstate = 0;}}\ntmp = i;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "n", "=", "9", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "state", "=", "100", ";", "<3>", "int", "count", "=", "1", ";", "<4>", "int", "tmp", "=", "a", "[", "0", "]", ";", "<5>", "for", "(", "int", "i", ":", "a", ")", "{", "<6>", "if", "(", "i", "==", "tmp", ")", "{", "<7>", "}", "<8>", "else", "if", "(", "i", ">", "tmp", ")", "{", "<9>", "if", "(", "state", "==", "1", ")", "{", "<10>", "}", "<11>", "else", "if", "(", "state", "==", "0", ")", "{", "<12>", "count", "+=", "1", ";", "<13>", "state", "=", "100", ";", "}", "<14>", "else", "{", "<15>", "state", "=", "1", ";", "}", "}", "<16>", "else", "{", "<17>", "if", "(", "state", "==", "0", ")", "{", "<18>", "}", "<19>", "else", "if", "(", "state", "==", "1", ")", "{", "<20>", "count", "+=", "1", ";", "<21>", "state", "=", "100", ";", "}", "<22>", "else", "{", "<23>", "state", "=", "0", ";", "}", "}", "<24>", "tmp", "=", "i", ";", "}", "<25>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "9"]]}, {"line": 1, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"]]}, {"line": 3, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 15, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "1"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "1"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "1"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 21, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "1"], ["i", "2"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "1"], ["i", "2"]]}, {"line": 15, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "1"], ["i", "2"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 21, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "1"], ["i", "2"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "3"], ["tmp", "1"], ["i", "2"]]}, {"line": 15, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "1"], ["i", "2"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "3"], ["tmp", "2"], ["i", "1"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 21, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "1"], ["i", "2"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "4"], ["tmp", "1"], ["i", "2"]]}, {"line": 15, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "1"], ["i", "2"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 17, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "4"], ["tmp", "2"], ["i", "1"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "1"], ["count", "5"], ["tmp", "2"], ["i", "1"]]}, {"line": 21, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "5"], ["tmp", "2"], ["i", "1"]]}, {"line": 24, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "5"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "5"], ["tmp", "1"], ["i", "1"]]}, {"line": 25, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["state", "100"], ["count", "5"], ["tmp", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 4, 1], [5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "6": [[6, 5, 4, 1], [6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "7": [[7]], "8": [[8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "9": [[9, 2], [9, 21, 19, 17, 15, 11, 9, 2], [9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2]], "11": [[11, 9, 2], [11, 9, 21, 19, 17, 15, 11, 9, 2], [11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2]], "15": [[15, 11, 9, 2], [15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2]], "17": [[17, 15, 11, 9, 2], [17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2]], "19": [[19, 17, 15, 11, 9, 2], [19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2]], "20": [[20, 3], [20, 3], [20, 3], [20, 3]], "21": [[21, 19, 17, 15, 11, 9, 2], [21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2], [21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 21, 19, 17, 15, 11, 9, 2]], "24": [[24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "25": [[25, 20, 3]]}}
{"id": 4661, "code": "String s = \"smiles\";\nint char_number = s.length();\nchar start = s.charAt(0);\nchar end = s.charAt(s.length() - 1);\nString answer = start + Integer.toString(char_number - 2) + end;\nSystem.out.println(answer);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "char_number", "=", "s", ".", "length", "(", ")", ";", "<2>", "char", "start", "=", "s", ".", "charAt", "(", "0", ")", ";", "<3>", "char", "end", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<4>", "String", "answer", "=", "start", "+", "Integer", ".", "toString", "(", "char_number", "-", "2", ")", "+", "end", ";", "<5>", "System", ".", "out", ".", "println", "(", "answer", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["char_number", "6"]]}, {"line": 2, "state": [["s", "smiles"], ["char_number", "6"], ["start", "s"]]}, {"line": 3, "state": [["s", "smiles"], ["char_number", "6"], ["start", "s"], ["end", "s"]]}, {"line": 4, "state": [["s", "smiles"], ["char_number", "6"], ["start", "s"], ["end", "s"], ["answer", "s4s"]]}, {"line": 5, "state": [["s", "smiles"], ["char_number", "6"], ["start", "s"], ["end", "s"], ["answer", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 11410, "code": "String s = \"SAT\";\nString[] l = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint[] d = {7, 6, 5, 4, 3, 2, 1};\nSystem.out.println(d[getIndex(l, s)]);", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "l", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "[", "]", "d", "=", "{", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", "}", ";", "<3>", "System", ".", "out", ".", "println", "(", "d", "[", "getIndex", "(", "l", ",", "s", ")", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["l", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["s", "SAT"], ["l", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["d", "[ 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"]]}, {"line": 3, "state": [["s", "SAT"], ["l", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["d", "[ 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]]}}
{"id": 2561, "code": "int a = 4, b = 9, c = 0, d = 8;\njava.util.Set<Integer> set1 = new java.util.HashSet<>();set1.add(1);set1.add(9);set1.add(7);set1.add(4);java.util.Set<Integer> set2 = new java.util.HashSet<>();set2.add(a);set2.add(b);set2.add(c);set2.add(d);System.out.println(set1.equals(set2) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "int", "a", "=", "4", ",", "b", "=", "9", ",", "c", "=", "0", ",", "d", "=", "8", ";", "<1>", "java", ".", "util", ".", "Set", "<", "Integer", ">", "set1", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "set1", ".", "add", "(", "1", ")", ";", "set1", ".", "add", "(", "9", ")", ";", "set1", ".", "add", "(", "7", ")", ";", "set1", ".", "add", "(", "4", ")", ";", "java", ".", "util", ".", "Set", "<", "Integer", ">", "set2", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "set2", ".", "add", "(", "a", ")", ";", "set2", ".", "add", "(", "b", ")", ";", "set2", ".", "add", "(", "c", ")", ";", "set2", ".", "add", "(", "d", ")", ";", "System", ".", "out", ".", "println", "(", "set1", ".", "equals", "(", "set2", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "4"], ["b", "9"], ["c", "0"], ["d", "8"]]}, {"line": 1, "state": [["a", "4"], ["b", "9"], ["c", "0"], ["d", "8"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18633, "code": "int h = 14;\nint w = 12;\nint n = 112;\nint p = Math.max(h, w);\nSystem.out.println(n / p + (n % p != 0 ? 1 : 0));", "code_tokens": ["<0>", "int", "h", "=", "14", ";", "<1>", "int", "w", "=", "12", ";", "<2>", "int", "n", "=", "112", ";", "<3>", "int", "p", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "p", "+", "(", "n", "%", "p", "!=", "0", "?", "1", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["h", "14"]]}, {"line": 1, "state": [["h", "14"], ["w", "12"]]}, {"line": 2, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 3, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["p", "14"]]}, {"line": 4, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["p", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 4175, "code": "int h1 = 10, m1 = 0, h2 = 12, m2 = 0, k = 120;\nint s = h1 * 60 + m1;\nint e = h2 * 60 + m2;\nSystem.out.println(e - k - s);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "12", ",", "m2", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "s", "=", "h1", "*", "60", "+", "m1", ";", "<2>", "int", "e", "=", "h2", "*", "60", "+", "m2", ";", "<3>", "System", ".", "out", ".", "println", "(", "e", "-", "k", "-", "s", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"], ["e", "720"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"], ["e", "720"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 14418, "code": "int n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nboolean up = false;\nboolean down = false;\nint ans = 1;\nfor (int i = 1; i < n; i++) {\nif (up) {\nif (a[i] < a[i - 1]) {\nans += 1;\nup = false;}\n} else if (down) {\nif (a[i] > a[i - 1]) {\nans += 1;\ndown = false;}\n} else {\nif (a[i] > a[i - 1]) {\nup = true;\n} else if (a[i] < a[i - 1]) {\ndown = true;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "boolean", "up", "=", "false", ";", "<3>", "boolean", "down", "=", "false", ";", "<4>", "int", "ans", "=", "1", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "if", "(", "up", ")", "{", "<7>", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "-", "1", "]", ")", "{", "<8>", "ans", "+=", "1", ";", "<9>", "up", "=", "false", ";", "}", "<10>", "}", "else", "if", "(", "down", ")", "{", "<11>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "-", "1", "]", ")", "{", "<12>", "ans", "+=", "1", ";", "<13>", "down", "=", "false", ";", "}", "<14>", "}", "else", "{", "<15>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "-", "1", "]", ")", "{", "<16>", "up", "=", "true", ";", "<17>", "}", "else", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "-", "1", "]", ")", "{", "<18>", "down", "=", "true", ";", "}", "}", "}", "<19>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 15, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 16, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "True"], ["down", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 15, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 17, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "5"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "5"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "5"]]}, {"line": 15, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "5"]]}, {"line": 17, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "5"]]}, {"line": 18, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 15, 5, 0], [5, 7, 5, 15, 5, 0], [5, 7, 5, 7, 5, 15, 5, 0], [5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0], [5, 17, 15, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "6": [[6, 2], [6, 16, 6, 2], [6, 16, 6, 2], [6, 9, 6, 16, 6, 2], [6, 9, 6, 16, 6, 2]], "7": [[7, 5, 15, 5, 0], [7, 5, 7, 5, 15, 5, 0]], "8": [[8, 4]], "9": [[9, 6, 16, 6, 2]], "10": [[10, 3], [10, 3], [10, 3]], "15": [[15, 5, 0], [15, 5, 7, 5, 7, 5, 15, 5, 0], [15, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "16": [[16, 6, 2]], "17": [[17, 15, 5, 7, 5, 7, 5, 15, 5, 0], [17, 15, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "18": [[18, 10, 3]], "19": [[19, 8, 4]]}}
{"id": 12383, "code": "String S = \"level\";\nboolean flag = true;\nint N = S.length();\nfor (int i = 0; i < N / 2; i++) {\nif (S.charAt(i) != S.charAt(N - 1 - i)) {\nflag = false;}}\nfor (int i = 0; i < (N - 1) / 2 - 1; i++) {\nif (S.charAt(i) != S.charAt((N - 1) / 2 - 1 - i)) {\nflag = false;}}\nfor (int i = (N + 3) / 2; i < N - 1; i++) {\nif (S.charAt(i) != S.charAt(N - 1 - i)) {\nflag = false;}}\nif (flag) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "S", "=", "\"level\"", ";", "<1>", "boolean", "flag", "=", "true", ";", "<2>", "int", "N", "=", "S", ".", "length", "(", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "/", "2", ";", "i", "++", ")", "{", "<4>", "if", "(", "S", ".", "charAt", "(", "i", ")", "!=", "S", ".", "charAt", "(", "N", "-", "1", "-", "i", ")", ")", "{", "<5>", "flag", "=", "false", ";", "}", "}", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "(", "N", "-", "1", ")", "/", "2", "-", "1", ";", "i", "++", ")", "{", "<7>", "if", "(", "S", ".", "charAt", "(", "i", ")", "!=", "S", ".", "charAt", "(", "(", "N", "-", "1", ")", "/", "2", "-", "1", "-", "i", ")", ")", "{", "<8>", "flag", "=", "false", ";", "}", "}", "<9>", "for", "(", "int", "i", "=", "(", "N", "+", "3", ")", "/", "2", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<10>", "if", "(", "S", ".", "charAt", "(", "i", ")", "!=", "S", ".", "charAt", "(", "N", "-", "1", "-", "i", ")", ")", "{", "<11>", "flag", "=", "false", ";", "}", "}", "<12>", "if", "(", "flag", ")", "{", "<13>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<14>", "else", "{", "<15>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "level"]]}, {"line": 1, "state": [["S", "level"], ["flag", "True"]]}, {"line": 2, "state": [["S", "level"], ["flag", "True"], ["N", "5"]]}, {"line": 3, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "0"]]}, {"line": 4, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "0"]]}, {"line": 3, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "1"]]}, {"line": 4, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "1"]]}, {"line": 3, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "1"]]}, {"line": 6, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "0"]]}, {"line": 7, "state": [["S", "level"], ["flag", "True"], ["N", "5"], ["i", "0"]]}, {"line": 8, "state": [["S", "level"], ["flag", "False"], ["N", "5"], ["i", "0"]]}, {"line": 6, "state": [["S", "level"], ["flag", "False"], ["N", "5"], ["i", "0"]]}, {"line": 9, "state": [["S", "level"], ["flag", "False"], ["N", "5"], ["i", "0"]]}, {"line": 12, "state": [["S", "level"], ["flag", "False"], ["N", "5"], ["i", "0"]]}, {"line": 15, "state": [["S", "level"], ["flag", "False"], ["N", "5"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 4, 3, 2, 0], [3, 4, 3, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 4, 3, 2, 0]], "6": [[6, 3, 4, 3, 4, 3, 2, 0], [6, 7, 6, 3, 4, 3, 4, 3, 2, 0]], "7": [[7, 6, 3, 4, 3, 4, 3, 2, 0]], "8": [[8, 1]], "9": [[9, 6, 7, 6, 3, 4, 3, 4, 3, 2, 0]], "12": [[12, 8, 1]], "15": [[15]]}}
{"id": 13420, "code": "String s = \"abcde,fghihgf,edcba\";\ns = s.replace(\",\", \" \");\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "s", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "s", "=", "s", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["s", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["s", "abcde fghihgf edcba"]]}, {"line": 2, "state": [["s", "abcde fghihgf edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 17740, "code": "String s = \"0112\";\nif (0 < Integer.parseInt(s.substring(0, 2)) && Integer.parseInt(s.substring(0, 2)) <= 12) {\nif (0 < Integer.parseInt(s.substring(2)) && Integer.parseInt(s.substring(2)) <= 12) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse {\nif (0 < Integer.parseInt(s.substring(2)) && Integer.parseInt(s.substring(2)) <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "s", "=", "\"0112\"", ";", "<1>", "if", "(", "0", "<", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ")", "<=", "12", ")", "{", "<2>", "if", "(", "0", "<", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "<=", "12", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "0", "<", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "<=", "12", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["s", "0112"]]}, {"line": 1, "state": [["s", "0112"]]}, {"line": 2, "state": [["s", "0112"]]}, {"line": 3, "state": [["s", "0112"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 5389, "code": "double n = 2.51;\nSystem.out.println((int) Math.round(n));", "code_tokens": ["<0>", "double", "n", "=", "2.51", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "round", "(", "n", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "2.51"]]}, {"line": 1, "state": [["n", "2.51"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4820, "code": "String s = \"smiles\";\nchar f = s.charAt(0);\nchar e = s.charAt(s.length() - 1);\nSystem.out.println(f + String.valueOf(s.length() - 2) + e);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "char", "f", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "e", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "f", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "e", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["f", "s"]]}, {"line": 2, "state": [["s", "smiles"], ["f", "s"], ["e", "s"]]}, {"line": 3, "state": [["s", "smiles"], ["f", "s"], ["e", "s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 15257, "code": "int x = 12, y = 3, z = 1;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1704, "code": "int a = 10, b = 7, c = 5;\nSystem.out.println(Math.min(b, c) + \" \" + Math.max((b + c) - a, 0));", "code_tokens": ["<0>", "int", "a", "=", "10", ",", "b", "=", "7", ",", "c", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "b", ",", "c", ")", "+", "\" \"", "+", "Math", ".", "max", "(", "(", "b", "+", "c", ")", "-", "a", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "10"], ["b", "7"], ["c", "5"]]}, {"line": 1, "state": [["a", "10"], ["b", "7"], ["c", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9000, "code": "int a = 1;\nint b = 2;\nint c = 4;\nint d = 8;\nint e = 9;\nint k = 15;\nint[] List = {a, b, c, d, e};\nfor (int i = 0; i < List.length; i++) {\nfor (int j = i + 1; j < List.length; j++) {\nif (List[j] - List[i] > k) {\nSystem.out.println(\":(\");\nSystem.exit(0);}}}\nSystem.out.println(\"Yay!\");", "code_tokens": ["<0>", "int", "a", "=", "1", ";", "<1>", "int", "b", "=", "2", ";", "<2>", "int", "c", "=", "4", ";", "<3>", "int", "d", "=", "8", ";", "<4>", "int", "e", "=", "9", ";", "<5>", "int", "k", "=", "15", ";", "<6>", "int", "[", "]", "List", "=", "{", "a", ",", "b", ",", "c", ",", "d", ",", "e", "}", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "List", ".", "length", ";", "i", "++", ")", "{", "<8>", "for", "(", "int", "j", "=", "i", "+", "1", ";", "j", "<", "List", ".", "length", ";", "j", "++", ")", "{", "<9>", "if", "(", "List", "[", "j", "]", "-", "List", "[", "i", "]", ">", "k", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<11>", "System", ".", "exit", "(", "0", ")", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "2"]]}, {"line": 2, "state": [["a", "1"], ["b", "2"], ["c", "4"]]}, {"line": 3, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"]]}, {"line": 4, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"]]}, {"line": 5, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 6, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "1"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "1"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "2"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "2"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "3"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "3"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "4"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "0"], ["j", "4"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "2"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "2"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "3"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "3"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "4"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "1"], ["j", "4"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "2"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "2"], ["j", "3"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "2"], ["j", "3"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "2"], ["j", "4"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "2"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "2"], ["j", "4"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "3"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "3"], ["j", "4"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "3"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "3"], ["j", "4"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "4"], ["j", "4"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "4"], ["j", "4"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "4"], ["j", "4"]]}, {"line": 12, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["List", "[ 1 , 2 , 4 , 8 , 9 ]"], ["i", "4"], ["j", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 4, 3, 2, 1, 0]], "7": [[7, 6, 4, 3, 2, 1, 0], [7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [7, 8, 9, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [7, 8, 7, 8, 9, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0]], "8": [[8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 9, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [8, 7, 8, 9, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0]], "9": [[9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 1, 0]], "12": [[12]]}}
{"id": 15546, "code": "int x = 64146, y = 123, z = 456;\nx -= 2 * z;\nSystem.out.println(x / (y + z) + x % (y + z) / y);", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "x", "-=", "2", "*", "z", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", "+", "x", "%", "(", "y", "+", "z", ")", "/", "y", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "63234"], ["y", "123"], ["z", "456"]]}, {"line": 2, "state": [["x", "63234"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5729, "code": "int N = 2;\nif (N % 2 == 0) {\nSystem.out.println((int) Math.floor(N / 2));} else {\nSystem.out.println((int) Math.floor(N / 2) + 1);}", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "floor", "(", "N", "/", "2", ")", ")", ";", "}", "else", "{", "<3>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "floor", "(", "N", "/", "2", ")", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"]]}, {"line": 3, "state": [["N", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 15623, "code": "int x = 13, y = 3, z = 1;\nx -= z;\nint c = 0;\nwhile (x - (y + z) >= 0) {\nx -= y + z;\nc += 1;}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "x", "-=", "z", ";", "<2>", "int", "c", "=", "0", ";", "<3>", "while", "(", "x", "-", "(", "y", "+", "z", ")", ">=", "0", ")", "{", "<4>", "x", "-=", "y", "+", "z", ";", "<5>", "c", "+=", "1", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["c", "0"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["c", "0"]]}, {"line": 4, "state": [["x", "8"], ["y", "3"], ["z", "1"], ["c", "0"]]}, {"line": 5, "state": [["x", "8"], ["y", "3"], ["z", "1"], ["c", "1"]]}, {"line": 3, "state": [["x", "8"], ["y", "3"], ["z", "1"], ["c", "1"]]}, {"line": 4, "state": [["x", "4"], ["y", "3"], ["z", "1"], ["c", "1"]]}, {"line": 5, "state": [["x", "4"], ["y", "3"], ["z", "1"], ["c", "2"]]}, {"line": 3, "state": [["x", "4"], ["y", "3"], ["z", "1"], ["c", "2"]]}, {"line": 4, "state": [["x", "0"], ["y", "3"], ["z", "1"], ["c", "2"]]}, {"line": 5, "state": [["x", "0"], ["y", "3"], ["z", "1"], ["c", "3"]]}, {"line": 3, "state": [["x", "0"], ["y", "3"], ["z", "1"], ["c", "3"]]}, {"line": 6, "state": [["x", "0"], ["y", "3"], ["z", "1"], ["c", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 2], [5, 2], [5, 2]], "6": [[6, 5, 2]]}}
{"id": 5826, "code": "int n = 100;\nint a = (n % 2 == 0) ? (n / 2) : (n / 2) + 1;\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "int", "a", "=", "(", "n", "%", "2", "==", "0", ")", "?", "(", "n", "/", "2", ")", ":", "(", "n", "/", "2", ")", "+", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "50"]]}, {"line": 2, "state": [["n", "100"], ["a", "50"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4782, "code": "String s = \"xyz\";\nint l = s.length();\nSystem.out.println(s.charAt(0) + String.valueOf(l - 2) + s.charAt(l - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "l", "=", "s", ".", "length", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "l", "-", "2", ")", "+", "s", ".", "charAt", "(", "l", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["l", "3"]]}, {"line": 2, "state": [["s", "xyz"], ["l", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 895, "code": "int K = 2;\nint a = 0;\nfor (int i = 0; i < K; i++) {\na = (10 * a + 7) % K;\nif (a % K == 0) {\nSystem.out.println(i + 1);\nSystem.exit(0);}\nelse {\na %= K;}}\nSystem.out.println(-1);", "code_tokens": ["<0>", "int", "K", "=", "2", ";", "<1>", "int", "a", "=", "0", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "K", ";", "i", "++", ")", "{", "<3>", "a", "=", "(", "10", "*", "a", "+", "7", ")", "%", "K", ";", "<4>", "if", "(", "a", "%", "K", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "i", "+", "1", ")", ";", "<6>", "System", ".", "exit", "(", "0", ")", ";", "}", "<7>", "else", "{", "<8>", "a", "%=", "K", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";"], "trace": [{"line": 0, "state": [["K", "2"]]}, {"line": 1, "state": [["K", "2"], ["a", "0"]]}, {"line": 2, "state": [["K", "2"], ["a", "0"], ["i", "0"]]}, {"line": 3, "state": [["K", "2"], ["a", "1"], ["i", "0"]]}, {"line": 4, "state": [["K", "2"], ["a", "1"], ["i", "0"]]}, {"line": 8, "state": [["K", "2"], ["a", "1"], ["i", "0"]]}, {"line": 2, "state": [["K", "2"], ["a", "1"], ["i", "1"]]}, {"line": 3, "state": [["K", "2"], ["a", "1"], ["i", "1"]]}, {"line": 4, "state": [["K", "2"], ["a", "1"], ["i", "1"]]}, {"line": 8, "state": [["K", "2"], ["a", "1"], ["i", "1"]]}, {"line": 2, "state": [["K", "2"], ["a", "1"], ["i", "1"]]}, {"line": 9, "state": [["K", "2"], ["a", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 0], [2, 0]], "3": [[3, 2, 0], [3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 0]], "8": [[8, 4, 3, 2, 0], [8, 4, 3, 2, 0]], "9": [[9]]}}
{"id": 5880, "code": "int N = 100;\nSystem.out.println(-(-N / 2));", "code_tokens": ["<0>", "int", "N", "=", "100", ";", "<1>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "N", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"]]}, {"line": 1, "state": [["N", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9291, "code": "String s = \"2017/01/31\";\nchar[] sArray = s.toCharArray();\nsArray[3] = '8';\nSystem.out.print(String.valueOf(sArray));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "char", "[", "]", "sArray", "=", "s", ".", "toCharArray", "(", ")", ";", "<2>", "sArray", "[", "3", "]", "=", "'8'", ";", "<3>", "System", ".", "out", ".", "print", "(", "String", ".", "valueOf", "(", "sArray", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "[ 2 , 0 , 1 , 7 , / , 0 , 1 , / , 3 , 1 ]"]]}, {"line": 2, "state": [["s", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 3 , 1 ]"]]}, {"line": 3, "state": [["s", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 3 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 12645, "code": "int x = 6;\nint[] li = {3, 5, 7};\nboolean found = false;for (int num : li) {if (num == x) {\nSystem.out.println(\"YES\");found = true;break;}}\nif (!found) {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "x", "=", "6", ";", "<1>", "int", "[", "]", "li", "=", "{", "3", ",", "5", ",", "7", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "int", "num", ":", "li", ")", "{", "if", "(", "num", "==", "x", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "found", "=", "true", ";", "break", ";", "}", "}", "<4>", "if", "(", "!", "found", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "6"]]}, {"line": 1, "state": [["x", "6"], ["li", "[ 3 , 5 , 7 ]"]]}, {"line": 2, "state": [["x", "6"], ["li", "[ 3 , 5 , 7 ]"]]}, {"line": 5, "state": [["x", "6"], ["li", "[ 3 , 5 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 15289, "code": "int x = 13, y = 3, z = 1;\nx -= (y + 2 * z);\nint c = 1;\nc += x / (y + z);\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "x", "-=", "(", "y", "+", "2", "*", "z", ")", ";", "<2>", "int", "c", "=", "1", ";", "<3>", "c", "+=", "x", "/", "(", "y", "+", "z", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "8"], ["y", "3"], ["z", "1"]]}, {"line": 2, "state": [["x", "8"], ["y", "3"], ["z", "1"], ["c", "1"]]}, {"line": 3, "state": [["x", "8"], ["y", "3"], ["z", "1"], ["c", "3"]]}, {"line": 4, "state": [["x", "8"], ["y", "3"], ["z", "1"], ["c", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 18194, "code": "int n = 6;\nMap<Integer, Integer> L_dict = new HashMap<>();Map<Integer, Integer> R_dict = new HashMap<>();\nint i = 0;\nfor (String ipt : \"2 3 3 1 3 1\".split(\" \")) {\nL_dict.put(i + Integer.parseInt(ipt), L_dict.getOrDefault(i + Integer.parseInt(ipt), 0) + 1);\nR_dict.put(i - Integer.parseInt(ipt), R_dict.getOrDefault(i - Integer.parseInt(ipt), 0) + 1);\ni++;}\nint cnt = 0;\nfor (Map.Entry<Integer, Integer> entry : L_dict.entrySet()) {int Lk = entry.getKey();int Lv = entry.getValue();\ntry {\ncnt += R_dict.get(Lk) * Lv;\n} catch (NullPointerException e) {\n}}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "Map", "<", "Integer", ",", "Integer", ">", "L_dict", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Map", "<", "Integer", ",", "Integer", ">", "R_dict", "=", "new", "HashMap", "<", ">", "(", ")", ";", "<2>", "int", "i", "=", "0", ";", "<3>", "for", "(", "String", "ipt", ":", "\"2 3 3 1 3 1\"", ".", "split", "(", "\" \"", ")", ")", "{", "<4>", "L_dict", ".", "put", "(", "i", "+", "Integer", ".", "parseInt", "(", "ipt", ")", ",", "L_dict", ".", "getOrDefault", "(", "i", "+", "Integer", ".", "parseInt", "(", "ipt", ")", ",", "0", ")", "+", "1", ")", ";", "<5>", "R_dict", ".", "put", "(", "i", "-", "Integer", ".", "parseInt", "(", "ipt", ")", ",", "R_dict", ".", "getOrDefault", "(", "i", "-", "Integer", ".", "parseInt", "(", "ipt", ")", ",", "0", ")", "+", "1", ")", ";", "<6>", "i", "++", ";", "}", "<7>", "int", "cnt", "=", "0", ";", "<8>", "for", "(", "Map", ".", "Entry", "<", "Integer", ",", "Integer", ">", "entry", ":", "L_dict", ".", "entrySet", "(", ")", ")", "{", "int", "Lk", "=", "entry", ".", "getKey", "(", ")", ";", "int", "Lv", "=", "entry", ".", "getValue", "(", ")", ";", "<9>", "try", "{", "<10>", "cnt", "+=", "R_dict", ".", "get", "(", "Lk", ")", "*", "Lv", ";", "<11>", "}", "catch", "(", "NullPointerException", "e", ")", "{", "<12>", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "6"]]}, {"line": 2, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { } )"], ["R_dict", "defaultdict(<class int> , { } )"]]}, {"line": 3, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { } )"], ["R_dict", "defaultdict(<class int> , { } )"], ["i", "0"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { } )"], ["R_dict", "defaultdict(<class int> , { } )"], ["i", "0"], ["ipt", "2"]]}, {"line": 5, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { } )"], ["i", "0"], ["ipt", "2"]]}, {"line": 6, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "0"], ["ipt", "2"]]}, {"line": 7, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "1"], ["ipt", "2"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "1"], ["ipt", "3"]]}, {"line": 5, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "1"], ["ipt", "3"]]}, {"line": 6, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "1"], ["ipt", "3"]]}, {"line": 7, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "2"], ["ipt", "3"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "2"], ["ipt", "3"]]}, {"line": 5, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "2"], ["ipt", "3"]]}, {"line": 6, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "2"], ["ipt", "3"]]}, {"line": 7, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "3"], ["ipt", "3"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "3"], ["ipt", "1"]]}, {"line": 5, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "3"], ["ipt", "1"]]}, {"line": 6, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "3"], ["ipt", "1"]]}, {"line": 7, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "4"], ["ipt", "1"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "4"], ["ipt", "3"]]}, {"line": 5, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "4"], ["ipt", "3"]]}, {"line": 6, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "4"], ["ipt", "3"]]}, {"line": 7, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "5"], ["ipt", "3"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "5"], ["ipt", "1"]]}, {"line": 5, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "5"], ["ipt", "1"]]}, {"line": 6, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "5"], ["ipt", "1"]]}, {"line": 7, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"]]}, {"line": 4, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"]]}, {"line": 8, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "0"]]}, {"line": 9, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "0"], ["Lk", "2"], ["Lv", "1"]]}, {"line": 10, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "0"], ["Lk", "2"], ["Lv", "1"]]}, {"line": 11, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "1"], ["Lk", "2"], ["Lv", "1"]]}, {"line": 9, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "1"], ["Lk", "4"], ["Lv", "2"]]}, {"line": 10, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "1"], ["Lk", "4"], ["Lv", "2"]]}, {"line": 11, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "4"], ["Lv", "2"]]}, {"line": 9, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "5"], ["Lv", "1"]]}, {"line": 10, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "5"], ["Lv", "1"]]}, {"line": 11, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "5"], ["Lv", "1"]]}, {"line": 9, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "7"], ["Lv", "1"]]}, {"line": 10, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "7"], ["Lv", "1"]]}, {"line": 11, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "7"], ["Lv", "1"]]}, {"line": 9, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "6"], ["Lv", "1"]]}, {"line": 10, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "6"], ["Lv", "1"]]}, {"line": 11, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "6"], ["Lv", "1"]]}, {"line": 9, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "6"], ["Lv", "1"]]}, {"line": 14, "state": [["n", "6"], ["L_dict", "defaultdict(<class int> , { 2"], ["R_dict", "defaultdict(<class int> , { -2"], ["i", "6"], ["ipt", "1"], ["cnt", "3"], ["Lk", "6"], ["Lv", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4], [4, 6, 5, 4], [4, 6, 5, 4, 6, 5, 4], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]], "5": [[5, 4], [5, 4, 6, 5, 4], [5, 4, 6, 5, 4, 6, 5, 4], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]], "6": [[6, 5, 4], [6, 5, 4, 6, 5, 4], [6, 5, 4, 6, 5, 4, 6, 5, 4], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]], "7": [[7, 6, 5, 4], [7, 6, 5, 4, 6, 5, 4], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]], "8": [[8]], "9": [[9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [9, 11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [9, 11, 9, 11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [9, 11, 9, 11, 9, 11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]], "10": [[10], [10], [10], [10], [10]], "11": [[11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [11, 9, 11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4], [11, 9, 11, 9, 11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]], "14": [[14, 11, 9, 11, 9, 11, 9, 11, 9, 11, 9, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4]]}}
{"id": 8145, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nint ans = 0;\nint i = 0;\nwhile (true) {\nif (i * (K - 1) >= N - 1) {\nbreak;}\nans += 1;\ni += 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "int", "ans", "=", "0", ";", "<3>", "int", "i", "=", "0", ";", "<4>", "while", "(", "true", ")", "{", "<5>", "if", "(", "i", "*", "(", "K", "-", "1", ")", ">=", "N", "-", "1", ")", "{", "<6>", "break", ";", "}", "<7>", "ans", "+=", "1", ";", "<8>", "i", "+=", "1", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"], ["K", "3"]]}, {"line": 1, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "0"]]}, {"line": 3, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 4, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["i", "0"]]}, {"line": 8, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["i", "1"]]}, {"line": 6, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["i", "1"]]}, {"line": 9, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 3, 0], [5, 8, 5, 3, 0]], "6": [[6]], "7": [[7, 2]], "8": [[8, 5, 3, 0]], "9": [[9, 7, 2]]}}
{"id": 66, "code": "String s = \"xyz\";\nint K = 4;\nString rlt = \"\";\nfor (int i = 0; i < s.length() - 1; i++) {\nint c = (26 - (s.charAt(i) - 'a')) % 26;\nif (K >= c) {\nrlt += 'a';\nK -= c;}\nelse {\nrlt += s.charAt(i);}}\nrlt += (char) ((K + (s.charAt(s.length() - 1) - 'a')) % 26 + 'a');\nSystem.out.println(rlt);", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "K", "=", "4", ";", "<2>", "String", "rlt", "=", "\"\"", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "1", ";", "i", "++", ")", "{", "<4>", "int", "c", "=", "(", "26", "-", "(", "s", ".", "charAt", "(", "i", ")", "-", "'a'", ")", ")", "%", "26", ";", "<5>", "if", "(", "K", ">=", "c", ")", "{", "<6>", "rlt", "+=", "'a'", ";", "<7>", "K", "-=", "c", ";", "}", "<8>", "else", "{", "<9>", "rlt", "+=", "s", ".", "charAt", "(", "i", ")", ";", "}", "}", "<10>", "rlt", "+=", "(", "char", ")", "(", "(", "K", "+", "(", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", "-", "'a'", ")", ")", "%", "26", "+", "'a'", ")", ";", "<11>", "System", ".", "out", ".", "println", "(", "rlt", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["K", "4"]]}, {"line": 2, "state": [["s", "xyz"], ["K", "4"], ["rlt", ""]]}, {"line": 3, "state": [["s", "xyz"], ["K", "4"], ["rlt", ""], ["i", "0"]]}, {"line": 4, "state": [["s", "xyz"], ["K", "4"], ["rlt", ""], ["i", "0"], ["c", "3"]]}, {"line": 5, "state": [["s", "xyz"], ["K", "4"], ["rlt", ""], ["i", "0"], ["c", "3"]]}, {"line": 6, "state": [["s", "xyz"], ["K", "4"], ["rlt", "a"], ["i", "0"], ["c", "3"]]}, {"line": 7, "state": [["s", "xyz"], ["K", "1"], ["rlt", "a"], ["i", "0"], ["c", "3"]]}, {"line": 3, "state": [["s", "xyz"], ["K", "1"], ["rlt", "a"], ["i", "1"], ["c", "3"]]}, {"line": 4, "state": [["s", "xyz"], ["K", "1"], ["rlt", "a"], ["i", "1"], ["c", "2"]]}, {"line": 5, "state": [["s", "xyz"], ["K", "1"], ["rlt", "a"], ["i", "1"], ["c", "2"]]}, {"line": 9, "state": [["s", "xyz"], ["K", "1"], ["rlt", "ay"], ["i", "1"], ["c", "2"]]}, {"line": 3, "state": [["s", "xyz"], ["K", "1"], ["rlt", "ay"], ["i", "1"], ["c", "2"]]}, {"line": 10, "state": [["s", "xyz"], ["K", "1"], ["i", "1"], ["c", "2"], ["rlt", "aya"]]}, {"line": 11, "state": [["s", "xyz"], ["K", "1"], ["i", "1"], ["c", "2"], ["rlt", "aya"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 9, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 4, 3, 0]], "6": [[6, 2]], "7": [[7, 5, 4, 3, 0]], "9": [[9, 4, 3, 4, 3, 0]], "10": [[10, 3, 9, 4, 3, 4, 3, 0]], "11": [[11, 10, 3, 9, 4, 3, 4, 3, 0]]}}
{"id": 3386, "code": "int a = 20, b = 15;\nb *= 2;\nif (b > a) {\nSystem.out.println(0);\n} else {\nSystem.out.println(Math.abs(a - b));}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "b", "*=", "2", ";", "<2>", "if", "(", "b", ">", "a", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "Math", ".", "abs", "(", "a", "-", "b", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}, {"line": 3, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 1785, "code": "int n = 10, a = 7, b = 5;\nint max_r = Math.min(a, b);\nint min_r = Math.max(0, (a + b) - n);\nSystem.out.println(String.format(\"%d %d\", max_r, min_r));", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "max_r", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "min_r", "=", "Math", ".", "max", "(", "0", ",", "(", "a", "+", "b", ")", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "max_r", ",", "min_r", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_r", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_r", "5"], ["min_r", "2"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_r", "5"], ["min_r", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 11541, "code": "String S = \"SAT\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(\"7\");\n} else if (S.equals(\"MON\")) {\nSystem.out.println(\"6\");\n} else if (S.equals(\"TUE\")) {\nSystem.out.println(\"5\");\n} else if (S.equals(\"WED\")) {\nSystem.out.println(\"4\");\n} else if (S.equals(\"THU\")) {\nSystem.out.println(\"3\");\n} else if (S.equals(\"FRI\")) {\nSystem.out.println(\"2\");\n} else if (S.equals(\"SAT\")) {\nSystem.out.println(\"1\");\n} else {\nSystem.out.println(\"Error\");}", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"7\"", ")", ";", "<3>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"6\"", ")", ";", "<5>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"5\"", ")", ";", "<7>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"4\"", ")", ";", "<9>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"3\"", ")", ";", "<11>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"2\"", ")", ";", "<13>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "<15>", "}", "else", "{", "<16>", "System", ".", "out", ".", "println", "(", "\"Error\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"]]}, {"line": 3, "state": [["S", "SAT"]]}, {"line": 5, "state": [["S", "SAT"]]}, {"line": 7, "state": [["S", "SAT"]]}, {"line": 9, "state": [["S", "SAT"]]}, {"line": 11, "state": [["S", "SAT"]]}, {"line": 13, "state": [["S", "SAT"]]}, {"line": 14, "state": [["S", "SAT"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]], "7": [[7, 5, 3, 1, 0]], "9": [[9, 7, 5, 3, 1, 0]], "11": [[11, 9, 7, 5, 3, 1, 0]], "13": [[13, 11, 9, 7, 5, 3, 1, 0]], "14": [[14]]}}
{"id": 3733, "code": "int x = 100000, y = 1, z = 1;\nx -= z;\nif (x >= 0) {\nSystem.out.println(x / (y + z));\n} else {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "x", "-=", "z", ";", "<2>", "if", "(", "x", ">=", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "99999"], ["y", "1"], ["z", "1"]]}, {"line": 2, "state": [["x", "99999"], ["y", "1"], ["z", "1"]]}, {"line": 3, "state": [["x", "99999"], ["y", "1"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 4931, "code": "String a = \"smiles\";\nSystem.out.println(a.substring(0, 1) + (a.length() - 2) + a.substring(a.length() - 1));", "code_tokens": ["<0>", "String", "a", "=", "\"smiles\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "substring", "(", "0", ",", "1", ")", "+", "(", "a", ".", "length", "(", ")", "-", "2", ")", "+", "a", ".", "substring", "(", "a", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "smiles"]]}, {"line": 1, "state": [["a", "smiles"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3395, "code": "int A = 20, B = 15;\nif (A <= B * 2) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(A - B * 2);}", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "15", ";", "<1>", "if", "(", "A", "<=", "B", "*", "2", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "A", "-", "B", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "15"]]}, {"line": 1, "state": [["A", "20"], ["B", "15"]]}, {"line": 2, "state": [["A", "20"], ["B", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 1901, "code": "int n = 10, a = 7, b = 5;\nint max_ = Math.min(a, b);\nif (Math.max(n, a + b) == a + b) {\nint min_ = a + b - n;\n} else {\nint min_ = 0;}\nSystem.out.println(max_ + \" \" + min_);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "max_", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "if", "(", "Math", ".", "max", "(", "n", ",", "a", "+", "b", ")", "==", "a", "+", "b", ")", "{", "<3>", "int", "min_", "=", "a", "+", "b", "-", "n", ";", "<4>", "}", "else", "{", "<5>", "int", "min_", "=", "0", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "max_", "+", "\" \"", "+", "min_", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_", "5"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_", "5"], ["min_", "2"]]}, {"line": 6, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["max_", "5"], ["min_", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6, 3, 2, 1, 0]]}}
{"id": 14394, "code": "int N = 6;\nint[] A = {1, 2, 3, 2, 2, 1};\nif (N == 1) {\nSystem.out.println(1);}\nelse {\nint pre = A[0];\nint flg = 0;\nint ans = 1;\nfor (int i = 1; i < N; i++) {\nint now = A[i];\nint diff = now - pre;\nif (flg == 1) {\nif (diff >= 0) {\n}\nelse {\nans += 1;\nflg = 0;}}\nelse if (flg == -1) {\nif (diff <= 0) {\n}\nelse {\nans += 1;\nflg = 0;}}\nelse {\nif (diff > 0) {\nflg = 1;}\nelse if (diff < 0) {\nflg = -1;}\nelse {\n}}\npre = now;}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "if", "(", "N", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<4>", "else", "{", "<5>", "int", "pre", "=", "A", "[", "0", "]", ";", "<6>", "int", "flg", "=", "0", ";", "<7>", "int", "ans", "=", "1", ";", "<8>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<9>", "int", "now", "=", "A", "[", "i", "]", ";", "<10>", "int", "diff", "=", "now", "-", "pre", ";", "<11>", "if", "(", "flg", "==", "1", ")", "{", "<12>", "if", "(", "diff", ">=", "0", ")", "{", "<13>", "}", "<14>", "else", "{", "<15>", "ans", "+=", "1", ";", "<16>", "flg", "=", "0", ";", "}", "}", "<17>", "else", "if", "(", "flg", "==", "-", "1", ")", "{", "<18>", "if", "(", "diff", "<=", "0", ")", "{", "<19>", "}", "<20>", "else", "{", "<21>", "ans", "+=", "1", ";", "<22>", "flg", "=", "0", ";", "}", "}", "<23>", "else", "{", "<24>", "if", "(", "diff", ">", "0", ")", "{", "<25>", "flg", "=", "1", ";", "}", "<26>", "else", "if", "(", "diff", "<", "0", ")", "{", "<27>", "flg", "=", "-", "1", ";", "}", "<28>", "else", "{", "<29>", "}", "}", "<30>", "pre", "=", "now", ";", "}", "<31>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"], ["i", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"], ["i", "1"], ["now", "2"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"], ["i", "1"], ["now", "2"], ["diff", "1"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"], ["i", "1"], ["now", "2"], ["diff", "1"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"], ["i", "1"], ["now", "2"], ["diff", "1"]]}, {"line": 24, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "0"], ["ans", "1"], ["i", "1"], ["now", "2"], ["diff", "1"]]}, {"line": 25, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "1"], ["ans", "1"], ["i", "1"], ["now", "2"], ["diff", "1"]]}, {"line": 30, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "1"], ["now", "2"], ["diff", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "2"], ["diff", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "3"], ["diff", "1"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "3"], ["diff", "1"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "3"], ["diff", "1"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "3"], ["diff", "1"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "3"], ["diff", "1"]]}, {"line": 30, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "1"], ["i", "2"], ["now", "3"], ["diff", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "1"], ["i", "3"], ["now", "3"], ["diff", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "1"], ["i", "3"], ["now", "2"], ["diff", "1"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "1"], ["i", "3"], ["now", "2"], ["diff", "-1"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "1"], ["i", "3"], ["now", "2"], ["diff", "-1"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "1"], ["i", "3"], ["now", "2"], ["diff", "-1"]]}, {"line": 15, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "1"], ["ans", "2"], ["i", "3"], ["now", "2"], ["diff", "-1"]]}, {"line": 16, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "3"], ["flg", "0"], ["ans", "2"], ["i", "3"], ["now", "2"], ["diff", "-1"]]}, {"line": 30, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "3"], ["now", "2"], ["diff", "-1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "0"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "0"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "0"]]}, {"line": 24, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "0"]]}, {"line": 26, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "0"]]}, {"line": 30, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "4"], ["now", "2"], ["diff", "0"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "2"], ["diff", "0"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "0"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 24, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 26, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "0"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 27, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "2"], ["flg", "-1"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 30, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "-1"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "-1"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}, {"line": 31, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["pre", "1"], ["flg", "-1"], ["ans", "2"], ["i", "5"], ["now", "1"], ["diff", "-1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "5": [[5, 1]], "6": [[6]], "7": [[7]], "8": [[8, 2, 0], [8, 9, 8, 2, 0], [8, 9, 8, 9, 8, 2, 0], [8, 9, 8, 9, 8, 9, 8, 2, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0]], "9": [[9, 8, 2, 0], [9, 8, 9, 8, 2, 0], [9, 8, 9, 8, 9, 8, 2, 0], [9, 8, 9, 8, 9, 8, 9, 8, 2, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0]], "10": [[10, 9, 8, 2, 0], [10, 9, 8, 9, 8, 2, 0], [10, 9, 8, 9, 8, 9, 8, 2, 0], [10, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0], [10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0]], "11": [[11, 6], [11, 25, 17, 11, 6], [11, 25, 17, 11, 6], [11, 16, 11, 25, 17, 11, 6], [11, 17, 11, 16, 11, 25, 17, 11, 6]], "12": [[12, 10, 9, 8, 9, 8, 2, 0], [12, 10, 9, 8, 9, 8, 9, 8, 2, 0]], "13": [[13]], "15": [[15, 7]], "16": [[16, 11, 25, 17, 11, 6]], "17": [[17, 11, 6], [17, 11, 16, 11, 25, 17, 11, 6], [17, 11, 17, 11, 16, 11, 25, 17, 11, 6]], "24": [[24, 10, 9, 8, 2, 0], [24, 10, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0], [24, 10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0]], "25": [[25, 17, 11, 6]], "26": [[26, 24, 10, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0], [26, 24, 10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0]], "27": [[27, 17, 11, 17, 11, 16, 11, 25, 17, 11, 6]], "30": [[30, 10, 9, 8, 2, 0], [30, 10, 9, 8, 9, 8, 2, 0], [30, 10, 9, 8, 9, 8, 9, 8, 2, 0], [30, 10, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0], [30, 10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 2, 0]], "31": [[31, 15, 7]]}}
{"id": 5390, "code": "double n = 1.01;\nSystem.out.println((int) Math.round(n));", "code_tokens": ["<0>", "double", "n", "=", "1.01", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "round", "(", "n", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "1.01"]]}, {"line": 1, "state": [["n", "1.01"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4411, "code": "String s = \"internationalization\";\nSystem.out.println(String.format(\"%s%d%s\", s.charAt(0), s.length() - 2, s.charAt(s.length() - 1)));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "s", ".", "charAt", "(", "0", ")", ",", "s", ".", "length", "(", ")", "-", "2", ",", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13431, "code": "String n = \"haiku,atcoder,tasks\";\nSystem.out.println(n.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "n", "=", "\"haiku,atcoder,tasks\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "haiku , atcoder , tasks"]]}, {"line": 1, "state": [["n", "haiku , atcoder , tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4356, "code": "int a = 10, b = 0, c = 12, d = 0, e = 120;\nint time = (c * 60 + d) - (a * 60 + b);\ntime = time < 0 ? time + 24 * 60 : time;\nSystem.out.println((60 * c + d) - (60 * a + b) - e);", "code_tokens": ["<0>", "int", "a", "=", "10", ",", "b", "=", "0", ",", "c", "=", "12", ",", "d", "=", "0", ",", "e", "=", "120", ";", "<1>", "int", "time", "=", "(", "c", "*", "60", "+", "d", ")", "-", "(", "a", "*", "60", "+", "b", ")", ";", "<2>", "time", "=", "time", "<", "0", "?", "time", "+", "24", "*", "60", ":", "time", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "60", "*", "c", "+", "d", ")", "-", "(", "60", "*", "a", "+", "b", ")", "-", "e", ")", ";"], "trace": [{"line": 0, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"]]}, {"line": 1, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"], ["time", "120"]]}, {"line": 2, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"], ["time", "120"]]}, {"line": 3, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"], ["time", "120"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]]}}
{"id": 16837, "code": "String A = \"D\";String B = \"H\";\nif (A.equals(\"H\")) {\nSystem.out.println(B);}\nelse {\nif (B.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "A", "=", "\"D\"", ";", "String", "B", "=", "\"H\"", ";", "<1>", "if", "(", "A", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "B", ")", ";", "}", "<3>", "else", "{", "<4>", "if", "(", "B", ".", "equals", "(", "\"H\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["A", "D"], ["B", "H"]]}, {"line": 1, "state": [["A", "D"], ["B", "H"]]}, {"line": 4, "state": [["A", "D"], ["B", "H"]]}, {"line": 5, "state": [["A", "D"], ["B", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 0]], "5": [[5]]}}
{"id": 2230, "code": "int n = 10, a = 3, b = 5;\nint M = Math.min(a, b);\nint m = Math.max(0, a + b - n);\nSystem.out.println(M + \" \" + m);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "M", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "m", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "M", "+", "\" \"", "+", "m", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["M", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["M", "3"], ["m", "0"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["M", "3"], ["m", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 16292, "code": "int N = 5;\nint[] a = {6, 9, 4, 2, 11};\njava.util.Arrays.sort(a);\nint[] reversedA = new int[N];for (int i = 0; i < N; i++) {reversedA[i] = a[N - 1 - i];}a = reversedA;\nint st_n = a[0];\nint st_r = a[1];\nint m = st_r * (st_n - st_r);\nfor (int r = 2; r < N; r++) {\nint cn = a[r] * (st_n - a[r]);\nif (m < cn) {\nst_r = a[r];\nm = cn;}}\nSystem.out.println(st_n + \" \" + st_r);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "[", "]", "reversedA", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "reversedA", "[", "i", "]", "=", "a", "[", "N", "-", "1", "-", "i", "]", ";", "}", "a", "=", "reversedA", ";", "<4>", "int", "st_n", "=", "a", "[", "0", "]", ";", "<5>", "int", "st_r", "=", "a", "[", "1", "]", ";", "<6>", "int", "m", "=", "st_r", "*", "(", "st_n", "-", "st_r", ")", ";", "<7>", "for", "(", "int", "r", "=", "2", ";", "r", "<", "N", ";", "r", "++", ")", "{", "<8>", "int", "cn", "=", "a", "[", "r", "]", "*", "(", "st_n", "-", "a", "[", "r", "]", ")", ";", "<9>", "if", "(", "m", "<", "cn", ")", "{", "<10>", "st_r", "=", "a", "[", "r", "]", ";", "<11>", "m", "=", "cn", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "st_n", "+", "\" \"", "+", "st_r", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"]]}, {"line": 3, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"]]}, {"line": 4, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "9"]]}, {"line": 5, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "9"], ["m", "18"]]}, {"line": 6, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "9"], ["m", "18"], ["r", "2"]]}, {"line": 7, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "9"], ["m", "18"], ["r", "2"], ["cn", "30"]]}, {"line": 8, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "9"], ["m", "18"], ["r", "2"], ["cn", "30"]]}, {"line": 9, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "18"], ["r", "2"], ["cn", "30"]]}, {"line": 10, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "2"], ["cn", "30"]]}, {"line": 6, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "3"], ["cn", "30"]]}, {"line": 7, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "3"], ["cn", "28"]]}, {"line": 8, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "3"], ["cn", "28"]]}, {"line": 6, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "4"], ["cn", "28"]]}, {"line": 7, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "4"], ["cn", "18"]]}, {"line": 8, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "4"], ["cn", "18"]]}, {"line": 6, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "4"], ["cn", "18"]]}, {"line": 11, "state": [["N", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["st_n", "11"], ["st_r", "6"], ["m", "30"], ["r", "4"], ["cn", "18"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 0], [6, 9, 7, 6, 0], [6, 7, 6, 9, 7, 6, 0], [6, 7, 6, 7, 6, 9, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 9, 7, 6, 0], [7, 6, 7, 6, 9, 7, 6, 0]], "8": [[8, 7, 6, 0], [8, 7, 6, 9, 7, 6, 0], [8, 7, 6, 7, 6, 9, 7, 6, 0]], "9": [[9, 7, 6, 0]], "10": [[10, 8, 7, 6, 0]], "11": [[11, 7, 6, 7, 6, 9, 7, 6, 0]]}}
{"id": 13114, "code": "int X = 5;\nint[] Cel = {3, 5, 7};\nboolean found = false;for (int c : Cel) {if (c == X) {found = true;break;}}if (found) {System.out.println(\"YES\");\n} else {System.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "X", "=", "5", ";", "<1>", "int", "[", "]", "Cel", "=", "{", "3", ",", "5", ",", "7", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "int", "c", ":", "Cel", ")", "{", "if", "(", "c", "==", "X", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<3>", "}", "else", "{", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "5"]]}, {"line": 1, "state": [["X", "5"], ["Cel", "[ 3 , 5 , 7 ]"]]}, {"line": 2, "state": [["X", "5"], ["Cel", "[ 3 , 5 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 1488, "code": "int N = 750;\nif (N % 111 == 0) {\nSystem.out.println(N);} else {\nfor (int i = 0; i < 110; i++) {\nN += 1;\nif (N % 111 == 0) {\nbreak;}}\nSystem.out.println(N);}", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "if", "(", "N", "%", "111", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}", "else", "{", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "110", ";", "i", "++", ")", "{", "<4>", "N", "+=", "1", ";", "<5>", "if", "(", "N", "%", "111", "==", "0", ")", "{", "<6>", "break", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": [["N", "750"]]}, {"line": 4, "state": [["N", "750"], ["i", "0"]]}, {"line": 5, "state": [["N", "751"], ["i", "0"]]}, {"line": 6, "state": [["N", "751"], ["i", "0"]]}, {"line": 4, "state": [["N", "751"], ["i", "1"]]}, {"line": 5, "state": [["N", "752"], ["i", "1"]]}, {"line": 6, "state": [["N", "752"], ["i", "1"]]}, {"line": 4, "state": [["N", "752"], ["i", "2"]]}, {"line": 5, "state": [["N", "753"], ["i", "2"]]}, {"line": 6, "state": [["N", "753"], ["i", "2"]]}, {"line": 4, "state": [["N", "753"], ["i", "3"]]}, {"line": 5, "state": [["N", "754"], ["i", "3"]]}, {"line": 6, "state": [["N", "754"], ["i", "3"]]}, {"line": 4, "state": [["N", "754"], ["i", "4"]]}, {"line": 5, "state": [["N", "755"], ["i", "4"]]}, {"line": 6, "state": [["N", "755"], ["i", "4"]]}, {"line": 4, "state": [["N", "755"], ["i", "5"]]}, {"line": 5, "state": [["N", "756"], ["i", "5"]]}, {"line": 6, "state": [["N", "756"], ["i", "5"]]}, {"line": 4, "state": [["N", "756"], ["i", "6"]]}, {"line": 5, "state": [["N", "757"], ["i", "6"]]}, {"line": 6, "state": [["N", "757"], ["i", "6"]]}, {"line": 4, "state": [["N", "757"], ["i", "7"]]}, {"line": 5, "state": [["N", "758"], ["i", "7"]]}, {"line": 6, "state": [["N", "758"], ["i", "7"]]}, {"line": 4, "state": [["N", "758"], ["i", "8"]]}, {"line": 5, "state": [["N", "759"], ["i", "8"]]}, {"line": 6, "state": [["N", "759"], ["i", "8"]]}, {"line": 4, "state": [["N", "759"], ["i", "9"]]}, {"line": 5, "state": [["N", "760"], ["i", "9"]]}, {"line": 6, "state": [["N", "760"], ["i", "9"]]}, {"line": 4, "state": [["N", "760"], ["i", "10"]]}, {"line": 5, "state": [["N", "761"], ["i", "10"]]}, {"line": 6, "state": [["N", "761"], ["i", "10"]]}, {"line": 4, "state": [["N", "761"], ["i", "11"]]}, {"line": 5, "state": [["N", "762"], ["i", "11"]]}, {"line": 6, "state": [["N", "762"], ["i", "11"]]}, {"line": 4, "state": [["N", "762"], ["i", "12"]]}, {"line": 5, "state": [["N", "763"], ["i", "12"]]}, {"line": 6, "state": [["N", "763"], ["i", "12"]]}, {"line": 4, "state": [["N", "763"], ["i", "13"]]}, {"line": 5, "state": [["N", "764"], ["i", "13"]]}, {"line": 6, "state": [["N", "764"], ["i", "13"]]}, {"line": 4, "state": [["N", "764"], ["i", "14"]]}, {"line": 5, "state": [["N", "765"], ["i", "14"]]}, {"line": 6, "state": [["N", "765"], ["i", "14"]]}, {"line": 4, "state": [["N", "765"], ["i", "15"]]}, {"line": 5, "state": [["N", "766"], ["i", "15"]]}, {"line": 6, "state": [["N", "766"], ["i", "15"]]}, {"line": 4, "state": [["N", "766"], ["i", "16"]]}, {"line": 5, "state": [["N", "767"], ["i", "16"]]}, {"line": 6, "state": [["N", "767"], ["i", "16"]]}, {"line": 4, "state": [["N", "767"], ["i", "17"]]}, {"line": 5, "state": [["N", "768"], ["i", "17"]]}, {"line": 6, "state": [["N", "768"], ["i", "17"]]}, {"line": 4, "state": [["N", "768"], ["i", "18"]]}, {"line": 5, "state": [["N", "769"], ["i", "18"]]}, {"line": 6, "state": [["N", "769"], ["i", "18"]]}, {"line": 4, "state": [["N", "769"], ["i", "19"]]}, {"line": 5, "state": [["N", "770"], ["i", "19"]]}, {"line": 6, "state": [["N", "770"], ["i", "19"]]}, {"line": 4, "state": [["N", "770"], ["i", "20"]]}, {"line": 5, "state": [["N", "771"], ["i", "20"]]}, {"line": 6, "state": [["N", "771"], ["i", "20"]]}, {"line": 4, "state": [["N", "771"], ["i", "21"]]}, {"line": 5, "state": [["N", "772"], ["i", "21"]]}, {"line": 6, "state": [["N", "772"], ["i", "21"]]}, {"line": 4, "state": [["N", "772"], ["i", "22"]]}, {"line": 5, "state": [["N", "773"], ["i", "22"]]}, {"line": 6, "state": [["N", "773"], ["i", "22"]]}, {"line": 4, "state": [["N", "773"], ["i", "23"]]}, {"line": 5, "state": [["N", "774"], ["i", "23"]]}, {"line": 6, "state": [["N", "774"], ["i", "23"]]}, {"line": 4, "state": [["N", "774"], ["i", "24"]]}, {"line": 5, "state": [["N", "775"], ["i", "24"]]}, {"line": 6, "state": [["N", "775"], ["i", "24"]]}, {"line": 4, "state": [["N", "775"], ["i", "25"]]}, {"line": 5, "state": [["N", "776"], ["i", "25"]]}, {"line": 6, "state": [["N", "776"], ["i", "25"]]}, {"line": 4, "state": [["N", "776"], ["i", "26"]]}, {"line": 5, "state": [["N", "777"], ["i", "26"]]}, {"line": 6, "state": [["N", "777"], ["i", "26"]]}, {"line": 7, "state": [["N", "777"], ["i", "26"]]}, {"line": 8, "state": [["N", "777"], ["i", "26"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4]], "5": [[5, 1, 0], [5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0]], "6": [[6, 5, 1, 0], [6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0]], "7": [[7]], "8": [[8, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 0]]}}
{"id": 13342, "code": "String a = \"abcde,fghihgf,edcba\";\nSystem.out.println(a.replace(',', ' '));", "code_tokens": ["<0>", "String", "a", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "replace", "(", "','", ",", "' '", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["a", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11860, "code": "int m = 11, d = 16;\nint n = 11, e = 17;\nSystem.out.println(e == 1 ? 1 : 0);", "code_tokens": ["<0>", "int", "m", "=", "11", ",", "d", "=", "16", ";", "<1>", "int", "n", "=", "11", ",", "e", "=", "17", ";", "<2>", "System", ".", "out", ".", "println", "(", "e", "==", "1", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["m", "11"], ["d", "16"]]}, {"line": 1, "state": [["m", "11"], ["d", "16"], ["n", "11"], ["e", "17"]]}, {"line": 2, "state": [["m", "11"], ["d", "16"], ["n", "11"], ["e", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 6160, "code": "int N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nArrays.sort(A);\nArrays.sort(B);\nArrays.sort(C);\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint count_a = bisectLeft(A, B[i]);\nint count_c = N - bisectRight(C, B[i]);\nans += count_a * count_c;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A", ")", ";", "<5>", "Arrays", ".", "sort", "(", "B", ")", ";", "<6>", "Arrays", ".", "sort", "(", "C", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<9>", "int", "count_a", "=", "bisectLeft", "(", "A", ",", "B", "[", "i", "]", ")", ";", "<10>", "int", "count_c", "=", "N", "-", "bisectRight", "(", "C", ",", "B", "[", "i", "]", ")", ";", "<11>", "ans", "+=", "count_a", "*", "count_c", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["count_a", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "0"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "1"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["count_a", "3"], ["count_c", "3"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["count_a", "3"], ["count_c", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8]], "9": [[9, 1], [9, 11, 10, 9, 1], [9, 11, 10, 9, 11, 10, 9, 1], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 1]], "10": [[10, 9, 1], [10, 9, 11, 10, 9, 1], [10, 9, 11, 10, 9, 11, 10, 9, 1]], "11": [[11, 10, 9, 1], [11, 10, 9, 11, 10, 9, 1], [11, 10, 9, 11, 10, 9, 11, 10, 9, 1]], "12": [[12, 11, 10, 9, 1], [12, 11, 10, 9, 11, 10, 9, 1], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 1]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 1]]}}
{"id": 8532, "code": "int N = 5;\nint[] A = {3, 2, 2, 4, 1};\nint[] B = {1, 2, 2, 2, 1};\nint maxSum = Integer.MIN_VALUE;for (int n = 0; n < N; n++) {int currentSum = 0;for (int i = 0; i <= n; i++) {currentSum += A[i];}for (int i = n; i < N; i++) {currentSum += B[i];}maxSum = Math.max(maxSum, currentSum);}System.out.println(maxSum);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "maxSum", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "n", "=", "0", ";", "n", "<", "N", ";", "n", "++", ")", "{", "int", "currentSum", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "n", ";", "i", "++", ")", "{", "currentSum", "+=", "A", "[", "i", "]", ";", "}", "for", "(", "int", "i", "=", "n", ";", "i", "<", "N", ";", "i", "++", ")", "{", "currentSum", "+=", "B", "[", "i", "]", ";", "}", "maxSum", "=", "Math", ".", "max", "(", "maxSum", ",", "currentSum", ")", ";", "}", "System", ".", "out", ".", "println", "(", "maxSum", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["n", "0"]]}, {"line": 3, "state": [["n", "0"]]}, {"line": 3, "state": [["n", "0"]]}, {"line": 3, "state": [["n", "1"]]}, {"line": 3, "state": [["n", "1"]]}, {"line": 3, "state": [["n", "1"]]}, {"line": 3, "state": [["n", "2"]]}, {"line": 3, "state": [["n", "2"]]}, {"line": 3, "state": [["n", "2"]]}, {"line": 3, "state": [["n", "3"]]}, {"line": 3, "state": [["n", "3"]]}, {"line": 3, "state": [["n", "3"]]}, {"line": 3, "state": [["n", "4"]]}, {"line": 3, "state": [["n", "4"]]}, {"line": 3, "state": [["n", "4"]]}, {"line": 3, "state": [["n", "4"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0]]}}
{"id": 12340, "code": "String S = \"atcoder\";\nint N = S.length();\nif (S.equals(new StringBuilder(S).reverse().toString())) {\nif (S.substring(0, (N - 1) / 2).equals(S.substring((N + 1) / 2))) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "S", "=", "\"atcoder\"", ";", "<1>", "int", "N", "=", "S", ".", "length", "(", ")", ";", "<2>", "if", "(", "S", ".", "equals", "(", "new", "StringBuilder", "(", "S", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<3>", "if", "(", "S", ".", "substring", "(", "0", ",", "(", "N", "-", "1", ")", "/", "2", ")", ".", "equals", "(", "S", ".", "substring", "(", "(", "N", "+", "1", ")", "/", "2", ")", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "atcoder"]]}, {"line": 1, "state": [["S", "atcoder"], ["N", "7"]]}, {"line": 2, "state": [["S", "atcoder"], ["N", "7"]]}, {"line": 8, "state": [["S", "atcoder"], ["N", "7"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "8": [[8]]}}
{"id": 6010, "code": "int s = 5;\nSystem.out.println((int) Math.ceil(s / 2.0));", "code_tokens": ["<0>", "int", "s", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "s", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["s", "5"]]}, {"line": 3, "state": [["s", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]]}}
{"id": 8795, "code": "int n = 4;\nint[][] dp = new int[2][n];\nint[] a1 = {1, 1, 1, 1};\nint[] a2 = {1, 1, 1, 1};\ndp[0][0] = a1[0];\nfor (int i = 1; i < n; i++) {\ndp[0][i] = dp[0][i - 1] + a1[i];}\ndp[1][0] = dp[0][0] + a2[0];\nfor (int i = 1; i < n; i++) {\ndp[1][i] = Math.max(dp[0][i] + a2[i], dp[1][i - 1] + a2[i]);}\nSystem.out.println(dp[1][n - 1]);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "[", "]", "dp", "=", "new", "int", "[", "2", "]", "[", "n", "]", ";", "<2>", "int", "[", "]", "a1", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "[", "]", "a2", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<4>", "dp", "[", "0", "]", "[", "0", "]", "=", "a1", "[", "0", "]", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "dp", "[", "0", "]", "[", "i", "]", "=", "dp", "[", "0", "]", "[", "i", "-", "1", "]", "+", "a1", "[", "i", "]", ";", "}", "<7>", "dp", "[", "1", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "[", "0", "]", "+", "a2", "[", "0", "]", ";", "<8>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<9>", "dp", "[", "1", "]", "[", "i", "]", "=", "Math", ".", "max", "(", "dp", "[", "0", "]", "[", "i", "]", "+", "a2", "[", "i", "]", ",", "dp", "[", "1", "]", "[", "i", "-", "1", "]", "+", "a2", "[", "i", "]", ")", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "dp", "[", "1", "]", "[", "n", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": [["i", "0"]]}, {"line": 1, "state": [["i", "1"]]}, {"line": 1, "state": [["i", "2"]]}, {"line": 1, "state": [["i", "3"]]}, {"line": 1, "state": [["i", "3"]]}, {"line": 1, "state": [["i", "0"]]}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": [["i", "0"]]}, {"line": 1, "state": [["i", "1"]]}, {"line": 1, "state": [["i", "2"]]}, {"line": 1, "state": [["i", "3"]]}, {"line": 1, "state": [["i", "3"]]}, {"line": 1, "state": [["i", "1"]]}, {"line": 1, "state": [["i", "1"]]}, {"line": 1, "state": [["n", "4"], ["dp", "[ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"]]}, {"line": 2, "state": [["n", "4"], ["dp", "[ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "4"], ["dp", "[ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 4, "state": [["n", "4"], ["dp", "[ [ 1 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 5, "state": [["n", "4"], ["dp", "[ [ 1 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "1"]]}, {"line": 6, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "1"]]}, {"line": 5, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "2"]]}, {"line": 6, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "2"]]}, {"line": 5, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 0 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 6, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 5, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 0 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 7, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 8, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 0 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "1"]]}, {"line": 9, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "1"]]}, {"line": 8, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 0 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "2"]]}, {"line": 9, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "2"]]}, {"line": 8, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 , 0 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 9, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 , 5 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 8, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 , 5 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 10, "state": [["n", "4"], ["dp", "[ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 , 5 ] ]"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 2, 1, 0]], "5": [[5, 1, 0], [5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 1, 0], [5, 6, 5, 6, 5, 6, 5, 1, 0]], "6": [[6, 5, 1, 0], [6, 5, 6, 5, 1, 0], [6, 5, 6, 5, 6, 5, 1, 0]], "7": [[7, 6, 5, 6, 5, 6, 5, 1, 0]], "8": [[8, 5, 6, 5, 6, 5, 6, 5, 1, 0], [8, 9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0], [8, 9, 8, 9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0], [8, 9, 8, 9, 8, 9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0]], "9": [[9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0], [9, 8, 9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0], [9, 8, 9, 8, 9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0]], "10": [[10, 9, 8, 9, 8, 9, 8, 5, 6, 5, 6, 5, 6, 5, 1, 0]]}}
{"id": 8935, "code": "int n = 7;\nint[] al = {3, 3, 4, 5, 4, 5, 3};\nint[] bl = {5, 3, 4, 4, 2, 3, 2};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint tmp = sum(al, 0, i + 1) + sum(bl, i, n);\nif (ans < tmp) {\nans = tmp;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "al", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "bl", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "tmp", "=", "sum", "(", "al", ",", "0", ",", "i", "+", "1", ")", "+", "sum", "(", "bl", ",", "i", ",", "n", ")", ";", "<6>", "if", "(", "ans", "<", "tmp", ")", "{", "<7>", "ans", "=", "tmp", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"], ["tmp", "26"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"], ["tmp", "26"]]}, {"line": 7, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "0"], ["tmp", "26"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["tmp", "26"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["tmp", "24"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["tmp", "24"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["tmp", "24"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["tmp", "25"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["tmp", "25"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["tmp", "25"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["tmp", "26"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["tmp", "26"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["tmp", "26"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["tmp", "26"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["tmp", "26"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["tmp", "26"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["tmp", "29"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["tmp", "29"]]}, {"line": 7, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "5"], ["tmp", "29"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["tmp", "29"]]}, {"line": 5, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["tmp", "29"]]}, {"line": 6, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["tmp", "29"]]}, {"line": 4, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["tmp", "29"]]}, {"line": 8, "state": [["n", "7"], ["al", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["bl", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["tmp", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 18550, "code": "int H = 2;\nint W = 100;\nint N = 200;\nint Max = Math.max(H, W);\nSystem.out.println((int) Math.ceil((double) N / Max));", "code_tokens": ["<0>", "int", "H", "=", "2", ";", "<1>", "int", "W", "=", "100", ";", "<2>", "int", "N", "=", "200", ";", "<3>", "int", "Max", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "N", "/", "Max", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["H", "2"]]}, {"line": 2, "state": [["H", "2"], ["W", "100"]]}, {"line": 3, "state": [["H", "2"], ["W", "100"], ["N", "200"]]}, {"line": 4, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["Max", "100"]]}, {"line": 5, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["Max", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2, 1]], "5": [[5, 4, 2, 1]]}}
{"id": 10703, "code": "String S = \"akasaka\";\nString answer = \"Yes\";\nif (!S.equals(new StringBuilder(S).reverse().toString())) {\nanswer = \"No\";}\nString first = S.substring(0, S.length() / 2);\nString last = S.substring(S.length() / 2 + 1);\nif (!first.equals(new StringBuilder(first).reverse().toString())) {\nanswer = \"No\";}\nif (!last.equals(new StringBuilder(last).reverse().toString())) {\nanswer = \"No\";}\nSystem.out.println(answer);", "code_tokens": ["<0>", "String", "S", "=", "\"akasaka\"", ";", "<1>", "String", "answer", "=", "\"Yes\"", ";", "<2>", "if", "(", "!", "S", ".", "equals", "(", "new", "StringBuilder", "(", "S", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<3>", "answer", "=", "\"No\"", ";", "}", "<4>", "String", "first", "=", "S", ".", "substring", "(", "0", ",", "S", ".", "length", "(", ")", "/", "2", ")", ";", "<5>", "String", "last", "=", "S", ".", "substring", "(", "S", ".", "length", "(", ")", "/", "2", "+", "1", ")", ";", "<6>", "if", "(", "!", "first", ".", "equals", "(", "new", "StringBuilder", "(", "first", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<7>", "answer", "=", "\"No\"", ";", "}", "<8>", "if", "(", "!", "last", ".", "equals", "(", "new", "StringBuilder", "(", "last", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<9>", "answer", "=", "\"No\"", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "answer", ")", ";"], "trace": [{"line": 0, "state": [["S", "akasaka"]]}, {"line": 1, "state": [["S", "akasaka"], ["answer", "Yes"]]}, {"line": 2, "state": [["S", "akasaka"], ["answer", "Yes"]]}, {"line": 4, "state": [["S", "akasaka"], ["answer", "Yes"], ["first", "aka"]]}, {"line": 5, "state": [["S", "akasaka"], ["answer", "Yes"], ["first", "aka"], ["last", "aka"]]}, {"line": 6, "state": [["S", "akasaka"], ["answer", "Yes"], ["first", "aka"], ["last", "aka"]]}, {"line": 8, "state": [["S", "akasaka"], ["answer", "Yes"], ["first", "aka"], ["last", "aka"]]}, {"line": 10, "state": [["S", "akasaka"], ["answer", "Yes"], ["first", "aka"], ["last", "aka"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "4": [[4, 2, 0]], "5": [[5, 4, 2, 0]], "6": [[6, 4, 2, 0]], "8": [[8, 5, 4, 2, 0]], "10": [[10, 1]]}}
{"id": 17136, "code": "String a = \"D\";String b = \"H\";\nif (a.equals(\"H\") && b.equals(\"H\")) {\nSystem.out.println(\"H\");\nSystem.exit(0);}\nif (a.equals(\"D\") && b.equals(\"D\")) {\nSystem.out.println(\"H\");\nSystem.exit(0);}\nelse {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", "&&", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<3>", "System", ".", "exit", "(", "0", ")", ";", "}", "<4>", "if", "(", "a", ".", "equals", "(", "\"D\"", ")", "&&", "b", ".", "equals", "(", "\"D\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<6>", "System", ".", "exit", "(", "0", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 2, "state": [["a", "D"], ["b", "H"]]}, {"line": 5, "state": [["a", "D"], ["b", "H"]]}, {"line": 9, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5, 2, 1]], "9": [[9]]}}
{"id": 4675, "code": "String s = \"internationalization\";\nSystem.out.println(s.charAt(0) + String.valueOf(s.length() - 2) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13288, "code": "String s = \"abcde,fghihgf,edcba\";\nSystem.out.println(s.substring(0, 5) + \" \" + s.substring(6, 13) + \" \" + s.substring(14, 19));", "code_tokens": ["<0>", "String", "s", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "substring", "(", "0", ",", "5", ")", "+", "\" \"", "+", "s", ".", "substring", "(", "6", ",", "13", ")", "+", "\" \"", "+", "s", ".", "substring", "(", "14", ",", "19", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["s", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 17887, "code": "String s = \"0112\";\nif (1 <= Integer.parseInt(s.substring(0, 2)) && Integer.parseInt(s.substring(0, 2)) <= 12) {\nif (1 <= Integer.parseInt(s.substring(2)) && Integer.parseInt(s.substring(2)) <= 12) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse {\nif (1 <= Integer.parseInt(s.substring(2)) && Integer.parseInt(s.substring(2)) <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "s", "=", "\"0112\"", ";", "<1>", "if", "(", "1", "<=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ")", "<=", "12", ")", "{", "<2>", "if", "(", "1", "<=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "<=", "12", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "1", "<=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", "<=", "12", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["s", "0112"]]}, {"line": 1, "state": [["s", "0112"]]}, {"line": 2, "state": [["s", "0112"]]}, {"line": 3, "state": [["s", "0112"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 12722, "code": "int X = 5;\nif (X == 7 || X == 5 || X == 3) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "X", "=", "5", ";", "<1>", "if", "(", "X", "==", "7", "||", "X", "==", "5", "||", "X", "==", "3", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "5"]]}, {"line": 1, "state": [["X", "5"]]}, {"line": 2, "state": [["X", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 13035, "code": "System.out.println(\"753\".contains(\"6\") ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"753\"", ".", "contains", "(", "\"6\"", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 8294, "code": "int n = 3, k = 3;\nint[] num_list = {1, 2, 3};\nif ((n - k) % (k - 1) == 0) {\nSystem.out.println((n - k) / (k - 1) + 1);\n} else {\nSystem.out.println((n - k) / (k - 1) + 2);}", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "num_list", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "if", "(", "(", "n", "-", "k", ")", "%", "(", "k", "-", "1", ")", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "(", "n", "-", "k", ")", "/", "(", "k", "-", "1", ")", "+", "1", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "(", "n", "-", "k", ")", "/", "(", "k", "-", "1", ")", "+", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["num_list", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["num_list", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"], ["num_list", "[ 1 , 2 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 16886, "code": "String A = \"D\";String B = \"D\";\nif (A.equals(\"H\")) {\nif (B.equals(\"H\")) {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}}\nelse if (A.equals(\"D\")) {\nif (B.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "A", "=", "\"D\"", ";", "String", "B", "=", "\"D\"", ";", "<1>", "if", "(", "A", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "if", "(", "B", ".", "equals", "(", "\"H\"", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "}", "<6>", "else", "if", "(", "A", ".", "equals", "(", "\"D\"", ")", ")", "{", "<7>", "if", "(", "B", ".", "equals", "(", "\"H\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["A", "D"], ["B", "D"]]}, {"line": 1, "state": [["A", "D"], ["B", "D"]]}, {"line": 6, "state": [["A", "D"], ["B", "D"]]}, {"line": 7, "state": [["A", "D"], ["B", "D"]]}, {"line": 10, "state": [["A", "D"], ["B", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "6": [[6, 1, 0]], "7": [[7, 0]], "10": [[10]]}}
{"id": 11653, "code": "String S = \"SUN\";\nString[] W = {\"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nint p = 0;\nfor (int i = 0; i < 7; i++) {\np += 1;\nif (S.equals(W[i])) {\nbreak;}}\nSystem.out.println(p);", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "W", "=", "{", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "int", "p", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "7", ";", "i", "++", ")", "{", "<4>", "p", "+=", "1", ";", "<5>", "if", "(", "S", ".", "equals", "(", "W", "[", "i", "]", ")", ")", "{", "<6>", "break", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "p", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "0"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "0"], ["i", "0"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "1"], ["i", "0"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "1"], ["i", "0"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "1"], ["i", "1"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "2"], ["i", "1"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "2"], ["i", "1"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "2"], ["i", "2"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "3"], ["i", "2"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "3"], ["i", "2"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "3"], ["i", "3"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "4"], ["i", "3"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "4"], ["i", "3"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "4"], ["i", "4"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "5"], ["i", "4"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "5"], ["i", "4"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "5"], ["i", "5"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "6"], ["i", "5"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "6"], ["i", "5"]]}, {"line": 3, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "6"], ["i", "6"]]}, {"line": 4, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "7"], ["i", "6"]]}, {"line": 5, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "7"], ["i", "6"]]}, {"line": 6, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "7"], ["i", "6"]]}, {"line": 7, "state": [["S", "SUN"], ["W", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["p", "7"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3, 5, 3], [3, 5, 3, 5, 3], [3, 5, 3, 5, 3, 5, 3], [3, 5, 3, 5, 3, 5, 3, 5, 3], [3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3], [3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3]], "4": [[4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2]], "5": [[5, 3], [5, 3, 5, 3], [5, 3, 5, 3, 5, 3], [5, 3, 5, 3, 5, 3, 5, 3], [5, 3, 5, 3, 5, 3, 5, 3, 5, 3], [5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3], [5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3]], "6": [[6]], "7": [[7, 4, 2]]}}
{"id": 2645, "code": "int a = 1, b = 9, c = 7, d = 4;\nif (a * b * c * d == 1 * 9 * 7 * 4) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ",", "b", "=", "9", ",", "c", "=", "7", ",", "d", "=", "4", ";", "<1>", "if", "(", "a", "*", "b", "*", "c", "*", "d", "==", "1", "*", "9", "*", "7", "*", "4", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"]]}, {"line": 1, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"]]}, {"line": 2, "state": [["a", "1"], ["b", "9"], ["c", "7"], ["d", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 5080, "code": "char[] S = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nSystem.out.println(S[0] + (S.length - 2) + S[S.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "S", "[", "0", "]", "+", "(", "S", ".", "length", "-", "2", ")", "+", "S", "[", "S", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["S", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1976, "code": "int n = 10, a = 3, b = 5;\nSystem.out.println(Math.min(a, b));\nif (a + b < n) {System.out.println(0);}\nelse {System.out.println(a + b - n);}", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", ")", ";", "<2>", "if", "(", "a", "+", "b", "<", "n", ")", "{", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "System", ".", "out", ".", "println", "(", "a", "+", "b", "-", "n", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 18709, "code": "int h = 3;\nint w = 7;\nint n = 10;\nif (n % Math.max(h, w) == 0) {\nSystem.out.println(n / Math.max(h, w));} else {\nSystem.out.println(n / Math.max(h, w) + 1);}", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "if", "(", "n", "%", "Math", ".", "max", "(", "h", ",", "w", ")", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "Math", ".", "max", "(", "h", ",", "w", ")", ")", ";", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "n", "/", "Math", ".", "max", "(", "h", ",", "w", ")", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 6, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "6": [[6, 3, 2, 1, 0]]}}
{"id": 11739, "code": "int m = 11, d = 30;\nSystem.out.println(Integer.parseInt(\"12 1\".split(\" \")[1]) - d != 1 ? 1 : 0);", "code_tokens": ["<0>", "int", "m", "=", "11", ",", "d", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "Integer", ".", "parseInt", "(", "\"12 1\"", ".", "split", "(", "\" \"", ")", "[", "1", "]", ")", "-", "d", "!=", "1", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["m", "11"], ["d", "30"]]}, {"line": 1, "state": [["m", "11"], ["d", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3248, "code": "int a = 20, b = 30;\nif (a <= b + b) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(a - b - b);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<1>", "if", "(", "a", "<=", "b", "+", "b", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "a", "-", "b", "-", "b", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 3292, "code": "int a = 20, b = 15;\nint num = a - (2 * b);\nif (num >= 0) {\nSystem.out.println(num);}\nelse {System.out.println(0);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "int", "num", "=", "a", "-", "(", "2", "*", "b", ")", ";", "<2>", "if", "(", "num", ">=", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "num", ")", ";", "}", "<4>", "else", "{", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"], ["num", "-10"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"], ["num", "-10"]]}, {"line": 4, "state": [["a", "20"], ["b", "15"], ["num", "-10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4]]}}
{"id": 1348, "code": "int n = 111;\nint[] a = {111, 222, 333, 444, 555, 666, 777, 888, 999};\nint p = 0;\nwhile (a[p] < n) {\np++;}\nSystem.out.println(a[p]);", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "int", "[", "]", "a", "=", "{", "111", ",", "222", ",", "333", ",", "444", ",", "555", ",", "666", ",", "777", ",", "888", ",", "999", "}", ";", "<2>", "int", "p", "=", "0", ";", "<3>", "while", "(", "a", "[", "p", "]", "<", "n", ")", "{", "<4>", "p", "++", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "a", "[", "p", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"], ["a", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"]]}, {"line": 2, "state": [["n", "111"], ["a", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["p", "0"]]}, {"line": 3, "state": [["n", "111"], ["a", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["p", "0"]]}, {"line": 5, "state": [["n", "111"], ["a", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["p", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0]]}}
{"id": 15241, "code": "int X = 64145, Y = 123, Z = 456;\nX = X - Z;\nint A = X / (Y + Z);\nSystem.out.println(Math.round(A));", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "X", "=", "X", "-", "Z", ";", "<2>", "int", "A", "=", "X", "/", "(", "Y", "+", "Z", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "round", "(", "A", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "63689"], ["Y", "123"], ["Z", "456"]]}, {"line": 2, "state": [["X", "63689"], ["Y", "123"], ["Z", "456"], ["A", "109.0"]]}, {"line": 3, "state": [["X", "63689"], ["Y", "123"], ["Z", "456"], ["A", "109.0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13501, "code": "String x = \"abcde\";String y = \"fghihgf\";String z = \"edcba\";\nSystem.out.println(x + \" \" + y + \" \" + z);", "code_tokens": ["<0>", "String", "x", "=", "\"abcde\"", ";", "String", "y", "=", "\"fghihgf\"", ";", "String", "z", "=", "\"edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "x", "+", "\" \"", "+", "y", "+", "\" \"", "+", "z", ")", ";"], "trace": [{"line": 0, "state": [["x", "abcde"], ["y", "fghihgf"], ["z", "edcba"]]}, {"line": 1, "state": [["x", "abcde"], ["y", "fghihgf"], ["z", "edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 12025, "code": "int[] md1 = {11, 16};\nint[] md2 = {11, 17};\nSystem.out.println(md1[0] != md2[0] ? 1 : 0);", "code_tokens": ["<0>", "int", "[", "]", "md1", "=", "{", "11", ",", "16", "}", ";", "<1>", "int", "[", "]", "md2", "=", "{", "11", ",", "17", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "md1", "[", "0", "]", "!=", "md2", "[", "0", "]", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["md1", "[ 11 , 16 ]"]]}, {"line": 1, "state": [["md1", "[ 11 , 16 ]"], ["md2", "[ 11 , 17 ]"]]}, {"line": 2, "state": [["md1", "[ 11 , 16 ]"], ["md2", "[ 11 , 17 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 1766, "code": "int n = 10, a = 3, b = 5;\nint ans1 = Math.min(a, b);\nint ans2 = a + b - n;\nans2 = Math.max(ans2, 0);\nSystem.out.println(ans1 + \" \" + ans2);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "ans1", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "ans2", "=", "a", "+", "b", "-", "n", ";", "<3>", "ans2", "=", "Math", ".", "max", "(", "ans2", ",", "0", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans1", "+", "\" \"", "+", "ans2", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"], ["ans2", "-2"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"], ["ans2", "0"]]}, {"line": 4, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"], ["ans2", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 9693, "code": "String n = \"6\";\nString s = \")))())\";\nString l = \"(\";\nString r = \")\";\nint add_right = 0, add_left = 0;\nfor (char c : s.toCharArray()) {\nif (c == l.charAt(0)) {\nadd_right += 1;}\nelse {\nif (add_right > 0) {\nadd_right -= 1;}\nelse {\nadd_left += 1;}}}\nSystem.out.println(repeat(l, add_left) + s + repeat(r, add_right));", "code_tokens": ["<0>", "String", "n", "=", "\"6\"", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "String", "l", "=", "\"(\"", ";", "<3>", "String", "r", "=", "\")\"", ";", "<4>", "int", "add_right", "=", "0", ",", "add_left", "=", "0", ";", "<5>", "for", "(", "char", "c", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<6>", "if", "(", "c", "==", "l", ".", "charAt", "(", "0", ")", ")", "{", "<7>", "add_right", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "if", "(", "add_right", ">", "0", ")", "{", "<10>", "add_right", "-=", "1", ";", "}", "<11>", "else", "{", "<12>", "add_left", "+=", "1", ";", "}", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "repeat", "(", "l", ",", "add_left", ")", "+", "s", "+", "repeat", "(", "r", ",", "add_right", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["l", "("]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "0"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "0"], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "0"], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "0"], ["c", ")"]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "1"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "1"], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "1"], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "1"], ["c", ")"]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "2"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "2"], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "2"], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "2"], ["c", ")"]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", "("]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", "("]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "1"], ["add_left", "3"], ["c", "("]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "1"], ["add_left", "3"], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "1"], ["add_left", "3"], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "1"], ["add_left", "3"], ["c", ")"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "3"], ["c", ")"]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "4"], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "4"], ["c", ")"]]}, {"line": 13, "state": [["n", "6"], ["s", ")))())"], ["l", "("], ["r", ")"], ["add_right", "0"], ["add_left", "4"], ["c", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 6, 5, 1], [5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]], "7": [[7, 9, 4]], "9": [[9, 4], [9, 4], [9, 4], [9, 7, 9, 4], [9, 10, 9, 7, 9, 4]], "10": [[10, 9, 7, 9, 4]], "12": [[12, 4], [12, 4], [12, 4], [12, 4]], "13": [[13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]]}}
{"id": 7983, "code": "int N = 4, K = 3;\nint[] A = {2, 3, 1, 4};\nint ans = (int) Math.ceil((N - 1) / (double) (K - 1));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "4", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "ans", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "N", "-", "1", ")", "/", "(", "double", ")", "(", "K", "-", "1", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "4"], ["K", "3"]]}, {"line": 2, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 3, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["ans", "2"]]}, {"line": 4, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 3, 1]]}}
{"id": 1599, "code": "int n = 10, a = 7, b = 5;\nSystem.out.println(String.format(\"%d %d\", Math.min(a, b), Math.max(a + b - n, 0)));", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "Math", ".", "min", "(", "a", ",", "b", ")", ",", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2550, "code": "String s = \"1 7 9 4\";System.out.println(\"YNEOS\"[any(x -> !s.contains(String.valueOf(x)), \"1479\") ? 1 : 0]);", "code_tokens": ["<0>", "String", "s", "=", "\"1 7 9 4\"", ";", "System", ".", "out", ".", "println", "(", "\"YNEOS\"", "[", "any", "(", "x", "->", "!", "s", ".", "contains", "(", "String", ".", "valueOf", "(", "x", ")", ")", ",", "\"1479\"", ")", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": [["x", "4"]]}, {"line": 0, "state": [["x", "4"]]}, {"line": 0, "state": [["x", "4"]]}, {"line": 0, "state": [["x", "7"]]}, {"line": 0, "state": [["x", "7"]]}, {"line": 0, "state": [["x", "7"]]}, {"line": 0, "state": [["x", "9"]]}, {"line": 0, "state": [["x", "9"]]}, {"line": 0, "state": [["x", "9"]]}, {"line": 0, "state": [["x", "9"]]}, {"line": 0, "state": [["s", "1 7 9 4"]]}], "slices": {"0": [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]}}
{"id": 9427, "code": "String S = \"2017/01/31\";\nS = \"2018\" + S.substring(4);\nSystem.out.println(S);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "S", "=", "\"2018\"", "+", "S", ".", "substring", "(", "4", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2018/01/31"]]}, {"line": 2, "state": [["S", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5150, "code": "String s = \"smiles\";\nchar start = s.charAt(0);\nchar end = s.charAt(s.length() - 1);\nString length = String.valueOf(s.length() - 2);\nSystem.out.println(start + length + end);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "char", "start", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "end", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "String", "length", "=", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "start", "+", "length", "+", "end", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["start", "s"]]}, {"line": 2, "state": [["s", "smiles"], ["start", "s"], ["end", "s"]]}, {"line": 3, "state": [["s", "smiles"], ["start", "s"], ["end", "s"], ["length", "4"]]}, {"line": 4, "state": [["s", "smiles"], ["start", "s"], ["end", "s"], ["length", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 1291, "code": "int n = 111;\nint[] l = {111, 222, 333, 444, 555, 666, 777, 888, 999};\nfor (int i = 0; i < l.length; i++) {\nif (n <= l[i]) {\nSystem.out.println(l[i]);\nbreak;}}", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "int", "[", "]", "l", "=", "{", "111", ",", "222", ",", "333", ",", "444", ",", "555", ",", "666", ",", "777", ",", "888", ",", "999", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l", ".", "length", ";", "i", "++", ")", "{", "<3>", "if", "(", "n", "<=", "l", "[", "i", "]", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "l", "[", "i", "]", ")", ";", "<5>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"], ["l", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"]]}, {"line": 2, "state": [["n", "111"], ["l", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["i", "0"]]}, {"line": 3, "state": [["n", "111"], ["l", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["i", "0"]]}, {"line": 4, "state": [["n", "111"], ["l", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["i", "0"]]}, {"line": 5, "state": [["n", "111"], ["l", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5]]}}
{"id": 3932, "code": "int x = 64146, y = 123, z = 456;\nint ans = (int) ((x - z) / (y + z));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "ans", "=", "(", "int", ")", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 6870, "code": "String h = \"20\";String n = \"3\";\nString[] a = {\"4\", \"5\", \"6\"};\nint attack = 0;\nfor (int i = 0; i < Integer.parseInt(n); i++) {\nattack += Integer.parseInt(a[i]);}\nif (Integer.parseInt(h) - attack <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "h", "=", "\"20\"", ";", "String", "n", "=", "\"3\"", ";", "<1>", "String", "[", "]", "a", "=", "{", "\"4\"", ",", "\"5\"", ",", "\"6\"", "}", ";", "<2>", "int", "attack", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "Integer", ".", "parseInt", "(", "n", ")", ";", "i", "++", ")", "{", "<4>", "attack", "+=", "Integer", ".", "parseInt", "(", "a", "[", "i", "]", ")", ";", "}", "<5>", "if", "(", "Integer", ".", "parseInt", "(", "h", ")", "-", "attack", "<=", "0", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "0"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "0"], ["i", "0"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "4"], ["i", "0"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "4"], ["i", "1"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "9"], ["i", "1"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "9"], ["i", "2"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "15"], ["i", "2"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "15"], ["i", "2"]]}, {"line": 5, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "15"], ["i", "2"]]}, {"line": 8, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["attack", "15"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0]], "5": [[5, 3, 4, 3, 4, 3, 4, 3, 0]], "8": [[8]]}}
{"id": 8758, "code": "int N = 7;\nint[] a1 = {3, 3, 4, 5, 4, 5, 3};\nint[] a2 = {5, 3, 4, 4, 2, 3, 2};\nint maxim = 0;\nfor (int i = 0; i < N; i++) {\nint count = 0;\nfor (int j = 0; j <= i; j++) {count += a1[j];}for (int j = i; j < N; j++) {count += a2[j];}\nif (count > maxim) {\nmaxim = count;}}\nSystem.out.println(maxim);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "a1", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "maxim", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "count", "=", "0", ";", "<6>", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "count", "+=", "a1", "[", "j", "]", ";", "}", "for", "(", "int", "j", "=", "i", ";", "j", "<", "N", ";", "j", "++", ")", "{", "count", "+=", "a2", "[", "j", "]", ";", "}", "<7>", "if", "(", "count", ">", "maxim", ")", "{", "<8>", "maxim", "=", "count", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "maxim", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "0"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "0"], ["i", "0"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "0"], ["i", "0"], ["count", "26"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "0"], ["i", "0"], ["count", "26"]]}, {"line": 8, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "0"], ["count", "26"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "1"], ["count", "26"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "1"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "1"], ["count", "24"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "1"], ["count", "24"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "2"], ["count", "24"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "2"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "2"], ["count", "25"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "2"], ["count", "25"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "3"], ["count", "25"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "3"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "3"], ["count", "26"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "3"], ["count", "26"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "4"], ["count", "26"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "4"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "4"], ["count", "26"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "4"], ["count", "26"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "5"], ["count", "26"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "5"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "5"], ["count", "29"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "26"], ["i", "5"], ["count", "29"]]}, {"line": 8, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "5"], ["count", "29"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "6"], ["count", "29"]]}, {"line": 5, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "6"], ["count", "0"]]}, {"line": 6, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "6"], ["count", "29"]]}, {"line": 7, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "6"], ["count", "29"]]}, {"line": 4, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "6"], ["count", "29"]]}, {"line": 9, "state": [["N", "7"], ["a1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxim", "29"], ["i", "6"], ["count", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5], [4, 6, 5, 8, 7, 6, 5], [4, 6, 5, 7, 6, 5, 8, 7, 6, 5], [4, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [4, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [4, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [4, 6, 5, 8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5]], "5": [[5], [5, 8, 7, 6, 5], [5, 7, 6, 5, 8, 7, 6, 5], [5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [5, 8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5]], "6": [[6, 5], [6, 5, 8, 7, 6, 5], [6, 5, 7, 6, 5, 8, 7, 6, 5], [6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [6, 5, 8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5]], "7": [[7, 6, 5], [7, 6, 5, 8, 7, 6, 5], [7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5], [7, 6, 5, 8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5]], "8": [[8, 7, 6, 5], [8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5]], "9": [[9, 7, 6, 5, 8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 8, 7, 6, 5]]}}
{"id": 9445, "code": "String a = \"2017/01/31\";\nString b = \"2018\" + a.substring(4);\nSystem.out.println(b);", "code_tokens": ["<0>", "String", "a", "=", "\"2017/01/31\"", ";", "<1>", "String", "b", "=", "\"2018\"", "+", "a", ".", "substring", "(", "4", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017/01/31"]]}, {"line": 1, "state": [["a", "2017/01/31"], ["b", "2018/01/31"]]}, {"line": 2, "state": [["a", "2017/01/31"], ["b", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 9282, "code": "char[] x = {'2', '0', '1', '7', '/', '0', '1', '/', '0', '7'};\nx[3] = '8';\nSystem.out.println(String.valueOf(x));", "code_tokens": ["<0>", "char", "[", "]", "x", "=", "{", "'2'", ",", "'0'", ",", "'1'", ",", "'7'", ",", "'/'", ",", "'0'", ",", "'1'", ",", "'/'", ",", "'0'", ",", "'7'", "}", ";", "<1>", "x", "[", "3", "]", "=", "'8'", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "x", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "[ 2 , 0 , 1 , 7 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 1, "state": [["x", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 2, "state": [["x", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5755, "code": "int n = 5;\nint ans = n / 2;\nif (n % 2 == 0) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(ans + 1);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "ans", "=", "n", "/", "2", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "ans", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["ans", "2"]]}, {"line": 2, "state": [["n", "5"], ["ans", "2"]]}, {"line": 5, "state": [["n", "5"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 1, 0]]}}
{"id": 11957, "code": "int m = 11, d = 30;\nint m2 = 12, d2 = 1;\nSystem.out.println(m != m2 ? 1 : 0);", "code_tokens": ["<0>", "int", "m", "=", "11", ",", "d", "=", "30", ";", "<1>", "int", "m2", "=", "12", ",", "d2", "=", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "m", "!=", "m2", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["m", "11"], ["d", "30"]]}, {"line": 1, "state": [["m", "11"], ["d", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 2, "state": [["m", "11"], ["d", "30"], ["m2", "12"], ["d2", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 339, "code": "String s = \"a\";\nint k = 25;\nint n = s.length();\nint[] a = new int[n];\nfor (int i = 0; i < n; i++) {\na[i] = s.charAt(i) - 'a';}\nfor (int i = 0; i < n; i++) {\nint need = (26 - a[i]) % 26;\nif (k >= need) {\na[i] = 0;\nk -= need;}}\nk %= 26;\nfor (int ii = 0; ii < n; ii++) {\nint i = n - 1 - ii;\nint rem = 25 - a[i];\nif (rem <= k) {\na[i] += rem;\nk -= rem;}\nelse {\na[i] += k;\nk = 0;\nbreak;}}\nchar[] ans = new char[n];\nfor (int i = 0; i < n; i++) {\nans[i] = (char) (a[i] + 'a');}\nSystem.out.println(String.valueOf(ans));", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "k", "=", "25", ";", "<2>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<3>", "int", "[", "]", "a", "=", "new", "int", "[", "n", "]", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "a", "[", "i", "]", "=", "s", ".", "charAt", "(", "i", ")", "-", "'a'", ";", "}", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "int", "need", "=", "(", "26", "-", "a", "[", "i", "]", ")", "%", "26", ";", "<8>", "if", "(", "k", ">=", "need", ")", "{", "<9>", "a", "[", "i", "]", "=", "0", ";", "<10>", "k", "-=", "need", ";", "}", "}", "<11>", "k", "%=", "26", ";", "<12>", "for", "(", "int", "ii", "=", "0", ";", "ii", "<", "n", ";", "ii", "++", ")", "{", "<13>", "int", "i", "=", "n", "-", "1", "-", "ii", ";", "<14>", "int", "rem", "=", "25", "-", "a", "[", "i", "]", ";", "<15>", "if", "(", "rem", "<=", "k", ")", "{", "<16>", "a", "[", "i", "]", "+=", "rem", ";", "<17>", "k", "-=", "rem", ";", "}", "<18>", "else", "{", "<19>", "a", "[", "i", "]", "+=", "k", ";", "<20>", "k", "=", "0", ";", "<21>", "break", ";", "}", "}", "<22>", "char", "[", "]", "ans", "=", "new", "char", "[", "n", "]", ";", "<23>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<24>", "ans", "[", "i", "]", "=", "(", "char", ")", "(", "a", "[", "i", "]", "+", "'a'", ")", ";", "}", "<25>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["k", "25"]]}, {"line": 2, "state": [["s", "a"], ["k", "25"], ["n", "1"]]}, {"line": 3, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ ]"]]}, {"line": 4, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ ]"], ["i", "0"]]}, {"line": 5, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"]]}, {"line": 4, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"]]}, {"line": 6, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"]]}, {"line": 7, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"]]}, {"line": 8, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"]]}, {"line": 9, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"]]}, {"line": 10, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"]]}, {"line": 6, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"]]}, {"line": 11, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"]]}, {"line": 12, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"], ["ii", "0"]]}, {"line": 13, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"], ["ii", "0"]]}, {"line": 14, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"]]}, {"line": 15, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 0 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"]]}, {"line": 16, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"]]}, {"line": 17, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"]]}, {"line": 12, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"]]}, {"line": 22, "state": []}, {"line": 22, "state": []}, {"line": 22, "state": [["i", "0"]]}, {"line": 22, "state": [["i", "0"]]}, {"line": 22, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"], ["ans", "[ ]"]]}, {"line": 23, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"], ["ans", "[ ]"]]}, {"line": 24, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"], ["ans", "[ z ]"]]}, {"line": 23, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"], ["ans", "[ z ]"]]}, {"line": 25, "state": [["s", "a"], ["k", "0"], ["n", "1"], ["a", "[ 25 ]"], ["i", "0"], ["need", "0"], ["ii", "0"], ["rem", "25"], ["ans", "[ z ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4, 2, 0], [4, 5, 4, 2, 0]], "5": [[5, 4, 2, 0]], "6": [[6, 4, 5, 4, 2, 0], [6, 9, 7, 6, 4, 5, 4, 2, 0]], "7": [[7, 6, 4, 5, 4, 2, 0]], "8": [[8, 7, 6, 4, 5, 4, 2, 0]], "9": [[9, 7, 6, 4, 5, 4, 2, 0]], "10": [[10, 8, 7, 6, 4, 5, 4, 2, 0]], "11": [[11, 10, 8, 7, 6, 4, 5, 4, 2, 0]], "12": [[12, 6, 9, 7, 6, 4, 5, 4, 2, 0], [12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "13": [[13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "14": [[14, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "15": [[15, 14, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "16": [[16, 15, 14, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "17": [[17, 16, 15, 14, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "22": [[22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0], [22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0], [22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0], [22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0], [22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "23": [[23, 22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0], [23, 24, 23, 22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "24": [[24, 23, 22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]], "25": [[25, 24, 23, 22, 12, 13, 12, 6, 9, 7, 6, 4, 5, 4, 2, 0]]}}
{"id": 2294, "code": "int N = 10, A = 7, B = 5;\nint ma = Math.min(A, B);\nint mi = Math.max(0, (A + B) - N);\nSystem.out.println(String.format(\"%d %d\", ma, mi));", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "mi", "=", "Math", ".", "max", "(", "0", ",", "(", "A", "+", "B", ")", "-", "N", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "ma", ",", "mi", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"], ["mi", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"], ["mi", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 9679, "code": "int N = 8;\nString motoS = \"))))((((\";\nchar[] S = motoS.toCharArray();\nint start = 0;\nint end = 0;\nfor (int i = 0; i < N; i++) {\nif (S[i] == '(') {\nend += 1;}\nelse {\nend -= 1;}\nif (end < 0) {\nstart += 1;\nend = 0;}}\nSystem.out.println(\"(\" + new String(new char[start]).replace(\"\\0\", \"(\") + motoS + \")\" + new String(new char[end]).replace(\"\\0\", \")\"));", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "String", "motoS", "=", "\"))))((((\"", ";", "<2>", "char", "[", "]", "S", "=", "motoS", ".", "toCharArray", "(", ")", ";", "<3>", "int", "start", "=", "0", ";", "<4>", "int", "end", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", "[", "i", "]", "==", "'('", ")", "{", "<7>", "end", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "end", "-=", "1", ";", "}", "<10>", "if", "(", "end", "<", "0", ")", "{", "<11>", "start", "+=", "1", ";", "<12>", "end", "=", "0", ";", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "\"(\"", "+", "new", "String", "(", "new", "char", "[", "start", "]", ")", ".", "replace", "(", "\"\\0\"", ",", "\"(\"", ")", "+", "motoS", "+", "\")\"", "+", "new", "String", "(", "new", "char", "[", "end", "]", ")", ".", "replace", "(", "\"\\0\"", ",", "\")\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "8"]]}, {"line": 1, "state": [["N", "8"], ["motoS", "))))(((("]]}, {"line": 2, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 3, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "0"]]}, {"line": 4, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "0"], ["end", "0"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "0"], ["end", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "0"], ["end", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "0"], ["end", "-1"], ["i", "0"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "0"], ["end", "-1"], ["i", "0"]]}, {"line": 11, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "1"], ["end", "-1"], ["i", "0"]]}, {"line": 12, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "1"], ["end", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "1"], ["end", "0"], ["i", "1"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "1"], ["end", "0"], ["i", "1"]]}, {"line": 9, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "1"], ["end", "-1"], ["i", "1"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "1"], ["end", "-1"], ["i", "1"]]}, {"line": 11, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "2"], ["end", "-1"], ["i", "1"]]}, {"line": 12, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "2"], ["end", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "2"], ["end", "0"], ["i", "2"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "2"], ["end", "0"], ["i", "2"]]}, {"line": 9, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "2"], ["end", "-1"], ["i", "2"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "2"], ["end", "-1"], ["i", "2"]]}, {"line": 11, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "3"], ["end", "-1"], ["i", "2"]]}, {"line": 12, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "3"], ["end", "0"], ["i", "2"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "3"], ["end", "0"], ["i", "3"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "3"], ["end", "0"], ["i", "3"]]}, {"line": 9, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "3"], ["end", "-1"], ["i", "3"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "3"], ["end", "-1"], ["i", "3"]]}, {"line": 11, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "-1"], ["i", "3"]]}, {"line": 12, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "0"], ["i", "3"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "0"], ["i", "4"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "0"], ["i", "4"]]}, {"line": 7, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "1"], ["i", "4"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "1"], ["i", "4"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "1"], ["i", "5"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "1"], ["i", "5"]]}, {"line": 7, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "2"], ["i", "5"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "2"], ["i", "5"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "2"], ["i", "6"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "2"], ["i", "6"]]}, {"line": 7, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "3"], ["i", "6"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "3"], ["i", "6"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "3"], ["i", "7"]]}, {"line": 6, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "3"], ["i", "7"]]}, {"line": 7, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "4"], ["i", "7"]]}, {"line": 10, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "4"], ["i", "7"]]}, {"line": 5, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "4"], ["i", "7"]]}, {"line": 13, "state": [["N", "8"], ["motoS", "))))(((("], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["start", "4"], ["end", "4"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 6, 5, 0], [5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "7": [[7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [7, 10, 7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [7, 10, 7, 10, 7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "9": [[9, 4], [9, 12, 10, 9, 4], [9, 12, 10, 9, 12, 10, 9, 4], [9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "10": [[10, 9, 4], [10, 9, 12, 10, 9, 4], [10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 7, 10, 7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 7, 10, 7, 10, 7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "11": [[11, 3], [11, 3], [11, 3], [11, 3]], "12": [[12, 10, 9, 4], [12, 10, 9, 12, 10, 9, 4], [12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "13": [[13, 10, 7, 10, 7, 10, 7, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]]}}
{"id": 16566, "code": "String a = \"H\";String b = \"H\";\nif (a.equals(\"H\")) {\nif (b.equals(\"H\")) {System.out.println(\"H\");}\nelse {System.out.println(\"D\");}}\nelse {\nif (b.equals(\"H\")) {System.out.println(\"D\");}\nelse {System.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "}", "<4>", "else", "{", "<5>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 13654, "code": "Scanner stdin = new Scanner(System.in);\nString a = \"abcde\";String b = \"fghihgf\";String c = \"edcba\";\nSystem.out.println(a + ' ' + b + ' ' + c);", "code_tokens": ["<0>", "Scanner", "stdin", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "String", "a", "=", "\"abcde\"", ";", "String", "b", "=", "\"fghihgf\"", ";", "String", "c", "=", "\"edcba\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", "+", "' '", "+", "b", "+", "' '", "+", "c", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["ip", "<function>"]]}, {"line": 3, "state": [["ip", "<function>"]]}, {"line": 4, "state": [["ip", "<function>"]]}, {"line": 5, "state": [["ip", "<function>"], ["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}, {"line": 6, "state": [["ip", "<function>"], ["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2]], "5": [[5]], "6": [[6, 5]]}}
{"id": 18458, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint v = Math.max(h, w);\nint cnt = (n - 1) / v + 1;\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "v", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "int", "cnt", "=", "(", "n", "-", "1", ")", "/", "v", "+", "1", ";", "<5>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["v", "7"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["v", "7"], ["cnt", "2"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["v", "7"], ["cnt", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 15438, "code": "int x = 100000, y = 1, z = 1;\nSystem.out.println(-(-((x - z) / (y + z))));", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5895, "code": "int n = 100;\nint pages = 0;\nif (n % 2 == 1) {\npages += 1;}\npages += n / 2;\nSystem.out.println(pages);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "int", "pages", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<3>", "pages", "+=", "1", ";", "}", "<4>", "pages", "+=", "n", "/", "2", ";", "<5>", "System", ".", "out", ".", "println", "(", "pages", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"], ["pages", "0"]]}, {"line": 2, "state": [["n", "100"], ["pages", "0"]]}, {"line": 4, "state": [["n", "100"], ["pages", "50"]]}, {"line": 5, "state": [["n", "100"], ["pages", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "4": [[4, 2, 0]], "5": [[5, 4, 2, 0]]}}
{"id": 11564, "code": "System.out.println(java.util.Arrays.asList(\"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\").indexOf(\"SUN\") + 1);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", ")", ".", "indexOf", "(", "\"SUN\"", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 1366, "code": "int n = 111;\nwhile (true) {\nString tmp = Integer.toString(n);\nif (tmp.charAt(0) == tmp.charAt(1) && tmp.charAt(1) == tmp.charAt(2)) {\nSystem.out.println(n);\nbreak;}\nelse {\nn += 1;}}", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "while", "(", "true", ")", "{", "<2>", "String", "tmp", "=", "Integer", ".", "toString", "(", "n", ")", ";", "<3>", "if", "(", "tmp", ".", "charAt", "(", "0", ")", "==", "tmp", ".", "charAt", "(", "1", ")", "&&", "tmp", ".", "charAt", "(", "1", ")", "==", "tmp", ".", "charAt", "(", "2", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "<5>", "break", ";", "}", "<6>", "else", "{", "<7>", "n", "+=", "1", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"]]}, {"line": 2, "state": [["n", "111"], ["tmp", "111"]]}, {"line": 3, "state": [["n", "111"], ["tmp", "111"]]}, {"line": 4, "state": [["n", "111"], ["tmp", "111"]]}, {"line": 5, "state": [["n", "111"], ["tmp", "111"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 2, 0]], "5": [[5]]}}
{"id": 1173, "code": "int a = 111;\nwhile (String.valueOf(a).chars().distinct().count() != 1) {\na += 1;}\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "a", "=", "111", ";", "<1>", "while", "(", "String", ".", "valueOf", "(", "a", ")", ".", "chars", "(", ")", ".", "distinct", "(", ")", ".", "count", "(", ")", "!=", "1", ")", "{", "<2>", "a", "+=", "1", ";", "}", "<3>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["a", "111"]]}, {"line": 1, "state": [["a", "111"]]}, {"line": 3, "state": [["a", "111"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]]}}
{"id": 5579, "code": "Scanner scanner = new Scanner(System.in);\nint n = 2;\nSystem.out.println(n / 2 + n % 2);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "n", "=", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "n", "%", "2", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["n", "2"]]}, {"line": 4, "state": [["n", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 3]]}}
{"id": 2820, "code": "String s = \"1111111111\";\nint ans = 1000;\nfor (int i = 0; i < s.length() - 2; i++) {\nint num = Math.abs(753 - Integer.parseInt(s.substring(i, i + 3)));\nans = Math.min(ans, num);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"1111111111\"", ";", "<1>", "int", "ans", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "num", "=", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ")", ";", "<4>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "num", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "1111111111"]]}, {"line": 1, "state": [["s", "1111111111"], ["ans", "1000"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "1000"], ["i", "0"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "1000"], ["i", "0"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "0"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "1"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "1"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "1"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "2"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "2"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "2"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "3"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "3"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "3"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "4"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "4"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "4"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "5"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "5"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "5"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "6"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "6"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "6"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "7"], ["num", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["ans", "642"], ["i", "7"], ["num", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["ans", "642"], ["i", "7"], ["num", "642"]]}, {"line": 2, "state": [["s", "1111111111"], ["ans", "642"], ["i", "7"], ["num", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["ans", "642"], ["i", "7"], ["num", "642"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 18515, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint a = Math.max(w, h);\nint ans = n / a + (n % a > 0 ? 1 : 0);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "a", "=", "Math", ".", "max", "(", "w", ",", "h", ")", ";", "<4>", "int", "ans", "=", "n", "/", "a", "+", "(", "n", "%", "a", ">", "0", "?", "1", ":", "0", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"], ["ans", "2"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 15646, "code": "int X = 64145, Y = 123, Z = 456;\nint n = X / (Y + Z);\nif (X % (Y + Z) < Z) {\nSystem.out.println(n - 1);\n} else {\nSystem.out.println(n);}", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "int", "n", "=", "X", "/", "(", "Y", "+", "Z", ")", ";", "<2>", "if", "(", "X", "%", "(", "Y", "+", "Z", ")", "<", "Z", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "n", "-", "1", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["n", "110"]]}, {"line": 2, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["n", "110"]]}, {"line": 3, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["n", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]]}}
{"id": 388, "code": "String s = \"codefestival\";\nint k = 100;\nint loop = 'z' + 1;\nint remaining = k;\nStringBuilder ans = new StringBuilder();\nfor (char c : s.toCharArray()) {\nif (c == 'a') {\nans.append(c);\ncontinue;}\nint r = loop - c;\nif (r <= remaining) {\nans.append('a');\nremaining -= r;}\nelse {\nans.append(c);}}\nif (remaining > 0) {\nremaining %= 26;\nchar lastChar = ans.charAt(ans.length() - 1);ans.setCharAt(ans.length() - 1, (char) (lastChar + remaining));}\nSystem.out.println(ans.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"codefestival\"", ";", "<1>", "int", "k", "=", "100", ";", "<2>", "int", "loop", "=", "'z'", "+", "1", ";", "<3>", "int", "remaining", "=", "k", ";", "<4>", "StringBuilder", "ans", "=", "new", "StringBuilder", "(", ")", ";", "<5>", "for", "(", "char", "c", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<6>", "if", "(", "c", "==", "'a'", ")", "{", "<7>", "ans", ".", "append", "(", "c", ")", ";", "<8>", "continue", ";", "}", "<9>", "int", "r", "=", "loop", "-", "c", ";", "<10>", "if", "(", "r", "<=", "remaining", ")", "{", "<11>", "ans", ".", "append", "(", "'a'", ")", ";", "<12>", "remaining", "-=", "r", ";", "}", "<13>", "else", "{", "<14>", "ans", ".", "append", "(", "c", ")", ";", "}", "}", "<15>", "if", "(", "remaining", ">", "0", ")", "{", "<16>", "remaining", "%=", "26", ";", "<17>", "char", "lastChar", "=", "ans", ".", "charAt", "(", "ans", ".", "length", "(", ")", "-", "1", ")", ";", "ans", ".", "setCharAt", "(", "ans", ".", "length", "(", ")", "-", "1", ",", "(", "char", ")", "(", "lastChar", "+", "remaining", ")", ")", ";", "}", "<18>", "System", ".", "out", ".", "println", "(", "ans", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "codefestival"]]}, {"line": 1, "state": [["s", "codefestival"], ["k", "100"]]}, {"line": 2, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"]]}, {"line": 3, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"], ["ans", "[ ]"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"], ["ans", "[ ]"], ["c", "c"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"], ["ans", "[ ]"], ["c", "c"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"], ["ans", "[ ]"], ["c", "c"], ["r", "24"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"], ["ans", "[ ]"], ["c", "c"], ["r", "24"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "100"], ["ans", "[ a ]"], ["c", "c"], ["r", "24"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "76"], ["ans", "[ a ]"], ["c", "c"], ["r", "24"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "76"], ["ans", "[ a ]"], ["c", "o"], ["r", "24"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "76"], ["ans", "[ a ]"], ["c", "o"], ["r", "24"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "76"], ["ans", "[ a ]"], ["c", "o"], ["r", "12"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "76"], ["ans", "[ a ]"], ["c", "o"], ["r", "12"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "76"], ["ans", "[ a , a ]"], ["c", "o"], ["r", "12"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "64"], ["ans", "[ a , a ]"], ["c", "o"], ["r", "12"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "64"], ["ans", "[ a , a ]"], ["c", "d"], ["r", "12"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "64"], ["ans", "[ a , a ]"], ["c", "d"], ["r", "12"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "64"], ["ans", "[ a , a ]"], ["c", "d"], ["r", "23"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "64"], ["ans", "[ a , a ]"], ["c", "d"], ["r", "23"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "64"], ["ans", "[ a , a , a ]"], ["c", "d"], ["r", "23"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "41"], ["ans", "[ a , a , a ]"], ["c", "d"], ["r", "23"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "41"], ["ans", "[ a , a , a ]"], ["c", "e"], ["r", "23"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "41"], ["ans", "[ a , a , a ]"], ["c", "e"], ["r", "23"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "41"], ["ans", "[ a , a , a ]"], ["c", "e"], ["r", "22"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "41"], ["ans", "[ a , a , a ]"], ["c", "e"], ["r", "22"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "41"], ["ans", "[ a , a , a , a ]"], ["c", "e"], ["r", "22"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a ]"], ["c", "e"], ["r", "22"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a ]"], ["c", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"], ["r", "22"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a ]"], ["c", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"], ["r", "22"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a ]"], ["c", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"], ["r", "21"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a ]"], ["c", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"], ["r", "21"]]}, {"line": 14, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f ]"], ["c", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"], ["r", "21"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f ]"], ["c", "e"], ["r", "21"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f ]"], ["c", "e"], ["r", "21"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f ]"], ["c", "e"], ["r", "22"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f ]"], ["c", "e"], ["r", "22"]]}, {"line": 14, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f , e ]"], ["c", "e"], ["r", "22"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f , e ]"], ["c", "s"], ["r", "22"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f , e ]"], ["c", "s"], ["r", "22"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f , e ]"], ["c", "s"], ["r", "8"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f , e ]"], ["c", "s"], ["r", "8"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "19"], ["ans", "[ a , a , a , a , f , e , a ]"], ["c", "s"], ["r", "8"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "11"], ["ans", "[ a , a , a , a , f , e , a ]"], ["c", "s"], ["r", "8"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "11"], ["ans", "[ a , a , a , a , f , e , a ]"], ["c", "t"], ["r", "8"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "11"], ["ans", "[ a , a , a , a , f , e , a ]"], ["c", "t"], ["r", "8"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "11"], ["ans", "[ a , a , a , a , f , e , a ]"], ["c", "t"], ["r", "7"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "11"], ["ans", "[ a , a , a , a , f , e , a ]"], ["c", "t"], ["r", "7"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "11"], ["ans", "[ a , a , a , a , f , e , a , a ]"], ["c", "t"], ["r", "7"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a ]"], ["c", "t"], ["r", "7"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a ]"], ["c", "6"], ["r", "7"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a ]"], ["c", "6"], ["r", "7"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a ]"], ["c", "6"], ["r", "18"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a ]"], ["c", "6"], ["r", "18"]]}, {"line": 14, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i ]"], ["c", "6"], ["r", "18"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i ]"], ["c", "v"], ["r", "18"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i ]"], ["c", "v"], ["r", "18"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i ]"], ["c", "v"], ["r", "5"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i ]"], ["c", "v"], ["r", "5"]]}, {"line": 14, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v ]"], ["c", "v"], ["r", "5"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v ]"], ["c", "a"], ["r", "5"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v ]"], ["c", "a"], ["r", "5"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["c", "a"], ["r", "5"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["c", "a"], ["r", "5"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["c", "l"], ["r", "5"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["c", "l"], ["r", "5"]]}, {"line": 9, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["c", "l"], ["r", "15"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["c", "l"], ["r", "15"]]}, {"line": 14, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["c", "l"], ["r", "15"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["c", "l"], ["r", "15"]]}, {"line": 15, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["c", "l"], ["r", "15"]]}, {"line": 16, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["c", "l"], ["r", "15"]]}, {"line": 17, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["c", "l"], ["r", "15"]]}, {"line": 18, "state": [["s", "codefestival"], ["k", "100"], ["loop", "123"], ["remaining", "4"], ["ans", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["c", "l"], ["r", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4]], "5": [[5, 0], [5, 9, 6, 5, 0], [5, 9, 6, 5, 9, 6, 5, 0], [5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [5, 14, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 9, 6, 5, 0], [6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "7": [[7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "8": [[8]], "9": [[9, 6, 5, 0], [9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "10": [[10, 9, 6, 5, 0], [10, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [10, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "11": [[11, 4], [11, 4], [11, 4], [11, 4], [11, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [11, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "12": [[12, 10, 9, 6, 5, 0], [12, 10, 9, 6, 5, 9, 6, 5, 0], [12, 10, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [12, 10, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [12, 10, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [12, 10, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "14": [[14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0], [14, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "15": [[15, 10, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "16": [[16, 15, 10, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "17": [[17, 16, 15, 10, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]], "18": [[18, 17, 16, 15, 10, 9, 6, 5, 7, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 14, 9, 6, 5, 14, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 9, 6, 5, 0]]}}
{"id": 6106, "code": "int num = 5;\nif (num % 2 == 0) {\nSystem.out.println(num / 2);}\nelse {\nSystem.out.println(num / 2 + 1);}", "code_tokens": ["<0>", "int", "num", "=", "5", ";", "<1>", "if", "(", "num", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "num", "/", "2", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "num", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["num", "5"]]}, {"line": 1, "state": [["num", "5"]]}, {"line": 4, "state": [["num", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 3834, "code": "int x = 12, y = 3, z = 1;\nint i = 0;\nwhile (y * i + z * (i + 1) <= x) {\ni += 1;}\ni -= 1;\nSystem.out.println(i);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "i", "=", "0", ";", "<2>", "while", "(", "y", "*", "i", "+", "z", "*", "(", "i", "+", "1", ")", "<=", "x", ")", "{", "<3>", "i", "+=", "1", ";", "}", "<4>", "i", "-=", "1", ";", "<5>", "System", ".", "out", ".", "println", "(", "i", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "0"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "0"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "1"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "1"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "2"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "2"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "3"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "3"]]}, {"line": 4, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "2"]]}, {"line": 5, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 1, 0]], "4": [[4, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "5": [[5, 4, 2, 3, 2, 3, 2, 3, 2, 1, 0]]}}
{"id": 7256, "code": "int h = 20, n = 3;\nint[] A = {4, 5, 6};\nint attack = 0;for (int value : A) {attack += value;}\nif (h > attack) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "attack", "=", "0", ";", "for", "(", "int", "value", ":", "A", ")", "{", "attack", "+=", "value", ";", "}", "<3>", "if", "(", "h", ">", "attack", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["A", "[ 4 , 5 , 6 ]"], ["attack", "15"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["A", "[ 4 , 5 , 6 ]"], ["attack", "15"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["A", "[ 4 , 5 , 6 ]"], ["attack", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 4711, "code": "char[] s = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nSystem.out.println(String.valueOf(s[0]) + String.valueOf(s.length - 2) + String.valueOf(s[s.length - 1]));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", "[", "0", "]", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", "+", "String", ".", "valueOf", "(", "s", "[", "s", ".", "length", "-", "1", "]", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5992, "code": "int n = 5;\nif (n % 2 == 0) {\nint ans = n / 2;\nSystem.out.println(ans);}\nelse {\nint ans = n / 2 + 1;\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<2>", "int", "ans", "=", "n", "/", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<4>", "else", "{", "<5>", "int", "ans", "=", "n", "/", "2", "+", "1", ";", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 5, "state": [["n", "5"], ["ans", "3"]]}, {"line": 6, "state": [["n", "5"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "5": [[5, 1, 0]], "6": [[6, 5, 1, 0]]}}
{"id": 4108, "code": "int h_1 = 10, m_1 = 0, h_2 = 15, m_2 = 0, k = 30;\nif (m_2 - k >= 0) {\nm_2 -= k;}\nelse {\nint tmp = k - m_2;\nm_2 = 60 - tmp;\nh_2 -= 1;}\nint tmp_1 = h_1 * 60 + m_1;\nint tmp_2 = h_2 * 60 + m_2;\nint ans = tmp_2 - tmp_1;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h_1", "=", "10", ",", "m_1", "=", "0", ",", "h_2", "=", "15", ",", "m_2", "=", "0", ",", "k", "=", "30", ";", "<1>", "if", "(", "m_2", "-", "k", ">=", "0", ")", "{", "<2>", "m_2", "-=", "k", ";", "}", "<3>", "else", "{", "<4>", "int", "tmp", "=", "k", "-", "m_2", ";", "<5>", "m_2", "=", "60", "-", "tmp", ";", "<6>", "h_2", "-=", "1", ";", "}", "<7>", "int", "tmp_1", "=", "h_1", "*", "60", "+", "m_1", ";", "<8>", "int", "tmp_2", "=", "h_2", "*", "60", "+", "m_2", ";", "<9>", "int", "ans", "=", "tmp_2", "-", "tmp_1", ";", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "15"], ["m_2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "15"], ["m_2", "0"], ["k", "30"]]}, {"line": 4, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "15"], ["m_2", "0"], ["k", "30"], ["tmp", "30"]]}, {"line": 5, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "15"], ["m_2", "30"], ["k", "30"], ["tmp", "30"]]}, {"line": 6, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "14"], ["m_2", "30"], ["k", "30"], ["tmp", "30"]]}, {"line": 7, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "14"], ["m_2", "30"], ["k", "30"], ["tmp", "30"], ["tmp_1", "600"]]}, {"line": 8, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "14"], ["m_2", "30"], ["k", "30"], ["tmp", "30"], ["tmp_1", "600"], ["tmp_2", "870"]]}, {"line": 9, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "14"], ["m_2", "30"], ["k", "30"], ["tmp", "30"], ["tmp_1", "600"], ["tmp_2", "870"], ["ans", "270"]]}, {"line": 10, "state": [["h_1", "10"], ["m_1", "0"], ["h_2", "14"], ["m_2", "30"], ["k", "30"], ["tmp", "30"], ["tmp_1", "600"], ["tmp_2", "870"], ["ans", "270"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]], "6": [[6, 0]], "7": [[7, 0]], "8": [[8, 6, 0]], "9": [[9, 8, 6, 0]], "10": [[10, 9, 8, 6, 0]]}}
{"id": 2261, "code": "int n = 10, a = 7, b = 5;\nSystem.out.print(Math.min(a, b) + \" \" + (a + b - n > 0 ? a + b - n : 0));", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "System", ".", "out", ".", "print", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "(", "a", "+", "b", "-", "n", ">", "0", "?", "a", "+", "b", "-", "n", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5733, "code": "System.out.println(-(-Integer.parseInt(\"100\") / 2));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "Integer", ".", "parseInt", "(", "\"100\"", ")", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 12739, "code": "int X = 6;\nSystem.out.println((X == 3 || X == 5 || X == 7) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "int", "X", "=", "6", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "X", "==", "3", "||", "X", "==", "5", "||", "X", "==", "7", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["X", "6"]]}, {"line": 1, "state": [["X", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 10824, "code": "char[] s = {'a', 'k', 'a', 's', 'a', 'k', 'a'};\nboolean f1 = Arrays.equals(s, reverse(s));\nboolean f2 = Arrays.equals(Arrays.copyOfRange(s, 0, (s.length - 1) / 2), reverse(Arrays.copyOfRange(s, 0, (s.length - 1) / 2)));\nboolean f3 = Arrays.equals(Arrays.copyOfRange(s, (s.length + 2) / 2, s.length), reverse(Arrays.copyOfRange(s, (s.length + 2) / 2, s.length)));\nSystem.out.println((f1 && f2 && f3) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'a'", ",", "'k'", ",", "'a'", ",", "'s'", ",", "'a'", ",", "'k'", ",", "'a'", "}", ";", "<1>", "boolean", "f1", "=", "Arrays", ".", "equals", "(", "s", ",", "reverse", "(", "s", ")", ")", ";", "<2>", "boolean", "f2", "=", "Arrays", ".", "equals", "(", "Arrays", ".", "copyOfRange", "(", "s", ",", "0", ",", "(", "s", ".", "length", "-", "1", ")", "/", "2", ")", ",", "reverse", "(", "Arrays", ".", "copyOfRange", "(", "s", ",", "0", ",", "(", "s", ".", "length", "-", "1", ")", "/", "2", ")", ")", ")", ";", "<3>", "boolean", "f3", "=", "Arrays", ".", "equals", "(", "Arrays", ".", "copyOfRange", "(", "s", ",", "(", "s", ".", "length", "+", "2", ")", "/", "2", ",", "s", ".", "length", ")", ",", "reverse", "(", "Arrays", ".", "copyOfRange", "(", "s", ",", "(", "s", ".", "length", "+", "2", ")", "/", "2", ",", "s", ".", "length", ")", ")", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "f1", "&&", "f2", "&&", "f3", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ a , k , a , s , a , k , a ]"]]}, {"line": 1, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["f1", "True"]]}, {"line": 2, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["f1", "True"], ["f2", "True"]]}, {"line": 3, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["f1", "True"], ["f2", "True"], ["f3", "True"]]}, {"line": 4, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["f1", "True"], ["f2", "True"], ["f3", "True"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 16766, "code": "char[] S = {'D', 'D'};\nif (S[0] == S[1]) {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'D'", ",", "'D'", "}", ";", "<1>", "if", "(", "S", "[", "0", "]", "==", "S", "[", "1", "]", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "[ D , D ]"]]}, {"line": 1, "state": [["S", "[ D , D ]"]]}, {"line": 2, "state": [["S", "[ D , D ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 12373, "code": "String s = \"akasaka\";\nchar[] sArray = s.toCharArray();\nString s1 = new String(sArray, 0, sArray.length / 2);\nString s2 = new String(sArray, sArray.length / 2 + 1, sArray.length - (sArray.length / 2 + 1));\nif (s1.equals(s2)) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "s", "=", "\"akasaka\"", ";", "<1>", "char", "[", "]", "sArray", "=", "s", ".", "toCharArray", "(", ")", ";", "<2>", "String", "s1", "=", "new", "String", "(", "sArray", ",", "0", ",", "sArray", ".", "length", "/", "2", ")", ";", "<3>", "String", "s2", "=", "new", "String", "(", "sArray", ",", "sArray", ".", "length", "/", "2", "+", "1", ",", "sArray", ".", "length", "-", "(", "sArray", ".", "length", "/", "2", "+", "1", ")", ")", ";", "<4>", "if", "(", "s1", ".", "equals", "(", "s2", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "akasaka"]]}, {"line": 1, "state": [["s", "[ a , k , a , s , a , k , a ]"]]}, {"line": 2, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["s1", "[ a , k , a ]"]]}, {"line": 3, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["s1", "[ a , k , a ]"], ["s2", "[ a , k , a ]"]]}, {"line": 4, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["s1", "[ a , k , a ]"], ["s2", "[ a , k , a ]"]]}, {"line": 5, "state": [["s", "[ a , k , a , s , a , k , a ]"], ["s1", "[ a , k , a ]"], ["s2", "[ a , k , a ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5]]}}
{"id": 15957, "code": "int a = 20, b = 15;\nint ans = a - b * 2;\nif (ans < 0) {\nans = 0;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "int", "ans", "=", "a", "-", "b", "*", "2", ";", "<2>", "if", "(", "ans", "<", "0", ")", "{", "<3>", "ans", "=", "0", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"], ["ans", "-10"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"], ["ans", "-10"]]}, {"line": 3, "state": [["a", "20"], ["b", "15"], ["ans", "0"]]}, {"line": 4, "state": [["a", "20"], ["b", "15"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 5618, "code": "int N = 2;\nint ans = (int) Math.ceil(N / 2.0);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "ans", "=", "(", "int", ")", "Math", ".", "ceil", "(", "N", "/", "2.0", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"]]}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"], ["ans", "1"]]}, {"line": 3, "state": [["N", "2"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 9547, "code": "String S = \"2017/01/31\";\nString s = \"\";\nfor (int i = 0; i < 10; i++) {\nif (i == 3) {\ns += \"8\";}\nelse {\ns += S.charAt(i);}}\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "String", "s", "=", "\"\"", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "10", ";", "i", "++", ")", "{", "<3>", "if", "(", "i", "==", "3", ")", "{", "<4>", "s", "+=", "\"8\"", ";", "}", "<5>", "else", "{", "<6>", "s", "+=", "S", ".", "charAt", "(", "i", ")", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2017/01/31"], ["s", ""]]}, {"line": 2, "state": [["S", "2017/01/31"], ["s", ""], ["i", "0"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["s", ""], ["i", "0"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["s", "2"], ["i", "0"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["s", "2"], ["i", "1"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["s", "2"], ["i", "1"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["s", "20"], ["i", "1"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["s", "20"], ["i", "2"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["s", "20"], ["i", "2"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "2"], ["s", "201"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "3"], ["s", "201"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "3"], ["s", "201"]]}, {"line": 4, "state": [["S", "2017/01/31"], ["i", "3"], ["s", "2018"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "4"], ["s", "2018"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "4"], ["s", "2018"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "4"], ["s", "2018/"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "5"], ["s", "2018/"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "5"], ["s", "2018/"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "5"], ["s", "2018/0"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "6"], ["s", "2018/0"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "6"], ["s", "2018/0"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "6"], ["s", "2018/01"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "7"], ["s", "2018/01"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "7"], ["s", "2018/01"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "7"], ["s", "2018/01/"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "8"], ["s", "2018/01/"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "8"], ["s", "2018/01/"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "8"], ["s", "2018/01/3"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "9"], ["s", "2018/01/3"]]}, {"line": 3, "state": [["S", "2017/01/31"], ["i", "9"], ["s", "2018/01/3"]]}, {"line": 6, "state": [["S", "2017/01/31"], ["i", "9"], ["s", "2018/01/31"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["i", "9"], ["s", "2018/01/31"]]}, {"line": 7, "state": [["S", "2017/01/31"], ["i", "9"], ["s", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2]], "3": [[3, 2], [3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2]], "4": [[4, 6, 3, 2, 6, 3, 2, 6, 3, 2]], "6": [[6, 3, 2], [6, 3, 2, 6, 3, 2], [6, 3, 2, 6, 3, 2, 6, 3, 2], [6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2], [6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2]], "7": [[7, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2, 3, 2, 6, 3, 2, 6, 3, 2, 6, 3, 2]]}}
{"id": 16258, "code": "int n = 2;\nint[] a = {100, 0};\njava.util.Arrays.sort(a);\ndouble x = a[a.length - 1] / 2.0;\nint ans = 0;\ndouble dis = Double.POSITIVE_INFINITY;\nfor (int i = 0; i < n - 1; i++) {\nif (dis > Math.abs(x - a[i])) {\nans = a[i];\ndis = Math.abs(x - a[i]);}}\nSystem.out.println(a[a.length - 1] + \" \" + ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "double", "x", "=", "a", "[", "a", ".", "length", "-", "1", "]", "/", "2.0", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "double", "dis", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<7>", "if", "(", "dis", ">", "Math", ".", "abs", "(", "x", "-", "a", "[", "i", "]", ")", ")", "{", "<8>", "ans", "=", "a", "[", "i", "]", ";", "<9>", "dis", "=", "Math", ".", "abs", "(", "x", "-", "a", "[", "i", "]", ")", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "a", "[", "a", ".", "length", "-", "1", "]", "+", "\" \"", "+", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "inf"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "inf"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "inf"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "inf"], ["i", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "50.0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "50.0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["x", "50.0"], ["ans", "0"], ["dis", "50.0"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5]], "6": [[6, 0], [6, 9, 8, 7, 6, 0]], "7": [[7, 6, 0]], "8": [[8, 7, 6, 0]], "9": [[9, 8, 7, 6, 0]], "10": [[10, 9, 8, 7, 6, 0]]}}
{"id": 4511, "code": "String a = \"smiles\";\nSystem.out.println(a.charAt(0) + String.valueOf(a.length() - 2) + a.charAt(a.length() - 1));", "code_tokens": ["<0>", "String", "a", "=", "\"smiles\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "a", ".", "length", "(", ")", "-", "2", ")", "+", "a", ".", "charAt", "(", "a", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "smiles"]]}, {"line": 1, "state": [["a", "smiles"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4060, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nSystem.out.println(H2 * 60 + M2 - H1 * 60 - M1 - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "H2", "*", "60", "+", "M2", "-", "H1", "*", "60", "-", "M1", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3947, "code": "int x = 100000, y = 1, z = 1;\nx -= z;\nint r = x / (y + z);\nSystem.out.println(r);", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "x", "-=", "z", ";", "<2>", "int", "r", "=", "x", "/", "(", "y", "+", "z", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "r", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "99999"], ["y", "1"], ["z", "1"]]}, {"line": 2, "state": [["x", "99999"], ["y", "1"], ["z", "1"], ["r", "49999"]]}, {"line": 3, "state": [["x", "99999"], ["y", "1"], ["z", "1"], ["r", "49999"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 15302, "code": "int X = 64145, Y = 123, Z = 456;\nSystem.out.println((int)((X - Z) / (Y + Z)));", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "(", "(", "X", "-", "Z", ")", "/", "(", "Y", "+", "Z", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16822, "code": "String ab = \"D H\";\nSystem.out.println(ab.charAt(0) == 'D' ? \"H\" : \"D\");", "code_tokens": ["<0>", "String", "ab", "=", "\"D H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "ab", ".", "charAt", "(", "0", ")", "==", "'D'", "?", "\"H\"", ":", "\"D\"", ")", ";"], "trace": [{"line": 0, "state": [["ab", "D H"]]}, {"line": 1, "state": [["ab", "D H"]]}, {"line": 0, "state": [["ab", "D H"]]}, {"line": 0, "state": [["ab", "D H"]]}, {"line": 0, "state": [["ab", "D H"]]}], "slices": {"0": [[0], [0], [0], [0]], "1": [[1, 0]]}}
{"id": 11253, "code": "String S = \"SUN\";\nString[] youbi = {\"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nSystem.out.println(java.util.Arrays.asList(youbi).indexOf(S) + 1);", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "youbi", "=", "{", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "youbi", ")", ".", "indexOf", "(", "S", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["youbi", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["S", "SUN"], ["youbi", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 16340, "code": "int n = 5;\nInteger[] arr = {6, 9, 4, 2, 11};\nArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(arr));\nint i = getMax(arrayList);\narrayList.remove(Integer.valueOf(i));\nint j = getMinKey(arrayList, i);\nSystem.out.println(i + \" \" + j);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "Integer", "[", "]", "arr", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "ArrayList", "<", "Integer", ">", "arrayList", "=", "new", "ArrayList", "<", ">", "(", "Arrays", ".", "asList", "(", "arr", ")", ")", ";", "<3>", "int", "i", "=", "getMax", "(", "arrayList", ")", ";", "<4>", "arrayList", ".", "remove", "(", "Integer", ".", "valueOf", "(", "i", ")", ")", ";", "<5>", "int", "j", "=", "getMinKey", "(", "arrayList", ",", "i", ")", ";", "<6>", "System", ".", "out", ".", "println", "(", "i", "+", "\" \"", "+", "j", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["arr", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["arr", "[ 6 , 9 , 4 , 2 , 11 ]"], ["i", "11"]]}, {"line": 3, "state": [["n", "5"], ["arr", "[ 6 , 9 , 4 , 2 ]"], ["i", "11"]]}, {"line": 4, "state": [["a", "6"]]}, {"line": 4, "state": [["a", "6"]]}, {"line": 4, "state": [["a", "6"]]}, {"line": 4, "state": [["a", "9"]]}, {"line": 4, "state": [["a", "9"]]}, {"line": 4, "state": [["a", "9"]]}, {"line": 4, "state": [["a", "4"]]}, {"line": 4, "state": [["a", "4"]]}, {"line": 4, "state": [["a", "4"]]}, {"line": 4, "state": [["a", "2"]]}, {"line": 4, "state": [["a", "2"]]}, {"line": 4, "state": [["a", "2"]]}, {"line": 4, "state": [["n", "5"], ["arr", "[ 6 , 9 , 4 , 2 ]"], ["i", "11"], ["j", "6"]]}, {"line": 5, "state": [["n", "5"], ["arr", "[ 6 , 9 , 4 , 2 ]"], ["i", "11"], ["j", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]]}}
{"id": 2679, "code": "System.out.println(\"YNEOS\"[isSortedNotEqual(\"4 9 0 8\", \"   1479\") ? 0 : 1]);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"YNEOS\"", "[", "isSortedNotEqual", "(", "\"4 9 0 8\"", ",", "\"   1479\"", ")", "?", "0", ":", "1", "]", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 6348, "code": "int N = 6;\nint[] A = {2, 3, 6, 14, 53, 159};\nint[] B = {58, 9, 79, 323, 84, 6};\nint[] C = {2, 50, 79, 288, 383, 2643};\nint ans = 0;\nfor (int b : B) {\nint lenA = bisectLeft(A, b);\nint lenC = N - bisectLeft(C, b);\nans += lenA * lenC;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", ",", "3", ",", "6", ",", "14", ",", "53", ",", "159", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "58", ",", "9", ",", "79", ",", "323", ",", "84", ",", "6", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "2", ",", "50", ",", "79", ",", "288", ",", "383", ",", "2643", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "B", ")", "{", "<6>", "int", "lenA", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<7>", "int", "lenC", "=", "N", "-", "bisectLeft", "(", "C", ",", "b", ")", ";", "<8>", "ans", "+=", "lenA", "*", "lenC", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "6"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"], ["lenA", "5"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"], ["lenA", "5"], ["lenC", "4"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "58"], ["lenA", "5"], ["lenC", "4"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"], ["lenA", "5"], ["lenC", "4"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"], ["lenA", "3"], ["lenC", "4"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"], ["lenA", "3"], ["lenC", "5"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "9"], ["lenA", "3"], ["lenC", "5"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"], ["lenA", "3"], ["lenC", "5"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"], ["lenA", "5"], ["lenC", "5"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"], ["lenA", "5"], ["lenC", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "79"], ["lenA", "5"], ["lenC", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"], ["lenA", "5"], ["lenC", "3"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"], ["lenA", "6"], ["lenC", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"], ["lenA", "6"], ["lenC", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "323"], ["lenA", "6"], ["lenC", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"], ["lenA", "6"], ["lenC", "2"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"], ["lenA", "5"], ["lenC", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"], ["lenA", "5"], ["lenC", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "84"], ["lenA", "5"], ["lenC", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"], ["lenA", "5"], ["lenC", "3"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"], ["lenA", "2"], ["lenC", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"], ["lenA", "2"], ["lenC", "5"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"], ["lenA", "2"], ["lenC", "5"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"], ["lenA", "2"], ["lenC", "5"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"], ["lenA", "2"], ["lenC", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 4079, "code": "int h1 = 10, m1 = 0, h2 = 12, m2 = 0, k = 120;\nint time1 = h1 * 60 + m1;\nint time2 = h2 * 60 + m2;\nSystem.out.println(Math.max(time2 - k - time1, 0));", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "12", ",", "m2", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "time1", "=", "h1", "*", "60", "+", "m1", ";", "<2>", "int", "time2", "=", "h2", "*", "60", "+", "m2", ";", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "time2", "-", "k", "-", "time1", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["time1", "600"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["time1", "600"], ["time2", "720"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["time1", "600"], ["time2", "720"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 15891, "code": "int a = 64146, b = 123, c = 456;\nint n = a / (b + c);\nint m = a - n * (b + c);\nif (m / c == 1) {\nSystem.out.println(n);\n} else {\nSystem.out.println(n - 1);}", "code_tokens": ["<0>", "int", "a", "=", "64146", ",", "b", "=", "123", ",", "c", "=", "456", ";", "<1>", "int", "n", "=", "a", "/", "(", "b", "+", "c", ")", ";", "<2>", "int", "m", "=", "a", "-", "n", "*", "(", "b", "+", "c", ")", ";", "<3>", "if", "(", "m", "/", "c", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "n", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "64146"], ["b", "123"], ["c", "456"]]}, {"line": 1, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["n", "110"]]}, {"line": 2, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["n", "110"], ["m", "456"]]}, {"line": 3, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["n", "110"], ["m", "456"]]}, {"line": 4, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["n", "110"], ["m", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 2, 1, 0]]}}
{"id": 2697, "code": "java.util.Set<Integer> s = new java.util.HashSet<>();s.add(1);s.add(4);s.add(9);s.add(7);\nif (s.equals(new java.util.HashSet<>(java.util.Arrays.asList(1, 7, 9, 4)))) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "java", ".", "util", ".", "Set", "<", "Integer", ">", "s", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "s", ".", "add", "(", "1", ")", ";", "s", ".", "add", "(", "4", ")", ";", "s", ".", "add", "(", "9", ")", ";", "s", ".", "add", "(", "7", ")", ";", "<1>", "if", "(", "s", ".", "equals", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "7", ",", "9", ",", "4", ")", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 1, "state": [["s", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 2, "state": [["s", "{ 1 , 4 , 9 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 4764, "code": "String s = \"xyz\";\nint l = s.length() - 2;\nSystem.out.print(s.charAt(0));System.out.print(l);System.out.print(s.charAt(l + 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "l", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "0", ")", ")", ";", "System", ".", "out", ".", "print", "(", "l", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "l", "+", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["l", "1"]]}, {"line": 2, "state": [["s", "xyz"], ["l", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5132, "code": "char[] s = {'s', 'm', 'i', 'l', 'e', 's'};\nString y = String.valueOf(s.length - 2);\nSystem.out.println(s[0] + y + s[s.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'s'", ",", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", ",", "'s'", "}", ";", "<1>", "String", "y", "=", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", "[", "0", "]", "+", "y", "+", "s", "[", "s", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ s , m , i , l , e , s ]"]]}, {"line": 1, "state": [["s", "[ s , m , i , l , e , s ]"], ["y", "4"]]}, {"line": 2, "state": [["s", "[ s , m , i , l , e , s ]"], ["y", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 6180, "code": "int N = 3;\nint[] a = {1, 1, 1};\nint[] b = {2, 2, 2};\nint[] c = {3, 3, 3};\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nint total = 0;\nfor (int i = 0; i < N; i++) {\nint leftCount = bisectLeft(a, b[i]);int rightCount = N - bisectRight(c, b[i]);total += leftCount * rightCount;}\nSystem.out.println(total);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "total", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<9>", "int", "leftCount", "=", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", ";", "int", "rightCount", "=", "N", "-", "bisectRight", "(", "c", ",", "b", "[", "i", "]", ")", ";", "total", "+=", "leftCount", "*", "rightCount", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "total", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "0"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "9"], ["i", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "9"], ["i", "1"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "18"], ["i", "1"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "18"], ["i", "2"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "27"], ["i", "2"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "27"], ["i", "2"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["total", "27"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8]], "9": [[9, 1], [9, 10, 9, 1], [9, 10, 9, 10, 9, 1], [9, 10, 9, 10, 9, 10, 9, 1]], "10": [[10, 9, 1], [10, 9, 10, 9, 1], [10, 9, 10, 9, 10, 9, 1]], "11": [[11, 10, 9, 10, 9, 10, 9, 1]]}}
{"id": 5514, "code": "int N = 100;\nint g = N / 2;\nint k = (N + 1) / 2;\nif (N % 2 == 0) {\nSystem.out.println(g);}\nelse {\nSystem.out.println(k);}", "code_tokens": ["<0>", "int", "N", "=", "100", ";", "<1>", "int", "g", "=", "N", "/", "2", ";", "<2>", "int", "k", "=", "(", "N", "+", "1", ")", "/", "2", ";", "<3>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "g", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "k", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "100"]]}, {"line": 1, "state": [["N", "100"], ["g", "50"]]}, {"line": 2, "state": [["N", "100"], ["g", "50"], ["k", "50"]]}, {"line": 3, "state": [["N", "100"], ["g", "50"], ["k", "50"]]}, {"line": 4, "state": [["N", "100"], ["g", "50"], ["k", "50"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 1, 0]]}}
{"id": 8996, "code": "int a = 1;\nint b = 2;\nint c = 4;\nint d = 8;\nint e = 9;\nint k = 15;\njava.util.List<Integer> l = new java.util.ArrayList<>();\nl.add(b - a);\nl.add(c - a);\nl.add(d - a);\nl.add(e - a);\nl.add(c - b);\nl.add(d - b);\nl.add(e - b);\nl.add(d - c);\nl.add(e - c);\nl.add(e - d);\nif (java.util.Collections.max(l) <= k) {\nSystem.out.println(\"Yay!\");\n} else {\nSystem.out.println(\":(\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ";", "<1>", "int", "b", "=", "2", ";", "<2>", "int", "c", "=", "4", ";", "<3>", "int", "d", "=", "8", ";", "<4>", "int", "e", "=", "9", ";", "<5>", "int", "k", "=", "15", ";", "<6>", "java", ".", "util", ".", "List", "<", "Integer", ">", "l", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "<7>", "l", ".", "add", "(", "b", "-", "a", ")", ";", "<8>", "l", ".", "add", "(", "c", "-", "a", ")", ";", "<9>", "l", ".", "add", "(", "d", "-", "a", ")", ";", "<10>", "l", ".", "add", "(", "e", "-", "a", ")", ";", "<11>", "l", ".", "add", "(", "c", "-", "b", ")", ";", "<12>", "l", ".", "add", "(", "d", "-", "b", ")", ";", "<13>", "l", ".", "add", "(", "e", "-", "b", ")", ";", "<14>", "l", ".", "add", "(", "d", "-", "c", ")", ";", "<15>", "l", ".", "add", "(", "e", "-", "c", ")", ";", "<16>", "l", ".", "add", "(", "e", "-", "d", ")", ";", "<17>", "if", "(", "java", ".", "util", ".", "Collections", ".", "max", "(", "l", ")", "<=", "k", ")", "{", "<18>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "<19>", "}", "else", "{", "<20>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "2"]]}, {"line": 2, "state": [["a", "1"], ["b", "2"], ["c", "4"]]}, {"line": 3, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"]]}, {"line": 4, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"]]}, {"line": 5, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 6, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ ]"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 ]"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 ]"]]}, {"line": 9, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 ]"]]}, {"line": 10, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 ]"]]}, {"line": 11, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 ]"]]}, {"line": 12, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 ]"]]}, {"line": 13, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 , 7 ]"]]}, {"line": 14, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 , 7 , 4 ]"]]}, {"line": 15, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 , 7 , 4 , 5 ]"]]}, {"line": 16, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 , 7 , 4 , 5 , 1 ]"]]}, {"line": 17, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 , 7 , 4 , 5 , 1 ]"]]}, {"line": 18, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["l", "[ 1 , 3 , 7 , 8 , 2 , 6 , 7 , 4 , 5 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 6, 1, 0]], "8": [[8, 7, 6, 1, 0]], "9": [[9, 8, 7, 6, 1, 0]], "10": [[10, 9, 8, 7, 6, 1, 0]], "11": [[11, 10, 9, 8, 7, 6, 1, 0]], "12": [[12, 11, 10, 9, 8, 7, 6, 1, 0]], "13": [[13, 12, 11, 10, 9, 8, 7, 6, 1, 0]], "14": [[14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0]], "15": [[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0]], "16": [[16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0]], "17": [[17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0]], "18": [[18]]}}
{"id": 15544, "code": "int x = 12, y = 3, z = 1;\nx -= 2 * z;\nSystem.out.println(x / (y + z) + x % (y + z) / y);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "x", "-=", "2", "*", "z", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", "+", "x", "%", "(", "y", "+", "z", ")", "/", "y", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "10"], ["y", "3"], ["z", "1"]]}, {"line": 2, "state": [["x", "10"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 7080, "code": "int H = 20, N = 3;\nint[] a = {4, 5, 6};\nif (H > sum(a)) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "if", "(", "H", ">", "sum", "(", "a", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "20"], ["N", "3"]]}, {"line": 1, "state": [["H", "20"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 6683, "code": "int H = 10, M = 3;\nint[] A = {4, 5, 6};\nint a = 0;for (int num : A) {a += num;}\nString ans;if (a >= H) {\nans = \"Yes\";\n} else {\nans = \"No\";}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "M", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "a", "=", "0", ";", "for", "(", "int", "num", ":", "A", ")", "{", "a", "+=", "num", ";", "}", "<3>", "String", "ans", ";", "if", "(", "a", ">=", "H", ")", "{", "<4>", "ans", "=", "\"Yes\"", ";", "<5>", "}", "else", "{", "<6>", "ans", "=", "\"No\"", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "10"], ["M", "3"]]}, {"line": 1, "state": [["H", "10"], ["M", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["M", "3"], ["A", "[ 4 , 5 , 6 ]"], ["a", "15"]]}, {"line": 3, "state": [["H", "10"], ["M", "3"], ["A", "[ 4 , 5 , 6 ]"], ["a", "15"]]}, {"line": 4, "state": [["H", "10"], ["M", "3"], ["A", "[ 4 , 5 , 6 ]"], ["a", "15"], ["ans", "Yes"]]}, {"line": 7, "state": [["H", "10"], ["M", "3"], ["A", "[ 4 , 5 , 6 ]"], ["a", "15"], ["ans", "Yes"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "7": [[7, 4]]}}
{"id": 11511, "code": "String[] days = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint i = 0;\nSystem.out.println(i < 7 ? 7 - i : 7);", "code_tokens": ["<0>", "String", "[", "]", "days", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "int", "i", "=", "0", ";", "<2>", "System", ".", "out", ".", "println", "(", "i", "<", "7", "?", "7", "-", "i", ":", "7", ")", ";"], "trace": [{"line": 0, "state": [["days", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["days", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}, {"line": 2, "state": [["days", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 16416, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nArrays.sort(a);\nint num = a[n - 1];\nint tmp = a[n - 2];\nfor (int j = n - 2; j >= 0; j--) {\nif (Math.abs(tmp - num / 2.0) >= Math.abs(a[j] - num / 2.0)) {\ntmp = a[j];}\nelse {\nbreak;}}\nint[] ans = {num, tmp};\nSystem.out.println(ans[0] + \" \" + ans[1]);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "num", "=", "a", "[", "n", "-", "1", "]", ";", "<4>", "int", "tmp", "=", "a", "[", "n", "-", "2", "]", ";", "<5>", "for", "(", "int", "j", "=", "n", "-", "2", ";", "j", ">=", "0", ";", "j", "--", ")", "{", "<6>", "if", "(", "Math", ".", "abs", "(", "tmp", "-", "num", "/", "2.0", ")", ">=", "Math", ".", "abs", "(", "a", "[", "j", "]", "-", "num", "/", "2.0", ")", ")", "{", "<7>", "tmp", "=", "a", "[", "j", "]", ";", "}", "<8>", "else", "{", "<9>", "break", ";", "}", "}", "<10>", "int", "[", "]", "ans", "=", "{", "num", ",", "tmp", "}", ";", "<11>", "System", ".", "out", ".", "println", "(", "ans", "[", "0", "]", "+", "\" \"", "+", "ans", "[", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "9"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "9"], ["j", "1"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "9"], ["j", "1"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "9"], ["j", "1"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "9"], ["j", "2"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "9"], ["j", "2"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "6"], ["j", "2"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "6"], ["j", "3"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "6"], ["j", "3"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "6"], ["j", "3"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "6"], ["j", "3"], ["ans", "[ 11 , 6 ]"]]}, {"line": 11, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["num", "11"], ["tmp", "6"], ["j", "3"], ["ans", "[ 11 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 0], [5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 7, 6, 5, 0], [6, 5, 7, 6, 5, 7, 6, 5, 0]], "7": [[7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 0]], "9": [[9]], "10": [[10, 6, 5, 7, 6, 5, 7, 6, 5, 0]], "11": [[11, 10, 6, 5, 7, 6, 5, 7, 6, 5, 0]]}}
{"id": 8466, "code": "int n = 1;\nint[] a1 = {2};\nint[] a2 = {3};\nint[] b1 = {0};\nint[] b2 = {0};\nfor (int i = 0; i < n; i++) {\nb1 = append(b1, b1[b1.length - 1] + a1[i]);\nb2 = append(b2, b2[b2.length - 1] + a2[i]);}\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint tmp = b1[i + 1] + b2[b2.length - 1] - b2[i];\nans = Math.max(ans, tmp);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "3", "}", ";", "<3>", "int", "[", "]", "b1", "=", "{", "0", "}", ";", "<4>", "int", "[", "]", "b2", "=", "{", "0", "}", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "b1", "=", "append", "(", "b1", ",", "b1", "[", "b1", ".", "length", "-", "1", "]", "+", "a1", "[", "i", "]", ")", ";", "<7>", "b2", "=", "append", "(", "b2", ",", "b2", "[", "b2", ".", "length", "-", "1", "]", "+", "a2", "[", "i", "]", ")", ";", "}", "<8>", "int", "ans", "=", "0", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<10>", "int", "tmp", "=", "b1", "[", "i", "+", "1", "]", "+", "b2", "[", "b2", ".", "length", "-", "1", "]", "-", "b2", "[", "i", "]", ";", "<11>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "tmp", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 ]"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 ]"], ["b2", "[ 0 ]"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 ]"], ["b2", "[ 0 ]"], ["i", "0"]]}, {"line": 6, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 ]"], ["i", "0"]]}, {"line": 7, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"]]}, {"line": 8, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"], ["ans", "0"]]}, {"line": 9, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"], ["ans", "0"]]}, {"line": 10, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"], ["ans", "0"], ["tmp", "5"]]}, {"line": 11, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"], ["ans", "5"], ["tmp", "5"]]}, {"line": 9, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"], ["ans", "5"], ["tmp", "5"]]}, {"line": 12, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["b1", "[ 0 , 2 ]"], ["b2", "[ 0 , 3 ]"], ["i", "0"], ["ans", "5"], ["tmp", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 7, 6, 5, 0]], "6": [[6, 5, 0]], "7": [[7, 6, 5, 0]], "8": [[8]], "9": [[9, 5, 7, 6, 5, 0], [9, 10, 9, 5, 7, 6, 5, 0]], "10": [[10, 9, 5, 7, 6, 5, 0]], "11": [[11, 10, 9, 5, 7, 6, 5, 0]], "12": [[12, 11, 10, 9, 5, 7, 6, 5, 0]]}}
{"id": 6932, "code": "int a = 20, b = 3;\nint[] A = {4, 5, 6};\nif (a <= Arrays.stream(A).sum()) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "if", "(", "a", "<=", "Arrays", ".", "stream", "(", "A", ")", ".", "sum", "(", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "20"], ["b", "3"]]}, {"line": 2, "state": [["a", "20"], ["b", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 3, "state": [["a", "20"], ["b", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 6, "state": [["a", "20"], ["b", "3"], ["A", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 11109, "code": "String s = \"akasaka\";\nint n = s.length();\nint cnt = 0;\nString s1 = s.substring(0, (n - 1) / 2);\nString s2 = s.substring((n + 3) / 2 - 1, n);\nfor (int i = 0; i < n / 2; i++) {\nif (s.charAt(i) != s.charAt(n - i - 1)) {\nSystem.out.println(\"No\");\nSystem.exit(0);}\nelse {\nif (s1.charAt(i) != s2.charAt(i)) {\nSystem.out.println(\"No\");\nSystem.exit(0);}}}\nSystem.out.println(\"Yes\");", "code_tokens": ["<0>", "String", "s", "=", "\"akasaka\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "cnt", "=", "0", ";", "<3>", "String", "s1", "=", "s", ".", "substring", "(", "0", ",", "(", "n", "-", "1", ")", "/", "2", ")", ";", "<4>", "String", "s2", "=", "s", ".", "substring", "(", "(", "n", "+", "3", ")", "/", "2", "-", "1", ",", "n", ")", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "/", "2", ";", "i", "++", ")", "{", "<6>", "if", "(", "s", ".", "charAt", "(", "i", ")", "!=", "s", ".", "charAt", "(", "n", "-", "i", "-", "1", ")", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<8>", "System", ".", "exit", "(", "0", ")", ";", "}", "<9>", "else", "{", "<10>", "if", "(", "s1", ".", "charAt", "(", "i", ")", "!=", "s2", ".", "charAt", "(", "i", ")", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<12>", "System", ".", "exit", "(", "0", ")", ";", "}", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";"], "trace": [{"line": 0, "state": [["s", "akasaka"]]}, {"line": 1, "state": [["s", "akasaka"], ["n", "7"]]}, {"line": 2, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"]]}, {"line": 3, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"]]}, {"line": 4, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"]]}, {"line": 5, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "0"]]}, {"line": 6, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "0"]]}, {"line": 10, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "0"]]}, {"line": 5, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "1"]]}, {"line": 6, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "1"]]}, {"line": 10, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "1"]]}, {"line": 5, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "2"]]}, {"line": 6, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "2"]]}, {"line": 10, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "2"]]}, {"line": 5, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "2"]]}, {"line": 13, "state": [["s", "akasaka"], ["n", "7"], ["cnt", "0"], ["s1", "aka"], ["s2", "aka"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 10, 6, 5, 4, 3, 1, 0], [5, 10, 6, 5, 10, 6, 5, 4, 3, 1, 0], [5, 10, 6, 5, 10, 6, 5, 10, 6, 5, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 1, 0], [6, 5, 10, 6, 5, 4, 3, 1, 0], [6, 5, 10, 6, 5, 10, 6, 5, 4, 3, 1, 0]], "10": [[10, 6, 5, 4, 3, 1, 0], [10, 6, 5, 10, 6, 5, 4, 3, 1, 0], [10, 6, 5, 10, 6, 5, 10, 6, 5, 4, 3, 1, 0]], "13": [[13]]}}
{"id": 11566, "code": "String s = \"SUN\";\nString[] l = { \"0\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\" };\nSystem.out.println(java.util.Arrays.asList(l).indexOf(s));", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "l", "=", "{", "\"0\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "l", ")", ".", "indexOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"], ["l", "[ 0 , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["s", "SUN"], ["l", "[ 0 , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 9349, "code": "String a = \"2017/01/31\";\nSystem.out.println(\"2018\" + a.substring(4));", "code_tokens": ["<0>", "String", "a", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "a", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017/01/31"]]}, {"line": 1, "state": [["a", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7410, "code": "int h = 211, a = 5;\nint[] m = {31, 41, 59, 26, 53};\nString ans = \"No\";\nif (h <= sum(m)) ans = \"Yes\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "a", "=", "5", ";", "<1>", "int", "[", "]", "m", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "String", "ans", "=", "\"No\"", ";", "<3>", "if", "(", "h", "<=", "sum", "(", "m", ")", ")", "ans", "=", "\"Yes\"", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h", "211"], ["a", "5"]]}, {"line": 1, "state": [["h", "211"], ["a", "5"], ["m", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "211"], ["a", "5"], ["m", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"]]}, {"line": 3, "state": [["h", "211"], ["a", "5"], ["m", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"]]}, {"line": 4, "state": [["h", "211"], ["a", "5"], ["m", "[ 31 , 41 , 59 , 26 , 53 ]"], ["ans", "No"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 12118, "code": "System.out.println(\"11 30\".substring(0, 2).equals(\"12 1\".substring(0, 2)) ? 0 : 1);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"11 30\"", ".", "substring", "(", "0", ",", "2", ")", ".", "equals", "(", "\"12 1\"", ".", "substring", "(", "0", ",", "2", ")", ")", "?", "0", ":", "1", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 14517, "code": "int n = 2, p = 0;\nint[] a = {1, 3};\nboolean[] flg_lst = new boolean[n];\nfor (int i = 0; i < n; i++) {\nif (a[i] % 2 == 0) {\nflg_lst[i] = true;}\nelse {\nflg_lst[i] = false;}}\nboolean foundFalse = false;for (boolean flag : flg_lst) {if (!flag) {foundFalse = true;break;}}if (foundFalse) {\nSystem.out.println((int) Math.pow(2, n - 1));}\nelse {\nif (p == 0) {\nSystem.out.println((int) Math.pow(2, n));}\nelse {\nSystem.out.println(0);}}", "code_tokens": ["<0>", "int", "n", "=", "2", ",", "p", "=", "0", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "3", "}", ";", "<2>", "boolean", "[", "]", "flg_lst", "=", "new", "boolean", "[", "n", "]", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "if", "(", "a", "[", "i", "]", "%", "2", "==", "0", ")", "{", "<5>", "flg_lst", "[", "i", "]", "=", "true", ";", "}", "<6>", "else", "{", "<7>", "flg_lst", "[", "i", "]", "=", "false", ";", "}", "}", "<8>", "boolean", "foundFalse", "=", "false", ";", "for", "(", "boolean", "flag", ":", "flg_lst", ")", "{", "if", "(", "!", "flag", ")", "{", "foundFalse", "=", "true", ";", "break", ";", "}", "}", "if", "(", "foundFalse", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", "-", "1", ")", ")", ";", "}", "<10>", "else", "{", "<11>", "if", "(", "p", "==", "0", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", ")", ")", ";", "}", "<13>", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "2"], ["p", "0"]]}, {"line": 1, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"]]}, {"line": 2, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ ]"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ ]"], ["i", "0"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ ]"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False ]"], ["i", "0"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False ]"], ["i", "1"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False ]"], ["i", "1"]]}, {"line": 7, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False , False ]"], ["i", "1"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False , False ]"], ["i", "1"]]}, {"line": 8, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False , False ]"], ["i", "1"]]}, {"line": 9, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["flg_lst", "[ False , False ]"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0]], "7": [[7, 2], [7, 2]], "8": [[8, 7, 2]], "9": [[9, 3, 4, 3, 4, 3, 0]]}}
{"id": 6173, "code": "int n = 2;\nint[] a = {1, 5};\nint[] b = {2, 4};\nint[] c = {3, 6};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint num_a = bisectLeft(a, b[i]);\nint idx_c = bisectRight(c, b[i]);\nint num_c = n - idx_c;\nans += num_a * num_c;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "int", "num_a", "=", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", ";", "<7>", "int", "idx_c", "=", "bisectRight", "(", "c", ",", "b", "[", "i", "]", ")", ";", "<8>", "int", "num_c", "=", "n", "-", "idx_c", ";", "<9>", "ans", "+=", "num_a", "*", "num_c", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 1 , 5 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["i", "0"], ["num_a", "1"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["i", "0"], ["num_a", "1"], ["idx_c", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["i", "0"], ["num_a", "1"], ["idx_c", "0"], ["num_c", "2"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["i", "0"], ["num_a", "1"], ["idx_c", "0"], ["num_c", "2"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["i", "1"], ["num_a", "1"], ["idx_c", "0"], ["num_c", "2"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["i", "1"], ["num_a", "1"], ["idx_c", "0"], ["num_c", "2"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["i", "1"], ["num_a", "1"], ["idx_c", "1"], ["num_c", "2"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["i", "1"], ["num_a", "1"], ["idx_c", "1"], ["num_c", "1"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "3"], ["i", "1"], ["num_a", "1"], ["idx_c", "1"], ["num_c", "1"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "3"], ["i", "1"], ["num_a", "1"], ["idx_c", "1"], ["num_c", "1"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "3"], ["i", "1"], ["num_a", "1"], ["idx_c", "1"], ["num_c", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 0], [6, 8, 7, 6, 0], [6, 8, 7, 6, 8, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 8, 7, 6, 0]], "8": [[8, 7, 6, 0], [8, 7, 6, 8, 7, 6, 0]], "9": [[9, 8, 7, 6, 0], [9, 8, 7, 6, 8, 7, 6, 0]], "10": [[10, 9, 8, 7, 6, 0], [10, 9, 8, 7, 6, 8, 7, 6, 0]], "11": [[11, 10, 9, 8, 7, 6, 8, 7, 6, 0]]}}
{"id": 4991, "code": "String s = \"smiles\";\nString ans = s.charAt(0) + Integer.toString(s.length() - 2) + s.charAt(s.length() - 1);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "String", "ans", "=", "s", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["ans", "s4s"]]}, {"line": 2, "state": [["s", "smiles"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15339, "code": "Scanner scanner = new Scanner(System.in);\nint x = 64145, y = 123, z = 456;\nint q = x / (y + z);\nint r = x % (y + z);\nint ans = (z <= r) ? q : q - 1;\nSystem.out.println(ans);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "x", "=", "64145", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<2>", "int", "q", "=", "x", "/", "(", "y", "+", "z", ")", ";", "<3>", "int", "r", "=", "x", "%", "(", "y", "+", "z", ")", ";", "<4>", "int", "ans", "=", "(", "z", "<=", "r", ")", "?", "q", ":", "q", "-", "1", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}, {"line": 5, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["q", "110"]]}, {"line": 6, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["q", "110"], ["r", "455"]]}, {"line": 7, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["q", "110"], ["r", "455"], ["ans", "109"]]}, {"line": 8, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["q", "110"], ["r", "455"], ["ans", "109"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 4]], "6": [[6, 5, 4]], "7": [[7, 6, 5, 4]], "8": [[8, 7, 6, 5, 4]]}}
{"id": 8059, "code": "int n = 8, k = 3;\nSystem.out.println(-((1 - n) / (k - 1)));", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "System", ".", "out", ".", "println", "(", "-", "(", "(", "1", "-", "n", ")", "/", "(", "k", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4608, "code": "String s = \"xyz\";\nSystem.out.println(s.charAt(0) + String.valueOf(s.length() - 2) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5953, "code": "int N = 5;\nif (N % 2 == 0) {\nint ans = N / 2;\n} else {\nint ans = N / 2 + 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<2>", "int", "ans", "=", "N", "/", "2", ";", "<3>", "}", "else", "{", "<4>", "int", "ans", "=", "N", "/", "2", "+", "1", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 4, "state": [["N", "5"], ["ans", "3"]]}, {"line": 5, "state": [["N", "5"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]]}}
{"id": 2117, "code": "int N = 10, A = 7, B = 5;\nint max;if (A > B) {\nmax = B;\n} else {\nmax = A;}\nint min;if (A + B > N) {\nmin = A + B - N;\n} else {\nmin = 0;}\nSystem.out.println(max + \" \" + min);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "max", ";", "if", "(", "A", ">", "B", ")", "{", "<2>", "max", "=", "B", ";", "<3>", "}", "else", "{", "<4>", "max", "=", "A", ";", "}", "<5>", "int", "min", ";", "if", "(", "A", "+", "B", ">", "N", ")", "{", "<6>", "min", "=", "A", "+", "B", "-", "N", ";", "<7>", "}", "else", "{", "<8>", "min", "=", "0", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "max", "+", "\" \"", "+", "min", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max", "5"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max", "5"]]}, {"line": 6, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max", "5"], ["min", "2"]]}, {"line": 9, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max", "5"], ["min", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 2, 1, 0]], "6": [[6, 5, 2, 1, 0]], "9": [[9, 6, 5, 2, 1, 0]]}}
{"id": 502, "code": "Scanner stdin = new Scanner(System.in);\nString alpha = \"abcdefghijklmnopqrstuvwxyz\";\nint[] nokori = new int[26];for (int i = 0; i < 26; i++) {nokori[i] = 26 - i;}nokori[0] = 0;\nString s = \"a\";\nint k = 25;\nString sin = \"\";\nfor (char i : s.toCharArray()) {\nif (nokori[alpha.indexOf(i)] <= k) {\nk -= nokori[alpha.indexOf(i)];\nsin += \"a\";\n} else {\nsin += i;}}\nint q = alpha.indexOf(sin.charAt(sin.length() - 1));\nq += k;\nSystem.out.println(sin.substring(0, sin.length() - 1) + alpha.charAt(q % 26));", "code_tokens": ["<0>", "Scanner", "stdin", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "String", "alpha", "=", "\"abcdefghijklmnopqrstuvwxyz\"", ";", "<2>", "int", "[", "]", "nokori", "=", "new", "int", "[", "26", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "26", ";", "i", "++", ")", "{", "nokori", "[", "i", "]", "=", "26", "-", "i", ";", "}", "nokori", "[", "0", "]", "=", "0", ";", "<3>", "String", "s", "=", "\"a\"", ";", "<4>", "int", "k", "=", "25", ";", "<5>", "String", "sin", "=", "\"\"", ";", "<6>", "for", "(", "char", "i", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<7>", "if", "(", "nokori", "[", "alpha", ".", "indexOf", "(", "i", ")", "]", "<=", "k", ")", "{", "<8>", "k", "-=", "nokori", "[", "alpha", ".", "indexOf", "(", "i", ")", "]", ";", "<9>", "sin", "+=", "\"a\"", ";", "<10>", "}", "else", "{", "<11>", "sin", "+=", "i", ";", "}", "}", "<12>", "int", "q", "=", "alpha", ".", "indexOf", "(", "sin", ".", "charAt", "(", "sin", ".", "length", "(", ")", "-", "1", ")", ")", ";", "<13>", "q", "+=", "k", ";", "<14>", "System", ".", "out", ".", "println", "(", "sin", ".", "substring", "(", "0", ",", "sin", ".", "length", "(", ")", "-", "1", ")", "+", "alpha", ".", "charAt", "(", "q", "%", "26", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["i", "0"]]}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "4"]]}, {"line": 3, "state": [["i", "5"]]}, {"line": 3, "state": [["i", "6"]]}, {"line": 3, "state": [["i", "7"]]}, {"line": 3, "state": [["i", "8"]]}, {"line": 3, "state": [["i", "9"]]}, {"line": 3, "state": [["i", "10"]]}, {"line": 3, "state": [["i", "11"]]}, {"line": 3, "state": [["i", "12"]]}, {"line": 3, "state": [["i", "13"]]}, {"line": 3, "state": [["i", "14"]]}, {"line": 3, "state": [["i", "15"]]}, {"line": 3, "state": [["i", "16"]]}, {"line": 3, "state": [["i", "17"]]}, {"line": 3, "state": [["i", "18"]]}, {"line": 3, "state": [["i", "19"]]}, {"line": 3, "state": [["i", "20"]]}, {"line": 3, "state": [["i", "21"]]}, {"line": 3, "state": [["i", "22"]]}, {"line": 3, "state": [["i", "23"]]}, {"line": 3, "state": [["i", "24"]]}, {"line": 3, "state": [["i", "25"]]}, {"line": 3, "state": [["i", "25"]]}, {"line": 3, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"]]}, {"line": 4, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"]]}, {"line": 5, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"]]}, {"line": 6, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", ""]]}, {"line": 7, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", ""], ["i", "a"]]}, {"line": 8, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", ""], ["i", "a"]]}, {"line": 9, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", ""], ["i", "a"]]}, {"line": 10, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", "a"], ["i", "a"]]}, {"line": 7, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", "a"], ["i", "a"]]}, {"line": 13, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", "a"], ["i", "a"], ["q", "0"]]}, {"line": 14, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", "a"], ["i", "a"], ["q", "25"]]}, {"line": 15, "state": [["alpha", "abcdefghijklmnopqrstuvwxyz"], ["nokori", "[ 0 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["s", "a"], ["k", "25"], ["sin", "a"], ["i", "a"], ["q", "25"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [7, 9, 8, 7, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "8": [[8, 7, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "9": [[9, 8, 7, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "10": [[10, 6]], "13": [[13, 10, 6]], "14": [[14, 13, 10, 6]], "15": [[15, 14, 13, 10, 6]]}}
{"id": 18105, "code": "String s = \"0112\";\nif (s.substring(0, 2).matches(\"01|02|03|04|05|06|07|08|09|10|11|12\")) {\nString l = \"m\";\n} else {\nString l = \"y\";}\nif (s.substring(2, 4).matches(\"01|02|03|04|05|06|07|08|09|10|11|12\")) {\nString r = \"m\";\n} else {\nString r = \"y\";}\nif (l + r.equals(\"mm\")) {\nSystem.out.println(\"AMBIGUOUS\");\n} else if (l + r.equals(\"my\")) {\nSystem.out.println(\"MMYY\");\n} else if (l + r.equals(\"ym\")) {\nSystem.out.println(\"YYMM\");\n} else {\nSystem.out.println(\"NA\");}", "code_tokens": ["<0>", "String", "s", "=", "\"0112\"", ";", "<1>", "if", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ".", "matches", "(", "\"01|02|03|04|05|06|07|08|09|10|11|12\"", ")", ")", "{", "<2>", "String", "l", "=", "\"m\"", ";", "<3>", "}", "else", "{", "<4>", "String", "l", "=", "\"y\"", ";", "}", "<5>", "if", "(", "s", ".", "substring", "(", "2", ",", "4", ")", ".", "matches", "(", "\"01|02|03|04|05|06|07|08|09|10|11|12\"", ")", ")", "{", "<6>", "String", "r", "=", "\"m\"", ";", "<7>", "}", "else", "{", "<8>", "String", "r", "=", "\"y\"", ";", "}", "<9>", "if", "(", "l", "+", "r", ".", "equals", "(", "\"mm\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "<11>", "}", "else", "if", "(", "l", "+", "r", ".", "equals", "(", "\"my\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "<13>", "}", "else", "if", "(", "l", "+", "r", ".", "equals", "(", "\"ym\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "<15>", "}", "else", "{", "<16>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "0112"]]}, {"line": 1, "state": [["s", "0112"]]}, {"line": 2, "state": [["s", "0112"], ["l", "m"]]}, {"line": 5, "state": [["s", "0112"], ["l", "m"]]}, {"line": 6, "state": [["s", "0112"], ["l", "m"], ["r", "m"]]}, {"line": 9, "state": [["s", "0112"], ["l", "m"], ["r", "m"]]}, {"line": 10, "state": [["s", "0112"], ["l", "m"], ["r", "m"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "5": [[5, 1, 0]], "6": [[6]], "9": [[9, 6, 2]], "10": [[10]]}}
{"id": 8888, "code": "int n = 4;\nint[] a = {1, 1, 1, 1};\nint[] b = {1, 1, 1, 1};\nint maxSum = 0;for (int i = 0; i < n; i++) {int sumA = 0;for (int j = 0; j <= i; j++) {sumA += a[j];}int sumB = 0;for (int j = i; j < n; j++) {sumB += b[j];}maxSum = Math.max(maxSum, sumA + sumB);}System.out.println(maxSum);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "maxSum", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "int", "sumA", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA", "+=", "a", "[", "j", "]", ";", "}", "int", "sumB", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumB", "+=", "b", "[", "j", "]", ";", "}", "maxSum", "=", "Math", ".", "max", "(", "maxSum", ",", "sumA", "+", "sumB", ")", ";", "}", "System", ".", "out", ".", "println", "(", "maxSum", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["i", "0"]]}, {"line": 3, "state": [["i", "0"]]}, {"line": 3, "state": [["i", "0"]]}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0]]}}
{"id": 9678, "code": "int N = 6;\nString motoS = \")))())\";\nchar[] S = motoS.toCharArray();\nint start = 0;\nint end = 0;\nfor (int i = 0; i < N; i++) {\nif (S[i] == '(') {\nend += 1;}\nelse {\nend -= 1;}\nif (end < 0) {\nstart += 1;\nend = 0;}}\nSystem.out.println(\"(\".repeat(start) + motoS + \")\".repeat(end));", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "String", "motoS", "=", "\")))())\"", ";", "<2>", "char", "[", "]", "S", "=", "motoS", ".", "toCharArray", "(", ")", ";", "<3>", "int", "start", "=", "0", ";", "<4>", "int", "end", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", "[", "i", "]", "==", "'('", ")", "{", "<7>", "end", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "end", "-=", "1", ";", "}", "<10>", "if", "(", "end", "<", "0", ")", "{", "<11>", "start", "+=", "1", ";", "<12>", "end", "=", "0", ";", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "start", ")", "+", "motoS", "+", "\")\"", ".", "repeat", "(", "end", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["motoS", ")))())"]]}, {"line": 2, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"]]}, {"line": 3, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "0"]]}, {"line": 4, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "0"], ["end", "0"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "0"], ["end", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "0"], ["end", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "0"], ["end", "-1"], ["i", "0"]]}, {"line": 10, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "0"], ["end", "-1"], ["i", "0"]]}, {"line": 11, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "1"], ["end", "-1"], ["i", "0"]]}, {"line": 12, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "1"], ["end", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "1"], ["end", "0"], ["i", "1"]]}, {"line": 6, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "1"], ["end", "0"], ["i", "1"]]}, {"line": 9, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "1"], ["end", "-1"], ["i", "1"]]}, {"line": 10, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "1"], ["end", "-1"], ["i", "1"]]}, {"line": 11, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "2"], ["end", "-1"], ["i", "1"]]}, {"line": 12, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "2"], ["end", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "2"], ["end", "0"], ["i", "2"]]}, {"line": 6, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "2"], ["end", "0"], ["i", "2"]]}, {"line": 9, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "2"], ["end", "-1"], ["i", "2"]]}, {"line": 10, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "2"], ["end", "-1"], ["i", "2"]]}, {"line": 11, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "-1"], ["i", "2"]]}, {"line": 12, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "2"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "3"]]}, {"line": 6, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "3"]]}, {"line": 7, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "1"], ["i", "3"]]}, {"line": 10, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "1"], ["i", "3"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "1"], ["i", "4"]]}, {"line": 6, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "1"], ["i", "4"]]}, {"line": 9, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "4"]]}, {"line": 10, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "4"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "5"]]}, {"line": 6, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "0"], ["i", "5"]]}, {"line": 9, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "-1"], ["i", "5"]]}, {"line": 10, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "3"], ["end", "-1"], ["i", "5"]]}, {"line": 11, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "4"], ["end", "-1"], ["i", "5"]]}, {"line": 12, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "4"], ["end", "0"], ["i", "5"]]}, {"line": 5, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "4"], ["end", "0"], ["i", "5"]]}, {"line": 13, "state": [["N", "6"], ["motoS", ")))())"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["start", "4"], ["end", "0"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 6, 5, 0], [5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "7": [[7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "9": [[9, 4], [9, 12, 10, 9, 4], [9, 12, 10, 9, 12, 10, 9, 4], [9, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [9, 10, 9, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "10": [[10, 9, 4], [10, 9, 12, 10, 9, 4], [10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 9, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [10, 9, 10, 9, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "11": [[11, 3], [11, 3], [11, 3], [11, 3]], "12": [[12, 10, 9, 4], [12, 10, 9, 12, 10, 9, 4], [12, 10, 9, 12, 10, 9, 12, 10, 9, 4], [12, 10, 9, 10, 9, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]], "13": [[13, 12, 10, 9, 10, 9, 10, 7, 12, 10, 9, 12, 10, 9, 12, 10, 9, 4]]}}
{"id": 15713, "code": "int a = 13; int b = 3; int c = 1;\nSystem.out.println((a - b - 2 * c) / (b + c) + 1);", "code_tokens": ["<0>", "int", "a", "=", "13", ";", "int", "b", "=", "3", ";", "int", "c", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "b", "-", "2", "*", "c", ")", "/", "(", "b", "+", "c", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["a", "13"], ["b", "3"], ["c", "1"]]}, {"line": 1, "state": [["a", "13"], ["b", "3"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13858, "code": "int n = 9;\nint[] lis = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint cnt = 1;\nint flag = 0;\nfor (int i = 0; i < n - 1; i++) {\nif (lis[i + 1] - lis[i] > 0) {\nif (flag == 1) {\n}\nelse if (flag == -1) {\nflag = 0;\ncnt++;}\nelse if (flag == 0) {\nflag = 1;}\n} else if (lis[i + 1] - lis[i] < 0) {\nif (flag == 1) {\nflag = 0;\ncnt++;}\nelse if (flag == -1) {\n}\nelse if (flag == 0) {\nflag = -1;}\n} else if (lis[i + 1] - lis[i] == 0) {\n}}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "n", "=", "9", ";", "<1>", "int", "[", "]", "lis", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "cnt", "=", "1", ";", "<3>", "int", "flag", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<5>", "if", "(", "lis", "[", "i", "+", "1", "]", "-", "lis", "[", "i", "]", ">", "0", ")", "{", "<6>", "if", "(", "flag", "==", "1", ")", "{", "<7>", "}", "<8>", "else", "if", "(", "flag", "==", "-", "1", ")", "{", "<9>", "flag", "=", "0", ";", "<10>", "cnt", "++", ";", "}", "<11>", "else", "if", "(", "flag", "==", "0", ")", "{", "<12>", "flag", "=", "1", ";", "}", "<13>", "}", "else", "if", "(", "lis", "[", "i", "+", "1", "]", "-", "lis", "[", "i", "]", "<", "0", ")", "{", "<14>", "if", "(", "flag", "==", "1", ")", "{", "<15>", "flag", "=", "0", ";", "<16>", "cnt", "++", ";", "}", "<17>", "else", "if", "(", "flag", "==", "-", "1", ")", "{", "<18>", "}", "<19>", "else", "if", "(", "flag", "==", "0", ")", "{", "<20>", "flag", "=", "-", "1", ";", "}", "<21>", "}", "else", "if", "(", "lis", "[", "i", "+", "1", "]", "-", "lis", "[", "i", "]", "==", "0", ")", "{", "<22>", "}", "}", "<23>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["n", "9"]]}, {"line": 1, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"]]}, {"line": 3, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"], ["i", "0"]]}, {"line": 11, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"], ["i", "0"]]}, {"line": 12, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "1"], ["i", "1"]]}, {"line": 13, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "1"], ["i", "1"]]}, {"line": 14, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "1"], ["i", "1"]]}, {"line": 15, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["flag", "0"], ["i", "1"]]}, {"line": 16, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "1"]]}, {"line": 22, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "2"]]}, {"line": 8, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "2"]]}, {"line": 12, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "1"], ["i", "2"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "1"], ["i", "3"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "1"], ["i", "3"]]}, {"line": 13, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "1"], ["i", "3"]]}, {"line": 14, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "1"], ["i", "3"]]}, {"line": 15, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["flag", "0"], ["i", "3"]]}, {"line": 16, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "3"]]}, {"line": 22, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "3"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "4"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "4"]]}, {"line": 6, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "4"]]}, {"line": 8, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "4"]]}, {"line": 11, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "4"]]}, {"line": 12, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "1"], ["i", "4"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "1"], ["i", "5"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "1"], ["i", "5"]]}, {"line": 13, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "1"], ["i", "5"]]}, {"line": 14, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "1"], ["i", "5"]]}, {"line": 15, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["flag", "0"], ["i", "5"]]}, {"line": 16, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "5"]]}, {"line": 22, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "5"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "6"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "6"]]}, {"line": 6, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "6"]]}, {"line": 8, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "6"]]}, {"line": 11, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "6"]]}, {"line": 12, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "1"], ["i", "6"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "1"], ["i", "7"]]}, {"line": 5, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "1"], ["i", "7"]]}, {"line": 13, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "1"], ["i", "7"]]}, {"line": 14, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "1"], ["i", "7"]]}, {"line": 15, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["flag", "0"], ["i", "7"]]}, {"line": 16, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["flag", "0"], ["i", "7"]]}, {"line": 22, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["flag", "0"], ["i", "7"]]}, {"line": 4, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["flag", "0"], ["i", "7"]]}, {"line": 23, "state": [["n", "9"], ["lis", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["flag", "0"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 13, 5, 4, 5, 4, 0], [4, 5, 4, 13, 5, 4, 5, 4, 0], [4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 13, 5, 4, 5, 4, 0], [5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0]], "6": [[6, 3], [6, 15, 14, 12, 11, 8, 6, 3], [6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3]], "8": [[8, 6, 3], [8, 6, 15, 14, 12, 11, 8, 6, 3], [8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3]], "11": [[11, 8, 6, 3], [11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3]], "12": [[12, 11, 8, 6, 3], [12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3]], "13": [[13, 5, 4, 5, 4, 0], [13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0], [13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 13, 5, 4, 5, 4, 0]], "14": [[14, 12, 11, 8, 6, 3], [14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3]], "15": [[15, 14, 12, 11, 8, 6, 3], [15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3], [15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 15, 14, 12, 11, 8, 6, 3]], "16": [[16, 2], [16, 2], [16, 2], [16, 2]], "22": [[22], [22], [22], [22]], "23": [[23, 16, 2]]}}
{"id": 9400, "code": "String a = \"2018/01/07\";\nSystem.out.println(a);", "code_tokens": ["<0>", "String", "a", "=", "\"2018/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["a", "2018/01/07"]]}, {"line": 1, "state": [["a", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15319, "code": "int x = 12, y = 3, z = 1;\nSystem.out.println((x - 1 * z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "1", "*", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4939, "code": "String s = \"internationalization\";\nSystem.out.println(String.format(\"%s%d%s\", s.charAt(0), s.length() - 2, s.charAt(s.length() - 1)));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "s", ".", "charAt", "(", "0", ")", ",", "s", ".", "length", "(", ")", "-", "2", ",", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16717, "code": "String a = \"D\";String b = \"H\";\nif (a.equals(\"H\")) {System.out.println(b.equals(\"H\") ? \"H\" : \"D\");}\nelse {System.out.println(b.equals(\"H\") ? \"D\" : \"H\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "b", ".", "equals", "(", "\"H\"", ")", "?", "\"H\"", ":", "\"D\"", ")", ";", "}", "<2>", "else", "{", "System", ".", "out", ".", "println", "(", "b", ".", "equals", "(", "\"H\"", ")", "?", "\"D\"", ":", "\"H\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 2, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 11598, "code": "String S = \"SA\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(7);\n} else if (S.equals(\"MON\")) {\nSystem.out.println(6);\n} else if (S.equals(\"TUE\")) {\nSystem.out.println(5);\n} else if (S.equals(\"WED\")) {\nSystem.out.println(4);\n} else if (S.equals(\"THU\")) {\nSystem.out.println(3);\n} else if (S.equals(\"FRI\")) {\nSystem.out.println(2);\n} else if (S.equals(\"SAT\")) {\nSystem.out.println(1);}", "code_tokens": ["<0>", "String", "S", "=", "\"SA\"", ";", "<1>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "<3>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "6", ")", ";", "<5>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "5", ")", ";", "<7>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "4", ")", ";", "<9>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "3", ")", ";", "<11>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "2", ")", ";", "<13>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["namedtuple", "<function>"]]}, {"line": 3, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 4, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 6, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 8, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 10, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 12, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 14, "state": [["namedtuple", "<function>"], ["S", "SA"]]}, {"line": 16, "state": [["namedtuple", "<function>"], ["S", "SA"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3]], "6": [[6, 4, 3]], "8": [[8, 6, 4, 3]], "10": [[10, 8, 6, 4, 3]], "12": [[12, 10, 8, 6, 4, 3]], "14": [[14, 12, 10, 8, 6, 4, 3]], "16": [[16, 14, 12, 10, 8, 6, 4, 3]]}}
{"id": 18919, "code": "int n = 12;\nif (n % 2 != 0) {\nSystem.out.println(0);}\nelse {\nint k = 10;\nint q = 0;\nwhile (k <= n) {\nq += n / k;\nk *= 5;}\nSystem.out.println(q);}", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "k", "=", "10", ";", "<5>", "int", "q", "=", "0", ";", "<6>", "while", "(", "k", "<=", "n", ")", "{", "<7>", "q", "+=", "n", "/", "k", ";", "<8>", "k", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "q", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"]]}, {"line": 4, "state": [["n", "12"], ["k", "10"]]}, {"line": 5, "state": [["n", "12"], ["k", "10"], ["q", "0"]]}, {"line": 6, "state": [["n", "12"], ["k", "10"], ["q", "0"]]}, {"line": 7, "state": [["n", "12"], ["k", "10"], ["q", "1"]]}, {"line": 8, "state": [["n", "12"], ["k", "50"], ["q", "1"]]}, {"line": 6, "state": [["n", "12"], ["k", "50"], ["q", "1"]]}, {"line": 9, "state": [["n", "12"], ["k", "50"], ["q", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 4, 1, 0], [6, 8, 7, 6, 4, 1, 0]], "7": [[7, 6, 4, 1, 0]], "8": [[8, 7, 6, 4, 1, 0]], "9": [[9, 7, 6, 4, 1, 0]]}}
{"id": 18854, "code": "int N = 6, x = 1;\nint[] values = Arrays.stream(\"1 6 1 2 0 4\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nint count = 0;\nint v1 = values[0];\nfor (int i = 1; i < values.length; i++) {int v2 = values[i];\nint surplus = Math.max(v1 + v2 - x, 0);\ncount += surplus;\nv1 = Math.max(0, v2 - surplus);}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "N", "=", "6", ",", "x", "=", "1", ";", "<1>", "int", "[", "]", "values", "=", "Arrays", ".", "stream", "(", "\"1 6 1 2 0 4\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "int", "v1", "=", "values", "[", "0", "]", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "values", ".", "length", ";", "i", "++", ")", "{", "int", "v2", "=", "values", "[", "i", "]", ";", "<5>", "int", "surplus", "=", "Math", ".", "max", "(", "v1", "+", "v2", "-", "x", ",", "0", ")", ";", "<6>", "count", "+=", "surplus", ";", "<7>", "v1", "=", "Math", ".", "max", "(", "0", ",", "v2", "-", "surplus", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"], ["x", "1"]]}, {"line": 1, "state": [["N", "6"], ["x", "1"]]}, {"line": 2, "state": [["N", "6"], ["x", "1"], ["count", "0"]]}, {"line": 3, "state": [["N", "6"], ["x", "1"], ["count", "0"], ["v1", "1"]]}, {"line": 4, "state": [["N", "6"], ["x", "1"], ["count", "0"], ["v1", "1"], ["v2", "6"]]}, {"line": 5, "state": [["N", "6"], ["x", "1"], ["count", "0"], ["v1", "1"], ["v2", "6"], ["surplus", "6"]]}, {"line": 6, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "1"], ["v2", "6"], ["surplus", "6"]]}, {"line": 7, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "0"], ["v2", "6"], ["surplus", "6"]]}, {"line": 4, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "0"], ["v2", "1"], ["surplus", "6"]]}, {"line": 5, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "0"], ["v2", "1"], ["surplus", "0"]]}, {"line": 6, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "0"], ["v2", "1"], ["surplus", "0"]]}, {"line": 7, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "1"], ["v2", "1"], ["surplus", "0"]]}, {"line": 4, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "1"], ["v2", "2"], ["surplus", "0"]]}, {"line": 5, "state": [["N", "6"], ["x", "1"], ["count", "6"], ["v1", "1"], ["v2", "2"], ["surplus", "2"]]}, {"line": 6, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "1"], ["v2", "2"], ["surplus", "2"]]}, {"line": 7, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "2"], ["surplus", "2"]]}, {"line": 4, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "0"], ["surplus", "2"]]}, {"line": 5, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "0"], ["surplus", "0"]]}, {"line": 6, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "0"], ["surplus", "0"]]}, {"line": 7, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "0"], ["surplus", "0"]]}, {"line": 4, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "4"], ["surplus", "0"]]}, {"line": 5, "state": [["N", "6"], ["x", "1"], ["count", "8"], ["v1", "0"], ["v2", "4"], ["surplus", "3"]]}, {"line": 6, "state": [["N", "6"], ["x", "1"], ["count", "11"], ["v1", "0"], ["v2", "4"], ["surplus", "3"]]}, {"line": 7, "state": [["N", "6"], ["x", "1"], ["count", "11"], ["v1", "1"], ["v2", "4"], ["surplus", "3"]]}, {"line": 4, "state": [["N", "6"], ["x", "1"], ["count", "11"], ["v1", "1"], ["v2", "4"], ["surplus", "3"]]}, {"line": 8, "state": [["N", "6"], ["x", "1"], ["count", "11"], ["v1", "1"], ["v2", "4"], ["surplus", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 3, 1], [4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "5": [[5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "6": [[6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "7": [[7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "8": [[8, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]]}}
{"id": 15864, "code": "BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\nString line = reader.readLine();\nint a = 13, b = 3, c = 1;\nSystem.out.println((a - c) / (b + c));", "code_tokens": ["<0>", "BufferedReader", "reader", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "System", ".", "in", ")", ")", ";", "<1>", "String", "line", "=", "reader", ".", "readLine", "(", ")", ";", "<2>", "int", "a", "=", "13", ",", "b", "=", "3", ",", "c", "=", "1", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "c", ")", "/", "(", "b", "+", "c", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": [["a", "13"], ["b", "3"], ["c", "1"]]}, {"line": 5, "state": [["a", "13"], ["b", "3"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 4]]}}
{"id": 4956, "code": "char[] s = {'x', 'y', 'z'};\nSystem.out.println(\"\" + s[0] + (s.length - 2) + s[s.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"\"", "+", "s", "[", "0", "]", "+", "(", "s", ".", "length", "-", "2", ")", "+", "s", "[", "s", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1983, "code": "int n = 10, a = 7, b = 5;\nn = Integer.parseInt(String.valueOf(n));\na = Integer.parseInt(String.valueOf(a));\nb = Integer.parseInt(String.valueOf(b));\nint mx_x;if (a > b) {\nmx_x = b;\n} else {\nmx_x = a;}\nint mx_y;if ((a + b - n) < 0) {\nmx_y = 0;\n} else {\nmx_y = a + b - n;}\nSystem.out.println(mx_x + \" \" + mx_y);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "n", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "n", ")", ")", ";", "<2>", "a", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "a", ")", ")", ";", "<3>", "b", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "b", ")", ")", ";", "<4>", "int", "mx_x", ";", "if", "(", "a", ">", "b", ")", "{", "<5>", "mx_x", "=", "b", ";", "<6>", "}", "else", "{", "<7>", "mx_x", "=", "a", ";", "}", "<8>", "int", "mx_y", ";", "if", "(", "(", "a", "+", "b", "-", "n", ")", "<", "0", ")", "{", "<9>", "mx_y", "=", "0", ";", "<10>", "}", "else", "{", "<11>", "mx_y", "=", "a", "+", "b", "-", "n", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "mx_x", "+", "\" \"", "+", "mx_y", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 4, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 5, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["mx_x", "5"]]}, {"line": 8, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["mx_x", "5"]]}, {"line": 11, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["mx_x", "5"], ["mx_y", "2"]]}, {"line": 12, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["mx_x", "5"], ["mx_y", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]], "8": [[8, 5, 4, 3, 2, 1, 0]], "11": [[11, 8, 5, 4, 3, 2, 1, 0]], "12": [[12, 11, 8, 5, 4, 3, 2, 1, 0]]}}
{"id": 4052, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint s = h1 * 60 + m1;\nint t = h2 * 60 + m2;\nint ans = t - s - k;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "s", "=", "h1", "*", "60", "+", "m1", ";", "<2>", "int", "t", "=", "h2", "*", "60", "+", "m2", ";", "<3>", "int", "ans", "=", "t", "-", "s", "-", "k", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["s", "600"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["s", "600"], ["t", "900"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["s", "600"], ["t", "900"], ["ans", "270"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["s", "600"], ["t", "900"], ["ans", "270"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 10252, "code": "int n = 8;\nString s = \"))))((((\";\nString ans = s;\nwhile (s.length() - s.replace(\"()\", \"\").length() > 0) {\ns = s.replace(\"()\", \"\");}\nint cnt_l = s.length() - s.replace(\")\", \"\").length();\nint cnt_r = s.length() - s.replace(\"(\", \"\").length();\nans = cnt_l * \"(\" + ans;\nans += cnt_r * \")\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "8", ";", "<1>", "String", "s", "=", "\"))))((((\"", ";", "<2>", "String", "ans", "=", "s", ";", "<3>", "while", "(", "s", ".", "length", "(", ")", "-", "s", ".", "replace", "(", "\"()\"", ",", "\"\"", ")", ".", "length", "(", ")", ">", "0", ")", "{", "<4>", "s", "=", "s", ".", "replace", "(", "\"()\"", ",", "\"\"", ")", ";", "}", "<5>", "int", "cnt_l", "=", "s", ".", "length", "(", ")", "-", "s", ".", "replace", "(", "\")\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<6>", "int", "cnt_r", "=", "s", ".", "length", "(", ")", "-", "s", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<7>", "ans", "=", "cnt_l", "*", "\"(\"", "+", "ans", ";", "<8>", "ans", "+=", "cnt_r", "*", "\")\"", ";", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"]]}, {"line": 1, "state": [["n", "8"], ["s", "))))(((("]]}, {"line": 2, "state": [["n", "8"], ["s", "))))(((("], ["ans", "))))(((("]]}, {"line": 3, "state": [["n", "8"], ["s", "))))(((("], ["ans", "))))(((("]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["ans", "))))(((("], ["cnt_l", "4"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["ans", "))))(((("], ["cnt_l", "4"], ["cnt_r", "4"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["ans", "(((())))(((("], ["cnt_l", "4"], ["cnt_r", "4"]]}, {"line": 8, "state": [["n", "8"], ["s", "))))(((("], ["cnt_l", "4"], ["cnt_r", "4"], ["ans", "(((())))(((())))"]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["cnt_l", "4"], ["cnt_r", "4"], ["ans", "(((())))(((())))"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "5": [[5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1]], "7": [[7, 5, 3, 2, 1]], "8": [[8, 7, 5, 3, 2, 1]], "9": [[9, 8, 7, 5, 3, 2, 1]]}}
{"id": 281, "code": "String s = \"codefestival\";\nint k = 100;\nString l = \"abcdefghijklmnopqrstuvwxyz\";\nString ans = \"\";\nfor (int i = 0; i < s.length() - 1; i++) {\nint num = (26 - l.indexOf(s.charAt(i))) % 26;\nif (k >= num) {\nans += \"a\";\nk -= num;}\nelse {\nans += s.charAt(i);}}\nans += l.charAt((l.indexOf(s.charAt(s.length() - 1)) + k) % 26);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"codefestival\"", ";", "<1>", "int", "k", "=", "100", ";", "<2>", "String", "l", "=", "\"abcdefghijklmnopqrstuvwxyz\"", ";", "<3>", "String", "ans", "=", "\"\"", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "1", ";", "i", "++", ")", "{", "<5>", "int", "num", "=", "(", "26", "-", "l", ".", "indexOf", "(", "s", ".", "charAt", "(", "i", ")", ")", ")", "%", "26", ";", "<6>", "if", "(", "k", ">=", "num", ")", "{", "<7>", "ans", "+=", "\"a\"", ";", "<8>", "k", "-=", "num", ";", "}", "<9>", "else", "{", "<10>", "ans", "+=", "s", ".", "charAt", "(", "i", ")", ";", "}", "}", "<11>", "ans", "+=", "l", ".", "charAt", "(", "(", "l", ".", "indexOf", "(", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", "+", "k", ")", "%", "26", ")", ";", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "codefestival"]]}, {"line": 1, "state": [["s", "codefestival"], ["k", "100"]]}, {"line": 2, "state": [["s", "codefestival"], ["k", "100"], ["l", "abcdefghijklmnopqrstuvwxyz"]]}, {"line": 3, "state": [["s", "codefestival"], ["k", "100"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", ""]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "100"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", ""], ["i", "0"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", ""], ["i", "0"], ["num", "24"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", ""], ["i", "0"], ["num", "24"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "100"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "a"], ["i", "0"], ["num", "24"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "76"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "a"], ["i", "0"], ["num", "24"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "76"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "a"], ["i", "1"], ["num", "24"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "76"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "a"], ["i", "1"], ["num", "12"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "76"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "a"], ["i", "1"], ["num", "12"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "76"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "aa"], ["i", "1"], ["num", "12"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "64"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "aa"], ["i", "1"], ["num", "12"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "64"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "aa"], ["i", "2"], ["num", "12"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "64"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "aa"], ["i", "2"], ["num", "23"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "64"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["ans", "aa"], ["i", "2"], ["num", "23"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "64"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "2"], ["num", "23"], ["ans", "aaa"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "41"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "2"], ["num", "23"], ["ans", "aaa"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "41"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "3"], ["num", "23"], ["ans", "aaa"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "41"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "3"], ["num", "22"], ["ans", "aaa"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "41"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "3"], ["num", "22"], ["ans", "aaa"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "41"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "3"], ["num", "22"], ["ans", "aaaa"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "3"], ["num", "22"], ["ans", "aaaa"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "4"], ["num", "22"], ["ans", "aaaa"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "4"], ["num", "21"], ["ans", "aaaa"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "4"], ["num", "21"], ["ans", "aaaa"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "4"], ["num", "21"], ["ans", "aaaaf"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "5"], ["num", "21"], ["ans", "aaaaf"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "5"], ["num", "22"], ["ans", "aaaaf"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "5"], ["num", "22"], ["ans", "aaaaf"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "5"], ["num", "22"], ["ans", "aaaafe"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "6"], ["num", "22"], ["ans", "aaaafe"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "6"], ["num", "8"], ["ans", "aaaafe"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "6"], ["num", "8"], ["ans", "aaaafe"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "19"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "6"], ["num", "8"], ["ans", "aaaafea"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "11"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "6"], ["num", "8"], ["ans", "aaaafea"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "11"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "7"], ["num", "8"], ["ans", "aaaafea"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "11"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "7"], ["num", "7"], ["ans", "aaaafea"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "11"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "7"], ["num", "7"], ["ans", "aaaafea"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "11"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "7"], ["num", "7"], ["ans", "aaaafeaa"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "7"], ["num", "7"], ["ans", "aaaafeaa"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "8"], ["num", "7"], ["ans", "aaaafeaa"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "8"], ["num", "18"], ["ans", "aaaafeaa"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "8"], ["num", "18"], ["ans", "aaaafeaa"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "8"], ["num", "18"], ["ans", "aaaafeaai"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "9"], ["num", "18"], ["ans", "aaaafeaai"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "9"], ["num", "5"], ["ans", "aaaafeaai"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "9"], ["num", "5"], ["ans", "aaaafeaai"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "9"], ["num", "5"], ["ans", "aaaafeaaiv"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "5"], ["ans", "aaaafeaaiv"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaiv"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaiv"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaiva"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaiva"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaiva"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaivap"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "4"], ["l", "abcdefghijklmnopqrstuvwxyz"], ["i", "10"], ["num", "0"], ["ans", "aaaafeaaivap"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 3], [7, 3], [7, 3], [7, 3], [7, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [7, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [7, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 5, 4, 0], [8, 6, 5, 4, 5, 4, 0], [8, 6, 5, 4, 5, 4, 5, 4, 0], [8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [8, 6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [8, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [8, 6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "10": [[10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "11": [[11, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "12": [[12, 11, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 11610, "code": "String S = \"SAT\";\njava.util.Map<String, Integer> days = new java.util.HashMap<>();days.put(\"SUN\", 0);days.put(\"MON\", 1);days.put(\"TUE\", 2);days.put(\"WED\", 3);days.put(\"THU\", 4);days.put(\"FRI\", 5);days.put(\"SAT\", 6);\nif (S.equals(\"SUN\")) {\nSystem.out.println(7);}\nelse {\nSystem.out.println((7 - days.get(S)) % 7);}", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "java", ".", "util", ".", "Map", "<", "String", ",", "Integer", ">", "days", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "days", ".", "put", "(", "\"SUN\"", ",", "0", ")", ";", "days", ".", "put", "(", "\"MON\"", ",", "1", ")", ";", "days", ".", "put", "(", "\"TUE\"", ",", "2", ")", ";", "days", ".", "put", "(", "\"WED\"", ",", "3", ")", ";", "days", ".", "put", "(", "\"THU\"", ",", "4", ")", ";", "days", ".", "put", "(", "\"FRI\"", ",", "5", ")", ";", "days", ".", "put", "(", "\"SAT\"", ",", "6", ")", ";", "<2>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "(", "7", "-", "days", ".", "get", "(", "S", ")", ")", "%", "7", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"], ["days", "{ SUN"]]}, {"line": 2, "state": [["S", "SAT"], ["days", "{ SUN"]]}, {"line": 5, "state": [["S", "SAT"], ["days", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "5": [[5, 2, 0]]}}
{"id": 5614, "code": "int N = 5;\ndouble A = N / 2.0;\nA = (int) A;\ndouble B = (N + 1) / 2.0;\nB = (int) B;\nif (N % 2 == 0) {\nSystem.out.println((int) A);}\nelse {\nSystem.out.println((int) B);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "double", "A", "=", "N", "/", "2.0", ";", "<2>", "A", "=", "(", "int", ")", "A", ";", "<3>", "double", "B", "=", "(", "N", "+", "1", ")", "/", "2.0", ";", "<4>", "B", "=", "(", "int", ")", "B", ";", "<5>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "A", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "B", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "2.5"]]}, {"line": 2, "state": [["N", "5"], ["A", "2"]]}, {"line": 3, "state": [["N", "5"], ["A", "2"], ["B", "3.0"]]}, {"line": 4, "state": [["N", "5"], ["A", "2"], ["B", "3"]]}, {"line": 5, "state": [["N", "5"], ["A", "2"], ["B", "3"]]}, {"line": 8, "state": [["N", "5"], ["A", "2"], ["B", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 3, 1, 0]], "8": [[8, 4, 3, 1, 0]]}}
{"id": 15510, "code": "int X = 13, Y = 3, Z = 1;\nint s = Z;\nint c = 0;\nwhile (true) {\ns += Y + Z;\nif (s > X) {\nbreak;}\nc += 1;}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "X", "=", "13", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "s", "=", "Z", ";", "<2>", "int", "c", "=", "0", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "s", "+=", "Y", "+", "Z", ";", "<5>", "if", "(", "s", ">", "X", ")", "{", "<6>", "break", ";", "}", "<7>", "c", "+=", "1", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["X", "13"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "1"]]}, {"line": 2, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "1"], ["c", "0"]]}, {"line": 3, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "1"], ["c", "0"]]}, {"line": 4, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "5"], ["c", "0"]]}, {"line": 5, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "5"], ["c", "0"]]}, {"line": 7, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "5"], ["c", "1"]]}, {"line": 4, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "9"], ["c", "1"]]}, {"line": 5, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "9"], ["c", "1"]]}, {"line": 7, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "9"], ["c", "2"]]}, {"line": 4, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "2"]]}, {"line": 5, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "2"]]}, {"line": 7, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "3"]]}, {"line": 4, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "17"], ["c", "3"]]}, {"line": 5, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "17"], ["c", "3"]]}, {"line": 6, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "17"], ["c", "3"]]}, {"line": 8, "state": [["X", "13"], ["Y", "3"], ["Z", "1"], ["s", "17"], ["c", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0], [4, 5, 4, 1, 0], [4, 5, 4, 5, 4, 1, 0], [4, 5, 4, 5, 4, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 5, 4, 1, 0], [5, 4, 5, 4, 5, 4, 1, 0], [5, 4, 5, 4, 5, 4, 5, 4, 1, 0]], "6": [[6]], "7": [[7, 2], [7, 2], [7, 2]], "8": [[8, 7, 2]]}}
{"id": 12723, "code": "int X = 6;\nif (X == 7 || X == 5 || X == 3) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "X", "=", "6", ";", "<1>", "if", "(", "X", "==", "7", "||", "X", "==", "5", "||", "X", "==", "3", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "6"]]}, {"line": 1, "state": [["X", "6"]]}, {"line": 4, "state": [["X", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 5678, "code": "int a = 2;\nSystem.out.println(-(-a / 2));", "code_tokens": ["<0>", "int", "a", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "a", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "2"]]}, {"line": 1, "state": [["a", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6860, "code": "int h = 211, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nint x = 0;for (int num : a) {x += num;}\nif ((h - x) <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "x", "=", "0", ";", "for", "(", "int", "num", ":", "a", ")", "{", "x", "+=", "num", ";", "}", "<3>", "if", "(", "(", "h", "-", "x", ")", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}, {"line": 1, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["x", "210"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["x", "210"]]}, {"line": 6, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["x", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 5271, "code": "HashSet<Integer> n = new HashSet<>();n.add(0);n.add(9);n.add(4);n.add(8);\nif (n.equals(new HashSet<>(java.util.Arrays.asList(1, 4, 7, 9)))) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "HashSet", "<", "Integer", ">", "n", "=", "new", "HashSet", "<", ">", "(", ")", ";", "n", ".", "add", "(", "0", ")", ";", "n", ".", "add", "(", "9", ")", ";", "n", ".", "add", "(", "4", ")", ";", "n", ".", "add", "(", "8", ")", ";", "<1>", "if", "(", "n", ".", "equals", "(", "new", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "4", ",", "7", ",", "9", ")", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "{ 0 , 9 , 4 , 8 }"]]}, {"line": 1, "state": [["n", "{ 0 , 9 , 4 , 8 }"]]}, {"line": 4, "state": [["n", "{ 0 , 9 , 4 , 8 }"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 18269, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint ans = Math.min((n + h - 1) / h, (n + w - 1) / w);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "ans", "=", "Math", ".", "min", "(", "(", "n", "+", "h", "-", "1", ")", "/", "h", ",", "(", "n", "+", "w", "-", "1", ")", "/", "w", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["ans", "2"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 7133, "code": "int H = 210, N = 5;\nint[] a = {31, 41, 59, 26, 53};\nint sum = 0;\nfor (int i = 0; i < N; i++) {\nsum += a[i];}\nif (sum >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "210", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "sum", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "sum", "+=", "a", "[", "i", "]", ";", "}", "<5>", "if", "(", "sum", ">=", "H", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "210"], ["N", "5"]]}, {"line": 1, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "0"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "0"], ["i", "0"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "31"], ["i", "0"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "31"], ["i", "1"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "72"], ["i", "1"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "72"], ["i", "2"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "131"], ["i", "2"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "131"], ["i", "3"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "157"], ["i", "3"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "157"], ["i", "4"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 5, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 6, "state": [["H", "210"], ["N", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "6": [[6]]}}
{"id": 4438, "code": "String S = \"internationalization\";\nint c = S.length();\nSystem.out.println(S.charAt(0) + Integer.toString(c - 2) + S.charAt(S.length() - 1));", "code_tokens": ["<0>", "String", "S", "=", "\"internationalization\"", ";", "<1>", "int", "c", "=", "S", ".", "length", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "c", "-", "2", ")", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "internationalization"]]}, {"line": 1, "state": [["S", "internationalization"], ["c", "20"]]}, {"line": 2, "state": [["S", "internationalization"], ["c", "20"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 9606, "code": "String a = \"2017/01/07\";\nString s = a.substring(0, 3) + \"8\" + a.substring(4);\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "a", "=", "\"2017/01/07\"", ";", "<1>", "String", "s", "=", "a", ".", "substring", "(", "0", ",", "3", ")", "+", "\"8\"", "+", "a", ".", "substring", "(", "4", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017/01/07"]]}, {"line": 1, "state": [["a", "2017/01/07"], ["s", "2018/01/07"]]}, {"line": 2, "state": [["a", "2017/01/07"], ["s", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3884, "code": "String[] parts = \"64146 123 456\".split(\" \");int x = Integer.parseInt(parts[0]);int y = Integer.parseInt(parts[1]);int z = Integer.parseInt(parts[2]);System.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "String", "[", "]", "parts", "=", "\"64146 123 456\"", ".", "split", "(", "\" \"", ")", ";", "int", "x", "=", "Integer", ".", "parseInt", "(", "parts", "[", "0", "]", ")", ";", "int", "y", "=", "Integer", ".", "parseInt", "(", "parts", "[", "1", "]", ")", ";", "int", "z", "=", "Integer", ".", "parseInt", "(", "parts", "[", "2", "]", ")", ";", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]]}}
{"id": 6575, "code": "int n = 6;\nint[] a = {2, 3, 6, 14, 53, 159};\nint[] b = {6, 9, 58, 79, 84, 323};\nint[] c = {2, 50, 79, 288, 383, 2643};\nint cnt = 0;\nfor (int bb : b) {\nint anum = bisectLeft(a, bb);\nint cnum = n - bisectRight(c, bb);\ncnt += (anum * cnum);}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "6", ",", "14", ",", "53", ",", "159", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "6", ",", "9", ",", "58", ",", "79", ",", "84", ",", "323", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "2", ",", "50", ",", "79", ",", "288", ",", "383", ",", "2643", "}", ";", "<4>", "int", "cnt", "=", "0", ";", "<5>", "for", "(", "int", "bb", ":", "b", ")", "{", "<6>", "int", "anum", "=", "bisectLeft", "(", "a", ",", "bb", ")", ";", "<7>", "int", "cnum", "=", "n", "-", "bisectRight", "(", "c", ",", "bb", ")", ";", "<8>", "cnt", "+=", "(", "anum", "*", "cnum", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "6"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "0"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "0"], ["bb", "6"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "0"], ["bb", "6"], ["anum", "2"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "0"], ["bb", "6"], ["anum", "2"], ["cnum", "5"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "10"], ["bb", "6"], ["anum", "2"], ["cnum", "5"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "10"], ["bb", "9"], ["anum", "2"], ["cnum", "5"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "10"], ["bb", "9"], ["anum", "3"], ["cnum", "5"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "10"], ["bb", "9"], ["anum", "3"], ["cnum", "5"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "25"], ["bb", "9"], ["anum", "3"], ["cnum", "5"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "25"], ["bb", "58"], ["anum", "3"], ["cnum", "5"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "25"], ["bb", "58"], ["anum", "5"], ["cnum", "5"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "25"], ["bb", "58"], ["anum", "5"], ["cnum", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "45"], ["bb", "58"], ["anum", "5"], ["cnum", "4"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "45"], ["bb", "79"], ["anum", "5"], ["cnum", "4"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "45"], ["bb", "79"], ["anum", "5"], ["cnum", "4"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "45"], ["bb", "79"], ["anum", "5"], ["cnum", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "60"], ["bb", "79"], ["anum", "5"], ["cnum", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "60"], ["bb", "84"], ["anum", "5"], ["cnum", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "60"], ["bb", "84"], ["anum", "5"], ["cnum", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "60"], ["bb", "84"], ["anum", "5"], ["cnum", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "75"], ["bb", "84"], ["anum", "5"], ["cnum", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "75"], ["bb", "323"], ["anum", "5"], ["cnum", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "75"], ["bb", "323"], ["anum", "6"], ["cnum", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "75"], ["bb", "323"], ["anum", "6"], ["cnum", "2"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "87"], ["bb", "323"], ["anum", "6"], ["cnum", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "87"], ["bb", "323"], ["anum", "6"], ["cnum", "2"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["cnt", "87"], ["bb", "323"], ["anum", "6"], ["cnum", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 9747, "code": "int n = 8;\nString s = \"))))(((\";\nint[] data = {0, 0};\nint temp = -1;\nfor (int i = 0; i < n; i++) {\ntemp += 1;\nchar tar = s.charAt(temp);\nif (tar == '(') {\ndata[0] += 1;}\nelse {\nif (data[0] > data[1]) {\ndata[0] -= 1;}\nelse {\ns = '(' + s;\ntemp += 1;}}}\nString add = new String(new char[data[0]]).replace(\"\\0\", \")\");\ns = s + add;\nSystem.out.println(s);", "code_tokens": ["<0>", "int", "n", "=", "8", ";", "<1>", "String", "s", "=", "\"))))(((\"", ";", "<2>", "int", "[", "]", "data", "=", "{", "0", ",", "0", "}", ";", "<3>", "int", "temp", "=", "-", "1", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "temp", "+=", "1", ";", "<6>", "char", "tar", "=", "s", ".", "charAt", "(", "temp", ")", ";", "<7>", "if", "(", "tar", "==", "'('", ")", "{", "<8>", "data", "[", "0", "]", "+=", "1", ";", "}", "<9>", "else", "{", "<10>", "if", "(", "data", "[", "0", "]", ">", "data", "[", "1", "]", ")", "{", "<11>", "data", "[", "0", "]", "-=", "1", ";", "}", "<12>", "else", "{", "<13>", "s", "=", "'('", "+", "s", ";", "<14>", "temp", "+=", "1", ";", "}", "}", "}", "<15>", "String", "add", "=", "new", "String", "(", "new", "char", "[", "data", "[", "0", "]", "]", ")", ".", "replace", "(", "\"\\0\"", ",", "\")\"", ")", ";", "<16>", "s", "=", "s", "+", "add", ";", "<17>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"]]}, {"line": 1, "state": [["n", "8"], ["s", "))))(((("]]}, {"line": 2, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"]]}, {"line": 3, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"], ["temp", "-1"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"], ["temp", "-1"], ["i", "0"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"], ["temp", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"], ["temp", "0"], ["i", "0"], ["tar", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"], ["temp", "0"], ["i", "0"], ["tar", ")"]]}, {"line": 10, "state": [["n", "8"], ["s", "))))(((("], ["data", "[ 0 , 0 ]"], ["temp", "0"], ["i", "0"], ["tar", ")"]]}, {"line": 13, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "0"], ["i", "0"], ["tar", ")"]]}, {"line": 14, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "1"], ["i", "0"], ["tar", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "1"], ["i", "1"], ["tar", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "2"], ["i", "1"], ["tar", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "2"], ["i", "1"], ["tar", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "2"], ["i", "1"], ["tar", ")"]]}, {"line": 10, "state": [["n", "8"], ["s", "())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "2"], ["i", "1"], ["tar", ")"]]}, {"line": 13, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "2"], ["i", "1"], ["tar", ")"]]}, {"line": 14, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "3"], ["i", "1"], ["tar", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "3"], ["i", "2"], ["tar", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "4"], ["i", "2"], ["tar", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "4"], ["i", "2"], ["tar", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "4"], ["i", "2"], ["tar", ")"]]}, {"line": 10, "state": [["n", "8"], ["s", "(())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "4"], ["i", "2"], ["tar", ")"]]}, {"line": 13, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "4"], ["i", "2"], ["tar", ")"]]}, {"line": 14, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "5"], ["i", "2"], ["tar", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "5"], ["i", "3"], ["tar", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "6"], ["i", "3"], ["tar", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "6"], ["i", "3"], ["tar", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "6"], ["i", "3"], ["tar", ")"]]}, {"line": 10, "state": [["n", "8"], ["s", "((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "6"], ["i", "3"], ["tar", ")"]]}, {"line": 13, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "6"], ["i", "3"], ["tar", ")"]]}, {"line": 14, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "7"], ["i", "3"], ["tar", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "7"], ["i", "4"], ["tar", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "8"], ["i", "4"], ["tar", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "8"], ["i", "4"], ["tar", "("]]}, {"line": 7, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 0 , 0 ]"], ["temp", "8"], ["i", "4"], ["tar", "("]]}, {"line": 8, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 1 , 0 ]"], ["temp", "8"], ["i", "4"], ["tar", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 1 , 0 ]"], ["temp", "8"], ["i", "5"], ["tar", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 1 , 0 ]"], ["temp", "9"], ["i", "5"], ["tar", "("]]}, {"line": 6, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 1 , 0 ]"], ["temp", "9"], ["i", "5"], ["tar", "("]]}, {"line": 7, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 1 , 0 ]"], ["temp", "9"], ["i", "5"], ["tar", "("]]}, {"line": 8, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 2 , 0 ]"], ["temp", "9"], ["i", "5"], ["tar", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 2 , 0 ]"], ["temp", "9"], ["i", "6"], ["tar", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 2 , 0 ]"], ["temp", "10"], ["i", "6"], ["tar", "("]]}, {"line": 6, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 2 , 0 ]"], ["temp", "10"], ["i", "6"], ["tar", "("]]}, {"line": 7, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 2 , 0 ]"], ["temp", "10"], ["i", "6"], ["tar", "("]]}, {"line": 8, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 3 , 0 ]"], ["temp", "10"], ["i", "6"], ["tar", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 3 , 0 ]"], ["temp", "10"], ["i", "7"], ["tar", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 3 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("]]}, {"line": 6, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 3 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("]]}, {"line": 7, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 3 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("]]}, {"line": 8, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 4 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 4 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("]]}, {"line": 15, "state": [["n", "8"], ["s", "(((())))(((("], ["data", "[ 4 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("], ["add", "))))"]]}, {"line": 16, "state": [["n", "8"], ["data", "[ 4 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("], ["add", "))))"], ["s", "(((())))(((())))"]]}, {"line": 17, "state": [["n", "8"], ["data", "[ 4 , 0 ]"], ["temp", "11"], ["i", "7"], ["tar", "("], ["add", "))))"], ["s", "(((())))(((())))"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0]], "5": [[5, 3], [5, 14, 6, 5, 3], [5, 14, 6, 5, 14, 6, 5, 3], [5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [5, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [5, 6, 5, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3]], "6": [[6, 5, 3], [6, 5, 14, 6, 5, 3], [6, 5, 14, 6, 5, 14, 6, 5, 3], [6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [6, 5, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [6, 5, 6, 5, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3]], "7": [[7, 6, 5, 3], [7, 6, 5, 14, 6, 5, 3], [7, 6, 5, 14, 6, 5, 14, 6, 5, 3], [7, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [7, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [7, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [7, 6, 5, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [7, 6, 5, 6, 5, 6, 5, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3]], "8": [[8, 10, 2], [8, 10, 2], [8, 10, 2], [8, 10, 2]], "10": [[10, 2], [10, 2], [10, 2], [10, 2]], "13": [[13, 6, 5, 3], [13, 6, 5, 14, 6, 5, 3], [13, 6, 5, 14, 6, 5, 14, 6, 5, 3], [13, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3]], "14": [[14, 6, 5, 3], [14, 6, 5, 14, 6, 5, 3], [14, 6, 5, 14, 6, 5, 14, 6, 5, 3], [14, 6, 5, 14, 6, 5, 14, 6, 5, 14, 6, 5, 3]], "15": [[15, 8, 10, 2]], "16": [[16, 15, 8, 10, 2]], "17": [[17, 16, 15, 8, 10, 2]]}}
{"id": 788, "code": "int K = 2;\nint mod = 7;\nint number = 1;\nfor (int i = 0; i < K; i++) {\nif (mod % K == 0) {\nbreak;}\nnumber += 1;\nmod = (mod * 10 + 7) % K;}\nif (mod % K == 0) {\nSystem.out.println(number);}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "K", "=", "2", ";", "<1>", "int", "mod", "=", "7", ";", "<2>", "int", "number", "=", "1", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "K", ";", "i", "++", ")", "{", "<4>", "if", "(", "mod", "%", "K", "==", "0", ")", "{", "<5>", "break", ";", "}", "<6>", "number", "+=", "1", ";", "<7>", "mod", "=", "(", "mod", "*", "10", "+", "7", ")", "%", "K", ";", "}", "<8>", "if", "(", "mod", "%", "K", "==", "0", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "number", ")", ";", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["K", "2"]]}, {"line": 1, "state": [["K", "2"], ["mod", "7"]]}, {"line": 2, "state": [["K", "2"], ["mod", "7"], ["number", "1"]]}, {"line": 3, "state": [["K", "2"], ["mod", "7"], ["number", "1"], ["i", "0"]]}, {"line": 4, "state": [["K", "2"], ["mod", "7"], ["number", "1"], ["i", "0"]]}, {"line": 6, "state": [["K", "2"], ["mod", "7"], ["number", "2"], ["i", "0"]]}, {"line": 7, "state": [["K", "2"], ["mod", "1"], ["number", "2"], ["i", "0"]]}, {"line": 3, "state": [["K", "2"], ["mod", "1"], ["number", "2"], ["i", "1"]]}, {"line": 4, "state": [["K", "2"], ["mod", "1"], ["number", "2"], ["i", "1"]]}, {"line": 6, "state": [["K", "2"], ["mod", "1"], ["number", "3"], ["i", "1"]]}, {"line": 7, "state": [["K", "2"], ["mod", "1"], ["number", "3"], ["i", "1"]]}, {"line": 3, "state": [["K", "2"], ["mod", "1"], ["number", "3"], ["i", "1"]]}, {"line": 8, "state": [["K", "2"], ["mod", "1"], ["number", "3"], ["i", "1"]]}, {"line": 11, "state": [["K", "2"], ["mod", "1"], ["number", "3"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 0], [3, 0]], "4": [[4, 3, 0], [4, 3, 0]], "6": [[6, 2], [6, 2]], "7": [[7, 4, 3, 0], [7, 4, 3, 0]], "8": [[8, 3, 0]], "11": [[11]]}}
{"id": 6779, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nSystem.out.println(sum(a) >= h ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "sum", "(", "a", ")", ">=", "h", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 19069, "code": "int N = 12;\nif (N % 2 != 0) {\nSystem.out.println(0);\nSystem.exit(0);}\nint ans = 0;\nint r = 10;\nwhile (r <= N) {\nans += N / r;\nr *= 5;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "12", ";", "<1>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<3>", "System", ".", "exit", "(", "0", ")", ";", "}", "<4>", "int", "ans", "=", "0", ";", "<5>", "int", "r", "=", "10", ";", "<6>", "while", "(", "r", "<=", "N", ")", "{", "<7>", "ans", "+=", "N", "/", "r", ";", "<8>", "r", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "12"]]}, {"line": 1, "state": [["N", "12"]]}, {"line": 4, "state": [["N", "12"], ["ans", "0"]]}, {"line": 5, "state": [["N", "12"], ["ans", "0"], ["r", "10"]]}, {"line": 6, "state": [["N", "12"], ["ans", "0"], ["r", "10"]]}, {"line": 7, "state": [["N", "12"], ["ans", "1"], ["r", "10"]]}, {"line": 8, "state": [["N", "12"], ["ans", "1"], ["r", "50"]]}, {"line": 6, "state": [["N", "12"], ["ans", "1"], ["r", "50"]]}, {"line": 9, "state": [["N", "12"], ["ans", "1"], ["r", "50"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 5, 1, 0], [6, 8, 7, 6, 5, 1, 0]], "7": [[7, 6, 5, 1, 0]], "8": [[8, 7, 6, 5, 1, 0]], "9": [[9, 7, 6, 5, 1, 0]]}}
{"id": 14665, "code": "int n = 2, p = 0;\nint[] a = {1, 3};\nint count = 0;\nfor (int i : a) {\nif (i % 2 == 0) {\ncount += 1;}}\nif (count == n) {\nif (p == 1) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(Math.pow(2, n));}}\nelse {\nSystem.out.println(Math.pow(2, n - 1));}", "code_tokens": ["<0>", "int", "n", "=", "2", ",", "p", "=", "0", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "for", "(", "int", "i", ":", "a", ")", "{", "<4>", "if", "(", "i", "%", "2", "==", "0", ")", "{", "<5>", "count", "+=", "1", ";", "}", "}", "<6>", "if", "(", "count", "==", "n", ")", "{", "<7>", "if", "(", "p", "==", "1", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "n", ")", ")", ";", "}", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "n", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "2"], ["p", "0"]]}, {"line": 1, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"]]}, {"line": 2, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "1"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "3"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "3"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "3"]]}, {"line": 6, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "3"]]}, {"line": 12, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["count", "0"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1]], "6": [[6, 2, 0]], "12": [[12, 6, 2, 0]]}}
{"id": 13127, "code": "int[] check = {7, 5, 3};\nint x = 6;\nboolean found = false;for (int num : check) {if (num == x) {found = true;break;}}System.out.println(found ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "int", "[", "]", "check", "=", "{", "7", ",", "5", ",", "3", "}", ";", "<1>", "int", "x", "=", "6", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "int", "num", ":", "check", ")", "{", "if", "(", "num", "==", "x", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "System", ".", "out", ".", "println", "(", "found", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["check", "[ 7 , 5 , 3 ]"]]}, {"line": 1, "state": [["check", "[ 7 , 5 , 3 ]"], ["x", "6"]]}, {"line": 2, "state": [["check", "[ 7 , 5 , 3 ]"], ["x", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 11880, "code": "int M1 = 11, D1 = 16;\nint M2 = 11, D2 = 17;\nSystem.out.println((M1 != M2) ? 1 : 0);", "code_tokens": ["<0>", "int", "M1", "=", "11", ",", "D1", "=", "16", ";", "<1>", "int", "M2", "=", "11", ",", "D2", "=", "17", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "M1", "!=", "M2", ")", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["M1", "11"], ["D1", "16"]]}, {"line": 1, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 2, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 9199, "code": "String S = \"2017/01/31\";\nSystem.out.println(\"2018\" + S.substring(4));", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "S", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16514, "code": "int n = 2;\nint[] a = {100, 0};\njava.util.Arrays.sort(a);\nint ma = a[a.length - 1];\ndouble mn = Double.POSITIVE_INFINITY;\nint mni = -1;\nfor (int i = 0; i < n - 1; i++) {\nif (Math.abs(2 * a[i] - ma) < mn) {\nmn = Math.abs(2 * a[i] - ma);\nmni = i;}}\nSystem.out.println(ma + \" \" + a[mni]);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "ma", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<4>", "double", "mn", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<5>", "int", "mni", "=", "-", "1", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<7>", "if", "(", "Math", ".", "abs", "(", "2", "*", "a", "[", "i", "]", "-", "ma", ")", "<", "mn", ")", "{", "<8>", "mn", "=", "Math", ".", "abs", "(", "2", "*", "a", "[", "i", "]", "-", "ma", ")", ";", "<9>", "mni", "=", "i", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "a", "[", "mni", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "inf"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "inf"], ["mni", "-1"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "inf"], ["mni", "-1"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "inf"], ["mni", "-1"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "100"], ["mni", "-1"], ["i", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "100"], ["mni", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "100"], ["mni", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["ma", "100"], ["mn", "100"], ["mni", "0"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5]], "6": [[6, 0], [6, 9, 8, 7, 6, 0]], "7": [[7, 6, 0]], "8": [[8, 7, 6, 0]], "9": [[9, 8, 7, 6, 0]], "10": [[10, 9, 8, 7, 6, 0]]}}
{"id": 5000, "code": "String s = \"smiles\";\nchar a = s.charAt(0);\nchar b = s.charAt(s.length() - 1);\nString c = s.substring(1, s.length() - 1);\nSystem.out.println(a + String.valueOf(c.length()) + b);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "char", "a", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "b", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "String", "c", "=", "s", ".", "substring", "(", "1", ",", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "a", "+", "String", ".", "valueOf", "(", "c", ".", "length", "(", ")", ")", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["a", "s"]]}, {"line": 2, "state": [["s", "smiles"], ["a", "s"], ["b", "s"]]}, {"line": 3, "state": [["s", "smiles"], ["a", "s"], ["b", "s"], ["c", "mile"]]}, {"line": 4, "state": [["s", "smiles"], ["a", "s"], ["b", "s"], ["c", "mile"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 8939, "code": "int n = 7;\nint[] A = {3, 3, 4, 5, 4, 5, 3};\nint[] B = {5, 3, 4, 4, 2, 3, 2};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint sumA = 0;for (int j = 0; j <= i; j++) {sumA += A[j];}int sumB = 0;for (int j = i; j < n; j++) {sumB += B[j];}ans = Math.max(sumA + sumB, ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "sumA", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA", "+=", "A", "[", "j", "]", ";", "}", "int", "sumB", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumB", "+=", "B", "[", "j", "]", ";", "}", "ans", "=", "Math", ".", "max", "(", "sumA", "+", "sumB", ",", "ans", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "0"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "5"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 5663, "code": "int m = 2;\nSystem.out.println(m / 2 + m % 2);", "code_tokens": ["<0>", "int", "m", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "m", "/", "2", "+", "m", "%", "2", ")", ";"], "trace": [{"line": 0, "state": [["m", "2"]]}, {"line": 1, "state": [["m", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2000, "code": "int n = 10, a = 3, b = 5;\nint ma = Math.min(a, b);\nint mi;if (a + b <= n) {\nmi = 0;\n} else {\nmi = Math.abs(n - (a + b));}\nSystem.out.println(ma + \" \" + mi);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "mi", ";", "if", "(", "a", "+", "b", "<=", "n", ")", "{", "<3>", "mi", "=", "0", ";", "<4>", "}", "else", "{", "<5>", "mi", "=", "Math", ".", "abs", "(", "n", "-", "(", "a", "+", "b", ")", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "mi", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ma", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ma", "3"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ma", "3"], ["mi", "0"]]}, {"line": 6, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ma", "3"], ["mi", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]], "6": [[6, 3, 1, 0]]}}
{"id": 5030, "code": "char[] word = {'s', 'm', 'i', 'l', 'e', 's'};\nStringBuilder rep_word = new StringBuilder();\nint num_abb = word.length - 2;\nrep_word.append(word[0]);\nrep_word.append(num_abb);\nrep_word.append(word[word.length - 1]);\nSystem.out.println(rep_word.toString());", "code_tokens": ["<0>", "char", "[", "]", "word", "=", "{", "'s'", ",", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", ",", "'s'", "}", ";", "<1>", "StringBuilder", "rep_word", "=", "new", "StringBuilder", "(", ")", ";", "<2>", "int", "num_abb", "=", "word", ".", "length", "-", "2", ";", "<3>", "rep_word", ".", "append", "(", "word", "[", "0", "]", ")", ";", "<4>", "rep_word", ".", "append", "(", "num_abb", ")", ";", "<5>", "rep_word", ".", "append", "(", "word", "[", "word", ".", "length", "-", "1", "]", ")", ";", "<6>", "System", ".", "out", ".", "println", "(", "rep_word", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["word", "[ s , m , i , l , e , s ]"]]}, {"line": 1, "state": [["word", "[ s , m , i , l , e , s ]"], ["rep_word", "[ ]"]]}, {"line": 2, "state": [["word", "[ s , m , i , l , e , s ]"], ["rep_word", "[ ]"], ["num_abb", "4"]]}, {"line": 3, "state": [["word", "[ s , m , i , l , e , s ]"], ["rep_word", "[ s ]"], ["num_abb", "4"]]}, {"line": 4, "state": [["word", "[ s , m , i , l , e , s ]"], ["rep_word", "[ s , 4 ]"], ["num_abb", "4"]]}, {"line": 5, "state": [["word", "[ s , m , i , l , e , s ]"], ["rep_word", "[ s , 4 , s ]"], ["num_abb", "4"]]}, {"line": 6, "state": [["word", "[ s , m , i , l , e , s ]"], ["rep_word", "[ s , 4 , s ]"], ["num_abb", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]], "5": [[5, 4, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 0]]}}
{"id": 6504, "code": "int N = 3;\nint[] a = Arrays.stream(\"1 1 1\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nint[] b = Arrays.stream(\"2 2 2\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nint[] c = Arrays.stream(\"3 3 3\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nint result = 0;\nfor (int i : b) {\nint ta = bisectLeft(a, i);\nint tc = bisectRight(c, i);\nresult += ta * (N - tc);}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "Arrays", ".", "stream", "(", "\"1 1 1\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "int", "[", "]", "b", "=", "Arrays", ".", "stream", "(", "\"2 2 2\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<3>", "int", "[", "]", "c", "=", "Arrays", ".", "stream", "(", "\"3 3 3\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "result", "=", "0", ";", "<8>", "for", "(", "int", "i", ":", "b", ")", "{", "<9>", "int", "ta", "=", "bisectLeft", "(", "a", ",", "i", ")", ";", "<10>", "int", "tc", "=", "bisectRight", "(", "c", ",", "i", ")", ";", "<11>", "result", "+=", "ta", "*", "(", "N", "-", "tc", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"]]}, {"line": 3, "state": [["N", "3"]]}, {"line": 4, "state": [["N", "3"]]}, {"line": 5, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 6, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 7, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "0"], ["i", "2"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "0"], ["i", "2"], ["ta", "3"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "0"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 12, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "9"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "9"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "9"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "9"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 12, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "18"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "18"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "18"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "18"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 12, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "27"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "27"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}, {"line": 13, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["result", "27"], ["i", "2"], ["ta", "3"], ["tc", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 2]], "6": [[6, 5, 2]], "7": [[7, 6, 5, 2]], "8": [[8]], "9": [[9, 6, 5, 2], [9, 11, 10, 9, 6, 5, 2], [9, 11, 10, 9, 11, 10, 9, 6, 5, 2], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 5, 2]], "10": [[10, 9, 6, 5, 2], [10, 9, 11, 10, 9, 6, 5, 2], [10, 9, 11, 10, 9, 11, 10, 9, 6, 5, 2]], "11": [[11, 10, 9, 6, 5, 2], [11, 10, 9, 11, 10, 9, 6, 5, 2], [11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 5, 2]], "12": [[12, 11, 10, 9, 6, 5, 2], [12, 11, 10, 9, 11, 10, 9, 6, 5, 2], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 5, 2]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 5, 2]]}}
{"id": 5464, "code": "int n = 5;\nif (n / 2 == (double) n / 2) {\nint m = n / 2;\n} else {\nint m = n / 2 + 1;}\nSystem.out.println(m);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "/", "2", "==", "(", "double", ")", "n", "/", "2", ")", "{", "<2>", "int", "m", "=", "n", "/", "2", ";", "<3>", "}", "else", "{", "<4>", "int", "m", "=", "n", "/", "2", "+", "1", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "m", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 4, "state": [["n", "5"], ["m", "3"]]}, {"line": 5, "state": [["n", "5"], ["m", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]]}}
{"id": 12512, "code": "int a = 1, b = 1, k = 1;\nint g = gcd(a, b);\nint c = 0;\nint i = 1;\nfor (i = g; i > 0; i--) {\nif (g % i == 0) {\nc += 1;\nif (c == k) {\nbreak;}}}\nSystem.out.println(i);", "code_tokens": ["<0>", "int", "a", "=", "1", ",", "b", "=", "1", ",", "k", "=", "1", ";", "<1>", "int", "g", "=", "gcd", "(", "a", ",", "b", ")", ";", "<2>", "int", "c", "=", "0", ";", "<3>", "int", "i", "=", "1", ";", "<4>", "for", "(", "i", "=", "g", ";", "i", ">", "0", ";", "i", "--", ")", "{", "<5>", "if", "(", "g", "%", "i", "==", "0", ")", "{", "<6>", "c", "+=", "1", ";", "<7>", "if", "(", "c", "==", "k", ")", "{", "<8>", "break", ";", "}", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "i", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "1"], ["b", "1"], ["k", "1"]]}, {"line": 2, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"]]}, {"line": 3, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "0"]]}, {"line": 4, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "0"], ["i", "1"]]}, {"line": 5, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "0"], ["i", "1"]]}, {"line": 6, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "0"], ["i", "1"]]}, {"line": 7, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "1"], ["i", "1"]]}, {"line": 8, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "1"], ["i", "1"]]}, {"line": 9, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "1"], ["i", "1"]]}, {"line": 10, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["g", "1"], ["c", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 4, 2, 1]], "6": [[6, 5, 4, 2, 1]], "7": [[7, 3]], "8": [[8, 7, 3]], "9": [[9]], "10": [[10, 6, 5, 4, 2, 1]]}}
{"id": 16090, "code": "public class Main {public static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nint A = 20, B = 15;\nSystem.out.println(Math.max(A - 2 * B, 0));", "code_tokens": ["<0>", "public", "class", "Main", "{", "public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "{", "<1>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<2>", "int", "A", "=", "20", ",", "B", "=", "15", ";", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "A", "-", "2", "*", "B", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["namedtuple", "<function>"]]}, {"line": 3, "state": [["namedtuple", "<function>"], ["A", "20"], ["B", "15"]]}, {"line": 4, "state": [["namedtuple", "<function>"], ["A", "20"], ["B", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3]]}}
{"id": 8664, "code": "int n = 5;\nint[] p = {3, 2, 2, 4, 1};\nint[] q = {1, 2, 2, 2, 1};\nint ans = 0;for (int value : p) {ans += value;}ans += q[n - 1];\nint tmp = ans;\nfor (int i = 0; i < n - 1; i++) {\ntmp = tmp + q[n - i - 2] - p[n - i - 1];\nans = Math.max(ans, tmp);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "p", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "q", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "for", "(", "int", "value", ":", "p", ")", "{", "ans", "+=", "value", ";", "}", "ans", "+=", "q", "[", "n", "-", "1", "]", ";", "<4>", "int", "tmp", "=", "ans", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<6>", "tmp", "=", "tmp", "+", "q", "[", "n", "-", "i", "-", "2", "]", "-", "p", "[", "n", "-", "i", "-", "1", "]", ";", "<7>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "tmp", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"]]}, {"line": 4, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"], ["tmp", "13"]]}, {"line": 5, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"], ["tmp", "13"], ["i", "0"]]}, {"line": 6, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"], ["tmp", "14"], ["i", "0"]]}, {"line": 7, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "14"], ["i", "0"]]}, {"line": 5, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "14"], ["i", "1"]]}, {"line": 6, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "12"], ["i", "1"]]}, {"line": 7, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "12"], ["i", "1"]]}, {"line": 5, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "12"], ["i", "2"]]}, {"line": 6, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "12"], ["i", "2"]]}, {"line": 7, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "12"], ["i", "2"]]}, {"line": 5, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "12"], ["i", "3"]]}, {"line": 6, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "11"], ["i", "3"]]}, {"line": 7, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "11"], ["i", "3"]]}, {"line": 5, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "11"], ["i", "3"]]}, {"line": 8, "state": [["n", "5"], ["p", "[ 3 , 2 , 2 , 4 , 1 ]"], ["q", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["tmp", "11"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0], [5, 6, 5, 3, 2, 1, 0], [5, 6, 5, 6, 5, 3, 2, 1, 0], [5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]], "6": [[6, 5, 3, 2, 1, 0], [6, 5, 6, 5, 3, 2, 1, 0], [6, 5, 6, 5, 6, 5, 3, 2, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]], "7": [[7, 6, 5, 3, 2, 1, 0], [7, 6, 5, 6, 5, 3, 2, 1, 0], [7, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0], [7, 6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]], "8": [[8, 7, 6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]]}}
{"id": 9202, "code": "String s = \"2017/01/07\";\nString x = \"2018\" + s.substring(4);\nSystem.out.println(x);", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/07\"", ";", "<1>", "String", "x", "=", "\"2018\"", "+", "s", ".", "substring", "(", "4", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/07"]]}, {"line": 1, "state": [["s", "2017/01/07"], ["x", "2018/01/07"]]}, {"line": 2, "state": [["s", "2017/01/07"], ["x", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 9531, "code": "String S = \"2017/01/31\";\nS = S.substring(0, 3) + \"8\" + S.substring(4);\nSystem.out.println(S);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "S", "=", "S", ".", "substring", "(", "0", ",", "3", ")", "+", "\"8\"", "+", "S", ".", "substring", "(", "4", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2018/01/31"]]}, {"line": 2, "state": [["S", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 17110, "code": "java.util.Map<String, String> dic = new java.util.HashMap<>();dic.put(\"H,H\", \"H\");dic.put(\"H,D\", \"D\");dic.put(\"D,D\", \"H\");dic.put(\"D,H\", \"D\");\nString a = \"D\"; String b = \"H\";\nSystem.out.println(dic.get(a + \",\" + b));", "code_tokens": ["<0>", "java", ".", "util", ".", "Map", "<", "String", ",", "String", ">", "dic", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "dic", ".", "put", "(", "\"H,H\"", ",", "\"H\"", ")", ";", "dic", ".", "put", "(", "\"H,D\"", ",", "\"D\"", ")", ";", "dic", ".", "put", "(", "\"D,D\"", ",", "\"H\"", ")", ";", "dic", ".", "put", "(", "\"D,H\"", ",", "\"D\"", ")", ";", "<1>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "dic", ".", "get", "(", "a", "+", "\",\"", "+", "b", ")", ")", ";"], "trace": [{"line": 0, "state": [["dic", "{ (H , H)"]]}, {"line": 1, "state": [["dic", "{ (H , H)"], ["a", "D"], ["b", "H"]]}, {"line": 2, "state": [["dic", "{ (H , H)"], ["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 11295, "code": "String[] d = {'SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'};\nString s = \"SUN\";\nSystem.out.println(7 - java.util.Arrays.asList(d).indexOf(s));", "code_tokens": ["<0>", "String", "[", "]", "d", "=", "{", "N", "N", "E", "D", "U", "I", "T", "<1>", "String", "s", "=", "\"SUN\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "7", "-", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "d", ")", ".", "indexOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["d", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["d", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SUN"]]}, {"line": 2, "state": [["d", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 13244, "code": "String S = \"happy,newyear,enjoy\";\nS = S.replace(\",\", \" \");\nSystem.out.println(S);", "code_tokens": ["<0>", "String", "S", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "S", "=", "S", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["S", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["S", "happy newyear enjoy"]]}, {"line": 2, "state": [["S", "happy newyear enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5501, "code": "int n = 2;\nint x = n / 2;int y = n % 2;\nSystem.out.println(x + y);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "x", "=", "n", "/", "2", ";", "int", "y", "=", "n", "%", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", "+", "y", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["x", "1"], ["y", "0"]]}, {"line": 2, "state": [["n", "2"], ["x", "1"], ["y", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 14038, "code": "int N = 6;\nint[] A = {1, 2, 3, 2, 2, 1};\nint ans = 1;\nint flg = 0;\nint rev = 0;\nfor (int i = 0; i < A.length - 1; i++) {int c = A[i];int n = A[i + 1];\nif (flg == 0) {\nif (c < n) {\nflg = 1;\n} else if (c > n) {\nflg = 1;\nrev = 1;}\n} else {\nif (rev == 1) {\nc = -c;\nn = -n;}\nif (c > n) {\nans += 1;\nflg = 0;\nrev = 0;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "int", "flg", "=", "0", ";", "<4>", "int", "rev", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "A", ".", "length", "-", "1", ";", "i", "++", ")", "{", "int", "c", "=", "A", "[", "i", "]", ";", "int", "n", "=", "A", "[", "i", "+", "1", "]", ";", "<6>", "if", "(", "flg", "==", "0", ")", "{", "<7>", "if", "(", "c", "<", "n", ")", "{", "<8>", "flg", "=", "1", ";", "<9>", "}", "else", "if", "(", "c", ">", "n", ")", "{", "<10>", "flg", "=", "1", ";", "<11>", "rev", "=", "1", ";", "}", "<12>", "}", "else", "{", "<13>", "if", "(", "rev", "==", "1", ")", "{", "<14>", "c", "=", "-", "c", ";", "<15>", "n", "=", "-", "n", ";", "}", "<16>", "if", "(", "c", ">", "n", ")", "{", "<17>", "ans", "+=", "1", ";", "<18>", "flg", "=", "0", ";", "<19>", "rev", "=", "0", ";", "}", "}", "}", "<20>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "0"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "0"], ["rev", "0"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "0"], ["rev", "0"], ["c", "1"], ["n", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "0"], ["rev", "0"], ["c", "1"], ["n", "2"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "0"], ["rev", "0"], ["c", "1"], ["n", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "1"], ["n", "2"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "2"], ["n", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "2"], ["n", "3"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "2"], ["n", "3"]]}, {"line": 16, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "2"], ["n", "3"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 16, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["flg", "1"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "1"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 18, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 19, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "3"], ["n", "2"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "2"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "2"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "1"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "1"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "0"], ["rev", "0"], ["c", "2"], ["n", "1"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "1"], ["rev", "0"], ["c", "2"], ["n", "1"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "1"], ["rev", "1"], ["c", "2"], ["n", "1"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "1"], ["rev", "1"], ["c", "2"], ["n", "1"]]}, {"line": 20, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["flg", "1"], ["rev", "1"], ["c", "2"], ["n", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 7, 5, 1], [5, 16, 5, 7, 5, 1], [5, 16, 5, 16, 5, 7, 5, 1], [5, 9, 7, 5, 16, 5, 16, 5, 7, 5, 1], [5, 9, 7, 5, 9, 7, 5, 16, 5, 16, 5, 7, 5, 1]], "6": [[6, 3], [6, 8, 6, 3], [6, 8, 6, 3], [6, 18, 6, 8, 6, 3], [6, 18, 6, 8, 6, 3]], "7": [[7, 5, 1], [7, 5, 16, 5, 16, 5, 7, 5, 1], [7, 5, 9, 7, 5, 16, 5, 16, 5, 7, 5, 1]], "8": [[8, 6, 3]], "9": [[9, 7, 5, 16, 5, 16, 5, 7, 5, 1], [9, 7, 5, 9, 7, 5, 16, 5, 16, 5, 7, 5, 1]], "10": [[10, 6, 18, 6, 8, 6, 3]], "11": [[11, 19, 13, 4]], "13": [[13, 4], [13, 4]], "16": [[16, 5, 7, 5, 1], [16, 5, 16, 5, 7, 5, 1]], "17": [[17, 2]], "18": [[18, 6, 8, 6, 3]], "19": [[19, 13, 4]], "20": [[20, 17, 2]]}}
{"id": 10594, "code": "\nint a = 1, b = 1, k = 1;\nint d = gcd(a, b);\nint e = d + 1;\nint l = 0;\nwhile (true) {\ne -= 1;\nif (d % e == 0) {\nl += 1;\nif (l == k) {\nbreak;}}}\nSystem.out.println(e);", "code_tokens": ["<1>", "int", "a", "=", "1", ",", "b", "=", "1", ",", "k", "=", "1", ";", "<2>", "int", "d", "=", "gcd", "(", "a", ",", "b", ")", ";", "<3>", "int", "e", "=", "d", "+", "1", ";", "<4>", "int", "l", "=", "0", ";", "<5>", "while", "(", "true", ")", "{", "<6>", "e", "-=", "1", ";", "<7>", "if", "(", "d", "%", "e", "==", "0", ")", "{", "<8>", "l", "+=", "1", ";", "<9>", "if", "(", "l", "==", "k", ")", "{", "<10>", "break", ";", "}", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "e", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "1"], ["b", "1"], ["k", "1"]]}, {"line": 2, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"]]}, {"line": 3, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "2"]]}, {"line": 4, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "2"], ["l", "0"]]}, {"line": 5, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "2"], ["l", "0"]]}, {"line": 6, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "1"], ["l", "0"]]}, {"line": 7, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "1"], ["l", "0"]]}, {"line": 8, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "1"], ["l", "1"]]}, {"line": 9, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "1"], ["l", "1"]]}, {"line": 10, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "1"], ["l", "1"]]}, {"line": 11, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["d", "1"], ["e", "1"], ["l", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5]], "6": [[6, 3, 2, 1]], "7": [[7, 6, 3, 2, 1]], "8": [[8, 4]], "9": [[9, 8, 4]], "10": [[10]], "11": [[11, 7, 6, 3, 2, 1]]}}
{"id": 16149, "code": "int n = 2;\nint[] a = {100, 0};\nArrays.sort(a);\nint ideal = a[a.length - 1] / 2;\nint dif_mn = 1000000000;\nfor (int i = 1; i < n; i++) {\nint tmp = a[a.length - 1] - a[i] > ideal ? a[a.length - 1] - a[i] : a[i];\nint dif = ideal - tmp;\nif (dif < dif_mn) {\nint r = a[i];\ndif_mn = dif;}}\nSystem.out.println(a[a.length - 1] + \" \" + r);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "ideal", "=", "a", "[", "a", ".", "length", "-", "1", "]", "/", "2", ";", "<4>", "int", "dif_mn", "=", "1000000000", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "int", "tmp", "=", "a", "[", "a", ".", "length", "-", "1", "]", "-", "a", "[", "i", "]", ">", "ideal", "?", "a", "[", "a", ".", "length", "-", "1", "]", "-", "a", "[", "i", "]", ":", "a", "[", "i", "]", ";", "<7>", "int", "dif", "=", "ideal", "-", "tmp", ";", "<8>", "if", "(", "dif", "<", "dif_mn", ")", "{", "<9>", "int", "r", "=", "a", "[", "i", "]", ";", "<10>", "dif_mn", "=", "dif", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "a", "[", "a", ".", "length", "-", "1", "]", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "1000000000"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "1000000000"], ["i", "1"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "1000000000"], ["i", "1"], ["tmp", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "1000000000"], ["i", "1"], ["tmp", "0"], ["dif", "50"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "1000000000"], ["i", "1"], ["tmp", "0"], ["dif", "50"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "1000000000"], ["i", "1"], ["tmp", "0"], ["dif", "50"], ["r", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "50"], ["i", "1"], ["tmp", "0"], ["dif", "50"], ["r", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "50"], ["i", "1"], ["tmp", "0"], ["dif", "50"], ["r", "0"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["ideal", "50"], ["dif_mn", "50"], ["i", "1"], ["tmp", "0"], ["dif", "50"], ["r", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 0], [5, 9, 6, 5, 0]], "6": [[6, 5, 0]], "7": [[7, 6, 5, 0]], "8": [[8, 7, 6, 5, 0]], "9": [[9, 6, 5, 0]], "10": [[10, 8, 7, 6, 5, 0]], "11": [[11, 9, 6, 5, 0]]}}
{"id": 3775, "code": "int x = 100000, y = 1, z = 1;\nint one_length = y + z;\nSystem.out.println((int) ((x - z) / one_length));", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "int", "one_length", "=", "y", "+", "z", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "(", "(", "x", "-", "z", ")", "/", "one_length", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"], ["one_length", "2"]]}, {"line": 2, "state": [["x", "100000"], ["y", "1"], ["z", "1"], ["one_length", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 8659, "code": "int N = 1;\nint[] A1 = {2};\nint[] A2 = {3};\nint max_drop = 0;\nfor (int i = 0; i < N; i++) {\nint sumA1 = 0;for (int j = 0; j <= i; j++) {sumA1 += A1[j];}int sumA2 = 0;for (int j = i; j < A2.length; j++) {sumA2 += A2[j];}max_drop = Math.max(max_drop, sumA1 + sumA2);}\nSystem.out.println(max_drop);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "A1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "3", "}", ";", "<3>", "int", "max_drop", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "sumA1", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA1", "+=", "A1", "[", "j", "]", ";", "}", "int", "sumA2", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "A2", ".", "length", ";", "j", "++", ")", "{", "sumA2", "+=", "A2", "[", "j", "]", ";", "}", "max_drop", "=", "Math", ".", "max", "(", "max_drop", ",", "sumA1", "+", "sumA2", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "max_drop", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["A1", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_drop", "0"]]}, {"line": 4, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_drop", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_drop", "5"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_drop", "5"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_drop", "5"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]]}}
{"id": 3316, "code": "int a = 12, b = 4;\nint left = a - (b * 2);\nif (left >= 0) {System.out.println(left);} else {System.out.println('0');}", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "int", "left", "=", "a", "-", "(", "b", "*", "2", ")", ";", "<2>", "if", "(", "left", ">=", "0", ")", "{", "System", ".", "out", ".", "println", "(", "left", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "'0'", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"], ["left", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"], ["left", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15629, "code": "int x = 64145, y = 123, z = 456;\nint count = 0;\nx -= z;\nSystem.out.println(x / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "64145", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "count", "=", "0", ";", "<2>", "x", "-=", "z", ";", "<3>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["count", "0"]]}, {"line": 2, "state": [["x", "63689"], ["y", "123"], ["z", "456"], ["count", "0"]]}, {"line": 3, "state": [["x", "63689"], ["y", "123"], ["z", "456"], ["count", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 9112, "code": "String s1 = \"2017\"; String s2 = \"01\"; String s3 = \"07\";\ns1 = \"2018\";\nSystem.out.println(s1 + \"/\" + s2 + \"/\" + s3);", "code_tokens": ["<0>", "String", "s1", "=", "\"2017\"", ";", "String", "s2", "=", "\"01\"", ";", "String", "s3", "=", "\"07\"", ";", "<1>", "s1", "=", "\"2018\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "s1", "+", "\"/\"", "+", "s2", "+", "\"/\"", "+", "s3", ")", ";"], "trace": [{"line": 0, "state": [["s1", "2017"], ["s2", "01"], ["s3", "07"]]}, {"line": 1, "state": [["s1", "2018"], ["s2", "01"], ["s3", "07"]]}, {"line": 2, "state": [["s1", "2018"], ["s2", "01"], ["s3", "07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 13617, "code": "String a = \"haiku\"; String b = \"atcoder\"; String c = \"tasks\";\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "a", "=", "\"haiku\"", ";", "String", "b", "=", "\"atcoder\"", ";", "String", "c", "=", "\"tasks\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "haiku"], ["b", "atcoder"], ["c", "tasks"]]}, {"line": 1, "state": [["a", "haiku"], ["b", "atcoder"], ["c", "tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7278, "code": "int H = 211, N = 5;\nint[] f = {31, 41, 59, 26, 53};\nif (java.util.Arrays.stream(f).sum() >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "f", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "java", ".", "util", ".", "Arrays", ".", "stream", "(", "f", ")", ".", "sum", "(", ")", ">=", "H", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["f", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["f", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 5, "state": [["H", "211"], ["N", "5"], ["f", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 8625, "code": "int N = 1;\nint[] A = {2};\nint[] B = {3};\nint ans = 0;\nfor (int x = 0; x < N; x++) {\nint[] C = new int[x + 1 + (N - x)];System.arraycopy(A, 0, C, 0, x + 1);System.arraycopy(B, x, C, x + 1, N - x);\nint n = 0;for (int value : C) {n += value;}\nans = Math.max(ans, n);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "3", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "x", "=", "0", ";", "x", "<", "N", ";", "x", "++", ")", "{", "<5>", "int", "[", "]", "C", "=", "new", "int", "[", "x", "+", "1", "+", "(", "N", "-", "x", ")", "]", ";", "System", ".", "arraycopy", "(", "A", ",", "0", ",", "C", ",", "0", ",", "x", "+", "1", ")", ";", "System", ".", "arraycopy", "(", "B", ",", "x", ",", "C", ",", "x", "+", "1", ",", "N", "-", "x", ")", ";", "<6>", "int", "n", "=", "0", ";", "for", "(", "int", "value", ":", "C", ")", "{", "n", "+=", "value", ";", "}", "<7>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "n", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["A", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "0"]]}, {"line": 4, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "0"], ["x", "0"]]}, {"line": 5, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "0"], ["x", "0"], ["C", "[ 2 , 3 ]"]]}, {"line": 6, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "0"], ["x", "0"], ["C", "[ 2 , 3 ]"], ["n", "5"]]}, {"line": 7, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "5"], ["x", "0"], ["C", "[ 2 , 3 ]"], ["n", "5"]]}, {"line": 4, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "5"], ["x", "0"], ["C", "[ 2 , 3 ]"], ["n", "5"]]}, {"line": 8, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "5"], ["x", "0"], ["C", "[ 2 , 3 ]"], ["n", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 0]]}}
{"id": 2349, "code": "int N = 2, W = 1;\nint total1 = 0;\nint total2 = 0;\nif (N > 1) {\ntotal1 = N * (N - 1) / 2;}\nelse {\ntotal1 = 0;}\nif (W >= 2) {\ntotal2 = W * (W - 1) / 2;}\nelse {\ntotal2 = 0;}\nSystem.out.println(total1 + total2);", "code_tokens": ["<0>", "int", "N", "=", "2", ",", "W", "=", "1", ";", "<1>", "int", "total1", "=", "0", ";", "<2>", "int", "total2", "=", "0", ";", "<3>", "if", "(", "N", ">", "1", ")", "{", "<4>", "total1", "=", "N", "*", "(", "N", "-", "1", ")", "/", "2", ";", "}", "<5>", "else", "{", "<6>", "total1", "=", "0", ";", "}", "<7>", "if", "(", "W", ">=", "2", ")", "{", "<8>", "total2", "=", "W", "*", "(", "W", "-", "1", ")", "/", "2", ";", "}", "<9>", "else", "{", "<10>", "total2", "=", "0", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "total1", "+", "total2", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"], ["W", "1"]]}, {"line": 1, "state": [["N", "2"], ["W", "1"], ["total1", "0"]]}, {"line": 2, "state": [["N", "2"], ["W", "1"], ["total1", "0"], ["total2", "0"]]}, {"line": 3, "state": [["N", "2"], ["W", "1"], ["total1", "0"], ["total2", "0"]]}, {"line": 4, "state": [["N", "2"], ["W", "1"], ["total1", "1"], ["total2", "0"]]}, {"line": 7, "state": [["N", "2"], ["W", "1"], ["total1", "1"], ["total2", "0"]]}, {"line": 10, "state": [["N", "2"], ["W", "1"], ["total1", "1"], ["total2", "0"]]}, {"line": 11, "state": [["N", "2"], ["W", "1"], ["total1", "1"], ["total2", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]], "7": [[7, 0]], "10": [[10, 2]], "11": [[11, 10, 2]]}}
{"id": 9659, "code": "int n = 8;\nString s = \"))))((((\";\nint opens = 0;\nint l = 0;\nfor (int i = 0; i < n; i++) {\nif (s.charAt(i) == '(') {\nopens += 1;}\nelse {\nopens -= 1;\nif (opens < 0) {\nl += 1;\nopens = 0;}}}\nSystem.out.println(\"(\".repeat(l) + s + \")\".repeat(opens));", "code_tokens": ["<0>", "int", "n", "=", "8", ";", "<1>", "String", "s", "=", "\"))))((((\"", ";", "<2>", "int", "opens", "=", "0", ";", "<3>", "int", "l", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<6>", "opens", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "opens", "-=", "1", ";", "<9>", "if", "(", "opens", "<", "0", ")", "{", "<10>", "l", "+=", "1", ";", "<11>", "opens", "=", "0", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "l", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "opens", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"]]}, {"line": 1, "state": [["n", "8"], ["s", "))))(((("]]}, {"line": 2, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"]]}, {"line": 3, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "0"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "1"], ["i", "0"]]}, {"line": 11, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "1"], ["i", "1"]]}, {"line": 8, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "1"], ["i", "1"]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "2"], ["i", "1"]]}, {"line": 11, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "2"], ["i", "1"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "2"], ["i", "2"]]}, {"line": 8, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "2"], ["i", "2"]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "2"], ["i", "2"]]}, {"line": 10, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "3"], ["i", "2"]]}, {"line": 11, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "3"], ["i", "2"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "3"], ["i", "3"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "3"], ["i", "3"]]}, {"line": 8, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "3"], ["i", "3"]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "3"], ["i", "3"]]}, {"line": 10, "state": [["n", "8"], ["s", "))))(((("], ["opens", "-1"], ["l", "4"], ["i", "3"]]}, {"line": 11, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "4"], ["i", "3"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "4"], ["i", "4"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "0"], ["l", "4"], ["i", "4"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["opens", "1"], ["l", "4"], ["i", "4"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "1"], ["l", "4"], ["i", "5"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "1"], ["l", "4"], ["i", "5"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["opens", "2"], ["l", "4"], ["i", "5"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "2"], ["l", "4"], ["i", "6"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "2"], ["l", "4"], ["i", "6"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["opens", "3"], ["l", "4"], ["i", "6"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "3"], ["l", "4"], ["i", "7"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["opens", "3"], ["l", "4"], ["i", "7"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["opens", "4"], ["l", "4"], ["i", "7"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["opens", "4"], ["l", "4"], ["i", "7"]]}, {"line": 12, "state": [["n", "8"], ["s", "))))(((("], ["opens", "4"], ["l", "4"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2], [6, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2], [6, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2], [6, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2]], "8": [[8, 2], [8, 11, 9, 8, 2], [8, 11, 9, 8, 11, 9, 8, 2], [8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2]], "9": [[9, 8, 2], [9, 8, 11, 9, 8, 2], [9, 8, 11, 9, 8, 11, 9, 8, 2], [9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2]], "10": [[10, 3], [10, 3], [10, 3], [10, 3]], "11": [[11, 9, 8, 2], [11, 9, 8, 11, 9, 8, 2], [11, 9, 8, 11, 9, 8, 11, 9, 8, 2], [11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2]], "12": [[12, 6, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 2]]}}
{"id": 8377, "code": "int n = 4;\nint[] x = {1, 1, 1, 1};\nint[] y = {1, 1, 1, 1};\nint mx = 0;\nfor (int i = 0; i < n; i++) {\nint ans = sumArray(x, i + 1) + sumArray(y, n - i);\nif (ans > mx) {\nmx = ans;}}\nSystem.out.println(mx);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "x", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "y", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "mx", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "ans", "=", "sumArray", "(", "x", ",", "i", "+", "1", ")", "+", "sumArray", "(", "y", ",", "n", "-", "i", ")", ";", "<6>", "if", "(", "ans", ">", "mx", ")", "{", "<7>", "mx", "=", "ans", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "mx", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "0"]]}, {"line": 4, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "0"], ["i", "0"], ["ans", "5"]]}, {"line": 6, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "0"], ["i", "0"], ["ans", "5"]]}, {"line": 7, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "0"], ["ans", "5"]]}, {"line": 4, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "1"], ["ans", "5"]]}, {"line": 5, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "1"], ["ans", "5"]]}, {"line": 6, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "1"], ["ans", "5"]]}, {"line": 4, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "2"], ["ans", "5"]]}, {"line": 5, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "2"], ["ans", "5"]]}, {"line": 6, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "2"], ["ans", "5"]]}, {"line": 4, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "3"], ["ans", "5"]]}, {"line": 5, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "3"], ["ans", "5"]]}, {"line": 6, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "3"], ["ans", "5"]]}, {"line": 4, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "3"], ["ans", "5"]]}, {"line": 8, "state": [["n", "4"], ["x", "[ 1 , 1 , 1 , 1 ]"], ["y", "[ 1 , 1 , 1 , 1 ]"], ["mx", "5"], ["i", "3"], ["ans", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 349, "code": "String s = \"xyz\";\nint k = 4;\nint lens = s.length();\nString alp = \"azyxwvutsrqponmlkjihgfedcb\";\nStringBuilder ans = new StringBuilder();\nfor (int i = 0; i < lens; i++) {\nint d = alp.indexOf(s.charAt(i));\nif (k >= d) {\nk -= d;\nans.append(\"a\");}\nelse {\nans.append(s.charAt(i));}}\nchar las = ans.charAt(ans.length() - 1);ans.deleteCharAt(ans.length() - 1);\nalp = \"abcdefghijklmnopqrstuvwxyz\";\nans.append(alp.charAt((alp.indexOf(las) + k) % 26));\nSystem.out.println(ans.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "int", "lens", "=", "s", ".", "length", "(", ")", ";", "<3>", "String", "alp", "=", "\"azyxwvutsrqponmlkjihgfedcb\"", ";", "<4>", "StringBuilder", "ans", "=", "new", "StringBuilder", "(", ")", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "lens", ";", "i", "++", ")", "{", "<6>", "int", "d", "=", "alp", ".", "indexOf", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "<7>", "if", "(", "k", ">=", "d", ")", "{", "<8>", "k", "-=", "d", ";", "<9>", "ans", ".", "append", "(", "\"a\"", ")", ";", "}", "<10>", "else", "{", "<11>", "ans", ".", "append", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "}", "}", "<12>", "char", "las", "=", "ans", ".", "charAt", "(", "ans", ".", "length", "(", ")", "-", "1", ")", ";", "ans", ".", "deleteCharAt", "(", "ans", ".", "length", "(", ")", "-", "1", ")", ";", "<13>", "alp", "=", "\"abcdefghijklmnopqrstuvwxyz\"", ";", "<14>", "ans", ".", "append", "(", "alp", ".", "charAt", "(", "(", "alp", ".", "indexOf", "(", "las", ")", "+", "k", ")", "%", "26", ")", ")", ";", "<15>", "System", ".", "out", ".", "println", "(", "ans", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["k", "4"]]}, {"line": 2, "state": [["s", "xyz"], ["k", "4"], ["lens", "3"]]}, {"line": 3, "state": [["s", "xyz"], ["k", "4"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"]]}, {"line": 4, "state": [["s", "xyz"], ["k", "4"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ ]"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "4"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ ]"], ["i", "0"]]}, {"line": 6, "state": [["s", "xyz"], ["k", "4"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ ]"], ["i", "0"], ["d", "3"]]}, {"line": 7, "state": [["s", "xyz"], ["k", "4"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ ]"], ["i", "0"], ["d", "3"]]}, {"line": 8, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ ]"], ["i", "0"], ["d", "3"]]}, {"line": 9, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a ]"], ["i", "0"], ["d", "3"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a ]"], ["i", "1"], ["d", "3"]]}, {"line": 6, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a ]"], ["i", "1"], ["d", "2"]]}, {"line": 7, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a ]"], ["i", "1"], ["d", "2"]]}, {"line": 11, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y ]"], ["i", "1"], ["d", "2"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y ]"], ["i", "2"], ["d", "2"]]}, {"line": 6, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y ]"], ["i", "2"], ["d", "1"]]}, {"line": 7, "state": [["s", "xyz"], ["k", "1"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y ]"], ["i", "2"], ["d", "1"]]}, {"line": 8, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y ]"], ["i", "2"], ["d", "1"]]}, {"line": 9, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y , a ]"], ["i", "2"], ["d", "1"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y , a ]"], ["i", "2"], ["d", "1"]]}, {"line": 12, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "azyxwvutsrqponmlkjihgfedcb"], ["ans", "[ a , y ]"], ["i", "2"], ["d", "1"], ["las", "a"]]}, {"line": 13, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "abcdefghijklmnopqrstuvwxyz"], ["ans", "[ a , y ]"], ["i", "2"], ["d", "1"], ["las", "a"]]}, {"line": 14, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "abcdefghijklmnopqrstuvwxyz"], ["ans", "[ a , y , a ]"], ["i", "2"], ["d", "1"], ["las", "a"]]}, {"line": 15, "state": [["s", "xyz"], ["k", "0"], ["lens", "3"], ["alp", "abcdefghijklmnopqrstuvwxyz"], ["ans", "[ a , y , a ]"], ["i", "2"], ["d", "1"], ["las", "a"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4]], "5": [[5, 2, 0], [5, 6, 5, 2, 0], [5, 11, 6, 5, 6, 5, 2, 0], [5, 6, 5, 11, 6, 5, 6, 5, 2, 0]], "6": [[6, 5, 2, 0], [6, 5, 6, 5, 2, 0], [6, 5, 11, 6, 5, 6, 5, 2, 0]], "7": [[7, 6, 5, 2, 0], [7, 6, 5, 6, 5, 2, 0], [7, 6, 5, 11, 6, 5, 6, 5, 2, 0]], "8": [[8, 7, 6, 5, 2, 0], [8, 7, 6, 5, 11, 6, 5, 6, 5, 2, 0]], "9": [[9, 4], [9, 11, 6, 5, 6, 5, 2, 0]], "11": [[11, 6, 5, 6, 5, 2, 0]], "12": [[12, 9, 11, 6, 5, 6, 5, 2, 0]], "13": [[13, 6, 5, 11, 6, 5, 6, 5, 2, 0]], "14": [[14, 13, 6, 5, 11, 6, 5, 6, 5, 2, 0]], "15": [[15, 14, 13, 6, 5, 11, 6, 5, 6, 5, 2, 0]]}}
{"id": 6878, "code": "int H = 211, N = 5;\njava.util.List<Integer> list = new java.util.ArrayList<>();\nfor (int i : java.util.Arrays.asList(31, 41, 59, 26, 53)) {\nlist.add(i);}\nif (H - list.stream().mapToInt(Integer::intValue).sum() <= 0) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "java", ".", "util", ".", "List", "<", "Integer", ">", "list", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "<2>", "for", "(", "int", "i", ":", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "31", ",", "41", ",", "59", ",", "26", ",", "53", ")", ")", "{", "<3>", "list", ".", "add", "(", "i", ")", ";", "}", "<4>", "if", "(", "H", "-", "list", ".", "stream", "(", ")", ".", "mapToInt", "(", "Integer", "::", "intValue", ")", ".", "sum", "(", ")", "<=", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["list", "[ ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list", "[ ]"], ["i", "31"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 ]"], ["i", "31"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 ]"], ["i", "41"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 ]"], ["i", "41"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 ]"], ["i", "59"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 ]"], ["i", "59"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 ]"], ["i", "26"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 , 26 ]"], ["i", "26"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 , 26 ]"], ["i", "53"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "53"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "53"]]}, {"line": 4, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "53"]]}, {"line": 7, "state": [["H", "211"], ["N", "5"], ["list", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "53"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 3, 2], [2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "3": [[3, 2], [3, 2, 3, 2], [3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "7": [[7]]}}
{"id": 13920, "code": "int n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nint state = 100;\nint count = 1;\nint tmp = a[0];\nfor (int i : a) {\nif (i == tmp) {\n}\nelse if (i > tmp) {\nif (state == 1) {\n}\nelse if (state == 0) {\ncount += 1;\nstate = 100;}\nelse {\nstate = 1;}}\nelse {\nif (state == 0) {\n}\nelse if (state == 1) {\ncount += 1;\nstate = 100;}\nelse {\nstate = 0;}}\ntmp = i;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "state", "=", "100", ";", "<3>", "int", "count", "=", "1", ";", "<4>", "int", "tmp", "=", "a", "[", "0", "]", ";", "<5>", "for", "(", "int", "i", ":", "a", ")", "{", "<6>", "if", "(", "i", "==", "tmp", ")", "{", "<7>", "}", "<8>", "else", "if", "(", "i", ">", "tmp", ")", "{", "<9>", "if", "(", "state", "==", "1", ")", "{", "<10>", "}", "<11>", "else", "if", "(", "state", "==", "0", ")", "{", "<12>", "count", "+=", "1", ";", "<13>", "state", "=", "100", ";", "}", "<14>", "else", "{", "<15>", "state", "=", "1", ";", "}", "}", "<16>", "else", "{", "<17>", "if", "(", "state", "==", "0", ")", "{", "<18>", "}", "<19>", "else", "if", "(", "state", "==", "1", ")", "{", "<20>", "count", "+=", "1", ";", "<21>", "state", "=", "100", ";", "}", "<22>", "else", "{", "<23>", "state", "=", "0", ";", "}", "}", "<24>", "tmp", "=", "i", ";", "}", "<25>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 24, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 15, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "1"], ["i", "2"]]}, {"line": 24, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "3"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "2"], ["i", "3"]]}, {"line": 24, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "3"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "3"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "3"], ["i", "2"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "3"], ["i", "2"]]}, {"line": 17, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "3"], ["i", "2"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "1"], ["tmp", "3"], ["i", "2"]]}, {"line": 20, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "1"], ["count", "2"], ["tmp", "3"], ["i", "2"]]}, {"line": 21, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "3"], ["i", "2"]]}, {"line": 24, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "2"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "2"]]}, {"line": 24, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 17, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 19, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "100"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 23, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "0"], ["count", "2"], ["tmp", "2"], ["i", "1"]]}, {"line": 24, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "0"], ["count", "2"], ["tmp", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "0"], ["count", "2"], ["tmp", "1"], ["i", "1"]]}, {"line": 25, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["state", "0"], ["count", "2"], ["tmp", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 4, 1], [5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [5, 24, 8, 6, 5, 24, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "6": [[6, 5, 4, 1], [6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [6, 5, 24, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "7": [[7], [7]], "8": [[8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [8, 6, 5, 24, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "9": [[9, 2], [9, 15, 11, 9, 2]], "10": [[10]], "11": [[11, 9, 2]], "15": [[15, 11, 9, 2]], "17": [[17, 9, 15, 11, 9, 2], [17, 21, 19, 17, 9, 15, 11, 9, 2]], "19": [[19, 17, 9, 15, 11, 9, 2], [19, 17, 21, 19, 17, 9, 15, 11, 9, 2]], "20": [[20, 3]], "21": [[21, 19, 17, 9, 15, 11, 9, 2]], "23": [[23, 19, 17, 21, 19, 17, 9, 15, 11, 9, 2]], "24": [[24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1], [24, 8, 6, 5, 24, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 8, 6, 5, 24, 6, 5, 4, 1]], "25": [[25, 20, 3]]}}
{"id": 9998, "code": "int n = 6;\nString s = \")))())\";\nint nopen = 0;\nString sl = \"\";\nString sr = \"\";\nfor (char c : s.toCharArray()) {\nif (c == '(') {\nnopen += 1;}\nelse {\nif (nopen == 0) {\nsl += '(';}\nelse {\nnopen -= 1;}}}\nnopen = 0;for (char c : (sl + s).toCharArray()) {nopen += (c == '(') ? 1 : -1;}\nsr = new String(new char[nopen]).replace(\"\\0\", \")\");\nSystem.out.println(sl + s + sr);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "int", "nopen", "=", "0", ";", "<3>", "String", "sl", "=", "\"\"", ";", "<4>", "String", "sr", "=", "\"\"", ";", "<5>", "for", "(", "char", "c", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<6>", "if", "(", "c", "==", "'('", ")", "{", "<7>", "nopen", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "if", "(", "nopen", "==", "0", ")", "{", "<10>", "sl", "+=", "'('", ";", "}", "<11>", "else", "{", "<12>", "nopen", "-=", "1", ";", "}", "}", "}", "<13>", "nopen", "=", "0", ";", "for", "(", "char", "c", ":", "(", "sl", "+", "s", ")", ".", "toCharArray", "(", ")", ")", "{", "nopen", "+=", "(", "c", "==", "'('", ")", "?", "1", ":", "-", "1", ";", "}", "<14>", "sr", "=", "new", "String", "(", "new", "char", "[", "nopen", "]", ")", ".", "replace", "(", "\"\\0\"", ",", "\")\"", ")", ";", "<15>", "System", ".", "out", ".", "println", "(", "sl", "+", "s", "+", "sr", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", ""]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", ""], ["sr", ""]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "(("], ["sr", ""], ["c", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "(("], ["sr", ""], ["c", ")"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "(("], ["sr", ""], ["c", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sl", "(("], ["sr", ""], ["c", ")"]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", "("], ["sl", "((("]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", "("], ["sl", "((("]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["nopen", "1"], ["sr", ""], ["c", "("], ["sl", "((("]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "1"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["nopen", "1"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["nopen", "1"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "((("]]}, {"line": 10, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "(((("]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "(((("]]}, {"line": 13, "state": []}, {"line": 13, "state": []}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "(((("]]}, {"line": 14, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "(((("]]}, {"line": 15, "state": [["n", "6"], ["s", ")))())"], ["nopen", "0"], ["sr", ""], ["c", ")"], ["sl", "(((("]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 6, 5, 1], [5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]], "7": [[7, 9, 2]], "9": [[9, 2], [9, 2], [9, 2], [9, 7, 9, 2], [9, 12, 9, 7, 9, 2]], "10": [[10, 3], [10, 3], [10, 3], [10, 3]], "12": [[12, 9, 7, 9, 2]], "13": [[13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]], "14": [[14, 13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]], "15": [[15, 14, 13, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1]]}}
{"id": 1664, "code": "int N = 10, A = 3, B = 5;\nint r_max = Math.min(A, B);\nint r_min;if (A + B > N) {\nr_min = A + B - N;\n} else {\nr_min = 0;}\nSystem.out.println(r_max + \" \" + r_min);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "3", ",", "B", "=", "5", ";", "<1>", "int", "r_max", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "r_min", ";", "if", "(", "A", "+", "B", ">", "N", ")", "{", "<3>", "r_min", "=", "A", "+", "B", "-", "N", ";", "<4>", "}", "else", "{", "<5>", "r_min", "=", "0", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "r_max", "+", "\" \"", "+", "r_min", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "3"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["r_max", "3"]]}, {"line": 2, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["r_max", "3"]]}, {"line": 5, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["r_max", "3"], ["r_min", "0"]]}, {"line": 6, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["r_max", "3"], ["r_min", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]], "6": [[6, 5, 1, 0]]}}
{"id": 7439, "code": "int H = 10, N = 3;\nint[] As = {4, 5, 6};\nint sumA = 0;for (int a : As) {sumA += a;}\nif (sumA >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "As", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "sumA", "=", "0", ";", "for", "(", "int", "a", ":", "As", ")", "{", "sumA", "+=", "a", ";", "}", "<3>", "if", "(", "sumA", ">=", "H", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"], ["As", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"], ["As", "[ 4 , 5 , 6 ]"], ["sumA", "15"]]}, {"line": 3, "state": [["H", "10"], ["N", "3"], ["As", "[ 4 , 5 , 6 ]"], ["sumA", "15"]]}, {"line": 4, "state": [["H", "10"], ["N", "3"], ["As", "[ 4 , 5 , 6 ]"], ["sumA", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 14427, "code": "int n = 6;int[] a = {1, 2, 3, 2, 2, 1};int b = -1;int x = 1;\nfor (int i = 0; i < n - 1; i++) {\nif (b == 0) {\nif (a[i] > a[i + 1]) {b = -1;x += 1;}\n} else if (b == 1) {\nif (a[i] < a[i + 1]) {b = -1;x += 1;}\n} else {\nif (a[i] < a[i + 1]) {b = 0;\n} else if (a[i] > a[i + 1]) {b = 1;}}}\nSystem.out.println(x);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "int", "b", "=", "-", "1", ";", "int", "x", "=", "1", ";", "<1>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<2>", "if", "(", "b", "==", "0", ")", "{", "<3>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "+", "1", "]", ")", "{", "b", "=", "-", "1", ";", "x", "+=", "1", ";", "}", "<4>", "}", "else", "if", "(", "b", "==", "1", ")", "{", "<5>", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "+", "1", "]", ")", "{", "b", "=", "-", "1", ";", "x", "+=", "1", ";", "}", "<6>", "}", "else", "{", "<7>", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "+", "1", "]", ")", "{", "b", "=", "0", ";", "<8>", "}", "else", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "+", "1", "]", ")", "{", "b", "=", "1", ";", "}", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "1"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "1"], ["i", "0"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "1"], ["i", "0"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "1"], ["i", "0"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "0"], ["x", "1"], ["i", "0"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "0"], ["x", "1"], ["i", "1"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "0"], ["x", "1"], ["i", "1"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "0"], ["x", "1"], ["i", "1"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "0"], ["x", "1"], ["i", "2"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "0"], ["x", "1"], ["i", "2"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "2"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "3"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "3"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "3"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "3"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "3"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "4"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "4"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "4"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "-1"], ["x", "2"], ["i", "4"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "1"], ["x", "2"], ["i", "4"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "1"], ["x", "2"], ["i", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["b", "1"], ["x", "2"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 7, 4, 2, 0], [1, 3, 2, 7, 4, 2, 0], [1, 3, 2, 3, 2, 7, 4, 2, 0], [1, 8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0], [1, 8, 7, 4, 2, 8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0]], "2": [[2, 0], [2, 7, 4, 2, 0], [2, 3, 2, 7, 4, 2, 0], [2, 3, 2, 3, 2, 7, 4, 2, 0], [2, 8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0]], "3": [[3, 2, 7, 4, 2, 0], [3, 2, 3, 2, 7, 4, 2, 0]], "4": [[4, 2, 0], [4, 2, 3, 2, 3, 2, 7, 4, 2, 0], [4, 2, 8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0]], "7": [[7, 4, 2, 0], [7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0], [7, 4, 2, 8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0]], "8": [[8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0], [8, 7, 4, 2, 8, 7, 4, 2, 3, 2, 3, 2, 7, 4, 2, 0]], "9": [[9, 3, 2, 3, 2, 7, 4, 2, 0]]}}
{"id": 8525, "code": "int n = 1;\nList<List<Integer>> candy_map = new ArrayList<>();\ncandy_map.add(new ArrayList<>());Scanner scanner = new Scanner(\"2\");while (scanner.hasNextInt()) {candy_map.get(0).add(scanner.nextInt());}\ncandy_map.add(new ArrayList<>());scanner = new Scanner(\"3\");while (scanner.hasNextInt()) {candy_map.get(1).add(scanner.nextInt());}\nint[][] dp = new int[2][n];\ndp[0][0] = candy_map.get(0).get(0);\nfor (int i = 1; i < n; i++) {\ndp[0][i] = dp[0][i - 1] + candy_map.get(0).get(i);}\ndp[1][0] = dp[0][0] + candy_map.get(1).get(0);\nfor (int i = 1; i < n; i++) {\ndp[1][i] = candy_map.get(1).get(i) + Math.max(dp[0][i], dp[1][i - 1]);}\nSystem.out.println(dp[1][dp[1].length - 1]);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "List", "<", "List", "<", "Integer", ">", ">", "candy_map", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<2>", "candy_map", ".", "add", "(", "new", "ArrayList", "<", ">", "(", ")", ")", ";", "Scanner", "scanner", "=", "new", "Scanner", "(", "\"2\"", ")", ";", "while", "(", "scanner", ".", "hasNextInt", "(", ")", ")", "{", "candy_map", ".", "get", "(", "0", ")", ".", "add", "(", "scanner", ".", "nextInt", "(", ")", ")", ";", "}", "<3>", "candy_map", ".", "add", "(", "new", "ArrayList", "<", ">", "(", ")", ")", ";", "scanner", "=", "new", "Scanner", "(", "\"3\"", ")", ";", "while", "(", "scanner", ".", "hasNextInt", "(", ")", ")", "{", "candy_map", ".", "get", "(", "1", ")", ".", "add", "(", "scanner", ".", "nextInt", "(", ")", ")", ";", "}", "<4>", "int", "[", "]", "[", "]", "dp", "=", "new", "int", "[", "2", "]", "[", "n", "]", ";", "<5>", "dp", "[", "0", "]", "[", "0", "]", "=", "candy_map", ".", "get", "(", "0", ")", ".", "get", "(", "0", ")", ";", "<6>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "dp", "[", "0", "]", "[", "i", "]", "=", "dp", "[", "0", "]", "[", "i", "-", "1", "]", "+", "candy_map", ".", "get", "(", "0", ")", ".", "get", "(", "i", ")", ";", "}", "<8>", "dp", "[", "1", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "[", "0", "]", "+", "candy_map", ".", "get", "(", "1", ")", ".", "get", "(", "0", ")", ";", "<9>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<10>", "dp", "[", "1", "]", "[", "i", "]", "=", "candy_map", ".", "get", "(", "1", ")", ".", "get", "(", "i", ")", "+", "Math", ".", "max", "(", "dp", "[", "0", "]", "[", "i", "]", ",", "dp", "[", "1", "]", "[", "i", "-", "1", "]", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "dp", "[", "1", "]", "[", "dp", "[", "1", "]", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["candy_map", "[ ]"]]}, {"line": 2, "state": [["n", "1"], ["candy_map", "[ [ 2 ] ]"]]}, {"line": 3, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"]]}, {"line": 4, "state": []}, {"line": 4, "state": []}, {"line": 4, "state": []}, {"line": 4, "state": []}, {"line": 4, "state": []}, {"line": 4, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"], ["dp", "[ [ 0 ] , [ 0 ] ]"]]}, {"line": 5, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"], ["dp", "[ [ 2 ] , [ 0 ] ]"]]}, {"line": 6, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"], ["dp", "[ [ 2 ] , [ 0 ] ]"]]}, {"line": 8, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"], ["dp", "[ [ 2 ] , [ 5 ] ]"]]}, {"line": 9, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"], ["dp", "[ [ 2 ] , [ 5 ] ]"]]}, {"line": 11, "state": [["n", "1"], ["candy_map", "[ [ 2 ] , [ 3 ] ]"], ["dp", "[ [ 2 ] , [ 5 ] ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0]], "5": [[5, 4, 0]], "6": [[6, 4, 0]], "8": [[8, 5, 4, 0]], "9": [[9, 6, 4, 0]], "11": [[11, 8, 5, 4, 0]]}}
{"id": 11200, "code": "String[] a = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nString s = \"SAT\";\nfor (int i = 0; i < 7; i++) {\nif (a[i].equals(s)) {\nSystem.out.println(7 - i);}}", "code_tokens": ["<0>", "String", "[", "]", "a", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "String", "s", "=", "\"SAT\"", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "7", ";", "i", "++", ")", "{", "<3>", "if", "(", "a", "[", "i", "]", ".", "equals", "(", "s", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", "-", "i", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "0"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "0"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "1"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "1"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "2"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "2"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "3"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "3"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "4"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "4"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "5"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "5"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "6"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "6"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "6"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 3, 2], [2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "3": [[3, 2], [3, 2, 3, 2], [3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]]}}
{"id": 6996, "code": "int H = 20, N = 3;\nint[] l = {4, 5, 6};\nint total = 0;\nfor (int k = 0; k < N; k++) {\ntotal += l[k];}\nif (total >= H) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "l", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "total", "=", "0", ";", "<3>", "for", "(", "int", "k", "=", "0", ";", "k", "<", "N", ";", "k", "++", ")", "{", "<4>", "total", "+=", "l", "[", "k", "]", ";", "}", "<5>", "if", "(", "total", ">=", "H", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "20"], ["N", "3"]]}, {"line": 1, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "0"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "0"], ["k", "0"]]}, {"line": 4, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "4"], ["k", "0"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "4"], ["k", "1"]]}, {"line": 4, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "9"], ["k", "1"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "9"], ["k", "2"]]}, {"line": 4, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "15"], ["k", "2"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "15"], ["k", "2"]]}, {"line": 5, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "15"], ["k", "2"]]}, {"line": 8, "state": [["H", "20"], ["N", "3"], ["l", "[ 4 , 5 , 6 ]"], ["total", "15"], ["k", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 0]], "8": [[8]]}}
{"id": 1085, "code": "int n = 750;\nint h = n / 100;\nint x = h * 100 + h * 10 + h;\nif (n <= x) {System.out.println(x);} else {System.out.println(x + 111);}", "code_tokens": ["<0>", "int", "n", "=", "750", ";", "<1>", "int", "h", "=", "n", "/", "100", ";", "<2>", "int", "x", "=", "h", "*", "100", "+", "h", "*", "10", "+", "h", ";", "<3>", "if", "(", "n", "<=", "x", ")", "{", "System", ".", "out", ".", "println", "(", "x", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "x", "+", "111", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "750"]]}, {"line": 1, "state": [["n", "750"], ["h", "7"]]}, {"line": 2, "state": [["n", "750"], ["h", "7"], ["x", "777"]]}, {"line": 3, "state": [["n", "750"], ["h", "7"], ["x", "777"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 17319, "code": "String a = \"H\", b = \"H\";\nString hd = \"HD\";\nSystem.out.println(hd.charAt((hd.indexOf(a) + hd.indexOf(b)) % 2));", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ",", "b", "=", "\"H\"", ";", "<1>", "String", "hd", "=", "\"HD\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "hd", ".", "charAt", "(", "(", "hd", ".", "indexOf", "(", "a", ")", "+", "hd", ".", "indexOf", "(", "b", ")", ")", "%", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"], ["hd", "HD"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"], ["hd", "HD"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 11798, "code": "int M1 = 11, D1 = 16;\nint M2 = 11, D2 = 17;\nif (D2 == 1) {\nSystem.out.println(\"1\");}\nelse {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "int", "M1", "=", "11", ",", "D1", "=", "16", ";", "<1>", "int", "M2", "=", "11", ",", "D2", "=", "17", ";", "<2>", "if", "(", "D2", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["M1", "11"], ["D1", "16"]]}, {"line": 1, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 2, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 5, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5]]}}
{"id": 18240, "code": "int H = 3;\nint W = 7;\nint N = 10;\nint K = H;\nif (K < W) {K = W;}\nint sum = 0;\nint ans = 0;\nfor (int i = 1; i <= K; i++) {\nif (sum < N) {\nsum += K;\nans = i;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "int", "K", "=", "H", ";", "<4>", "if", "(", "K", "<", "W", ")", "{", "K", "=", "W", ";", "}", "<5>", "int", "sum", "=", "0", ";", "<6>", "int", "ans", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "K", ";", "i", "++", ")", "{", "<8>", "if", "(", "sum", "<", "N", ")", "{", "<9>", "sum", "+=", "K", ";", "<10>", "ans", "=", "i", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "3"]]}, {"line": 1, "state": [["H", "3"], ["W", "7"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "3"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "0"]]}, {"line": 6, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "0"], ["ans", "0"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "0"], ["ans", "0"], ["i", "1"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "0"], ["ans", "0"], ["i", "1"]]}, {"line": 9, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "7"], ["ans", "0"], ["i", "1"]]}, {"line": 10, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "7"], ["ans", "1"], ["i", "1"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "7"], ["ans", "1"], ["i", "2"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "7"], ["ans", "1"], ["i", "2"]]}, {"line": 9, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "1"], ["i", "2"]]}, {"line": 10, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "2"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "3"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "3"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "4"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "4"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "5"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "5"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "6"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "6"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "7"]]}, {"line": 8, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "7"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "7"]]}, {"line": 11, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["K", "7"], ["sum", "14"], ["ans", "2"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]], "5": [[5]], "6": [[6]], "7": [[7, 4, 3, 0], [7, 10, 7, 4, 3, 0], [7, 10, 7, 10, 7, 4, 3, 0], [7, 10, 7, 10, 7, 4, 3, 0], [7, 10, 7, 10, 7, 4, 3, 0], [7, 10, 7, 10, 7, 4, 3, 0], [7, 10, 7, 10, 7, 4, 3, 0], [7, 10, 7, 10, 7, 4, 3, 0]], "8": [[8, 5, 2], [8, 9, 8, 5, 2], [8, 9, 8, 9, 8, 5, 2], [8, 9, 8, 9, 8, 5, 2], [8, 9, 8, 9, 8, 5, 2], [8, 9, 8, 9, 8, 5, 2], [8, 9, 8, 9, 8, 5, 2]], "9": [[9, 8, 5, 2], [9, 8, 9, 8, 5, 2]], "10": [[10, 7, 4, 3, 0], [10, 7, 10, 7, 4, 3, 0]], "11": [[11, 10, 7, 10, 7, 4, 3, 0]]}}
{"id": 2708, "code": "System.out.println((new java.util.HashSet<>(java.util.Arrays.asList(1, 7, 9, 4))).equals(new java.util.HashSet<>(java.util.Arrays.asList(1, 9, 7, 4))) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "7", ",", "9", ",", "4", ")", ")", ")", ".", "equals", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "9", ",", "7", ",", "4", ")", ")", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 18404, "code": "int H = 3;\nint W = 7;\nint N = 10;\nint hi = Math.max(H, W);\nSystem.out.println((N + hi - 1) / hi);", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "int", "hi", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "hi", "-", "1", ")", "/", "hi", ")", ";"], "trace": [{"line": 0, "state": [["H", "3"]]}, {"line": 1, "state": [["H", "3"], ["W", "7"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["hi", "7"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["hi", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 12857, "code": "String X = \"6\";\nSystem.out.println(X.equals(\"3\") || X.equals(\"5\") || X.equals(\"7\") ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "String", "X", "=", "\"6\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "X", ".", "equals", "(", "\"3\"", ")", "||", "X", ".", "equals", "(", "\"5\"", ")", "||", "X", ".", "equals", "(", "\"7\"", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["X", "6"]]}, {"line": 1, "state": [["X", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15190, "code": "int x = 13, y = 3, z = 1;\nint num = 0;\nint sum = z;\nfor (int i = 0; i < x; i++) {\nif (sum <= x) {\nsum += y;\nnum += 1;\nsum += z;}}\nSystem.out.println(num - 1);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "num", "=", "0", ";", "<2>", "int", "sum", "=", "z", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "x", ";", "i", "++", ")", "{", "<4>", "if", "(", "sum", "<=", "x", ")", "{", "<5>", "sum", "+=", "y", ";", "<6>", "num", "+=", "1", ";", "<7>", "sum", "+=", "z", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "num", "-", "1", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "0"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "0"], ["sum", "1"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "0"], ["sum", "1"], ["i", "0"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "0"], ["sum", "1"], ["i", "0"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "0"], ["sum", "4"], ["i", "0"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "1"], ["sum", "4"], ["i", "0"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "1"], ["sum", "5"], ["i", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "1"], ["sum", "5"], ["i", "1"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "1"], ["sum", "5"], ["i", "1"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "1"], ["sum", "8"], ["i", "1"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "2"], ["sum", "8"], ["i", "1"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "2"], ["sum", "9"], ["i", "1"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "2"], ["sum", "9"], ["i", "2"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "2"], ["sum", "9"], ["i", "2"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "2"], ["sum", "12"], ["i", "2"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "3"], ["sum", "12"], ["i", "2"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "3"], ["sum", "13"], ["i", "2"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "3"], ["sum", "13"], ["i", "3"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "3"], ["sum", "13"], ["i", "3"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "3"], ["sum", "16"], ["i", "3"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "16"], ["i", "3"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "3"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "4"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "4"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "5"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "5"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "6"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "6"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "7"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "7"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "8"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "8"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "9"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "9"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "10"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "10"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "11"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "11"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "12"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "12"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "12"]]}, {"line": 8, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["num", "4"], ["sum", "17"], ["i", "12"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0]], "4": [[4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0], [4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 0], [5, 4, 3, 0], [5, 4, 3, 0]], "6": [[6, 1], [6, 1], [6, 1], [6, 1]], "7": [[7, 5, 4, 3, 0], [7, 5, 4, 3, 0], [7, 5, 4, 3, 0], [7, 5, 4, 3, 0]], "8": [[8, 6, 1]]}}
{"id": 6095, "code": "System.out.println(-~Integer.parseInt(\"2\") / 2);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "-", "~", "Integer", ".", "parseInt", "(", "\"2\"", ")", "/", "2", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 17060, "code": "String a = \"D\";String b = \"D\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nif (b.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 2, "state": [["a", "D"], ["b", "D"]]}, {"line": 5, "state": [["a", "D"], ["b", "D"]]}, {"line": 8, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5, 1]], "8": [[8]]}}
{"id": 15434, "code": "int x = 64146, y = 123, z = 456;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2283, "code": "int N = 100, A = 100, B = 100;\nint X = Math.min(A, B);\nint Y = Math.max(0, A + B - N);\nSystem.out.println(X + \" \" + Y);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "X", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "Y", "=", "Math", ".", "max", "(", "0", ",", "A", "+", "B", "-", "N", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "X", "+", "\" \"", "+", "Y", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["X", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["X", "100"], ["Y", "100"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["X", "100"], ["Y", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 4983, "code": "char[] s = {'x', 'y', 'z'};\nint num = s.length;\nString output = s[0] + Integer.toString(num - 2) + s[num - 1];\nSystem.out.println(output);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "num", "=", "s", ".", "length", ";", "<2>", "String", "output", "=", "s", "[", "0", "]", "+", "Integer", ".", "toString", "(", "num", "-", "2", ")", "+", "s", "[", "num", "-", "1", "]", ";", "<3>", "System", ".", "out", ".", "println", "(", "output", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["num", "3"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["num", "3"], ["output", "x1z"]]}, {"line": 3, "state": [["s", "[ x , y , z ]"], ["num", "3"], ["output", "x1z"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13462, "code": "String a = \"abcde\"; String b = \"fghihgf\"; String c = \"edcba\";\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "a", "=", "\"abcde\"", ";", "String", "b", "=", "\"fghihgf\"", ";", "String", "c", "=", "\"edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}, {"line": 1, "state": [["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15320, "code": "int x = 100000, y = 1, z = 1;\nSystem.out.println((x - 1 * z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "1", "*", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 12501, "code": "int A = 8, B = 12, K = 2;\nList<Integer> A_yaku = new ArrayList<>();\nList<Integer> B_yaku = new ArrayList<>();\nfor (int i = 1; i <= A; i++) {\nif (A % i == 0) {\nA_yaku.add(i);}}\nfor (int j = 1; j <= B; j++) {\nif (B % j == 0) {\nB_yaku.add(j);}}\nHashSet<Integer> A_B_and_set = new HashSet<>(A_yaku);A_B_and_set.retainAll(B_yaku);\nList<Integer> A_B_and_list = new ArrayList<>(A_B_and_set);\nCollections.sort(A_B_and_list, Collections.reverseOrder());\nint ans = A_B_and_list.get(K - 1);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "A", "=", "8", ",", "B", "=", "12", ",", "K", "=", "2", ";", "<1>", "List", "<", "Integer", ">", "A_yaku", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<2>", "List", "<", "Integer", ">", "B_yaku", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "A", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "%", "i", "==", "0", ")", "{", "<5>", "A_yaku", ".", "add", "(", "i", ")", ";", "}", "}", "<6>", "for", "(", "int", "j", "=", "1", ";", "j", "<=", "B", ";", "j", "++", ")", "{", "<7>", "if", "(", "B", "%", "j", "==", "0", ")", "{", "<8>", "B_yaku", ".", "add", "(", "j", ")", ";", "}", "}", "<9>", "HashSet", "<", "Integer", ">", "A_B_and_set", "=", "new", "HashSet", "<", ">", "(", "A_yaku", ")", ";", "A_B_and_set", ".", "retainAll", "(", "B_yaku", ")", ";", "<10>", "List", "<", "Integer", ">", "A_B_and_list", "=", "new", "ArrayList", "<", ">", "(", "A_B_and_set", ")", ";", "<11>", "Collections", ".", "sort", "(", "A_B_and_list", ",", "Collections", ".", "reverseOrder", "(", ")", ")", ";", "<12>", "int", "ans", "=", "A_B_and_list", ".", "get", "(", "K", "-", "1", ")", ";", "<13>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["A", "8"], ["B", "12"], ["K", "2"]]}, {"line": 1, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ ]"]]}, {"line": 2, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ ]"], ["B_yaku", "[ ]"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ ]"], ["B_yaku", "[ ]"], ["i", "1"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ ]"], ["B_yaku", "[ ]"], ["i", "1"]]}, {"line": 5, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 ]"], ["B_yaku", "[ ]"], ["i", "1"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 ]"], ["B_yaku", "[ ]"], ["i", "2"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 ]"], ["B_yaku", "[ ]"], ["i", "2"]]}, {"line": 5, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 ]"], ["B_yaku", "[ ]"], ["i", "2"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 ]"], ["B_yaku", "[ ]"], ["i", "3"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 ]"], ["B_yaku", "[ ]"], ["i", "3"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 ]"], ["B_yaku", "[ ]"], ["i", "4"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 ]"], ["B_yaku", "[ ]"], ["i", "4"]]}, {"line": 5, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "4"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "5"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "5"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "6"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "6"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "7"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "7"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "8"]]}, {"line": 4, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 ]"], ["B_yaku", "[ ]"], ["i", "8"]]}, {"line": 5, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ ]"], ["i", "8"]]}, {"line": 3, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ ]"], ["i", "8"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ ]"], ["i", "8"], ["j", "1"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ ]"], ["i", "8"], ["j", "1"]]}, {"line": 8, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 ]"], ["i", "8"], ["j", "1"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 ]"], ["i", "8"], ["j", "2"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 ]"], ["i", "8"], ["j", "2"]]}, {"line": 8, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 ]"], ["i", "8"], ["j", "2"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 ]"], ["i", "8"], ["j", "3"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 ]"], ["i", "8"], ["j", "3"]]}, {"line": 8, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 ]"], ["i", "8"], ["j", "3"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 ]"], ["i", "8"], ["j", "4"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 ]"], ["i", "8"], ["j", "4"]]}, {"line": 8, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 ]"], ["i", "8"], ["j", "4"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 ]"], ["i", "8"], ["j", "5"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 ]"], ["i", "8"], ["j", "5"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 ]"], ["i", "8"], ["j", "6"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 ]"], ["i", "8"], ["j", "6"]]}, {"line": 8, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "6"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "7"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "7"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "8"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "8"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "9"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "9"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "10"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "10"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "11"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "11"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "12"]]}, {"line": 7, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 ]"], ["i", "8"], ["j", "12"]]}, {"line": 8, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"]]}, {"line": 6, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"]]}, {"line": 9, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"], ["A_B_and_set", "{ 1 , 2 , 4 }"]]}, {"line": 10, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"], ["A_B_and_set", "{ 1 , 2 , 4 }"], ["A_B_and_list", "[ 1 , 2 , 4 ]"]]}, {"line": 11, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"], ["A_B_and_set", "{ 1 , 2 , 4 }"], ["A_B_and_list", "[ 1 , 2 , 4 ]"], ["ans_list", "[ 4 , 2 , 1 ]"]]}, {"line": 12, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"], ["A_B_and_set", "{ 1 , 2 , 4 }"], ["A_B_and_list", "[ 1 , 2 , 4 ]"], ["ans_list", "[ 4 , 2 , 1 ]"], ["ans", "2"]]}, {"line": 13, "state": [["A", "8"], ["B", "12"], ["K", "2"], ["A_yaku", "[ 1 , 2 , 4 , 8 ]"], ["B_yaku", "[ 1 , 2 , 3 , 4 , 6 , 12 ]"], ["i", "8"], ["j", "12"], ["A_B_and_set", "{ 1 , 2 , 4 }"], ["A_B_and_list", "[ 1 , 2 , 4 ]"], ["ans_list", "[ 4 , 2 , 1 ]"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 5, 4, 3, 0], [3, 5, 4, 3, 5, 4, 3, 0], [3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 5, 4, 3, 0], [4, 3, 5, 4, 3, 5, 4, 3, 0], [4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 5, 4, 3, 0], [5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "6": [[6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [6, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "7": [[7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "8": [[8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0], [8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "9": [[9, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "10": [[10, 9, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "11": [[11, 10, 9, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "12": [[12, 11, 10, 9, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "13": [[13, 12, 11, 10, 9, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 7, 6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3, 5, 4, 3, 4, 3, 4, 3, 4, 3, 5, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 0]]}}
{"id": 1807, "code": "int N = 100, A = 100, B = 100;\nint maxN = Math.min(A, B);\nint minN = Math.max(A + B - N, 0);\nSystem.out.println(maxN + \" \" + minN);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "maxN", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "minN", "=", "Math", ".", "max", "(", "A", "+", "B", "-", "N", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "maxN", "+", "\" \"", "+", "minN", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 5, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["maxN", "100"]]}, {"line": 6, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["maxN", "100"], ["minN", "100"]]}, {"line": 7, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["maxN", "100"], ["minN", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 4]], "6": [[6, 5, 4]], "7": [[7, 6, 5, 4]]}}
{"id": 4183, "code": "int h = 10, m = 0, H = 12, M = 0, K = 120;\nSystem.out.println(Math.max(0, (H - h) * 60 + M - m - K));", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "m", "=", "0", ",", "H", "=", "12", ",", "M", "=", "0", ",", "K", "=", "120", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "(", "H", "-", "h", ")", "*", "60", "+", "M", "-", "m", "-", "K", ")", ")", ";"], "trace": [{"line": 0, "state": [["h", "10"], ["m", "0"], ["H", "12"], ["M", "0"], ["K", "120"]]}, {"line": 1, "state": [["h", "10"], ["m", "0"], ["H", "12"], ["M", "0"], ["K", "120"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15765, "code": "int x = 64145, y = 123, z = 456;\nint mitumori = x / (y + z);\nif (x - mitumori * (y + z) >= z) {System.out.println(mitumori);\n} else {System.out.println(mitumori - 1);}", "code_tokens": ["<0>", "int", "x", "=", "64145", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "mitumori", "=", "x", "/", "(", "y", "+", "z", ")", ";", "<2>", "if", "(", "x", "-", "mitumori", "*", "(", "y", "+", "z", ")", ">=", "z", ")", "{", "System", ".", "out", ".", "println", "(", "mitumori", ")", ";", "<3>", "}", "else", "{", "System", ".", "out", ".", "println", "(", "mitumori", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["mitumori", "110"]]}, {"line": 2, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["mitumori", "110"]]}, {"line": 3, "state": [["x", "64145"], ["y", "123"], ["z", "456"], ["mitumori", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 7907, "code": "int n = 8, k = 3;\nint[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nn = n - k;\nint c = 1;\nif (n > 0) {\nc += (int) Math.ceil((double) n / (k - 1));}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "n", "=", "n", "-", "k", ";", "<3>", "int", "c", "=", "1", ";", "<4>", "if", "(", "n", ">", "0", ")", "{", "<5>", "c", "+=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "(", "k", "-", "1", ")", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "8"], ["k", "3"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 3, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 4, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["c", "1"]]}, {"line": 5, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["c", "1"]]}, {"line": 6, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["c", "4"]]}, {"line": 7, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["c", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4]], "5": [[5, 3, 1]], "6": [[6, 5, 3, 1]], "7": [[7, 6, 5, 3, 1]]}}
{"id": 7517, "code": "int h = 10, n = 3;\nint[] a = {4, 5, 6};\nString ans = \"No\";\nint total = 0;\nfor (int i = 0; i < n; i++) {\ntotal += a[i];\nif (total >= h) {\nans = \"Yes\";\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "String", "ans", "=", "\"No\"", ";", "<3>", "int", "total", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "total", "+=", "a", "[", "i", "]", ";", "<6>", "if", "(", "total", ">=", "h", ")", "{", "<7>", "ans", "=", "\"Yes\"", ";", "<8>", "break", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h", "10"], ["n", "3"]]}, {"line": 1, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"]]}, {"line": 3, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "0"]]}, {"line": 4, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "0"], ["i", "0"]]}, {"line": 5, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "4"], ["i", "0"]]}, {"line": 6, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "4"], ["i", "0"]]}, {"line": 4, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "4"], ["i", "1"]]}, {"line": 5, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "9"], ["i", "1"]]}, {"line": 6, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "9"], ["i", "1"]]}, {"line": 4, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "9"], ["i", "2"]]}, {"line": 5, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "15"], ["i", "2"]]}, {"line": 6, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "No"], ["total", "15"], ["i", "2"]]}, {"line": 7, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "Yes"], ["total", "15"], ["i", "2"]]}, {"line": 8, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "Yes"], ["total", "15"], ["i", "2"]]}, {"line": 9, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["ans", "Yes"], ["total", "15"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 2]], "8": [[8]], "9": [[9, 7, 2]]}}
{"id": 18718, "code": "int H = 3;\nint W = 7;\nint N = 10;\nint k = Math.max(H, W);\nint cnt = 0;\nwhile (k * cnt < N) {\ncnt++;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "int", "k", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "int", "cnt", "=", "0", ";", "<5>", "while", "(", "k", "*", "cnt", "<", "N", ")", "{", "<6>", "cnt", "++", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["H", "3"]]}, {"line": 1, "state": [["H", "3"], ["W", "7"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "0"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "0"]]}, {"line": 6, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "1"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "1"]]}, {"line": 6, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "2"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "2"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["k", "7"], ["cnt", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4]], "5": [[5, 4, 3, 1, 0], [5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 4, 3, 1, 0]], "7": [[7, 5, 6, 5, 6, 5, 4, 3, 1, 0]]}}
{"id": 11995, "code": "int a = 11, b = 30;\nint c = 12, d = 1;\nSystem.out.println(new int[]{0, 1}[a == c - 1 ? 1 : 0]);", "code_tokens": ["<0>", "int", "a", "=", "11", ",", "b", "=", "30", ";", "<1>", "int", "c", "=", "12", ",", "d", "=", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "new", "int", "[", "]", "{", "0", ",", "1", "}", "[", "a", "==", "c", "-", "1", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "30"]]}, {"line": 1, "state": [["a", "11"], ["b", "30"], ["c", "12"], ["d", "1"]]}, {"line": 2, "state": [["a", "11"], ["b", "30"], ["c", "12"], ["d", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 6285, "code": "int N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nArrays.sort(A);\nArrays.sort(B);\nArrays.sort(C);\nint count = 0;\nfor (int i = 0; i < B.length; i++) {\nint a_b = bisectLeft(A, B[i]);\nint c_b = bisectRight(C, B[i]);\ncount += a_b * (N - c_b);}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A", ")", ";", "<5>", "Arrays", ".", "sort", "(", "B", ")", ";", "<6>", "Arrays", ".", "sort", "(", "C", ")", ";", "<7>", "int", "count", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "B", ".", "length", ";", "i", "++", ")", "{", "<9>", "int", "a_b", "=", "bisectLeft", "(", "A", ",", "B", "[", "i", "]", ")", ";", "<10>", "int", "c_b", "=", "bisectRight", "(", "C", ",", "B", "[", "i", "]", ")", ";", "<11>", "count", "+=", "a_b", "*", "(", "N", "-", "c_b", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "0"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "0"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "0"], ["i", "0"], ["a_b", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "0"], ["i", "0"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "9"], ["i", "0"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "9"], ["i", "1"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "9"], ["i", "1"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "9"], ["i", "1"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "18"], ["i", "1"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "18"], ["i", "2"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "18"], ["i", "2"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "18"], ["i", "2"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "27"], ["i", "2"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "27"], ["i", "2"], ["a_b", "3"], ["c_b", "0"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["count", "27"], ["i", "2"], ["a_b", "3"], ["c_b", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8]], "9": [[9, 6, 3], [9, 11, 10, 9, 6, 3], [9, 11, 10, 9, 11, 10, 9, 6, 3], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 3]], "10": [[10, 9, 6, 3], [10, 9, 11, 10, 9, 6, 3], [10, 9, 11, 10, 9, 11, 10, 9, 6, 3]], "11": [[11, 10, 9, 6, 3], [11, 10, 9, 11, 10, 9, 6, 3], [11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 3]], "12": [[12, 11, 10, 9, 6, 3], [12, 11, 10, 9, 11, 10, 9, 6, 3], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 3]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 6, 3]]}}
{"id": 706, "code": "int k = 2;\nint flag = 0;\nint s = 0;\nfor (int i = 1; i < 9 * k; i++) {\ns += 7;\ns %= k;\nif (s == 0) {\nflag = i;\nbreak;}\ns *= 10;}\nif (flag != 0) {\nSystem.out.println(flag);}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "k", "=", "2", ";", "<1>", "int", "flag", "=", "0", ";", "<2>", "int", "s", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "9", "*", "k", ";", "i", "++", ")", "{", "<4>", "s", "+=", "7", ";", "<5>", "s", "%=", "k", ";", "<6>", "if", "(", "s", "==", "0", ")", "{", "<7>", "flag", "=", "i", ";", "<8>", "break", ";", "}", "<9>", "s", "*=", "10", ";", "}", "<10>", "if", "(", "flag", "!=", "0", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "flag", ")", ";", "}", "<12>", "else", "{", "<13>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["k", "2"]]}, {"line": 1, "state": [["k", "2"], ["flag", "0"]]}, {"line": 2, "state": [["k", "2"], ["flag", "0"], ["s", "0"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "0"], ["i", "1"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "7"], ["i", "1"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "1"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "1"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "1"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "2"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "2"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "2"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "2"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "2"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "3"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "3"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "3"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "3"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "3"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "4"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "4"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "4"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "4"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "4"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "5"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "5"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "5"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "5"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "5"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "6"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "6"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "6"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "6"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "6"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "7"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "7"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "7"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "7"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "7"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "8"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "8"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "8"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "8"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "8"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "9"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "9"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "9"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "9"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "9"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "10"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "10"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "10"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "10"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "10"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "11"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "11"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "11"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "11"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "11"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "12"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "12"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "12"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "12"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "12"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "13"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "13"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "13"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "13"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "13"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "14"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "14"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "14"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "14"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "14"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "15"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "15"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "15"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "15"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "15"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "16"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "16"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "16"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "16"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "16"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "17"]]}, {"line": 4, "state": [["k", "2"], ["flag", "0"], ["s", "17"], ["i", "17"]]}, {"line": 5, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "17"]]}, {"line": 6, "state": [["k", "2"], ["flag", "0"], ["s", "1"], ["i", "17"]]}, {"line": 9, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "17"]]}, {"line": 3, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "17"]]}, {"line": 10, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "17"]]}, {"line": 13, "state": [["k", "2"], ["flag", "0"], ["s", "10"], ["i", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0], [3, 0]], "4": [[4, 2], [4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2]], "5": [[5, 4, 2], [5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2]], "6": [[6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2]], "9": [[9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2], [9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 9, 6, 5, 4, 2]], "10": [[10, 1]], "13": [[13]]}}
{"id": 12067, "code": "int M_1 = 11, D_1 = 16;\nint M_2 = 11, D_2 = 17;\nSystem.out.println(M_1 == M_2 ? 0 : 1);", "code_tokens": ["<0>", "int", "M_1", "=", "11", ",", "D_1", "=", "16", ";", "<1>", "int", "M_2", "=", "11", ",", "D_2", "=", "17", ";", "<2>", "System", ".", "out", ".", "println", "(", "M_1", "==", "M_2", "?", "0", ":", "1", ")", ";"], "trace": [{"line": 0, "state": [["M_1", "11"], ["D_1", "16"]]}, {"line": 1, "state": [["M_1", "11"], ["D_1", "16"], ["M_2", "11"], ["D_2", "17"]]}, {"line": 2, "state": [["M_1", "11"], ["D_1", "16"], ["M_2", "11"], ["D_2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 18826, "code": "int H = 3;\nint W = 7;\nint N = 10;\nSystem.out.println((N - 1) / Math.max(H, W) + 1);", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "N", "-", "1", ")", "/", "Math", ".", "max", "(", "H", ",", "W", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["H", "3"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3, 2, 1]]}}
{"id": 6264, "code": "int n = 2;\nint[] A = {1, 5};\nint[] B = {2, 4};\nint[] C = {3, 6};\nint[] D = new int[n + 1];\nfor (int i = 0; i < n; i++) {\nD[i + 1] = n - bisectRight(C, B[i]);}\nD = accumulate(D);\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint j = bisectRight(B, A[i]);\nans += D[D.length - 1] - D[j];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "[", "]", "D", "=", "new", "int", "[", "n", "+", "1", "]", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "D", "[", "i", "+", "1", "]", "=", "n", "-", "bisectRight", "(", "C", ",", "B", "[", "i", "]", ")", ";", "}", "<7>", "D", "=", "accumulate", "(", "D", ")", ";", "<8>", "int", "ans", "=", "0", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<10>", "int", "j", "=", "bisectRight", "(", "B", ",", "A", "[", "i", "]", ")", ";", "<11>", "ans", "+=", "D", "[", "D", ".", "length", "-", "1", "]", "-", "D", "[", "j", "]", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["n", "2"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 1 , 5 ]"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"]]}, {"line": 5, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "[ 0 , 0 , 0 ]"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "[ 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "[ 0 , 2 , 0 ]"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "[ 0 , 2 , 0 ]"], ["i", "1"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "[ 0 , 2 , 1 ]"], ["i", "1"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "[ 0 , 2 , 1 ]"], ["i", "1"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"]]}, {"line": 10, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"], ["ans", "0"]]}, {"line": 11, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "0"], ["ans", "0"]]}, {"line": 12, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "0"], ["ans", "0"], ["j", "0"]]}, {"line": 13, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "0"], ["ans", "3"], ["j", "0"]]}, {"line": 11, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"], ["ans", "3"], ["j", "0"]]}, {"line": 12, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"], ["ans", "3"], ["j", "2"]]}, {"line": 13, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"], ["ans", "3"], ["j", "2"]]}, {"line": 11, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"], ["ans", "3"], ["j", "2"]]}, {"line": 14, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["D", "(0 , 2 , 3)"], ["i", "1"], ["ans", "3"], ["j", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 2]], "7": [[7, 6, 2], [7, 8, 7, 6, 2], [7, 8, 7, 8, 7, 6, 2]], "8": [[8, 7, 6, 2], [8, 7, 8, 7, 6, 2]], "9": [[9, 8, 7, 8, 7, 6, 2]], "10": [[10]], "11": [[11, 7, 8, 7, 8, 7, 6, 2], [11, 12, 11, 7, 8, 7, 8, 7, 6, 2], [11, 12, 11, 12, 11, 7, 8, 7, 8, 7, 6, 2]], "12": [[12, 11, 7, 8, 7, 8, 7, 6, 2], [12, 11, 12, 11, 7, 8, 7, 8, 7, 6, 2]], "13": [[13, 12, 11, 7, 8, 7, 8, 7, 6, 2], [13, 12, 11, 12, 11, 7, 8, 7, 8, 7, 6, 2]], "14": [[14, 13, 12, 11, 12, 11, 7, 8, 7, 8, 7, 6, 2]]}}
{"id": 3538, "code": "int a = 12, b = 4;\nint res = Math.max(0, a - 2 * b);\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "int", "res", "=", "Math", ".", "max", "(", "0", ",", "a", "-", "2", "*", "b", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"], ["res", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"], ["res", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 17195, "code": "String a = \"D\"; String b = \"D\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);\nSystem.exit(0);}\nelse {\nif (b.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "<3>", "System", ".", "exit", "(", "0", ")", ";", "}", "<4>", "else", "{", "<5>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 5, "state": [["a", "D"], ["b", "D"]]}, {"line": 8, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "5": [[5, 0]], "8": [[8]]}}
{"id": 19303, "code": "int n = 3;\nSystem.out.println((n & 1) != 0 ? n * 2 : n);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "n", "&", "1", ")", "!=", "0", "?", "n", "*", "2", ":", "n", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18650, "code": "int a = 3;\nint b = 7;\nint c = 10;\nSystem.out.println((c + Math.max(a, b) - 1) / Math.max(a, b));", "code_tokens": ["<0>", "int", "a", "=", "3", ";", "<1>", "int", "b", "=", "7", ";", "<2>", "int", "c", "=", "10", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "c", "+", "Math", ".", "max", "(", "a", ",", "b", ")", "-", "1", ")", "/", "Math", ".", "max", "(", "a", ",", "b", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "3"]]}, {"line": 1, "state": [["a", "3"], ["b", "7"]]}, {"line": 2, "state": [["a", "3"], ["b", "7"], ["c", "10"]]}, {"line": 3, "state": [["a", "3"], ["b", "7"], ["c", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]]}}
{"id": 19040, "code": "int N = 5;\nif (N % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint ans = 0;\nint judge = 10;\nwhile (true) {\nif (judge > N) {\nbreak;}\nelse {\nans += N / judge;\njudge *= 5;}}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "ans", "=", "0", ";", "<5>", "int", "judge", "=", "10", ";", "<6>", "while", "(", "true", ")", "{", "<7>", "if", "(", "judge", ">", "N", ")", "{", "<8>", "break", ";", "}", "<9>", "else", "{", "<10>", "ans", "+=", "N", "/", "judge", ";", "<11>", "judge", "*=", "5", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 2, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 13055, "code": "String c = \"6\";\nif (\"753\".contains(c)) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "String", "c", "=", "\"6\"", ";", "<1>", "if", "(", "\"753\"", ".", "contains", "(", "c", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["c", "6"]]}, {"line": 1, "state": [["c", "6"]]}, {"line": 4, "state": [["c", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 13020, "code": "int n = 5;\nSystem.out.println((n == 3 || n == 5 || n == 7) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "n", "==", "3", "||", "n", "==", "5", "||", "n", "==", "7", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3607, "code": "int n = 20 - 2 * 30;System.out.println(n > 0 ? n : 0);", "code_tokens": ["<0>", "int", "n", "=", "20", "-", "2", "*", "30", ";", "System", ".", "out", ".", "println", "(", "n", ">", "0", "?", "n", ":", "0", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["n", "-40"]]}], "slices": {"0": [[0], [0], [0], [0]]}}
{"id": 7407, "code": "int h = 10, a = 3;\nint[] m = {4, 5, 6};\nString ans = \"No\";\nif (h <= sum(m)) ans = \"Yes\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "a", "=", "3", ";", "<1>", "int", "[", "]", "m", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "String", "ans", "=", "\"No\"", ";", "<3>", "if", "(", "h", "<=", "sum", "(", "m", ")", ")", "ans", "=", "\"Yes\"", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h", "10"], ["a", "3"]]}, {"line": 1, "state": [["h", "10"], ["a", "3"], ["m", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "10"], ["a", "3"], ["m", "[ 4 , 5 , 6 ]"], ["ans", "No"]]}, {"line": 3, "state": [["h", "10"], ["a", "3"], ["m", "[ 4 , 5 , 6 ]"], ["ans", "Yes"]]}, {"line": 4, "state": [["h", "10"], ["a", "3"], ["m", "[ 4 , 5 , 6 ]"], ["ans", "Yes"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 16941, "code": "String a = \"H\";String b = \"H\";\nSystem.out.println(\"HD\".charAt(a.equals(b) ? 0 : 1));", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"HD\"", ".", "charAt", "(", "a", ".", "equals", "(", "b", ")", "?", "0", ":", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5227, "code": "String s = \"internationalization\";\nint s_c = s.length() - 2;\nSystem.out.println(s.charAt(0) + String.valueOf(s_c) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "int", "s_c", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s_c", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["s_c", "18"]]}, {"line": 2, "state": [["s", "internationalization"], ["s_c", "18"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15472, "code": "int X = 12, Y = 3, Z = 1;\nint ans = 0;\nX -= Z;\nfor (int i = 0; i < X; i++) {\nif (X < (Y + Z)) {\nSystem.out.println(ans);\nbreak;}\nelse {\nans += 1;\nX -= (Y + Z);}}", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "X", "-=", "Z", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "X", ";", "i", "++", ")", "{", "<4>", "if", "(", "X", "<", "(", "Y", "+", "Z", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "<6>", "break", ";", "}", "<7>", "else", "{", "<8>", "ans", "+=", "1", ";", "<9>", "X", "-=", "(", "Y", "+", "Z", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["ans", "0"]]}, {"line": 2, "state": [["X", "11"], ["Y", "3"], ["Z", "1"], ["ans", "0"]]}, {"line": 3, "state": [["X", "11"], ["Y", "3"], ["Z", "1"], ["ans", "0"]]}, {"line": 4, "state": [["X", "11"], ["Y", "3"], ["Z", "1"], ["ans", "0"]]}, {"line": 8, "state": [["X", "11"], ["Y", "3"], ["Z", "1"], ["ans", "1"]]}, {"line": 9, "state": [["X", "7"], ["Y", "3"], ["Z", "1"], ["ans", "1"]]}, {"line": 3, "state": [["X", "7"], ["Y", "3"], ["Z", "1"], ["ans", "1"]]}, {"line": 4, "state": [["X", "7"], ["Y", "3"], ["Z", "1"], ["ans", "1"]]}, {"line": 8, "state": [["X", "7"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}, {"line": 9, "state": [["X", "3"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}, {"line": 3, "state": [["X", "3"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}, {"line": 4, "state": [["X", "3"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}, {"line": 5, "state": [["X", "3"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}, {"line": 6, "state": [["X", "3"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 2, 0], [3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0]], "5": [[5, 8, 1]], "6": [[6]], "8": [[8, 1], [8, 1]], "9": [[9, 4, 3, 2, 0], [9, 4, 3, 2, 0]]}}
{"id": 9205, "code": "String line = \"2017/01/31\";\nSystem.out.println(\"2018\" + line.substring(4, 10));", "code_tokens": ["<0>", "String", "line", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "line", ".", "substring", "(", "4", ",", "10", ")", ")", ";"], "trace": [{"line": 0, "state": [["line", "2017/01/31"]]}, {"line": 1, "state": [["line", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4546, "code": "String w = \"internationalization\";\nSystem.out.println(w.charAt(0) + String.valueOf(w.length() - 2) + w.charAt(w.length() - 1));", "code_tokens": ["<0>", "String", "w", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "w", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "w", ".", "length", "(", ")", "-", "2", ")", "+", "w", ".", "charAt", "(", "w", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["w", "internationalization"]]}, {"line": 1, "state": [["w", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11760, "code": "int[] a = {11, 16};\nint[] b = {11, 17};\nif (a[0] == b[0]) {\nSystem.out.println(0);} // Block 5:else {\nSystem.out.println(1);}", "code_tokens": ["<0>", "int", "[", "]", "a", "=", "{", "11", ",", "16", "}", ";", "<1>", "int", "[", "]", "b", "=", "{", "11", ",", "17", "}", ";", "<2>", "if", "(", "a", "[", "0", "]", "==", "b", "[", "0", "]", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "// Block 5:else {", "<4>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "[ 11 , 16 ]"]]}, {"line": 1, "state": [["a", "[ 11 , 16 ]"], ["b", "[ 11 , 17 ]"]]}, {"line": 2, "state": [["a", "[ 11 , 16 ]"], ["b", "[ 11 , 17 ]"]]}, {"line": 3, "state": [["a", "[ 11 , 16 ]"], ["b", "[ 11 , 17 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 2555, "code": "Set<Integer> N = new HashSet<>();N.add(1);N.add(4);N.add(9);N.add(7);\nif (N.equals(new HashSet<>(Set.of(1, 9, 7, 4)))) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "Set", "<", "Integer", ">", "N", "=", "new", "HashSet", "<", ">", "(", ")", ";", "N", ".", "add", "(", "1", ")", ";", "N", ".", "add", "(", "4", ")", ";", "N", ".", "add", "(", "9", ")", ";", "N", ".", "add", "(", "7", ")", ";", "<1>", "if", "(", "N", ".", "equals", "(", "new", "HashSet", "<", ">", "(", "Set", ".", "of", "(", "1", ",", "9", ",", "7", ",", "4", ")", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 2, "state": [["N", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 3, "state": [["N", "{ 1 , 4 , 9 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]]}}
{"id": 14714, "code": "int N = 1, P = 1;\nint[] Alist = {50};\nint[] guuki = new int[Alist.length];for (int i = 0; i < Alist.length; i++) {guuki[i] = Alist[i] % 2;}\nint odd = 0;for (int value : guuki) {if (value == 1) {odd++;}}\nint even = guuki.length - odd;\nif (odd == 0) {\nif (P == 0) {\nSystem.out.println((int) Math.pow(2, N));}\nelse {\nSystem.out.println(0);}}\nelse {\nSystem.out.println((int) Math.pow(2, N - 1));}", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "Alist", "=", "{", "50", "}", ";", "<2>", "int", "[", "]", "guuki", "=", "new", "int", "[", "Alist", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "Alist", ".", "length", ";", "i", "++", ")", "{", "guuki", "[", "i", "]", "=", "Alist", "[", "i", "]", "%", "2", ";", "}", "<3>", "int", "odd", "=", "0", ";", "for", "(", "int", "value", ":", "guuki", ")", "{", "if", "(", "value", "==", "1", ")", "{", "odd", "++", ";", "}", "}", "<4>", "int", "even", "=", "guuki", ".", "length", "-", "odd", ";", "<5>", "if", "(", "odd", "==", "0", ")", "{", "<6>", "if", "(", "P", "==", "0", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", ")", ")", ";", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["A", "50"]]}, {"line": 2, "state": [["A", "50"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"], ["guuki", "[ 0 ]"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"], ["guuki", "[ 0 ]"], ["odd", "0"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"], ["guuki", "[ 0 ]"], ["odd", "0"], ["even", "1"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"], ["guuki", "[ 0 ]"], ["odd", "0"], ["even", "1"]]}, {"line": 6, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"], ["guuki", "[ 0 ]"], ["odd", "0"], ["even", "1"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["Alist", "[ 50 ]"], ["guuki", "[ 0 ]"], ["odd", "0"], ["even", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1], [2, 1], [2, 1], [2, 1], [2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 3, 2, 1]], "6": [[6, 0]], "9": [[9]]}}
{"id": 9356, "code": "char[] s = {'2', '0', '1', '7', '/', '0', '1', '/', '0', '7'};\ns[3] = '8';\nString result = String.valueOf(s);\nSystem.out.println(result);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'2'", ",", "'0'", ",", "'1'", ",", "'7'", ",", "'/'", ",", "'0'", ",", "'1'", ",", "'/'", ",", "'0'", ",", "'7'", "}", ";", "<1>", "s", "[", "3", "]", "=", "'8'", ";", "<2>", "String", "result", "=", "String", ".", "valueOf", "(", "s", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ 2 , 0 , 1 , 7 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 1, "state": [["s", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 0 , 7 ]"]]}, {"line": 2, "state": [["s", "2018/01/07"]]}, {"line": 3, "state": [["s", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 2812, "code": "String n = \"1234567876\";\nint count = 1000;\nfor (int i = 0; i < n.length() - 2; i++) {\ncount = Math.min(count, Math.abs(753 - Integer.parseInt(n.substring(i, i + 3))));}\nSystem.out.println(count);", "code_tokens": ["<0>", "String", "n", "=", "\"1234567876\"", ";", "<1>", "int", "count", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "count", "=", "Math", ".", "min", "(", "count", ",", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "n", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ")", ")", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "1234567876"]]}, {"line": 1, "state": [["n", "1234567876"], ["count", "1000"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "1000"], ["i", "0"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "630"], ["i", "0"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "630"], ["i", "1"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "519"], ["i", "1"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "519"], ["i", "2"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "408"], ["i", "2"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "408"], ["i", "3"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "297"], ["i", "3"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "297"], ["i", "4"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "186"], ["i", "4"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "186"], ["i", "5"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "75"], ["i", "5"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "75"], ["i", "6"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "34"], ["i", "6"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "34"], ["i", "7"]]}, {"line": 3, "state": [["n", "1234567876"], ["count", "34"], ["i", "7"]]}, {"line": 2, "state": [["n", "1234567876"], ["count", "34"], ["i", "7"]]}, {"line": 4, "state": [["n", "1234567876"], ["count", "34"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 4910, "code": "String s = \"smiles\";\nchar[] ls = s.toCharArray();\nSystem.out.println(ls[0] + String.valueOf(s.length() - 2) + ls[ls.length - 1]);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "char", "[", "]", "ls", "=", "s", ".", "toCharArray", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ls", "[", "0", "]", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "ls", "[", "ls", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["ls", "[ s , m , i , l , e , s ]"]]}, {"line": 2, "state": [["s", "smiles"], ["ls", "[ s , m , i , l , e , s ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3306, "code": "String input = \"<function <lambda>>\";\nint a = 20, b = 30;\nSystem.out.println(Math.max(0, a - 2 * b));", "code_tokens": ["<0>", "String", "input", "=", "\"<function <lambda>>\"", ";", "<1>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "a", "-", "2", "*", "b", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}, {"line": 3, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]]}}
{"id": 13347, "code": "System.out.println(\"haiku,atcoder,tasks\".replace(',', ' '));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"haiku,atcoder,tasks\"", ".", "replace", "(", "','", ",", "' '", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 570, "code": "String S = \"xyz\";\nint K = 4;\nint i = 0;\nString l = \"\";\nwhile (i < S.length() - 1) {\nif (S.charAt(i) == 'a') {\nl += 'a';}\nelse if (123 - S.charAt(i) <= K) {\nl += 'a';\nK -= 123 - S.charAt(i);}\nelse {\nl += S.charAt(i);}\ni++;}\nif (K > 0) {\nK %= 26;\nint n = S.charAt(S.length() - 1) + K;\nif (n > 122) {\nn -= 26;}\nl += (char) n;}\nelse {\nl += S.charAt(S.length() - 1);}\nSystem.out.println(l);", "code_tokens": ["<0>", "String", "S", "=", "\"xyz\"", ";", "<1>", "int", "K", "=", "4", ";", "<2>", "int", "i", "=", "0", ";", "<3>", "String", "l", "=", "\"\"", ";", "<4>", "while", "(", "i", "<", "S", ".", "length", "(", ")", "-", "1", ")", "{", "<5>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'a'", ")", "{", "<6>", "l", "+=", "'a'", ";", "}", "<7>", "else", "if", "(", "123", "-", "S", ".", "charAt", "(", "i", ")", "<=", "K", ")", "{", "<8>", "l", "+=", "'a'", ";", "<9>", "K", "-=", "123", "-", "S", ".", "charAt", "(", "i", ")", ";", "}", "<10>", "else", "{", "<11>", "l", "+=", "S", ".", "charAt", "(", "i", ")", ";", "}", "<12>", "i", "++", ";", "}", "<13>", "if", "(", "K", ">", "0", ")", "{", "<14>", "K", "%=", "26", ";", "<15>", "int", "n", "=", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", "+", "K", ";", "<16>", "if", "(", "n", ">", "122", ")", "{", "<17>", "n", "-=", "26", ";", "}", "<18>", "l", "+=", "(", "char", ")", "n", ";", "}", "<19>", "else", "{", "<20>", "l", "+=", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ";", "}", "<21>", "System", ".", "out", ".", "println", "(", "l", ")", ";"], "trace": [{"line": 0, "state": [["S", "xyz"]]}, {"line": 1, "state": [["S", "xyz"], ["K", "4"]]}, {"line": 2, "state": [["S", "xyz"], ["K", "4"], ["i", "0"]]}, {"line": 3, "state": [["S", "xyz"], ["K", "4"], ["i", "0"], ["l", ""]]}, {"line": 4, "state": [["S", "xyz"], ["K", "4"], ["i", "0"], ["l", ""]]}, {"line": 5, "state": [["S", "xyz"], ["K", "4"], ["i", "0"], ["l", ""]]}, {"line": 7, "state": [["S", "xyz"], ["K", "4"], ["i", "0"], ["l", ""]]}, {"line": 8, "state": [["S", "xyz"], ["K", "4"], ["i", "0"], ["l", "a"]]}, {"line": 9, "state": [["S", "xyz"], ["K", "1"], ["i", "0"], ["l", "a"]]}, {"line": 12, "state": [["S", "xyz"], ["K", "1"], ["i", "1"], ["l", "a"]]}, {"line": 4, "state": [["S", "xyz"], ["K", "1"], ["i", "1"], ["l", "a"]]}, {"line": 5, "state": [["S", "xyz"], ["K", "1"], ["i", "1"], ["l", "a"]]}, {"line": 7, "state": [["S", "xyz"], ["K", "1"], ["i", "1"], ["l", "a"]]}, {"line": 11, "state": [["S", "xyz"], ["K", "1"], ["i", "1"], ["l", "ay"]]}, {"line": 12, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"]]}, {"line": 4, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"]]}, {"line": 13, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"]]}, {"line": 14, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"]]}, {"line": 15, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"], ["n", "123"]]}, {"line": 16, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"], ["n", "123"]]}, {"line": 17, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["l", "ay"], ["n", "97"]]}, {"line": 18, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["n", "97"], ["l", "aya"]]}, {"line": 21, "state": [["S", "xyz"], ["K", "1"], ["i", "2"], ["n", "97"], ["l", "aya"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2, 0], [4, 12, 9, 7, 5, 4, 2, 0], [4, 12, 11, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 12, 9, 7, 5, 4, 2, 0]], "7": [[7, 5, 4, 2, 0], [7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "8": [[8, 3]], "9": [[9, 7, 5, 4, 2, 0]], "11": [[11, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "12": [[12, 9, 7, 5, 4, 2, 0], [12, 11, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "13": [[13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "14": [[14, 13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "15": [[15, 14, 13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "16": [[16, 15, 14, 13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "17": [[17, 16, 15, 14, 13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "18": [[18, 17, 16, 15, 14, 13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]], "21": [[21, 18, 17, 16, 15, 14, 13, 7, 5, 4, 12, 9, 7, 5, 4, 2, 0]]}}
{"id": 4202, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nif (M2 < M1) {\nint m = 60 - (M1 - M2);\nSystem.out.println((H2 - H1 - 1) * 60 + m - K);\n} else {\nSystem.out.println((H2 - H1) * 60 + (M2 - M1) - K);}", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "if", "(", "M2", "<", "M1", ")", "{", "<2>", "int", "m", "=", "60", "-", "(", "M1", "-", "M2", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "H2", "-", "H1", "-", "1", ")", "*", "60", "+", "m", "-", "K", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "(", "H2", "-", "H1", ")", "*", "60", "+", "(", "M2", "-", "M1", ")", "-", "K", ")", ";", "}"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 5, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "5": [[5, 1, 0]]}}
{"id": 5062, "code": "String s = \"internationalization\";\nchar first = s.charAt(0);\nchar end = s.charAt(s.length() - 1);\nSystem.out.println(first + String.valueOf(s.length() - 2) + end);", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "char", "first", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "end", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "first", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "end", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["first", "0"]]}, {"line": 2, "state": [["s", "internationalization"], ["first", "1"], ["end", "n"]]}, {"line": 3, "state": [["s", "internationalization"], ["first", "2"], ["end", "n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 849, "code": "int K = 101;\nint num = 7 % K;\nfor (int i = 0; i < K; i++) {\nif (num % K == 0) {\nSystem.out.println(i + 1);\nbreak;}\nelse {\nnum = (num * 10 + 7) % K;}}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "K", "=", "101", ";", "<1>", "int", "num", "=", "7", "%", "K", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "K", ";", "i", "++", ")", "{", "<3>", "if", "(", "num", "%", "K", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "i", "+", "1", ")", ";", "<5>", "break", ";", "}", "<6>", "else", "{", "<7>", "num", "=", "(", "num", "*", "10", "+", "7", ")", "%", "K", ";", "}", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["K", "101"]]}, {"line": 1, "state": [["K", "101"], ["num", "7"]]}, {"line": 2, "state": [["K", "101"], ["num", "7"], ["i", "0"]]}, {"line": 3, "state": [["K", "101"], ["num", "7"], ["i", "0"]]}, {"line": 7, "state": [["K", "101"], ["num", "77"], ["i", "0"]]}, {"line": 2, "state": [["K", "101"], ["num", "77"], ["i", "1"]]}, {"line": 3, "state": [["K", "101"], ["num", "77"], ["i", "1"]]}, {"line": 7, "state": [["K", "101"], ["num", "70"], ["i", "1"]]}, {"line": 2, "state": [["K", "101"], ["num", "70"], ["i", "2"]]}, {"line": 3, "state": [["K", "101"], ["num", "70"], ["i", "2"]]}, {"line": 7, "state": [["K", "101"], ["num", "0"], ["i", "2"]]}, {"line": 2, "state": [["K", "101"], ["num", "0"], ["i", "3"]]}, {"line": 3, "state": [["K", "101"], ["num", "0"], ["i", "3"]]}, {"line": 4, "state": [["K", "101"], ["num", "0"], ["i", "3"]]}, {"line": 5, "state": [["K", "101"], ["num", "0"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5]], "7": [[7, 3, 2, 1, 0], [7, 3, 2, 1, 0], [7, 3, 2, 1, 0]]}}
{"id": 16605, "code": "String a = \"H\";String b = \"H\";\nSystem.out.println(\"DH\".charAt(a.equals(b) ? 0 : 1));", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"DH\"", ".", "charAt", "(", "a", ".", "equals", "(", "b", ")", "?", "0", ":", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1063, "code": "System.out.println(((Integer.parseInt(\"112\") - 1) / 111 + 1) * 111);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "(", "(", "Integer", ".", "parseInt", "(", "\"112\"", ")", "-", "1", ")", "/", "111", "+", "1", ")", "*", "111", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 14078, "code": "int N = 9;\nint[] A = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nboolean div_flg = false;\nboolean inc_flg = false;\nboolean dec_flg = false;\nint ans = 0;\nif (N == 1) {\nSystem.out.println(1);\nSystem.exit(0);}\nfor (int i = 0; i < N; i++) {\nif (inc_flg) {\nif (i == N - 1) {\nbreak;}\nif (A[i] <= A[i + 1]) {\ncontinue;}\nelse {\ninc_flg = false;\ndiv_flg = false;}}\nelse if (dec_flg) {\nif (i == N - 1) {\nbreak;}\nif (A[i] >= A[i + 1]) {\ncontinue;}\nelse {\ndec_flg = false;\ndiv_flg = false;}}\nelse {\nif (i == 0) {\nans += 1;\ndiv_flg = true;}\nelse if (i == N - 1) {\nif (!div_flg) {\nans += 1;}\nbreak;}\nif (A[i] == A[i + 1]) {\nif (!div_flg) {\nans += 1;}\ndiv_flg = true;\ncontinue;}\nelse if (A[i] < A[i + 1]) {\nif (!div_flg) {\nans += 1;}\ninc_flg = true;\ncontinue;}\nelse if (A[i] > A[i + 1]) {\nif (!div_flg) {\nans += 1;}\ndec_flg = true;\ncontinue;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "9", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "boolean", "div_flg", "=", "false", ";", "<3>", "boolean", "inc_flg", "=", "false", ";", "<4>", "boolean", "dec_flg", "=", "false", ";", "<5>", "int", "ans", "=", "0", ";", "<6>", "if", "(", "N", "==", "1", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "<8>", "System", ".", "exit", "(", "0", ")", ";", "}", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<10>", "if", "(", "inc_flg", ")", "{", "<11>", "if", "(", "i", "==", "N", "-", "1", ")", "{", "<12>", "break", ";", "}", "<13>", "if", "(", "A", "[", "i", "]", "<=", "A", "[", "i", "+", "1", "]", ")", "{", "<14>", "continue", ";", "}", "<15>", "else", "{", "<16>", "inc_flg", "=", "false", ";", "<17>", "div_flg", "=", "false", ";", "}", "}", "<18>", "else", "if", "(", "dec_flg", ")", "{", "<19>", "if", "(", "i", "==", "N", "-", "1", ")", "{", "<20>", "break", ";", "}", "<21>", "if", "(", "A", "[", "i", "]", ">=", "A", "[", "i", "+", "1", "]", ")", "{", "<22>", "continue", ";", "}", "<23>", "else", "{", "<24>", "dec_flg", "=", "false", ";", "<25>", "div_flg", "=", "false", ";", "}", "}", "<26>", "else", "{", "<27>", "if", "(", "i", "==", "0", ")", "{", "<28>", "ans", "+=", "1", ";", "<29>", "div_flg", "=", "true", ";", "}", "<30>", "else", "if", "(", "i", "==", "N", "-", "1", ")", "{", "<31>", "if", "(", "!", "div_flg", ")", "{", "<32>", "ans", "+=", "1", ";", "}", "<33>", "break", ";", "}", "<34>", "if", "(", "A", "[", "i", "]", "==", "A", "[", "i", "+", "1", "]", ")", "{", "<35>", "if", "(", "!", "div_flg", ")", "{", "<36>", "ans", "+=", "1", ";", "}", "<37>", "div_flg", "=", "true", ";", "<38>", "continue", ";", "}", "<39>", "else", "if", "(", "A", "[", "i", "]", "<", "A", "[", "i", "+", "1", "]", ")", "{", "<40>", "if", "(", "!", "div_flg", ")", "{", "<41>", "ans", "+=", "1", ";", "}", "<42>", "inc_flg", "=", "true", ";", "<43>", "continue", ";", "}", "<44>", "else", "if", "(", "A", "[", "i", "]", ">", "A", "[", "i", "+", "1", "]", ")", "{", "<45>", "if", "(", "!", "div_flg", ")", "{", "<46>", "ans", "+=", "1", ";", "}", "<47>", "dec_flg", "=", "true", ";", "<48>", "continue", ";", "}", "}", "}", "<49>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "9"]]}, {"line": 2, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "0"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "0"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "0"], ["i", "0"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "0"], ["i", "0"]]}, {"line": 19, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "0"], ["i", "0"]]}, {"line": 28, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "0"], ["i", "0"]]}, {"line": 29, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 30, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 35, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 40, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 41, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 43, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 44, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "1"], ["i", "0"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 17, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "True"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 19, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 28, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 31, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 35, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 40, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 41, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 42, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "2"]]}, {"line": 43, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "2"], ["i", "2"]]}, {"line": 44, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "2"], ["i", "2"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 17, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 19, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 28, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 31, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 35, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 40, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 41, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 42, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "4"]]}, {"line": 43, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "3"], ["i", "4"]]}, {"line": 44, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "3"], ["i", "4"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 17, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 19, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 28, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 31, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 35, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 40, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 41, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 42, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "6"]]}, {"line": 43, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "4"], ["i", "6"]]}, {"line": 44, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "4"], ["i", "6"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "4"], ["i", "7"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "4"], ["i", "7"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "4"], ["i", "7"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "True"], ["dec_flg", "False"], ["ans", "4"], ["i", "7"]]}, {"line": 17, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "7"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "7"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "8"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "8"]]}, {"line": 19, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "8"]]}, {"line": 28, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "8"]]}, {"line": 31, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "8"]]}, {"line": 32, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "4"], ["i", "8"]]}, {"line": 33, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "5"], ["i", "8"]]}, {"line": 34, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "5"], ["i", "8"]]}, {"line": 50, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["div_flg", "False"], ["inc_flg", "False"], ["dec_flg", "False"], ["ans", "5"], ["i", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 1]], "10": [[10, 7, 1], [10, 40, 35, 28, 10, 7, 1], [10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "11": [[11, 4], [11, 43, 11, 4], [11, 17, 11, 43, 11, 4], [11, 43, 11, 17, 11, 43, 11, 4], [11, 17, 11, 43, 11, 17, 11, 43, 11, 4], [11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4], [11, 17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4], [11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4], [11, 17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4]], "12": [[12, 10, 40, 35, 28, 10, 7, 1], [12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "14": [[14, 12, 10, 40, 35, 28, 10, 7, 1], [14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "17": [[17, 11, 43, 11, 4], [17, 11, 43, 11, 17, 11, 43, 11, 4], [17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4], [17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4]], "18": [[18, 41, 30, 3], [18, 41, 18, 41, 30, 3], [18, 41, 18, 41, 18, 41, 30, 3], [18, 41, 18, 41, 18, 41, 18, 41, 30, 3]], "19": [[19, 5], [19, 5], [19, 5], [19, 5], [19, 5]], "28": [[28, 10, 7, 1], [28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "29": [[29, 6]], "30": [[30, 3]], "31": [[31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "32": [[32, 18, 41, 18, 41, 18, 41, 18, 41, 30, 3]], "33": [[33, 42, 29, 6]], "34": [[34]], "35": [[35, 28, 10, 7, 1], [35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "40": [[40, 35, 28, 10, 7, 1], [40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1], [40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 31, 28, 10, 14, 12, 10, 40, 35, 28, 10, 7, 1]], "41": [[41, 30, 3], [41, 18, 41, 30, 3], [41, 18, 41, 18, 41, 30, 3], [41, 18, 41, 18, 41, 18, 41, 30, 3]], "42": [[42, 29, 6], [42, 29, 6], [42, 29, 6]], "43": [[43, 11, 4], [43, 11, 17, 11, 43, 11, 4], [43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4], [43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 17, 11, 43, 11, 4]], "44": [[44], [44], [44], [44]], "50": [[50, 33, 42, 29, 6]]}}
{"id": 17278, "code": "String a = \"D\"; String b = \"H\";\nif (a.equals(\"H\")) {\nSystem.out.println(b.equals(\"H\") ? \"H\" : \"D\");}\nelse if (a.equals(\"D\")) {\nSystem.out.println(b.equals(\"H\") ? \"D\" : \"H\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ".", "equals", "(", "\"H\"", ")", "?", "\"H\"", ":", "\"D\"", ")", ";", "}", "<3>", "else", "if", "(", "a", ".", "equals", "(", "\"D\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "b", ".", "equals", "(", "\"H\"", ")", "?", "\"D\"", ":", "\"H\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 3, "state": [["a", "D"], ["b", "H"]]}, {"line": 4, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4, 0]]}}
{"id": 1659, "code": "String[] input = \"10 7 5\".split(\" \");int a = Integer.parseInt(input[0]);int b = Integer.parseInt(input[1]);int c = Integer.parseInt(input[2]);System.out.println(Math.min(b, c) + \" \" + Math.max(0, b + c - a));", "code_tokens": ["<0>", "String", "[", "]", "input", "=", "\"10 7 5\"", ".", "split", "(", "\" \"", ")", ";", "int", "a", "=", "Integer", ".", "parseInt", "(", "input", "[", "0", "]", ")", ";", "int", "b", "=", "Integer", ".", "parseInt", "(", "input", "[", "1", "]", ")", ";", "int", "c", "=", "Integer", ".", "parseInt", "(", "input", "[", "2", "]", ")", ";", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "b", ",", "c", ")", "+", "\" \"", "+", "Math", ".", "max", "(", "0", ",", "b", "+", "c", "-", "a", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "10"], ["b", "7"], ["c", "5"]]}], "slices": {"0": [[0]]}}
{"id": 14023, "code": "int n = 6;\nint[] A = {1, 2, 3, 2, 2, 1};\nint i = 1;\nint ans = 1;\nint flg = 0;\nfor (int index = 0; index < A.length - 1; index++) {int current = A[index];int next = A[index + 1];\nif (current < next) {\nif (flg == 0) {\nflg = 1;}\nelse if (flg == 2) {\nans += 1;\nflg = 0;}}\nif (current > next) {\nif (flg == 0) {\nflg = 2;}\nelse if (flg == 1) {\nans += 1;\nflg = 0;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "i", "=", "1", ";", "<3>", "int", "ans", "=", "1", ";", "<4>", "int", "flg", "=", "0", ";", "<5>", "for", "(", "int", "index", "=", "0", ";", "index", "<", "A", ".", "length", "-", "1", ";", "index", "++", ")", "{", "int", "current", "=", "A", "[", "index", "]", ";", "int", "next", "=", "A", "[", "index", "+", "1", "]", ";", "<6>", "if", "(", "current", "<", "next", ")", "{", "<7>", "if", "(", "flg", "==", "0", ")", "{", "<8>", "flg", "=", "1", ";", "}", "<9>", "else", "if", "(", "flg", "==", "2", ")", "{", "<10>", "ans", "+=", "1", ";", "<11>", "flg", "=", "0", ";", "}", "}", "<12>", "if", "(", "current", ">", "next", ")", "{", "<13>", "if", "(", "flg", "==", "0", ")", "{", "<14>", "flg", "=", "2", ";", "}", "<15>", "else", "if", "(", "flg", "==", "1", ")", "{", "<16>", "ans", "+=", "1", ";", "<17>", "flg", "=", "0", ";", "}", "}", "}", "<18>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"], ["flg", "0"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"], ["flg", "0"], ["j", "2"]]}, {"line": 6, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"], ["flg", "0"], ["j", "2"]]}, {"line": 7, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"], ["flg", "0"], ["j", "2"]]}, {"line": 8, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 12, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "1"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "1"], ["flg", "1"], ["j", "3"]]}, {"line": 6, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "1"], ["flg", "1"], ["j", "3"]]}, {"line": 7, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "1"], ["flg", "1"], ["j", "3"]]}, {"line": 9, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "1"], ["flg", "1"], ["j", "3"]]}, {"line": 12, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "1"], ["flg", "1"], ["j", "3"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 6, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 12, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 15, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "1"], ["flg", "1"], ["j", "2"]]}, {"line": 16, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "2"], ["flg", "1"], ["j", "2"]]}, {"line": 17, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "3"], ["ans", "2"], ["flg", "0"], ["j", "2"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "2"]]}, {"line": 6, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "2"]]}, {"line": 12, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "2"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "1"]]}, {"line": 6, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "1"]]}, {"line": 12, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "1"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "0"], ["j", "1"]]}, {"line": 14, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "2"], ["j", "1"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "2"], ["j", "1"]]}, {"line": 18, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["i", "2"], ["ans", "2"], ["flg", "2"], ["j", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2, 1], [5, 12, 6, 5, 2, 1], [5, 12, 6, 5, 12, 6, 5, 2, 1], [5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1], [5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1], [5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1]], "6": [[6, 5, 2, 1], [6, 5, 12, 6, 5, 2, 1], [6, 5, 12, 6, 5, 12, 6, 5, 2, 1], [6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1], [6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1]], "7": [[7, 4], [7, 8, 7, 4]], "8": [[8, 7, 4]], "9": [[9, 7, 8, 7, 4]], "12": [[12, 6, 5, 2, 1], [12, 6, 5, 12, 6, 5, 2, 1], [12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1], [12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1], [12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 12, 6, 5, 2, 1]], "13": [[13, 9, 7, 8, 7, 4], [13, 17, 15, 13, 9, 7, 8, 7, 4]], "14": [[14, 13, 17, 15, 13, 9, 7, 8, 7, 4]], "15": [[15, 13, 9, 7, 8, 7, 4]], "16": [[16, 3]], "17": [[17, 15, 13, 9, 7, 8, 7, 4]], "18": [[18, 16, 3]]}}
{"id": 4651, "code": "String s = \"internationalization\";\nint a = s.length() - 2;\nchar[] m = s.toCharArray();\nSystem.out.println(m[0] + \"\" + a + \"\" + m[m.length - 1]);", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "int", "a", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "char", "[", "]", "m", "=", "s", ".", "toCharArray", "(", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "m", "[", "0", "]", "+", "\"\"", "+", "a", "+", "\"\"", "+", "m", "[", "m", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["a", "18"]]}, {"line": 2, "state": [["s", "internationalization"], ["a", "18"], ["m", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 3, "state": [["s", "internationalization"], ["a", "18"], ["m", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 7049, "code": "String str = \"210 5\";\nString str2 = \"31 41 59 26 53\";\nString[] nums = str.split(\" \");\nString[] nums2 = str2.split(\" \");\nif (nums2.length != Integer.parseInt(nums[1])) {\nSystem.out.println(\"error\");\n} else {\nint totalDamege = 0;\nfor (String num : nums2) {\ntotalDamege += Integer.parseInt(num);}\nif (Integer.parseInt(nums[0]) <= totalDamege) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}}", "code_tokens": ["<0>", "String", "str", "=", "\"210 5\"", ";", "<1>", "String", "str2", "=", "\"31 41 59 26 53\"", ";", "<2>", "String", "[", "]", "nums", "=", "str", ".", "split", "(", "\" \"", ")", ";", "<3>", "String", "[", "]", "nums2", "=", "str2", ".", "split", "(", "\" \"", ")", ";", "<4>", "if", "(", "nums2", ".", "length", "!=", "Integer", ".", "parseInt", "(", "nums", "[", "1", "]", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"error\"", ")", ";", "<6>", "}", "else", "{", "<7>", "int", "totalDamege", "=", "0", ";", "<8>", "for", "(", "String", "num", ":", "nums2", ")", "{", "<9>", "totalDamege", "+=", "Integer", ".", "parseInt", "(", "num", ")", ";", "}", "<10>", "if", "(", "Integer", ".", "parseInt", "(", "nums", "[", "0", "]", ")", "<=", "totalDamege", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<12>", "}", "else", "{", "<13>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["str", "210 5"]]}, {"line": 1, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"]]}, {"line": 2, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"]]}, {"line": 3, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 4, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 7, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "0"]]}, {"line": 8, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "0"], ["num", "31"]]}, {"line": 9, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "31"], ["num", "31"]]}, {"line": 8, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "31"], ["num", "41"]]}, {"line": 9, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "72"], ["num", "41"]]}, {"line": 8, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "72"], ["num", "59"]]}, {"line": 9, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "131"], ["num", "59"]]}, {"line": 8, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "131"], ["num", "26"]]}, {"line": 9, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "157"], ["num", "26"]]}, {"line": 8, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "157"], ["num", "53"]]}, {"line": 9, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "210"], ["num", "53"]]}, {"line": 8, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "210"], ["num", "53"]]}, {"line": 10, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "210"], ["num", "53"]]}, {"line": 11, "state": [["str", "210 5"], ["str2", "31 41 59 26 53"], ["nums", "[ 210 , 5 ]"], ["nums2", "[ 31 , 41 , 59 , 26 , 53 ]"], ["totalDamege", "210"], ["num", "53"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 1]], "4": [[4, 3, 1]], "7": [[7]], "8": [[8, 4, 3, 1], [8, 9, 8, 4, 3, 1], [8, 9, 8, 9, 8, 4, 3, 1], [8, 9, 8, 9, 8, 9, 8, 4, 3, 1], [8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 3, 1], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 3, 1]], "9": [[9, 8, 4, 3, 1], [9, 8, 9, 8, 4, 3, 1], [9, 8, 9, 8, 9, 8, 4, 3, 1], [9, 8, 9, 8, 9, 8, 9, 8, 4, 3, 1], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 3, 1]], "10": [[10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 3, 1]], "11": [[11]]}}
{"id": 1307, "code": "int N = 750;\nString X = String.valueOf(N);\nint Y = (int) X.chars().distinct().count();\nif (Y == 1) {\nSystem.out.println(N);}\nif (Y != 1) {\nint Z = 0;\nfor (int i = 111; i < 1000; i += 111) {\nif (N - i < 0) {\nZ += i;\nbreak;}}\nSystem.out.println(Z);}", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "String", "X", "=", "String", ".", "valueOf", "(", "N", ")", ";", "<2>", "int", "Y", "=", "(", "int", ")", "X", ".", "chars", "(", ")", ".", "distinct", "(", ")", ".", "count", "(", ")", ";", "<3>", "if", "(", "Y", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}", "<5>", "if", "(", "Y", "!=", "1", ")", "{", "<6>", "int", "Z", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "111", ";", "i", "<", "1000", ";", "i", "+=", "111", ")", "{", "<8>", "if", "(", "N", "-", "i", "<", "0", ")", "{", "<9>", "Z", "+=", "i", ";", "<10>", "break", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "Z", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"]]}, {"line": 2, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"]]}, {"line": 3, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"]]}, {"line": 5, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"]]}, {"line": 6, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "111"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "111"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "222"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "222"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "333"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "333"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "444"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "444"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "555"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "555"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "666"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "666"]]}, {"line": 7, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "777"]]}, {"line": 8, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "0"], ["i", "777"]]}, {"line": 9, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "777"], ["i", "777"]]}, {"line": 10, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "777"], ["i", "777"]]}, {"line": 11, "state": [["N", "750"], ["X", "{ 0 , 5 , 7 }"], ["Y", "3"], ["Z", "777"], ["i", "777"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0]], "6": [[6]], "7": [[7], [7, 8, 7], [7, 8, 7, 8, 7], [7, 8, 7, 8, 7, 8, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7]], "8": [[8, 7], [8, 7, 8, 7], [8, 7, 8, 7, 8, 7], [8, 7, 8, 7, 8, 7, 8, 7], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7]], "9": [[9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7]], "10": [[10]], "11": [[11, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7]]}}
{"id": 19251, "code": "int n = 12;\nif (n % 2 != 0) {\nSystem.out.println(0);}\nelse {\nint cnt = 0;\nn = n / 2;\nwhile (n > 0) {\ncnt = cnt + (n / 5);\nn = n / 5;}\nSystem.out.println(cnt);}", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "cnt", "=", "0", ";", "<5>", "n", "=", "n", "/", "2", ";", "<6>", "while", "(", "n", ">", "0", ")", "{", "<7>", "cnt", "=", "cnt", "+", "(", "n", "/", "5", ")", ";", "<8>", "n", "=", "n", "/", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"]]}, {"line": 4, "state": [["n", "12"], ["cnt", "0"]]}, {"line": 5, "state": [["n", "6"], ["cnt", "0"]]}, {"line": 6, "state": [["n", "6"], ["cnt", "0"]]}, {"line": 7, "state": [["n", "6"], ["cnt", "1"]]}, {"line": 8, "state": [["n", "1"], ["cnt", "1"]]}, {"line": 6, "state": [["n", "1"], ["cnt", "1"]]}, {"line": 7, "state": [["n", "1"], ["cnt", "1"]]}, {"line": 8, "state": [["n", "0"], ["cnt", "1"]]}, {"line": 6, "state": [["n", "0"], ["cnt", "1"]]}, {"line": 9, "state": [["n", "0"], ["cnt", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5, 1, 0]], "6": [[6, 5, 1, 0], [6, 8, 7, 6, 5, 1, 0], [6, 8, 7, 6, 8, 7, 6, 5, 1, 0]], "7": [[7, 6, 5, 1, 0], [7, 6, 8, 7, 6, 5, 1, 0]], "8": [[8, 7, 6, 5, 1, 0], [8, 7, 6, 8, 7, 6, 5, 1, 0]], "9": [[9, 7, 6, 8, 7, 6, 5, 1, 0]]}}
{"id": 16477, "code": "int n = 2;\nint[] A = {0, 100};\nint ind = -1; // Initialize indfor (int i = 0; i < n; i++) {\nif (A[i] * 2 > A[A.length - 1]) {\nind = i;\nbreak;}}\nind -= 1;\nint a = A[ind];\nint b = A[A.length - 1] - A[ind + 1];\nif (a >= b) {\nSystem.out.println(A[A.length - 1] + \" \" + a);\n} else {\nSystem.out.println(A[A.length - 1] + \" \" + A[ind + 1]);}", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "0", ",", "100", "}", ";", "<2>", "int", "ind", "=", "-", "1", ";", "// Initialize indfor (int i = 0; i < n; i++) {", "<3>", "if", "(", "A", "[", "i", "]", "*", "2", ">", "A", "[", "A", ".", "length", "-", "1", "]", ")", "{", "<4>", "ind", "=", "i", ";", "<5>", "break", ";", "}", "}", "<6>", "ind", "-=", "1", ";", "<7>", "int", "a", "=", "A", "[", "ind", "]", ";", "<8>", "int", "b", "=", "A", "[", "A", ".", "length", "-", "1", "]", "-", "A", "[", "ind", "+", "1", "]", ";", "<9>", "if", "(", "a", ">=", "b", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "A", "[", "A", ".", "length", "-", "1", "]", "+", "\" \"", "+", "a", ")", ";", "<11>", "}", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "A", "[", "A", ".", "length", "-", "1", "]", "+", "\" \"", "+", "A", "[", "ind", "+", "1", "]", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["A", "[ 0 , 100 ]"]]}, {"line": 2, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "0"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "0"]]}, {"line": 2, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "1"]]}, {"line": 5, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "1"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "0"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "0"], ["a", "0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "0"], ["a", "0"], ["b", "0"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "0"], ["a", "0"], ["b", "0"]]}, {"line": 10, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["i", "1"], ["ind", "0"], ["a", "0"], ["b", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 0]], "5": [[5]], "6": [[6, 4, 3, 2, 3, 2, 0]], "7": [[7, 6, 4, 3, 2, 3, 2, 0]], "8": [[8, 7, 6, 4, 3, 2, 3, 2, 0]], "9": [[9, 8, 7, 6, 4, 3, 2, 3, 2, 0]], "10": [[10, 9, 8, 7, 6, 4, 3, 2, 3, 2, 0]]}}
{"id": 549, "code": "String a = \"a\";\nint n = a.length();\nint m = 25;\nString ans = \"\";\nfor (int i = 0; i < n - 1; i++) {\nif (a.charAt(i) == 'a') {\nans += \"a\";\ncontinue;}\nint x = a.charAt(i) - 'a';\nif (m >= 26 - x) {\nans += \"a\";\nm -= 26 - x;}\nelse {\nans += a.charAt(i);}}\nans += (char) ((a.charAt(n - 1) - 'a' + m) % 26 + 'a');\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "a", "=", "\"a\"", ";", "<1>", "int", "n", "=", "a", ".", "length", "(", ")", ";", "<2>", "int", "m", "=", "25", ";", "<3>", "String", "ans", "=", "\"\"", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<5>", "if", "(", "a", ".", "charAt", "(", "i", ")", "==", "'a'", ")", "{", "<6>", "ans", "+=", "\"a\"", ";", "<7>", "continue", ";", "}", "<8>", "int", "x", "=", "a", ".", "charAt", "(", "i", ")", "-", "'a'", ";", "<9>", "if", "(", "m", ">=", "26", "-", "x", ")", "{", "<10>", "ans", "+=", "\"a\"", ";", "<11>", "m", "-=", "26", "-", "x", ";", "}", "<12>", "else", "{", "<13>", "ans", "+=", "a", ".", "charAt", "(", "i", ")", ";", "}", "}", "<14>", "ans", "+=", "(", "char", ")", "(", "(", "a", ".", "charAt", "(", "n", "-", "1", ")", "-", "'a'", "+", "m", ")", "%", "26", "+", "'a'", ")", ";", "<15>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["a", "a"]]}, {"line": 1, "state": [["a", "a"], ["n", "1"]]}, {"line": 2, "state": [["a", "a"], ["n", "1"], ["m", "25"]]}, {"line": 3, "state": [["a", "a"], ["n", "1"], ["m", "25"], ["ans", ""]]}, {"line": 4, "state": [["a", "a"], ["n", "1"], ["m", "25"], ["ans", ""]]}, {"line": 14, "state": [["a", "a"], ["n", "1"], ["m", "25"], ["ans", "z"]]}, {"line": 15, "state": [["a", "a"], ["n", "1"], ["m", "25"], ["ans", "z"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0]], "14": [[14, 4, 1, 0]], "15": [[15, 14, 4, 1, 0]]}}
{"id": 9299, "code": "String s = \"2017/01/31\";\nSystem.out.println(s.substring(0, 3) + \"8\" + s.substring(4));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "substring", "(", "0", ",", "3", ")", "+", "\"8\"", "+", "s", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1915, "code": "int n = 10, a = 3, b = 5;\nint ans1 = Math.min(a, b);\nint ans2 = Math.max(0, a + b - n);\nSystem.out.printf(\"%d %d%n\", ans1, ans2);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "ans1", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "ans2", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "printf", "(", "\"%d %d%n\"", ",", "ans1", ",", "ans2", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"], ["ans2", "0"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["ans1", "3"], ["ans2", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 5147, "code": "String s = \"smiles\";\nint a = s.length();\nint b = s.length() - 2;\nString x = s.charAt(0) + Integer.toString(b) + s.charAt(s.length() - 1);\nSystem.out.println(x);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "a", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "b", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<3>", "String", "x", "=", "s", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "b", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["a", "6"]]}, {"line": 2, "state": [["s", "smiles"], ["a", "6"], ["b", "4"]]}, {"line": 3, "state": [["s", "smiles"], ["a", "6"], ["b", "4"], ["x", "s4s"]]}, {"line": 4, "state": [["s", "smiles"], ["a", "6"], ["b", "4"], ["x", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 8401, "code": "int n = 1;\nint[] a1 = {2};\nint[] a2 = {3};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint top = 0;for (int j = 0; j <= i; j++) {top += a1[j];}\nint bottom = 0;for (int j = i; j < a2.length; j++) {bottom += a2[j];}\nint tmp = top + bottom;\nans = Math.max(tmp, ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "3", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "top", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "top", "+=", "a1", "[", "j", "]", ";", "}", "<6>", "int", "bottom", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "a2", ".", "length", ";", "j", "++", ")", "{", "bottom", "+=", "a2", "[", "j", "]", ";", "}", "<7>", "int", "tmp", "=", "top", "+", "bottom", ";", "<8>", "ans", "=", "Math", ".", "max", "(", "tmp", ",", "ans", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["top", "2"]]}, {"line": 6, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["top", "2"], ["bottom", "3"]]}, {"line": 7, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["top", "2"], ["bottom", "3"], ["tmp", "5"]]}, {"line": 8, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["top", "2"], ["bottom", "3"], ["tmp", "5"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["top", "2"], ["bottom", "3"], ["tmp", "5"]]}, {"line": 9, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["top", "2"], ["bottom", "3"], ["tmp", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 0]], "9": [[9, 8, 7, 6, 5, 4, 0]]}}
{"id": 16550, "code": "String a = \"D\";String b = \"D\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nSystem.out.println(\"HD\".replace(b, \"\"));}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"HD\"", ".", "replace", "(", "b", ",", "\"\"", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 4, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 0]]}}
{"id": 5652, "code": "int N = 100;\nif (N % 2 == 1) {\nSystem.out.println((N - 1) / 2 + 1);\n} else {\nSystem.out.println(N / 2);}", "code_tokens": ["<0>", "int", "N", "=", "100", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "(", "N", "-", "1", ")", "/", "2", "+", "1", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "N", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "100"]]}, {"line": 1, "state": [["N", "100"]]}, {"line": 4, "state": [["N", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 18497, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint x = Math.max(h, w);\nint ans = (n + x - 1) / x;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "x", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "int", "ans", "=", "(", "n", "+", "x", "-", "1", ")", "/", "x", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["x", "7"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["x", "7"], ["ans", "2"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["x", "7"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 16791, "code": "String a = \"H\", b = \"H\";\nif (a.equals(\"H\")) {\nif (b.equals(\"H\")) {System.out.println(\"H\");}\nelse {System.out.println(\"D\");}}\nelse {\nif (b.equals(\"H\")) {System.out.println(\"D\");}\nelse {System.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ",", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "}", "<4>", "else", "{", "<5>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 6801, "code": "int H = 10, N = 3;\nint[] A = {4, 5, 6};\nString ans = (H <= sum(A)) ? \"Yes\" : \"No\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "String", "ans", "=", "(", "H", "<=", "sum", "(", "A", ")", ")", "?", "\"Yes\"", ":", "\"No\"", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["ans", "Yes"]]}, {"line": 3, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["ans", "Yes"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 6609, "code": "Scanner input = new Scanner(System.in);\nint n = 3;\nint[] a = {1, 1, 1};\nint[] b = {2, 2, 2};\nint[] c = {3, 3, 3};\nArrays.sort(a);\nArrays.sort(c);\nint ans = 0;\nfor (int i : b) {\nans += lowerBound(a, i) * (c.length - upperBound(c, i));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "Scanner", "input", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "n", "=", "3", ";", "<2>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "[", "]", "b", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<4>", "int", "[", "]", "c", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<5>", "Arrays", ".", "sort", "(", "a", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "i", ":", "b", ")", "{", "<9>", "ans", "+=", "lowerBound", "(", "a", ",", "i", ")", "*", "(", "c", ".", "length", "-", "upperBound", "(", "c", ",", "i", ")", ")", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["n", "3"]]}, {"line": 3, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 4, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 5, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "2"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 3]], "8": [[8, 5]], "9": [[9]], "10": [[10, 4], [10, 11, 10, 4], [10, 11, 10, 11, 10, 4], [10, 11, 10, 11, 10, 11, 10, 4]], "11": [[11, 10, 4], [11, 10, 11, 10, 4], [11, 10, 11, 10, 11, 10, 4]], "12": [[12, 11, 10, 11, 10, 11, 10, 4]]}}
{"id": 9015, "code": "int a = 15;\nint b = 18;\nint c = 26;\nint d = 35;\nint e = 36;\nint x = 18;\nint[] ls = {a, b, c, d, e};\nif ((e - a) <= x) {\nSystem.out.println(\"Yay!\");}\nelse {\nSystem.out.println(\":(\");}", "code_tokens": ["<0>", "int", "a", "=", "15", ";", "<1>", "int", "b", "=", "18", ";", "<2>", "int", "c", "=", "26", ";", "<3>", "int", "d", "=", "35", ";", "<4>", "int", "e", "=", "36", ";", "<5>", "int", "x", "=", "18", ";", "<6>", "int", "[", "]", "ls", "=", "{", "a", ",", "b", ",", "c", ",", "d", ",", "e", "}", ";", "<7>", "if", "(", "(", "e", "-", "a", ")", "<=", "x", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "15"]]}, {"line": 1, "state": [["a", "15"], ["b", "18"]]}, {"line": 2, "state": [["a", "15"], ["b", "18"], ["c", "26"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["x", "18"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["x", "18"], ["ls", "[ 15 , 18 , 26 , 35 , 36 ]"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["x", "18"], ["ls", "[ 15 , 18 , 26 , 35 , 36 ]"]]}, {"line": 10, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["x", "18"], ["ls", "[ 15 , 18 , 26 , 35 , 36 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 4, 3, 2, 1, 0]], "7": [[7, 6, 4, 3, 2, 1, 0]], "10": [[10]]}}
{"id": 4427, "code": "String a = \"s\";char[] l = {'m', 'i', 'l', 'e'};String b = \"s\";\nSystem.out.println(a + l.length + b);", "code_tokens": ["<0>", "String", "a", "=", "\"s\"", ";", "char", "[", "]", "l", "=", "{", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", "}", ";", "String", "b", "=", "\"s\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "+", "l", ".", "length", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["a", "s"], ["l", "[ m , i , l , e ]"], ["b", "s"]]}, {"line": 1, "state": [["a", "s"], ["l", "[ m , i , l , e ]"], ["b", "s"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6617, "code": "int n = 2;\nint[] a = {1, 5};\nint[] b = {2, 4};\nint[] c = {3, 6};\nArrays.sort(a);\nfor (int i = 0; i < a.length / 2; i++) {int temp = a[i];a[i] = a[a.length - 1 - i];a[a.length - 1 - i] = temp;}\nArrays.sort(b);\nfor (int i = 0; i < b.length / 2; i++) {int temp = b[i];b[i] = b[b.length - 1 - i];b[b.length - 1 - i] = temp;}\nArrays.sort(c);\nfor (int i = 0; i < c.length / 2; i++) {int temp = c[i];c[i] = c[c.length - 1 - i];c[c.length - 1 - i] = temp;}\nArrayList<Integer> cList = new ArrayList<>();for (int value : c) {cList.add(value);}cList.add(0);\nint i = 0;\nArrayList<Integer> l = new ArrayList<>();\nfor (int j : b) {\nwhile (cList.get(i) > j) {\ni++;}\nl.add(i);}\nb = Arrays.copyOf(b, b.length + 1);b[b.length - 1] = 0;\nint s = 0;\nint cnt = 0;\ni = 0;\nfor (int j : a) {\nwhile (b[i] > j) {\ns += l.get(i);\ni++;}\ncnt += s;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "6", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "a", "[", "i", "]", ";", "a", "[", "i", "]", "=", "a", "[", "a", ".", "length", "-", "1", "-", "i", "]", ";", "a", "[", "a", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<6>", "Arrays", ".", "sort", "(", "b", ")", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "b", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "b", "[", "i", "]", ";", "b", "[", "i", "]", "=", "b", "[", "b", ".", "length", "-", "1", "-", "i", "]", ";", "b", "[", "b", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<8>", "Arrays", ".", "sort", "(", "c", ")", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "c", "[", "i", "]", ";", "c", "[", "i", "]", "=", "c", "[", "c", ".", "length", "-", "1", "-", "i", "]", ";", "c", "[", "c", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<10>", "ArrayList", "<", "Integer", ">", "cList", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "value", ":", "c", ")", "{", "cList", ".", "add", "(", "value", ")", ";", "}", "cList", ".", "add", "(", "0", ")", ";", "<11>", "int", "i", "=", "0", ";", "<12>", "ArrayList", "<", "Integer", ">", "l", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<13>", "for", "(", "int", "j", ":", "b", ")", "{", "<14>", "while", "(", "cList", ".", "get", "(", "i", ")", ">", "j", ")", "{", "<15>", "i", "++", ";", "}", "<16>", "l", ".", "add", "(", "i", ")", ";", "}", "<17>", "b", "=", "Arrays", ".", "copyOf", "(", "b", ",", "b", ".", "length", "+", "1", ")", ";", "b", "[", "b", ".", "length", "-", "1", "]", "=", "0", ";", "<18>", "int", "s", "=", "0", ";", "<19>", "int", "cnt", "=", "0", ";", "<20>", "i", "=", "0", ";", "<21>", "for", "(", "int", "j", ":", "a", ")", "{", "<22>", "while", "(", "b", "[", "i", "]", ">", "j", ")", "{", "<23>", "s", "+=", "l", ".", "get", "(", "i", ")", ";", "<24>", "i", "++", ";", "}", "<25>", "cnt", "+=", "s", ";", "}", "<26>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 1 , 5 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 ]"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ ]"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ ]"], ["j", "4"]]}, {"line": 14, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ ]"], ["j", "4"]]}, {"line": 15, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ ]"], ["j", "4"]]}, {"line": 14, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ ]"], ["j", "4"]]}, {"line": 16, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ 1 ]"], ["j", "4"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ 1 ]"], ["j", "2"]]}, {"line": 14, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ 1 ]"], ["j", "2"]]}, {"line": 15, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 ]"], ["j", "2"]]}, {"line": 14, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 ]"], ["j", "2"]]}, {"line": 16, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "2"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "2"]]}, {"line": 17, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "2"]]}, {"line": 18, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "2"], ["s", "0"]]}, {"line": 19, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "2"], ["s", "0"], ["cnt", "0"]]}, {"line": 20, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "2"], ["s", "0"], ["cnt", "0"]]}, {"line": 21, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "5"], ["s", "0"], ["cnt", "0"]]}, {"line": 22, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "5"], ["s", "0"], ["cnt", "0"]]}, {"line": 25, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "5"], ["s", "0"], ["cnt", "0"]]}, {"line": 21, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "0"], ["cnt", "0"]]}, {"line": 22, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "0"], ["cnt", "0"]]}, {"line": 23, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "0"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "1"], ["cnt", "0"]]}, {"line": 24, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "1"], ["cnt", "0"]]}, {"line": 22, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "1"], ["cnt", "0"]]}, {"line": 23, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "1"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "3"], ["cnt", "0"]]}, {"line": 24, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "3"], ["cnt", "0"]]}, {"line": 22, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "3"], ["cnt", "0"]]}, {"line": 25, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "3"], ["cnt", "3"]]}, {"line": 21, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "3"], ["cnt", "3"]]}, {"line": 26, "state": [["n", "2"], ["a", "[ 5 , 1 ]"], ["b", "[ 4 , 2 , 0 ]"], ["c", "[ 6 , 3 , 0 ]"], ["i", "2"], ["l", "[ 1 , 2 ]"], ["j", "1"], ["s", "3"], ["cnt", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 4, 1]], "6": [[6, 2]], "7": [[7, 6, 2]], "8": [[8, 3]], "9": [[9, 8, 3]], "10": [[10, 9, 8, 3]], "11": [[11]], "12": [[12]], "13": [[13, 7, 6, 2], [13, 14, 15, 14, 13, 7, 6, 2], [13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "14": [[14, 13, 7, 6, 2], [14, 15, 14, 13, 7, 6, 2], [14, 13, 14, 15, 14, 13, 7, 6, 2], [14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "15": [[15, 14, 13, 7, 6, 2], [15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "16": [[16, 14, 15, 14, 13, 7, 6, 2], [16, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "17": [[17, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "18": [[18]], "19": [[19]], "20": [[20, 16, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "21": [[21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [21, 22, 24, 23, 22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "22": [[22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [22, 24, 23, 22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "23": [[23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [23, 22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "24": [[24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2], [24, 23, 22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "25": [[25, 19, 18], [25, 23, 22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]], "26": [[26, 25, 23, 22, 24, 23, 22, 21, 22, 21, 13, 14, 15, 14, 13, 14, 15, 14, 13, 7, 6, 2]]}}
{"id": 18719, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint k = Math.max(H, W);\nint cnt = 0;\nwhile (k * cnt < N) {\ncnt++;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "k", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "int", "cnt", "=", "0", ";", "<5>", "while", "(", "k", "*", "cnt", "<", "N", ")", "{", "<6>", "cnt", "++", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "0"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "0"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "1"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "1"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "2"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "2"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "3"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "3"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "4"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "4"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "5"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "5"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "6"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "6"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "7"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "7"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "8"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "8"]]}, {"line": 7, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["k", "14"], ["cnt", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4]], "5": [[5, 4, 3, 1, 0], [5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0]], "7": [[7, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 3, 1, 0]]}}
{"id": 5305, "code": "int n = 5;\nint ans = (n + 1) / 2;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "ans", "=", "(", "n", "+", "1", ")", "/", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["ans", "3"]]}, {"line": 2, "state": [["n", "5"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1273, "code": "int n = 111;\nint a = (n - 1) / 111 + 1;\nSystem.out.println(a * 100 + a * 10 + a);", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "int", "a", "=", "(", "n", "-", "1", ")", "/", "111", "+", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", "*", "100", "+", "a", "*", "10", "+", "a", ")", ";"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"], ["a", "1"]]}, {"line": 2, "state": [["n", "111"], ["a", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3882, "code": "String[] input = \"12 3 1\".split(\" \");int x = Integer.parseInt(input[0]);int y = Integer.parseInt(input[1]);int z = Integer.parseInt(input[2]);System.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "String", "[", "]", "input", "=", "\"12 3 1\"", ".", "split", "(", "\" \"", ")", ";", "int", "x", "=", "Integer", ".", "parseInt", "(", "input", "[", "0", "]", ")", ";", "int", "y", "=", "Integer", ".", "parseInt", "(", "input", "[", "1", "]", ")", ";", "int", "z", "=", "Integer", ".", "parseInt", "(", "input", "[", "2", "]", ")", ";", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]]}}
{"id": 9146, "code": "String s = \"2017/01/07\";\nString[] parts = s.split(\"/\");String y = parts[0];String m = parts[1];String d = parts[2];\nSystem.out.println(\"2018/\" + m + \"/\" + d);", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/07\"", ";", "<1>", "String", "[", "]", "parts", "=", "s", ".", "split", "(", "\"/\"", ")", ";", "String", "y", "=", "parts", "[", "0", "]", ";", "String", "m", "=", "parts", "[", "1", "]", ";", "String", "d", "=", "parts", "[", "2", "]", ";", "<2>", "System", ".", "out", ".", "println", "(", "\"2018/\"", "+", "m", "+", "\"/\"", "+", "d", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/07"]]}, {"line": 1, "state": [["s", "2017/01/07"], ["y", "2017"], ["m", "01"], ["d", "07"]]}, {"line": 2, "state": [["s", "2017/01/07"], ["y", "2017"], ["m", "01"], ["d", "07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 2994, "code": "String S = \"1234567876\";\ndouble m = Double.POSITIVE_INFINITY;\nfor (int i = 0; i < S.length() - 2; i++) {\nm = Math.min(m, Math.abs(753 - Integer.parseInt(S.substring(i, i + 3))));}\nSystem.out.println(m);", "code_tokens": ["<0>", "String", "S", "=", "\"1234567876\"", ";", "<1>", "double", "m", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "m", "=", "Math", ".", "min", "(", "m", ",", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ")", ")", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "m", ")", ";"], "trace": [{"line": 0, "state": [["S", "1234567876"]]}, {"line": 1, "state": [["S", "1234567876"], ["m", "inf"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "inf"], ["i", "0"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "630"], ["i", "0"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "630"], ["i", "1"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "519"], ["i", "1"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "519"], ["i", "2"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "408"], ["i", "2"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "408"], ["i", "3"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "297"], ["i", "3"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "297"], ["i", "4"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "186"], ["i", "4"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "186"], ["i", "5"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "75"], ["i", "5"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "75"], ["i", "6"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "34"], ["i", "6"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "34"], ["i", "7"]]}, {"line": 3, "state": [["S", "1234567876"], ["m", "34"], ["i", "7"]]}, {"line": 2, "state": [["S", "1234567876"], ["m", "34"], ["i", "7"]]}, {"line": 4, "state": [["S", "1234567876"], ["m", "34"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 8529, "code": "int n = 1;\nint[] a1 = {2};\nint[] a2 = {3};\nint candy_max = 0;\nfor (int i = 0; i <= n; i++) {\nint candies = sum(a1, 0, i) + sum(a2, i, n);\nif (candy_max < candies) {\ncandy_max = candies;}}\nSystem.out.println(candy_max);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "3", "}", ";", "<3>", "int", "candy_max", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "n", ";", "i", "++", ")", "{", "<5>", "int", "candies", "=", "sum", "(", "a1", ",", "0", ",", "i", ")", "+", "sum", "(", "a2", ",", "i", ",", "n", ")", ";", "<6>", "if", "(", "candy_max", "<", "candies", ")", "{", "<7>", "candy_max", "=", "candies", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "candy_max", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "0"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "0"], ["i", "0"], ["candies", "5"]]}, {"line": 6, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "0"], ["i", "0"], ["candies", "5"]]}, {"line": 7, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "5"], ["i", "0"], ["candies", "5"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "5"], ["i", "1"], ["candies", "5"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "5"], ["i", "1"], ["candies", "2"]]}, {"line": 6, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "5"], ["i", "1"], ["candies", "2"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "5"], ["i", "1"], ["candies", "2"]]}, {"line": 8, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["candy_max", "5"], ["i", "1"], ["candies", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 0]]}}
{"id": 13763, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nint ans = H2 * 60 + M2 - H1 * 60 - M1 - K;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "int", "ans", "=", "H2", "*", "60", "+", "M2", "-", "H1", "*", "60", "-", "M1", "-", "K", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["ans", "270"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["ans", "270"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1955, "code": "int N = 10, A = 7, B = 5;\nint smax = Math.min(A, B);\nint smin = Math.max(A + B - N, 0);\nSystem.out.println(smax + \" \" + smin);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "smax", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "smin", "=", "Math", ".", "max", "(", "A", "+", "B", "-", "N", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "smax", "+", "\" \"", "+", "smin", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["smax", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["smax", "5"], ["smin", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["smax", "5"], ["smin", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 751, "code": "int k = 2;\nint s = 7;\nint num = 1;\nboolean res = true;\nif (k == 2) {\nSystem.out.println(-1);}\nelse {\nfor (int i = 0; i < k; i++) {\ns %= k;\nif (s == 0) {\nres = false;\nSystem.out.println(num);\nbreak;}\nnum += 1;\ns *= 10;\ns += 7;}\nif (res) {\nSystem.out.println(-1);}}", "code_tokens": ["<0>", "int", "k", "=", "2", ";", "<1>", "int", "s", "=", "7", ";", "<2>", "int", "num", "=", "1", ";", "<3>", "boolean", "res", "=", "true", ";", "<4>", "if", "(", "k", "==", "2", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "<6>", "else", "{", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "k", ";", "i", "++", ")", "{", "<8>", "s", "%=", "k", ";", "<9>", "if", "(", "s", "==", "0", ")", "{", "<10>", "res", "=", "false", ";", "<11>", "System", ".", "out", ".", "println", "(", "num", ")", ";", "<12>", "break", ";", "}", "<13>", "num", "+=", "1", ";", "<14>", "s", "*=", "10", ";", "<15>", "s", "+=", "7", ";", "}", "<16>", "if", "(", "res", ")", "{", "<17>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["k", "2"]]}, {"line": 1, "state": [["k", "2"], ["s", "7"]]}, {"line": 2, "state": [["k", "2"], ["s", "7"], ["num", "1"]]}, {"line": 3, "state": [["k", "2"], ["s", "7"], ["num", "1"], ["res", "True"]]}, {"line": 4, "state": [["k", "2"], ["s", "7"], ["num", "1"], ["res", "True"]]}, {"line": 5, "state": [["k", "2"], ["s", "7"], ["num", "1"], ["res", "True"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0]], "5": [[5]]}}
{"id": 14486, "code": "int n = 7;\nint[] a = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint status = 0;\nint ans = 1;\nfor (int i = 1; i < n; i++) {\nif (status == 0) {\nif (a[i - 1] < a[i]) {\nstatus = 1;}\nelse if (a[i - 1] > a[i]) {\nstatus = 2;}}\nelse if (status == 1) {\nif (a[i - 1] > a[i]) {\nans += 1;\nstatus = 0;}}\nelse if (status == 2) {\nif (a[i - 1] < a[i]) {\nans += 1;\nstatus = 0;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "int", "status", "=", "0", ";", "<3>", "int", "ans", "=", "1", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "status", "==", "0", ")", "{", "<6>", "if", "(", "a", "[", "i", "-", "1", "]", "<", "a", "[", "i", "]", ")", "{", "<7>", "status", "=", "1", ";", "}", "<8>", "else", "if", "(", "a", "[", "i", "-", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<9>", "status", "=", "2", ";", "}", "}", "<10>", "else", "if", "(", "status", "==", "1", ")", "{", "<11>", "if", "(", "a", "[", "i", "-", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<12>", "ans", "+=", "1", ";", "<13>", "status", "=", "0", ";", "}", "}", "<14>", "else", "if", "(", "status", "==", "2", ")", "{", "<15>", "if", "(", "a", "[", "i", "-", "1", "]", "<", "a", "[", "i", "]", ")", "{", "<16>", "ans", "+=", "1", ";", "<17>", "status", "=", "0", ";", "}", "}", "}", "<18>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "1"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "1"], ["i", "1"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "1"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "2"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "2"]]}, {"line": 11, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "2"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "3"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "3"]]}, {"line": 11, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "1"], ["i", "3"]]}, {"line": 12, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "2"], ["i", "3"]]}, {"line": 13, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "2"], ["i", "3"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "2"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "2"], ["i", "4"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "2"], ["i", "4"]]}, {"line": 8, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "2"], ["i", "4"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "2"], ["i", "4"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "2"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "2"], ["i", "5"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "2"], ["i", "5"]]}, {"line": 14, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "2"], ["i", "5"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "2"], ["i", "5"]]}, {"line": 16, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "2"], ["ans", "3"], ["i", "5"]]}, {"line": 17, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "3"], ["i", "5"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "3"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "3"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "0"], ["ans", "3"], ["i", "6"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "3"], ["i", "6"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "3"], ["i", "6"]]}, {"line": 18, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["status", "1"], ["ans", "3"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 4, 0], [4, 11, 4, 6, 4, 0], [4, 11, 4, 11, 4, 6, 4, 0], [4, 8, 6, 4, 11, 4, 11, 4, 6, 4, 0], [4, 15, 4, 8, 6, 4, 11, 4, 11, 4, 6, 4, 0], [4, 6, 4, 15, 4, 8, 6, 4, 11, 4, 11, 4, 6, 4, 0]], "5": [[5, 2], [5, 7, 5, 2], [5, 10, 5, 7, 5, 2], [5, 13, 10, 5, 10, 5, 7, 5, 2], [5, 9, 5, 13, 10, 5, 10, 5, 7, 5, 2], [5, 17, 14, 10, 5, 9, 5, 13, 10, 5, 10, 5, 7, 5, 2]], "6": [[6, 4, 0], [6, 4, 11, 4, 11, 4, 6, 4, 0], [6, 4, 15, 4, 8, 6, 4, 11, 4, 11, 4, 6, 4, 0]], "7": [[7, 5, 2], [7, 5, 17, 14, 10, 5, 9, 5, 13, 10, 5, 10, 5, 7, 5, 2]], "8": [[8, 6, 4, 11, 4, 11, 4, 6, 4, 0]], "9": [[9, 5, 13, 10, 5, 10, 5, 7, 5, 2]], "10": [[10, 5, 7, 5, 2], [10, 5, 10, 5, 7, 5, 2], [10, 5, 9, 5, 13, 10, 5, 10, 5, 7, 5, 2]], "11": [[11, 4, 6, 4, 0], [11, 4, 11, 4, 6, 4, 0]], "12": [[12, 3]], "13": [[13, 10, 5, 10, 5, 7, 5, 2]], "14": [[14, 10, 5, 9, 5, 13, 10, 5, 10, 5, 7, 5, 2]], "15": [[15, 4, 8, 6, 4, 11, 4, 11, 4, 6, 4, 0]], "16": [[16, 12, 3]], "17": [[17, 14, 10, 5, 9, 5, 13, 10, 5, 10, 5, 7, 5, 2]], "18": [[18, 16, 12, 3]]}}
{"id": 11768, "code": "String a = \"11\";String b = \"16\";\nString x = \"11\";String y = \"17\";\nif (a.equals(x)) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(1);}", "code_tokens": ["<0>", "String", "a", "=", "\"11\"", ";", "String", "b", "=", "\"16\"", ";", "<1>", "String", "x", "=", "\"11\"", ";", "String", "y", "=", "\"17\"", ";", "<2>", "if", "(", "a", ".", "equals", "(", "x", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "16"]]}, {"line": 1, "state": [["a", "11"], ["b", "16"], ["x", "11"], ["y", "17"]]}, {"line": 2, "state": [["a", "11"], ["b", "16"], ["x", "11"], ["y", "17"]]}, {"line": 3, "state": [["a", "11"], ["b", "16"], ["x", "11"], ["y", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 12498, "code": "int A = 8, B = 12, K = 2;\nSystem.out.println(findKthElement(A, B, K));", "code_tokens": ["<0>", "int", "A", "=", "8", ",", "B", "=", "12", ",", "K", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "findKthElement", "(", "A", ",", "B", ",", "K", ")", ")", ";"], "trace": [{"line": 0, "state": [["A", "8"], ["B", "12"], ["K", "2"]]}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": [["i", "1"]]}, {"line": 1, "state": [["i", "2"]]}, {"line": 1, "state": [["i", "3"]]}, {"line": 1, "state": [["i", "4"]]}, {"line": 1, "state": [["i", "5"]]}, {"line": 1, "state": [["i", "6"]]}, {"line": 1, "state": [["i", "7"]]}, {"line": 1, "state": [["i", "8"]]}, {"line": 1, "state": [["i", "9"]]}, {"line": 1, "state": [["i", "10"]]}, {"line": 1, "state": [["i", "11"]]}, {"line": 1, "state": [["i", "12"]]}, {"line": 1, "state": [["i", "13"]]}, {"line": 1, "state": [["i", "14"]]}, {"line": 1, "state": [["i", "15"]]}, {"line": 1, "state": [["i", "16"]]}, {"line": 1, "state": [["i", "17"]]}, {"line": 1, "state": [["i", "18"]]}, {"line": 1, "state": [["i", "19"]]}, {"line": 1, "state": [["i", "20"]]}, {"line": 1, "state": [["i", "21"]]}, {"line": 1, "state": [["i", "22"]]}, {"line": 1, "state": [["i", "23"]]}, {"line": 1, "state": [["i", "24"]]}, {"line": 1, "state": [["i", "25"]]}, {"line": 1, "state": [["i", "26"]]}, {"line": 1, "state": [["i", "27"]]}, {"line": 1, "state": [["i", "28"]]}, {"line": 1, "state": [["i", "29"]]}, {"line": 1, "state": [["i", "30"]]}, {"line": 1, "state": [["i", "31"]]}, {"line": 1, "state": [["i", "32"]]}, {"line": 1, "state": [["i", "33"]]}, {"line": 1, "state": [["i", "34"]]}, {"line": 1, "state": [["i", "35"]]}, {"line": 1, "state": [["i", "36"]]}, {"line": 1, "state": [["i", "37"]]}, {"line": 1, "state": [["i", "38"]]}, {"line": 1, "state": [["i", "39"]]}, {"line": 1, "state": [["i", "40"]]}, {"line": 1, "state": [["i", "41"]]}, {"line": 1, "state": [["i", "42"]]}, {"line": 1, "state": [["i", "43"]]}, {"line": 1, "state": [["i", "44"]]}, {"line": 1, "state": [["i", "45"]]}, {"line": 1, "state": [["i", "46"]]}, {"line": 1, "state": [["i", "47"]]}, {"line": 1, "state": [["i", "48"]]}, {"line": 1, "state": [["i", "49"]]}, {"line": 1, "state": [["i", "50"]]}, {"line": 1, "state": [["i", "51"]]}, {"line": 1, "state": [["i", "52"]]}, {"line": 1, "state": [["i", "53"]]}, {"line": 1, "state": [["i", "54"]]}, {"line": 1, "state": [["i", "55"]]}, {"line": 1, "state": [["i", "56"]]}, {"line": 1, "state": [["i", "57"]]}, {"line": 1, "state": [["i", "58"]]}, {"line": 1, "state": [["i", "59"]]}, {"line": 1, "state": [["i", "60"]]}, {"line": 1, "state": [["i", "61"]]}, {"line": 1, "state": [["i", "62"]]}, {"line": 1, "state": [["i", "63"]]}, {"line": 1, "state": [["i", "64"]]}, {"line": 1, "state": [["i", "65"]]}, {"line": 1, "state": [["i", "66"]]}, {"line": 1, "state": [["i", "67"]]}, {"line": 1, "state": [["i", "68"]]}, {"line": 1, "state": [["i", "69"]]}, {"line": 1, "state": [["i", "70"]]}, {"line": 1, "state": [["i", "71"]]}, {"line": 1, "state": [["i", "72"]]}, {"line": 1, "state": [["i", "73"]]}, {"line": 1, "state": [["i", "74"]]}, {"line": 1, "state": [["i", "75"]]}, {"line": 1, "state": [["i", "76"]]}, {"line": 1, "state": [["i", "77"]]}, {"line": 1, "state": [["i", "78"]]}, {"line": 1, "state": [["i", "79"]]}, {"line": 1, "state": [["i", "80"]]}, {"line": 1, "state": [["i", "81"]]}, {"line": 1, "state": [["i", "82"]]}, {"line": 1, "state": [["i", "83"]]}, {"line": 1, "state": [["i", "84"]]}, {"line": 1, "state": [["i", "85"]]}, {"line": 1, "state": [["i", "86"]]}, {"line": 1, "state": [["i", "87"]]}, {"line": 1, "state": [["i", "88"]]}, {"line": 1, "state": [["i", "89"]]}, {"line": 1, "state": [["i", "90"]]}, {"line": 1, "state": [["i", "91"]]}, {"line": 1, "state": [["i", "92"]]}, {"line": 1, "state": [["i", "93"]]}, {"line": 1, "state": [["i", "94"]]}, {"line": 1, "state": [["i", "95"]]}, {"line": 1, "state": [["i", "96"]]}, {"line": 1, "state": [["i", "97"]]}, {"line": 1, "state": [["i", "98"]]}, {"line": 1, "state": [["i", "99"]]}, {"line": 1, "state": [["i", "100"]]}, {"line": 1, "state": [["i", "100"]]}, {"line": 1, "state": [["A", "8"], ["B", "12"], ["K", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]]}}
{"id": 7858, "code": "int n = 4, k = 3;\nint[] a = {2, 3, 1, 4};\nint ans = n - k;\nint c = 0;\nif (ans > 0) {\nc = (int) Math.ceil((double) ans / (k - 1));}\nSystem.out.println(c + 1);", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "ans", "=", "n", "-", "k", ";", "<3>", "int", "c", "=", "0", ";", "<4>", "if", "(", "ans", ">", "0", ")", "{", "<5>", "c", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "ans", "/", "(", "k", "-", "1", ")", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "c", "+", "1", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "4"], ["k", "3"]]}, {"line": 2, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["ans", "1"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["ans", "1"], ["c", "0"]]}, {"line": 5, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["ans", "1"], ["c", "0"]]}, {"line": 6, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["ans", "1"], ["c", "1"]]}, {"line": 7, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["ans", "1"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4]], "5": [[5, 3, 1]], "6": [[6, 5, 3, 1]], "7": [[7, 6, 5, 3, 1]]}}
{"id": 746, "code": "int k = 2;\nint x = 7 % k;\nint i = 1;\nHashSet<Integer> set = new HashSet<>();\nboolean is_there = false;\nwhile (!is_there) {\nset.add(x);\nif (x == 0) {\nSystem.out.println(i);\nbreak;}\nx = (x * 10 + 7) % k;\nif (set.contains(x)) {\nis_there = true;}\nset.add(x);\ni++;\nif (x == 0) {\nSystem.out.println(i);\nbreak;}}\nelse {\nSystem.out.println(\"-1\");}", "code_tokens": ["<0>", "int", "k", "=", "2", ";", "<1>", "int", "x", "=", "7", "%", "k", ";", "<2>", "int", "i", "=", "1", ";", "<3>", "HashSet", "<", "Integer", ">", "set", "=", "new", "HashSet", "<", ">", "(", ")", ";", "<4>", "boolean", "is_there", "=", "false", ";", "<5>", "while", "(", "!", "is_there", ")", "{", "<6>", "set", ".", "add", "(", "x", ")", ";", "<7>", "if", "(", "x", "==", "0", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<9>", "break", ";", "}", "<10>", "x", "=", "(", "x", "*", "10", "+", "7", ")", "%", "k", ";", "<11>", "if", "(", "set", ".", "contains", "(", "x", ")", ")", "{", "<12>", "is_there", "=", "true", ";", "}", "<13>", "set", ".", "add", "(", "x", ")", ";", "<14>", "i", "++", ";", "<15>", "if", "(", "x", "==", "0", ")", "{", "<16>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<17>", "break", ";", "}", "}", "<18>", "else", "{", "<19>", "System", ".", "out", ".", "println", "(", "\"-1\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["k", "2"]]}, {"line": 1, "state": [["k", "2"], ["x", "1"]]}, {"line": 2, "state": [["k", "2"], ["x", "1"], ["i", "1"]]}, {"line": 3, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "set()"]]}, {"line": 4, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "set()"], ["is_there", "False"]]}, {"line": 5, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "set()"], ["is_there", "False"]]}, {"line": 6, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "{ 1 }"], ["is_there", "False"]]}, {"line": 7, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "{ 1 }"], ["is_there", "False"]]}, {"line": 10, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "{ 1 }"], ["is_there", "False"]]}, {"line": 11, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "{ 1 }"], ["is_there", "False"]]}, {"line": 12, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "{ 1 }"], ["is_there", "True"]]}, {"line": 13, "state": [["k", "2"], ["x", "1"], ["i", "1"], ["set", "{ 1 }"], ["is_there", "True"]]}, {"line": 14, "state": [["k", "2"], ["x", "1"], ["i", "2"], ["set", "{ 1 }"], ["is_there", "True"]]}, {"line": 15, "state": [["k", "2"], ["x", "1"], ["i", "2"], ["set", "{ 1 }"], ["is_there", "True"]]}, {"line": 5, "state": [["k", "2"], ["x", "1"], ["i", "2"], ["set", "{ 1 }"], ["is_there", "True"]]}, {"line": 19, "state": [["k", "2"], ["x", "1"], ["i", "2"], ["set", "{ 1 }"], ["is_there", "True"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 4], [5, 12, 5, 4]], "6": [[6, 3, 1, 0]], "7": [[7, 6, 3, 1, 0]], "10": [[10, 7, 6, 3, 1, 0]], "11": [[11, 10, 7, 6, 3, 1, 0]], "12": [[12, 5, 4]], "13": [[13, 11, 10, 7, 6, 3, 1, 0]], "14": [[14, 2]], "15": [[15, 13, 11, 10, 7, 6, 3, 1, 0]], "19": [[19]]}}
{"id": 19410, "code": "long n = 999999999;\nSystem.out.println(n % 2 == 0 ? n : 2 * n);", "code_tokens": ["<0>", "long", "n", "=", "999999999", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "%", "2", "==", "0", "?", "n", ":", "2", "*", "n", ")", ";"], "trace": [{"line": 0, "state": [["n", "999999999"]]}, {"line": 1, "state": [["n", "999999999"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13375, "code": "String a = \"abcde\"; String b = \"fghihgf\"; String c = \"edcba\";\nSystem.out.println(a + ' ' + b + ' ' + c);", "code_tokens": ["<0>", "String", "a", "=", "\"abcde\"", ";", "String", "b", "=", "\"fghihgf\"", ";", "String", "c", "=", "\"edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "+", "' '", "+", "b", "+", "' '", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}, {"line": 1, "state": [["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2841, "code": "String S = \"1111111111\";\nint ans = 999;\nfor (int s = 0; s < S.length() - 2; s++) {\nans = Math.min(Math.abs(753 - Integer.parseInt(S.substring(0, 3))), ans);\nS = S.substring(1);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"1111111111\"", ";", "<1>", "int", "ans", "=", "999", ";", "<2>", "for", "(", "int", "s", "=", "0", ";", "s", "<", "S", ".", "length", "(", ")", "-", "2", ";", "s", "++", ")", "{", "<3>", "ans", "=", "Math", ".", "min", "(", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "0", ",", "3", ")", ")", ")", ",", "ans", ")", ";", "<4>", "S", "=", "S", ".", "substring", "(", "1", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "1111111111"]]}, {"line": 1, "state": [["S", "1111111111"], ["ans", "999"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "999"], ["s", "0"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["s", "0"]]}, {"line": 4, "state": [["S", "111111111"], ["ans", "642"], ["s", "0"]]}, {"line": 2, "state": [["S", "111111111"], ["ans", "642"], ["s", "1"]]}, {"line": 3, "state": [["S", "111111111"], ["ans", "642"], ["s", "1"]]}, {"line": 4, "state": [["S", "11111111"], ["ans", "642"], ["s", "1"]]}, {"line": 2, "state": [["S", "11111111"], ["ans", "642"], ["s", "2"]]}, {"line": 3, "state": [["S", "11111111"], ["ans", "642"], ["s", "2"]]}, {"line": 4, "state": [["S", "1111111"], ["ans", "642"], ["s", "2"]]}, {"line": 2, "state": [["S", "1111111"], ["ans", "642"], ["s", "3"]]}, {"line": 3, "state": [["S", "1111111"], ["ans", "642"], ["s", "3"]]}, {"line": 4, "state": [["S", "111111"], ["ans", "642"], ["s", "3"]]}, {"line": 2, "state": [["S", "111111"], ["ans", "642"], ["s", "4"]]}, {"line": 3, "state": [["S", "111111"], ["ans", "642"], ["s", "4"]]}, {"line": 4, "state": [["S", "11111"], ["ans", "642"], ["s", "4"]]}, {"line": 2, "state": [["S", "11111"], ["ans", "642"], ["s", "5"]]}, {"line": 3, "state": [["S", "11111"], ["ans", "642"], ["s", "5"]]}, {"line": 4, "state": [["S", "1111"], ["ans", "642"], ["s", "5"]]}, {"line": 2, "state": [["S", "1111"], ["ans", "642"], ["s", "6"]]}, {"line": 3, "state": [["S", "1111"], ["ans", "642"], ["s", "6"]]}, {"line": 4, "state": [["S", "111"], ["ans", "642"], ["s", "6"]]}, {"line": 2, "state": [["S", "111"], ["ans", "642"], ["s", "7"]]}, {"line": 3, "state": [["S", "111"], ["ans", "642"], ["s", "7"]]}, {"line": 4, "state": [["S", "11"], ["ans", "642"], ["s", "7"]]}, {"line": 2, "state": [["S", "11"], ["ans", "642"], ["s", "7"]]}, {"line": 5, "state": [["S", "11"], ["ans", "642"], ["s", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0]], "3": [[3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0], [4, 3, 2, 0]], "5": [[5, 3, 2, 0]]}}
{"id": 9247, "code": "System.out.println(\"2018\" + String.valueOf(\"2017/01/31\".substring(4)));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "String", ".", "valueOf", "(", "\"2017/01/31\"", ".", "substring", "(", "4", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 3562, "code": "int house_len = 12, curtain_len = 4;\nif (house_len >= curtain_len * 2) {\nSystem.out.println(house_len - curtain_len * 2);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "house_len", "=", "12", ",", "curtain_len", "=", "4", ";", "<1>", "if", "(", "house_len", ">=", "curtain_len", "*", "2", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "house_len", "-", "curtain_len", "*", "2", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["house_len", "12"], ["curtain_len", "4"]]}, {"line": 1, "state": [["house_len", "12"], ["curtain_len", "4"]]}, {"line": 2, "state": [["house_len", "12"], ["curtain_len", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15950, "code": "int a = 12, b = 4;\nint ans = a - b * 2;\nif (ans >= 0) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "int", "ans", "=", "a", "-", "b", "*", "2", ";", "<2>", "if", "(", "ans", ">=", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"], ["ans", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"], ["ans", "4"]]}, {"line": 3, "state": [["a", "12"], ["b", "4"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 8058, "code": "int n = 3, k = 3;\nSystem.out.println(-((1 - n) / (k - 1)));", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "System", ".", "out", ".", "println", "(", "-", "(", "(", "1", "-", "n", ")", "/", "(", "k", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18274, "code": "int h = 2;\nint w = 100;\nint n = 200;\nint p = Math.max(h, w);\nSystem.out.println((n + p - 1) / p);", "code_tokens": ["<0>", "int", "h", "=", "2", ";", "<1>", "int", "w", "=", "100", ";", "<2>", "int", "n", "=", "200", ";", "<3>", "int", "p", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "n", "+", "p", "-", "1", ")", "/", "p", ")", ";"], "trace": [{"line": 0, "state": [["h", "2"]]}, {"line": 1, "state": [["h", "2"], ["w", "100"]]}, {"line": 2, "state": [["h", "2"], ["w", "100"], ["n", "200"]]}, {"line": 3, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["p", "100"]]}, {"line": 4, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["p", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 15046, "code": "int N = 45, P = 1;\nint[] A = {17, 55, 85, 55, 74, 20, 90, 67, 40, 70, 39, 89, 91, 50, 16, 24, 14, 43, 24, 66, 25, 9, 89, 71, 41, 16, 53, 13, 61, 15, 85, 72, 62, 67, 42, 26, 36, 66, 4, 87, 59, 91, 4, 25, 26};\nboolean odd = false;\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 == 1) {\nodd = true;\nbreak;}}\nif (odd) {\nSystem.out.println((int)Math.pow(2, N - 1));}\nelse {\nif (P == 0) {\nSystem.out.println((int)Math.pow(2, N));}\nelse {\nSystem.out.println(0);}}", "code_tokens": ["<0>", "int", "N", "=", "45", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "17", ",", "55", ",", "85", ",", "55", ",", "74", ",", "20", ",", "90", ",", "67", ",", "40", ",", "70", ",", "39", ",", "89", ",", "91", ",", "50", ",", "16", ",", "24", ",", "14", ",", "43", ",", "24", ",", "66", ",", "25", ",", "9", ",", "89", ",", "71", ",", "41", ",", "16", ",", "53", ",", "13", ",", "61", ",", "15", ",", "85", ",", "72", ",", "62", ",", "67", ",", "42", ",", "26", ",", "36", ",", "66", ",", "4", ",", "87", ",", "59", ",", "91", ",", "4", ",", "25", ",", "26", "}", ";", "<2>", "boolean", "odd", "=", "false", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "[", "i", "]", "%", "2", "==", "1", ")", "{", "<5>", "odd", "=", "true", ";", "<6>", "break", ";", "}", "}", "<7>", "if", "(", "odd", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", "-", "1", ")", ")", ";", "}", "<9>", "else", "{", "<10>", "if", "(", "P", "==", "0", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", ")", ")", ";", "}", "<12>", "else", "{", "<13>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["N", "45"], ["P", "1"]]}, {"line": 1, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"]]}, {"line": 2, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "False"]]}, {"line": 3, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "False"], ["i", "0"]]}, {"line": 4, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "False"], ["i", "0"]]}, {"line": 5, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "True"], ["i", "0"]]}, {"line": 6, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "True"], ["i", "0"]]}, {"line": 7, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "True"], ["i", "0"]]}, {"line": 8, "state": [["N", "45"], ["P", "1"], ["A", "[ 17 , 55 , 85 , 55 , 74 , 20 , 90 , 67 , 40 , 70 , 39 , 89 , 91 , 50 , 16 , 24 , 14 , 43 , 24 , 66 , 25 , 9 , 89 , 71 , 41 , 16 , 53 , 13 , 61 , 15 , 85 , 72 , 62 , 67 , 42 , 26 , 36 , 66 , 4 , 87 , 59 , 91 , 4 , 25 , 26 ]"], ["odd", "True"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]], "5": [[5, 2]], "6": [[6]], "7": [[7, 5, 2]], "8": [[8, 3, 0]]}}
{"id": 14685, "code": "int n = 3, p = 0;\nint even_count = 0;\nint odd_count = n - even_count;\nif (odd_count == 0) {\nSystem.out.println(p == 1 ? 0 : (int) Math.pow(2, even_count));\n} else {\nSystem.out.println((int) Math.pow(2, even_count) * (int) Math.pow(2, odd_count - 1));}", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "p", "=", "0", ";", "<1>", "int", "even_count", "=", "0", ";", "<2>", "int", "odd_count", "=", "n", "-", "even_count", ";", "<3>", "if", "(", "odd_count", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "p", "==", "1", "?", "0", ":", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even_count", ")", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even_count", ")", "*", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "odd_count", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "3"], ["p", "0"]]}, {"line": 1, "state": [["n", "3"], ["p", "0"], ["even_count", "0"]]}, {"line": 2, "state": [["n", "3"], ["p", "0"], ["even_count", "0"], ["odd_count", "3"]]}, {"line": 3, "state": [["n", "3"], ["p", "0"], ["even_count", "0"], ["odd_count", "3"]]}, {"line": 6, "state": [["n", "3"], ["p", "0"], ["even_count", "0"], ["odd_count", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6, 3, 2, 1, 0]]}}
{"id": 6775, "code": "int hp_m = 210, n = 5;\nint[] attack = {31, 41, 59, 26, 53};\nint total_attack = 0;for (int value : attack) {total_attack += value;}\nif (total_attack >= hp_m) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "hp_m", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "attack", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "total_attack", "=", "0", ";", "for", "(", "int", "value", ":", "attack", ")", "{", "total_attack", "+=", "value", ";", "}", "<3>", "if", "(", "total_attack", ">=", "hp_m", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["hp_m", "210"], ["n", "5"]]}, {"line": 1, "state": [["hp_m", "210"], ["n", "5"], ["attack", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["hp_m", "210"], ["n", "5"], ["attack", "[ 31 , 41 , 59 , 26 , 53 ]"], ["total_attack", "210"]]}, {"line": 3, "state": [["hp_m", "210"], ["n", "5"], ["attack", "[ 31 , 41 , 59 , 26 , 53 ]"], ["total_attack", "210"]]}, {"line": 4, "state": [["hp_m", "210"], ["n", "5"], ["attack", "[ 31 , 41 , 59 , 26 , 53 ]"], ["total_attack", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 7760, "code": "int n = 4, k = 3;\nint[] a = {2, 3, 1, 4};\nint fi = 0;\nfor (int i = 0; i < n; i++) {\nif (a[i] == 1) {\nfi = i;\nbreak;}}\nif ((n - 1) % (k - 1) == 0) {\nSystem.out.println((n - 1) / (k - 1));}\nelse {\nSystem.out.println((n - 1) / (k - 1) + 1);}", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "fi", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "if", "(", "a", "[", "i", "]", "==", "1", ")", "{", "<5>", "fi", "=", "i", ";", "<6>", "break", ";", "}", "}", "<7>", "if", "(", "(", "n", "-", "1", ")", "%", "(", "k", "-", "1", ")", "==", "0", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "(", "n", "-", "1", ")", "/", "(", "k", "-", "1", ")", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "(", "n", "-", "1", ")", "/", "(", "k", "-", "1", ")", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "4"], ["k", "3"]]}, {"line": 1, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"], ["i", "0"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"], ["i", "0"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"], ["i", "1"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"], ["i", "2"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "0"], ["i", "2"]]}, {"line": 5, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "2"], ["i", "2"]]}, {"line": 6, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "2"], ["i", "2"]]}, {"line": 7, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "2"], ["i", "2"]]}, {"line": 10, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["fi", "2"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 0]], "6": [[6]], "7": [[7, 3, 4, 3, 4, 3, 0]], "10": [[10, 7, 3, 4, 3, 4, 3, 0]]}}
{"id": 794, "code": "int K = 101;\nint sevens = 7 % K;\nint count = 1;\nwhile (sevens % K != 0) {\nsevens = sevens * (10 % K) + (7 % K);\nsevens = sevens % K;\ncount += 1;\nif (count > K) {\ncount = -1;\nbreak;}}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "K", "=", "101", ";", "<1>", "int", "sevens", "=", "7", "%", "K", ";", "<2>", "int", "count", "=", "1", ";", "<3>", "while", "(", "sevens", "%", "K", "!=", "0", ")", "{", "<4>", "sevens", "=", "sevens", "*", "(", "10", "%", "K", ")", "+", "(", "7", "%", "K", ")", ";", "<5>", "sevens", "=", "sevens", "%", "K", ";", "<6>", "count", "+=", "1", ";", "<7>", "if", "(", "count", ">", "K", ")", "{", "<8>", "count", "=", "-", "1", ";", "<9>", "break", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["K", "101"]]}, {"line": 1, "state": [["K", "101"], ["sevens", "7"]]}, {"line": 2, "state": [["K", "101"], ["sevens", "7"], ["count", "1"]]}, {"line": 3, "state": [["K", "101"], ["sevens", "7"], ["count", "1"]]}, {"line": 4, "state": [["K", "101"], ["sevens", "77"], ["count", "1"]]}, {"line": 5, "state": [["K", "101"], ["sevens", "77"], ["count", "1"]]}, {"line": 6, "state": [["K", "101"], ["sevens", "77"], ["count", "2"]]}, {"line": 7, "state": [["K", "101"], ["sevens", "77"], ["count", "2"]]}, {"line": 3, "state": [["K", "101"], ["sevens", "77"], ["count", "2"]]}, {"line": 4, "state": [["K", "101"], ["sevens", "777"], ["count", "2"]]}, {"line": 5, "state": [["K", "101"], ["sevens", "70"], ["count", "2"]]}, {"line": 6, "state": [["K", "101"], ["sevens", "70"], ["count", "3"]]}, {"line": 7, "state": [["K", "101"], ["sevens", "70"], ["count", "3"]]}, {"line": 3, "state": [["K", "101"], ["sevens", "70"], ["count", "3"]]}, {"line": 4, "state": [["K", "101"], ["sevens", "707"], ["count", "3"]]}, {"line": 5, "state": [["K", "101"], ["sevens", "0"], ["count", "3"]]}, {"line": 6, "state": [["K", "101"], ["sevens", "0"], ["count", "4"]]}, {"line": 7, "state": [["K", "101"], ["sevens", "0"], ["count", "4"]]}, {"line": 3, "state": [["K", "101"], ["sevens", "0"], ["count", "4"]]}, {"line": 10, "state": [["K", "101"], ["sevens", "0"], ["count", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 7, 6, 2], [3, 7, 6, 7, 6, 2], [3, 7, 6, 7, 6, 7, 6, 2]], "4": [[4, 3, 1, 0], [4, 3, 7, 6, 2], [4, 3, 7, 6, 7, 6, 2]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 7, 6, 2], [5, 4, 3, 7, 6, 7, 6, 2]], "6": [[6, 2], [6, 7, 6, 2], [6, 7, 6, 7, 6, 2]], "7": [[7, 6, 2], [7, 6, 7, 6, 2], [7, 6, 7, 6, 7, 6, 2]], "10": [[10, 7, 6, 7, 6, 7, 6, 2]]}}
{"id": 19075, "code": "int N = 5;\nif (N % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint ret = 0;\nfor (int i = 1; i <= 26; i++) {\nret += N / (2 * Math.pow(5, i));}\nSystem.out.println(ret);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "ret", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "26", ";", "i", "++", ")", "{", "<6>", "ret", "+=", "N", "/", "(", "2", "*", "Math", ".", "pow", "(", "5", ",", "i", ")", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ret", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 2, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 8668, "code": "int N = 5;\nint[] A = {3, 2, 2, 4, 1};\nint[] B = {1, 2, 2, 2, 1};\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint tmp = sum(A, i + 1) + sum(B, i, N);\nif (ans < tmp) {\nans = tmp;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "tmp", "=", "sum", "(", "A", ",", "i", "+", "1", ")", "+", "sum", "(", "B", ",", "i", ",", "N", ")", ";", "<6>", "if", "(", "ans", "<", "tmp", ")", "{", "<7>", "ans", "=", "tmp", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"], ["tmp", "11"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"], ["tmp", "11"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "0"], ["tmp", "11"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["tmp", "11"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["tmp", "12"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["tmp", "12"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "1"], ["tmp", "12"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["tmp", "12"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["tmp", "12"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["tmp", "12"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["tmp", "12"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["tmp", "14"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["tmp", "14"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "3"], ["tmp", "14"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["tmp", "14"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["tmp", "13"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["tmp", "13"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["tmp", "13"]]}, {"line": 8, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["tmp", "13"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 5, 4, 0], [7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 5547, "code": "int n = 100;\nSystem.out.println(n - n / 2);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "-", "n", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4573, "code": "char[] s = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nSystem.out.print(s[0]);System.out.print(s.length - 2);System.out.print(s[s.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "System", ".", "out", ".", "print", "(", "s", "[", "0", "]", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "length", "-", "2", ")", ";", "System", ".", "out", ".", "print", "(", "s", "[", "s", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9617, "code": "System.out.println(\"2018\" + \"2017/01/31\".substring(4));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "\"2017/01/31\"", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 4591, "code": "char[] s = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nchar first = s[0];\nchar last = s[s.length - 1];\nSystem.out.println(first + String.valueOf(s.length - 2) + last);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "char", "first", "=", "s", "[", "0", "]", ";", "<2>", "char", "last", "=", "s", "[", "s", ".", "length", "-", "1", "]", ";", "<3>", "System", ".", "out", ".", "println", "(", "first", "+", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", "+", "last", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["s", "[ n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["first", "0"]]}, {"line": 2, "state": [["s", "[ n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o ]"], ["first", "1"], ["last", "n"]]}, {"line": 3, "state": [["s", "[ n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o ]"], ["first", "2"], ["last", "n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 12935, "code": "if (Integer.parseInt(\"6\") == 3 || Integer.parseInt(\"6\") == 5 || Integer.parseInt(\"6\") == 7) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "if", "(", "Integer", ".", "parseInt", "(", "\"6\"", ")", "==", "3", "||", "Integer", ".", "parseInt", "(", "\"6\"", ")", "==", "5", "||", "Integer", ".", "parseInt", "(", "\"6\"", ")", "==", "7", ")", "{", "<1>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<2>", "}", "else", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 3, "state": []}], "slices": {"0": [[0]], "3": [[3]]}}
{"id": 18845, "code": "int h = 14;\nint w = 12;\nint n = 112;\nint r = Math.max(h, w);\nif (n % r != 0) {\nSystem.out.println(n / r + 1);\n} else {\nSystem.out.println(n / r);}", "code_tokens": ["<0>", "int", "h", "=", "14", ";", "<1>", "int", "w", "=", "12", ";", "<2>", "int", "n", "=", "112", ";", "<3>", "int", "r", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "if", "(", "n", "%", "r", "!=", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "n", "/", "r", "+", "1", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "n", "/", "r", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "14"]]}, {"line": 1, "state": [["h", "14"], ["w", "12"]]}, {"line": 2, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 3, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["r", "14"]]}, {"line": 4, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["r", "14"]]}, {"line": 7, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["r", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "7": [[7, 4, 3, 1, 0]]}}
{"id": 11437, "code": "String s = \"SUN\";\nif (s.equals(\"SUN\")) {\nSystem.out.println(7);}\nelse if (s.equals(\"MON\")) {\nSystem.out.println(6);}\nelse if (s.equals(\"TUE\")) {\nSystem.out.println(5);}\nelse if (s.equals(\"WED\")) {\nSystem.out.println(4);}\nelse if (s.equals(\"THU\")) {\nSystem.out.println(3);}\nelse if (s.equals(\"FRI\")) {\nSystem.out.println(2);}\nelse if (s.equals(\"SAT\")) {\nSystem.out.println(1);}", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<3>", "else", "if", "(", "s", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "6", ")", ";", "}", "<5>", "else", "if", "(", "s", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "5", ")", ";", "}", "<7>", "else", "if", "(", "s", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "4", ")", ";", "}", "<9>", "else", "if", "(", "s", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "3", ")", ";", "}", "<11>", "else", "if", "(", "s", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "2", ")", ";", "}", "<13>", "else", "if", "(", "s", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"]]}, {"line": 2, "state": [["s", "SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 16165, "code": "int n = 2;\nint[] a = {100, 0};\njava.util.Arrays.sort(a);\nint amax = a[a.length - 1];\ndouble tmp1 = amax + 1;\nfor (int i : java.util.Arrays.copyOfRange(a, 0, n - 1)) {\ndouble tmp2 = i - amax / 2.0;\nif (tmp2 > tmp1) {\nbreak;}\nelse {\nint r = i;\ntmp1 = Math.abs(tmp2);}}\nSystem.out.println(amax + \" \" + r);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "amax", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<4>", "double", "tmp1", "=", "amax", "+", "1", ";", "<5>", "for", "(", "int", "i", ":", "java", ".", "util", ".", "Arrays", ".", "copyOfRange", "(", "a", ",", "0", ",", "n", "-", "1", ")", ")", "{", "<6>", "double", "tmp2", "=", "i", "-", "amax", "/", "2.0", ";", "<7>", "if", "(", "tmp2", ">", "tmp1", ")", "{", "<8>", "break", ";", "}", "<9>", "else", "{", "<10>", "int", "r", "=", "i", ";", "<11>", "tmp1", "=", "Math", ".", "abs", "(", "tmp2", ")", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "amax", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "101"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "101"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "101"], ["i", "0"], ["tmp2", "-50.0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "101"], ["i", "0"], ["tmp2", "-50.0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "101"], ["i", "0"], ["tmp2", "-50.0"], ["r", "0"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "50.0"], ["i", "0"], ["tmp2", "-50.0"], ["r", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "50.0"], ["i", "0"], ["tmp2", "-50.0"], ["r", "0"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["amax", "100"], ["tmp1", "50.0"], ["i", "0"], ["tmp2", "-50.0"], ["r", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 3, 2, 1], [5, 10, 6, 5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1]], "7": [[7, 6, 5, 3, 2, 1]], "10": [[10, 6, 5, 3, 2, 1]], "11": [[11, 7, 6, 5, 3, 2, 1]], "12": [[12, 10, 6, 5, 3, 2, 1]]}}
{"id": 16446, "code": "int n = 2;\nint[] a = {100, 0};\nint m = Integer.MIN_VALUE;for (int num : a) {if (num > m) {m = num;}}\ndouble res = 1e10;\nint ans = 0;\nfor (int i : a) {\nif (i != m) {\nif (Math.abs(m / 2 - i) < res) {\nres = Math.abs(m / 2 - i);\nans = i;}}}\nSystem.out.println(m + \" \" + ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "int", "m", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "num", ":", "a", ")", "{", "if", "(", "num", ">", "m", ")", "{", "m", "=", "num", ";", "}", "}", "<3>", "double", "res", "=", "1e10", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "i", ":", "a", ")", "{", "<6>", "if", "(", "i", "!=", "m", ")", "{", "<7>", "if", "(", "Math", ".", "abs", "(", "m", "/", "2", "-", "i", ")", "<", "res", ")", "{", "<8>", "res", "=", "Math", ".", "abs", "(", "m", "/", "2", "-", "i", ")", ";", "<9>", "ans", "=", "i", ";", "}", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "m", "+", "\" \"", "+", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"], ["ans", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"], ["ans", "0"], ["i", "100"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"], ["ans", "0"], ["i", "100"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"], ["ans", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"], ["ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "10000000000.0"], ["ans", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "50"], ["ans", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "50"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "50"], ["ans", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["res", "50"], ["ans", "0"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 2, 1], [5, 6, 5, 2, 1], [5, 9, 8, 7, 6, 5, 6, 5, 2, 1]], "6": [[6, 5, 2, 1], [6, 5, 6, 5, 2, 1]], "7": [[7, 6, 5, 6, 5, 2, 1]], "8": [[8, 7, 6, 5, 6, 5, 2, 1]], "9": [[9, 8, 7, 6, 5, 6, 5, 2, 1]], "10": [[10, 9, 8, 7, 6, 5, 6, 5, 2, 1]]}}
{"id": 11296, "code": "String[] a = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nString s = \"SAT\";\nint k = -1;\nfor (int i = 0; i < 7; i++) {\nif (a[i].equals(s)) k = i;}\nk = (7 - k);\nSystem.out.println(k);", "code_tokens": ["<0>", "String", "[", "]", "a", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "String", "s", "=", "\"SAT\"", ";", "<2>", "int", "k", "=", "-", "1", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "7", ";", "i", "++", ")", "{", "<4>", "if", "(", "a", "[", "i", "]", ".", "equals", "(", "s", ")", ")", "k", "=", "i", ";", "}", "<5>", "k", "=", "(", "7", "-", "k", ")", ";", "<6>", "System", ".", "out", ".", "println", "(", "k", ")", ";"], "trace": [{"line": 0, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"]]}, {"line": 2, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "0"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "0"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "1"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "1"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "2"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "2"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "3"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "3"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "4"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "4"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "5"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "5"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "-1"], ["i", "6"]]}, {"line": 4, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "6"], ["i", "6"]]}, {"line": 3, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "6"], ["i", "6"]]}, {"line": 5, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "1"], ["i", "6"]]}, {"line": 6, "state": [["a", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["s", "SAT"], ["k", "1"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3, 4, 3], [3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "4": [[4, 3], [4, 3, 4, 3], [4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "6": [[6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]]}}
{"id": 8356, "code": "int n = 5;\nint[] a1 = {3, 2, 2, 4, 1};\nint[] a2 = {1, 2, 2, 2, 1};\nint ans = sum(a1) + a2[n - 1];\nint sum_a = ans;\nfor (int i = 0; i < n - 1; i++) {\nsum_a = sum_a - a1[n - 1 - i] + a2[n - 2 - i];\nans = Math.max(ans, sum_a);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "sum", "(", "a1", ")", "+", "a2", "[", "n", "-", "1", "]", ";", "<4>", "int", "sum_a", "=", "ans", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<6>", "sum_a", "=", "sum_a", "-", "a1", "[", "n", "-", "1", "-", "i", "]", "+", "a2", "[", "n", "-", "2", "-", "i", "]", ";", "<7>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "sum_a", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"], ["sum_a", "13"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"], ["sum_a", "13"], ["i", "0"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "13"], ["sum_a", "14"], ["i", "0"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "14"], ["i", "0"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "14"], ["i", "1"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "12"], ["i", "1"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "12"], ["i", "1"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "12"], ["i", "2"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "12"], ["i", "2"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "12"], ["i", "2"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "12"], ["i", "3"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "11"], ["i", "3"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "11"], ["i", "3"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "11"], ["i", "3"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["sum_a", "11"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0], [5, 6, 5, 3, 2, 1, 0], [5, 6, 5, 6, 5, 3, 2, 1, 0], [5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]], "6": [[6, 5, 3, 2, 1, 0], [6, 5, 6, 5, 3, 2, 1, 0], [6, 5, 6, 5, 6, 5, 3, 2, 1, 0], [6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]], "7": [[7, 6, 5, 3, 2, 1, 0], [7, 6, 5, 6, 5, 3, 2, 1, 0], [7, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0], [7, 6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]], "8": [[8, 7, 6, 5, 6, 5, 6, 5, 6, 5, 3, 2, 1, 0]]}}
{"id": 7784, "code": "int N = 4, K = 3;\nint[] arr = {2, 3, 1, 4};\nSystem.out.println(-(-((N - 1) / (K - 1))));", "code_tokens": ["<0>", "int", "N", "=", "4", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "arr", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "(", "(", "N", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"], ["K", "3"]]}, {"line": 1, "state": [["N", "4"], ["K", "3"], ["arr", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["N", "4"], ["K", "3"], ["arr", "[ 2 , 3 , 1 , 4 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]]}}
{"id": 16586, "code": "String s = \"D D\";\nString[] t = s.split(\" \");\nif (t[0].equals(t[1])) {\nSystem.out.println(\"H\");\n} else {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "s", "=", "\"D D\"", ";", "<1>", "String", "[", "]", "t", "=", "s", ".", "split", "(", "\" \"", ")", ";", "<2>", "if", "(", "t", "[", "0", "]", ".", "equals", "(", "t", "[", "1", "]", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "D D"]]}, {"line": 1, "state": [["s", "D D"], ["t", "[ D , D ]"]]}, {"line": 2, "state": [["s", "D D"], ["t", "[ D , D ]"]]}, {"line": 3, "state": [["s", "D D"], ["t", "[ D , D ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 6037, "code": "int n = 5;\nSystem.out.println((int) Math.ceil(n / 2.0));", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "n", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 7079, "code": "int H = 10, N = 3;\nint[] a = {4, 5, 6};\nif (H > sum(a)) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "if", "(", "H", ">", "sum", "(", "a", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 5, "state": [["H", "10"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 164, "code": "String s = \"xyz\";\nint k = 4;\nint n = s.length();\nchar[] sArray = new char[n];for (int i = 0; i < n; i++) {sArray[i] = s.charAt(i);}\nint[] l = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\nfor (int i = 0; i < n; i++) {\nchar c = sArray[i];\nif (c == 'a') {\ncontinue;}\nif (l[c - 'a'] > k) {\ncontinue;}\nk -= l[c - 'a'];\nsArray[i] = 'a';}\nif (k > 0) {\nk = k % 26;\nchar c = sArray[n - 1];\nfor (int j = 0; j < 26; j++) {\nif (l[j] == l[c - 'a'] - k) {\nsArray[n - 1] = (char) ('a' + j);}}}\nString result = new String(sArray);\nSystem.out.println(result);", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<3>", "char", "[", "]", "sArray", "=", "new", "char", "[", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "sArray", "[", "i", "]", "=", "s", ".", "charAt", "(", "i", ")", ";", "}", "<4>", "int", "[", "]", "l", "=", "{", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "26", ",", "25", ",", "24", ",", "23", ",", "22", ",", "21", ",", "20", ",", "19", ",", "18", ",", "17", ",", "16", ",", "15", ",", "14", ",", "13", ",", "12", ",", "11", ",", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", "}", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "char", "c", "=", "sArray", "[", "i", "]", ";", "<7>", "if", "(", "c", "==", "'a'", ")", "{", "<8>", "continue", ";", "}", "<9>", "if", "(", "l", "[", "c", "-", "'a'", "]", ">", "k", ")", "{", "<10>", "continue", ";", "}", "<11>", "k", "-=", "l", "[", "c", "-", "'a'", "]", ";", "<12>", "sArray", "[", "i", "]", "=", "'a'", ";", "}", "<13>", "if", "(", "k", ">", "0", ")", "{", "<14>", "k", "=", "k", "%", "26", ";", "<15>", "char", "c", "=", "sArray", "[", "n", "-", "1", "]", ";", "<16>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "26", ";", "j", "++", ")", "{", "<17>", "if", "(", "l", "[", "j", "]", "==", "l", "[", "c", "-", "'a'", "]", "-", "k", ")", "{", "<18>", "sArray", "[", "n", "-", "1", "]", "=", "(", "char", ")", "(", "'a'", "+", "j", ")", ";", "}", "}", "}", "<19>", "String", "result", "=", "new", "String", "(", "sArray", ")", ";", "<20>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["k", "4"]]}, {"line": 2, "state": [["s", "xyz"], ["k", "4"], ["n", "3"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["i", "0"]]}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"]]}, {"line": 4, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["l", "{ a"]]}, {"line": 5, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["l", "{ a"], ["i", "0"]]}, {"line": 6, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["l", "{ a"], ["i", "0"], ["c", "x"]]}, {"line": 7, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["l", "{ a"], ["i", "0"], ["c", "x"]]}, {"line": 9, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["l", "{ a"], ["i", "0"], ["c", "x"]]}, {"line": 11, "state": [["s", "[ x , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "0"], ["c", "x"]]}, {"line": 12, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "0"], ["c", "x"]]}, {"line": 5, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "1"], ["c", "x"]]}, {"line": 6, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "1"], ["c", "y"]]}, {"line": 7, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "1"], ["c", "y"]]}, {"line": 9, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "1"], ["c", "y"]]}, {"line": 10, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "1"], ["c", "y"]]}, {"line": 5, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "y"]]}, {"line": 6, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 7, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 9, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 11, "state": [["s", "[ a , y , z ]"], ["k", "0"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 12, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 5, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 13, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 19, "state": [["s", "aya"], ["k", "0"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}, {"line": 20, "state": [["s", "aya"], ["k", "0"], ["n", "3"], ["l", "{ a"], ["i", "2"], ["c", "z"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0], [3, 2, 0]], "4": [[4]], "5": [[5, 3, 2, 0], [5, 12, 6, 5, 3, 2, 0], [5, 6, 5, 12, 6, 5, 3, 2, 0], [5, 12, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "6": [[6, 5, 3, 2, 0], [6, 5, 12, 6, 5, 3, 2, 0], [6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "7": [[7, 6, 5, 3, 2, 0], [7, 6, 5, 12, 6, 5, 3, 2, 0], [7, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "9": [[9, 7, 6, 5, 3, 2, 0], [9, 7, 6, 5, 12, 6, 5, 3, 2, 0], [9, 7, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "10": [[10]], "11": [[11, 9, 7, 6, 5, 3, 2, 0], [11, 9, 7, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "12": [[12, 6, 5, 3, 2, 0], [12, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "13": [[13, 11, 9, 7, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "19": [[19, 12, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]], "20": [[20, 19, 12, 6, 5, 6, 5, 12, 6, 5, 3, 2, 0]]}}
{"id": 9414, "code": "String S = \"2017/01/07\";\nSystem.out.println(S.replace(\"2017\", \"2018\"));", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "S", ".", "replace", "(", "\"2017\"", ",", "\"2018\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/07"]]}, {"line": 1, "state": [["S", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7604, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nif (H > sum(A)) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "H", ">", "sum", "(", "A", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 11994, "code": "int a = 11, b = 16;\nint c = 11, d = 17;\nSystem.out.println(new int[]{0, 1}[a == c - 1 ? 1 : 0]);", "code_tokens": ["<0>", "int", "a", "=", "11", ",", "b", "=", "16", ";", "<1>", "int", "c", "=", "11", ",", "d", "=", "17", ";", "<2>", "System", ".", "out", ".", "println", "(", "new", "int", "[", "]", "{", "0", ",", "1", "}", "[", "a", "==", "c", "-", "1", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "16"]]}, {"line": 1, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}, {"line": 2, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 16908, "code": "String a = \"H\"; String b = \"H\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nSystem.out.println(\"HD\".charAt(b.equals(\"H\") ? 0 : 1));}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"HD\"", ".", "charAt", "(", "b", ".", "equals", "(", "\"H\"", ")", "?", "0", ":", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 555, "code": "String s = \"a\";\nint k = 25;\nint n = s.length();\nStringBuilder ans = new StringBuilder();\nfor (int i = 0; i < n; i++) {\nif (s.charAt(i) == 'a') {\nans.append('a');}\nelse if (123 - s.charAt(i) <= k) {\nans.append('a');\nk -= 123 - s.charAt(i);}\nelse {\nans.append(s.charAt(i));}}\nk %= 26;\nchar lastChar = ans.charAt(ans.length() - 1);ans.setCharAt(ans.length() - 1, (char) ((lastChar + k - 'a') % 26 + 'a'));\nSystem.out.println(ans.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "k", "=", "25", ";", "<2>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<3>", "StringBuilder", "ans", "=", "new", "StringBuilder", "(", ")", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", ".", "charAt", "(", "i", ")", "==", "'a'", ")", "{", "<6>", "ans", ".", "append", "(", "'a'", ")", ";", "}", "<7>", "else", "if", "(", "123", "-", "s", ".", "charAt", "(", "i", ")", "<=", "k", ")", "{", "<8>", "ans", ".", "append", "(", "'a'", ")", ";", "<9>", "k", "-=", "123", "-", "s", ".", "charAt", "(", "i", ")", ";", "}", "<10>", "else", "{", "<11>", "ans", ".", "append", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "}", "}", "<12>", "k", "%=", "26", ";", "<13>", "char", "lastChar", "=", "ans", ".", "charAt", "(", "ans", ".", "length", "(", ")", "-", "1", ")", ";", "ans", ".", "setCharAt", "(", "ans", ".", "length", "(", ")", "-", "1", ",", "(", "char", ")", "(", "(", "lastChar", "+", "k", "-", "'a'", ")", "%", "26", "+", "'a'", ")", ")", ";", "<14>", "System", ".", "out", ".", "println", "(", "ans", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["k", "25"]]}, {"line": 2, "state": [["s", "a"], ["k", "25"], ["n", "1"]]}, {"line": 3, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ ]"]]}, {"line": 4, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ ]"], ["i", "0"]]}, {"line": 5, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ ]"], ["i", "0"]]}, {"line": 6, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ a ]"], ["i", "0"]]}, {"line": 4, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ a ]"], ["i", "0"]]}, {"line": 12, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ a ]"], ["i", "0"]]}, {"line": 13, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ z ]"], ["i", "0"]]}, {"line": 14, "state": [["s", "a"], ["k", "25"], ["n", "1"], ["ans", "[ z ]"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4, 2, 0], [4, 5, 4, 2, 0]], "5": [[5, 4, 2, 0]], "6": [[6, 3]], "12": [[12, 1]], "13": [[13, 12, 1]], "14": [[14, 13, 12, 1]]}}
{"id": 15407, "code": "String a = \"100000\"; String b = \"1\"; String c = \"1\";\na = Integer.parseInt(a);\nb = Integer.parseInt(b);\nc = Integer.parseInt(c);\nSystem.out.println((a - c) / (b + c));", "code_tokens": ["<0>", "String", "a", "=", "\"100000\"", ";", "String", "b", "=", "\"1\"", ";", "String", "c", "=", "\"1\"", ";", "<1>", "a", "=", "Integer", ".", "parseInt", "(", "a", ")", ";", "<2>", "b", "=", "Integer", ".", "parseInt", "(", "b", ")", ";", "<3>", "c", "=", "Integer", ".", "parseInt", "(", "c", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "c", ")", "/", "(", "b", "+", "c", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "100000"], ["b", "1"], ["c", "1"]]}, {"line": 1, "state": [["a", "100000"], ["b", "1"], ["c", "1"]]}, {"line": 2, "state": [["a", "100000"], ["b", "1"], ["c", "1"]]}, {"line": 3, "state": [["a", "100000"], ["b", "1"], ["c", "1"]]}, {"line": 4, "state": [["a", "100000"], ["b", "1"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 12171, "code": "String a = \"11\"; String b = \"16\";\nString c = \"11\"; String d = \"17\";\nif (a.equals(c)) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(1);}", "code_tokens": ["<0>", "String", "a", "=", "\"11\"", ";", "String", "b", "=", "\"16\"", ";", "<1>", "String", "c", "=", "\"11\"", ";", "String", "d", "=", "\"17\"", ";", "<2>", "if", "(", "a", ".", "equals", "(", "c", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "16"]]}, {"line": 1, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}, {"line": 2, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}, {"line": 3, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 17004, "code": "char[] n = {'H', 'H'};\nchar a = n[0];\nchar b = n[1];\nif (a == 'H') {\nif (b == 'H') {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}}\nelse {\nif (b == 'H') {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "char", "[", "]", "n", "=", "{", "'H'", ",", "'H'", "}", ";", "<1>", "char", "a", "=", "n", "[", "0", "]", ";", "<2>", "char", "b", "=", "n", "[", "1", "]", ";", "<3>", "if", "(", "a", "==", "'H'", ")", "{", "<4>", "if", "(", "b", "==", "'H'", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "}", "<8>", "else", "{", "<9>", "if", "(", "b", "==", "'H'", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "[ H , H ]"]]}, {"line": 1, "state": [["n", "[ H , H ]"], ["a", "H"]]}, {"line": 2, "state": [["n", "[ H , H ]"], ["a", "H"], ["b", "H"]]}, {"line": 3, "state": [["n", "[ H , H ]"], ["a", "H"], ["b", "H"]]}, {"line": 4, "state": [["n", "[ H , H ]"], ["a", "H"], ["b", "H"]]}, {"line": 5, "state": [["n", "[ H , H ]"], ["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5]]}}
{"id": 7773, "code": "int k = 3, n = 3;\nString a = \"1 2 3\";\nint i = 0;\nwhile (true) {\nif (k <= n + (n - 1) * i) {System.out.println(i + 1);break;}\ni += 1;}", "code_tokens": ["<0>", "int", "k", "=", "3", ",", "n", "=", "3", ";", "<1>", "String", "a", "=", "\"1 2 3\"", ";", "<2>", "int", "i", "=", "0", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "if", "(", "k", "<=", "n", "+", "(", "n", "-", "1", ")", "*", "i", ")", "{", "System", ".", "out", ".", "println", "(", "i", "+", "1", ")", ";", "break", ";", "}", "<5>", "i", "+=", "1", ";", "}"], "trace": [{"line": 0, "state": [["k", "3"], ["n", "3"]]}, {"line": 1, "state": [["k", "3"], ["n", "3"], ["a", "1 2 3"]]}, {"line": 2, "state": [["k", "3"], ["n", "3"], ["a", "1 2 3"], ["i", "0"]]}, {"line": 3, "state": [["k", "3"], ["n", "3"], ["a", "1 2 3"], ["i", "0"]]}, {"line": 4, "state": [["k", "3"], ["n", "3"], ["a", "1 2 3"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2, 0]]}}
{"id": 8378, "code": "int n = 7;\nint[] x = {3, 3, 4, 5, 4, 5, 3};\nint[] y = {5, 3, 4, 4, 2, 3, 2};\nint mx = 0;\nfor (int i = 0; i < n; i++) {\nint ans = sumArray(x, i + 1) + sumArray(y, n - i);\nif (ans > mx) {\nmx = ans;}}\nSystem.out.println(mx);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "x", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "y", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "mx", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "ans", "=", "sumArray", "(", "x", ",", "i", "+", "1", ")", "+", "sumArray", "(", "y", ",", "n", "-", "i", ")", ";", "<6>", "if", "(", "ans", ">", "mx", ")", "{", "<7>", "mx", "=", "ans", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "mx", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "0"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "0"], ["i", "0"], ["ans", "26"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "0"], ["i", "0"], ["ans", "26"]]}, {"line": 7, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "0"], ["ans", "26"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "1"], ["ans", "26"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "1"], ["ans", "24"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "1"], ["ans", "24"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "2"], ["ans", "24"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "2"], ["ans", "25"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "2"], ["ans", "25"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "3"], ["ans", "25"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "3"], ["ans", "26"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "3"], ["ans", "26"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "4"], ["ans", "26"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "4"], ["ans", "26"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "4"], ["ans", "26"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "5"], ["ans", "26"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "5"], ["ans", "29"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "26"], ["i", "5"], ["ans", "29"]]}, {"line": 7, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "29"], ["i", "5"], ["ans", "29"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "29"], ["i", "6"], ["ans", "29"]]}, {"line": 5, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "29"], ["i", "6"], ["ans", "29"]]}, {"line": 6, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "29"], ["i", "6"], ["ans", "29"]]}, {"line": 4, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "29"], ["i", "6"], ["ans", "29"]]}, {"line": 8, "state": [["n", "7"], ["x", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["y", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["mx", "29"], ["i", "6"], ["ans", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 4338, "code": "int h1 = 10, m1 = 0, h2 = 12, m2 = 0, k = 120;\nint t = (h2 - h1) * 60 + m2 - m1 - k;\nSystem.out.println(t >= 0 ? t : 0);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "12", ",", "m2", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "t", "=", "(", "h2", "-", "h1", ")", "*", "60", "+", "m2", "-", "m1", "-", "k", ";", "<2>", "System", ".", "out", ".", "println", "(", "t", ">=", "0", "?", "t", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["t", "0"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["t", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1533, "code": "int N = 112;\nfor (int i = N; i < 1000; i++) {\nif (i == 111 || i == 222 || i == 333 || i == 444 || i == 555 || i == 666 || i == 777 || i == 888 || i == 999) {\nSystem.out.println(i);\nbreak;}}", "code_tokens": ["<0>", "int", "N", "=", "112", ";", "<1>", "for", "(", "int", "i", "=", "N", ";", "i", "<", "1000", ";", "i", "++", ")", "{", "<2>", "if", "(", "i", "==", "111", "||", "i", "==", "222", "||", "i", "==", "333", "||", "i", "==", "444", "||", "i", "==", "555", "||", "i", "==", "666", "||", "i", "==", "777", "||", "i", "==", "888", "||", "i", "==", "999", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<4>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["N", "112"]]}, {"line": 1, "state": [["N", "112"], ["i", "112"]]}, {"line": 2, "state": [["N", "112"], ["i", "112"]]}, {"line": 1, "state": [["N", "112"], ["i", "113"]]}, {"line": 2, "state": [["N", "112"], ["i", "113"]]}, {"line": 1, "state": [["N", "112"], ["i", "114"]]}, {"line": 2, "state": [["N", "112"], ["i", "114"]]}, {"line": 1, "state": [["N", "112"], ["i", "115"]]}, {"line": 2, "state": [["N", "112"], ["i", "115"]]}, {"line": 1, "state": [["N", "112"], ["i", "116"]]}, {"line": 2, "state": [["N", "112"], ["i", "116"]]}, {"line": 1, "state": [["N", "112"], ["i", "117"]]}, {"line": 2, "state": [["N", "112"], ["i", "117"]]}, {"line": 1, "state": [["N", "112"], ["i", "118"]]}, {"line": 2, "state": [["N", "112"], ["i", "118"]]}, {"line": 1, "state": [["N", "112"], ["i", "119"]]}, {"line": 2, "state": [["N", "112"], ["i", "119"]]}, {"line": 1, "state": [["N", "112"], ["i", "120"]]}, {"line": 2, "state": [["N", "112"], ["i", "120"]]}, {"line": 1, "state": [["N", "112"], ["i", "121"]]}, {"line": 2, "state": [["N", "112"], ["i", "121"]]}, {"line": 1, "state": [["N", "112"], ["i", "122"]]}, {"line": 2, "state": [["N", "112"], ["i", "122"]]}, {"line": 1, "state": [["N", "112"], ["i", "123"]]}, {"line": 2, "state": [["N", "112"], ["i", "123"]]}, {"line": 1, "state": [["N", "112"], ["i", "124"]]}, {"line": 2, "state": [["N", "112"], ["i", "124"]]}, {"line": 1, "state": [["N", "112"], ["i", "125"]]}, {"line": 2, "state": [["N", "112"], ["i", "125"]]}, {"line": 1, "state": [["N", "112"], ["i", "126"]]}, {"line": 2, "state": [["N", "112"], ["i", "126"]]}, {"line": 1, "state": [["N", "112"], ["i", "127"]]}, {"line": 2, "state": [["N", "112"], ["i", "127"]]}, {"line": 1, "state": [["N", "112"], ["i", "128"]]}, {"line": 2, "state": [["N", "112"], ["i", "128"]]}, {"line": 1, "state": [["N", "112"], ["i", "129"]]}, {"line": 2, "state": [["N", "112"], ["i", "129"]]}, {"line": 1, "state": [["N", "112"], ["i", "130"]]}, {"line": 2, "state": [["N", "112"], ["i", "130"]]}, {"line": 1, "state": [["N", "112"], ["i", "131"]]}, {"line": 2, "state": [["N", "112"], ["i", "131"]]}, {"line": 1, "state": [["N", "112"], ["i", "132"]]}, {"line": 2, "state": [["N", "112"], ["i", "132"]]}, {"line": 1, "state": [["N", "112"], ["i", "133"]]}, {"line": 2, "state": [["N", "112"], ["i", "133"]]}, {"line": 1, "state": [["N", "112"], ["i", "134"]]}, {"line": 2, "state": [["N", "112"], ["i", "134"]]}, {"line": 1, "state": [["N", "112"], ["i", "135"]]}, {"line": 2, "state": [["N", "112"], ["i", "135"]]}, {"line": 1, "state": [["N", "112"], ["i", "136"]]}, {"line": 2, "state": [["N", "112"], ["i", "136"]]}, {"line": 1, "state": [["N", "112"], ["i", "137"]]}, {"line": 2, "state": [["N", "112"], ["i", "137"]]}, {"line": 1, "state": [["N", "112"], ["i", "138"]]}, {"line": 2, "state": [["N", "112"], ["i", "138"]]}, {"line": 1, "state": [["N", "112"], ["i", "139"]]}, {"line": 2, "state": [["N", "112"], ["i", "139"]]}, {"line": 1, "state": [["N", "112"], ["i", "140"]]}, {"line": 2, "state": [["N", "112"], ["i", "140"]]}, {"line": 1, "state": [["N", "112"], ["i", "141"]]}, {"line": 2, "state": [["N", "112"], ["i", "141"]]}, {"line": 1, "state": [["N", "112"], ["i", "142"]]}, {"line": 2, "state": [["N", "112"], ["i", "142"]]}, {"line": 1, "state": [["N", "112"], ["i", "143"]]}, {"line": 2, "state": [["N", "112"], ["i", "143"]]}, {"line": 1, "state": [["N", "112"], ["i", "144"]]}, {"line": 2, "state": [["N", "112"], ["i", "144"]]}, {"line": 1, "state": [["N", "112"], ["i", "145"]]}, {"line": 2, "state": [["N", "112"], ["i", "145"]]}, {"line": 1, "state": [["N", "112"], ["i", "146"]]}, {"line": 2, "state": [["N", "112"], ["i", "146"]]}, {"line": 1, "state": [["N", "112"], ["i", "147"]]}, {"line": 2, "state": [["N", "112"], ["i", "147"]]}, {"line": 1, "state": [["N", "112"], ["i", "148"]]}, {"line": 2, "state": [["N", "112"], ["i", "148"]]}, {"line": 1, "state": [["N", "112"], ["i", "149"]]}, {"line": 2, "state": [["N", "112"], ["i", "149"]]}, {"line": 1, "state": [["N", "112"], ["i", "150"]]}, {"line": 2, "state": [["N", "112"], ["i", "150"]]}, {"line": 1, "state": [["N", "112"], ["i", "151"]]}, {"line": 2, "state": [["N", "112"], ["i", "151"]]}, {"line": 1, "state": [["N", "112"], ["i", "152"]]}, {"line": 2, "state": [["N", "112"], ["i", "152"]]}, {"line": 1, "state": [["N", "112"], ["i", "153"]]}, {"line": 2, "state": [["N", "112"], ["i", "153"]]}, {"line": 1, "state": [["N", "112"], ["i", "154"]]}, {"line": 2, "state": [["N", "112"], ["i", "154"]]}, {"line": 1, "state": [["N", "112"], ["i", "155"]]}, {"line": 2, "state": [["N", "112"], ["i", "155"]]}, {"line": 1, "state": [["N", "112"], ["i", "156"]]}, {"line": 2, "state": [["N", "112"], ["i", "156"]]}, {"line": 1, "state": [["N", "112"], ["i", "157"]]}, {"line": 2, "state": [["N", "112"], ["i", "157"]]}, {"line": 1, "state": [["N", "112"], ["i", "158"]]}, {"line": 2, "state": [["N", "112"], ["i", "158"]]}, {"line": 1, "state": [["N", "112"], ["i", "159"]]}, {"line": 2, "state": [["N", "112"], ["i", "159"]]}, {"line": 1, "state": [["N", "112"], ["i", "160"]]}, {"line": 2, "state": [["N", "112"], ["i", "160"]]}, {"line": 1, "state": [["N", "112"], ["i", "161"]]}, {"line": 2, "state": [["N", "112"], ["i", "161"]]}, {"line": 1, "state": [["N", "112"], ["i", "162"]]}, {"line": 2, "state": [["N", "112"], ["i", "162"]]}, {"line": 1, "state": [["N", "112"], ["i", "163"]]}, {"line": 2, "state": [["N", "112"], ["i", "163"]]}, {"line": 1, "state": [["N", "112"], ["i", "164"]]}, {"line": 2, "state": [["N", "112"], ["i", "164"]]}, {"line": 1, "state": [["N", "112"], ["i", "165"]]}, {"line": 2, "state": [["N", "112"], ["i", "165"]]}, {"line": 1, "state": [["N", "112"], ["i", "166"]]}, {"line": 2, "state": [["N", "112"], ["i", "166"]]}, {"line": 1, "state": [["N", "112"], ["i", "167"]]}, {"line": 2, "state": [["N", "112"], ["i", "167"]]}, {"line": 1, "state": [["N", "112"], ["i", "168"]]}, {"line": 2, "state": [["N", "112"], ["i", "168"]]}, {"line": 1, "state": [["N", "112"], ["i", "169"]]}, {"line": 2, "state": [["N", "112"], ["i", "169"]]}, {"line": 1, "state": [["N", "112"], ["i", "170"]]}, {"line": 2, "state": [["N", "112"], ["i", "170"]]}, {"line": 1, "state": [["N", "112"], ["i", "171"]]}, {"line": 2, "state": [["N", "112"], ["i", "171"]]}, {"line": 1, "state": [["N", "112"], ["i", "172"]]}, {"line": 2, "state": [["N", "112"], ["i", "172"]]}, {"line": 1, "state": [["N", "112"], ["i", "173"]]}, {"line": 2, "state": [["N", "112"], ["i", "173"]]}, {"line": 1, "state": [["N", "112"], ["i", "174"]]}, {"line": 2, "state": [["N", "112"], ["i", "174"]]}, {"line": 1, "state": [["N", "112"], ["i", "175"]]}, {"line": 2, "state": [["N", "112"], ["i", "175"]]}, {"line": 1, "state": [["N", "112"], ["i", "176"]]}, {"line": 2, "state": [["N", "112"], ["i", "176"]]}, {"line": 1, "state": [["N", "112"], ["i", "177"]]}, {"line": 2, "state": [["N", "112"], ["i", "177"]]}, {"line": 1, "state": [["N", "112"], ["i", "178"]]}, {"line": 2, "state": [["N", "112"], ["i", "178"]]}, {"line": 1, "state": [["N", "112"], ["i", "179"]]}, {"line": 2, "state": [["N", "112"], ["i", "179"]]}, {"line": 1, "state": [["N", "112"], ["i", "180"]]}, {"line": 2, "state": [["N", "112"], ["i", "180"]]}, {"line": 1, "state": [["N", "112"], ["i", "181"]]}, {"line": 2, "state": [["N", "112"], ["i", "181"]]}, {"line": 1, "state": [["N", "112"], ["i", "182"]]}, {"line": 2, "state": [["N", "112"], ["i", "182"]]}, {"line": 1, "state": [["N", "112"], ["i", "183"]]}, {"line": 2, "state": [["N", "112"], ["i", "183"]]}, {"line": 1, "state": [["N", "112"], ["i", "184"]]}, {"line": 2, "state": [["N", "112"], ["i", "184"]]}, {"line": 1, "state": [["N", "112"], ["i", "185"]]}, {"line": 2, "state": [["N", "112"], ["i", "185"]]}, {"line": 1, "state": [["N", "112"], ["i", "186"]]}, {"line": 2, "state": [["N", "112"], ["i", "186"]]}, {"line": 1, "state": [["N", "112"], ["i", "187"]]}, {"line": 2, "state": [["N", "112"], ["i", "187"]]}, {"line": 1, "state": [["N", "112"], ["i", "188"]]}, {"line": 2, "state": [["N", "112"], ["i", "188"]]}, {"line": 1, "state": [["N", "112"], ["i", "189"]]}, {"line": 2, "state": [["N", "112"], ["i", "189"]]}, {"line": 1, "state": [["N", "112"], ["i", "190"]]}, {"line": 2, "state": [["N", "112"], ["i", "190"]]}, {"line": 1, "state": [["N", "112"], ["i", "191"]]}, {"line": 2, "state": [["N", "112"], ["i", "191"]]}, {"line": 1, "state": [["N", "112"], ["i", "192"]]}, {"line": 2, "state": [["N", "112"], ["i", "192"]]}, {"line": 1, "state": [["N", "112"], ["i", "193"]]}, {"line": 2, "state": [["N", "112"], ["i", "193"]]}, {"line": 1, "state": [["N", "112"], ["i", "194"]]}, {"line": 2, "state": [["N", "112"], ["i", "194"]]}, {"line": 1, "state": [["N", "112"], ["i", "195"]]}, {"line": 2, "state": [["N", "112"], ["i", "195"]]}, {"line": 1, "state": [["N", "112"], ["i", "196"]]}, {"line": 2, "state": [["N", "112"], ["i", "196"]]}, {"line": 1, "state": [["N", "112"], ["i", "197"]]}, {"line": 2, "state": [["N", "112"], ["i", "197"]]}, {"line": 1, "state": [["N", "112"], ["i", "198"]]}, {"line": 2, "state": [["N", "112"], ["i", "198"]]}, {"line": 1, "state": [["N", "112"], ["i", "199"]]}, {"line": 2, "state": [["N", "112"], ["i", "199"]]}, {"line": 1, "state": [["N", "112"], ["i", "200"]]}, {"line": 2, "state": [["N", "112"], ["i", "200"]]}, {"line": 1, "state": [["N", "112"], ["i", "201"]]}, {"line": 2, "state": [["N", "112"], ["i", "201"]]}, {"line": 1, "state": [["N", "112"], ["i", "202"]]}, {"line": 2, "state": [["N", "112"], ["i", "202"]]}, {"line": 1, "state": [["N", "112"], ["i", "203"]]}, {"line": 2, "state": [["N", "112"], ["i", "203"]]}, {"line": 1, "state": [["N", "112"], ["i", "204"]]}, {"line": 2, "state": [["N", "112"], ["i", "204"]]}, {"line": 1, "state": [["N", "112"], ["i", "205"]]}, {"line": 2, "state": [["N", "112"], ["i", "205"]]}, {"line": 1, "state": [["N", "112"], ["i", "206"]]}, {"line": 2, "state": [["N", "112"], ["i", "206"]]}, {"line": 1, "state": [["N", "112"], ["i", "207"]]}, {"line": 2, "state": [["N", "112"], ["i", "207"]]}, {"line": 1, "state": [["N", "112"], ["i", "208"]]}, {"line": 2, "state": [["N", "112"], ["i", "208"]]}, {"line": 1, "state": [["N", "112"], ["i", "209"]]}, {"line": 2, "state": [["N", "112"], ["i", "209"]]}, {"line": 1, "state": [["N", "112"], ["i", "210"]]}, {"line": 2, "state": [["N", "112"], ["i", "210"]]}, {"line": 1, "state": [["N", "112"], ["i", "211"]]}, {"line": 2, "state": [["N", "112"], ["i", "211"]]}, {"line": 1, "state": [["N", "112"], ["i", "212"]]}, {"line": 2, "state": [["N", "112"], ["i", "212"]]}, {"line": 1, "state": [["N", "112"], ["i", "213"]]}, {"line": 2, "state": [["N", "112"], ["i", "213"]]}, {"line": 1, "state": [["N", "112"], ["i", "214"]]}, {"line": 2, "state": [["N", "112"], ["i", "214"]]}, {"line": 1, "state": [["N", "112"], ["i", "215"]]}, {"line": 2, "state": [["N", "112"], ["i", "215"]]}, {"line": 1, "state": [["N", "112"], ["i", "216"]]}, {"line": 2, "state": [["N", "112"], ["i", "216"]]}, {"line": 1, "state": [["N", "112"], ["i", "217"]]}, {"line": 2, "state": [["N", "112"], ["i", "217"]]}, {"line": 1, "state": [["N", "112"], ["i", "218"]]}, {"line": 2, "state": [["N", "112"], ["i", "218"]]}, {"line": 1, "state": [["N", "112"], ["i", "219"]]}, {"line": 2, "state": [["N", "112"], ["i", "219"]]}, {"line": 1, "state": [["N", "112"], ["i", "220"]]}, {"line": 2, "state": [["N", "112"], ["i", "220"]]}, {"line": 1, "state": [["N", "112"], ["i", "221"]]}, {"line": 2, "state": [["N", "112"], ["i", "221"]]}, {"line": 1, "state": [["N", "112"], ["i", "222"]]}, {"line": 2, "state": [["N", "112"], ["i", "222"]]}, {"line": 3, "state": [["N", "112"], ["i", "222"]]}, {"line": 4, "state": [["N", "112"], ["i", "222"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "2": [[2, 1, 0], [2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "3": [[3, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "4": [[4]]}}
{"id": 8282, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nint divide_number = K - 1;\nint other_number = N - 1;\nint answer = 0;\nanswer = other_number / divide_number;\nif (other_number % divide_number != 0) {\nanswer += 1;}\nSystem.out.println(answer);", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "int", "divide_number", "=", "K", "-", "1", ";", "<3>", "int", "other_number", "=", "N", "-", "1", ";", "<4>", "int", "answer", "=", "0", ";", "<5>", "answer", "=", "other_number", "/", "divide_number", ";", "<6>", "if", "(", "other_number", "%", "divide_number", "!=", "0", ")", "{", "<7>", "answer", "+=", "1", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "answer", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"], ["K", "3"]]}, {"line": 1, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["divide_number", "2"]]}, {"line": 3, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["divide_number", "2"], ["other_number", "2"]]}, {"line": 4, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["divide_number", "2"], ["other_number", "2"], ["answer", "0"]]}, {"line": 5, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["divide_number", "2"], ["other_number", "2"], ["answer", "1"]]}, {"line": 6, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["divide_number", "2"], ["other_number", "2"], ["answer", "1"]]}, {"line": 8, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"], ["divide_number", "2"], ["other_number", "2"], ["answer", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 0]], "4": [[4]], "5": [[5, 4, 3, 0]], "6": [[6, 5, 4, 3, 0]], "8": [[8, 5, 4, 3, 0]]}}
{"id": 9221, "code": "String S = \"2017/01/31\";\nString[] S_array = S.split(\"/\");\nSystem.out.println(\"2018/\" + S_array[1] + \"/\" + S_array[2]);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "String", "[", "]", "S_array", "=", "S", ".", "split", "(", "\"/\"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "\"2018/\"", "+", "S_array", "[", "1", "]", "+", "\"/\"", "+", "S_array", "[", "2", "]", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2017/01/31"], ["S_array", "[ 2017 , 01 , 31 ]"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["S_array", "[ 2017 , 01 , 31 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11372, "code": "String s = \"SAT\";\nString[] d = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"a\"};\njava.util.Collections.reverse(java.util.List.of(d));\nSystem.out.println(java.util.Arrays.asList(d).indexOf(s));", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "d", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ",", "\"a\"", "}", ";", "<2>", "java", ".", "util", ".", "Collections", ".", "reverse", "(", "java", ".", "util", ".", "List", ".", "of", "(", "d", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "d", ")", ".", "indexOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["d", "[ SUN , MON , TUE , WED , THU , FRI , SAT , a ]"]]}, {"line": 2, "state": [["s", "SAT"], ["d", "[ a , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 3, "state": [["s", "SAT"], ["d", "[ a , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 6685, "code": "int H = 210, M = 5;\nint[] A = {31, 41, 59, 26, 53};\nint a = 0;for (int num : A) {a += num;}\nString ans;if (a >= H) {\nans = \"Yes\";\n} else {\nans = \"No\";}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "210", ",", "M", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "a", "=", "0", ";", "for", "(", "int", "num", ":", "A", ")", "{", "a", "+=", "num", ";", "}", "<3>", "String", "ans", ";", "if", "(", "a", ">=", "H", ")", "{", "<4>", "ans", "=", "\"Yes\"", ";", "<5>", "}", "else", "{", "<6>", "ans", "=", "\"No\"", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "210"], ["M", "5"]]}, {"line": 1, "state": [["H", "210"], ["M", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "210"], ["M", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "210"]]}, {"line": 3, "state": [["H", "210"], ["M", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "210"]]}, {"line": 4, "state": [["H", "210"], ["M", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "210"], ["ans", "Yes"]]}, {"line": 7, "state": [["H", "210"], ["M", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["a", "210"], ["ans", "Yes"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "7": [[7, 4]]}}
{"id": 8127, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nif (N == K) {\nSystem.out.println('1');}\nelse {\nSystem.out.println(Math.ceil((double)(N - 1) / (K - 1)));}", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "if", "(", "N", "==", "K", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "'1'", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "Math", ".", "ceil", "(", "(", "double", ")", "(", "N", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"], ["K", "3"]]}, {"line": 2, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 4, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4]]}}
{"id": 8264, "code": "int n = 3, k = 3;\nint[] a = {1, 2, 3};\nint ans = 1;\nn -= k;\nk -= 1;\nif (n % k == 0) {\nans += n / k;}\nelse {\nans += n / k + 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "n", "-=", "k", ";", "<4>", "k", "-=", "1", ";", "<5>", "if", "(", "n", "%", "k", "==", "0", ")", "{", "<6>", "ans", "+=", "n", "/", "k", ";", "}", "<7>", "else", "{", "<8>", "ans", "+=", "n", "/", "k", "+", "1", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "0"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 4, "state": [["n", "0"], ["k", "2"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 5, "state": [["n", "0"], ["k", "2"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 6, "state": [["n", "0"], ["k", "2"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 9, "state": [["n", "0"], ["k", "2"], ["a", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]], "5": [[5, 4, 3, 0]], "6": [[6, 5, 4, 3, 0]], "9": [[9, 6, 5, 4, 3, 0]]}}
{"id": 1578, "code": "int n = 112;\nif (111 * (n / 100) >= n) {\nSystem.out.println(111 * (n / 100));}\nelse {\nSystem.out.println(111 * (n / 100 + 1));}", "code_tokens": ["<0>", "int", "n", "=", "112", ";", "<1>", "if", "(", "111", "*", "(", "n", "/", "100", ")", ">=", "n", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "111", "*", "(", "n", "/", "100", ")", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "111", "*", "(", "n", "/", "100", "+", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "112"]]}, {"line": 1, "state": [["n", "112"]]}, {"line": 4, "state": [["n", "112"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 4471, "code": "String a = \"internationalization\";\nSystem.out.println(a.charAt(0) + String.valueOf(a.length() - 2) + a.charAt(a.length() - 1));", "code_tokens": ["<0>", "String", "a", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "a", ".", "length", "(", ")", "-", "2", ")", "+", "a", ".", "charAt", "(", "a", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "internationalization"]]}, {"line": 2, "state": [["a", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 15607, "code": "int X = 12, Y = 3, Z = 1;\nint ans = (X - Z) / (Y + Z);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "ans", "=", "(", "X", "-", "Z", ")", "/", "(", "Y", "+", "Z", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3313, "code": "int a = 12, b = 4;\nSystem.out.println((a - 2 * b >= 0) ? (a - 2 * b) : 0);", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "2", "*", "b", ">=", "0", ")", "?", "(", "a", "-", "2", "*", "b", ")", ":", "0", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "12"], ["b", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 15381, "code": "int x = 13, y = 3, z = 1;\nint ret = (x - z) / (y + z);\nSystem.out.println(ret);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "ret", "=", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ret", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["ret", "3"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["ret", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 7647, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nfor (int i = 0; i < n; i++) {\nh -= a[i];}\nSystem.out.println(h <= 0 ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<3>", "h", "-=", "a", "[", "i", "]", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "h", "<=", "0", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 3, "state": [["h", "179"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 2, "state": [["h", "179"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 3, "state": [["h", "138"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 2, "state": [["h", "138"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 3, "state": [["h", "79"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 2, "state": [["h", "79"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 3, "state": [["h", "53"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 2, "state": [["h", "53"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 3, "state": [["h", "0"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 2, "state": [["h", "0"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 4, "state": [["h", "0"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 4778, "code": "String S = \"smiles\";\nchar I = S.charAt(0);\nchar B = S.charAt(S.length() - 1);\nString figure = Integer.toString(S.length() - 2);\nSystem.out.println(I + figure + B);", "code_tokens": ["<0>", "String", "S", "=", "\"smiles\"", ";", "<1>", "char", "I", "=", "S", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "B", "=", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "String", "figure", "=", "Integer", ".", "toString", "(", "S", ".", "length", "(", ")", "-", "2", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "I", "+", "figure", "+", "B", ")", ";"], "trace": [{"line": 0, "state": [["S", "smiles"]]}, {"line": 1, "state": [["S", "smiles"], ["I", "s"]]}, {"line": 2, "state": [["S", "smiles"], ["I", "s"], ["B", "s"]]}, {"line": 3, "state": [["S", "smiles"], ["I", "s"], ["B", "s"], ["figure", "4"]]}, {"line": 4, "state": [["S", "smiles"], ["I", "s"], ["B", "s"], ["figure", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 3278, "code": "int A = 20, B = 30;\nint j = A - 2 * B;\nif (j > 0) {\nSystem.out.println(j);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "int", "j", "=", "A", "-", "2", "*", "B", ";", "<2>", "if", "(", "j", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "j", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"], ["j", "-40"]]}, {"line": 2, "state": [["A", "20"], ["B", "30"], ["j", "-40"]]}, {"line": 5, "state": [["A", "20"], ["B", "30"], ["j", "-40"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 3041, "code": "String s = \"1111111111\";double m = Double.POSITIVE_INFINITY;\nfor (int i = 0; i < s.length() - 2; i++) {m = Math.min(m, Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753));}\nSystem.out.println(m);", "code_tokens": ["<0>", "String", "s", "=", "\"1111111111\"", ";", "double", "m", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<1>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "m", "=", "Math", ".", "min", "(", "m", ",", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ")", ";", "}", "<2>", "System", ".", "out", ".", "println", "(", "m", ")", ";"], "trace": [{"line": 0, "state": [["s", "1111111111"], ["m", "inf"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "0"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "1"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "2"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "3"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "4"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "5"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "6"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "7"]]}, {"line": 1, "state": [["s", "1111111111"], ["m", "642"], ["i", "7"]]}, {"line": 2, "state": [["s", "1111111111"], ["m", "642"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], "2": [[2, 1, 0]]}}
{"id": 1891, "code": "int n = 10, a = 3, b = 5;\nSystem.out.println(String.format(\"%d %d\", Math.min(a, b), Math.max(a + b - n, 0)));", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "Math", ".", "min", "(", "a", ",", "b", ")", ",", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11329, "code": "System.out.println(java.util.Arrays.asList(\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\").subList(0, 7).new ArrayList<>(java.util.Arrays.asList(\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\")).reverse().indexOf(\"SUN\") + 1);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ")", ".", "subList", "(", "0", ",", "7", ")", ".", "new", "ArrayList", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ")", ")", ".", "reverse", "(", ")", ".", "indexOf", "(", "\"SUN\"", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 6451, "code": "Scanner input = new Scanner(System.in);\nint num = 0;\nint n = 3;\nint[] top = {1, 1, 1};\nint[] mid = {2, 2, 2};\nint[] und = {3, 3, 3};\nArrays.sort(top);\nArrays.sort(mid);\nArrays.sort(und);\nfor (int i : mid) {\nint a = bisectLeft(top, i);\nint c = n - bisectRight(und, i);\nnum += a * c;}\nSystem.out.println(num);", "code_tokens": ["<0>", "Scanner", "input", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "num", "=", "0", ";", "<2>", "int", "n", "=", "3", ";", "<3>", "int", "[", "]", "top", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<4>", "int", "[", "]", "mid", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<5>", "int", "[", "]", "und", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<6>", "Arrays", ".", "sort", "(", "top", ")", ";", "<7>", "Arrays", ".", "sort", "(", "mid", ")", ";", "<8>", "Arrays", ".", "sort", "(", "und", ")", ";", "<9>", "for", "(", "int", "i", ":", "mid", ")", "{", "<10>", "int", "a", "=", "bisectLeft", "(", "top", ",", "i", ")", ";", "<11>", "int", "c", "=", "n", "-", "bisectRight", "(", "und", ",", "i", ")", ";", "<12>", "num", "+=", "a", "*", "c", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "num", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["num", "0"]]}, {"line": 4, "state": [["num", "0"], ["n", "3"]]}, {"line": 5, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"]]}, {"line": 6, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"]]}, {"line": 7, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"]]}, {"line": 9, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"]]}, {"line": 10, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"]]}, {"line": 11, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"]]}, {"line": 12, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"]]}, {"line": 13, "state": [["num", "0"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 14, "state": [["num", "9"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 11, "state": [["num", "9"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 12, "state": [["num", "9"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 13, "state": [["num", "9"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 14, "state": [["num", "18"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 11, "state": [["num", "18"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 12, "state": [["num", "18"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 13, "state": [["num", "18"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 14, "state": [["num", "27"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 11, "state": [["num", "27"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}, {"line": 15, "state": [["num", "27"], ["n", "3"], ["top", "[ 1 , 1 , 1 ]"], ["mid", "[ 2 , 2 , 2 ]"], ["und", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["c", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8, 5]], "9": [[9, 6]], "10": [[10, 7]], "11": [[11, 9, 6], [11, 13, 12, 11, 9, 6], [11, 13, 12, 11, 13, 12, 11, 9, 6], [11, 13, 12, 11, 13, 12, 11, 13, 12, 11, 9, 6]], "12": [[12, 11, 9, 6], [12, 11, 13, 12, 11, 9, 6], [12, 11, 13, 12, 11, 13, 12, 11, 9, 6]], "13": [[13, 12, 11, 9, 6], [13, 12, 11, 13, 12, 11, 9, 6], [13, 12, 11, 13, 12, 11, 13, 12, 11, 9, 6]], "14": [[14, 13, 12, 11, 9, 6], [14, 13, 12, 11, 13, 12, 11, 9, 6], [14, 13, 12, 11, 13, 12, 11, 13, 12, 11, 9, 6]], "15": [[15, 14, 13, 12, 11, 13, 12, 11, 13, 12, 11, 9, 6]]}}
{"id": 6770, "code": "int h = 20, n = 3;\nint[] a = {4, 5, 6};\nint sum_a = 0;for (int num : a) {sum_a += num;}\nif (sum_a < h) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "sum_a", "=", "0", ";", "for", "(", "int", "num", ":", "a", ")", "{", "sum_a", "+=", "num", ";", "}", "<3>", "if", "(", "sum_a", "<", "h", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["sum_a", "15"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["sum_a", "15"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["sum_a", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 5527, "code": "int x = 5;\nSystem.out.println((x % 2 != 0) ? (x / 2 + 1) : (x / 2));", "code_tokens": ["<0>", "int", "x", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "%", "2", "!=", "0", ")", "?", "(", "x", "/", "2", "+", "1", ")", ":", "(", "x", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "5"]]}, {"line": 1, "state": [["x", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4837, "code": "char[] s = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nint len_s = s.length;\nString ans = s[0] + Integer.toString(len_s - 2) + s[len_s - 1];\nSystem.out.println(ans);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "int", "len_s", "=", "s", ".", "length", ";", "<2>", "String", "ans", "=", "s", "[", "0", "]", "+", "Integer", ".", "toString", "(", "len_s", "-", "2", ")", "+", "s", "[", "len_s", "-", "1", "]", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["len_s", "20"]]}, {"line": 2, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["len_s", "20"], ["ans", "i18n"]]}, {"line": 3, "state": [["s", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["len_s", "20"], ["ans", "i18n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 5784, "code": "double temp = 50.5;\nSystem.out.println((int) temp);", "code_tokens": ["<0>", "double", "temp", "=", "50.5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "temp", ")", ";"], "trace": [{"line": 0, "state": [["temp", "50.5"]]}, {"line": 1, "state": [["temp", "50.5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15741, "code": "int X = 64145, Y = 123, Z = 456;\nint ans = X / (Y + Z);\nif (X % (Y + Z) >= Z) {\nSystem.out.println(ans);\n} else {\nSystem.out.println(ans - 1);}", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "int", "ans", "=", "X", "/", "(", "Y", "+", "Z", ")", ";", "<2>", "if", "(", "X", "%", "(", "Y", "+", "Z", ")", ">=", "Z", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "ans", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["ans", "110"]]}, {"line": 2, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["ans", "110"]]}, {"line": 5, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["ans", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 1, 0]]}}
{"id": 1837, "code": "int n = 10, a = 3, b = 5;\nint maxi = Math.min(a, b);\nint mini = a + b - n;\nif (a + b - n <= 0) {\nmini = 0;}\nSystem.out.println(maxi + \" \" + mini);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "maxi", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "mini", "=", "a", "+", "b", "-", "n", ";", "<3>", "if", "(", "a", "+", "b", "-", "n", "<=", "0", ")", "{", "<4>", "mini", "=", "0", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "maxi", "+", "\" \"", "+", "mini", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["maxi", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["maxi", "3"], ["mini", "-2"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["maxi", "3"], ["mini", "-2"]]}, {"line": 4, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["maxi", "3"], ["mini", "0"]]}, {"line": 5, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["maxi", "3"], ["mini", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5, 4, 2, 1, 0]]}}
{"id": 8744, "code": "int N = 1;\nint[] A = {2};\nint[] B = {3};\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nans = Math.max(ans, sum(A, 0, i) + sum(B, i, N) + A[i]);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "3", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "sum", "(", "A", ",", "0", ",", "i", ")", "+", "sum", "(", "B", ",", "i", ",", "N", ")", "+", "A", "[", "i", "]", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["A", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "0"]]}, {"line": 4, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "5"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "5"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["A", "[ 2 ]"], ["B", "[ 3 ]"], ["ans", "5"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]]}}
{"id": 5584, "code": "int n = 5;\nint x = (int) Math.ceil(n / 2.0);\nSystem.out.println(x);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "x", "=", "(", "int", ")", "Math", ".", "ceil", "(", "n", "/", "2.0", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"], ["x", "3"]]}, {"line": 3, "state": [["n", "5"], ["x", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 4921, "code": "char[] letter = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nString ans = letter[0] + Integer.toString(letter.length - 2) + letter[letter.length - 1];\nSystem.out.println(ans);", "code_tokens": ["<0>", "char", "[", "]", "letter", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "String", "ans", "=", "letter", "[", "0", "]", "+", "Integer", ".", "toString", "(", "letter", ".", "length", "-", "2", ")", "+", "letter", "[", "letter", ".", "length", "-", "1", "]", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["letter", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["letter", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["ans", "i18n"]]}, {"line": 2, "state": [["letter", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["ans", "i18n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 13454, "code": "String a = \"happy,newyear,enjoy\";\nSystem.out.println(a.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "a", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["a", "happy , newyear , enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9553, "code": "String S = \"2017/01/31\";\nSystem.out.println(S.replace(S.substring(0, 4), \"2018\"));", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "S", ".", "replace", "(", "S", ".", "substring", "(", "0", ",", "4", ")", ",", "\"2018\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 10531, "code": "int a = 1, b = 1, k = 1;\nint i = Math.min(a, b) + 1;\nwhile (k > 0) {\ni -= 1;\nif (Math.max(a % i, b % i) == 0) {\nk -= 1;}}\nSystem.out.println(i);", "code_tokens": ["<0>", "int", "a", "=", "1", ",", "b", "=", "1", ",", "k", "=", "1", ";", "<1>", "int", "i", "=", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "1", ";", "<2>", "while", "(", "k", ">", "0", ")", "{", "<3>", "i", "-=", "1", ";", "<4>", "if", "(", "Math", ".", "max", "(", "a", "%", "i", ",", "b", "%", "i", ")", "==", "0", ")", "{", "<5>", "k", "-=", "1", ";", "}", "}", "<6>", "System", ".", "out", ".", "println", "(", "i", ")", ";"], "trace": [{"line": 0, "state": [["a", "1"], ["b", "1"], ["k", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["i", "2"]]}, {"line": 2, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["i", "2"]]}, {"line": 3, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["i", "1"]]}, {"line": 4, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["i", "1"]]}, {"line": 5, "state": [["a", "1"], ["b", "1"], ["k", "0"], ["i", "1"]]}, {"line": 2, "state": [["a", "1"], ["b", "1"], ["k", "0"], ["i", "1"]]}, {"line": 6, "state": [["a", "1"], ["b", "1"], ["k", "0"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0], [2, 5, 2, 0]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 2, 0]], "6": [[6, 4, 3, 1, 0]]}}
{"id": 17187, "code": "System.out.println(new java.util.HashMap<String, String>() {{\nput(\"H H\", \"H\");\nput(\"H D\", \"D\");\nput(\"D H\", \"D\");\nput(\"D D\", \"H\");}}.get(\"D D\"));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "new", "java", ".", "util", ".", "HashMap", "<", "String", ",", "String", ">", "(", ")", "{", "{", "<1>", "put", "(", "\"H H\"", ",", "\"H\"", ")", ";", "<2>", "put", "(", "\"H D\"", ",", "\"D\"", ")", ";", "<3>", "put", "(", "\"D H\"", ",", "\"D\"", ")", ";", "<4>", "put", "(", "\"D D\"", ",", "\"H\"", ")", ";", "}", "}", ".", "get", "(", "\"D D\"", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": []}, {"line": 5, "state": []}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]]}}
{"id": 19217, "code": "int N = 5;\nint k = 10;\nint ans = 0;\nif (N % 2 != 0) {\nans = 0;}\nelse {\nwhile (k <= N) {\nans += N / k;\nk *= 5;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "k", "=", "10", ";", "<2>", "int", "ans", "=", "0", ";", "<3>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<4>", "ans", "=", "0", ";", "}", "<5>", "else", "{", "<6>", "while", "(", "k", "<=", "N", ")", "{", "<7>", "ans", "+=", "N", "/", "k", ";", "<8>", "k", "*=", "5", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["k", "10"]]}, {"line": 2, "state": [["N", "5"], ["k", "10"], ["ans", "0"]]}, {"line": 3, "state": [["N", "5"], ["k", "10"], ["ans", "0"]]}, {"line": 4, "state": [["N", "5"], ["k", "10"], ["ans", "0"]]}, {"line": 9, "state": [["N", "5"], ["k", "10"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 2]], "9": [[9, 4, 2]]}}
{"id": 5634, "code": "int N = 100;\nint a = N % 2;\ndouble my_result = (N + a) / 2.0;\nSystem.out.println((int) my_result);", "code_tokens": ["<0>", "int", "N", "=", "100", ";", "<1>", "int", "a", "=", "N", "%", "2", ";", "<2>", "double", "my_result", "=", "(", "N", "+", "a", ")", "/", "2.0", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "my_result", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"]]}, {"line": 1, "state": [["N", "100"], ["a", "0"]]}, {"line": 2, "state": [["N", "100"], ["a", "0"], ["my_result", "50.0"]]}, {"line": 3, "state": [["N", "100"], ["a", "0"], ["my_result", "50.0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13651, "code": "String x = \"abcde\";String y = \"fghihgf\";String z = \"edcba\";\nSystem.out.println(x + \" \" + y + \" \" + z);", "code_tokens": ["<0>", "String", "x", "=", "\"abcde\"", ";", "String", "y", "=", "\"fghihgf\"", ";", "String", "z", "=", "\"edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "x", "+", "\" \"", "+", "y", "+", "\" \"", "+", "z", ")", ";"], "trace": [{"line": 0, "state": [["x", "abcde"], ["y", "fghihgf"], ["z", "edcba"]]}, {"line": 1, "state": [["x", "abcde"], ["y", "fghihgf"], ["z", "edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5061, "code": "String s = \"xyz\";\nint size = s.substring(1, s.length() - 1).length();\nSystem.out.println(s.charAt(0) + String.valueOf(size) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "size", "=", "s", ".", "substring", "(", "1", ",", "s", ".", "length", "(", ")", "-", "1", ")", ".", "length", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "size", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["size", "1"]]}, {"line": 2, "state": [["s", "xyz"], ["size", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 16547, "code": "String a = \"D\";String b = \"D\";\nString ans = a.equals(b) ? \"H\" : \"D\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "String", "ans", "=", "a", ".", "equals", "(", "b", ")", "?", "\"H\"", ":", "\"D\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"], ["ans", "H"]]}, {"line": 2, "state": [["a", "D"], ["b", "D"], ["ans", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5289, "code": "System.out.println(\"YNEOS\".charAt(4) != '1' ? \"YNEOS\".charAt(9) : \"YNEOS\".charAt(0));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"YNEOS\"", ".", "charAt", "(", "4", ")", "!=", "'1'", "?", "\"YNEOS\"", ".", "charAt", "(", "9", ")", ":", "\"YNEOS\"", ".", "charAt", "(", "0", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 8923, "code": "int n = 7;\nint[] au = {3, 3, 4, 5, 4, 5, 3};\nint[] ad = {5, 3, 4, 4, 2, 3, 2};\nint maxi = 0;\nfor (int i = 0; i < n; i++) {\nint sumAu = 0;for (int j = 0; j <= i; j++) {sumAu += au[j];}int sumAd = 0;for (int j = i; j < n; j++) {sumAd += ad[j];}maxi = Math.max(maxi, sumAu + sumAd);}\nSystem.out.println(maxi);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "au", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "ad", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "maxi", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "sumAu", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumAu", "+=", "au", "[", "j", "]", ";", "}", "int", "sumAd", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumAd", "+=", "ad", "[", "j", "]", ";", "}", "maxi", "=", "Math", ".", "max", "(", "maxi", ",", "sumAu", "+", "sumAd", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "maxi", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "0"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "0"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "1"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "2"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "3"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "4"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "5"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}, {"line": 4, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["au", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["ad", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 9375, "code": "String y = \"2017\";String m = \"01\";String d = \"31\";\nSystem.out.println(\"2018\" + '/' + m + '/' + d);", "code_tokens": ["<0>", "String", "y", "=", "\"2017\"", ";", "String", "m", "=", "\"01\"", ";", "String", "d", "=", "\"31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "'/'", "+", "m", "+", "'/'", "+", "d", ")", ";"], "trace": [{"line": 0, "state": [["y", "2017"], ["m", "01"], ["d", "31"]]}, {"line": 1, "state": [["y", "2017"], ["m", "01"], ["d", "31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16361, "code": "int n = 2;\nint[] al = {100, 0};\nArrays.sort(al);\nint ai = al[al.length - 1];\nif (ai % 2 == 0) {\nint aj_best = ai / 2;\nint ind = bisectRight(al, aj_best) - 1;\nind = (0 <= ind && ind < n) ? ind : -1;\nint val1 = (ind != -1) ? al[ind] : 0;\nind = bisectLeft(al, aj_best);\nind = (0 <= ind && ind < n) ? ind : -1;\nint val2 = (ind != -1) ? al[ind] : ai;\nif (Math.abs(aj_best - val1) <= Math.abs(aj_best - val2)) {\naj = val1;}\nelse {\naj = val2;}}\nelse {\nint aj_best = ai / 2;\nint ind = bisectRight(al, aj_best) - 1;\nind = (0 <= ind && ind < n) ? ind : -1;\nint val1 = (ind != -1) ? al[ind] : 0;\nind = bisectLeft(al, aj_best);\nind = (0 <= ind && ind < n) ? ind : -1;\nint val2 = (ind != -1) ? al[ind] : ai;\nif (Math.abs(aj_best - val1) <= Math.abs(aj_best + 1 - val2)) {\naj = val1;}\nelse {\naj = val2;}}\nSystem.out.println(ai + \" \" + aj);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "al", "=", "{", "100", ",", "0", "}", ";", "<2>", "Arrays", ".", "sort", "(", "al", ")", ";", "<3>", "int", "ai", "=", "al", "[", "al", ".", "length", "-", "1", "]", ";", "<4>", "if", "(", "ai", "%", "2", "==", "0", ")", "{", "<5>", "int", "aj_best", "=", "ai", "/", "2", ";", "<6>", "int", "ind", "=", "bisectRight", "(", "al", ",", "aj_best", ")", "-", "1", ";", "<7>", "ind", "=", "(", "0", "<=", "ind", "&&", "ind", "<", "n", ")", "?", "ind", ":", "-", "1", ";", "<8>", "int", "val1", "=", "(", "ind", "!=", "-", "1", ")", "?", "al", "[", "ind", "]", ":", "0", ";", "<9>", "ind", "=", "bisectLeft", "(", "al", ",", "aj_best", ")", ";", "<10>", "ind", "=", "(", "0", "<=", "ind", "&&", "ind", "<", "n", ")", "?", "ind", ":", "-", "1", ";", "<11>", "int", "val2", "=", "(", "ind", "!=", "-", "1", ")", "?", "al", "[", "ind", "]", ":", "ai", ";", "<12>", "if", "(", "Math", ".", "abs", "(", "aj_best", "-", "val1", ")", "<=", "Math", ".", "abs", "(", "aj_best", "-", "val2", ")", ")", "{", "<13>", "aj", "=", "val1", ";", "}", "<14>", "else", "{", "<15>", "aj", "=", "val2", ";", "}", "}", "<16>", "else", "{", "<17>", "int", "aj_best", "=", "ai", "/", "2", ";", "<18>", "int", "ind", "=", "bisectRight", "(", "al", ",", "aj_best", ")", "-", "1", ";", "<19>", "ind", "=", "(", "0", "<=", "ind", "&&", "ind", "<", "n", ")", "?", "ind", ":", "-", "1", ";", "<20>", "int", "val1", "=", "(", "ind", "!=", "-", "1", ")", "?", "al", "[", "ind", "]", ":", "0", ";", "<21>", "ind", "=", "bisectLeft", "(", "al", ",", "aj_best", ")", ";", "<22>", "ind", "=", "(", "0", "<=", "ind", "&&", "ind", "<", "n", ")", "?", "ind", ":", "-", "1", ";", "<23>", "int", "val2", "=", "(", "ind", "!=", "-", "1", ")", "?", "al", "[", "ind", "]", ":", "ai", ";", "<24>", "if", "(", "Math", ".", "abs", "(", "aj_best", "-", "val1", ")", "<=", "Math", ".", "abs", "(", "aj_best", "+", "1", "-", "val2", ")", ")", "{", "<25>", "aj", "=", "val1", ";", "}", "<26>", "else", "{", "<27>", "aj", "=", "val2", ";", "}", "}", "<28>", "System", ".", "out", ".", "println", "(", "ai", "+", "\" \"", "+", "aj", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["al", "[ 100 , 0 ]"]]}, {"line": 3, "state": [["n", "2"], ["al", "[ 0 , 100 ]"]]}, {"line": 4, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"]]}, {"line": 5, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"]]}, {"line": 6, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"]]}, {"line": 7, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "0"]]}, {"line": 8, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "0"]]}, {"line": 9, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "0"], ["val1", "0"]]}, {"line": 10, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "1"], ["val1", "0"]]}, {"line": 11, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "1"], ["val1", "0"]]}, {"line": 12, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "1"], ["val1", "0"], ["val2", "100"]]}, {"line": 13, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "1"], ["val1", "0"], ["val2", "100"]]}, {"line": 14, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "1"], ["val1", "0"], ["val2", "100"], ["aj", "0"]]}, {"line": 29, "state": [["n", "2"], ["al", "[ 0 , 100 ]"], ["ai", "100"], ["aj_best", "50"], ["ind", "1"], ["val1", "0"], ["val2", "100"], ["aj", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 4, 3, 2]], "6": [[6, 5, 4, 3, 2]], "7": [[7, 6, 5, 4, 3, 2]], "8": [[8, 7, 6, 5, 4, 3, 2]], "9": [[9, 8, 7, 6, 5, 4, 3, 2]], "10": [[10, 9, 8, 7, 6, 5, 4, 3, 2]], "11": [[11, 10, 9, 8, 7, 6, 5, 4, 3, 2]], "12": [[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]], "13": [[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]], "14": [[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]], "29": [[29, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]]}}
{"id": 3435, "code": "int x = 20, y = 30;\nint a = x - y * 2;\nif (a > 0) {\nSystem.out.println(a);}\nelse {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "int", "x", "=", "20", ",", "y", "=", "30", ";", "<1>", "int", "a", "=", "x", "-", "y", "*", "2", ";", "<2>", "if", "(", "a", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "a", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "20"], ["y", "30"]]}, {"line": 1, "state": [["x", "20"], ["y", "30"], ["a", "-40"]]}, {"line": 2, "state": [["x", "20"], ["y", "30"], ["a", "-40"]]}, {"line": 5, "state": [["x", "20"], ["y", "30"], ["a", "-40"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 8851, "code": "int n = 1;\nint[] A1 = {2};\nint[] A2 = {3};\nint max_p = -1;\nfor (int i = 0; i < n; i++) {\nint point = sum(A1, i + 1) + sum(A2, n - i);\nmax_p = Math.max(max_p, point);}\nSystem.out.println(max_p);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "A1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "3", "}", ";", "<3>", "int", "max_p", "=", "-", "1", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "point", "=", "sum", "(", "A1", ",", "i", "+", "1", ")", "+", "sum", "(", "A2", ",", "n", "-", "i", ")", ";", "<6>", "max_p", "=", "Math", ".", "max", "(", "max_p", ",", "point", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "max_p", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["A1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_p", "-1"]]}, {"line": 4, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_p", "-1"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_p", "-1"], ["i", "0"], ["point", "5"]]}, {"line": 6, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_p", "5"], ["i", "0"], ["point", "5"]]}, {"line": 4, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_p", "5"], ["i", "0"], ["point", "5"]]}, {"line": 7, "state": [["n", "1"], ["A1", "[ 2 ]"], ["A2", "[ 3 ]"], ["max_p", "5"], ["i", "0"], ["point", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]]}}
{"id": 11468, "code": "String S = \"SAT\";\nString[] D = {\"\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nfor (int i = 1; i < 8; i++) {\nif (S.equals(D[i])) {\nSystem.out.println(i);}}", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "D", "=", "{", "\"\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "8", ";", "i", "++", ")", "{", "<3>", "if", "(", "S", ".", "equals", "(", "D", "[", "i", "]", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "1"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "1"]]}, {"line": 4, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "1"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "2"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "2"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "3"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "3"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "4"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "4"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "5"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "5"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "6"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "6"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}, {"line": 3, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}, {"line": 2, "state": [["S", "SAT"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 4, 3, 2], [2, 3, 2, 4, 3, 2], [2, 3, 2, 3, 2, 4, 3, 2], [2, 3, 2, 3, 2, 3, 2, 4, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 3, 2]], "3": [[3, 2], [3, 2, 4, 3, 2], [3, 2, 3, 2, 4, 3, 2], [3, 2, 3, 2, 3, 2, 4, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 4, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 3, 2]], "4": [[4, 3, 2]]}}
{"id": 8486, "code": "int N = 4;\nint[] a = {1, 1, 1, 1};\nint[] b = {1, 1, 1, 1};\nint[] A = new int[N];\nint[] B = new int[N];\nint suma = 0;\nint sumb = 0;\nfor (int n = 0; n < N; n++) {\nsuma += a[n];\nA[n] = suma;}\nfor (int n = N - 1; n >= 0; n--) {\nsumb += b[n];\nB[N - 1 - n] = sumb;}\nint MAX = 0;\nfor (int n = 0; n < N; n++) {\nMAX = Math.max(MAX, A[n] + B[N - n - 1]);}\nSystem.out.println(MAX);", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "[", "]", "A", "=", "new", "int", "[", "N", "]", ";", "<4>", "int", "[", "]", "B", "=", "new", "int", "[", "N", "]", ";", "<5>", "int", "suma", "=", "0", ";", "<6>", "int", "sumb", "=", "0", ";", "<7>", "for", "(", "int", "n", "=", "0", ";", "n", "<", "N", ";", "n", "++", ")", "{", "<8>", "suma", "+=", "a", "[", "n", "]", ";", "<9>", "A", "[", "n", "]", "=", "suma", ";", "}", "<10>", "for", "(", "int", "n", "=", "N", "-", "1", ";", "n", ">=", "0", ";", "n", "--", ")", "{", "<11>", "sumb", "+=", "b", "[", "n", "]", ";", "<12>", "B", "[", "N", "-", "1", "-", "n", "]", "=", "sumb", ";", "}", "<13>", "int", "MAX", "=", "0", ";", "<14>", "for", "(", "int", "n", "=", "0", ";", "n", "<", "N", ";", "n", "++", ")", "{", "<15>", "MAX", "=", "Math", ".", "max", "(", "MAX", ",", "A", "[", "n", "]", "+", "B", "[", "N", "-", "n", "-", "1", "]", ")", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "MAX", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"]]}, {"line": 1, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ ]"]]}, {"line": 4, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ ]"], ["B", "[ ]"]]}, {"line": 5, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ ]"], ["B", "[ ]"], ["suma", "0"]]}, {"line": 6, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ ]"], ["B", "[ ]"], ["suma", "0"], ["sumb", "0"]]}, {"line": 7, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ ]"], ["B", "[ ]"], ["suma", "0"], ["sumb", "0"], ["n", "0"]]}, {"line": 8, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ ]"], ["B", "[ ]"], ["suma", "1"], ["sumb", "0"], ["n", "0"]]}, {"line": 9, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 ]"], ["B", "[ ]"], ["suma", "1"], ["sumb", "0"], ["n", "0"]]}, {"line": 7, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 ]"], ["B", "[ ]"], ["suma", "1"], ["sumb", "0"], ["n", "1"]]}, {"line": 8, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 ]"], ["B", "[ ]"], ["suma", "2"], ["sumb", "0"], ["n", "1"]]}, {"line": 9, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 ]"], ["B", "[ ]"], ["suma", "2"], ["sumb", "0"], ["n", "1"]]}, {"line": 7, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 ]"], ["B", "[ ]"], ["suma", "2"], ["sumb", "0"], ["n", "2"]]}, {"line": 8, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 ]"], ["B", "[ ]"], ["suma", "3"], ["sumb", "0"], ["n", "2"]]}, {"line": 9, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 ]"], ["B", "[ ]"], ["suma", "3"], ["sumb", "0"], ["n", "2"]]}, {"line": 7, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 ]"], ["B", "[ ]"], ["suma", "3"], ["sumb", "0"], ["n", "3"]]}, {"line": 8, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 ]"], ["B", "[ ]"], ["suma", "4"], ["sumb", "0"], ["n", "3"]]}, {"line": 9, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ ]"], ["suma", "4"], ["sumb", "0"], ["n", "3"]]}, {"line": 7, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ ]"], ["suma", "4"], ["sumb", "0"], ["n", "3"]]}, {"line": 10, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ ]"], ["suma", "4"], ["sumb", "0"], ["n", "3"]]}, {"line": 11, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ ]"], ["suma", "4"], ["sumb", "1"], ["n", "3"]]}, {"line": 12, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 ]"], ["suma", "4"], ["sumb", "1"], ["n", "3"]]}, {"line": 10, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 ]"], ["suma", "4"], ["sumb", "1"], ["n", "2"]]}, {"line": 11, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 ]"], ["suma", "4"], ["sumb", "2"], ["n", "2"]]}, {"line": 12, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 ]"], ["suma", "4"], ["sumb", "2"], ["n", "2"]]}, {"line": 10, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 ]"], ["suma", "4"], ["sumb", "2"], ["n", "1"]]}, {"line": 11, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 ]"], ["suma", "4"], ["sumb", "3"], ["n", "1"]]}, {"line": 12, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 ]"], ["suma", "4"], ["sumb", "3"], ["n", "1"]]}, {"line": 10, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 ]"], ["suma", "4"], ["sumb", "3"], ["n", "0"]]}, {"line": 11, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 ]"], ["suma", "4"], ["sumb", "4"], ["n", "0"]]}, {"line": 12, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "0"]]}, {"line": 10, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "0"]]}, {"line": 13, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "0"], ["MAX", "0"]]}, {"line": 14, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "0"], ["MAX", "0"]]}, {"line": 15, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "0"], ["MAX", "5"]]}, {"line": 14, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "1"], ["MAX", "5"]]}, {"line": 15, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "1"], ["MAX", "5"]]}, {"line": 14, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "2"], ["MAX", "5"]]}, {"line": 15, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "2"], ["MAX", "5"]]}, {"line": 14, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "3"], ["MAX", "5"]]}, {"line": 15, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "3"], ["MAX", "5"]]}, {"line": 14, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "3"], ["MAX", "5"]]}, {"line": 16, "state": [["N", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["A", "[ 1 , 2 , 3 , 4 ]"], ["B", "[ 1 , 2 , 3 , 4 ]"], ["suma", "4"], ["sumb", "4"], ["n", "3"], ["MAX", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 0], [7, 8, 7, 0], [7, 8, 7, 8, 7, 0], [7, 8, 7, 8, 7, 8, 7, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "8": [[8, 7, 0], [8, 7, 8, 7, 0], [8, 7, 8, 7, 8, 7, 0], [8, 7, 8, 7, 8, 7, 8, 7, 0]], "9": [[9, 8, 7, 0], [9, 8, 7, 8, 7, 0], [9, 8, 7, 8, 7, 8, 7, 0], [9, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "10": [[10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "11": [[11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "12": [[12, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [12, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [12, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [12, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "13": [[13]], "14": [[14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [14, 15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [14, 15, 14, 15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [14, 15, 14, 15, 14, 15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "15": [[15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [15, 14, 15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0], [15, 14, 15, 14, 15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0]], "16": [[16, 15, 14, 15, 14, 15, 14, 15, 14, 10, 11, 10, 11, 10, 11, 10, 11, 10, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0]]}}
{"id": 9979, "code": "int N = 8;\nString S = \"))))((((\";\nString nS = S;\nfor (int i = 0; i < 50; i++) {\nnS = nS.replace(\"()\", \"\");}\nint r = nS.length() - nS.replace(\")\", \"\").length();\nint l = nS.length() - nS.replace(\"(\", \"\").length();\nSystem.out.println(\"(\".repeat(r) + S + \")\".repeat(l));", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "String", "S", "=", "\"))))((((\"", ";", "<2>", "String", "nS", "=", "S", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "50", ";", "i", "++", ")", "{", "<4>", "nS", "=", "nS", ".", "replace", "(", "\"()\"", ",", "\"\"", ")", ";", "}", "<5>", "int", "r", "=", "nS", ".", "length", "(", ")", "-", "nS", ".", "replace", "(", "\")\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<6>", "int", "l", "=", "nS", ".", "length", "(", ")", "-", "nS", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<7>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "r", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "l", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "8"]]}, {"line": 1, "state": [["N", "8"], ["S", "))))(((("]]}, {"line": 2, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "0"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "0"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "1"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "1"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "2"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "2"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "3"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "3"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "4"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "4"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "5"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "5"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "6"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "6"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "7"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "7"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "8"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "8"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "9"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "9"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "10"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "10"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "11"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "11"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "12"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "12"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "13"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "13"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "14"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "14"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "15"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "15"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "16"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "16"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "17"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "17"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "18"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "18"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "19"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "19"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "20"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "20"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "21"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "21"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "22"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "22"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "23"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "23"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "24"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "24"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "25"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "25"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "26"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "26"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "27"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "27"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "28"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "28"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "29"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "29"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "30"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "30"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "31"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "31"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "32"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "32"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "33"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "33"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "34"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "34"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "35"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "35"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "36"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "36"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "37"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "37"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "38"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "38"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "39"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "39"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "40"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "40"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "41"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "41"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "42"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "42"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "43"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "43"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "44"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "44"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "45"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "45"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "46"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "46"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "47"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "47"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "48"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "48"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "49"]]}, {"line": 4, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "49"]]}, {"line": 3, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "49"]]}, {"line": 5, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "49"], ["r", "4"]]}, {"line": 6, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "49"], ["r", "4"], ["l", "4"]]}, {"line": 7, "state": [["N", "8"], ["S", "))))(((("], ["nS", "))))(((("], ["i", "49"], ["r", "4"], ["l", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3]], "4": [[4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1], [4, 2, 1]], "5": [[5, 4, 2, 1]], "6": [[6, 5, 4, 2, 1]], "7": [[7, 6, 5, 4, 2, 1]]}}
{"id": 15849, "code": "int x = 64146, y = 123, z = 456;\nint a = x - z;\nint b = a / (y + z);\nSystem.out.println(b);", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "a", "=", "x", "-", "z", ";", "<2>", "int", "b", "=", "a", "/", "(", "y", "+", "z", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "b", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["a", "63690"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["a", "63690"], ["b", "110"]]}, {"line": 3, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["a", "63690"], ["b", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 18587, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint count1 = 0;\nint count2 = 0;\nif (h > w) {\nwhile (w > 0) {\ncount1 += h;\nif (count1 >= n) {\ncount2 += 1;\nbreak;}\nelse {\ncount2 += 1;\nw -= 1;}}}\nelse {\nwhile (h > 0) {\ncount1 += w;\nif (count1 >= n) {\ncount2 += 1;\nbreak;}\nelse {\ncount2 += 1;\nh -= 1;}}}\nSystem.out.println(count2);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "count1", "=", "0", ";", "<4>", "int", "count2", "=", "0", ";", "<5>", "if", "(", "h", ">", "w", ")", "{", "<6>", "while", "(", "w", ">", "0", ")", "{", "<7>", "count1", "+=", "h", ";", "<8>", "if", "(", "count1", ">=", "n", ")", "{", "<9>", "count2", "+=", "1", ";", "<10>", "break", ";", "}", "<11>", "else", "{", "<12>", "count2", "+=", "1", ";", "<13>", "w", "-=", "1", ";", "}", "}", "}", "<14>", "else", "{", "<15>", "while", "(", "h", ">", "0", ")", "{", "<16>", "count1", "+=", "w", ";", "<17>", "if", "(", "count1", ">=", "n", ")", "{", "<18>", "count2", "+=", "1", ";", "<19>", "break", ";", "}", "<20>", "else", "{", "<21>", "count2", "+=", "1", ";", "<22>", "h", "-=", "1", ";", "}", "}", "}", "<23>", "System", ".", "out", ".", "println", "(", "count2", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "0"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "0"], ["count2", "0"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "0"], ["count2", "0"]]}, {"line": 15, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "0"], ["count2", "0"]]}, {"line": 16, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "7"], ["count2", "0"]]}, {"line": 17, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "7"], ["count2", "0"]]}, {"line": 21, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["count1", "7"], ["count2", "1"]]}, {"line": 22, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "7"], ["count2", "1"]]}, {"line": 15, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "7"], ["count2", "1"]]}, {"line": 16, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "14"], ["count2", "1"]]}, {"line": 17, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "14"], ["count2", "1"]]}, {"line": 18, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "14"], ["count2", "2"]]}, {"line": 19, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "14"], ["count2", "2"]]}, {"line": 23, "state": [["h", "2"], ["w", "7"], ["n", "10"], ["count1", "14"], ["count2", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1, 0]], "15": [[15, 5, 1, 0], [15, 22, 15, 5, 1, 0]], "16": [[16, 5, 1, 0], [16, 17, 16, 5, 1, 0]], "17": [[17, 16, 5, 1, 0], [17, 16, 17, 16, 5, 1, 0]], "18": [[18, 21, 4]], "19": [[19]], "21": [[21, 4]], "22": [[22, 15, 5, 1, 0]], "23": [[23, 18, 21, 4]]}}
{"id": 13181, "code": "String A = \"happy\"; String B = \"newyear\"; String C = \"enjoy\";\nSystem.out.println(A + \" \" + B + \" \" + C);", "code_tokens": ["<0>", "String", "A", "=", "\"happy\"", ";", "String", "B", "=", "\"newyear\"", ";", "String", "C", "=", "\"enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "A", "+", "\" \"", "+", "B", "+", "\" \"", "+", "C", ")", ";"], "trace": [{"line": 0, "state": [["A", "happy"], ["B", "newyear"], ["C", "enjoy"]]}, {"line": 1, "state": [["A", "happy"], ["B", "newyear"], ["C", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8793, "code": "int N = 1;\nint[] a1 = {2};\nint[] a2 = {3};\nint res = 0, point = 0;\nfor (int i = 0; i < N; i++) {\npoint = sum(a1, i + 1) + sum(a2, i, N);\nres = Math.max(res, point);}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "N", "=", "1", ";", "<1>", "int", "[", "]", "a1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "3", "}", ";", "<3>", "int", "res", "=", "0", ",", "point", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "point", "=", "sum", "(", "a1", ",", "i", "+", "1", ")", "+", "sum", "(", "a2", ",", "i", ",", "N", ")", ";", "<6>", "res", "=", "Math", ".", "max", "(", "res", ",", "point", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"]]}, {"line": 1, "state": [["N", "1"], ["a1", "[ 2 ]"]]}, {"line": 2, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"]]}, {"line": 3, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"], ["point", "0"]]}, {"line": 4, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"], ["point", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "0"], ["point", "5"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "5"], ["point", "5"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "5"], ["point", "5"], ["i", "0"]]}, {"line": 7, "state": [["N", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["res", "5"], ["point", "5"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]]}}
{"id": 19199, "code": "int N = 12;\nif (N % 2 == 1) {\nSystem.out.println(0);\nSystem.exit(0);}\nint ans = 0;\nlong mul = 1;\nfor (int i = 1; i < 27; i++) {\nmul *= 5;\nint add = N / (2 * (int)mul);\nif (add == 0) break;\nans += add;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "12", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<3>", "System", ".", "exit", "(", "0", ")", ";", "}", "<4>", "int", "ans", "=", "0", ";", "<5>", "long", "mul", "=", "1", ";", "<6>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "27", ";", "i", "++", ")", "{", "<7>", "mul", "*=", "5", ";", "<8>", "int", "add", "=", "N", "/", "(", "2", "*", "(", "int", ")", "mul", ")", ";", "<9>", "if", "(", "add", "==", "0", ")", "break", ";", "<10>", "ans", "+=", "add", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "12"]]}, {"line": 2, "state": [["N", "12"]]}, {"line": 5, "state": [["N", "12"], ["ans", "0"]]}, {"line": 6, "state": [["N", "12"], ["ans", "0"], ["mul", "1"]]}, {"line": 7, "state": [["N", "12"], ["ans", "0"], ["mul", "1"], ["i", "1"]]}, {"line": 8, "state": [["N", "12"], ["ans", "0"], ["mul", "5"], ["i", "1"]]}, {"line": 9, "state": [["N", "12"], ["ans", "0"], ["mul", "5"], ["i", "1"], ["add", "1"]]}, {"line": 10, "state": [["N", "12"], ["ans", "0"], ["mul", "5"], ["i", "1"], ["add", "1"]]}, {"line": 11, "state": [["N", "12"], ["ans", "1"], ["mul", "5"], ["i", "1"], ["add", "1"]]}, {"line": 7, "state": [["N", "12"], ["ans", "1"], ["mul", "5"], ["i", "2"], ["add", "1"]]}, {"line": 8, "state": [["N", "12"], ["ans", "1"], ["mul", "25"], ["i", "2"], ["add", "1"]]}, {"line": 9, "state": [["N", "12"], ["ans", "1"], ["mul", "25"], ["i", "2"], ["add", "0"]]}, {"line": 10, "state": [["N", "12"], ["ans", "1"], ["mul", "25"], ["i", "2"], ["add", "0"]]}, {"line": 12, "state": [["N", "12"], ["ans", "1"], ["mul", "25"], ["i", "2"], ["add", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5]], "6": [[6]], "7": [[7], [7]], "8": [[8, 6], [8, 9, 8, 6]], "9": [[9, 8, 6], [9, 8, 9, 8, 6]], "10": [[10, 9, 8, 6], [10, 9, 8, 9, 8, 6]], "11": [[11, 10, 9, 8, 6]], "12": [[12, 11, 10, 9, 8, 6]]}}
{"id": 6399, "code": "int n = 2;\nint[] a = {1, 5};\nint[] b = {2, 4};\nint[] c = {3, 6};\nArrays.sort(a);\nArrays.sort(c);\nint cnt = 0;\nfor (int i : b) {\ncnt += bisectLeft(a, i) * (n - bisectRight(c, i));}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "6", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "c", ")", ";", "<6>", "int", "cnt", "=", "0", ";", "<7>", "for", "(", "int", "i", ":", "b", ")", "{", "<8>", "cnt", "+=", "bisectLeft", "(", "a", ",", "i", ")", "*", "(", "n", "-", "bisectRight", "(", "c", ",", "i", ")", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 1 , 5 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "0"], ["i", "2"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "2"], ["i", "2"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "2"], ["i", "4"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "3"], ["i", "4"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "3"], ["i", "4"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["cnt", "3"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 3]], "6": [[6]], "7": [[7]], "8": [[8, 2], [8, 9, 8, 2], [8, 9, 8, 9, 8, 2]], "9": [[9, 8, 2], [9, 8, 9, 8, 2]], "10": [[10, 9, 8, 9, 8, 2]]}}
{"id": 12699, "code": "String x = \"6\";\nString[] lst = {'7', '5', '3'};\nboolean found = false;for (String num : lst) {if (num.equals(x)) {found = true;break;}}if (found) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "String", "x", "=", "\"6\"", ";", "<1>", "String", "[", "]", "lst", "=", "{", "'7'", ",", "'5'", ",", "'3'", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "String", "num", ":", "lst", ")", "{", "if", "(", "num", ".", "equals", "(", "x", ")", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "6"]]}, {"line": 1, "state": [["x", "6"], ["lst", "[ 7 , 5 , 3 ]"]]}, {"line": 2, "state": [["x", "6"], ["lst", "[ 7 , 5 , 3 ]"]]}, {"line": 5, "state": [["x", "6"], ["lst", "[ 7 , 5 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 11669, "code": "String s = \"SUN\";\nint ans = 0;\nif (s.equals(\"SUN\")) {\nans = 7;\n} else if (s.equals(\"MON\")) {\nans = 6;\n} else if (s.equals(\"TUE\")) {\nans = 5;\n} else if (s.equals(\"WED\")) {\nans = 4;\n} else if (s.equals(\"THU\")) {\nans = 3;\n} else if (s.equals(\"FRI\")) {\nans = 2;\n} else if (s.equals(\"SAT\")) {\nans = 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<3>", "ans", "=", "7", ";", "<4>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<5>", "ans", "=", "6", ";", "<6>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<7>", "ans", "=", "5", ";", "<8>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<9>", "ans", "=", "4", ";", "<10>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<11>", "ans", "=", "3", ";", "<12>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<13>", "ans", "=", "2", ";", "<14>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<15>", "ans", "=", "1", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"], ["ans", "0"]]}, {"line": 2, "state": [["s", "SUN"], ["ans", "0"]]}, {"line": 3, "state": [["s", "SUN"], ["ans", "7"]]}, {"line": 16, "state": [["s", "SUN"], ["ans", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 1]], "16": [[16, 3, 1]]}}
{"id": 11136, "code": "String S = \"level\";\nint N = S.length();\nString one = S.substring(0, (N - 1) / 2);\nString two = S.substring((N + 3) / 2 - 1);\nif (S.equals(new StringBuilder(S).reverse().toString())) {\nif (one.equals(new StringBuilder(one).reverse().toString())) {\nif (two.equals(new StringBuilder(two).reverse().toString())) {\nSystem.out.println(\"Yes\");\nSystem.exit(0);}}}\nSystem.out.println(\"No\");", "code_tokens": ["<0>", "String", "S", "=", "\"level\"", ";", "<1>", "int", "N", "=", "S", ".", "length", "(", ")", ";", "<2>", "String", "one", "=", "S", ".", "substring", "(", "0", ",", "(", "N", "-", "1", ")", "/", "2", ")", ";", "<3>", "String", "two", "=", "S", ".", "substring", "(", "(", "N", "+", "3", ")", "/", "2", "-", "1", ")", ";", "<4>", "if", "(", "S", ".", "equals", "(", "new", "StringBuilder", "(", "S", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<5>", "if", "(", "one", ".", "equals", "(", "new", "StringBuilder", "(", "one", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<6>", "if", "(", "two", ".", "equals", "(", "new", "StringBuilder", "(", "two", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<8>", "System", ".", "exit", "(", "0", ")", ";", "}", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["S", "level"]]}, {"line": 1, "state": [["S", "level"], ["N", "5"]]}, {"line": 2, "state": [["S", "level"], ["N", "5"], ["one", "le"]]}, {"line": 3, "state": [["S", "level"], ["N", "5"], ["one", "le"], ["two", "el"]]}, {"line": 4, "state": [["S", "level"], ["N", "5"], ["one", "le"], ["two", "el"]]}, {"line": 5, "state": [["S", "level"], ["N", "5"], ["one", "le"], ["two", "el"]]}, {"line": 9, "state": [["S", "level"], ["N", "5"], ["one", "le"], ["two", "el"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 2, 1, 0]], "9": [[9]]}}
{"id": 14655, "code": "int N = 2, P = 0;\nint[] A = {1, 3};\nint su = (int) Math.pow(2, N);\nboolean guusu = true;\nfor (int a : A) {\nif (a % 2 == 1) {\nguusu = false;\nbreak;}}\nif (P == 0) {\nSystem.out.println(guusu ? su : su / 2);}\nelse {\nSystem.out.println(guusu ? 0 : su / 2);}", "code_tokens": ["<0>", "int", "N", "=", "2", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "su", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", ")", ";", "<3>", "boolean", "guusu", "=", "true", ";", "<4>", "for", "(", "int", "a", ":", "A", ")", "{", "<5>", "if", "(", "a", "%", "2", "==", "1", ")", "{", "<6>", "guusu", "=", "false", ";", "<7>", "break", ";", "}", "}", "<8>", "if", "(", "P", "==", "0", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "guusu", "?", "su", ":", "su", "/", "2", ")", ";", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "guusu", "?", "0", ":", "su", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "2"], ["P", "0"]]}, {"line": 1, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"]]}, {"line": 2, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"]]}, {"line": 3, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "True"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "True"], ["a", "1"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "True"], ["a", "1"]]}, {"line": 6, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "False"], ["a", "1"]]}, {"line": 7, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "False"], ["a", "1"]]}, {"line": 8, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "False"], ["a", "1"]]}, {"line": 9, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["su", "4"], ["guusu", "False"], ["a", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4, 1]], "5": [[5, 4, 1]], "6": [[6, 3]], "7": [[7]], "8": [[8, 0]], "9": [[9, 6, 3]]}}
{"id": 9198, "code": "String S = \"2017/01/07\";\nSystem.out.println(\"2018\" + S.substring(4));", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "S", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/07"]]}, {"line": 1, "state": [["S", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18334, "code": "int a = 2;\nint b = 100;\nint n = 200;\nint t = Math.max(a, b);\nSystem.out.println((n + t - 1) / t);", "code_tokens": ["<0>", "int", "a", "=", "2", ";", "<1>", "int", "b", "=", "100", ";", "<2>", "int", "n", "=", "200", ";", "<3>", "int", "t", "=", "Math", ".", "max", "(", "a", ",", "b", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "n", "+", "t", "-", "1", ")", "/", "t", ")", ";"], "trace": [{"line": 0, "state": [["a", "2"]]}, {"line": 1, "state": [["a", "2"], ["b", "100"]]}, {"line": 2, "state": [["a", "2"], ["b", "100"], ["n", "200"]]}, {"line": 3, "state": [["a", "2"], ["b", "100"], ["n", "200"], ["t", "100"]]}, {"line": 4, "state": [["a", "2"], ["b", "100"], ["n", "200"], ["t", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 2952, "code": "String a = \"1234567876\";\nint la = a.length();\nint res = 753;\nfor (int i = 0; i < la - 2; i++) {\nString temp = a.substring(i, i + 3);\nint tempp = Math.abs(Integer.parseInt(temp) - 753);\nres = Math.min(res, tempp);}\nSystem.out.println(res);", "code_tokens": ["<0>", "String", "a", "=", "\"1234567876\"", ";", "<1>", "int", "la", "=", "a", ".", "length", "(", ")", ";", "<2>", "int", "res", "=", "753", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "la", "-", "2", ";", "i", "++", ")", "{", "<4>", "String", "temp", "=", "a", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ";", "<5>", "int", "tempp", "=", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "temp", ")", "-", "753", ")", ";", "<6>", "res", "=", "Math", ".", "min", "(", "res", ",", "tempp", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["a", "1234567876"]]}, {"line": 1, "state": [["a", "1234567876"], ["la", "10"]]}, {"line": 2, "state": [["a", "1234567876"], ["la", "10"], ["res", "753"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "753"], ["i", "0"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "753"], ["i", "0"], ["temp", "123"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "753"], ["i", "0"], ["temp", "123"], ["tempp", "630"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "630"], ["i", "0"], ["temp", "123"], ["tempp", "630"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "630"], ["i", "1"], ["temp", "123"], ["tempp", "630"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "630"], ["i", "1"], ["temp", "234"], ["tempp", "630"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "630"], ["i", "1"], ["temp", "234"], ["tempp", "519"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "519"], ["i", "1"], ["temp", "234"], ["tempp", "519"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "519"], ["i", "2"], ["temp", "234"], ["tempp", "519"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "519"], ["i", "2"], ["temp", "345"], ["tempp", "519"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "519"], ["i", "2"], ["temp", "345"], ["tempp", "408"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "408"], ["i", "2"], ["temp", "345"], ["tempp", "408"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "408"], ["i", "3"], ["temp", "345"], ["tempp", "408"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "408"], ["i", "3"], ["temp", "456"], ["tempp", "408"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "408"], ["i", "3"], ["temp", "456"], ["tempp", "297"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "297"], ["i", "3"], ["temp", "456"], ["tempp", "297"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "297"], ["i", "4"], ["temp", "456"], ["tempp", "297"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "297"], ["i", "4"], ["temp", "567"], ["tempp", "297"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "297"], ["i", "4"], ["temp", "567"], ["tempp", "186"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "186"], ["i", "4"], ["temp", "567"], ["tempp", "186"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "186"], ["i", "5"], ["temp", "567"], ["tempp", "186"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "186"], ["i", "5"], ["temp", "678"], ["tempp", "186"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "186"], ["i", "5"], ["temp", "678"], ["tempp", "75"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "75"], ["i", "5"], ["temp", "678"], ["tempp", "75"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "75"], ["i", "6"], ["temp", "678"], ["tempp", "75"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "75"], ["i", "6"], ["temp", "787"], ["tempp", "75"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "75"], ["i", "6"], ["temp", "787"], ["tempp", "34"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "6"], ["temp", "787"], ["tempp", "34"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "7"], ["temp", "787"], ["tempp", "34"]]}, {"line": 4, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "7"], ["temp", "876"], ["tempp", "34"]]}, {"line": 5, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "7"], ["temp", "876"], ["tempp", "123"]]}, {"line": 6, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "7"], ["temp", "876"], ["tempp", "123"]]}, {"line": 3, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "7"], ["temp", "876"], ["tempp", "123"]]}, {"line": 7, "state": [["a", "1234567876"], ["la", "10"], ["res", "34"], ["i", "7"], ["temp", "876"], ["tempp", "123"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "7": [[7, 6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 9052, "code": "int a = 1;\nint b = 2;\nint c = 4;\nint d = 8;\nint e = 9;\nint k = 15;\nint x = e - a;\nif (x <= k) {\nSystem.out.println(\"Yay!\");}\nelse {\nSystem.out.println(\":(\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ";", "<1>", "int", "b", "=", "2", ";", "<2>", "int", "c", "=", "4", ";", "<3>", "int", "d", "=", "8", ";", "<4>", "int", "e", "=", "9", ";", "<5>", "int", "k", "=", "15", ";", "<6>", "int", "x", "=", "e", "-", "a", ";", "<7>", "if", "(", "x", "<=", "k", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "2"]]}, {"line": 2, "state": [["a", "1"], ["b", "2"], ["c", "4"]]}, {"line": 3, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"]]}, {"line": 4, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"]]}, {"line": 5, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 6, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["x", "8"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["x", "8"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["x", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 4, 0]], "7": [[7, 6, 4, 0]], "8": [[8]]}}
{"id": 2713, "code": "System.out.println(\"YNEOS\"[isSorted(new int[]{1, 9, 7, 4}) ? 0 : 1]);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"YNEOS\"", "[", "isSorted", "(", "new", "int", "[", "]", "{", "1", ",", "9", ",", "7", ",", "4", "}", ")", "?", "0", ":", "1", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["x", "1"]]}, {"line": 0, "state": [["x", "9"]]}, {"line": 0, "state": [["x", "7"]]}, {"line": 0, "state": [["x", "4"]]}, {"line": 0, "state": [["x", "4"]]}, {"line": 0, "state": []}], "slices": {"0": [[0], [0], [0], [0], [0], [0], [0], [0]]}}
{"id": 5096, "code": "String s = \"smiles\";\nSystem.out.println(s.charAt(0) + String.valueOf(s.length() - 2) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11640, "code": "String s = \"SAT\";\nString[] week = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint idx = java.util.Arrays.asList(week).indexOf(s);\nSystem.out.println(7 - idx);", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "week", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "idx", "=", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "week", ")", ".", "indexOf", "(", "s", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "7", "-", "idx", ")", ";"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["s", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["idx", "6"]]}, {"line": 3, "state": [["s", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["idx", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 1272, "code": "int n = 750;\nSystem.out.println(Math.ceil(n / 111.0) * 111);", "code_tokens": ["<0>", "int", "n", "=", "750", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "ceil", "(", "n", "/", "111.0", ")", "*", "111", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "750"]]}, {"line": 2, "state": [["n", "750"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 9197, "code": "String[] date = {\"2017\", \"01\", \"31\"};\ndate[0] = \"2018\";\nSystem.out.println(String.join(\"/\", date));", "code_tokens": ["<0>", "String", "[", "]", "date", "=", "{", "\"2017\"", ",", "\"01\"", ",", "\"31\"", "}", ";", "<1>", "date", "[", "0", "]", "=", "\"2018\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "join", "(", "\"/\"", ",", "date", ")", ")", ";"], "trace": [{"line": 0, "state": [["date", "[ 2017 , 01 , 31 ]"]]}, {"line": 1, "state": [["date", "[ 2018 , 01 , 31 ]"]]}, {"line": 2, "state": [["date", "[ 2018 , 01 , 31 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 10280, "code": "int N = 3;\nString S = \"())\";\nint l = 0;\nint r = 0;\nfor (char c : S.toCharArray()) {\nif (c == '(') {\nl += 1;}\nelse {\nif (l != 0) {\nl -= 1;}\nelse {\nr += 1;}}}\nSystem.out.println(\"(\".repeat(r) + S + \")\".repeat(l));", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "String", "S", "=", "\"())\"", ";", "<2>", "int", "l", "=", "0", ";", "<3>", "int", "r", "=", "0", ";", "<4>", "for", "(", "char", "c", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "c", "==", "'('", ")", "{", "<6>", "l", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "l", "!=", "0", ")", "{", "<9>", "l", "-=", "1", ";", "}", "<10>", "else", "{", "<11>", "r", "+=", "1", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "r", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "l", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"], ["S", "())"]]}, {"line": 2, "state": [["N", "3"], ["S", "())"], ["l", "0"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"], ["c", "("]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"], ["c", "("]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["l", "1"], ["r", "0"], ["c", "("]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["l", "1"], ["r", "0"], ["c", ")"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["l", "1"], ["r", "0"], ["c", ")"]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["l", "1"], ["r", "0"], ["c", ")"]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"], ["c", ")"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"], ["c", ")"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"], ["c", ")"]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "0"], ["c", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "1"], ["c", ")"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "1"], ["c", ")"]]}, {"line": 12, "state": [["N", "3"], ["S", "())"], ["l", "0"], ["r", "1"], ["c", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1]], "6": [[6, 2]], "8": [[8, 6, 2], [8, 9, 8, 6, 2]], "9": [[9, 8, 6, 2]], "11": [[11, 3]], "12": [[12, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 15413, "code": "int x = 64146, y = 123, z = 456;\ndouble t = (double)(x - z) / (y + z);\nSystem.out.println((int)Math.floor(t));", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "double", "t", "=", "(", "double", ")", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "floor", "(", "t", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["t", "110.0"]]}, {"line": 3, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["t", "110.0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 18378, "code": "if (true) { // Java does not have __name__=='__main__', so we use true for the main method.\nint H = 14;\nint W = 12;\nint N = 112;\nint t = (int) Math.ceil(N / (H > W ? H : W));\nSystem.out.println(t);}", "code_tokens": ["<0>", "if", "(", "true", ")", "{", "// Java does not have __name__=='__main__', so we use true for the main method.", "<1>", "int", "H", "=", "14", ";", "<2>", "int", "W", "=", "12", ";", "<3>", "int", "N", "=", "112", ";", "<4>", "int", "t", "=", "(", "int", ")", "Math", ".", "ceil", "(", "N", "/", "(", "H", ">", "W", "?", "H", ":", "W", ")", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "t", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["H", "14"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["t", "8"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["t", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 4, 3, 2]], "6": [[6, 5, 4, 3, 2]]}}
{"id": 3771, "code": "int x = 64146, y = 123, z = 456;\nx -= z;\nSystem.out.println((int)(x / (y + z)));", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "x", "-=", "z", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "(", "x", "/", "(", "y", "+", "z", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "63690"], ["y", "123"], ["z", "456"]]}, {"line": 2, "state": [["x", "63690"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4560, "code": "String s = \"xyz\";\nint n = s.substring(1, s.length() - 1).length();\nSystem.out.println(s.charAt(0) + String.valueOf(n) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "n", "=", "s", ".", "substring", "(", "1", ",", "s", ".", "length", "(", ")", "-", "1", ")", ".", "length", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "n", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["n", "1"]]}, {"line": 2, "state": [["s", "xyz"], ["n", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 8460, "code": "int N = 4;\nint[] a1 = {1, 1, 1, 1};\nint[] a2 = {1, 1, 1, 1};\nint MAX = 0;\nfor (int i = 0; i < N; i++) {\nint tmp = sum(a1, i + 1) + sum(a2, N - i);\nMAX = Math.max(MAX, tmp);}\nSystem.out.println(MAX);", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "a1", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "MAX", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "tmp", "=", "sum", "(", "a1", ",", "i", "+", "1", ")", "+", "sum", "(", "a2", ",", "N", "-", "i", ")", ";", "<6>", "MAX", "=", "Math", ".", "max", "(", "MAX", ",", "tmp", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "MAX", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"]]}, {"line": 1, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "0"]]}, {"line": 4, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "0"], ["i", "0"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "0"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "1"], ["tmp", "5"]]}, {"line": 5, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "1"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "1"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "2"], ["tmp", "5"]]}, {"line": 5, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "2"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "2"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 5, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 6, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 4, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "3"], ["tmp", "5"]]}, {"line": 7, "state": [["N", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"], ["MAX", "5"], ["i", "3"], ["tmp", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 17220, "code": "String a = \"H\"; String b = \"H\";\nSystem.out.println(new String[]{\"D\", \"H\"}[a.equals(b) ? 1 : 0]);", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "new", "String", "[", "]", "{", "\"D\"", ",", "\"H\"", "}", "[", "a", ".", "equals", "(", "b", ")", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2376, "code": "int n = 1, m = 1;\ndouble od_od = n * (n - 1) / 2.0;\ndouble ev_ev = m * (m - 1) / 2.0;\nSystem.out.println((int) (od_od + ev_ev));", "code_tokens": ["<0>", "int", "n", "=", "1", ",", "m", "=", "1", ";", "<1>", "double", "od_od", "=", "n", "*", "(", "n", "-", "1", ")", "/", "2.0", ";", "<2>", "double", "ev_ev", "=", "m", "*", "(", "m", "-", "1", ")", "/", "2.0", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "(", "od_od", "+", "ev_ev", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"], ["m", "1"]]}, {"line": 1, "state": [["n", "1"], ["m", "1"], ["od_od", "0.0"]]}, {"line": 2, "state": [["n", "1"], ["m", "1"], ["od_od", "0.0"], ["ev_ev", "0.0"]]}, {"line": 3, "state": [["n", "1"], ["m", "1"], ["od_od", "0.0"], ["ev_ev", "0.0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 17008, "code": "String a = \"D\";String b = \"H\";\nSystem.out.println(new String[] {\"D\", \"H\"}[a.equals(b) ? 1 : 0]);", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "new", "String", "[", "]", "{", "\"D\"", ",", "\"H\"", "}", "[", "a", ".", "equals", "(", "b", ")", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16522, "code": "int n = 2;\nint[] a = {100, 0};\nint m = Arrays.stream(a).max().getAsInt();\nint k = 0;\nfor (int x : a) {\nif (Math.abs((k * 2 - m)) > Math.abs((x * 2 - m))) {\nk = x;}}\nSystem.out.println(m + \" \" + k);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "int", "m", "=", "Arrays", ".", "stream", "(", "a", ")", ".", "max", "(", ")", ".", "getAsInt", "(", ")", ";", "<3>", "int", "k", "=", "0", ";", "<4>", "for", "(", "int", "x", ":", "a", ")", "{", "<5>", "if", "(", "Math", ".", "abs", "(", "(", "k", "*", "2", "-", "m", ")", ")", ">", "Math", ".", "abs", "(", "(", "x", "*", "2", "-", "m", ")", ")", ")", "{", "<6>", "k", "=", "x", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "m", "+", "\" \"", "+", "k", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"], ["x", "100"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"], ["x", "100"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"], ["x", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"], ["x", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"], ["x", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["m", "100"], ["k", "0"], ["x", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5, 3, 2], [5, 6, 5, 3, 2], [5, 6, 5, 6, 5, 3, 2]], "6": [[6, 5, 3, 2], [6, 5, 6, 5, 3, 2]], "8": [[8, 6, 5, 6, 5, 3, 2]]}}
{"id": 158, "code": "char[] S = {'x', 'y', 'z'};\nint K = 4;\nfor (int i = 0; i < S.length; i++) {char s = S[i];\nif (s == 'a') {\ncontinue;}\nelse if ('z' - s + 1 <= K) {\nS[i] = 'a';\nK -= 'z' - s + 1;}}\nK %= 26;\nS[S.length - 1] = (char) ((ord(S[S.length - 1]) - ord('a') + K) % 26 + ord('a'));\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "K", "=", "4", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", ";", "i", "++", ")", "{", "char", "s", "=", "S", "[", "i", "]", ";", "<3>", "if", "(", "s", "==", "'a'", ")", "{", "<4>", "continue", ";", "}", "<5>", "else", "if", "(", "'z'", "-", "s", "+", "1", "<=", "K", ")", "{", "<6>", "S", "[", "i", "]", "=", "'a'", ";", "<7>", "K", "-=", "'z'", "-", "s", "+", "1", ";", "}", "}", "<8>", "K", "%=", "26", ";", "<9>", "S", "[", "S", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "(", "ord", "(", "S", "[", "S", ".", "length", "-", "1", "]", ")", "-", "ord", "(", "'a'", ")", "+", "K", ")", "%", "26", "+", "ord", "(", "'a'", ")", ")", ";", "<10>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ x , y , z ]"]]}, {"line": 1, "state": [["S", "[ x , y , z ]"], ["K", "4"]]}, {"line": 2, "state": [["S", "[ x , y , z ]"], ["K", "4"], ["i", "0"], ["s", "x"]]}, {"line": 3, "state": [["S", "[ x , y , z ]"], ["K", "4"], ["i", "0"], ["s", "x"]]}, {"line": 5, "state": [["S", "[ x , y , z ]"], ["K", "4"], ["i", "0"], ["s", "x"]]}, {"line": 6, "state": [["S", "[ a , y , z ]"], ["K", "4"], ["i", "0"], ["s", "x"]]}, {"line": 7, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "0"], ["s", "x"]]}, {"line": 2, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "1"], ["s", "y"]]}, {"line": 3, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "1"], ["s", "y"]]}, {"line": 5, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "1"], ["s", "y"]]}, {"line": 2, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "2"], ["s", "z"]]}, {"line": 3, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "2"], ["s", "z"]]}, {"line": 5, "state": [["S", "[ a , y , z ]"], ["K", "1"], ["i", "2"], ["s", "z"]]}, {"line": 6, "state": [["S", "[ a , y , a ]"], ["K", "1"], ["i", "2"], ["s", "z"]]}, {"line": 7, "state": [["S", "[ a , y , a ]"], ["K", "0"], ["i", "2"], ["s", "z"]]}, {"line": 2, "state": [["S", "[ a , y , a ]"], ["K", "0"], ["i", "2"], ["s", "z"]]}, {"line": 8, "state": [["S", "[ a , y , a ]"], ["K", "0"], ["i", "2"], ["s", "z"]]}, {"line": 9, "state": [["S", "[ a , y , a ]"], ["K", "0"], ["i", "2"], ["s", "z"]]}, {"line": 10, "state": [["S", "[ a , y , a ]"], ["K", "0"], ["i", "2"], ["s", "z"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 7, 5, 3, 2, 0], [2, 5, 3, 2, 7, 5, 3, 2, 0], [2, 7, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 7, 5, 3, 2, 0], [3, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "5": [[5, 3, 2, 0], [5, 3, 2, 7, 5, 3, 2, 0], [5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "6": [[6, 2, 0], [6, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "7": [[7, 5, 3, 2, 0], [7, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "8": [[8, 7, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "9": [[9, 8, 7, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 0]], "10": [[10, 9, 8, 7, 5, 3, 2, 5, 3, 2, 7, 5, 3, 2, 0]]}}
{"id": 15261, "code": "int x = 13, y = 3, z = 1;\nint s = z;\nint count = 0;\nfor (long i = 0; i < Math.pow(10, 99); i++) {\ns += y;\nif (s <= x - z) {\ncount += 1;\n} else if (s > x - z) {\nbreak;}\ns += z;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "s", "=", "z", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "for", "(", "long", "i", "=", "0", ";", "i", "<", "Math", ".", "pow", "(", "10", ",", "99", ")", ";", "i", "++", ")", "{", "<4>", "s", "+=", "y", ";", "<5>", "if", "(", "s", "<=", "x", "-", "z", ")", "{", "<6>", "count", "+=", "1", ";", "<7>", "}", "else", "if", "(", "s", ">", "x", "-", "z", ")", "{", "<8>", "break", ";", "}", "<9>", "s", "+=", "z", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "1"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "1"], ["count", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "1"], ["count", "0"], ["i", "0"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "4"], ["count", "0"], ["i", "0"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "4"], ["count", "0"], ["i", "0"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "4"], ["count", "1"], ["i", "0"]]}, {"line": 9, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "5"], ["count", "1"], ["i", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "5"], ["count", "1"], ["i", "1"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "8"], ["count", "1"], ["i", "1"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "8"], ["count", "1"], ["i", "1"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "8"], ["count", "2"], ["i", "1"]]}, {"line": 9, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "9"], ["count", "2"], ["i", "1"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "9"], ["count", "2"], ["i", "2"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "12"], ["count", "2"], ["i", "2"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "12"], ["count", "2"], ["i", "2"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "12"], ["count", "3"], ["i", "2"]]}, {"line": 9, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "13"], ["count", "3"], ["i", "2"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "13"], ["count", "3"], ["i", "3"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "16"], ["count", "3"], ["i", "3"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "16"], ["count", "3"], ["i", "3"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "16"], ["count", "3"], ["i", "3"]]}, {"line": 8, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "16"], ["count", "3"], ["i", "3"]]}, {"line": 10, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["s", "16"], ["count", "3"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3], [3], [3], [3]], "4": [[4, 1, 0], [4, 9, 5, 4, 1, 0], [4, 9, 5, 4, 9, 5, 4, 1, 0], [4, 9, 5, 4, 9, 5, 4, 9, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 9, 5, 4, 1, 0], [5, 4, 9, 5, 4, 9, 5, 4, 1, 0], [5, 4, 9, 5, 4, 9, 5, 4, 9, 5, 4, 1, 0]], "6": [[6, 2], [6, 2], [6, 2]], "7": [[7, 5, 4, 9, 5, 4, 9, 5, 4, 9, 5, 4, 1, 0]], "8": [[8]], "9": [[9, 5, 4, 1, 0], [9, 5, 4, 9, 5, 4, 1, 0], [9, 5, 4, 9, 5, 4, 9, 5, 4, 1, 0]], "10": [[10, 6, 2]]}}
{"id": 14268, "code": "int N = 7;\nint[] A = {1, 2, 3, 2, 1, 999999999, 1000000000};\nboolean increase = true;\nboolean equal = true;\nboolean start = true;\nint count = 1;\nfor (int i = 0; i < A.length; i++) {int a = A[i];\nif (i > 0) {\nif (equal) {\nif (a > A[i - 1]) {\nincrease = true;\nequal = false;\n} else if (a < A[i - 1]) {\nincrease = false;\nequal = false;}\n} else {\nif (increase) {\nif (a < A[i - 1]) {\ncount += 1;\nequal = true;}\n} else {\nif (a > A[i - 1]) {\ncount += 1;\nequal = true;\nstart = true;}}}}}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "boolean", "increase", "=", "true", ";", "<3>", "boolean", "equal", "=", "true", ";", "<4>", "boolean", "start", "=", "true", ";", "<5>", "int", "count", "=", "1", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "A", ".", "length", ";", "i", "++", ")", "{", "int", "a", "=", "A", "[", "i", "]", ";", "<7>", "if", "(", "i", ">", "0", ")", "{", "<8>", "if", "(", "equal", ")", "{", "<9>", "if", "(", "a", ">", "A", "[", "i", "-", "1", "]", ")", "{", "<10>", "increase", "=", "true", ";", "<11>", "equal", "=", "false", ";", "<12>", "}", "else", "if", "(", "a", "<", "A", "[", "i", "-", "1", "]", ")", "{", "<13>", "increase", "=", "false", ";", "<14>", "equal", "=", "false", ";", "}", "<15>", "}", "else", "{", "<16>", "if", "(", "increase", ")", "{", "<17>", "if", "(", "a", "<", "A", "[", "i", "-", "1", "]", ")", "{", "<18>", "count", "+=", "1", ";", "<19>", "equal", "=", "true", ";", "}", "<20>", "}", "else", "{", "<21>", "if", "(", "a", ">", "A", "[", "i", "-", "1", "]", ")", "{", "<22>", "count", "+=", "1", ";", "<23>", "equal", "=", "true", ";", "<24>", "start", "=", "true", ";", "}", "}", "}", "}", "}", "<25>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"]]}, {"line": 3, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "0"], ["a", "1"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "0"], ["a", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "1"], ["a", "2"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "1"], ["a", "2"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "1"], ["a", "2"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "1"], ["a", "2"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "1"], ["i", "1"], ["a", "2"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "1"], ["a", "2"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "2"], ["a", "3"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "2"], ["a", "3"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "2"], ["a", "3"]]}, {"line": 16, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "2"], ["a", "3"]]}, {"line": 17, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "2"], ["a", "3"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "3"], ["a", "2"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "3"], ["a", "2"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "3"], ["a", "2"]]}, {"line": 16, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "3"], ["a", "2"]]}, {"line": 17, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "1"], ["i", "3"], ["a", "2"]]}, {"line": 18, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "3"], ["a", "2"]]}, {"line": 19, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "3"], ["a", "2"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 14, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "4"], ["a", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "5"], ["a", "999999999"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "5"], ["a", "999999999"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "5"], ["a", "999999999"]]}, {"line": 16, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "5"], ["a", "999999999"]]}, {"line": 21, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "2"], ["i", "5"], ["a", "999999999"]]}, {"line": 22, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "False"], ["start", "True"], ["count", "3"], ["i", "5"], ["a", "999999999"]]}, {"line": 23, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "5"], ["a", "999999999"]]}, {"line": 24, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "5"], ["a", "999999999"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "False"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "True"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}, {"line": 25, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["increase", "True"], ["equal", "False"], ["start", "True"], ["count", "3"], ["i", "6"], ["a", "1000000000"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 7, 6, 1], [6, 9, 7, 6, 7, 6, 1], [6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [6, 21, 7, 6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [6, 9, 7, 6, 21, 7, 6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1]], "7": [[7, 6, 1], [7, 6, 7, 6, 1], [7, 6, 9, 7, 6, 7, 6, 1], [7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [7, 6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [7, 6, 21, 7, 6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1]], "8": [[8, 3], [8, 11, 8, 3], [8, 11, 8, 3], [8, 19, 8, 11, 8, 3], [8, 14, 8, 19, 8, 11, 8, 3], [8, 23, 8, 14, 8, 19, 8, 11, 8, 3]], "9": [[9, 7, 6, 7, 6, 1], [9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1], [9, 7, 6, 21, 7, 6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1]], "10": [[10, 2], [10, 16, 13, 16, 10, 2]], "11": [[11, 8, 3], [11, 8, 23, 8, 14, 8, 19, 8, 11, 8, 3]], "12": [[12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1]], "13": [[13, 16, 10, 2]], "14": [[14, 8, 19, 8, 11, 8, 3]], "16": [[16, 10, 2], [16, 10, 2], [16, 13, 16, 10, 2]], "17": [[17, 7, 6, 9, 7, 6, 7, 6, 1], [17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1]], "18": [[18, 5]], "19": [[19, 8, 11, 8, 3]], "21": [[21, 7, 6, 12, 9, 7, 6, 17, 7, 6, 17, 7, 6, 9, 7, 6, 7, 6, 1]], "22": [[22, 18, 5]], "23": [[23, 8, 14, 8, 19, 8, 11, 8, 3]], "24": [[24, 4]], "25": [[25, 22, 18, 5]]}}
{"id": 3218, "code": "String S = \"1111111111\";\nint r = 1000;\nfor (int i = 0; i < S.length() - 2; i++) {\nr = Math.min(r, Math.abs(Integer.parseInt(S.substring(i, i + 3)) - 753));}\nSystem.out.println(r);", "code_tokens": ["<0>", "String", "S", "=", "\"1111111111\"", ";", "<1>", "int", "r", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "r", "=", "Math", ".", "min", "(", "r", ",", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ")", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "r", ")", ";"], "trace": [{"line": 0, "state": [["S", "1111111111"]]}, {"line": 1, "state": [["S", "1111111111"], ["r", "1000"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "1000"], ["i", "0"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "0"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "1"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "1"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "2"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "2"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "3"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "3"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "4"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "4"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "5"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "5"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "6"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "6"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "7"]]}, {"line": 3, "state": [["S", "1111111111"], ["r", "642"], ["i", "7"]]}, {"line": 2, "state": [["S", "1111111111"], ["r", "642"], ["i", "7"]]}, {"line": 4, "state": [["S", "1111111111"], ["r", "642"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 5002, "code": "String S = \"internationalization\";\nint s_num = S.length() - 2;\nSystem.out.println(S.charAt(0) + String.valueOf(s_num) + S.charAt(S.length() - 1));", "code_tokens": ["<0>", "String", "S", "=", "\"internationalization\"", ";", "<1>", "int", "s_num", "=", "S", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s_num", ")", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "internationalization"]]}, {"line": 1, "state": [["S", "internationalization"], ["s_num", "18"]]}, {"line": 2, "state": [["S", "internationalization"], ["s_num", "18"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 7965, "code": "int n = 3, k = 3;int[] a = {1, 2, 3};\nSystem.out.println(new int[]{(int) Math.ceil((n - k) / (double) (k - 1)) + 1, 1}[n == k ? 1 : 0]);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "new", "int", "[", "]", "{", "(", "int", ")", "Math", ".", "ceil", "(", "(", "n", "-", "k", ")", "/", "(", "double", ")", "(", "k", "-", "1", ")", ")", "+", "1", ",", "1", "}", "[", "n", "==", "k", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 9751, "code": "int N = 3;\nString S = \"())\";\nint b = 0;\nint e = 0;\nfor (char s : S.toCharArray()) {\nif (s == ')') {\ne += 1;}\nelse {\nb += 1;}\nS = \"(\".repeat(Math.max(e - b, 0)) + S;\nb += Math.max(e - b, 0);}\nS += \")\".repeat(Math.max(b - e, 0));\nSystem.out.println(S);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "String", "S", "=", "\"())\"", ";", "<2>", "int", "b", "=", "0", ";", "<3>", "int", "e", "=", "0", ";", "<4>", "for", "(", "char", "s", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "s", "==", "')'", ")", "{", "<6>", "e", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "b", "+=", "1", ";", "}", "<9>", "S", "=", "\"(\"", ".", "repeat", "(", "Math", ".", "max", "(", "e", "-", "b", ",", "0", ")", ")", "+", "S", ";", "<10>", "b", "+=", "Math", ".", "max", "(", "e", "-", "b", ",", "0", ")", ";", "}", "<11>", "S", "+=", "\")\"", ".", "repeat", "(", "Math", ".", "max", "(", "b", "-", "e", ",", "0", ")", ")", ";", "<12>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"], ["S", "())"]]}, {"line": 2, "state": [["N", "3"], ["S", "())"], ["b", "0"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"], ["b", "0"], ["e", "0"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["b", "0"], ["e", "0"], ["s", "("]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["b", "0"], ["e", "0"], ["s", "("]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "0"], ["s", "("]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "0"], ["s", "("]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "0"], ["s", "("]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "0"], ["s", ")"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "0"], ["s", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "1"], ["s", ")"]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "1"], ["s", ")"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "1"], ["s", ")"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "1"], ["s", ")"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "1"], ["s", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["b", "1"], ["e", "2"], ["s", ")"]]}, {"line": 9, "state": [["N", "3"], ["S", "()"], ["b", "1"], ["e", "2"], ["s", ")"]]}, {"line": 10, "state": [["N", "3"], ["S", "()"], ["b", "2"], ["e", "2"], ["s", ")"]]}, {"line": 4, "state": [["N", "3"], ["S", "()"], ["b", "2"], ["e", "2"], ["s", ")"]]}, {"line": 11, "state": [["N", "3"], ["b", "2"], ["e", "2"], ["s", ")"], ["S", "()"]]}, {"line": 12, "state": [["N", "3"], ["b", "2"], ["e", "2"], ["s", ")"], ["S", "()"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1]], "6": [[6, 10, 9, 8, 2], [6, 10, 9, 6, 10, 9, 8, 2]], "8": [[8, 2]], "9": [[9, 8, 2], [9, 6, 10, 9, 8, 2], [9, 6, 10, 9, 6, 10, 9, 8, 2]], "10": [[10, 9, 8, 2], [10, 9, 6, 10, 9, 8, 2], [10, 9, 6, 10, 9, 6, 10, 9, 8, 2]], "11": [[11, 4, 5, 4, 5, 4, 5, 4, 1]], "12": [[12, 11, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 7663, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nint sum = 0;\nfor (int i = 0; i < n; i++) {\nsum += a[i];}\nif (sum >= h) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "sum", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "sum", "+=", "a", "[", "i", "]", ";", "}", "<5>", "if", "(", "sum", ">=", "h", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "0"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "0"], ["i", "0"]]}, {"line": 4, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "31"], ["i", "0"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "31"], ["i", "1"]]}, {"line": 4, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "72"], ["i", "1"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "72"], ["i", "2"]]}, {"line": 4, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "131"], ["i", "2"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "131"], ["i", "3"]]}, {"line": 4, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "157"], ["i", "3"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "157"], ["i", "4"]]}, {"line": 4, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 5, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 6, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "6": [[6]]}}
{"id": 15421, "code": "Scanner scanner = new Scanner(System.in);\nint X = 100000, Y = 1, Z = 1;\nSystem.out.println((X - Z) / (Y + Z));", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "X", "=", "100000", ",", "Y", "=", "1", ",", "Z", "=", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "X", "-", "Z", ")", "/", "(", "Y", "+", "Z", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": []}, {"line": 5, "state": [["X", "100000"], ["Y", "1"], ["Z", "1"]]}, {"line": 6, "state": [["X", "100000"], ["Y", "1"], ["Z", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5]], "6": [[6, 5]]}}
{"id": 15827, "code": "int x = 13, y = 3, z = 1;\nint res = (x - z) / (y + z);\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "res", "=", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["res", "3"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["res", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4113, "code": "int h1 = 10, m1 = 0, h2 = 12, m2 = 0, k = 120;\nint ans = (h2 - h1) * 60 + (m2 - m1) - k;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "12", ",", "m2", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "ans", "=", "(", "h2", "-", "h1", ")", "*", "60", "+", "(", "m2", "-", "m1", ")", "-", "k", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["ans", "0"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11993, "code": "int month1 = 11, day1 = 30;\nint month2 = 12, day2 = 1;\nif (month1 == month2) {\nSystem.out.println(\"0\");\n} else {\nSystem.out.println(\"1\");}", "code_tokens": ["<0>", "int", "month1", "=", "11", ",", "day1", "=", "30", ";", "<1>", "int", "month2", "=", "12", ",", "day2", "=", "1", ";", "<2>", "if", "(", "month1", "==", "month2", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["month1", "11"], ["day1", "30"]]}, {"line": 1, "state": [["month1", "11"], ["day1", "30"], ["month2", "12"], ["day2", "1"]]}, {"line": 2, "state": [["month1", "11"], ["day1", "30"], ["month2", "12"], ["day2", "1"]]}, {"line": 5, "state": [["month1", "11"], ["day1", "30"], ["month2", "12"], ["day2", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 13510, "code": "String sentence = \"abcde,fghihgf,edcba\";\nSystem.out.println(sentence.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "sentence", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "sentence", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["sentence", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["sentence", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8254, "code": "int N = 4, K = 3;\nint[] A = {2, 3, 1, 4};\nint cnt = 0;\nfor (int i = 0; i <= 100000; i++) {\nN -= K;\ncnt += 1;\nif (N <= 0) {\nbreak;}\nelse {\nN += 1;}}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "N", "=", "4", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "cnt", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "100000", ";", "i", "++", ")", "{", "<4>", "N", "-=", "K", ";", "<5>", "cnt", "+=", "1", ";", "<6>", "if", "(", "N", "<=", "0", ")", "{", "<7>", "break", ";", "}", "<8>", "else", "{", "<9>", "N", "+=", "1", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"], ["K", "3"]]}, {"line": 1, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "0"]]}, {"line": 3, "state": [["N", "4"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "0"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "1"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "1"], ["i", "0"]]}, {"line": 9, "state": [["N", "2"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "1"], ["i", "0"]]}, {"line": 3, "state": [["N", "2"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "1"], ["i", "1"]]}, {"line": 4, "state": [["N", "-1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "-1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "2"], ["i", "1"]]}, {"line": 6, "state": [["N", "-1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "2"], ["i", "1"]]}, {"line": 7, "state": [["N", "-1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "2"], ["i", "1"]]}, {"line": 10, "state": [["N", "-1"], ["K", "3"], ["A", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "2"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3]], "4": [[4, 0], [4, 9, 6, 4, 0]], "5": [[5, 2], [5, 2]], "6": [[6, 4, 0], [6, 4, 9, 6, 4, 0]], "7": [[7]], "9": [[9, 6, 4, 0]], "10": [[10, 5, 2]]}}
{"id": 9031, "code": "int a = 15;\nint b = 18;\nint c = 26;\nint d = 35;\nint e = 36;\nint k = 18;\nif (k < b - a) {\nSystem.out.println(\":(\");\n} else if (k < c - a) {\nSystem.out.println(\":(\");\n} else if (k < d - a) {\nSystem.out.println(\":(\");\n} else if (k < e - a) {\nSystem.out.println(\":(\");\n} else if (k < c - b) {\nSystem.out.println(\":(\");\n} else if (k < d - b) {\nSystem.out.println(\":(\");\n} else if (k < e - b) {\nSystem.out.println(\":(\");\n} else if (k < d - c) {\nSystem.out.println(\":(\");\n} else if (k < e - c) {\nSystem.out.println(\":(\");\n} else if (k < e - d) {\nSystem.out.println(\":(\");\n} else {\nSystem.out.println(\"Yay!\");}", "code_tokens": ["<0>", "int", "a", "=", "15", ";", "<1>", "int", "b", "=", "18", ";", "<2>", "int", "c", "=", "26", ";", "<3>", "int", "d", "=", "35", ";", "<4>", "int", "e", "=", "36", ";", "<5>", "int", "k", "=", "18", ";", "<6>", "if", "(", "k", "<", "b", "-", "a", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<8>", "}", "else", "if", "(", "k", "<", "c", "-", "a", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<10>", "}", "else", "if", "(", "k", "<", "d", "-", "a", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<12>", "}", "else", "if", "(", "k", "<", "e", "-", "a", ")", "{", "<13>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<14>", "}", "else", "if", "(", "k", "<", "c", "-", "b", ")", "{", "<15>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<16>", "}", "else", "if", "(", "k", "<", "d", "-", "b", ")", "{", "<17>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<18>", "}", "else", "if", "(", "k", "<", "e", "-", "b", ")", "{", "<19>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<20>", "}", "else", "if", "(", "k", "<", "d", "-", "c", ")", "{", "<21>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<22>", "}", "else", "if", "(", "k", "<", "e", "-", "c", ")", "{", "<23>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<24>", "}", "else", "if", "(", "k", "<", "e", "-", "d", ")", "{", "<25>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "<26>", "}", "else", "{", "<27>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "15"]]}, {"line": 1, "state": [["a", "15"], ["b", "18"]]}, {"line": 2, "state": [["a", "15"], ["b", "18"], ["c", "26"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 10, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 11, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 5, 1, 0]], "8": [[8, 6, 5, 1, 0]], "10": [[10, 8, 6, 5, 1, 0]], "11": [[11]]}}
{"id": 1740, "code": "int n = 10, a = 7, b = 5;\nSystem.out.println(Math.min(a, b));\nif (a + b <= n) {\nSystem.out.println('0');\n} else {\nSystem.out.println((a + b) - n);}", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", ")", ";", "<2>", "if", "(", "a", "+", "b", "<=", "n", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "'0'", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "(", "a", "+", "b", ")", "-", "n", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 5, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 2, 1, 0]]}}
{"id": 16970, "code": "String a = \"D\";String b = \"D\";\nString[][] ok = {{\"H\", \"H\"}, {\"D\", \"D\"}};\nboolean found = false;for (String[] pair : ok) {if (pair[0].equals(a) && pair[1].equals(b)) {found = true;break;}}if (found) {\nSystem.out.println(\"H\");\n} else {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "String", "[", "]", "[", "]", "ok", "=", "{", "{", "\"H\"", ",", "\"H\"", "}", ",", "{", "\"D\"", ",", "\"D\"", "}", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "String", "[", "]", "pair", ":", "ok", ")", "{", "if", "(", "pair", "[", "0", "]", ".", "equals", "(", "a", ")", "&&", "pair", "[", "1", "]", ".", "equals", "(", "b", ")", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"], ["ok", "[ (H , H) , (D , D) ]"]]}, {"line": 2, "state": [["a", "D"], ["b", "D"], ["ok", "[ (H , H) , (D , D) ]"]]}, {"line": 3, "state": [["a", "D"], ["b", "D"], ["ok", "[ (H , H) , (D , D) ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 13153, "code": "int x = 5;\nint[] data = {7, 5, 3};\nboolean found = false;for (int value : data) {if (value == x) {found = true;break;}}if (found) {\nSystem.out.println(\"YES\");} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "x", "=", "5", ";", "<1>", "int", "[", "]", "data", "=", "{", "7", ",", "5", ",", "3", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "int", "value", ":", "data", ")", "{", "if", "(", "value", "==", "x", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "5"]]}, {"line": 1, "state": [["x", "5"], ["data", "[ 7 , 5 , 3 ]"]]}, {"line": 2, "state": [["x", "5"], ["data", "[ 7 , 5 , 3 ]"]]}, {"line": 3, "state": [["x", "5"], ["data", "[ 7 , 5 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 9384, "code": "String a = \"2017/01/07\";\nSystem.out.println(\"2018\" + a.substring(4));", "code_tokens": ["<0>", "String", "a", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "a", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017/01/07"]]}, {"line": 1, "state": [["a", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5016, "code": "String n = \"xyz\";\nchar[] nArray = n.toCharArray();\nchar a = nArray[0];\nchar b = nArray[nArray.length - 1];\nint c = nArray.length - 2; // since we pop two elements\nSystem.out.println(a + String.valueOf(c) + b);", "code_tokens": ["<0>", "String", "n", "=", "\"xyz\"", ";", "<1>", "char", "[", "]", "nArray", "=", "n", ".", "toCharArray", "(", ")", ";", "<2>", "char", "a", "=", "nArray", "[", "0", "]", ";", "<3>", "char", "b", "=", "nArray", "[", "nArray", ".", "length", "-", "1", "]", ";", "<4>", "int", "c", "=", "nArray", ".", "length", "-", "2", ";", "// since we pop two elements", "<5>", "System", ".", "out", ".", "println", "(", "a", "+", "String", ".", "valueOf", "(", "c", ")", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["n", "xyz"]]}, {"line": 1, "state": [["n", "[ x , y , z ]"]]}, {"line": 2, "state": [["n", "[ y , z ]"], ["a", "x"]]}, {"line": 3, "state": [["n", "[ y ]"], ["a", "x"], ["b", "z"]]}, {"line": 4, "state": [["n", "[ y ]"], ["a", "x"], ["b", "z"], ["c", "1"]]}, {"line": 5, "state": [["n", "[ y ]"], ["a", "x"], ["b", "z"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 1185, "code": "int n = 111;\nwhile (true) {\nif (String.valueOf(n).chars().distinct().count() == 1) {\nSystem.out.println(n);\nbreak;}\nn += 1;}", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "while", "(", "true", ")", "{", "<2>", "if", "(", "String", ".", "valueOf", "(", "n", ")", ".", "chars", "(", ")", ".", "distinct", "(", ")", ".", "count", "(", ")", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "<4>", "break", ";", "}", "<5>", "n", "+=", "1", ";", "}"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"]]}, {"line": 2, "state": [["n", "111"]]}, {"line": 3, "state": [["n", "111"]]}, {"line": 4, "state": [["n", "111"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4]]}}
{"id": 675, "code": "int k = 101;\nk *= 9;\nint amari = 63;\nfor (int i = 1; i <= 10_000_000; i++) {\namari %= k;\nif (amari == 0) {\nSystem.out.println(i);\nbreak;}\nelse {\namari = amari * 10 + 63;}}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "k", "=", "101", ";", "<1>", "k", "*=", "9", ";", "<2>", "int", "amari", "=", "63", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "10_000_000", ";", "i", "++", ")", "{", "<4>", "amari", "%=", "k", ";", "<5>", "if", "(", "amari", "==", "0", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<7>", "break", ";", "}", "<8>", "else", "{", "<9>", "amari", "=", "amari", "*", "10", "+", "63", ";", "}", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["k", "101"]]}, {"line": 1, "state": [["k", "909"]]}, {"line": 2, "state": [["k", "909"], ["amari", "63"]]}, {"line": 3, "state": [["k", "909"], ["amari", "63"], ["i", "1"]]}, {"line": 4, "state": [["k", "909"], ["amari", "63"], ["i", "1"]]}, {"line": 5, "state": [["k", "909"], ["amari", "63"], ["i", "1"]]}, {"line": 9, "state": [["k", "909"], ["amari", "693"], ["i", "1"]]}, {"line": 3, "state": [["k", "909"], ["amari", "693"], ["i", "2"]]}, {"line": 4, "state": [["k", "909"], ["amari", "693"], ["i", "2"]]}, {"line": 5, "state": [["k", "909"], ["amari", "693"], ["i", "2"]]}, {"line": 9, "state": [["k", "909"], ["amari", "6993"], ["i", "2"]]}, {"line": 3, "state": [["k", "909"], ["amari", "6993"], ["i", "3"]]}, {"line": 4, "state": [["k", "909"], ["amari", "630"], ["i", "3"]]}, {"line": 5, "state": [["k", "909"], ["amari", "630"], ["i", "3"]]}, {"line": 9, "state": [["k", "909"], ["amari", "6363"], ["i", "3"]]}, {"line": 3, "state": [["k", "909"], ["amari", "6363"], ["i", "4"]]}, {"line": 4, "state": [["k", "909"], ["amari", "0"], ["i", "4"]]}, {"line": 5, "state": [["k", "909"], ["amari", "0"], ["i", "4"]]}, {"line": 6, "state": [["k", "909"], ["amari", "0"], ["i", "4"]]}, {"line": 7, "state": [["k", "909"], ["amari", "0"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3], [3], [3], [3]], "4": [[4, 2, 1, 0], [4, 9, 5, 4, 2, 1, 0], [4, 9, 5, 4, 9, 5, 4, 2, 1, 0], [4, 9, 5, 4, 9, 5, 4, 9, 5, 4, 2, 1, 0]], "5": [[5, 4, 2, 1, 0], [5, 4, 9, 5, 4, 2, 1, 0], [5, 4, 9, 5, 4, 9, 5, 4, 2, 1, 0], [5, 4, 9, 5, 4, 9, 5, 4, 9, 5, 4, 2, 1, 0]], "6": [[6, 3, 3, 3, 3]], "7": [[7]], "9": [[9, 5, 4, 2, 1, 0], [9, 5, 4, 9, 5, 4, 2, 1, 0], [9, 5, 4, 9, 5, 4, 9, 5, 4, 2, 1, 0]]}}
{"id": 3215, "code": "String s = \"1111111111\";\nint n = s.length();\nint ret = 753;\nfor (int i = 0; i < n - 2; i++) {\nint x = Math.abs(753 - Integer.parseInt(s.substring(i, i + 3)));\nret = Math.min(x, ret);}\nSystem.out.println(ret);", "code_tokens": ["<0>", "String", "s", "=", "\"1111111111\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "ret", "=", "753", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "2", ";", "i", "++", ")", "{", "<4>", "int", "x", "=", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ")", ";", "<5>", "ret", "=", "Math", ".", "min", "(", "x", ",", "ret", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ret", ")", ";"], "trace": [{"line": 0, "state": [["s", "1111111111"]]}, {"line": 1, "state": [["s", "1111111111"], ["n", "10"]]}, {"line": 2, "state": [["s", "1111111111"], ["n", "10"], ["ret", "753"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "753"], ["i", "0"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "753"], ["i", "0"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "0"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "1"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "1"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "1"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "2"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "2"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "2"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "3"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "3"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "3"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "4"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "4"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "4"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "5"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "5"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "5"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "6"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "6"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "6"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "7"], ["x", "642"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "7"], ["x", "642"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "7"], ["x", "642"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "7"], ["x", "642"]]}, {"line": 6, "state": [["s", "1111111111"], ["n", "10"], ["ret", "642"], ["i", "7"], ["x", "642"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 4196, "code": "String input = \"<function <lambda>>\";\nint h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint m = 60 - m1;\nh1 += 1;\nm += (h2 - h1) * 60 + m2;\nSystem.out.println(Math.max(0, m - k));", "code_tokens": ["<0>", "String", "input", "=", "\"<function <lambda>>\"", ";", "<1>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<2>", "int", "m", "=", "60", "-", "m1", ";", "<3>", "h1", "+=", "1", ";", "<4>", "m", "+=", "(", "h2", "-", "h1", ")", "*", "60", "+", "m2", ";", "<5>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "m", "-", "k", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["m", "60"]]}, {"line": 4, "state": [["h1", "11"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["m", "60"]]}, {"line": 5, "state": [["h1", "11"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["m", "300"]]}, {"line": 6, "state": [["h1", "11"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["m", "300"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 2]], "5": [[5, 4, 2]], "6": [[6, 5, 4, 2]]}}
{"id": 18424, "code": "int H = 2;\nint W = 100;\nint N = 200;\nint x = Math.max(H, W);\nSystem.out.println((N + x - 1) / x);", "code_tokens": ["<0>", "int", "H", "=", "2", ";", "<1>", "int", "W", "=", "100", ";", "<2>", "int", "N", "=", "200", ";", "<3>", "int", "x", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "x", "-", "1", ")", "/", "x", ")", ";"], "trace": [{"line": 0, "state": [["H", "2"]]}, {"line": 1, "state": [["H", "2"], ["W", "100"]]}, {"line": 2, "state": [["H", "2"], ["W", "100"], ["N", "200"]]}, {"line": 3, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["x", "100"]]}, {"line": 4, "state": [["H", "2"], ["W", "100"], ["N", "200"], ["x", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 4658, "code": "String S = \"smiles\";\nint N = S.length() - 2;\nSystem.out.println(S.charAt(0) + String.valueOf(N) + S.charAt(S.length() - 1));", "code_tokens": ["<0>", "String", "S", "=", "\"smiles\"", ";", "<1>", "int", "N", "=", "S", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "N", ")", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "smiles"]]}, {"line": 1, "state": [["S", "smiles"], ["N", "4"]]}, {"line": 2, "state": [["S", "smiles"], ["N", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 6253, "code": "int n = 2;\nint[] a = {1, 5};\nint[] b = {2, 4};\nint[] c = {3, 6};\njava.util.Arrays.sort(a);\njava.util.Arrays.sort(b);\njava.util.Arrays.sort(c);\nint ans = 0;\nint j = 0;\nint k = 0;\nfor (int i = 0; i < n; i++) {\nif (j < n) {\nwhile (j < n && a[j] < b[i]) {\nj++;\nif (j == n) {\nbreak;}}}\nif (k < n) {\nwhile (k < n && c[k] <= b[i]) {\nk++;\nif (k == n) {\nbreak;}}}\nans += j * (n - k);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "6", "}", ";", "<4>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "int", "j", "=", "0", ";", "<9>", "int", "k", "=", "0", ";", "<10>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<11>", "if", "(", "j", "<", "n", ")", "{", "<12>", "while", "(", "j", "<", "n", "&&", "a", "[", "j", "]", "<", "b", "[", "i", "]", ")", "{", "<13>", "j", "++", ";", "<14>", "if", "(", "j", "==", "n", ")", "{", "<15>", "break", ";", "}", "}", "}", "<16>", "if", "(", "k", "<", "n", ")", "{", "<17>", "while", "(", "k", "<", "n", "&&", "c", "[", "k", "]", "<=", "b", "[", "i", "]", ")", "{", "<18>", "k", "++", ";", "<19>", "if", "(", "k", "==", "n", ")", "{", "<20>", "break", ";", "}", "}", "}", "<21>", "ans", "+=", "j", "*", "(", "n", "-", "k", ")", ";", "}", "<22>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 1 , 5 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "0"], ["k", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "0"], ["k", "0"], ["i", "0"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "0"], ["k", "0"], ["i", "0"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "0"], ["k", "0"], ["i", "0"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "1"], ["k", "0"], ["i", "0"]]}, {"line": 14, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "1"], ["k", "0"], ["i", "0"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "1"], ["k", "0"], ["i", "0"]]}, {"line": 16, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "1"], ["k", "0"], ["i", "0"]]}, {"line": 17, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "0"], ["j", "1"], ["k", "0"], ["i", "0"]]}, {"line": 21, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "0"], ["i", "1"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "0"], ["i", "1"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "0"], ["i", "1"]]}, {"line": 16, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "0"], ["i", "1"]]}, {"line": 17, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "0"], ["i", "1"]]}, {"line": 18, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "1"], ["i", "1"]]}, {"line": 19, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "1"], ["i", "1"]]}, {"line": 17, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "2"], ["j", "1"], ["k", "1"], ["i", "1"]]}, {"line": 21, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "3"], ["j", "1"], ["k", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "3"], ["j", "1"], ["k", "1"], ["i", "1"]]}, {"line": 22, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ans", "3"], ["j", "1"], ["k", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7]], "8": [[8]], "9": [[9]], "10": [[10, 0], [10, 17, 16, 14, 13, 12, 11, 10, 0], [10, 17, 19, 18, 17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "11": [[11, 10, 0], [11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "12": [[12, 11, 10, 0], [12, 14, 13, 12, 11, 10, 0], [12, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "13": [[13, 12, 11, 10, 0]], "14": [[14, 13, 12, 11, 10, 0]], "16": [[16, 14, 13, 12, 11, 10, 0], [16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "17": [[17, 16, 14, 13, 12, 11, 10, 0], [17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0], [17, 19, 18, 17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "18": [[18, 17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "19": [[19, 18, 17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "21": [[21, 17, 16, 14, 13, 12, 11, 10, 0], [21, 17, 19, 18, 17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]], "22": [[22, 21, 17, 19, 18, 17, 16, 11, 10, 17, 16, 14, 13, 12, 11, 10, 0]]}}
{"id": 14821, "code": "int N = 1, P = 1;\nint[] a = {50};\nint num_odd = 0;for (int i : a) {if (i % 2 == 1) {num_odd++;}}\nint num_even = N - num_odd;\nint ce = (int) Math.pow(2, num_even);\nint co = (int) Math.pow(2, num_odd - 1);\nif (num_odd == 0) {\nco = P ^ 1;}\nSystem.out.println(co * ce);", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "a", "=", "{", "50", "}", ";", "<2>", "int", "num_odd", "=", "0", ";", "for", "(", "int", "i", ":", "a", ")", "{", "if", "(", "i", "%", "2", "==", "1", ")", "{", "num_odd", "++", ";", "}", "}", "<3>", "int", "num_even", "=", "N", "-", "num_odd", ";", "<4>", "int", "ce", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "num_even", ")", ";", "<5>", "int", "co", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "num_odd", "-", "1", ")", ";", "<6>", "if", "(", "num_odd", "==", "0", ")", "{", "<7>", "co", "=", "P", "^", "1", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "co", "*", "ce", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["i", "50"]]}, {"line": 2, "state": [["i", "50"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"], ["num_even", "1"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"], ["num_even", "1"], ["ce", "2"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"], ["num_even", "1"], ["ce", "2"], ["co", "0.5"]]}, {"line": 6, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"], ["num_even", "1"], ["ce", "2"], ["co", "0.5"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"], ["num_even", "1"], ["ce", "2"], ["co", "0"]]}, {"line": 8, "state": [["N", "1"], ["P", "1"], ["a", "[ 50 ]"], ["num_odd", "0"], ["num_even", "1"], ["ce", "2"], ["co", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1], [2, 1], [2, 1], [2, 1], [2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1]], "7": [[7, 5, 3, 2, 1]], "8": [[8, 7, 5, 3, 2, 1]]}}
{"id": 4847, "code": "String N = \"smiles\";\nint a = N.length();\nString ans = N.charAt(0) + Integer.toString(a - 2) + N.charAt(N.length() - 1);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "N", "=", "\"smiles\"", ";", "<1>", "int", "a", "=", "N", ".", "length", "(", ")", ";", "<2>", "String", "ans", "=", "N", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "a", "-", "2", ")", "+", "N", ".", "charAt", "(", "N", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "smiles"]]}, {"line": 1, "state": [["N", "smiles"], ["a", "6"]]}, {"line": 2, "state": [["N", "smiles"], ["a", "6"], ["ans", "s4s"]]}, {"line": 3, "state": [["N", "smiles"], ["a", "6"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 16525, "code": "int n = 5;\nint[] a_list = {6, 9, 4, 2, 11};\nArrays.sort(a_list);\nint a_max = a_list[n - 1];\nint[] temp_max = {1, 0};\nint bunbo = 1;\nint bunshi = 1;\nint center = (a_max + 1) / 2;\nSet<Integer> a_set = new HashSet<>();for (int a : a_list) {a_set.add(a);}\nint diff_min = a_max;\nint ans = 0;\nfor (int a : a_set) {\nint diff = Math.abs(a - center);\nif (diff_min > diff) {\ndiff_min = diff;\nans = a;}}\nSystem.out.println(a_max + \" \" + ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a_list", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a_list", ")", ";", "<3>", "int", "a_max", "=", "a_list", "[", "n", "-", "1", "]", ";", "<4>", "int", "[", "]", "temp_max", "=", "{", "1", ",", "0", "}", ";", "<5>", "int", "bunbo", "=", "1", ";", "<6>", "int", "bunshi", "=", "1", ";", "<7>", "int", "center", "=", "(", "a_max", "+", "1", ")", "/", "2", ";", "<8>", "Set", "<", "Integer", ">", "a_set", "=", "new", "HashSet", "<", ">", "(", ")", ";", "for", "(", "int", "a", ":", "a_list", ")", "{", "a_set", ".", "add", "(", "a", ")", ";", "}", "<9>", "int", "diff_min", "=", "a_max", ";", "<10>", "int", "ans", "=", "0", ";", "<11>", "for", "(", "int", "a", ":", "a_set", ")", "{", "<12>", "int", "diff", "=", "Math", ".", "abs", "(", "a", "-", "center", ")", ";", "<13>", "if", "(", "diff_min", ">", "diff", ")", "{", "<14>", "diff_min", "=", "diff", ";", "<15>", "ans", "=", "a", ";", "}", "}", "<16>", "System", ".", "out", ".", "println", "(", "a_max", "+", "\" \"", "+", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a_list", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"]]}, {"line": 3, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"]]}, {"line": 4, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"]]}, {"line": 5, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"]]}, {"line": 6, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"]]}, {"line": 7, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"]]}, {"line": 8, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"]]}, {"line": 9, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "11"]]}, {"line": 10, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "11"], ["ans", "0"]]}, {"line": 11, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "11"], ["ans", "0"], ["a", "2"]]}, {"line": 12, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "11"], ["ans", "0"], ["a", "2"], ["diff", "4"]]}, {"line": 13, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "11"], ["ans", "0"], ["a", "2"], ["diff", "4"]]}, {"line": 14, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "4"], ["ans", "0"], ["a", "2"], ["diff", "4"]]}, {"line": 15, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "4"], ["ans", "2"], ["a", "2"], ["diff", "4"]]}, {"line": 11, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "4"], ["ans", "2"], ["a", "4"], ["diff", "4"]]}, {"line": 12, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "4"], ["ans", "2"], ["a", "4"], ["diff", "2"]]}, {"line": 13, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "4"], ["ans", "2"], ["a", "4"], ["diff", "2"]]}, {"line": 14, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "2"], ["ans", "2"], ["a", "4"], ["diff", "2"]]}, {"line": 15, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "2"], ["ans", "4"], ["a", "4"], ["diff", "2"]]}, {"line": 11, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "2"], ["ans", "4"], ["a", "6"], ["diff", "2"]]}, {"line": 12, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "2"], ["ans", "4"], ["a", "6"], ["diff", "0"]]}, {"line": 13, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "2"], ["ans", "4"], ["a", "6"], ["diff", "0"]]}, {"line": 14, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "4"], ["a", "6"], ["diff", "0"]]}, {"line": 15, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "6"], ["diff", "0"]]}, {"line": 11, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "9"], ["diff", "0"]]}, {"line": 12, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "9"], ["diff", "3"]]}, {"line": 13, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "9"], ["diff", "3"]]}, {"line": 11, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "11"], ["diff", "3"]]}, {"line": 12, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "11"], ["diff", "5"]]}, {"line": 13, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "11"], ["diff", "5"]]}, {"line": 11, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "11"], ["diff", "5"]]}, {"line": 16, "state": [["n", "5"], ["a_list", "[ 2 , 4 , 6 , 9 , 11 ]"], ["a_max", "11"], ["temp_max", "[ 1 , 0 ]"], ["bunbo", "1"], ["bunshi", "1"], ["center", "6"], ["a_set", "{ 2 , 4 , 6 , 9 , 11 }"], ["diff_min", "0"], ["ans", "6"], ["a", "11"], ["diff", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 3, 2, 1]], "8": [[8, 3, 2, 1]], "9": [[9, 7, 3, 2, 1]], "10": [[10]], "11": [[11, 8, 3, 2, 1], [11, 15, 12, 11, 8, 3, 2, 1], [11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [11, 12, 11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [11, 12, 11, 12, 11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1]], "12": [[12, 11, 8, 3, 2, 1], [12, 11, 15, 12, 11, 8, 3, 2, 1], [12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [12, 11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [12, 11, 12, 11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1]], "13": [[13, 12, 11, 8, 3, 2, 1], [13, 12, 11, 15, 12, 11, 8, 3, 2, 1], [13, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [13, 12, 11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [13, 12, 11, 12, 11, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1]], "14": [[14, 13, 12, 11, 8, 3, 2, 1], [14, 13, 12, 11, 15, 12, 11, 8, 3, 2, 1], [14, 13, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1]], "15": [[15, 12, 11, 8, 3, 2, 1], [15, 12, 11, 15, 12, 11, 8, 3, 2, 1], [15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1]], "16": [[16, 15, 12, 11, 15, 12, 11, 15, 12, 11, 8, 3, 2, 1]]}}
{"id": 18643, "code": "int h = 2;\nint w = 100;\nint n = 200;\nSystem.out.println(Math.min((n + h - 1) / h, (n + w - 1) / w));", "code_tokens": ["<0>", "int", "h", "=", "2", ";", "<1>", "int", "w", "=", "100", ";", "<2>", "int", "n", "=", "200", ";", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "(", "n", "+", "h", "-", "1", ")", "/", "h", ",", "(", "n", "+", "w", "-", "1", ")", "/", "w", ")", ")", ";"], "trace": [{"line": 0, "state": [["h", "2"]]}, {"line": 1, "state": [["h", "2"], ["w", "100"]]}, {"line": 2, "state": [["h", "2"], ["w", "100"], ["n", "200"]]}, {"line": 3, "state": [["h", "2"], ["w", "100"], ["n", "200"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]]}}
{"id": 2123, "code": "String n = \"10\";String A = \"7\";String B = \"5\";\nn = Integer.toString(Integer.parseInt(n));\nint a = Integer.parseInt(A);\nint b = Integer.parseInt(B);\nSystem.out.println(Math.min(a, b) + \" \" + Math.max(b - (Integer.parseInt(n) - a), 0));", "code_tokens": ["<0>", "String", "n", "=", "\"10\"", ";", "String", "A", "=", "\"7\"", ";", "String", "B", "=", "\"5\"", ";", "<1>", "n", "=", "Integer", ".", "toString", "(", "Integer", ".", "parseInt", "(", "n", ")", ")", ";", "<2>", "int", "a", "=", "Integer", ".", "parseInt", "(", "A", ")", ";", "<3>", "int", "b", "=", "Integer", ".", "parseInt", "(", "B", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "Math", ".", "max", "(", "b", "-", "(", "Integer", ".", "parseInt", "(", "n", ")", "-", "a", ")", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "10"], ["A", "7"], ["B", "5"]]}, {"line": 2, "state": [["n", "10"], ["A", "7"], ["B", "5"]]}, {"line": 3, "state": [["n", "10"], ["A", "7"], ["B", "5"]]}, {"line": 4, "state": [["n", "10"], ["A", "7"], ["B", "5"]]}, {"line": 5, "state": [["n", "10"], ["A", "7"], ["B", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]]}}
{"id": 6759, "code": "int HP = 210, N = 5;\nint[] ATK = {31, 41, 59, 26, 53};\nSystem.out.println((sum(ATK) >= HP) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "HP", "=", "210", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "ATK", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "sum", "(", "ATK", ")", ">=", "HP", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["HP", "210"], ["N", "5"]]}, {"line": 1, "state": [["HP", "210"], ["N", "5"], ["ATK", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["HP", "210"], ["N", "5"], ["ATK", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 13301, "code": "String text = \"happy,newyear,enjoy\";\nSystem.out.println(text.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "text", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "text", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["text", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["text", "happy , newyear , enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13568, "code": "String S = \"happy,newyear,enjoy\";\nS = S.replace(',', ' ');\nSystem.out.println(S);", "code_tokens": ["<0>", "String", "S", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "S", "=", "S", ".", "replace", "(", "','", ",", "' '", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["S", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["S", "happy newyear enjoy"]]}, {"line": 2, "state": [["S", "happy newyear enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 14509, "code": "int N = 1, P = 1;\nint[] A = {50};\nint num_k = 0;\nint num_g = 0;\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 == 0) {\nnum_g += 1;}\nelse {\nnum_k += 1;}}\nint n = num_k / 2;\nBigInteger ans_k = BigInteger.ZERO;\nfor (int i = 0; i <= n * 2; i += 2) {\nans_k = ans_k.add(factorial(num_k).divide(factorial(i)).divide(factorial(num_k - i)));}\nBigInteger ans_g = BigInteger.valueOf(2).pow(num_g);\nBigInteger ans = ans_k.multiply(ans_g);\nif (P == 0) {\nSystem.out.println(ans);}\nelse {\nans = BigInteger.valueOf(2).pow(N).subtract(ans);\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "50", "}", ";", "<2>", "int", "num_k", "=", "0", ";", "<3>", "int", "num_g", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "A", "[", "i", "]", "%", "2", "==", "0", ")", "{", "<6>", "num_g", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "num_k", "+=", "1", ";", "}", "}", "<9>", "int", "n", "=", "num_k", "/", "2", ";", "<10>", "BigInteger", "ans_k", "=", "BigInteger", ".", "ZERO", ";", "<11>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "n", "*", "2", ";", "i", "+=", "2", ")", "{", "<12>", "ans_k", "=", "ans_k", ".", "add", "(", "factorial", "(", "num_k", ")", ".", "divide", "(", "factorial", "(", "i", ")", ")", ".", "divide", "(", "factorial", "(", "num_k", "-", "i", ")", ")", ")", ";", "}", "<13>", "BigInteger", "ans_g", "=", "BigInteger", ".", "valueOf", "(", "2", ")", ".", "pow", "(", "num_g", ")", ";", "<14>", "BigInteger", "ans", "=", "ans_k", ".", "multiply", "(", "ans_g", ")", ";", "<15>", "if", "(", "P", "==", "0", ")", "{", "<16>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<17>", "else", "{", "<18>", "ans", "=", "BigInteger", ".", "valueOf", "(", "2", ")", ".", "pow", "(", "N", ")", ".", "subtract", "(", "ans", ")", ";", "<19>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "1"], ["P", "1"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "0"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"]]}, {"line": 10, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"]]}, {"line": 11, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "0"]]}, {"line": 12, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "0"]]}, {"line": 13, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"]]}, {"line": 12, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"]]}, {"line": 14, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"], ["ans_g", "2"]]}, {"line": 15, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"], ["ans_g", "2"], ["ans", "2"]]}, {"line": 16, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"], ["ans_g", "2"], ["ans", "2"]]}, {"line": 19, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"], ["ans_g", "2"], ["ans", "0"]]}, {"line": 20, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["num_k", "0"], ["num_g", "1"], ["i", "0"], ["n", "0"], ["ans_k", "1.0"], ["ans_g", "2"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 6, 5, 1]], "6": [[6, 5, 1]], "7": [[7, 4]], "10": [[10, 3]], "11": [[11]], "12": [[12, 10, 3], [12, 13, 12, 10, 3]], "13": [[13, 12, 10, 3]], "14": [[14, 7, 4]], "15": [[15, 14, 7, 4]], "16": [[16, 1]], "19": [[19, 15, 14, 7, 4]], "20": [[20, 19, 15, 14, 7, 4]]}}
{"id": 10224, "code": "int N = 6;\nString S = \")))())\";\nint add_left = 0;\nint add_right = 0;\nfor (char s : S.toCharArray()) {\nif (s == '(') {\nadd_right += 1;}\nelse if (add_right == 0) {\nadd_left += 1;}\nelse {\nadd_right -= 1;}}\nSystem.out.println(\"(\".repeat(add_left) + S + \")\".repeat(add_right));", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "String", "S", "=", "\")))())\"", ";", "<2>", "int", "add_left", "=", "0", ";", "<3>", "int", "add_right", "=", "0", ";", "<4>", "for", "(", "char", "s", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "s", "==", "'('", ")", "{", "<6>", "add_right", "+=", "1", ";", "}", "<7>", "else", "if", "(", "add_right", "==", "0", ")", "{", "<8>", "add_left", "+=", "1", ";", "}", "<9>", "else", "{", "<10>", "add_right", "-=", "1", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "add_left", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "add_right", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["S", ")))())"]]}, {"line": 2, "state": [["N", "6"], ["S", ")))())"], ["add_left", "0"]]}, {"line": 3, "state": [["N", "6"], ["S", ")))())"], ["add_left", "0"], ["add_right", "0"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "0"], ["add_right", "0"], ["s", ")"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["add_left", "0"], ["add_right", "0"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["add_left", "0"], ["add_right", "0"], ["s", ")"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["add_left", "1"], ["add_right", "0"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "1"], ["add_right", "0"], ["s", ")"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["add_left", "1"], ["add_right", "0"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["add_left", "1"], ["add_right", "0"], ["s", ")"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["add_left", "2"], ["add_right", "0"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "2"], ["add_right", "0"], ["s", ")"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["add_left", "2"], ["add_right", "0"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["add_left", "2"], ["add_right", "0"], ["s", ")"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", "("]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", "("]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "1"], ["s", "("]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "1"], ["s", ")"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "1"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "1"], ["s", ")"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", ")"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["add_left", "3"], ["add_right", "0"], ["s", ")"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["add_left", "4"], ["add_right", "0"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["add_left", "4"], ["add_right", "0"], ["s", ")"]]}, {"line": 11, "state": [["N", "6"], ["S", ")))())"], ["add_left", "4"], ["add_right", "0"], ["s", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "6": [[6, 7, 3]], "7": [[7, 3], [7, 3], [7, 3], [7, 6, 7, 3], [7, 10, 7, 6, 7, 3]], "8": [[8, 2], [8, 2], [8, 2], [8, 2]], "10": [[10, 7, 6, 7, 3]], "11": [[11, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 5746, "code": "int n = 5;\nSystem.out.println(n % 2 != 0 ? (n / 2 + 1) : (n / 2));", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "%", "2", "!=", "0", "?", "(", "n", "/", "2", "+", "1", ")", ":", "(", "n", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1969, "code": "int n = 10, a = 3, b = 5;\nint nmax = Math.min(a, b);\nint nmin = Math.max(a + b - n, 0);\nSystem.out.println(nmax + \" \" + nmin);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "nmax", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "nmin", "=", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "nmax", "+", "\" \"", "+", "nmin", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["nmax", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["nmax", "3"], ["nmin", "0"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["nmax", "3"], ["nmin", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 14344, "code": "int N = 6;\nif (N == 1) {System.out.println(1);System.exit(0);}\nint[] A = {1, 2, 3, 2, 2, 1};\nint ans = 1;\nint cur = A[0];\nboolean Decided = A[0] != A[1];\nboolean Flat = A[0] == A[1];\nboolean Up = A[0] < A[1];\nfor (int n = 1; n < N; n++) {\nif (Decided) {\nif (A[n] == cur) {\ncontinue;}\nif ((A[n] >= cur) == Up) {\ncur = A[n];}\nelse {\ncur = A[n];\nUp = !Up;\nDecided = false;\nans += 1;}}\nelse {\nif (A[n] != cur) {\nUp = A[n] > cur;\ncur = A[n];\nDecided = true;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "if", "(", "N", "==", "1", ")", "{", "System", ".", "out", ".", "println", "(", "1", ")", ";", "System", ".", "exit", "(", "0", ")", ";", "}", "<2>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "1", ";", "<4>", "int", "cur", "=", "A", "[", "0", "]", ";", "<5>", "boolean", "Decided", "=", "A", "[", "0", "]", "!=", "A", "[", "1", "]", ";", "<6>", "boolean", "Flat", "=", "A", "[", "0", "]", "==", "A", "[", "1", "]", ";", "<7>", "boolean", "Up", "=", "A", "[", "0", "]", "<", "A", "[", "1", "]", ";", "<8>", "for", "(", "int", "n", "=", "1", ";", "n", "<", "N", ";", "n", "++", ")", "{", "<9>", "if", "(", "Decided", ")", "{", "<10>", "if", "(", "A", "[", "n", "]", "==", "cur", ")", "{", "<11>", "continue", ";", "}", "<12>", "if", "(", "(", "A", "[", "n", "]", ">=", "cur", ")", "==", "Up", ")", "{", "<13>", "cur", "=", "A", "[", "n", "]", ";", "}", "<14>", "else", "{", "<15>", "cur", "=", "A", "[", "n", "]", ";", "<16>", "Up", "=", "!", "Up", ";", "<17>", "Decided", "=", "false", ";", "<18>", "ans", "+=", "1", ";", "}", "}", "<19>", "else", "{", "<20>", "if", "(", "A", "[", "n", "]", "!=", "cur", ")", "{", "<21>", "Up", "=", "A", "[", "n", "]", ">", "cur", ";", "<22>", "cur", "=", "A", "[", "n", "]", ";", "<23>", "Decided", "=", "true", ";", "}", "}", "}", "<24>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 15, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 16, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "0"], ["n", "3"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "3"]]}, {"line": 18, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "3"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "4"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "4"]]}, {"line": 20, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "4"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "5"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "5"]]}, {"line": 20, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "5"]]}, {"line": 21, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 22, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "False"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 23, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 24, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 2]], "5": [[5, 4, 2]], "6": [[6, 5, 4, 2]], "7": [[7, 6, 5, 4, 2]], "8": [[8, 1, 0], [8, 13, 12, 10, 8, 1, 0], [8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 22, 21, 20, 8, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "9": [[9, 5, 4, 2], [9, 5, 4, 2], [9, 5, 4, 2], [9, 17, 9, 5, 4, 2], [9, 17, 9, 5, 4, 2]], "10": [[10, 8, 1, 0], [10, 8, 13, 12, 10, 8, 1, 0], [10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "12": [[12, 10, 8, 1, 0], [12, 10, 8, 13, 12, 10, 8, 1, 0], [12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "13": [[13, 12, 10, 8, 1, 0], [13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "15": [[15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "16": [[16, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "17": [[17, 9, 5, 4, 2]], "18": [[18, 3]], "20": [[20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [20, 8, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "21": [[21, 20, 8, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "22": [[22, 21, 20, 8, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "23": [[23, 9, 17, 9, 5, 4, 2]], "24": [[24, 18, 3]]}}
{"id": 3650, "code": "int a = 12, b = 4;\nb = b * 2;\nSystem.out.println(Math.max(0, a - b));", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "b", "=", "b", "*", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "a", "-", "b", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "8"]]}, {"line": 2, "state": [["a", "12"], ["b", "8"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 16194, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\njava.util.Arrays.sort(a);\nint M = a[a.length - 1];\nint m = a[0];\nint C = -1;\nfor (int i = 0; i < n; i++) {\nint c = a[i] * (M - a[i]);\nif (C < c) {\nC = c;\nm = a[i];\n} else {\nbreak;}}\nSystem.out.println(M + \" \" + m);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "M", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<4>", "int", "m", "=", "a", "[", "0", "]", ";", "<5>", "int", "C", "=", "-", "1", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "int", "c", "=", "a", "[", "i", "]", "*", "(", "M", "-", "a", "[", "i", "]", ")", ";", "<8>", "if", "(", "C", "<", "c", ")", "{", "<9>", "C", "=", "c", ";", "<10>", "m", "=", "a", "[", "i", "]", ";", "<11>", "}", "else", "{", "<12>", "break", ";", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "M", "+", "\" \"", "+", "m", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "-1"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "-1"], ["i", "0"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "-1"], ["i", "0"], ["c", "18"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "-1"], ["i", "0"], ["c", "18"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "18"], ["i", "0"], ["c", "18"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "18"], ["i", "0"], ["c", "18"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "18"], ["i", "1"], ["c", "18"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "18"], ["i", "1"], ["c", "28"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "18"], ["i", "1"], ["c", "28"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "2"], ["C", "28"], ["i", "1"], ["c", "28"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "4"], ["C", "28"], ["i", "1"], ["c", "28"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "4"], ["C", "28"], ["i", "2"], ["c", "28"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "4"], ["C", "28"], ["i", "2"], ["c", "30"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "4"], ["C", "28"], ["i", "2"], ["c", "30"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "4"], ["C", "30"], ["i", "2"], ["c", "30"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "6"], ["C", "30"], ["i", "2"], ["c", "30"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "6"], ["C", "30"], ["i", "3"], ["c", "30"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "6"], ["C", "30"], ["i", "3"], ["c", "18"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "6"], ["C", "30"], ["i", "3"], ["c", "18"]]}, {"line": 12, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "6"], ["C", "30"], ["i", "3"], ["c", "18"]]}, {"line": 13, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["M", "11"], ["m", "6"], ["C", "30"], ["i", "3"], ["c", "18"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5]], "6": [[6, 0], [6, 10, 7, 6, 0], [6, 10, 7, 6, 10, 7, 6, 0], [6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 10, 7, 6, 0], [7, 6, 10, 7, 6, 10, 7, 6, 0], [7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 0]], "8": [[8, 7, 6, 0], [8, 7, 6, 10, 7, 6, 0], [8, 7, 6, 10, 7, 6, 10, 7, 6, 0], [8, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 0]], "9": [[9, 8, 7, 6, 0], [9, 8, 7, 6, 10, 7, 6, 0], [9, 8, 7, 6, 10, 7, 6, 10, 7, 6, 0]], "10": [[10, 7, 6, 0], [10, 7, 6, 10, 7, 6, 0], [10, 7, 6, 10, 7, 6, 10, 7, 6, 0]], "12": [[12]], "13": [[13, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 0]]}}
{"id": 18237, "code": "int H = 3;\nint W = 7;\nint N = 10;\nint X = 0;\nif (H <= W) {\nX = N / W;\nif (N % W != 0) {\nX = X + 1;}}\nelse {\nX = N / H;\nif (N % H != 0) {\nX = X + 1;}}\nSystem.out.println(X);", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "int", "X", "=", "0", ";", "<4>", "if", "(", "H", "<=", "W", ")", "{", "<5>", "X", "=", "N", "/", "W", ";", "<6>", "if", "(", "N", "%", "W", "!=", "0", ")", "{", "<7>", "X", "=", "X", "+", "1", ";", "}", "}", "<8>", "else", "{", "<9>", "X", "=", "N", "/", "H", ";", "<10>", "if", "(", "N", "%", "H", "!=", "0", ")", "{", "<11>", "X", "=", "X", "+", "1", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "X", ")", ";"], "trace": [{"line": 0, "state": [["H", "3"]]}, {"line": 1, "state": [["H", "3"], ["W", "7"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["X", "0"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["X", "0"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["X", "1"]]}, {"line": 6, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["X", "1"]]}, {"line": 7, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["X", "2"]]}, {"line": 12, "state": [["H", "3"], ["W", "7"], ["N", "10"], ["X", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]], "6": [[6, 5, 4, 1, 0]], "7": [[7, 5, 4, 1, 0]], "12": [[12, 7, 5, 4, 1, 0]]}}
{"id": 18184, "code": "int S = 1700;\nint L = S / 100;\nint R = S % 100;\nif (1 <= L && L <= 12) {\nif (1 <= R && R <= 12) {System.out.println(\"AMBIGUOUS\");}\nelse {System.out.println(\"MMYY\");}}\nelse {\nif (1 <= R && R <= 12) {System.out.println(\"YYMM\");}\nelse {System.out.println(\"NA\");}}", "code_tokens": ["<0>", "int", "S", "=", "1700", ";", "<1>", "int", "L", "=", "S", "/", "100", ";", "<2>", "int", "R", "=", "S", "%", "100", ";", "<3>", "if", "(", "1", "<=", "L", "&&", "L", "<=", "12", ")", "{", "<4>", "if", "(", "1", "<=", "R", "&&", "R", "<=", "12", ")", "{", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<5>", "else", "{", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "1", "<=", "R", "&&", "R", "<=", "12", ")", "{", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<8>", "else", "{", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "1700"]]}, {"line": 1, "state": [["S", "1700"], ["L", "17"]]}, {"line": 2, "state": [["S", "1700"], ["L", "17"], ["R", "0"]]}, {"line": 3, "state": [["S", "1700"], ["L", "17"], ["R", "0"]]}, {"line": 7, "state": [["S", "1700"], ["L", "17"], ["R", "0"]]}, {"line": 8, "state": [["S", "1700"], ["L", "17"], ["R", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "7": [[7, 2, 1, 0]], "8": [[8]]}}
{"id": 9348, "code": "String a = \"2017/01/07\";\nSystem.out.println(\"2018\" + a.substring(4));", "code_tokens": ["<0>", "String", "a", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "a", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017/01/07"]]}, {"line": 1, "state": [["a", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 10136, "code": "int n = 3;\nString s = \"())\";\nint left = 0;\nint left_cnt = 0;\nfor (char i : s.toCharArray()) {\nif (i == '(') {\nleft += 1;}\nelse {\nif (left >= 1) {\nleft -= 1;}\nelse {\nleft_cnt += 1;}}}\nint right = 0;\nint right_cnt = 0;\nfor (int j = s.length() - 1; j >= 0; j--) {char i = s.charAt(j);\nif (i == ')') {\nright += 1;}\nelse {\nif (right >= 1) {\nright -= 1;}\nelse {\nright_cnt += 1;}}}\nSystem.out.print(\"(\".repeat(left_cnt) + s + \")\".repeat(right_cnt));", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "String", "s", "=", "\"())\"", ";", "<2>", "int", "left", "=", "0", ";", "<3>", "int", "left_cnt", "=", "0", ";", "<4>", "for", "(", "char", "i", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "i", "==", "'('", ")", "{", "<6>", "left", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "left", ">=", "1", ")", "{", "<9>", "left", "-=", "1", ";", "}", "<10>", "else", "{", "<11>", "left_cnt", "+=", "1", ";", "}", "}", "}", "<12>", "int", "right", "=", "0", ";", "<13>", "int", "right_cnt", "=", "0", ";", "<14>", "for", "(", "int", "j", "=", "s", ".", "length", "(", ")", "-", "1", ";", "j", ">=", "0", ";", "j", "--", ")", "{", "char", "i", "=", "s", ".", "charAt", "(", "j", ")", ";", "<15>", "if", "(", "i", "==", "')'", ")", "{", "<16>", "right", "+=", "1", ";", "}", "<17>", "else", "{", "<18>", "if", "(", "right", ">=", "1", ")", "{", "<19>", "right", "-=", "1", ";", "}", "<20>", "else", "{", "<21>", "right_cnt", "+=", "1", ";", "}", "}", "}", "<22>", "System", ".", "out", ".", "print", "(", "\"(\"", ".", "repeat", "(", "left_cnt", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "right_cnt", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "())"]]}, {"line": 2, "state": [["n", "3"], ["s", "())"], ["left", "0"]]}, {"line": 3, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"], ["i", "("]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"], ["i", "("]]}, {"line": 6, "state": [["n", "3"], ["s", "())"], ["left", "1"], ["left_cnt", "0"], ["i", "("]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["left", "1"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["left", "1"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 8, "state": [["n", "3"], ["s", "())"], ["left", "1"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 9, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 8, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "0"], ["i", ")"]]}, {"line": 11, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"]]}, {"line": 12, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "0"]]}, {"line": 13, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "0"], ["right_cnt", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "0"], ["right_cnt", "0"]]}, {"line": 15, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "0"], ["right_cnt", "0"]]}, {"line": 16, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "1"], ["right_cnt", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "1"], ["right_cnt", "0"]]}, {"line": 15, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "1"], ["right_cnt", "0"]]}, {"line": 16, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", ")"], ["right", "2"], ["right_cnt", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", "("], ["right", "2"], ["right_cnt", "0"]]}, {"line": 15, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", "("], ["right", "2"], ["right_cnt", "0"]]}, {"line": 18, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", "("], ["right", "2"], ["right_cnt", "0"]]}, {"line": 19, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", "("], ["right", "1"], ["right_cnt", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", "("], ["right", "1"], ["right_cnt", "0"]]}, {"line": 22, "state": [["n", "3"], ["s", "())"], ["left", "0"], ["left_cnt", "1"], ["i", "("], ["right", "1"], ["right_cnt", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1]], "6": [[6, 2]], "8": [[8, 6, 2], [8, 9, 8, 6, 2]], "9": [[9, 8, 6, 2]], "11": [[11, 3]], "12": [[12]], "13": [[13]], "14": [[14, 4, 5, 4, 5, 4, 5, 4, 1], [14, 15, 14, 4, 5, 4, 5, 4, 5, 4, 1], [14, 15, 14, 15, 14, 4, 5, 4, 5, 4, 5, 4, 1], [14, 15, 14, 15, 14, 15, 14, 4, 5, 4, 5, 4, 5, 4, 1]], "15": [[15, 14, 4, 5, 4, 5, 4, 5, 4, 1], [15, 14, 15, 14, 4, 5, 4, 5, 4, 5, 4, 1], [15, 14, 15, 14, 15, 14, 4, 5, 4, 5, 4, 5, 4, 1]], "16": [[16, 12], [16, 12]], "18": [[18, 16, 12]], "19": [[19, 18, 16, 12]], "22": [[22, 14, 15, 14, 15, 14, 15, 14, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 4467, "code": "String s = \"xyz\";\nint L = s.length();\nint L_a = L - 2;\nSystem.out.println(s.charAt(0) + String.valueOf(L_a) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "L", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "L_a", "=", "L", "-", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "L_a", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["L", "3"]]}, {"line": 2, "state": [["s", "xyz"], ["L", "3"], ["L_a", "1"]]}, {"line": 3, "state": [["s", "xyz"], ["L", "3"], ["L_a", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 14915, "code": "int n = 2, p = 0;\nint[] a = {1, 3};\nint even = 0;\nint odd = 0;\nfor (int i : a) {\nif (i % 2 == 0) {\neven += 1;}\nelse {\nodd += 1;}}\ndouble ans = Math.pow(2, even);\nif (p == 0) {\nint m = odd / 2;\ndouble t = 1;\nfor (int i = 1; i <= m; i++) {\ni *= 2; // Note: This statement modifies the loop variable in a way that's not typical.\nt += factorial(odd) / (factorial(i) * factorial(odd - i));}}\nelse {\nint m = (odd + 1) / 2;\ndouble t = 0;\nfor (int i = 1; i <= m; i++) {\ni = 2 * i - 1; // Same note applies as in Block 16.\nt += factorial(odd) / (factorial(i) * factorial(odd - i));}}\nans *= t;\nSystem.out.println((int) ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ",", "p", "=", "0", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "even", "=", "0", ";", "<3>", "int", "odd", "=", "0", ";", "<4>", "for", "(", "int", "i", ":", "a", ")", "{", "<5>", "if", "(", "i", "%", "2", "==", "0", ")", "{", "<6>", "even", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "odd", "+=", "1", ";", "}", "}", "<9>", "double", "ans", "=", "Math", ".", "pow", "(", "2", ",", "even", ")", ";", "<10>", "if", "(", "p", "==", "0", ")", "{", "<11>", "int", "m", "=", "odd", "/", "2", ";", "<12>", "double", "t", "=", "1", ";", "<13>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "m", ";", "i", "++", ")", "{", "<14>", "i", "*=", "2", ";", "// Note: This statement modifies the loop variable in a way that's not typical.", "<15>", "t", "+=", "factorial", "(", "odd", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "odd", "-", "i", ")", ")", ";", "}", "}", "<16>", "else", "{", "<17>", "int", "m", "=", "(", "odd", "+", "1", ")", "/", "2", ";", "<18>", "double", "t", "=", "0", ";", "<19>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "m", ";", "i", "++", ")", "{", "<20>", "i", "=", "2", "*", "i", "-", "1", ";", "// Same note applies as in Block 16.", "<21>", "t", "+=", "factorial", "(", "odd", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "odd", "-", "i", ")", ")", ";", "}", "}", "<22>", "ans", "*=", "t", ";", "<23>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"], ["p", "0"]]}, {"line": 1, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"]]}, {"line": 2, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "0"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "0"], ["i", "1"]]}, {"line": 8, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "1"], ["i", "1"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "1"], ["i", "3"]]}, {"line": 5, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "1"], ["i", "3"]]}, {"line": 8, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"]]}, {"line": 9, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"]]}, {"line": 10, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"], ["ans", "1"]]}, {"line": 11, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"], ["ans", "1"]]}, {"line": 12, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"], ["ans", "1"], ["m", "1"]]}, {"line": 13, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "3"], ["ans", "1"], ["m", "1"], ["t", "1"]]}, {"line": 14, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "1"], ["ans", "1"], ["m", "1"], ["t", "1"]]}, {"line": 15, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "2"], ["ans", "1"], ["m", "1"], ["t", "1"]]}, {"line": 16, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "2"], ["ans", "1"], ["m", "1"], ["t", "2.0"]]}, {"line": 14, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "2"], ["ans", "1"], ["m", "1"], ["t", "2.0"]]}, {"line": 23, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "2"], ["ans", "2.0"], ["m", "1"], ["t", "2.0"]]}, {"line": 24, "state": [["n", "2"], ["p", "0"], ["a", "[ 1 , 3 ]"], ["even", "0"], ["odd", "2"], ["i", "2"], ["ans", "2.0"], ["m", "1"], ["t", "2.0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1]], "8": [[8, 3], [8, 3]], "9": [[9]], "10": [[10, 2]], "11": [[11, 0]], "12": [[12, 8, 3]], "13": [[13]], "14": [[14, 12, 8, 3], [14, 16, 15, 14, 12, 8, 3]], "15": [[15, 14, 12, 8, 3]], "16": [[16, 15, 14, 12, 8, 3]], "23": [[23, 16, 15, 14, 12, 8, 3]], "24": [[24, 23, 16, 15, 14, 12, 8, 3]]}}
{"id": 8786, "code": "int n = 5;\nint[] A1 = {3, 2, 2, 4, 1};\nint[] A2 = {1, 2, 2, 2, 1};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint x = 0;for (int j = 0; j <= i; j++) {x += A1[j];}for (int j = i; j < n; j++) {x += A2[j];}\nif (ans < x) {\nans = x;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "A1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "x", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "x", "+=", "A1", "[", "j", "]", ";", "}", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "x", "+=", "A2", "[", "j", "]", ";", "}", "<6>", "if", "(", "ans", "<", "x", ")", "{", "<7>", "ans", "=", "x", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"], ["x", "11"]]}, {"line": 6, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"], ["x", "11"]]}, {"line": 7, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "0"], ["x", "11"]]}, {"line": 4, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["x", "11"]]}, {"line": 5, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["x", "12"]]}, {"line": 6, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["x", "12"]]}, {"line": 7, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "1"], ["x", "12"]]}, {"line": 4, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["x", "12"]]}, {"line": 5, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["x", "12"]]}, {"line": 6, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["x", "12"]]}, {"line": 4, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["x", "12"]]}, {"line": 5, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["x", "14"]]}, {"line": 6, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["x", "14"]]}, {"line": 7, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "3"], ["x", "14"]]}, {"line": 4, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["x", "14"]]}, {"line": 5, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["x", "13"]]}, {"line": 6, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["x", "13"]]}, {"line": 4, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["x", "13"]]}, {"line": 8, "state": [["n", "5"], ["A1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["A2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["x", "13"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 5, 4, 0], [7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 8780, "code": "int n = 4;\nint[] a = {1, 1, 1, 1};\nint[] b = {1, 1, 1, 1};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint z = 0;\nfor (int j = 0; j <= i; j++) {\nz += a[j];}\nfor (int j = i; j < n; j++) {\nz += b[j];}\nans = Math.max(ans, z);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "z", "=", "0", ";", "<6>", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "<7>", "z", "+=", "a", "[", "j", "]", ";", "}", "<8>", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "<9>", "z", "+=", "b", "[", "j", "]", ";", "}", "<10>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "z", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "0"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "0"], ["j", "0"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "1"], ["j", "0"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "1"], ["j", "0"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "1"], ["j", "0"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "2"], ["j", "0"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "2"], ["j", "1"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "3"], ["j", "1"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "3"], ["j", "2"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "4"], ["j", "2"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "4"], ["j", "3"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "5"], ["j", "3"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "0"], ["i", "0"], ["z", "5"], ["j", "3"]]}, {"line": 10, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "0"], ["z", "5"], ["j", "3"]]}, {"line": 4, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "5"], ["j", "3"]]}, {"line": 5, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "0"], ["j", "3"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "0"], ["j", "0"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "1"], ["j", "0"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "1"], ["j", "1"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "2"], ["j", "1"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "2"], ["j", "1"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "2"], ["j", "1"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "3"], ["j", "1"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "3"], ["j", "2"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "4"], ["j", "2"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "4"], ["j", "3"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "5"], ["j", "3"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "5"], ["j", "3"]]}, {"line": 10, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "1"], ["z", "5"], ["j", "3"]]}, {"line": 4, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "5"], ["j", "3"]]}, {"line": 5, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "0"], ["j", "3"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "0"], ["j", "0"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "1"], ["j", "0"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "1"], ["j", "1"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "2"], ["j", "1"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "2"], ["j", "2"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "3"], ["j", "2"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "3"], ["j", "2"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "3"], ["j", "2"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "4"], ["j", "2"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "4"], ["j", "3"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "5"], ["j", "3"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "5"], ["j", "3"]]}, {"line": 10, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "2"], ["z", "5"], ["j", "3"]]}, {"line": 4, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "5"], ["j", "3"]]}, {"line": 5, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "0"], ["j", "3"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "0"], ["j", "0"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "1"], ["j", "0"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "1"], ["j", "1"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "2"], ["j", "1"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "2"], ["j", "2"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "3"], ["j", "2"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "3"], ["j", "3"]]}, {"line": 7, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "4"], ["j", "3"]]}, {"line": 6, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "4"], ["j", "3"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "4"], ["j", "3"]]}, {"line": 9, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "5"], ["j", "3"]]}, {"line": 8, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "5"], ["j", "3"]]}, {"line": 10, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "5"], ["j", "3"]]}, {"line": 4, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "5"], ["j", "3"]]}, {"line": 11, "state": [["n", "4"], ["a", "[ 1 , 1 , 1 , 1 ]"], ["b", "[ 1 , 1 , 1 , 1 ]"], ["ans", "5"], ["i", "3"], ["z", "5"], ["j", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "5": [[5], [5, 10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [5, 10, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [5, 10, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "6": [[6, 4, 0], [6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "7": [[7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "8": [[8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "9": [[9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "10": [[10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "11": [[11, 10, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]]}}
{"id": 9204, "code": "String line = \"2017/01/07\";\nSystem.out.println(\"2018\" + line.substring(4, 10));", "code_tokens": ["<0>", "String", "line", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "line", ".", "substring", "(", "4", ",", "10", ")", ")", ";"], "trace": [{"line": 0, "state": [["line", "2017/01/07"]]}, {"line": 1, "state": [["line", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6503, "code": "int N = 2;\nint[] a = Arrays.stream(\"1 5\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nint[] b = Arrays.stream(\"2 4\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nint[] c = Arrays.stream(\"3 6\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nint result = 0;\nfor (int i : b) {\nint ta = bisectLeft(a, i);\nint tc = bisectRight(c, i);\nresult += ta * (N - tc);}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "Arrays", ".", "stream", "(", "\"1 5\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "int", "[", "]", "b", "=", "Arrays", ".", "stream", "(", "\"2 4\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<3>", "int", "[", "]", "c", "=", "Arrays", ".", "stream", "(", "\"3 6\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "result", "=", "0", ";", "<8>", "for", "(", "int", "i", ":", "b", ")", "{", "<9>", "int", "ta", "=", "bisectLeft", "(", "a", ",", "i", ")", ";", "<10>", "int", "tc", "=", "bisectRight", "(", "c", ",", "i", ")", ";", "<11>", "result", "+=", "ta", "*", "(", "N", "-", "tc", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"]]}, {"line": 3, "state": [["N", "2"]]}, {"line": 4, "state": [["N", "2"]]}, {"line": 5, "state": [["N", "2"], ["a", "[ 1 , 5 ]"]]}, {"line": 6, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 7, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 8, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "0"]]}, {"line": 9, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "0"], ["i", "2"]]}, {"line": 10, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "0"], ["i", "2"], ["ta", "1"]]}, {"line": 11, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "0"], ["i", "2"], ["ta", "1"], ["tc", "0"]]}, {"line": 12, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "2"], ["i", "2"], ["ta", "1"], ["tc", "0"]]}, {"line": 9, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "2"], ["i", "4"], ["ta", "1"], ["tc", "0"]]}, {"line": 10, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "2"], ["i", "4"], ["ta", "1"], ["tc", "0"]]}, {"line": 11, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "2"], ["i", "4"], ["ta", "1"], ["tc", "1"]]}, {"line": 12, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "3"], ["i", "4"], ["ta", "1"], ["tc", "1"]]}, {"line": 9, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "3"], ["i", "4"], ["ta", "1"], ["tc", "1"]]}, {"line": 13, "state": [["N", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["result", "3"], ["i", "4"], ["ta", "1"], ["tc", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 2]], "6": [[6, 5, 2]], "7": [[7, 6, 5, 2]], "8": [[8]], "9": [[9, 6, 5, 2], [9, 11, 10, 9, 6, 5, 2], [9, 11, 10, 9, 11, 10, 9, 6, 5, 2]], "10": [[10, 9, 6, 5, 2], [10, 9, 11, 10, 9, 6, 5, 2]], "11": [[11, 10, 9, 6, 5, 2], [11, 10, 9, 11, 10, 9, 6, 5, 2]], "12": [[12, 11, 10, 9, 6, 5, 2], [12, 11, 10, 9, 11, 10, 9, 6, 5, 2]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 6, 5, 2]]}}
{"id": 14210, "code": "int n = 9;\nint[] a = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint ans = 1;\nString flag = \"Init\";\nfor (int i = 1; i < n; i++) {\nif (flag.equals(\"Init\")) {\nif (a[i - 1] == a[i]) {\n}\nelse if (a[i - 1] > a[i]) {\nflag = \"-\";}\nelse {\nflag = \"+\";}}\nelse if (flag.equals(\"-\")) {\nif (a[i - 1] < a[i]) {\nans += 1;\nflag = \"Init\";}}\nelse {\nif (a[i - 1] > a[i]) {\nans += 1;\nflag = \"Init\";}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "9", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "String", "flag", "=", "\"Init\"", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "flag", ".", "equals", "(", "\"Init\"", ")", ")", "{", "<6>", "if", "(", "a", "[", "i", "-", "1", "]", "==", "a", "[", "i", "]", ")", "{", "<7>", "}", "<8>", "else", "if", "(", "a", "[", "i", "-", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<9>", "flag", "=", "\"-\"", ";", "}", "<10>", "else", "{", "<11>", "flag", "=", "\"+\"", ";", "}", "}", "<12>", "else", "if", "(", "flag", ".", "equals", "(", "\"-\"", ")", ")", "{", "<13>", "if", "(", "a", "[", "i", "-", "1", "]", "<", "a", "[", "i", "]", ")", "{", "<14>", "ans", "+=", "1", ";", "<15>", "flag", "=", "\"Init\"", ";", "}", "}", "<16>", "else", "{", "<17>", "if", "(", "a", "[", "i", "-", "1", "]", ">", "a", "[", "i", "]", ")", "{", "<18>", "ans", "+=", "1", ";", "<19>", "flag", "=", "\"Init\"", ";", "}", "}", "}", "<20>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "9"]]}, {"line": 2, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "Init"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "Init"], ["i", "1"]]}, {"line": 12, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "+"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 13, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 18, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["flag", "+"], ["i", "2"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "+"], ["i", "2"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "Init"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "Init"], ["i", "3"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "Init"], ["i", "3"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "Init"], ["i", "3"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "Init"], ["i", "3"]]}, {"line": 12, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "+"], ["i", "3"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "+"], ["i", "4"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "+"], ["i", "4"]]}, {"line": 13, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "+"], ["i", "4"]]}, {"line": 18, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["flag", "+"], ["i", "4"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "+"], ["i", "4"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "Init"], ["i", "4"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "Init"], ["i", "5"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "Init"], ["i", "5"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "Init"], ["i", "5"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "Init"], ["i", "5"]]}, {"line": 12, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "+"], ["i", "5"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}, {"line": 13, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}, {"line": 18, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["flag", "+"], ["i", "6"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "+"], ["i", "6"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "Init"], ["i", "6"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "Init"], ["i", "7"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "Init"], ["i", "7"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "Init"], ["i", "7"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "Init"], ["i", "7"]]}, {"line": 12, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "+"], ["i", "7"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "+"], ["i", "8"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "+"], ["i", "8"]]}, {"line": 13, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "+"], ["i", "8"]]}, {"line": 18, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["flag", "+"], ["i", "8"]]}, {"line": 19, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["flag", "+"], ["i", "8"]]}, {"line": 20, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["flag", "Init"], ["i", "8"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["flag", "Init"], ["i", "8"]]}, {"line": 21, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["flag", "Init"], ["i", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 9, 7, 5, 1], [5, 18, 5, 9, 7, 5, 1], [5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1]], "6": [[6, 4], [6, 12, 6, 4], [6, 20, 13, 6, 12, 6, 4], [6, 12, 6, 20, 13, 6, 12, 6, 4], [6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4]], "7": [[7, 5, 1], [7, 5, 18, 5, 9, 7, 5, 1], [7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1]], "9": [[9, 7, 5, 1], [9, 7, 5, 18, 5, 9, 7, 5, 1], [9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1]], "12": [[12, 6, 4], [12, 6, 20, 13, 6, 12, 6, 4], [12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4]], "13": [[13, 6, 12, 6, 4], [13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4]], "18": [[18, 5, 9, 7, 5, 1], [18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1], [18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 18, 5, 9, 7, 5, 1]], "19": [[19, 3], [19, 3], [19, 3], [19, 3]], "20": [[20, 13, 6, 12, 6, 4], [20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4], [20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 20, 13, 6, 12, 6, 4]], "21": [[21, 19, 3]]}}
{"id": 13045, "code": "int n = 6;\nint[] shichigosan = {3, 5, 7};boolean found = false;\nfor (int num : shichigosan) {if (n == num) {found = true;break;}}\nif (found) {System.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "shichigosan", "=", "{", "3", ",", "5", ",", "7", "}", ";", "boolean", "found", "=", "false", ";", "<2>", "for", "(", "int", "num", ":", "shichigosan", ")", "{", "if", "(", "n", "==", "num", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "<3>", "if", "(", "found", ")", "{", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["shichigosan", "{ 3 , 5 , 7 }"]]}, {"line": 2, "state": [["n", "6"], ["shichigosan", "{ 3 , 5 , 7 }"]]}, {"line": 5, "state": [["n", "6"], ["shichigosan", "{ 3 , 5 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 12088, "code": "String m1 = \"11\"; String d1 = \"30\";\nString m2 = \"12\"; String d2 = \"1\";\nif (!m1.equals(m2)) {\nSystem.out.println(\"1\");\n} else {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "String", "m1", "=", "\"11\"", ";", "String", "d1", "=", "\"30\"", ";", "<1>", "String", "m2", "=", "\"12\"", ";", "String", "d2", "=", "\"1\"", ";", "<2>", "if", "(", "!", "m1", ".", "equals", "(", "m2", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "30"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 17580, "code": "String S = \"1905\";\nchar[] s = S.toCharArray();\nint left = Character.getNumericValue(s[0]) * 10 + Character.getNumericValue(s[1]);\nint right = Character.getNumericValue(s[2]) * 10 + Character.getNumericValue(s[3]);\nif (1 <= left && left <= 12) {\nif (1 <= right && right <= 12) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse {\nif (1 <= right && right <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "S", "=", "\"1905\"", ";", "<1>", "char", "[", "]", "s", "=", "S", ".", "toCharArray", "(", ")", ";", "<2>", "int", "left", "=", "Character", ".", "getNumericValue", "(", "s", "[", "0", "]", ")", "*", "10", "+", "Character", ".", "getNumericValue", "(", "s", "[", "1", "]", ")", ";", "<3>", "int", "right", "=", "Character", ".", "getNumericValue", "(", "s", "[", "2", "]", ")", "*", "10", "+", "Character", ".", "getNumericValue", "(", "s", "[", "3", "]", ")", ";", "<4>", "if", "(", "1", "<=", "left", "&&", "left", "<=", "12", ")", "{", "<5>", "if", "(", "1", "<=", "right", "&&", "right", "<=", "12", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<9>", "else", "{", "<10>", "if", "(", "1", "<=", "right", "&&", "right", "<=", "12", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<12>", "else", "{", "<13>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "1905"]]}, {"line": 1, "state": [["S", "1905"], ["s", "[ 1 , 9 , 0 , 5 ]"]]}, {"line": 2, "state": [["S", "1905"], ["s", "[ 1 , 9 , 0 , 5 ]"], ["left", "19"]]}, {"line": 3, "state": [["S", "1905"], ["s", "[ 1 , 9 , 0 , 5 ]"], ["left", "19"], ["right", "5"]]}, {"line": 4, "state": [["S", "1905"], ["s", "[ 1 , 9 , 0 , 5 ]"], ["left", "19"], ["right", "5"]]}, {"line": 10, "state": [["S", "1905"], ["s", "[ 1 , 9 , 0 , 5 ]"], ["left", "19"], ["right", "5"]]}, {"line": 11, "state": [["S", "1905"], ["s", "[ 1 , 9 , 0 , 5 ]"], ["left", "19"], ["right", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 2, 1, 0]], "10": [[10, 3, 2, 1, 0]], "11": [[11]]}}
{"id": 8550, "code": "int n = 7;\nint[] a = {3, 3, 4, 5, 4, 5, 3};\nint[] b = {5, 3, 4, 4, 2, 3, 2};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint sumA = 0;for (int j = 0; j <= i; j++) {sumA += a[j];}int sumB = 0;for (int j = i; j < n; j++) {sumB += b[j];}if (ans < (sumA + sumB)) {\nans = (sumA + sumB);}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "sumA", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA", "+=", "a", "[", "j", "]", ";", "}", "int", "sumB", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumB", "+=", "b", "[", "j", "]", ";", "}", "if", "(", "ans", "<", "(", "sumA", "+", "sumB", ")", ")", "{", "<6>", "ans", "=", "(", "sumA", "+", "sumB", ")", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "0"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "5"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 5, 4, 6, 5, 4, 0], [4, 5, 4, 5, 4, 6, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0], [4, 5, 4, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 5, 4, 6, 5, 4, 0], [5, 4, 5, 4, 5, 4, 6, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0]], "7": [[7, 5, 4, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 4, 0]]}}
{"id": 4397, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nint x = H1 * 60 + M1;\nint y = H2 * 60 + M2;\nSystem.out.println(y - x - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "int", "x", "=", "H1", "*", "60", "+", "M1", ";", "<2>", "int", "y", "=", "H2", "*", "60", "+", "M2", ";", "<3>", "System", ".", "out", ".", "println", "(", "y", "-", "x", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["x", "600"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["x", "600"], ["y", "900"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["x", "600"], ["y", "900"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 5803, "code": "int n = 5;\nif (n % 2 == 0) {\nSystem.out.println(n / 2);}\nelse {\nSystem.out.println(n / 2 + 1);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 4, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 6132, "code": "int N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nArrays.sort(A);\nArrays.sort(B);\nArrays.sort(C);\nint[] Bcnt = new int[N + 1];\nint idx = N;\nfor (int i = N - 1; i >= 0; i--) {\nidx = bisectRight(C, B[i], idx);\nBcnt[i] = N - idx + Bcnt[i + 1];}\nint ans = 0;\nidx = 0;\nfor (int i = 0; i < N; i++) {\nidx = bisectRight(B, A[i], idx);\nans += Bcnt[idx];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A", ")", ";", "<5>", "Arrays", ".", "sort", "(", "B", ")", ";", "<6>", "Arrays", ".", "sort", "(", "C", ")", ";", "<7>", "int", "[", "]", "Bcnt", "=", "new", "int", "[", "N", "+", "1", "]", ";", "<8>", "int", "idx", "=", "N", ";", "<9>", "for", "(", "int", "i", "=", "N", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "<10>", "idx", "=", "bisectRight", "(", "C", ",", "B", "[", "i", "]", ",", "idx", ")", ";", "<11>", "Bcnt", "[", "i", "]", "=", "N", "-", "idx", "+", "Bcnt", "[", "i", "+", "1", "]", ";", "}", "<12>", "int", "ans", "=", "0", ";", "<13>", "idx", "=", "0", ";", "<14>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<15>", "idx", "=", "bisectRight", "(", "B", ",", "A", "[", "i", "]", ",", "idx", ")", ";", "<16>", "ans", "+=", "Bcnt", "[", "idx", "]", ";", "}", "<17>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 0 , 0 ]"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 0 , 0 ]"], ["idx", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 0 , 0 ]"], ["idx", "3"], ["i", "2"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 0 , 0 ]"], ["idx", "0"], ["i", "2"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 3 , 0 ]"], ["idx", "0"], ["i", "2"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 3 , 0 ]"], ["idx", "0"], ["i", "1"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 0 , 3 , 0 ]"], ["idx", "0"], ["i", "1"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "1"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 0 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"], ["ans", "0"]]}, {"line": 14, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"], ["ans", "0"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"], ["ans", "0"]]}, {"line": 16, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"], ["ans", "0"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "0"], ["ans", "9"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "1"], ["ans", "9"]]}, {"line": 16, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "1"], ["ans", "9"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "1"], ["ans", "18"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "2"], ["ans", "18"]]}, {"line": 16, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "2"], ["ans", "18"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "2"], ["ans", "27"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "2"], ["ans", "27"]]}, {"line": 18, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bcnt", "[ 9 , 6 , 3 , 0 ]"], ["idx", "0"], ["i", "2"], ["ans", "27"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8, 1]], "9": [[9, 8, 1]], "10": [[10, 9, 8, 1], [10, 12, 11, 10, 9, 8, 1], [10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "11": [[11, 10, 9, 8, 1], [11, 10, 12, 11, 10, 9, 8, 1], [11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "12": [[12, 11, 10, 9, 8, 1], [12, 11, 10, 12, 11, 10, 9, 8, 1], [12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "13": [[13]], "14": [[14, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "15": [[15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [15, 16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [15, 16, 15, 16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "16": [[16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [16, 15, 16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "17": [[17, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [17, 16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1], [17, 16, 15, 16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]], "18": [[18, 17, 16, 15, 16, 15, 16, 15, 10, 12, 11, 10, 12, 11, 10, 12, 11, 10, 9, 8, 1]]}}
{"id": 6, "code": "char[] S = {'x', 'y', 'z'};\nint k = 4;\nchar[] Ans = new char[S.length];\nint c = 0;\nfor (int i = 0; i < S.length; i++) {\nif ((26 - (S[i] - 'a')) % 26 <= k) {\nAns[i] = 'a';\nk -= (26 - (S[i] - 'a')) % 26;\nc += (26 - (S[i] - 'a')) % 26;\n} else {\nAns[i] = S[i];}\nif (i == S.length - 1) {\nc = Ans[i] + k % 26;\nif (Ans[i] + k % 26 >= 123) {\nc -= 26;}\nAns[i] = (char) c;}}\nSystem.out.println(String.valueOf(Ans));", "code_tokens": ["<0>", "char", "[", "]", "S", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "char", "[", "]", "Ans", "=", "new", "char", "[", "S", ".", "length", "]", ";", "<3>", "int", "c", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", ";", "i", "++", ")", "{", "<5>", "if", "(", "(", "26", "-", "(", "S", "[", "i", "]", "-", "'a'", ")", ")", "%", "26", "<=", "k", ")", "{", "<6>", "Ans", "[", "i", "]", "=", "'a'", ";", "<7>", "k", "-=", "(", "26", "-", "(", "S", "[", "i", "]", "-", "'a'", ")", ")", "%", "26", ";", "<8>", "c", "+=", "(", "26", "-", "(", "S", "[", "i", "]", "-", "'a'", ")", ")", "%", "26", ";", "<9>", "}", "else", "{", "<10>", "Ans", "[", "i", "]", "=", "S", "[", "i", "]", ";", "}", "<11>", "if", "(", "i", "==", "S", ".", "length", "-", "1", ")", "{", "<12>", "c", "=", "Ans", "[", "i", "]", "+", "k", "%", "26", ";", "<13>", "if", "(", "Ans", "[", "i", "]", "+", "k", "%", "26", ">=", "123", ")", "{", "<14>", "c", "-=", "26", ";", "}", "<15>", "Ans", "[", "i", "]", "=", "(", "char", ")", "c", ";", "}", "}", "<16>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "Ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ x , y , z ]"]]}, {"line": 1, "state": [["S", "[ x , y , z ]"], ["k", "4"]]}, {"line": 2, "state": [["S", "[ x , y , z ]"], ["k", "4"], ["Ans", "[ 0 , 0 , 0 ]"]]}, {"line": 3, "state": [["S", "[ x , y , z ]"], ["k", "4"], ["Ans", "[ 0 , 0 , 0 ]"], ["c", "0"]]}, {"line": 4, "state": [["S", "[ x , y , z ]"], ["k", "4"], ["Ans", "[ 0 , 0 , 0 ]"], ["c", "0"], ["i", "0"]]}, {"line": 5, "state": [["S", "[ x , y , z ]"], ["k", "4"], ["Ans", "[ 0 , 0 , 0 ]"], ["c", "0"], ["i", "0"]]}, {"line": 6, "state": [["S", "[ x , y , z ]"], ["k", "4"], ["Ans", "[ a , 0 , 0 ]"], ["c", "0"], ["i", "0"]]}, {"line": 7, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , 0 , 0 ]"], ["c", "0"], ["i", "0"]]}, {"line": 8, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , 0 , 0 ]"], ["c", "3"], ["i", "0"]]}, {"line": 11, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , 0 , 0 ]"], ["c", "3"], ["i", "0"]]}, {"line": 4, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , 0 , 0 ]"], ["c", "3"], ["i", "1"]]}, {"line": 5, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , 0 , 0 ]"], ["c", "3"], ["i", "1"]]}, {"line": 10, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , y , 0 ]"], ["c", "3"], ["i", "1"]]}, {"line": 11, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , y , 0 ]"], ["c", "3"], ["i", "1"]]}, {"line": 4, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , y , 0 ]"], ["c", "3"], ["i", "2"]]}, {"line": 5, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , y , 0 ]"], ["c", "3"], ["i", "2"]]}, {"line": 6, "state": [["S", "[ x , y , z ]"], ["k", "1"], ["Ans", "[ a , y , a ]"], ["c", "3"], ["i", "2"]]}, {"line": 7, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "3"], ["i", "2"]]}, {"line": 8, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "4"], ["i", "2"]]}, {"line": 11, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "4"], ["i", "2"]]}, {"line": 12, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "97"], ["i", "2"]]}, {"line": 13, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "97"], ["i", "2"]]}, {"line": 15, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "97"], ["i", "2"]]}, {"line": 4, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "97"], ["i", "2"]]}, {"line": 16, "state": [["S", "[ x , y , z ]"], ["k", "0"], ["Ans", "[ a , y , a ]"], ["c", "97"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4, 2, 0], [4, 11, 8, 7, 6, 5, 4, 2, 0], [4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0], [4, 15, 13, 12, 11, 8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 11, 8, 7, 6, 5, 4, 2, 0], [5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "6": [[6, 5, 4, 2, 0], [6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "7": [[7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "8": [[8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "10": [[10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "11": [[11, 8, 7, 6, 5, 4, 2, 0], [11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0], [11, 8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "12": [[12, 11, 8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "13": [[13, 12, 11, 8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "15": [[15, 13, 12, 11, 8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]], "16": [[16, 15, 13, 12, 11, 8, 7, 6, 5, 4, 11, 10, 5, 4, 11, 8, 7, 6, 5, 4, 2, 0]]}}
{"id": 11469, "code": "String S = \"SUN\";\nString[] D = {\"\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nfor (int i = 1; i < 8; i++) {\nif (S.equals(D[i])) {\nSystem.out.println(i);}}", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "D", "=", "{", "\"\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "8", ";", "i", "++", ")", "{", "<3>", "if", "(", "S", ".", "equals", "(", "D", "[", "i", "]", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "1"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "1"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "2"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "2"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "3"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "3"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "4"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "4"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "5"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "5"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "6"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "6"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}, {"line": 3, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}, {"line": 4, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}, {"line": 2, "state": [["S", "SUN"], ["D", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 3, 2], [2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "3": [[3, 2], [3, 2, 3, 2], [3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]]}}
{"id": 8099, "code": "int total = 0;\nint N = 4, M = 3;\nM = M - 1;\nString n_l = \"2314\";\nint A = n_l.indexOf(\"1\");\nint before = A;\nint after = N - A - 1;\nwhile (before > 0) {\nbefore -= M;\ntotal += 1;}\nif (before < 0) {\nbefore = Math.abs(before);\nafter -= before;}\nwhile (after > 0) {\nafter -= M;\ntotal += 1;}\nSystem.out.println(total);", "code_tokens": ["<0>", "int", "total", "=", "0", ";", "<1>", "int", "N", "=", "4", ",", "M", "=", "3", ";", "<2>", "M", "=", "M", "-", "1", ";", "<3>", "String", "n_l", "=", "\"2314\"", ";", "<4>", "int", "A", "=", "n_l", ".", "indexOf", "(", "\"1\"", ")", ";", "<5>", "int", "before", "=", "A", ";", "<6>", "int", "after", "=", "N", "-", "A", "-", "1", ";", "<7>", "while", "(", "before", ">", "0", ")", "{", "<8>", "before", "-=", "M", ";", "<9>", "total", "+=", "1", ";", "}", "<10>", "if", "(", "before", "<", "0", ")", "{", "<11>", "before", "=", "Math", ".", "abs", "(", "before", ")", ";", "<12>", "after", "-=", "before", ";", "}", "<13>", "while", "(", "after", ">", "0", ")", "{", "<14>", "after", "-=", "M", ";", "<15>", "total", "+=", "1", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "total", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["total", "0"]]}, {"line": 2, "state": [["total", "0"], ["N", "4"], ["M", "3"]]}, {"line": 3, "state": [["total", "0"], ["N", "4"], ["M", "2"]]}, {"line": 4, "state": [["total", "0"], ["N", "4"], ["M", "2"], ["n_l", "2314"]]}, {"line": 5, "state": [["total", "0"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"]]}, {"line": 6, "state": [["total", "0"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "2"]]}, {"line": 7, "state": [["total", "0"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "2"], ["after", "1"]]}, {"line": 8, "state": [["total", "0"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "2"], ["after", "1"]]}, {"line": 9, "state": [["total", "0"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "1"]]}, {"line": 10, "state": [["total", "1"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "1"]]}, {"line": 8, "state": [["total", "1"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "1"]]}, {"line": 11, "state": [["total", "1"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "1"]]}, {"line": 14, "state": [["total", "1"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "1"]]}, {"line": 15, "state": [["total", "1"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "-1"]]}, {"line": 16, "state": [["total", "2"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "-1"]]}, {"line": 14, "state": [["total", "2"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "-1"]]}, {"line": 17, "state": [["total", "2"], ["N", "4"], ["M", "2"], ["n_l", "2314"], ["A", "2"], ["before", "0"], ["after", "-1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5, 4]], "6": [[6, 5, 4]], "7": [[7, 6, 5, 4]], "8": [[8, 6, 5, 4], [8, 9, 8, 6, 5, 4]], "9": [[9, 8, 6, 5, 4]], "10": [[10, 1]], "11": [[11, 8, 9, 8, 6, 5, 4]], "14": [[14, 7, 6, 5, 4], [14, 15, 14, 7, 6, 5, 4]], "15": [[15, 14, 7, 6, 5, 4]], "16": [[16, 10, 1]], "17": [[17, 16, 10, 1]]}}
{"id": 6078, "code": "System.out.println(-(-Integer.parseInt(\"100\") / 2));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "Integer", ".", "parseInt", "(", "\"100\"", ")", "/", "2", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 11868, "code": "String a = \"11\"; String b = \"16\";\nString c = \"11\"; String d = \"17\";\nSystem.out.println(!a.equals(c) ? 1 : 0);", "code_tokens": ["<0>", "String", "a", "=", "\"11\"", ";", "String", "b", "=", "\"16\"", ";", "<1>", "String", "c", "=", "\"11\"", ";", "String", "d", "=", "\"17\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "!", "a", ".", "equals", "(", "c", ")", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["a", "11"], ["b", "16"]]}, {"line": 1, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}, {"line": 2, "state": [["a", "11"], ["b", "16"], ["c", "11"], ["d", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 13234, "code": "Scanner scanner = new Scanner(System.in);\nString S = \"abcde,fghihgf,edcba\";\nSystem.out.println(S.replace(\",\", \" \"));", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "String", "S", "=", "\"abcde,fghihgf,edcba\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["S", "abcde , fghihgf , edcba"]]}, {"line": 3, "state": [["S", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]]}}
{"id": 3737, "code": "int X = 12, Y = 3, Z = 1;\nSystem.out.println((X - (Y + 2 * Z)) / (Y + Z) + 1);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "X", "-", "(", "Y", "+", "2", "*", "Z", ")", ")", "/", "(", "Y", "+", "Z", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16459, "code": "int n = 2;\nint[] data = {100, 0};\nn = getMax(data);\ndouble nn = n / 2.0;\nint r = getMin(data, n, nn);\nSystem.out.println(n + \" \" + r);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "data", "=", "{", "100", ",", "0", "}", ";", "<2>", "n", "=", "getMax", "(", "data", ")", ";", "<3>", "double", "nn", "=", "n", "/", "2.0", ";", "<4>", "int", "r", "=", "getMin", "(", "data", ",", "n", ",", "nn", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "n", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["data", "[ 100 , 0 ]"]]}, {"line": 3, "state": [["n", "100"], ["data", "[ 100 , 0 ]"]]}, {"line": 4, "state": [["n", "100"], ["data", "[ 100 , 0 ]"], ["nn", "50.0"]]}, {"line": 5, "state": []}, {"line": 5, "state": []}, {"line": 5, "state": [["d", "100"]]}, {"line": 5, "state": [["d", "0"]]}, {"line": 5, "state": [["x", "0"]]}, {"line": 5, "state": [["x", "0"]]}, {"line": 5, "state": [["x", "0"]]}, {"line": 5, "state": [["d", "0"]]}, {"line": 5, "state": [["d", "0"]]}, {"line": 5, "state": [["d", "0"]]}, {"line": 5, "state": [["n", "100"], ["data", "[ 100 , 0 ]"], ["nn", "50.0"], ["r", "0"]]}, {"line": 6, "state": [["n", "100"], ["data", "[ 100 , 0 ]"], ["nn", "50.0"], ["r", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1]], "6": [[6, 5, 4, 3, 2, 1]]}}
{"id": 14964, "code": "int n = 45, p = 1;\nint c = 0;\nint[] numbers = {17, 55, 85, 55, 74, 20, 90, 67, 40, 70, 39, 89, 91, 50, 16, 24, 14, 43, 24, 66, 25, 9, 89, 71, 41, 16, 53, 13, 61, 15, 85, 72, 62, 67, 42, 26, 36, 66, 4, 87, 59, 91, 4, 25, 26};for (int m : numbers) {\nif (m % 2 == 0) {c++;}}\nint d = (int) Math.pow(2, c);\nint e = 0;\nfor (int i = p; i <= n - c; i += 2) {\nlong k = factorial(n - c) / (factorial(n - c - i) * factorial(i));\nk = Math.max(k, 1);\ne += k;}\nSystem.out.println(d * e);", "code_tokens": ["<0>", "int", "n", "=", "45", ",", "p", "=", "1", ";", "<1>", "int", "c", "=", "0", ";", "<2>", "int", "[", "]", "numbers", "=", "{", "17", ",", "55", ",", "85", ",", "55", ",", "74", ",", "20", ",", "90", ",", "67", ",", "40", ",", "70", ",", "39", ",", "89", ",", "91", ",", "50", ",", "16", ",", "24", ",", "14", ",", "43", ",", "24", ",", "66", ",", "25", ",", "9", ",", "89", ",", "71", ",", "41", ",", "16", ",", "53", ",", "13", ",", "61", ",", "15", ",", "85", ",", "72", ",", "62", ",", "67", ",", "42", ",", "26", ",", "36", ",", "66", ",", "4", ",", "87", ",", "59", ",", "91", ",", "4", ",", "25", ",", "26", "}", ";", "for", "(", "int", "m", ":", "numbers", ")", "{", "<3>", "if", "(", "m", "%", "2", "==", "0", ")", "{", "c", "++", ";", "}", "}", "<4>", "int", "d", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "c", ")", ";", "<5>", "int", "e", "=", "0", ";", "<6>", "for", "(", "int", "i", "=", "p", ";", "i", "<=", "n", "-", "c", ";", "i", "+=", "2", ")", "{", "<7>", "long", "k", "=", "factorial", "(", "n", "-", "c", ")", "/", "(", "factorial", "(", "n", "-", "c", "-", "i", ")", "*", "factorial", "(", "i", ")", ")", ";", "<8>", "k", "=", "Math", ".", "max", "(", "k", ",", "1", ")", ";", "<9>", "e", "+=", "k", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "d", "*", "e", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "45"], ["p", "1"]]}, {"line": 2, "state": [["n", "45"], ["p", "1"], ["c", "0"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "17"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "17"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "55"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "55"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "85"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "85"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "55"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "55"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "0"], ["m", "74"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "1"], ["m", "74"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "1"], ["m", "20"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "2"], ["m", "20"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "2"], ["m", "90"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "3"], ["m", "90"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "3"], ["m", "67"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "3"], ["m", "67"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "3"], ["m", "40"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "4"], ["m", "40"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "4"], ["m", "70"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "70"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "39"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "39"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "89"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "89"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "91"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "91"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "5"], ["m", "50"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "6"], ["m", "50"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "6"], ["m", "16"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "7"], ["m", "16"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "7"], ["m", "24"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "8"], ["m", "24"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "8"], ["m", "14"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "9"], ["m", "14"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "9"], ["m", "43"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "9"], ["m", "43"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "9"], ["m", "24"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "10"], ["m", "24"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "10"], ["m", "66"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "66"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "25"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "25"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "9"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "9"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "89"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "89"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "71"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "71"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "41"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "41"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "11"], ["m", "16"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "16"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "53"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "53"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "13"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "13"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "61"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "61"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "15"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "15"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "85"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "85"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "12"], ["m", "72"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "13"], ["m", "72"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "13"], ["m", "62"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "14"], ["m", "62"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "14"], ["m", "67"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "14"], ["m", "67"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "14"], ["m", "42"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "15"], ["m", "42"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "15"], ["m", "26"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "16"], ["m", "26"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "16"], ["m", "36"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "17"], ["m", "36"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "17"], ["m", "66"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "18"], ["m", "66"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "18"], ["m", "4"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "4"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "87"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "87"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "59"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "59"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "91"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "91"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "19"], ["m", "4"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "20"], ["m", "4"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "20"], ["m", "25"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "20"], ["m", "25"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "20"], ["m", "26"]]}, {"line": 4, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"]]}, {"line": 3, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"]]}, {"line": 5, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"]]}, {"line": 6, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "0"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "0"], ["i", "1"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "0"], ["i", "1"], ["k", "24"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "0"], ["i", "1"], ["k", "24"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "24"], ["i", "1"], ["k", "24"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "24"], ["i", "3"], ["k", "24"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "24"], ["i", "3"], ["k", "2024"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "24"], ["i", "3"], ["k", "2024"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "2048"], ["i", "3"], ["k", "2024"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "2048"], ["i", "5"], ["k", "2024"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "2048"], ["i", "5"], ["k", "42504"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "2048"], ["i", "5"], ["k", "42504"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "44552"], ["i", "5"], ["k", "42504"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "44552"], ["i", "7"], ["k", "42504"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "44552"], ["i", "7"], ["k", "346104"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "44552"], ["i", "7"], ["k", "346104"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "390656"], ["i", "7"], ["k", "346104"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "390656"], ["i", "9"], ["k", "346104"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "390656"], ["i", "9"], ["k", "1307504"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "390656"], ["i", "9"], ["k", "1307504"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "1698160"], ["i", "9"], ["k", "1307504"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "1698160"], ["i", "11"], ["k", "1307504"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "1698160"], ["i", "11"], ["k", "2496144"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "1698160"], ["i", "11"], ["k", "2496144"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "4194304"], ["i", "11"], ["k", "2496144"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "4194304"], ["i", "13"], ["k", "2496144"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "4194304"], ["i", "13"], ["k", "2496144"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "4194304"], ["i", "13"], ["k", "2496144"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "6690448"], ["i", "13"], ["k", "2496144"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "6690448"], ["i", "15"], ["k", "2496144"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "6690448"], ["i", "15"], ["k", "1307504"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "6690448"], ["i", "15"], ["k", "1307504"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "7997952"], ["i", "15"], ["k", "1307504"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "7997952"], ["i", "17"], ["k", "1307504"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "7997952"], ["i", "17"], ["k", "346104"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "7997952"], ["i", "17"], ["k", "346104"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8344056"], ["i", "17"], ["k", "346104"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8344056"], ["i", "19"], ["k", "346104"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8344056"], ["i", "19"], ["k", "42504"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8344056"], ["i", "19"], ["k", "42504"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8386560"], ["i", "19"], ["k", "42504"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8386560"], ["i", "21"], ["k", "42504"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8386560"], ["i", "21"], ["k", "2024"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8386560"], ["i", "21"], ["k", "2024"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388584"], ["i", "21"], ["k", "2024"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388584"], ["i", "23"], ["k", "2024"]]}, {"line": 8, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388584"], ["i", "23"], ["k", "24"]]}, {"line": 9, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388584"], ["i", "23"], ["k", "24"]]}, {"line": 10, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388608"], ["i", "23"], ["k", "24"]]}, {"line": 7, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388608"], ["i", "23"], ["k", "24"]]}, {"line": 11, "state": [["n", "45"], ["p", "1"], ["c", "21"], ["m", "26"], ["d", "2097152"], ["e", "8388608"], ["i", "23"], ["k", "24"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3, 4, 3], [3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "4": [[4, 3], [4, 3, 4, 3], [4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "6": [[6]], "7": [[7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "8": [[8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "9": [[9, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "10": [[10, 9, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3], [10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]], "11": [[11, 10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3]]}}
{"id": 7583, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nSystem.out.println((sum(a) < h) ? \"No\" : \"Yes\");", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "sum", "(", "a", ")", "<", "h", ")", "?", "\"No\"", ":", "\"Yes\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 14551, "code": "int N = 1, P = 1;\nint[] A = {50};\nint even = 0;\nint odd = 0;\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 == 0) {\neven += 1;}\nelse {\nodd += 1;}}\nint ans;if (odd >= 1) {\nans = (int) Math.pow(2, even + odd - 1);}\nelse if (P == 0) {\nans = (int) Math.pow(2, even);}\nelse {\nans = 0;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "50", "}", ";", "<2>", "int", "even", "=", "0", ";", "<3>", "int", "odd", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "A", "[", "i", "]", "%", "2", "==", "0", ")", "{", "<6>", "even", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "odd", "+=", "1", ";", "}", "}", "<9>", "int", "ans", ";", "if", "(", "odd", ">=", "1", ")", "{", "<10>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even", "+", "odd", "-", "1", ")", ";", "}", "<11>", "else", "if", "(", "P", "==", "0", ")", "{", "<12>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even", ")", ";", "}", "<13>", "else", "{", "<14>", "ans", "=", "0", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "0"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "0"], ["odd", "0"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "0"], ["odd", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "0"], ["odd", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["i", "0"]]}, {"line": 11, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["i", "0"]]}, {"line": 14, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["i", "0"], ["ans", "0"]]}, {"line": 15, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["i", "0"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 2]], "9": [[9, 3]], "11": [[11, 0]], "14": [[14]], "15": [[15, 14]]}}
{"id": 8383, "code": "int n = 1;\nint[] la1 = {2};\nint[] la2 = {3};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint s1 = 0;for (int j = 0; j <= i; j++) {s1 += la1[j];}\nint s2 = 0;for (int j = i; j < la2.length; j++) {s2 += la2[j];}\nans = Math.max(ans, s1 + s2);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "la1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "la2", "=", "{", "3", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "s1", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "s1", "+=", "la1", "[", "j", "]", ";", "}", "<6>", "int", "s2", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "la2", ".", "length", ";", "j", "++", ")", "{", "s2", "+=", "la2", "[", "j", "]", ";", "}", "<7>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "s1", "+", "s2", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["la1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["s1", "2"]]}, {"line": 6, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["s1", "2"], ["s2", "3"]]}, {"line": 7, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["s1", "2"], ["s2", "3"]]}, {"line": 4, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["s1", "2"], ["s2", "3"]]}, {"line": 8, "state": [["n", "1"], ["la1", "[ 2 ]"], ["la2", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["s1", "2"], ["s2", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 0]]}}
{"id": 4065, "code": "int h1 = 10, m1 = 0, h2 = 12, m2 = 0, k = 120;\nint s = h1 * 60 + m1;\nint t = h2 * 60 + m2;\nint ans = t - s - k;\nSystem.out.println(Math.max(ans, 0));", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "12", ",", "m2", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "s", "=", "h1", "*", "60", "+", "m1", ";", "<2>", "int", "t", "=", "h2", "*", "60", "+", "m2", ";", "<3>", "int", "ans", "=", "t", "-", "s", "-", "k", ";", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "ans", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"], ["t", "720"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"], ["t", "720"], ["ans", "0"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["s", "600"], ["t", "720"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 2835, "code": "String S = \"1111111111\";\nint ans = 99999;\nint ans_s = 99999;\nfor (int i = 0; i < S.length() - 2; i++) {\nint s = Integer.parseInt(S.substring(i, i + 3));\nans = Math.min(ans, Math.abs(s - 753));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"1111111111\"", ";", "<1>", "int", "ans", "=", "99999", ";", "<2>", "int", "ans_s", "=", "99999", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<4>", "int", "s", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<5>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "Math", ".", "abs", "(", "s", "-", "753", ")", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "1111111111"]]}, {"line": 1, "state": [["S", "1111111111"], ["ans", "99999"]]}, {"line": 2, "state": [["S", "1111111111"], ["ans", "99999"], ["ans_s", "99999"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "99999"], ["ans_s", "99999"], ["i", "0"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "99999"], ["ans_s", "99999"], ["i", "0"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "0"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "1"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "1"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "1"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "2"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "2"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "2"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "3"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "3"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "3"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "4"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "4"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "4"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "5"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "5"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "5"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "6"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "6"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "6"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "7"], ["s", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "7"], ["s", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "7"], ["s", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "7"], ["s", "111"]]}, {"line": 6, "state": [["S", "1111111111"], ["ans", "642"], ["ans_s", "99999"], ["i", "7"], ["s", "111"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "6": [[6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]]}}
{"id": 11583, "code": "String[] youbi = {\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"};\nString s = \"SAT\";\nfor (int i = 0; i < youbi.length; i++) {\nif (s.equals(\"SUN\")) {\nSystem.out.println(7);\nSystem.exit(0);}\nelse if (youbi[i].equals(s)) {\nSystem.out.println(6 - i);}}", "code_tokens": ["<0>", "String", "[", "]", "youbi", "=", "{", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ",", "\"SUN\"", "}", ";", "<1>", "String", "s", "=", "\"SAT\"", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "youbi", ".", "length", ";", "i", "++", ")", "{", "<3>", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "<5>", "System", ".", "exit", "(", "0", ")", ";", "}", "<6>", "else", "if", "(", "youbi", "[", "i", "]", ".", "equals", "(", "s", ")", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "6", "-", "i", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"]]}, {"line": 1, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "0"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "0"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "0"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "1"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "1"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "1"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "2"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "2"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "2"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "3"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "3"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "3"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "4"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "4"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "4"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "5"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "5"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "5"]]}, {"line": 7, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "5"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "6"]]}, {"line": 3, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "6"]]}, {"line": 6, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "6"]]}, {"line": 2, "state": [["youbi", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["s", "SAT"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 6, 3, 1], [2, 6, 3, 6, 3, 1], [2, 6, 3, 6, 3, 6, 3, 1], [2, 6, 3, 6, 3, 6, 3, 6, 3, 1], [2, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1], [2, 7, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1], [2, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1]], "3": [[3, 1], [3, 6, 3, 1], [3, 6, 3, 6, 3, 1], [3, 6, 3, 6, 3, 6, 3, 1], [3, 6, 3, 6, 3, 6, 3, 6, 3, 1], [3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1], [3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1]], "6": [[6, 3, 1], [6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1]], "7": [[7, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 1]]}}
{"id": 5980, "code": "int S = 5;\nif (S % 2 == 0) {\nSystem.out.println(S / 2);} else {\nSystem.out.println(S / 2 + 1);}", "code_tokens": ["<0>", "int", "S", "=", "5", ";", "<1>", "if", "(", "S", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "S", "/", "2", ")", ";", "}", "else", "{", "<3>", "System", ".", "out", ".", "println", "(", "S", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["S", "5"]]}, {"line": 2, "state": [["S", "5"]]}, {"line": 5, "state": [["S", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5, 2, 1]]}}
{"id": 15435, "code": "int x = 64145, y = 123, z = 456;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "64145", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8016, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nif ((N - 1) % (K - 1) == 0) {\nSystem.out.println((N - 1) / (K - 1));} else {\nSystem.out.println((N - 1) / (K - 1) + 1);}", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "if", "(", "(", "N", "-", "1", ")", "%", "(", "K", "-", "1", ")", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "(", "N", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "-", "1", ")", "/", "(", "K", "-", "1", ")", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "3"], ["K", "3"]]}, {"line": 1, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 6598, "code": "Scanner input = new Scanner(System.in);\nint N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nArrays.sort(A);Arrays.sort(B);Arrays.sort(C);\nint[] Bok = new int[N];\nfor (int b : B) {\nint temp = bisectLeft(A, b);\nBok[Bok.length] = temp; // This will need to be handled differently}\nint[] SB = new int[N + 1];SB[0] = 0;\nfor (int i = 0; i < N; i++) {\nint temp = SB[i] + Bok[i];\nSB[i + 1] = temp;}\nint ans = 0;\nfor (int c : C) {\nint temp = bisectLeft(B, c);\nans += SB[temp];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "Scanner", "input", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "3", ";", "<2>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<4>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<5>", "Arrays", ".", "sort", "(", "A", ")", ";", "Arrays", ".", "sort", "(", "B", ")", ";", "Arrays", ".", "sort", "(", "C", ")", ";", "<6>", "int", "[", "]", "Bok", "=", "new", "int", "[", "N", "]", ";", "<7>", "for", "(", "int", "b", ":", "B", ")", "{", "<8>", "int", "temp", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<9>", "Bok", "[", "Bok", ".", "length", "]", "=", "temp", ";", "// This will need to be handled differently}", "<10>", "int", "[", "]", "SB", "=", "new", "int", "[", "N", "+", "1", "]", ";", "SB", "[", "0", "]", "=", "0", ";", "<11>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<12>", "int", "temp", "=", "SB", "[", "i", "]", "+", "Bok", "[", "i", "]", ";", "<13>", "SB", "[", "i", "+", "1", "]", "=", "temp", ";", "}", "<14>", "int", "ans", "=", "0", ";", "<15>", "for", "(", "int", "c", ":", "C", ")", "{", "<16>", "int", "temp", "=", "bisectLeft", "(", "B", ",", "c", ")", ";", "<17>", "ans", "+=", "SB", "[", "temp", "]", ";", "}", "<18>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["N", "3"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ ]"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ ]"], ["b", "2"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ ]"], ["b", "2"], ["temp", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 11, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"]]}, {"line": 12, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 ]"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 ]"], ["i", "0"]]}, {"line": 14, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 ]"], ["i", "0"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 ]"], ["i", "0"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 ]"], ["i", "1"]]}, {"line": 14, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "6"], ["SB", "[ 0 , 3 ]"], ["i", "1"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "6"], ["SB", "[ 0 , 3 , 6 ]"], ["i", "1"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "6"], ["SB", "[ 0 , 3 , 6 ]"], ["i", "2"]]}, {"line": 14, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "9"], ["SB", "[ 0 , 3 , 6 ]"], ["i", "2"]]}, {"line": 15, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "9"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"]]}, {"line": 13, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "9"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"]]}, {"line": 16, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "9"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "0"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "9"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "0"], ["c", "3"]]}, {"line": 18, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "0"], ["c", "3"]]}, {"line": 19, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "9"], ["c", "3"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "9"], ["c", "3"]]}, {"line": 18, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "9"], ["c", "3"]]}, {"line": 19, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "18"], ["c", "3"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "18"], ["c", "3"]]}, {"line": 18, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "18"], ["c", "3"]]}, {"line": 19, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "27"], ["c", "3"]]}, {"line": 17, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "27"], ["c", "3"]]}, {"line": 20, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["Bok", "[ 3 , 3 , 3 ]"], ["b", "2"], ["temp", "3"], ["SB", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"], ["ans", "27"], ["c", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 6, 5, 4]], "8": [[8]], "9": [[9, 7, 6, 5, 4], [9, 10, 9, 7, 6, 5, 4], [9, 10, 9, 10, 9, 7, 6, 5, 4], [9, 10, 9, 10, 9, 10, 9, 7, 6, 5, 4]], "10": [[10, 9, 7, 6, 5, 4], [10, 9, 10, 9, 7, 6, 5, 4], [10, 9, 10, 9, 10, 9, 7, 6, 5, 4]], "11": [[11, 10, 9, 7, 6, 5, 4], [11, 10, 9, 10, 9, 7, 6, 5, 4], [11, 10, 9, 10, 9, 10, 9, 7, 6, 5, 4]], "12": [[12]], "13": [[13, 3], [13, 14, 13, 3], [13, 14, 13, 14, 13, 3], [13, 14, 13, 14, 13, 14, 13, 3]], "14": [[14, 13, 3], [14, 13, 14, 13, 3], [14, 13, 14, 13, 14, 13, 3]], "15": [[15, 14, 13, 3], [15, 14, 13, 14, 13, 3], [15, 14, 13, 14, 13, 14, 13, 3]], "16": [[16]], "17": [[17, 7, 6, 5, 4], [17, 18, 17, 7, 6, 5, 4], [17, 18, 17, 18, 17, 7, 6, 5, 4], [17, 18, 17, 18, 17, 18, 17, 7, 6, 5, 4]], "18": [[18, 17, 7, 6, 5, 4], [18, 17, 18, 17, 7, 6, 5, 4], [18, 17, 18, 17, 18, 17, 7, 6, 5, 4]], "19": [[19, 18, 17, 7, 6, 5, 4], [19, 18, 17, 18, 17, 7, 6, 5, 4], [19, 18, 17, 18, 17, 18, 17, 7, 6, 5, 4]], "20": [[20, 19, 18, 17, 18, 17, 18, 17, 7, 6, 5, 4]]}}
{"id": 8140, "code": "int n = 8, k = 3;\nString A = \"7 3 1 8 4 6 2 5\";\nint ans = 1 + -(-(n - k) / (k - 1));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "String", "A", "=", "\"7 3 1 8 4 6 2 5\"", ";", "<2>", "int", "ans", "=", "1", "+", "-", "(", "-", "(", "n", "-", "k", ")", "/", "(", "k", "-", "1", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["A", "7 3 1 8 4 6 2 5"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["A", "7 3 1 8 4 6 2 5"], ["ans", "4"]]}, {"line": 3, "state": [["n", "8"], ["k", "3"], ["A", "7 3 1 8 4 6 2 5"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 14618, "code": "int N = 1, P = 1;\nint[] A = Arrays.stream(\"50\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nint odds = 0, evens = 0;\nfor (int i : A) {\nif ((i & 1) == 1) {\nodds += 1;}\nelse {\nevens += 1;}}\nif (P == 0) {\nint ans = 0;\nlong fo = factorial(odds);\nfor (int r = 0; r <= odds; r += 2) {\nans += fo / (factorial(odds - r) * factorial(r));}\nans *= Math.pow(2, evens);System.out.println(ans); // Output the answer for P == 0}\nelse {\nint ans = 0;\nlong fo = factorial(odds);\nfor (int r = 1; r <= odds; r += 2) {\nans += fo / (factorial(odds - r) * factorial(r));}\nans *= Math.pow(2, evens);System.out.println(ans); // Output the answer for P == 1}", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "Arrays", ".", "stream", "(", "\"50\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "int", "odds", "=", "0", ",", "evens", "=", "0", ";", "<3>", "for", "(", "int", "i", ":", "A", ")", "{", "<4>", "if", "(", "(", "i", "&", "1", ")", "==", "1", ")", "{", "<5>", "odds", "+=", "1", ";", "}", "<6>", "else", "{", "<7>", "evens", "+=", "1", ";", "}", "}", "<8>", "if", "(", "P", "==", "0", ")", "{", "<9>", "int", "ans", "=", "0", ";", "<10>", "long", "fo", "=", "factorial", "(", "odds", ")", ";", "<11>", "for", "(", "int", "r", "=", "0", ";", "r", "<=", "odds", ";", "r", "+=", "2", ")", "{", "<12>", "ans", "+=", "fo", "/", "(", "factorial", "(", "odds", "-", "r", ")", "*", "factorial", "(", "r", ")", ")", ";", "}", "<13>", "ans", "*=", "Math", ".", "pow", "(", "2", ",", "evens", ")", ";", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "// Output the answer for P == 0}", "<14>", "else", "{", "<15>", "int", "ans", "=", "0", ";", "<16>", "long", "fo", "=", "factorial", "(", "odds", ")", ";", "<17>", "for", "(", "int", "r", "=", "1", ";", "r", "<=", "odds", ";", "r", "+=", "2", ")", "{", "<18>", "ans", "+=", "fo", "/", "(", "factorial", "(", "odds", "-", "r", ")", "*", "factorial", "(", "r", ")", ")", ";", "}", "<19>", "ans", "*=", "Math", ".", "pow", "(", "2", ",", "evens", ")", ";", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "// Output the answer for P == 1}"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "0"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "0"], ["i", "50"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "0"], ["i", "50"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"]]}, {"line": 8, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"]]}, {"line": 16, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"], ["ans", "0"]]}, {"line": 17, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"], ["ans", "0"], ["fo", "1"]]}, {"line": 18, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"], ["ans", "0"], ["fo", "1"]]}, {"line": 20, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"], ["ans", "0"], ["fo", "1"]]}, {"line": 21, "state": [["N", "1"], ["P", "1"], ["odds", "0"], ["evens", "1"], ["i", "50"], ["ans", "0"], ["fo", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1]], "4": [[4, 3, 1]], "7": [[7, 2]], "8": [[8]], "9": [[9, 0]], "16": [[16]], "17": [[17, 2]], "18": [[18, 17, 2]], "20": [[20, 16, 7, 2]], "21": [[21, 20, 16, 7, 2]]}}
{"id": 6233, "code": "int N = 2;\nint[] A = {1, 5};\nint[] B = {2, 4};\nint[] C = {3, 6};\nArrays.sort(A);\nArrays.sort(B);\nArrays.sort(C);\nint ans = 0;\nfor (int b : B) {\nint s = bisectLeft(A, b);\nint t = bisectRight(C, b);\nans += s * (N - t);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "6", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A", ")", ";", "<5>", "Arrays", ".", "sort", "(", "B", ")", ";", "<6>", "Arrays", ".", "sort", "(", "C", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "b", ":", "B", ")", "{", "<9>", "int", "s", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<10>", "int", "t", "=", "bisectRight", "(", "C", ",", "b", ")", ";", "<11>", "ans", "+=", "s", "*", "(", "N", "-", "t", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"], ["A", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 6, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 7, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 8, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"]]}, {"line": 10, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"], ["s", "1"]]}, {"line": 11, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"], ["s", "1"], ["t", "0"]]}, {"line": 12, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "2"], ["s", "1"], ["t", "0"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["s", "1"], ["t", "0"]]}, {"line": 10, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["s", "1"], ["t", "0"]]}, {"line": 11, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["s", "1"], ["t", "1"]]}, {"line": 12, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["s", "1"], ["t", "1"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["s", "1"], ["t", "1"]]}, {"line": 13, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["s", "1"], ["t", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8]], "9": [[9, 6, 3], [9, 11, 10, 9, 6, 3], [9, 11, 10, 9, 11, 10, 9, 6, 3]], "10": [[10, 9, 6, 3], [10, 9, 11, 10, 9, 6, 3]], "11": [[11, 10, 9, 6, 3], [11, 10, 9, 11, 10, 9, 6, 3]], "12": [[12, 11, 10, 9, 6, 3], [12, 11, 10, 9, 11, 10, 9, 6, 3]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 6, 3]]}}
{"id": 10023, "code": "int n = 6;\nString s = \")))())\";\nint left = 0;\nint right = 0;\nfor (int i = 0; i < n; i++) {\nif (s.charAt(i) == '(') {\nright += 1;}\nelse {\nif (right > 0) {\nright -= 1;}\nelse {\nleft += 1;}}}\nSystem.out.println(\"(\".repeat(left) + s + \")\".repeat(right));", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "int", "left", "=", "0", ";", "<3>", "int", "right", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<6>", "right", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "right", ">", "0", ")", "{", "<9>", "right", "-=", "1", ";", "}", "<10>", "else", "{", "<11>", "left", "+=", "1", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "left", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "right", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["left", "0"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["left", "0"], ["right", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "0"], ["right", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["left", "0"], ["right", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["left", "0"], ["right", "0"], ["i", "0"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["left", "1"], ["right", "0"], ["i", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "1"], ["right", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["left", "1"], ["right", "0"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["left", "1"], ["right", "0"], ["i", "1"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["left", "2"], ["right", "0"], ["i", "1"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "2"], ["right", "0"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["left", "2"], ["right", "0"], ["i", "2"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["left", "2"], ["right", "0"], ["i", "2"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "2"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "1"], ["i", "3"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "1"], ["i", "4"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "1"], ["i", "4"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "1"], ["i", "4"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "4"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "5"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "5"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["left", "3"], ["right", "0"], ["i", "5"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["left", "4"], ["right", "0"], ["i", "5"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["left", "4"], ["right", "0"], ["i", "5"]]}, {"line": 12, "state": [["n", "6"], ["s", ")))())"], ["left", "4"], ["right", "0"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 8, 3]], "8": [[8, 3], [8, 3], [8, 3], [8, 6, 8, 3], [8, 9, 8, 6, 8, 3]], "9": [[9, 8, 6, 8, 3]], "11": [[11, 2], [11, 2], [11, 2], [11, 2]], "12": [[12, 11, 2]]}}
{"id": 6068, "code": "int n = 2;\nint ans = -(-n / 2);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "ans", "=", "-", "(", "-", "n", "/", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["ans", "1"]]}, {"line": 2, "state": [["n", "2"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15859, "code": "int x = 64145, y = 123, z = 456;\nSystem.out.println((x - z + 1 - (z + y)) / (z + y));", "code_tokens": ["<0>", "int", "x", "=", "64145", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", "+", "1", "-", "(", "z", "+", "y", ")", ")", "/", "(", "z", "+", "y", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2782, "code": "String s = \"1234567876\";\nint ans = 753;\nfor (int i = 0; i <= s.length() - 3; i++) {\nans = Math.min(Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753), ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"1234567876\"", ";", "<1>", "int", "ans", "=", "753", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "s", ".", "length", "(", ")", "-", "3", ";", "i", "++", ")", "{", "<3>", "ans", "=", "Math", ".", "min", "(", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ",", "ans", ")", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "1234567876"]]}, {"line": 1, "state": [["s", "1234567876"], ["ans", "753"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "753"], ["i", "0"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "630"], ["i", "0"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "630"], ["i", "1"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "519"], ["i", "1"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "519"], ["i", "2"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "408"], ["i", "2"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "408"], ["i", "3"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "297"], ["i", "3"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "297"], ["i", "4"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "186"], ["i", "4"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "186"], ["i", "5"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "75"], ["i", "5"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "75"], ["i", "6"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "34"], ["i", "6"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 18940, "code": "int N = 5;\nif (N % 2 != 0) {\nSystem.out.println(0);}\nelse {\nint fives = 0;\nint power = 0;\nwhile (Math.pow(5, power + 1) <= N) {\npower++;}\nfor (int i = 1; i <= power; i++) {\nfives += N / (int) Math.pow(5, i) / 2;}\nSystem.out.println(fives);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "fives", "=", "0", ";", "<5>", "int", "power", "=", "0", ";", "<6>", "while", "(", "Math", ".", "pow", "(", "5", ",", "power", "+", "1", ")", "<=", "N", ")", "{", "<7>", "power", "++", ";", "}", "<8>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "power", ";", "i", "++", ")", "{", "<9>", "fives", "+=", "N", "/", "(", "int", ")", "Math", ".", "pow", "(", "5", ",", "i", ")", "/", "2", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "fives", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 2, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 6318, "code": "int n = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nint ans = 0;\nint[] L = new int[n];\nfor (int i = 0; i < n; i++) {\nint a = bisectLeft(A, B[i]);\nL[i] = a;}\nint[] cum = new int[n + 1];\nfor (int i = 0; i < n; i++) {\ncum[i + 1] = cum[i] + L[i];}\nfor (int i = 0; i < n; i++) {\nint b = bisectLeft(B, C[i]);\nans += cum[b];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "int", "[", "]", "L", "=", "new", "int", "[", "n", "]", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "int", "a", "=", "bisectLeft", "(", "A", ",", "B", "[", "i", "]", ")", ";", "<8>", "L", "[", "i", "]", "=", "a", ";", "}", "<9>", "int", "[", "]", "cum", "=", "new", "int", "[", "n", "+", "1", "]", ";", "<10>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<11>", "cum", "[", "i", "+", "1", "]", "=", "cum", "[", "i", "]", "+", "L", "[", "i", "]", ";", "}", "<12>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<13>", "int", "b", "=", "bisectLeft", "(", "B", ",", "C", "[", "i", "]", ")", ";", "<14>", "ans", "+=", "cum", "[", "b", "]", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"]]}, {"line": 2, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 6, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 0 , 0 , 0 ]"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 8, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 0 , 0 , 0 ]"], ["i", "0"], ["a", "3"]]}, {"line": 9, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 0 , 0 ]"], ["i", "0"], ["a", "3"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 0 , 0 ]"], ["i", "1"], ["a", "3"]]}, {"line": 8, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 0 , 0 ]"], ["i", "1"], ["a", "3"]]}, {"line": 9, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 0 ]"], ["i", "1"], ["a", "3"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 0 ]"], ["i", "2"], ["a", "3"]]}, {"line": 8, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 0 ]"], ["i", "2"], ["a", "3"]]}, {"line": 9, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"]]}, {"line": 7, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"]]}, {"line": 10, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 0 , 0 , 0 ]"]]}, {"line": 11, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "0"], ["a", "3"], ["cum", "[ 0 , 0 , 0 , 0 ]"]]}, {"line": 12, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "0"], ["a", "3"], ["cum", "[ 0 , 3 , 0 , 0 ]"]]}, {"line": 11, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "1"], ["a", "3"], ["cum", "[ 0 , 3 , 0 , 0 ]"]]}, {"line": 12, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "1"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 0 ]"]]}, {"line": 11, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 0 ]"]]}, {"line": 12, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"]]}, {"line": 11, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"]]}, {"line": 13, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "0"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"]]}, {"line": 14, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["L", "[ 3 , 3 , 3 ]"], ["i", "0"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 15, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["L", "[ 3 , 3 , 3 ]"], ["i", "0"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 13, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["L", "[ 3 , 3 , 3 ]"], ["i", "1"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 14, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["L", "[ 3 , 3 , 3 ]"], ["i", "1"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 15, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["L", "[ 3 , 3 , 3 ]"], ["i", "1"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 13, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 14, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 15, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 13, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}, {"line": 16, "state": [["n", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["L", "[ 3 , 3 , 3 ]"], ["i", "2"], ["a", "3"], ["cum", "[ 0 , 3 , 6 , 9 ]"], ["b", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1]], "7": [[7, 6, 1], [7, 9, 8, 7, 6, 1], [7, 9, 8, 7, 9, 8, 7, 6, 1], [7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "8": [[8, 7, 6, 1], [8, 7, 9, 8, 7, 6, 1], [8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "9": [[9, 8, 7, 6, 1], [9, 8, 7, 9, 8, 7, 6, 1], [9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "10": [[10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "11": [[11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "12": [[12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "13": [[13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [13, 14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [13, 14, 13, 14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "14": [[14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [14, 13, 14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "15": [[15, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [15, 14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1], [15, 14, 13, 14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]], "16": [[16, 15, 14, 13, 14, 13, 14, 13, 11, 12, 11, 12, 11, 12, 11, 10, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 6, 1]]}}
{"id": 13389, "code": "String s = \"haiku,atcoder,tasks\";\nString l = String.join(\" \", s.split(\",\"));\nSystem.out.println(l);", "code_tokens": ["<0>", "String", "s", "=", "\"haiku,atcoder,tasks\"", ";", "<1>", "String", "l", "=", "String", ".", "join", "(", "\" \"", ",", "s", ".", "split", "(", "\",\"", ")", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "l", ")", ";"], "trace": [{"line": 0, "state": [["s", "haiku , atcoder , tasks"]]}, {"line": 1, "state": [["s", "haiku , atcoder , tasks"], ["l", "haiku atcoder tasks"]]}, {"line": 2, "state": [["s", "haiku , atcoder , tasks"], ["l", "haiku atcoder tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 6673, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nSystem.out.println((h - java.util.Arrays.stream(a).sum() <= 0) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "h", "-", "java", ".", "util", ".", "Arrays", ".", "stream", "(", "a", ")", ".", "sum", "(", ")", "<=", "0", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 14533, "code": "int N = 1, P = 1;\nint[] A = {50};\nint[] ans = {1, 0};\nfor (int a : A) {\nif (a % 2 != 0) {\nint temp = ans[1];ans[1] = ans[1] + ans[0];ans[0] = temp + ans[0];}\nelse {\nans[0] = ans[0] * 2;\nans[1] = ans[1] * 2;}}\nSystem.out.println(ans[P]);", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "50", "}", ";", "<2>", "int", "[", "]", "ans", "=", "{", "1", ",", "0", "}", ";", "<3>", "for", "(", "int", "a", ":", "A", ")", "{", "<4>", "if", "(", "a", "%", "2", "!=", "0", ")", "{", "<5>", "int", "temp", "=", "ans", "[", "1", "]", ";", "ans", "[", "1", "]", "=", "ans", "[", "1", "]", "+", "ans", "[", "0", "]", ";", "ans", "[", "0", "]", "=", "temp", "+", "ans", "[", "0", "]", ";", "}", "<6>", "else", "{", "<7>", "ans", "[", "0", "]", "=", "ans", "[", "0", "]", "*", "2", ";", "<8>", "ans", "[", "1", "]", "=", "ans", "[", "1", "]", "*", "2", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", "[", "P", "]", ")", ";"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 1 , 0 ]"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 1 , 0 ]"], ["a", "50"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 1 , 0 ]"], ["a", "50"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 2 , 0 ]"], ["a", "50"]]}, {"line": 8, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 2 , 0 ]"], ["a", "50"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 2 , 0 ]"], ["a", "50"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["ans", "[ 2 , 0 ]"], ["a", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1]], "4": [[4, 3, 1]], "7": [[7, 2]], "8": [[8, 7, 2]], "9": [[9, 8, 7, 2]]}}
{"id": 1681, "code": "int N = 100, A = 100, B = 100;\nint S = Math.min(A, B);\nint T = 0;\nif (A + B > N) {\nT = (A + B) - N;}\nSystem.out.println(S + \" \" + T);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "S", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "T", "=", "0", ";", "<3>", "if", "(", "A", "+", "B", ">", "N", ")", "{", "<4>", "T", "=", "(", "A", "+", "B", ")", "-", "N", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "S", "+", "\" \"", "+", "T", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["S", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["S", "100"], ["T", "0"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["S", "100"], ["T", "0"]]}, {"line": 4, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["S", "100"], ["T", "100"]]}, {"line": 5, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["S", "100"], ["T", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 8581, "code": "int n = 7;\nint[] a = {3, 3, 4, 5, 4, 5, 3};\nint[] b = {5, 3, 4, 4, 2, 3, 2};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint a_sum = 0;for (int j = 0; j <= i; j++) {a_sum += a[j];}\nint b_sum = 0;for (int j = i; j < n; j++) {b_sum += b[j];}\nif (ans < a_sum + b_sum) {\nans = a_sum + b_sum;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "a_sum", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "a_sum", "+=", "a", "[", "j", "]", ";", "}", "<6>", "int", "b_sum", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "b_sum", "+=", "b", "[", "j", "]", ";", "}", "<7>", "if", "(", "ans", "<", "a_sum", "+", "b_sum", ")", "{", "<8>", "ans", "=", "a_sum", "+", "b_sum", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"], ["a_sum", "3"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"], ["a_sum", "3"], ["b_sum", "23"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"], ["a_sum", "3"], ["b_sum", "23"]]}, {"line": 8, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "0"], ["a_sum", "3"], ["b_sum", "23"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["a_sum", "3"], ["b_sum", "23"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["a_sum", "6"], ["b_sum", "23"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["a_sum", "6"], ["b_sum", "18"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"], ["a_sum", "6"], ["b_sum", "18"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["a_sum", "6"], ["b_sum", "18"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["a_sum", "10"], ["b_sum", "18"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["a_sum", "10"], ["b_sum", "15"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"], ["a_sum", "10"], ["b_sum", "15"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["a_sum", "10"], ["b_sum", "15"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["a_sum", "15"], ["b_sum", "15"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["a_sum", "15"], ["b_sum", "11"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"], ["a_sum", "15"], ["b_sum", "11"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["a_sum", "15"], ["b_sum", "11"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["a_sum", "19"], ["b_sum", "11"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["a_sum", "19"], ["b_sum", "7"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"], ["a_sum", "19"], ["b_sum", "7"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["a_sum", "19"], ["b_sum", "7"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["a_sum", "24"], ["b_sum", "7"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["a_sum", "24"], ["b_sum", "5"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"], ["a_sum", "24"], ["b_sum", "5"]]}, {"line": 8, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "5"], ["a_sum", "24"], ["b_sum", "5"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["a_sum", "24"], ["b_sum", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["a_sum", "27"], ["b_sum", "5"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["a_sum", "27"], ["b_sum", "2"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["a_sum", "27"], ["b_sum", "2"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["a_sum", "27"], ["b_sum", "2"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"], ["a_sum", "27"], ["b_sum", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 0], [8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "9": [[9, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]]}}
{"id": 7315, "code": "int h = 210, n = 5;\nint[] A = {31, 41, 59, 26, 53};\nfor (int i = 0; i < n; i++) {\nh -= A[i];}\nif (h > 0) {\nSystem.out.println(\"No\");}\nelse {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<3>", "h", "-=", "A", "[", "i", "]", ";", "}", "<4>", "if", "(", "h", ">", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 3, "state": [["h", "179"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 2, "state": [["h", "179"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 3, "state": [["h", "138"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 2, "state": [["h", "138"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 3, "state": [["h", "79"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 2, "state": [["h", "79"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 3, "state": [["h", "53"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 2, "state": [["h", "53"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 3, "state": [["h", "0"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 2, "state": [["h", "0"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 4, "state": [["h", "0"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 7, "state": [["h", "0"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "7": [[7]]}}
{"id": 4162, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nLocalDateTime t1 = LocalDateTime.of(2000, 1, 1, h1, m1, 0);\nLocalDateTime t2 = LocalDateTime.of(2000, 1, 1, h2, m2, 0);\nlong t = ChronoUnit.MINUTES.between(t1, t2);\nlong ans = t - k;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "LocalDateTime", "t1", "=", "LocalDateTime", ".", "of", "(", "2000", ",", "1", ",", "1", ",", "h1", ",", "m1", ",", "0", ")", ";", "<2>", "LocalDateTime", "t2", "=", "LocalDateTime", ".", "of", "(", "2000", ",", "1", ",", "1", ",", "h2", ",", "m2", ",", "0", ")", ";", "<3>", "long", "t", "=", "ChronoUnit", ".", "MINUTES", ".", "between", "(", "t1", ",", "t2", ")", ";", "<4>", "long", "ans", "=", "t", "-", "k", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "2000-01-01 10"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "2000-01-01 10"], ["t2", "2000-01-01 15"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "2000-01-01 10"], ["t2", "2000-01-01 15"], ["t", "300"]]}, {"line": 5, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "2000-01-01 10"], ["t2", "2000-01-01 15"], ["t", "300"], ["ans", "270"]]}, {"line": 6, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "2000-01-01 10"], ["t2", "2000-01-01 15"], ["t", "300"], ["ans", "270"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 5, 4, 3, 2, 1]]}}
{"id": 14746, "code": "int N = 3, P = 0;\nint[] a_ls = {1, 1, 1};\nint[][] dp = new int[N + 1][2];\ndp[0][0] = 1;\nfor (int i = 1; i <= N; i++) {\nint next = a_ls[i - 1] % 2;\nif (next == 0) {\ndp[i][0] += 2 * dp[i - 1][0];\ndp[i][1] += 2 * dp[i - 1][1];}\nelse {\ndp[i][0] += dp[i - 1][0] + dp[i - 1][1];\ndp[i][1] += dp[i - 1][0] + dp[i - 1][1];}}\nSystem.out.println(dp[N][P]);", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "a_ls", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "[", "]", "dp", "=", "new", "int", "[", "N", "+", "1", "]", "[", "2", "]", ";", "<3>", "dp", "[", "0", "]", "[", "0", "]", "=", "1", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "N", ";", "i", "++", ")", "{", "<5>", "int", "next", "=", "a_ls", "[", "i", "-", "1", "]", "%", "2", ";", "<6>", "if", "(", "next", "==", "0", ")", "{", "<7>", "dp", "[", "i", "]", "[", "0", "]", "+=", "2", "*", "dp", "[", "i", "-", "1", "]", "[", "0", "]", ";", "<8>", "dp", "[", "i", "]", "[", "1", "]", "+=", "2", "*", "dp", "[", "i", "-", "1", "]", "[", "1", "]", ";", "}", "<9>", "else", "{", "<10>", "dp", "[", "i", "]", "[", "0", "]", "+=", "dp", "[", "i", "-", "1", "]", "[", "0", "]", "+", "dp", "[", "i", "-", "1", "]", "[", "1", "]", ";", "<11>", "dp", "[", "i", "]", "[", "1", "]", "+=", "dp", "[", "i", "-", "1", "]", "[", "0", "]", "+", "dp", "[", "i", "-", "1", "]", "[", "1", "]", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "dp", "[", "N", "]", "[", "P", "]", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"], ["P", "0"]]}, {"line": 1, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "1"], ["next", "1"]]}, {"line": 6, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "1"], ["next", "1"]]}, {"line": 10, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "1"], ["next", "1"]]}, {"line": 11, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "1"], ["next", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "2"], ["next", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "2"], ["next", "1"]]}, {"line": 6, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 0 ] , [ 0 , 0 ] ]"], ["i", "2"], ["next", "1"]]}, {"line": 10, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 0 ] , [ 0 , 0 ] ]"], ["i", "2"], ["next", "1"]]}, {"line": 11, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 0 , 0 ] ]"], ["i", "2"], ["next", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 0 , 0 ] ]"], ["i", "3"], ["next", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 0 , 0 ] ]"], ["i", "3"], ["next", "1"]]}, {"line": 6, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 0 , 0 ] ]"], ["i", "3"], ["next", "1"]]}, {"line": 10, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 4 , 0 ] ]"], ["i", "3"], ["next", "1"]]}, {"line": 11, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 4 , 4 ] ]"], ["i", "3"], ["next", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 4 , 4 ] ]"], ["i", "3"], ["next", "1"]]}, {"line": 12, "state": [["N", "3"], ["P", "0"], ["a_ls", "[ 1 , 1 , 1 ]"], ["dp", "[ [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 4 , 4 ] ]"], ["i", "3"], ["next", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0]], "3": [[3, 2, 0]], "4": [[4, 2, 0], [4, 11, 10, 5, 4, 2, 0], [4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0], [4, 11, 10, 5, 4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 11, 10, 5, 4, 2, 0], [5, 4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0]], "6": [[6, 5, 4, 2, 0], [6, 5, 4, 11, 10, 5, 4, 2, 0], [6, 5, 4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0]], "10": [[10, 5, 4, 2, 0], [10, 5, 4, 11, 10, 5, 4, 2, 0], [10, 5, 4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0]], "11": [[11, 10, 5, 4, 2, 0], [11, 10, 5, 4, 11, 10, 5, 4, 2, 0], [11, 10, 5, 4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0]], "12": [[12, 11, 10, 5, 4, 11, 10, 5, 4, 11, 10, 5, 4, 2, 0]]}}
{"id": 16214, "code": "int n = 2;\nint[] a = {100, 0};\njava.util.Arrays.sort(a);\njava.util.List<Integer> k = new java.util.ArrayList<>();\nint max_a = a[a.length - 1];\ndouble max_half = max_a / 2.0; // Use double for accurate division\nfor (int i = 0; i < n; i++) {\nif (a[i] >= max_half) {\nif (i == 0) {\nk.add(a[i]);\nbreak;}\nk.add(a[i]);\nk.add(a[i - 1]);\nbreak;}}\nint ans = 0;\nif (k.size() == 1) {\nans = k.get(0);}\nelse {\nif (Math.abs(max_half - k.get(0)) < Math.abs(max_half - k.get(1))) {\nans = k.get(0);}\nelse {\nans = k.get(1);}}\nSystem.out.println(max_a + \" \" + ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "java", ".", "util", ".", "List", "<", "Integer", ">", "k", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "<4>", "int", "max_a", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<5>", "double", "max_half", "=", "max_a", "/", "2.0", ";", "// Use double for accurate division", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "if", "(", "a", "[", "i", "]", ">=", "max_half", ")", "{", "<8>", "if", "(", "i", "==", "0", ")", "{", "<9>", "k", ".", "add", "(", "a", "[", "i", "]", ")", ";", "<10>", "break", ";", "}", "<11>", "k", ".", "add", "(", "a", "[", "i", "]", ")", ";", "<12>", "k", ".", "add", "(", "a", "[", "i", "-", "1", "]", ")", ";", "<13>", "break", ";", "}", "}", "<14>", "int", "ans", "=", "0", ";", "<15>", "if", "(", "k", ".", "size", "(", ")", "==", "1", ")", "{", "<16>", "ans", "=", "k", ".", "get", "(", "0", ")", ";", "}", "<17>", "else", "{", "<18>", "if", "(", "Math", ".", "abs", "(", "max_half", "-", "k", ".", "get", "(", "0", ")", ")", "<", "Math", ".", "abs", "(", "max_half", "-", "k", ".", "get", "(", "1", ")", ")", ")", "{", "<19>", "ans", "=", "k", ".", "get", "(", "0", ")", ";", "}", "<20>", "else", "{", "<21>", "ans", "=", "k", ".", "get", "(", "1", ")", ";", "}", "}", "<22>", "System", ".", "out", ".", "println", "(", "max_a", "+", "\" \"", "+", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"], ["max_half", "50.0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"]]}, {"line": 14, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"], ["ans", "0"]]}, {"line": 15, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"], ["ans", "0"]]}, {"line": 18, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"], ["ans", "0"]]}, {"line": 21, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"], ["ans", "0"]]}, {"line": 22, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["k", "[ 100 , 0 ]"], ["max_a", "100"], ["max_half", "50.0"], ["i", "1"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 2, 1]], "5": [[5, 4, 2, 1]], "6": [[6, 0], [6, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 7, 6, 0]], "8": [[8, 7, 6, 7, 6, 0]], "11": [[11, 8, 7, 6, 7, 6, 0]], "12": [[12, 11, 8, 7, 6, 7, 6, 0]], "13": [[13]], "14": [[14]], "15": [[15, 12, 11, 8, 7, 6, 7, 6, 0]], "18": [[18, 15, 12, 11, 8, 7, 6, 7, 6, 0]], "21": [[21, 18, 15, 12, 11, 8, 7, 6, 7, 6, 0]], "22": [[22, 21, 18, 15, 12, 11, 8, 7, 6, 7, 6, 0]]}}
{"id": 16323, "code": "int n = 2;\nint[] a_l = {100, 0};\nArrays.sort(a_l);\nfor (int i = 0; i < a_l.length / 2; i++) {int temp = a_l[i];a_l[i] = a_l[a_l.length - 1 - i];a_l[a_l.length - 1 - i] = temp;}\nint ans_n = a_l[0];\nint[][] a_l2 = new int[a_l.length][2];\nfor (int i = 0; i < a_l.length; i++) {\na_l2[i][0] = (int) (Math.abs(a_l[i] - (ans_n / 2.0)));a_l2[i][1] = i;}\nArrays.sort(a_l2, (x, y) -> Integer.compare(x[0], y[0]));\nint ans_r_index;if (a_l2[0][1] == 0) {\nans_r_index = a_l2[1][1];} else {\nans_r_index = a_l2[0][1];}\nint ans_r = a_l[ans_r_index];\nSystem.out.println(ans_n + \" \" + ans_r);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a_l", "=", "{", "100", ",", "0", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a_l", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a_l", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "a_l", "[", "i", "]", ";", "a_l", "[", "i", "]", "=", "a_l", "[", "a_l", ".", "length", "-", "1", "-", "i", "]", ";", "a_l", "[", "a_l", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<4>", "int", "ans_n", "=", "a_l", "[", "0", "]", ";", "<5>", "int", "[", "]", "[", "]", "a_l2", "=", "new", "int", "[", "a_l", ".", "length", "]", "[", "2", "]", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a_l", ".", "length", ";", "i", "++", ")", "{", "<7>", "a_l2", "[", "i", "]", "[", "0", "]", "=", "(", "int", ")", "(", "Math", ".", "abs", "(", "a_l", "[", "i", "]", "-", "(", "ans_n", "/", "2.0", ")", ")", ")", ";", "a_l2", "[", "i", "]", "[", "1", "]", "=", "i", ";", "}", "<8>", "Arrays", ".", "sort", "(", "a_l2", ",", "(", "x", ",", "y", ")", "->", "Integer", ".", "compare", "(", "x", "[", "0", "]", ",", "y", "[", "0", "]", ")", ")", ";", "<9>", "int", "ans_r_index", ";", "if", "(", "a_l2", "[", "0", "]", "[", "1", "]", "==", "0", ")", "{", "<10>", "ans_r_index", "=", "a_l2", "[", "1", "]", "[", "1", "]", ";", "}", "else", "{", "<11>", "ans_r_index", "=", "a_l2", "[", "0", "]", "[", "1", "]", ";", "}", "<12>", "int", "ans_r", "=", "a_l", "[", "ans_r_index", "]", ";", "<13>", "System", ".", "out", ".", "println", "(", "ans_n", "+", "\" \"", "+", "ans_r", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"]]}, {"line": 3, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"]]}, {"line": 4, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ ]"]]}, {"line": 5, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ ]"], ["i", "0"], ["val", "100"]]}, {"line": 6, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) ]"], ["i", "0"], ["val", "100"]]}, {"line": 5, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) ]"], ["i", "1"], ["val", "0"]]}, {"line": 6, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"]]}, {"line": 5, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"]]}, {"line": 7, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"]]}, {"line": 8, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"]]}, {"line": 9, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"], ["ans_r_index", "1"]]}, {"line": 12, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"], ["ans_r_index", "1"], ["ans_r", "0"]]}, {"line": 13, "state": [["n", "2"], ["a_l", "[ 100 , 0 ]"], ["ans_n", "100"], ["a_l2", "[ (50.0 , 0) , (50.0 , 1) ]"], ["i", "1"], ["val", "0"], ["ans_r_index", "1"], ["ans_r", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 3, 2, 1], [5, 6, 5, 3, 2, 1], [5, 6, 5, 6, 5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1], [6, 5, 6, 5, 3, 2, 1]], "7": [[7, 6, 5, 6, 5, 3, 2, 1]], "8": [[8, 7, 6, 5, 6, 5, 3, 2, 1]], "9": [[9, 8, 7, 6, 5, 6, 5, 3, 2, 1]], "12": [[12, 9, 8, 7, 6, 5, 6, 5, 3, 2, 1]], "13": [[13, 12, 9, 8, 7, 6, 5, 6, 5, 3, 2, 1]]}}
{"id": 15852, "code": "int x = 12, y = 3, z = 1;\nint cnt = 0;\nx -= z;\nwhile (x >= 0) {\nx = x - (y + z);\nif (x >= 0) {\ncnt += 1;}\nelse {\nbreak;}}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "cnt", "=", "0", ";", "<2>", "x", "-=", "z", ";", "<3>", "while", "(", "x", ">=", "0", ")", "{", "<4>", "x", "=", "x", "-", "(", "y", "+", "z", ")", ";", "<5>", "if", "(", "x", ">=", "0", ")", "{", "<6>", "cnt", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "break", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["cnt", "0"]]}, {"line": 2, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["cnt", "0"]]}, {"line": 3, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["cnt", "0"]]}, {"line": 4, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["cnt", "0"]]}, {"line": 5, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["cnt", "0"]]}, {"line": 6, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["cnt", "1"]]}, {"line": 3, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["cnt", "1"]]}, {"line": 4, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["cnt", "1"]]}, {"line": 5, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["cnt", "1"]]}, {"line": 6, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["cnt", "2"]]}, {"line": 3, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["cnt", "2"]]}, {"line": 4, "state": [["x", "-1"], ["y", "3"], ["z", "1"], ["cnt", "2"]]}, {"line": 5, "state": [["x", "-1"], ["y", "3"], ["z", "1"], ["cnt", "2"]]}, {"line": 8, "state": [["x", "-1"], ["y", "3"], ["z", "1"], ["cnt", "2"]]}, {"line": 9, "state": [["x", "-1"], ["y", "3"], ["z", "1"], ["cnt", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 5, 4, 3, 2, 0], [3, 5, 4, 3, 5, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 5, 4, 3, 2, 0], [4, 3, 5, 4, 3, 5, 4, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 5, 4, 3, 2, 0], [5, 4, 3, 5, 4, 3, 5, 4, 3, 2, 0]], "6": [[6, 1], [6, 1]], "8": [[8]], "9": [[9, 6, 1]]}}
{"id": 15248, "code": "int x = 12, y = 3, z = 1;\nint length = x - 2 * z;\nint c = 1;\nwhile (true) {\nif ((y * c) + (z * (c - 1)) > length) {\nbreak;}\nc += 1;}\nSystem.out.println(c - 1);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "length", "=", "x", "-", "2", "*", "z", ";", "<2>", "int", "c", "=", "1", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "if", "(", "(", "y", "*", "c", ")", "+", "(", "z", "*", "(", "c", "-", "1", ")", ")", ">", "length", ")", "{", "<5>", "break", ";", "}", "<6>", "c", "+=", "1", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "c", "-", "1", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "1"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "1"]]}, {"line": 4, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "1"]]}, {"line": 6, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "2"]]}, {"line": 4, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "2"]]}, {"line": 6, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "3"]]}, {"line": 4, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "3"]]}, {"line": 5, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "3"]]}, {"line": 7, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["length", "10"], ["c", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 2, 1, 0], [4, 6, 4, 2, 1, 0], [4, 6, 4, 6, 4, 2, 1, 0]], "5": [[5]], "6": [[6, 4, 2, 1, 0], [6, 4, 6, 4, 2, 1, 0]], "7": [[7, 4, 6, 4, 6, 4, 2, 1, 0]]}}
{"id": 11299, "code": "String a = \"SUN\";\nif (a.equals(\"SUN\")) {\nSystem.out.println(\"7\");\n} else if (a.equals(\"SAT\")) {\nSystem.out.println(\"1\");\n} else if (a.equals(\"FRI\")) {\nSystem.out.println(\"2\");\n} else if (a.equals(\"THU\")) {\nSystem.out.println(\"3\");\n} else if (a.equals(\"WED\")) {\nSystem.out.println(\"4\");\n} else if (a.equals(\"TUE\")) {\nSystem.out.println(\"5\");\n} else {\nSystem.out.println(\"6\");}", "code_tokens": ["<0>", "String", "a", "=", "\"SUN\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"7\"", ")", ";", "<3>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "<5>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"2\"", ")", ";", "<7>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"3\"", ")", ";", "<9>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"4\"", ")", ";", "<11>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"5\"", ")", ";", "<13>", "}", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "\"6\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "SUN"]]}, {"line": 1, "state": [["a", "SUN"]]}, {"line": 2, "state": [["a", "SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 18423, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint x = Math.max(H, W);\nSystem.out.println((N + x - 1) / x);", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "x", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "x", "-", "1", ")", "/", "x", ")", ";"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["x", "14"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["x", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 10373, "code": "int a = 1, b = 1, k = 1;\nArrayList<Integer> ans = new ArrayList<>();\nint n;if (a > b) {\nn = a;} else if (a < b) {\nn = b;} else {\nn = a;}\nfor (int x = 1; x <= n; x++) {\nif (b % x == 0) {\nif (a % x == 0) {\nans.add(x);}}}\nSystem.out.println(ans.get(ans.size() - k));", "code_tokens": ["<0>", "int", "a", "=", "1", ",", "b", "=", "1", ",", "k", "=", "1", ";", "<1>", "ArrayList", "<", "Integer", ">", "ans", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<2>", "int", "n", ";", "if", "(", "a", ">", "b", ")", "{", "<3>", "n", "=", "a", ";", "}", "else", "if", "(", "a", "<", "b", ")", "{", "<4>", "n", "=", "b", ";", "}", "else", "{", "<5>", "n", "=", "a", ";", "}", "<6>", "for", "(", "int", "x", "=", "1", ";", "x", "<=", "n", ";", "x", "++", ")", "{", "<7>", "if", "(", "b", "%", "x", "==", "0", ")", "{", "<8>", "if", "(", "a", "%", "x", "==", "0", ")", "{", "<9>", "ans", ".", "add", "(", "x", ")", ";", "}", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ".", "get", "(", "ans", ".", "size", "(", ")", "-", "k", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "1"], ["b", "1"], ["k", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"]]}, {"line": 2, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"]]}, {"line": 4, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"]]}, {"line": 7, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"], ["n", "1"]]}, {"line": 8, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"], ["n", "1"], ["x", "1"]]}, {"line": 9, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"], ["n", "1"], ["x", "1"]]}, {"line": 10, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ ]"], ["n", "1"], ["x", "1"]]}, {"line": 11, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ 1 ]"], ["n", "1"], ["x", "1"]]}, {"line": 8, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ 1 ]"], ["n", "1"], ["x", "1"]]}, {"line": 12, "state": [["a", "1"], ["b", "1"], ["k", "1"], ["ans", "[ 1 ]"], ["n", "1"], ["x", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "4": [[4, 2, 0]], "7": [[7, 4, 2, 0]], "8": [[8, 7, 4, 2, 0], [8, 11, 10, 9, 8, 7, 4, 2, 0]], "9": [[9, 8, 7, 4, 2, 0]], "10": [[10, 9, 8, 7, 4, 2, 0]], "11": [[11, 10, 9, 8, 7, 4, 2, 0]], "12": [[12, 11, 10, 9, 8, 7, 4, 2, 0]]}}
{"id": 36, "code": "char[] s = {'c', 'o', 'd', 'e', 'f', 'e', 's', 't', 'i', 'v', 'a', 'l'};\nint K = 100;\nfor (int i = 0; i < s.length - 1; i++) {\nif (s[i] != 'a') {\nint a = 'z' + 1 - s[i];\nif (K >= a) {\ns[i] = 'a';\nK -= a;}}}\nif (K > 0) {\ns[s.length - 1] = (char) ((K + s[s.length - 1] - 'a') % ('z' - 'a' + 1) + 'a');}\nSystem.out.println(String.valueOf(s));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'c'", ",", "'o'", ",", "'d'", ",", "'e'", ",", "'f'", ",", "'e'", ",", "'s'", ",", "'t'", ",", "'i'", ",", "'v'", ",", "'a'", ",", "'l'", "}", ";", "<1>", "int", "K", "=", "100", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "-", "1", ";", "i", "++", ")", "{", "<3>", "if", "(", "s", "[", "i", "]", "!=", "'a'", ")", "{", "<4>", "int", "a", "=", "'z'", "+", "1", "-", "s", "[", "i", "]", ";", "<5>", "if", "(", "K", ">=", "a", ")", "{", "<6>", "s", "[", "i", "]", "=", "'a'", ";", "<7>", "K", "-=", "a", ";", "}", "}", "}", "<8>", "if", "(", "K", ">", "0", ")", "{", "<9>", "s", "[", "s", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "(", "K", "+", "s", "[", "s", ".", "length", "-", "1", "]", "-", "'a'", ")", "%", "(", "'z'", "-", "'a'", "+", "1", ")", "+", "'a'", ")", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"]]}, {"line": 1, "state": [["s", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"]]}, {"line": 2, "state": [["s", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"]]}, {"line": 3, "state": [["s", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"]]}, {"line": 4, "state": [["s", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"], ["a", "24"]]}, {"line": 5, "state": [["s", "[ c , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"], ["a", "24"]]}, {"line": 6, "state": [["s", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "100"], ["i", "0"], ["a", "24"]]}, {"line": 7, "state": [["s", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "0"], ["a", "24"]]}, {"line": 2, "state": [["s", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["a", "24"]]}, {"line": 3, "state": [["s", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["a", "24"]]}, {"line": 4, "state": [["s", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["a", "12"]]}, {"line": 5, "state": [["s", "[ a , o , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["a", "12"]]}, {"line": 6, "state": [["s", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "76"], ["i", "1"], ["a", "12"]]}, {"line": 7, "state": [["s", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "1"], ["a", "12"]]}, {"line": 2, "state": [["s", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["a", "12"]]}, {"line": 3, "state": [["s", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["a", "12"]]}, {"line": 4, "state": [["s", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["a", "23"]]}, {"line": 5, "state": [["s", "[ a , a , d , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["a", "23"]]}, {"line": 6, "state": [["s", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "64"], ["i", "2"], ["a", "23"]]}, {"line": 7, "state": [["s", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "2"], ["a", "23"]]}, {"line": 2, "state": [["s", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["a", "23"]]}, {"line": 3, "state": [["s", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["a", "23"]]}, {"line": 4, "state": [["s", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["a", "22"]]}, {"line": 5, "state": [["s", "[ a , a , a , e , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["a", "22"]]}, {"line": 6, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "41"], ["i", "3"], ["a", "22"]]}, {"line": 7, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "3"], ["a", "22"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["a", "22"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["a", "22"]]}, {"line": 4, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["a", "21"]]}, {"line": 5, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "4"], ["a", "21"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["a", "21"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["a", "21"]]}, {"line": 4, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["a", "22"]]}, {"line": 5, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "5"], ["a", "22"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["a", "22"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["a", "22"]]}, {"line": 4, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["a", "8"]]}, {"line": 5, "state": [["s", "[ a , a , a , a , f , e , s , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["a", "8"]]}, {"line": 6, "state": [["s", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "19"], ["i", "6"], ["a", "8"]]}, {"line": 7, "state": [["s", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "6"], ["a", "8"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["a", "8"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["a", "8"]]}, {"line": 4, "state": [["s", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["a", "7"]]}, {"line": 5, "state": [["s", "[ a , a , a , a , f , e , a , t , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["a", "7"]]}, {"line": 6, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "11"], ["i", "7"], ["a", "7"]]}, {"line": 7, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "7"], ["a", "7"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["a", "7"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["a", "7"]]}, {"line": 4, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["a", "18"]]}, {"line": 5, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "8"], ["a", "18"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["a", "18"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["a", "18"]]}, {"line": 4, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["a", "5"]]}, {"line": 5, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "9"], ["a", "5"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["a", "5"]]}, {"line": 3, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["a", "5"]]}, {"line": 2, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["a", "5"]]}, {"line": 8, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , l ]"], ["K", "4"], ["i", "10"], ["a", "5"]]}, {"line": 9, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["K", "4"], ["i", "10"], ["a", "5"]]}, {"line": 10, "state": [["s", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["K", "4"], ["i", "10"], ["a", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 6, 4, 3, 2, 0], [2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [2, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 6, 4, 3, 2, 0], [3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [5, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "6": [[6, 4, 3, 2, 0], [6, 4, 3, 2, 6, 4, 3, 2, 0], [6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "7": [[7, 5, 4, 3, 2, 0], [7, 5, 4, 3, 2, 6, 4, 3, 2, 0], [7, 5, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [7, 5, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [7, 5, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0], [7, 5, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "8": [[8, 5, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "9": [[9, 8, 5, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]], "10": [[10, 9, 8, 5, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 6, 4, 3, 2, 0]]}}
{"id": 8672, "code": "int n = 5;\nint[] a1 = {3, 2, 2, 4, 1};\nint[] a2 = {1, 2, 2, 2, 1};\nint res = 0;\nint tmp1 = 0;\nfor (int i = 0; i < n; i++) {\ntmp1 += a1[i];\nint tmp2 = 0;\nfor (int j = i; j < n; j++) {\ntmp2 += a2[j];}\nres = Math.max(res, tmp1 + tmp2);}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "res", "=", "0", ";", "<4>", "int", "tmp1", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "tmp1", "+=", "a1", "[", "i", "]", ";", "<7>", "int", "tmp2", "=", "0", ";", "<8>", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "<9>", "tmp2", "+=", "a2", "[", "j", "]", ";", "}", "<10>", "res", "=", "Math", ".", "max", "(", "res", ",", "tmp1", "+", "tmp2", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "0"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "0"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "0"], ["j", "0"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "1"], ["j", "0"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "1"], ["j", "1"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "3"], ["j", "1"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "3"], ["j", "2"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "5"], ["j", "2"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "5"], ["j", "3"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "7"], ["j", "3"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "7"], ["j", "4"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "8"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "0"], ["tmp1", "3"], ["i", "0"], ["tmp2", "8"], ["j", "4"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "3"], ["i", "0"], ["tmp2", "8"], ["j", "4"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "3"], ["i", "1"], ["tmp2", "8"], ["j", "4"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "8"], ["j", "4"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "0"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "0"], ["j", "1"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "2"], ["j", "1"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "2"], ["j", "2"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "4"], ["j", "2"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "4"], ["j", "3"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "6"], ["j", "3"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "6"], ["j", "4"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "7"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "11"], ["tmp1", "5"], ["i", "1"], ["tmp2", "7"], ["j", "4"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "5"], ["i", "1"], ["tmp2", "7"], ["j", "4"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "5"], ["i", "2"], ["tmp2", "7"], ["j", "4"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "7"], ["j", "4"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "0"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "0"], ["j", "2"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "2"], ["j", "2"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "2"], ["j", "3"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "4"], ["j", "3"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "4"], ["j", "4"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "5"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "5"], ["j", "4"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "2"], ["tmp2", "5"], ["j", "4"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "7"], ["i", "3"], ["tmp2", "5"], ["j", "4"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "5"], ["j", "4"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "0"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "0"], ["j", "3"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "2"], ["j", "3"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "2"], ["j", "4"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "3"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "12"], ["tmp1", "11"], ["i", "3"], ["tmp2", "3"], ["j", "4"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "11"], ["i", "3"], ["tmp2", "3"], ["j", "4"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "11"], ["i", "4"], ["tmp2", "3"], ["j", "4"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "3"], ["j", "4"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "0"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "0"], ["j", "4"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "1"], ["j", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "1"], ["j", "4"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "1"], ["j", "4"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "1"], ["j", "4"]]}, {"line": 11, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["res", "14"], ["tmp1", "12"], ["i", "4"], ["tmp2", "1"], ["j", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [5, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]], "7": [[7], [7, 10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [7, 10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [7, 10, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [7, 10, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]], "8": [[8, 6, 5, 0], [8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]], "9": [[9, 8, 6, 5, 0], [9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [9, 8, 6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]], "10": [[10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [10, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [10, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0], [10, 9, 8, 6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]], "11": [[11, 10, 9, 8, 6, 5, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 5, 0]]}}
{"id": 15658, "code": "int isu = 12, hito = 3, sukima = 1;\nint ninzuu = 0;\nwhile (true) {\nint ans = isu / ((hito + sukima) * ninzuu + sukima);\nif (ans == 0) {\nbreak;}\nninzuu = ninzuu + 1;}\nSystem.out.println(ninzuu - 1);", "code_tokens": ["<0>", "int", "isu", "=", "12", ",", "hito", "=", "3", ",", "sukima", "=", "1", ";", "<1>", "int", "ninzuu", "=", "0", ";", "<2>", "while", "(", "true", ")", "{", "<3>", "int", "ans", "=", "isu", "/", "(", "(", "hito", "+", "sukima", ")", "*", "ninzuu", "+", "sukima", ")", ";", "<4>", "if", "(", "ans", "==", "0", ")", "{", "<5>", "break", ";", "}", "<6>", "ninzuu", "=", "ninzuu", "+", "1", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ninzuu", "-", "1", ")", ";"], "trace": [{"line": 0, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"]]}, {"line": 1, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "0"]]}, {"line": 2, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "0"]]}, {"line": 3, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "0"], ["ans", "12"]]}, {"line": 4, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "0"], ["ans", "12"]]}, {"line": 6, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "1"], ["ans", "12"]]}, {"line": 3, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "1"], ["ans", "2"]]}, {"line": 4, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "1"], ["ans", "2"]]}, {"line": 6, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "2"], ["ans", "2"]]}, {"line": 3, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "2"], ["ans", "1"]]}, {"line": 4, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "2"], ["ans", "1"]]}, {"line": 6, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "3"], ["ans", "1"]]}, {"line": 3, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "3"], ["ans", "0"]]}, {"line": 4, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "3"], ["ans", "0"]]}, {"line": 5, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "3"], ["ans", "0"]]}, {"line": 7, "state": [["isu", "12"], ["hito", "3"], ["sukima", "1"], ["ninzuu", "3"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0], [3, 6, 3, 1, 0], [3, 6, 3, 6, 3, 1, 0], [3, 6, 3, 6, 3, 6, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 6, 3, 1, 0], [4, 3, 6, 3, 6, 3, 1, 0], [4, 3, 6, 3, 6, 3, 6, 3, 1, 0]], "5": [[5]], "6": [[6, 3, 1, 0], [6, 3, 6, 3, 1, 0], [6, 3, 6, 3, 6, 3, 1, 0]], "7": [[7, 3, 6, 3, 6, 3, 6, 3, 1, 0]]}}
{"id": 1155, "code": "String n = \"111\";\nint memo = Integer.parseInt(n.charAt(0) + \"\" + n.charAt(0) + \"\" + n.charAt(0));\nif (Integer.parseInt(n) <= memo) {\nSystem.out.println(memo);}\nelse {\nSystem.out.println(memo + 111);}", "code_tokens": ["<0>", "String", "n", "=", "\"111\"", ";", "<1>", "int", "memo", "=", "Integer", ".", "parseInt", "(", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", "+", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", "+", "n", ".", "charAt", "(", "0", ")", ")", ";", "<2>", "if", "(", "Integer", ".", "parseInt", "(", "n", ")", "<=", "memo", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "memo", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "memo", "+", "111", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"], ["memo", "111"]]}, {"line": 2, "state": [["n", "111"], ["memo", "111"]]}, {"line": 3, "state": [["n", "111"], ["memo", "111"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 5190, "code": "String a = \"xyz\";\nchar f = a.charAt(0);\nchar l = a.charAt(a.length() - 1);\nint le = a.length() - 2;\nSystem.out.println(f + String.valueOf(le) + l);", "code_tokens": ["<0>", "String", "a", "=", "\"xyz\"", ";", "<1>", "char", "f", "=", "a", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "l", "=", "a", ".", "charAt", "(", "a", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "int", "le", "=", "a", ".", "length", "(", ")", "-", "2", ";", "<4>", "System", ".", "out", ".", "println", "(", "f", "+", "String", ".", "valueOf", "(", "le", ")", "+", "l", ")", ";"], "trace": [{"line": 0, "state": [["a", "xyz"]]}, {"line": 1, "state": [["a", "xyz"], ["f", "x"]]}, {"line": 2, "state": [["a", "xyz"], ["f", "x"], ["l", "z"]]}, {"line": 3, "state": [["a", "xyz"], ["f", "x"], ["l", "z"], ["le", "1"]]}, {"line": 4, "state": [["a", "xyz"], ["f", "x"], ["l", "z"], ["le", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 4036, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint a = 60 * h2 + m2;\nint b = 60 * h1 + m1;\nSystem.out.println(a - b - k);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "a", "=", "60", "*", "h2", "+", "m2", ";", "<2>", "int", "b", "=", "60", "*", "h1", "+", "m1", ";", "<3>", "System", ".", "out", ".", "println", "(", "a", "-", "b", "-", "k", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["a", "900"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["a", "900"], ["b", "600"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["a", "900"], ["b", "600"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 12016, "code": "int M = 11, D = 30;\nint N = 12, A = 1;\nif (N > M) {\nSystem.out.println(\"1\");}\nelse {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "int", "M", "=", "11", ",", "D", "=", "30", ";", "<1>", "int", "N", "=", "12", ",", "A", "=", "1", ";", "<2>", "if", "(", "N", ">", "M", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["M", "11"], ["D", "30"]]}, {"line": 1, "state": [["M", "11"], ["D", "30"], ["N", "12"], ["A", "1"]]}, {"line": 2, "state": [["M", "11"], ["D", "30"], ["N", "12"], ["A", "1"]]}, {"line": 3, "state": [["M", "11"], ["D", "30"], ["N", "12"], ["A", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 7691, "code": "Scanner scanner = new Scanner(System.in);\nint h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nint s = 0;for (int value : a) {s += value;}\nif (h <= s) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<2>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<3>", "int", "s", "=", "0", ";", "for", "(", "int", "value", ":", "a", ")", "{", "s", "+=", "value", ";", "}", "<4>", "if", "(", "h", "<=", "s", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["h", "210"], ["n", "5"]]}, {"line": 4, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 5, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["s", "210"]]}, {"line": 6, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["s", "210"]]}, {"line": 7, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["s", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 4]], "6": [[6, 5, 4]], "7": [[7]]}}
{"id": 2575, "code": "System.out.println((new java.util.HashSet<>(java.util.Arrays.asList(4, 9, 0, 8))).equals(new java.util.HashSet<>(java.util.Arrays.asList(1, 9, 7, 4))) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "4", ",", "9", ",", "0", ",", "8", ")", ")", ")", ".", "equals", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "9", ",", "7", ",", "4", ")", ")", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 10140, "code": "int n = 6;\nString s = \")))())\";\nint r = 0;\nint l = 0;\nfor (char i : s.toCharArray()) {\nif (i == '(') {\nr += 1;}\nelse {\nif (r == 0) {\nl += 1;}\nelse {\nr -= 1;}}}\nSystem.out.println(\"(\".repeat(l) + s + \")\".repeat(r));", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "int", "r", "=", "0", ";", "<3>", "int", "l", "=", "0", ";", "<4>", "for", "(", "char", "i", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "i", "==", "'('", ")", "{", "<6>", "r", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "r", "==", "0", ")", "{", "<9>", "l", "+=", "1", ";", "}", "<10>", "else", "{", "<11>", "r", "-=", "1", ";", "}", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "l", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "r", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["r", "0"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "0"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "0"], ["i", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "0"], ["i", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "1"], ["i", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "1"], ["i", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "1"], ["i", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "1"], ["i", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "2"], ["i", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "2"], ["i", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "2"], ["i", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "2"], ["i", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", "("]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", "("]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["r", "1"], ["l", "3"], ["i", "("]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "1"], ["l", "3"], ["i", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["r", "1"], ["l", "3"], ["i", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["r", "1"], ["l", "3"], ["i", ")"]]}, {"line": 11, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", ")"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", ")"]]}, {"line": 8, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "3"], ["i", ")"]]}, {"line": 9, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "4"], ["i", ")"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "4"], ["i", ")"]]}, {"line": 13, "state": [["n", "6"], ["s", ")))())"], ["r", "0"], ["l", "4"], ["i", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "6": [[6, 8, 2]], "8": [[8, 2], [8, 2], [8, 2], [8, 6, 8, 2], [8, 11, 8, 6, 8, 2]], "9": [[9, 3], [9, 3], [9, 3], [9, 3]], "11": [[11, 8, 6, 8, 2]], "13": [[13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 13034, "code": "System.out.println(\"5\".equals(\"753\") ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"5\"", ".", "equals", "(", "\"753\"", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 8677, "code": "int n = 7;\nint[] a = {3, 3, 4, 5, 4, 5, 3};\nint[] b = {5, 3, 4, 4, 2, 3, 2};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint sumA = 0;for (int j = 0; j <= i; j++) {sumA += a[j];}int sumB = 0;for (int j = i; j < n; j++) {sumB += b[j];}ans = Math.max(ans, sumA + sumB);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "sumA", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA", "+=", "a", "[", "j", "]", ";", "}", "int", "sumB", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumB", "+=", "b", "[", "j", "]", ";", "}", "ans", "=", "Math", ".", "max", "(", "ans", ",", "sumA", "+", "sumB", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "0"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "1"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "2"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "3"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "4"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "26"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "5"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["b", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "29"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 6314, "code": "int n = 2;\nint ans = 0;\nint[] a = {1, 5};\nint[] b = {2, 4};\nint[] c = {3, 6};\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nfor (int i : b) {\nint aa = bisectLeft(a, i);\nint cc = c.length - bisectRight(c, i);\nans += aa * cc;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "int", "[", "]", "a", "=", "{", "1", ",", "5", "}", ";", "<3>", "int", "[", "]", "b", "=", "{", "2", ",", "4", "}", ";", "<4>", "int", "[", "]", "c", "=", "{", "3", ",", "6", "}", ";", "<5>", "Arrays", ".", "sort", "(", "a", ")", ";", "<6>", "Arrays", ".", "sort", "(", "b", ")", ";", "<7>", "Arrays", ".", "sort", "(", "c", ")", ";", "<8>", "for", "(", "int", "i", ":", "b", ")", "{", "<9>", "int", "aa", "=", "bisectLeft", "(", "a", ",", "i", ")", ";", "<10>", "int", "cc", "=", "c", ".", "length", "-", "bisectRight", "(", "c", ",", "i", ")", ";", "<11>", "ans", "+=", "aa", "*", "cc", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["n", "2"]]}, {"line": 4, "state": [["n", "2"], ["ans", "0"]]}, {"line": 5, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"]]}, {"line": 6, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 7, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 8, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 9, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 10, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 11, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "2"]]}, {"line": 12, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "2"], ["aa", "1"]]}, {"line": 13, "state": [["n", "2"], ["ans", "0"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "2"], ["aa", "1"], ["cc", "2"]]}, {"line": 14, "state": [["n", "2"], ["ans", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "2"], ["aa", "1"], ["cc", "2"]]}, {"line": 11, "state": [["n", "2"], ["ans", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "4"], ["aa", "1"], ["cc", "2"]]}, {"line": 12, "state": [["n", "2"], ["ans", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "4"], ["aa", "1"], ["cc", "2"]]}, {"line": 13, "state": [["n", "2"], ["ans", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "4"], ["aa", "1"], ["cc", "1"]]}, {"line": 14, "state": [["n", "2"], ["ans", "3"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "4"], ["aa", "1"], ["cc", "1"]]}, {"line": 11, "state": [["n", "2"], ["ans", "3"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "4"], ["aa", "1"], ["cc", "1"]]}, {"line": 15, "state": [["n", "2"], ["ans", "3"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["i", "4"], ["aa", "1"], ["cc", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8, 5]], "9": [[9, 6]], "10": [[10, 7]], "11": [[11, 9, 6], [11, 13, 12, 11, 9, 6], [11, 13, 12, 11, 13, 12, 11, 9, 6]], "12": [[12, 11, 9, 6], [12, 11, 13, 12, 11, 9, 6]], "13": [[13, 12, 11, 9, 6], [13, 12, 11, 13, 12, 11, 9, 6]], "14": [[14, 13, 12, 11, 9, 6], [14, 13, 12, 11, 13, 12, 11, 9, 6]], "15": [[15, 14, 13, 12, 11, 13, 12, 11, 9, 6]]}}
{"id": 17669, "code": "String S = \"1700\";\nint x = Integer.parseInt(S.substring(0, 2));\nint y = Integer.parseInt(S.substring(2));\nif (x == 0) {\nif (0 < y && y <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}\nelse if (0 < x && x <= 12) {\nif (0 < y && y <= 12) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse if (x >= 13) {\nif (0 < y && y <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "S", "=", "\"1700\"", ";", "<1>", "int", "x", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "0", ",", "2", ")", ")", ";", "<2>", "int", "y", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "2", ")", ")", ";", "<3>", "if", "(", "x", "==", "0", ")", "{", "<4>", "if", "(", "0", "<", "y", "&&", "y", "<=", "12", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}", "<8>", "else", "if", "(", "0", "<", "x", "&&", "x", "<=", "12", ")", "{", "<9>", "if", "(", "0", "<", "y", "&&", "y", "<=", "12", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<13>", "else", "if", "(", "x", ">=", "13", ")", "{", "<14>", "if", "(", "0", "<", "y", "&&", "y", "<=", "12", ")", "{", "<15>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<16>", "else", "{", "<17>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "1700"]]}, {"line": 1, "state": [["S", "1700"], ["x", "17"]]}, {"line": 2, "state": [["S", "1700"], ["x", "17"], ["y", "0"]]}, {"line": 3, "state": [["S", "1700"], ["x", "17"], ["y", "0"]]}, {"line": 8, "state": [["S", "1700"], ["x", "17"], ["y", "0"]]}, {"line": 13, "state": [["S", "1700"], ["x", "17"], ["y", "0"]]}, {"line": 14, "state": [["S", "1700"], ["x", "17"], ["y", "0"]]}, {"line": 17, "state": [["S", "1700"], ["x", "17"], ["y", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "8": [[8, 3, 1, 0]], "13": [[13, 8, 3, 1, 0]], "14": [[14, 2, 1, 0]], "17": [[17]]}}
{"id": 16043, "code": "int n = 12, m = 4;\nif (n - m * 2 >= 0) {\nSystem.out.println(n - m * 2);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "n", "=", "12", ",", "m", "=", "4", ";", "<1>", "if", "(", "n", "-", "m", "*", "2", ">=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", "-", "m", "*", "2", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "12"], ["m", "4"]]}, {"line": 1, "state": [["n", "12"], ["m", "4"]]}, {"line": 2, "state": [["n", "12"], ["m", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 6963, "code": "String hp = \"10\";String N = \"3\";\nString[] a = {\"4\", \"5\", \"6\"};\nint sum = 0;for (String x : a) {sum += Integer.parseInt(x);}System.out.println(sum >= Integer.parseInt(hp) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "String", "hp", "=", "\"10\"", ";", "String", "N", "=", "\"3\"", ";", "<1>", "String", "[", "]", "a", "=", "{", "\"4\"", ",", "\"5\"", ",", "\"6\"", "}", ";", "<2>", "int", "sum", "=", "0", ";", "for", "(", "String", "x", ":", "a", ")", "{", "sum", "+=", "Integer", ".", "parseInt", "(", "x", ")", ";", "}", "System", ".", "out", ".", "println", "(", "sum", ">=", "Integer", ".", "parseInt", "(", "hp", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["hp", "10"], ["N", "3"]]}, {"line": 1, "state": [["hp", "10"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["x", "4"]]}, {"line": 2, "state": [["x", "5"]]}, {"line": 2, "state": [["x", "6"]]}, {"line": 2, "state": [["x", "6"]]}, {"line": 2, "state": [["hp", "10"], ["N", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0], [2, 1, 0]]}}
{"id": 8642, "code": "int n = 4;\nint[] al = {1, 1, 1, 1};\nint[] bl = {1, 1, 1, 1};\nint res = 0;\nfor (int i = 1; i <= n; i++) {\nint aa = 0;for (int j = 0; j < i; j++) {aa += al[j];}\nint bb = 0;for (int j = i - 1; j < n; j++) {bb += bl[j];}\nres = Math.max(res, aa + bb);}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "al", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "bl", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "res", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "n", ";", "i", "++", ")", "{", "<5>", "int", "aa", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "i", ";", "j", "++", ")", "{", "aa", "+=", "al", "[", "j", "]", ";", "}", "<6>", "int", "bb", "=", "0", ";", "for", "(", "int", "j", "=", "i", "-", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "bb", "+=", "bl", "[", "j", "]", ";", "}", "<7>", "res", "=", "Math", ".", "max", "(", "res", ",", "aa", "+", "bb", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "0"]]}, {"line": 4, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "0"], ["i", "1"], ["aa", "1"]]}, {"line": 6, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "0"], ["i", "1"], ["aa", "1"], ["bb", "4"]]}, {"line": 7, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "1"], ["aa", "1"], ["bb", "4"]]}, {"line": 4, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "2"], ["aa", "1"], ["bb", "4"]]}, {"line": 5, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "2"], ["aa", "2"], ["bb", "4"]]}, {"line": 6, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "2"], ["aa", "2"], ["bb", "3"]]}, {"line": 7, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "2"], ["aa", "2"], ["bb", "3"]]}, {"line": 4, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "3"], ["aa", "2"], ["bb", "3"]]}, {"line": 5, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "3"], ["aa", "3"], ["bb", "3"]]}, {"line": 6, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "3"], ["aa", "3"], ["bb", "2"]]}, {"line": 7, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "3"], ["aa", "3"], ["bb", "2"]]}, {"line": 4, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "4"], ["aa", "3"], ["bb", "2"]]}, {"line": 5, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "4"], ["aa", "4"], ["bb", "2"]]}, {"line": 6, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "4"], ["aa", "4"], ["bb", "1"]]}, {"line": 7, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "4"], ["aa", "4"], ["bb", "1"]]}, {"line": 4, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "4"], ["aa", "4"], ["bb", "1"]]}, {"line": 8, "state": [["n", "4"], ["al", "[ 1 , 1 , 1 , 1 ]"], ["bl", "[ 1 , 1 , 1 , 1 ]"], ["res", "5"], ["i", "4"], ["aa", "4"], ["bb", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]]}}
{"id": 12732, "code": "int x = 5;\njava.util.Set<Integer> a = new java.util.HashSet<>();a.add(7);a.add(5);a.add(3);\nSystem.out.println(a.contains(x) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "int", "x", "=", "5", ";", "<1>", "java", ".", "util", ".", "Set", "<", "Integer", ">", "a", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "a", ".", "add", "(", "7", ")", ";", "a", ".", "add", "(", "5", ")", ";", "a", ".", "add", "(", "3", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", ".", "contains", "(", "x", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["x", "5"]]}, {"line": 1, "state": [["x", "5"], ["a", "{ 3 , 5 , 7 }"]]}, {"line": 2, "state": [["x", "5"], ["a", "{ 3 , 5 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 2426, "code": "int n = 1, m = 1;\nint nC2 = (n >= 2) ? factorial(n).divide(factorial(2).multiply(factorial(n - 2))).intValue() : 0;\nint mC2 = (m >= 2) ? factorial(m).divide(factorial(2).multiply(factorial(m - 2))).intValue() : 0;\nSystem.out.println(nC2 + mC2);", "code_tokens": ["<0>", "int", "n", "=", "1", ",", "m", "=", "1", ";", "<1>", "int", "nC2", "=", "(", "n", ">=", "2", ")", "?", "factorial", "(", "n", ")", ".", "divide", "(", "factorial", "(", "2", ")", ".", "multiply", "(", "factorial", "(", "n", "-", "2", ")", ")", ")", ".", "intValue", "(", ")", ":", "0", ";", "<2>", "int", "mC2", "=", "(", "m", ">=", "2", ")", "?", "factorial", "(", "m", ")", ".", "divide", "(", "factorial", "(", "2", ")", ".", "multiply", "(", "factorial", "(", "m", "-", "2", ")", ")", ")", ".", "intValue", "(", ")", ":", "0", ";", "<3>", "System", ".", "out", ".", "println", "(", "nC2", "+", "mC2", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "1"], ["m", "1"]]}, {"line": 2, "state": [["n", "1"], ["m", "1"], ["nC2", "0"]]}, {"line": 3, "state": [["n", "1"], ["m", "1"], ["nC2", "0"], ["mC2", "0"]]}, {"line": 4, "state": [["n", "1"], ["m", "1"], ["nC2", "0"], ["mC2", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]]}}
{"id": 1018, "code": "int N = 112;\nString S = String.valueOf(N);\nint x = Integer.parseInt(String.valueOf(S.charAt(0)));\nint y = Integer.parseInt(String.valueOf(S.charAt(1)));\nint z = Integer.parseInt(String.valueOf(S.charAt(2)));\nint ans;if (x > y) {\nans = x * 100 + x * 10 + x;\n} else if (x < y) {\nx += 1;\nans = x * 100 + x * 10 + x;\n} else {\nif (x > z) {\nans = x * 100 + x * 10 + x;\n} else if (x < z) {\nx += 1;\nans = x * 100 + x * 10 + x;\n} else {\nans = N;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "112", ";", "<1>", "String", "S", "=", "String", ".", "valueOf", "(", "N", ")", ";", "<2>", "int", "x", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "S", ".", "charAt", "(", "0", ")", ")", ")", ";", "<3>", "int", "y", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "S", ".", "charAt", "(", "1", ")", ")", ")", ";", "<4>", "int", "z", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "S", ".", "charAt", "(", "2", ")", ")", ")", ";", "<5>", "int", "ans", ";", "if", "(", "x", ">", "y", ")", "{", "<6>", "ans", "=", "x", "*", "100", "+", "x", "*", "10", "+", "x", ";", "<7>", "}", "else", "if", "(", "x", "<", "y", ")", "{", "<8>", "x", "+=", "1", ";", "<9>", "ans", "=", "x", "*", "100", "+", "x", "*", "10", "+", "x", ";", "<10>", "}", "else", "{", "<11>", "if", "(", "x", ">", "z", ")", "{", "<12>", "ans", "=", "x", "*", "100", "+", "x", "*", "10", "+", "x", ";", "<13>", "}", "else", "if", "(", "x", "<", "z", ")", "{", "<14>", "x", "+=", "1", ";", "<15>", "ans", "=", "x", "*", "100", "+", "x", "*", "10", "+", "x", ";", "<16>", "}", "else", "{", "<17>", "ans", "=", "N", ";", "}", "}", "<18>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "112"]]}, {"line": 1, "state": [["N", "112"], ["S", "112"]]}, {"line": 2, "state": [["N", "112"], ["S", "112"], ["x", "1"]]}, {"line": 3, "state": [["N", "112"], ["S", "112"], ["x", "1"], ["y", "1"]]}, {"line": 4, "state": [["N", "112"], ["S", "112"], ["x", "1"], ["y", "1"], ["z", "2"]]}, {"line": 5, "state": [["N", "112"], ["S", "112"], ["x", "1"], ["y", "1"], ["z", "2"]]}, {"line": 7, "state": [["N", "112"], ["S", "112"], ["x", "1"], ["y", "1"], ["z", "2"]]}, {"line": 11, "state": [["N", "112"], ["S", "112"], ["x", "1"], ["y", "1"], ["z", "2"]]}, {"line": 13, "state": [["N", "112"], ["S", "112"], ["x", "1"], ["y", "1"], ["z", "2"]]}, {"line": 14, "state": [["N", "112"], ["S", "112"], ["x", "2"], ["y", "1"], ["z", "2"]]}, {"line": 15, "state": [["N", "112"], ["S", "112"], ["x", "2"], ["y", "1"], ["z", "2"], ["ans", "222"]]}, {"line": 18, "state": [["N", "112"], ["S", "112"], ["x", "2"], ["y", "1"], ["z", "2"], ["ans", "222"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0]], "7": [[7, 5, 3, 2, 1, 0]], "11": [[11, 7, 5, 3, 2, 1, 0]], "13": [[13, 11, 7, 5, 3, 2, 1, 0]], "14": [[14, 13, 11, 7, 5, 3, 2, 1, 0]], "15": [[15, 14, 13, 11, 7, 5, 3, 2, 1, 0]], "18": [[18, 15, 14, 13, 11, 7, 5, 3, 2, 1, 0]]}}
{"id": 5404, "code": "int N = 5;\nN += 1;\nSystem.out.println(N / 2);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "N", "+=", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "N", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "6"]]}, {"line": 2, "state": [["N", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 12098, "code": "int[] a = {11, 30};\nint[] b = {12, 1};\nif (a[0] == b[0]) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(1);}", "code_tokens": ["<0>", "int", "[", "]", "a", "=", "{", "11", ",", "30", "}", ";", "<1>", "int", "[", "]", "b", "=", "{", "12", ",", "1", "}", ";", "<2>", "if", "(", "a", "[", "0", "]", "==", "b", "[", "0", "]", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "[ 11 , 30 ]"]]}, {"line": 1, "state": [["a", "[ 11 , 30 ]"], ["b", "[ 12 , 1 ]"]]}, {"line": 2, "state": [["a", "[ 11 , 30 ]"], ["b", "[ 12 , 1 ]"]]}, {"line": 5, "state": [["a", "[ 11 , 30 ]"], ["b", "[ 12 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 3820, "code": "int x = 12, y = 3, z = 1;\nint ans = (int) Math.floor((x - z) / (double) (y + z));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "ans", "=", "(", "int", ")", "Math", ".", "floor", "(", "(", "x", "-", "z", ")", "/", "(", "double", ")", "(", "y", "+", "z", ")", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ans", "2"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 5325, "code": "int n = 100;\nif (n % 2 == 0) {System.out.println(n / 2);} else {System.out.println(n / 2 + 1);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2570, "code": "int[] n = Arrays.stream(\"1 2 9 1\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nif (Arrays.equals(new int[]{1, 4, 7, 9}, Arrays.stream(n).sorted().toArray())) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "[", "]", "n", "=", "Arrays", ".", "stream", "(", "\"1 2 9 1\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<1>", "if", "(", "Arrays", ".", "equals", "(", "new", "int", "[", "]", "{", "1", ",", "4", ",", "7", ",", "9", "}", ",", "Arrays", ".", "stream", "(", "n", ")", ".", "sorted", "(", ")", ".", "toArray", "(", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 4, "state": []}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 760, "code": "Scanner scanner = new Scanner(System.in);\nint k = 101;\nint num = 7;\nint flag = 0;\nfor (int i = 1; i <= k; i++) {\nif (num % k == 0) {\nflag = 1;\nbreak;}\nnum = (num * 10 + 7) % k;}\nif (flag == 1) {\nSystem.out.println(i);}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "k", "=", "101", ";", "<2>", "int", "num", "=", "7", ";", "<3>", "int", "flag", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "k", ";", "i", "++", ")", "{", "<5>", "if", "(", "num", "%", "k", "==", "0", ")", "{", "<6>", "flag", "=", "1", ";", "<7>", "break", ";", "}", "<8>", "num", "=", "(", "num", "*", "10", "+", "7", ")", "%", "k", ";", "}", "<9>", "if", "(", "flag", "==", "1", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["k", "101"]]}, {"line": 2, "state": [["k", "101"], ["num", "7"]]}, {"line": 3, "state": [["k", "101"], ["num", "7"], ["flag", "0"]]}, {"line": 4, "state": [["k", "101"], ["num", "7"], ["flag", "0"], ["i", "1"]]}, {"line": 5, "state": [["k", "101"], ["num", "7"], ["flag", "0"], ["i", "1"]]}, {"line": 8, "state": [["k", "101"], ["num", "77"], ["flag", "0"], ["i", "1"]]}, {"line": 4, "state": [["k", "101"], ["num", "77"], ["flag", "0"], ["i", "2"]]}, {"line": 5, "state": [["k", "101"], ["num", "77"], ["flag", "0"], ["i", "2"]]}, {"line": 8, "state": [["k", "101"], ["num", "70"], ["flag", "0"], ["i", "2"]]}, {"line": 4, "state": [["k", "101"], ["num", "70"], ["flag", "0"], ["i", "3"]]}, {"line": 5, "state": [["k", "101"], ["num", "70"], ["flag", "0"], ["i", "3"]]}, {"line": 8, "state": [["k", "101"], ["num", "0"], ["flag", "0"], ["i", "3"]]}, {"line": 4, "state": [["k", "101"], ["num", "0"], ["flag", "0"], ["i", "4"]]}, {"line": 5, "state": [["k", "101"], ["num", "0"], ["flag", "0"], ["i", "4"]]}, {"line": 6, "state": [["k", "101"], ["num", "0"], ["flag", "1"], ["i", "4"]]}, {"line": 7, "state": [["k", "101"], ["num", "0"], ["flag", "1"], ["i", "4"]]}, {"line": 9, "state": [["k", "101"], ["num", "0"], ["flag", "1"], ["i", "4"]]}, {"line": 10, "state": [["k", "101"], ["num", "0"], ["flag", "1"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 1], [4, 1], [4, 1]], "5": [[5, 4, 1], [5, 4, 1], [5, 4, 1], [5, 4, 1]], "6": [[6, 3]], "7": [[7]], "8": [[8, 5, 4, 1], [8, 5, 4, 1], [8, 5, 4, 1]], "9": [[9, 6, 3]], "10": [[10, 4, 1]]}}
{"id": 6689, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nif (sum(a) >= h) {\nSystem.out.println(\"Yes\");\n} else {System.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "sum", "(", "a", ")", ">=", "h", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 19461, "code": "int n = 3;\nSystem.out.println(n % 2 == 1 ? new int[]{n, 2 * n}[0] : new int[]{n, 2 * n}[1]);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "%", "2", "==", "1", "?", "new", "int", "[", "]", "{", "n", ",", "2", "*", "n", "}", "[", "0", "]", ":", "new", "int", "[", "]", "{", "n", ",", "2", "*", "n", "}", "[", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15057, "code": "int N = 3, P = 0;\nint odd = 3;\nint even = N - odd;\nif (odd == 0) {\nif (P == 0) {\nSystem.out.println((int) Math.pow(2, even));}\nelse {\nSystem.out.println(0);}}\nelse {\nSystem.out.println((int) (Math.pow(2, even) * (Math.pow(2, odd) / 2)));}", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "P", "=", "0", ";", "<1>", "int", "odd", "=", "3", ";", "<2>", "int", "even", "=", "N", "-", "odd", ";", "<3>", "if", "(", "odd", "==", "0", ")", "{", "<4>", "if", "(", "P", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even", ")", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "(", "Math", ".", "pow", "(", "2", ",", "even", ")", "*", "(", "Math", ".", "pow", "(", "2", ",", "odd", ")", "/", "2", ")", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "3"], ["P", "0"]]}, {"line": 1, "state": [["N", "3"], ["P", "0"], ["odd", "3"]]}, {"line": 2, "state": [["N", "3"], ["P", "0"], ["odd", "3"], ["even", "0"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["odd", "3"], ["even", "0"]]}, {"line": 9, "state": [["N", "3"], ["P", "0"], ["odd", "3"], ["even", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "9": [[9, 3, 2, 1, 0]]}}
{"id": 7966, "code": "int n = 8, k = 3;int[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nSystem.out.println(new int[]{(int) Math.ceil((n - k) / (double) (k - 1)) + 1, 1}[n == k ? 1 : 0]);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "new", "int", "[", "]", "{", "(", "int", ")", "Math", ".", "ceil", "(", "(", "n", "-", "k", ")", "/", "(", "double", ")", "(", "k", "-", "1", ")", ")", "+", "1", ",", "1", "}", "[", "n", "==", "k", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 10083, "code": "int N = 6;\nString S = \")))(())\";\nint[] T = new int[N];for (int i = 0; i < N; i++) {T[i] = S.charAt(i) == '(' ? 1 : -1;}\nint l = 0, l_min = 0;\nint r = 0, r_min = 0;\nfor (int i = 0; i < N; i++) {\nl += T[i];\nl_min = Math.min(l_min, l);\nr -= T[N - i - 1];\nr_min = Math.min(r_min, r);}\nString result = \"(\".repeat(-l_min) + S + \")\".repeat(-r_min);System.out.println(result);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "String", "S", "=", "\")))(())\"", ";", "<2>", "int", "[", "]", "T", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "T", "[", "i", "]", "=", "S", ".", "charAt", "(", "i", ")", "==", "'('", "?", "1", ":", "-", "1", ";", "}", "<3>", "int", "l", "=", "0", ",", "l_min", "=", "0", ";", "<4>", "int", "r", "=", "0", ",", "r_min", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "l", "+=", "T", "[", "i", "]", ";", "<7>", "l_min", "=", "Math", ".", "min", "(", "l_min", ",", "l", ")", ";", "<8>", "r", "-=", "T", "[", "N", "-", "i", "-", "1", "]", ";", "<9>", "r_min", "=", "Math", ".", "min", "(", "r_min", ",", "r", ")", ";", "}", "<10>", "String", "result", "=", "\"(\"", ".", "repeat", "(", "-", "l_min", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "-", "r_min", ")", ";", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["S", ")))())"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", "("]]}, {"line": 2, "state": [["c", "("]]}, {"line": 2, "state": [["c", "("]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["c", ")"]]}, {"line": 2, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"]]}, {"line": 3, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "0"], ["l_min", "0"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "0"], ["l_min", "0"], ["r", "0"], ["r_min", "0"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "0"], ["l_min", "0"], ["r", "0"], ["r_min", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-1"], ["l_min", "0"], ["r", "0"], ["r_min", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-1"], ["l_min", "-1"], ["r", "0"], ["r_min", "0"], ["i", "0"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-1"], ["l_min", "-1"], ["r", "1"], ["r_min", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-1"], ["l_min", "-1"], ["r", "1"], ["r_min", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-1"], ["l_min", "-1"], ["r", "1"], ["r_min", "0"], ["i", "1"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-1"], ["r", "1"], ["r_min", "0"], ["i", "1"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-2"], ["r", "1"], ["r_min", "0"], ["i", "1"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-2"], ["r", "2"], ["r_min", "0"], ["i", "1"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-2"], ["r", "2"], ["r_min", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-2"], ["r", "2"], ["r_min", "0"], ["i", "2"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-2"], ["r", "2"], ["r_min", "0"], ["i", "2"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "2"], ["r_min", "0"], ["i", "2"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "1"], ["r_min", "0"], ["i", "2"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "1"], ["r_min", "0"], ["i", "2"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "1"], ["r_min", "0"], ["i", "3"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-3"], ["r", "1"], ["r_min", "0"], ["i", "3"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-3"], ["r", "1"], ["r_min", "0"], ["i", "3"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-3"], ["r", "2"], ["r_min", "0"], ["i", "3"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-3"], ["r", "2"], ["r_min", "0"], ["i", "3"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-2"], ["l_min", "-3"], ["r", "2"], ["r_min", "0"], ["i", "4"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "2"], ["r_min", "0"], ["i", "4"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "2"], ["r_min", "0"], ["i", "4"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "3"], ["r_min", "0"], ["i", "4"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "3"], ["r_min", "0"], ["i", "4"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-3"], ["l_min", "-3"], ["r", "3"], ["r_min", "0"], ["i", "5"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-4"], ["l_min", "-3"], ["r", "3"], ["r_min", "0"], ["i", "5"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-4"], ["l_min", "-4"], ["r", "3"], ["r_min", "0"], ["i", "5"]]}, {"line": 8, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-4"], ["l_min", "-4"], ["r", "4"], ["r_min", "0"], ["i", "5"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-4"], ["l_min", "-4"], ["r", "4"], ["r_min", "0"], ["i", "5"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-4"], ["l_min", "-4"], ["r", "4"], ["r_min", "0"], ["i", "5"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["T", "[ -1 , -1 , -1 , 1 , -1 , -1 ]"], ["l", "-4"], ["l_min", "-4"], ["r", "4"], ["r_min", "0"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 8, 6, 5, 0], [5, 8, 6, 5, 8, 6, 5, 0], [5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 8, 6, 5, 0], [6, 5, 8, 6, 5, 8, 6, 5, 0], [6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0]], "7": [[7, 6, 5, 0], [7, 6, 5, 8, 6, 5, 0], [7, 6, 5, 8, 6, 5, 8, 6, 5, 0], [7, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [7, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [7, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0]], "8": [[8, 6, 5, 0], [8, 6, 5, 8, 6, 5, 0], [8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0]], "9": [[9, 8, 6, 5, 0], [9, 8, 6, 5, 8, 6, 5, 0], [9, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [9, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [9, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0], [9, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0]], "10": [[10, 9, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 8, 6, 5, 0]]}}
{"id": 13737, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nLocalDateTime d1 = LocalDateTime.of(2018, 1, 7, h1, m1);\nLocalDateTime d2 = LocalDateTime.of(2018, 1, 7, h2, m2);\nDuration delta = Duration.between(d1, d2);\ndouble dt2 = delta.getSeconds() / 60.0;\ndt2 -= k;\nif (dt2 < 0) {\ndt2 = 0;}\nSystem.out.println((int) dt2);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "LocalDateTime", "d1", "=", "LocalDateTime", ".", "of", "(", "2018", ",", "1", ",", "7", ",", "h1", ",", "m1", ")", ";", "<2>", "LocalDateTime", "d2", "=", "LocalDateTime", ".", "of", "(", "2018", ",", "1", ",", "7", ",", "h2", ",", "m2", ")", ";", "<3>", "Duration", "delta", "=", "Duration", ".", "between", "(", "d1", ",", "d2", ")", ";", "<4>", "double", "dt2", "=", "delta", ".", "getSeconds", "(", ")", "/", "60.0", ";", "<5>", "dt2", "-=", "k", ";", "<6>", "if", "(", "dt2", "<", "0", ")", "{", "<7>", "dt2", "=", "0", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "dt2", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"], ["d2", "2018-01-07 15"]]}, {"line": 5, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"], ["d2", "2018-01-07 15"], ["delta", "5"]]}, {"line": 6, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"], ["d2", "2018-01-07 15"], ["delta", "5"], ["dt2", "300.0"]]}, {"line": 7, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"], ["d2", "2018-01-07 15"], ["delta", "5"], ["dt2", "270.0"]]}, {"line": 8, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"], ["d2", "2018-01-07 15"], ["delta", "5"], ["dt2", "270.0"]]}, {"line": 10, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "2018-01-07 10"], ["d2", "2018-01-07 15"], ["delta", "5"], ["dt2", "270.0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5, 4, 3, 2]], "6": [[6, 5, 4, 3, 2]], "7": [[7, 6, 5, 4, 3, 2]], "8": [[8, 7, 6, 5, 4, 3, 2]], "10": [[10, 8, 7, 6, 5, 4, 3, 2]]}}
{"id": 7069, "code": "int H = 210, N = 5;\nint[] data = {31, 41, 59, 26, 53};\nint S = 0;\nfor (int i = 0; i < data.length; i++) {\nS += data[i];}\nif (H > S) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "H", "=", "210", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "data", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "S", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "data", ".", "length", ";", "i", "++", ")", "{", "<4>", "S", "+=", "data", "[", "i", "]", ";", "}", "<5>", "if", "(", "H", ">", "S", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "210"], ["N", "5"]]}, {"line": 1, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "0"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "0"], ["i", "0"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "31"], ["i", "0"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "31"], ["i", "1"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "72"], ["i", "1"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "72"], ["i", "2"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "131"], ["i", "2"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "131"], ["i", "3"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "157"], ["i", "3"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "157"], ["i", "4"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "210"], ["i", "4"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "210"], ["i", "4"]]}, {"line": 5, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "210"], ["i", "4"]]}, {"line": 8, "state": [["H", "210"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"], ["S", "210"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "8": [[8]]}}
{"id": 5670, "code": "int n = 100;\nif (n % 2 != 0) {\nSystem.out.println(n / 2 + 1);}\nelse {\nSystem.out.println(n / 2);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}, {"line": 4, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 17077, "code": "String a = \"D\";String b = \"H\";\nif (a.equals(\"H\")) {\nif (b.equals(\"H\")) {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}}\nelse {\nif (b.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 7, "state": [["a", "D"], ["b", "H"]]}, {"line": 8, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "7": [[7, 0]], "8": [[8]]}}
{"id": 1672, "code": "int N = 100, A = 100, B = 100;\nint rmax = Math.min(A, B);\nint rmin = Math.max(0, A + B - N);\nSystem.out.println(rmax + \" \" + rmin);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "rmax", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "rmin", "=", "Math", ".", "max", "(", "0", ",", "A", "+", "B", "-", "N", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "rmax", "+", "\" \"", "+", "rmin", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["rmax", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["rmax", "100"], ["rmin", "100"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["rmax", "100"], ["rmin", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 5658, "code": "int n = 100;\nint ans = 0;\nif (n % 2 == 0) {\nans = n / 2;\nSystem.out.println(ans);}\nelse {\nans = n / 2 + 1;\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "ans", "=", "n", "/", "2", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<5>", "else", "{", "<6>", "ans", "=", "n", "/", "2", "+", "1", ";", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"], ["ans", "0"]]}, {"line": 2, "state": [["n", "100"], ["ans", "0"]]}, {"line": 3, "state": [["n", "100"], ["ans", "50"]]}, {"line": 4, "state": [["n", "100"], ["ans", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 6635, "code": "int n = 3;\nint[] a = {1, 1, 1};\nint[] b = {2, 2, 2};\nint[] c = {3, 3, 3};\nint res = 0;\nfor (int i = 0; i < n; i++) {\nint index1 = bisectLeft(a, b[i]);\nint index2 = bisectRight(c, b[i]);\nres += index1 * (n - index2);}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "res", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "int", "index1", "=", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", ";", "<7>", "int", "index2", "=", "bisectRight", "(", "c", ",", "b", "[", "i", "]", ")", ";", "<8>", "res", "+=", "index1", "*", "(", "n", "-", "index2", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"]]}, {"line": 2, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "0"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "0"], ["i", "0"], ["index1", "3"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "0"], ["i", "0"], ["index1", "3"], ["index2", "0"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "9"], ["i", "0"], ["index1", "3"], ["index2", "0"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "9"], ["i", "1"], ["index1", "3"], ["index2", "0"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "9"], ["i", "1"], ["index1", "3"], ["index2", "0"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "9"], ["i", "1"], ["index1", "3"], ["index2", "0"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "18"], ["i", "1"], ["index1", "3"], ["index2", "0"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "18"], ["i", "2"], ["index1", "3"], ["index2", "0"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "18"], ["i", "2"], ["index1", "3"], ["index2", "0"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "18"], ["i", "2"], ["index1", "3"], ["index2", "0"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "27"], ["i", "2"], ["index1", "3"], ["index2", "0"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "27"], ["i", "2"], ["index1", "3"], ["index2", "0"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["res", "27"], ["i", "2"], ["index1", "3"], ["index2", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "7": [[7, 6, 1], [7, 6, 8, 7, 6, 1], [7, 6, 8, 7, 6, 8, 7, 6, 1]], "8": [[8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "9": [[9, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 1]]}}
{"id": 7946, "code": "int n = 4, k = 3;\nint[] a = {2, 3, 1, 4};\nint cnt;if (n == k) {\ncnt = 1;} else {\ncnt = (n - 2) / (k - 1) + 1;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "cnt", ";", "if", "(", "n", "==", "k", ")", "{", "<3>", "cnt", "=", "1", ";", "}", "else", "{", "<4>", "cnt", "=", "(", "n", "-", "2", ")", "/", "(", "k", "-", "1", ")", "+", "1", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"], ["k", "3"]]}, {"line": 1, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 5, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "2"]]}, {"line": 6, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["cnt", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "5": [[5, 2, 0]], "6": [[6, 5, 2, 0]]}}
{"id": 4088, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint t1 = h1 * 60 + m1, t2 = h2 * 60 + m2;\nif (t1 > t2) {\nt2 += 60 * 24;}\nint ans = t2 - t1 - k;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "t1", "=", "h1", "*", "60", "+", "m1", ",", "t2", "=", "h2", "*", "60", "+", "m2", ";", "<2>", "if", "(", "t1", ">", "t2", ")", "{", "<3>", "t2", "+=", "60", "*", "24", ";", "}", "<4>", "int", "ans", "=", "t2", "-", "t1", "-", "k", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "600"], ["t2", "900"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "600"], ["t2", "900"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "600"], ["t2", "900"], ["ans", "270"]]}, {"line": 5, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["t1", "600"], ["t2", "900"], ["ans", "270"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5, 4, 2, 1, 0]]}}
{"id": 14375, "code": "int N = 7;\nint[] A = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint last = 0;\nint ans = 1;\nfor (int i = 0; i < N - 1; i++) {\nint diff = A[i] - A[i + 1];\nif (last == 0) {\nif (diff > 0) {\nlast = 1;}\nelse if (diff < 0) {\nlast = -1;}}\nelse if (last * diff < 0) {\nans += 1;\nlast = 0;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "int", "last", "=", "0", ";", "<3>", "int", "ans", "=", "1", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<5>", "int", "diff", "=", "A", "[", "i", "]", "-", "A", "[", "i", "+", "1", "]", ";", "<6>", "if", "(", "last", "==", "0", ")", "{", "<7>", "if", "(", "diff", ">", "0", ")", "{", "<8>", "last", "=", "1", ";", "}", "<9>", "else", "if", "(", "diff", "<", "0", ")", "{", "<10>", "last", "=", "-", "1", ";", "}", "}", "<11>", "else", "if", "(", "last", "*", "diff", "<", "0", ")", "{", "<12>", "ans", "+=", "1", ";", "<13>", "last", "=", "0", ";", "}", "}", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"]]}, {"line": 3, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "0"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "-1"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "-1"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "1"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "2"], ["diff", "-1"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "2"], ["i", "2"], ["diff", "1"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "2"], ["i", "2"], ["diff", "1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "1"], ["ans", "2"], ["i", "3"], ["diff", "1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "1"], ["ans", "2"], ["i", "4"], ["diff", "1"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "1"], ["ans", "2"], ["i", "4"], ["diff", "-999999998"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "1"], ["ans", "2"], ["i", "4"], ["diff", "-999999998"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "1"], ["ans", "2"], ["i", "4"], ["diff", "-999999998"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "1"], ["ans", "3"], ["i", "4"], ["diff", "-999999998"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "3"], ["i", "4"], ["diff", "-999999998"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "3"], ["i", "5"], ["diff", "-999999998"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "0"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}, {"line": 14, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["last", "-1"], ["ans", "3"], ["i", "5"], ["diff", "-1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 2], [6, 10, 6, 2], [6, 11, 6, 10, 6, 2], [6, 13, 11, 6, 11, 6, 10, 6, 2], [6, 8, 6, 13, 11, 6, 11, 6, 10, 6, 2], [6, 13, 11, 6, 8, 6, 13, 11, 6, 11, 6, 10, 6, 2]], "7": [[7, 5, 4, 0], [7, 5, 4, 5, 4, 5, 4, 5, 4, 0], [7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 13, 11, 6, 11, 6, 10, 6, 2]], "9": [[9, 7, 5, 4, 0], [9, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "10": [[10, 6, 2], [10, 6, 13, 11, 6, 8, 6, 13, 11, 6, 11, 6, 10, 6, 2]], "11": [[11, 6, 10, 6, 2], [11, 6, 11, 6, 10, 6, 2], [11, 6, 8, 6, 13, 11, 6, 11, 6, 10, 6, 2]], "12": [[12, 3], [12, 3]], "13": [[13, 11, 6, 11, 6, 10, 6, 2], [13, 11, 6, 8, 6, 13, 11, 6, 11, 6, 10, 6, 2]], "14": [[14, 12, 3]]}}
{"id": 652, "code": "int K = 2;\nint num = 0;\nint cnt = 0;\nint ans = -1;\nfor (int i = 0; i < K; i++) {\nnum = num * 10 + 7;\ncnt += 1;\nif (num % K != 0) {\nnum = num % K;\n} else {\nans = cnt;\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "K", "=", "2", ";", "<1>", "int", "num", "=", "0", ";", "<2>", "int", "cnt", "=", "0", ";", "<3>", "int", "ans", "=", "-", "1", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "K", ";", "i", "++", ")", "{", "<5>", "num", "=", "num", "*", "10", "+", "7", ";", "<6>", "cnt", "+=", "1", ";", "<7>", "if", "(", "num", "%", "K", "!=", "0", ")", "{", "<8>", "num", "=", "num", "%", "K", ";", "<9>", "}", "else", "{", "<10>", "ans", "=", "cnt", ";", "<11>", "break", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["K", "2"]]}, {"line": 1, "state": [["K", "2"], ["num", "0"]]}, {"line": 2, "state": [["K", "2"], ["num", "0"], ["cnt", "0"]]}, {"line": 3, "state": [["K", "2"], ["num", "0"], ["cnt", "0"], ["ans", "-1"]]}, {"line": 4, "state": [["K", "2"], ["num", "0"], ["cnt", "0"], ["ans", "-1"], ["i", "0"]]}, {"line": 5, "state": [["K", "2"], ["num", "7"], ["cnt", "0"], ["ans", "-1"], ["i", "0"]]}, {"line": 6, "state": [["K", "2"], ["num", "7"], ["cnt", "1"], ["ans", "-1"], ["i", "0"]]}, {"line": 7, "state": [["K", "2"], ["num", "7"], ["cnt", "1"], ["ans", "-1"], ["i", "0"]]}, {"line": 8, "state": [["K", "2"], ["num", "1"], ["cnt", "1"], ["ans", "-1"], ["i", "0"]]}, {"line": 4, "state": [["K", "2"], ["num", "1"], ["cnt", "1"], ["ans", "-1"], ["i", "1"]]}, {"line": 5, "state": [["K", "2"], ["num", "17"], ["cnt", "1"], ["ans", "-1"], ["i", "1"]]}, {"line": 6, "state": [["K", "2"], ["num", "17"], ["cnt", "2"], ["ans", "-1"], ["i", "1"]]}, {"line": 7, "state": [["K", "2"], ["num", "17"], ["cnt", "2"], ["ans", "-1"], ["i", "1"]]}, {"line": 8, "state": [["K", "2"], ["num", "1"], ["cnt", "2"], ["ans", "-1"], ["i", "1"]]}, {"line": 4, "state": [["K", "2"], ["num", "1"], ["cnt", "2"], ["ans", "-1"], ["i", "1"]]}, {"line": 12, "state": [["K", "2"], ["num", "1"], ["cnt", "2"], ["ans", "-1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 0], [4, 0]], "5": [[5, 1], [5, 8, 7, 5, 1]], "6": [[6, 2], [6, 2]], "7": [[7, 5, 1], [7, 5, 8, 7, 5, 1]], "8": [[8, 7, 5, 1], [8, 7, 5, 8, 7, 5, 1]], "12": [[12, 3]]}}
{"id": 4630, "code": "String s = \"internationalization\";\nSystem.out.println(String.format(\"%s%d%s\", s.substring(0, 1), (s.length() - 2), s.substring(s.length() - 1)));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "s", ".", "substring", "(", "0", ",", "1", ")", ",", "(", "s", ".", "length", "(", ")", "-", "2", ")", ",", "s", ".", "substring", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4712, "code": "char[] s = {'s', 'm', 'i', 'l', 'e', 's'};\nSystem.out.println(String.valueOf(s[0]) + String.valueOf(s.length - 2) + String.valueOf(s[s.length - 1]));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'s'", ",", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", ",", "'s'", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", "[", "0", "]", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", "+", "String", ".", "valueOf", "(", "s", "[", "s", ".", "length", "-", "1", "]", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ s , m , i , l , e , s ]"]]}, {"line": 1, "state": [["s", "[ s , m , i , l , e , s ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18225, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint a = 0;\nint b = 0;\nint c = 0;\nint d = 0;\nfor (int i = 0; i < h; i++) {\na += w;\nb += 1;\nif (a >= n) {\nbreak;}}\nfor (int i = 0; i < w; i++) {\nc += h;\nd += 1;\nif (c >= n) {\nbreak;}}\nif (b > d) {\nSystem.out.println(d);\n} else {\nSystem.out.println(b);}", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "a", "=", "0", ";", "<4>", "int", "b", "=", "0", ";", "<5>", "int", "c", "=", "0", ";", "<6>", "int", "d", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "h", ";", "i", "++", ")", "{", "<8>", "a", "+=", "w", ";", "<9>", "b", "+=", "1", ";", "<10>", "if", "(", "a", ">=", "n", ")", "{", "<11>", "break", ";", "}", "}", "<12>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "w", ";", "i", "++", ")", "{", "<13>", "c", "+=", "h", ";", "<14>", "d", "+=", "1", ";", "<15>", "if", "(", "c", ">=", "n", ")", "{", "<16>", "break", ";", "}", "}", "<17>", "if", "(", "b", ">", "d", ")", "{", "<18>", "System", ".", "out", ".", "println", "(", "d", ")", ";", "<19>", "}", "else", "{", "<20>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "0"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "0"], ["b", "0"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "0"], ["b", "0"], ["c", "0"]]}, {"line": 6, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "0"], ["b", "0"], ["c", "0"], ["d", "0"]]}, {"line": 7, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "0"], ["b", "0"], ["c", "0"], ["d", "0"], ["i", "0"]]}, {"line": 8, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"], ["b", "0"], ["c", "0"], ["d", "0"], ["i", "0"]]}, {"line": 9, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"], ["b", "1"], ["c", "0"], ["d", "0"], ["i", "0"]]}, {"line": 10, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"], ["b", "1"], ["c", "0"], ["d", "0"], ["i", "0"]]}, {"line": 7, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "7"], ["b", "1"], ["c", "0"], ["d", "0"], ["i", "1"]]}, {"line": 8, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "1"], ["c", "0"], ["d", "0"], ["i", "1"]]}, {"line": 9, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "0"], ["d", "0"], ["i", "1"]]}, {"line": 10, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "0"], ["d", "0"], ["i", "1"]]}, {"line": 11, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "0"], ["d", "0"], ["i", "1"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "0"], ["d", "0"], ["i", "0"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "3"], ["d", "0"], ["i", "0"]]}, {"line": 14, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "3"], ["d", "1"], ["i", "0"]]}, {"line": 15, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "3"], ["d", "1"], ["i", "0"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "3"], ["d", "1"], ["i", "1"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "6"], ["d", "1"], ["i", "1"]]}, {"line": 14, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "6"], ["d", "2"], ["i", "1"]]}, {"line": 15, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "6"], ["d", "2"], ["i", "1"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "6"], ["d", "2"], ["i", "2"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "9"], ["d", "2"], ["i", "2"]]}, {"line": 14, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "9"], ["d", "3"], ["i", "2"]]}, {"line": 15, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "9"], ["d", "3"], ["i", "2"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "9"], ["d", "3"], ["i", "3"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "12"], ["d", "3"], ["i", "3"]]}, {"line": 14, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "12"], ["d", "4"], ["i", "3"]]}, {"line": 15, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "12"], ["d", "4"], ["i", "3"]]}, {"line": 16, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "12"], ["d", "4"], ["i", "3"]]}, {"line": 17, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "12"], ["d", "4"], ["i", "3"]]}, {"line": 20, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["a", "14"], ["b", "2"], ["c", "12"], ["d", "4"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 0], [7, 0]], "8": [[8, 3, 1], [8, 10, 8, 3, 1]], "9": [[9, 4], [9, 4]], "10": [[10, 8, 3, 1], [10, 8, 10, 8, 3, 1]], "11": [[11]], "12": [[12, 8, 10, 8, 3, 1], [12, 8, 10, 8, 3, 1], [12, 8, 10, 8, 3, 1], [12, 8, 10, 8, 3, 1]], "13": [[13, 7, 0], [13, 15, 13, 7, 0], [13, 15, 13, 15, 13, 7, 0], [13, 15, 13, 15, 13, 15, 13, 7, 0]], "14": [[14, 6], [14, 6], [14, 6], [14, 6]], "15": [[15, 13, 7, 0], [15, 13, 15, 13, 7, 0], [15, 13, 15, 13, 15, 13, 7, 0], [15, 13, 15, 13, 15, 13, 15, 13, 7, 0]], "16": [[16]], "17": [[17, 14, 6]], "20": [[20, 17, 14, 6]]}}
{"id": 18683, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint lines = 0;\nint act = 0;\nif (h <= w) {\nlines = h;\nact = w;}\nelse {\nlines = w;\nact = h;}\nint draw = 0;\nfor (int i = 0; i < lines; i++) {\nif (n <= (i + 1) * act) {\nSystem.out.println(i + 1);\nbreak;}}", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "lines", "=", "0", ";", "<4>", "int", "act", "=", "0", ";", "<5>", "if", "(", "h", "<=", "w", ")", "{", "<6>", "lines", "=", "h", ";", "<7>", "act", "=", "w", ";", "}", "<8>", "else", "{", "<9>", "lines", "=", "w", ";", "<10>", "act", "=", "h", ";", "}", "<11>", "int", "draw", "=", "0", ";", "<12>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "lines", ";", "i", "++", ")", "{", "<13>", "if", "(", "n", "<=", "(", "i", "+", "1", ")", "*", "act", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "i", "+", "1", ")", ";", "<15>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "0"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "0"], ["act", "0"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "0"], ["act", "0"]]}, {"line": 6, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "0"]]}, {"line": 7, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"]]}, {"line": 11, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"], ["i", "0"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"], ["i", "0"]]}, {"line": 12, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"], ["i", "1"]]}, {"line": 13, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"], ["i", "1"]]}, {"line": 14, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"], ["i", "1"]]}, {"line": 15, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["lines", "3"], ["act", "7"], ["draw", "0"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1, 0]], "6": [[6, 5, 1, 0]], "7": [[7, 5, 1, 0]], "11": [[11]], "12": [[12, 6, 5, 1, 0], [12, 13, 12, 6, 5, 1, 0]], "13": [[13, 12, 6, 5, 1, 0], [13, 12, 13, 12, 6, 5, 1, 0]], "14": [[14, 13, 12, 13, 12, 6, 5, 1, 0]], "15": [[15]]}}
{"id": 6157, "code": "int N = 3;\nint[] a = {1, 1, 1};\nint[] b = {2, 2, 2};\nint[] c = {3, 3, 3};\nArrays.sort(a);\nArrays.sort(c);\nint ans = 0;\nfor (int i = 0; i < b.length; i++) {\nint la = lowerBound(a, b[i]);\nint ra = upperBound(c, b[i]);\nans += la * (c.length - ra);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "c", ")", ";", "<6>", "int", "ans", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "b", ".", "length", ";", "i", "++", ")", "{", "<8>", "int", "la", "=", "lowerBound", "(", "a", ",", "b", "[", "i", "]", ")", ";", "<9>", "int", "ra", "=", "upperBound", "(", "c", ",", "b", "[", "i", "]", ")", ";", "<10>", "ans", "+=", "la", "*", "(", "c", ".", "length", "-", "ra", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 8, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["la", "3"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["i", "0"], ["la", "3"], ["ra", "0"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "0"], ["la", "3"], ["ra", "0"]]}, {"line": 8, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["la", "3"], ["ra", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["la", "3"], ["ra", "0"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["i", "1"], ["la", "3"], ["ra", "0"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "1"], ["la", "3"], ["ra", "0"]]}, {"line": 8, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["la", "3"], ["ra", "0"]]}, {"line": 9, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["la", "3"], ["ra", "0"]]}, {"line": 10, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["i", "2"], ["la", "3"], ["ra", "0"]]}, {"line": 11, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["la", "3"], ["ra", "0"]]}, {"line": 8, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["la", "3"], ["ra", "0"]]}, {"line": 12, "state": [["N", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["i", "2"], ["la", "3"], ["ra", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 4]], "7": [[7]], "8": [[8, 3], [8, 10, 9, 8, 3], [8, 10, 9, 8, 10, 9, 8, 3], [8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 3]], "9": [[9, 8, 3], [9, 8, 10, 9, 8, 3], [9, 8, 10, 9, 8, 10, 9, 8, 3]], "10": [[10, 9, 8, 3], [10, 9, 8, 10, 9, 8, 3], [10, 9, 8, 10, 9, 8, 10, 9, 8, 3]], "11": [[11, 10, 9, 8, 3], [11, 10, 9, 8, 10, 9, 8, 3], [11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 3]], "12": [[12, 11, 10, 9, 8, 10, 9, 8, 10, 9, 8, 3]]}}
{"id": 7044, "code": "int H = 20, N = 3;\nint[] A = {4, 5, 6};\nint ans = Arrays.stream(A).sum();\nif (ans >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "ans", "=", "Arrays", ".", "stream", "(", "A", ")", ".", "sum", "(", ")", ";", "<3>", "if", "(", "ans", ">=", "H", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["H", "20"], ["N", "3"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["ans", "15"]]}, {"line": 4, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["ans", "15"]]}, {"line": 7, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["ans", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "7": [[7]]}}
{"id": 9121, "code": "String s = \"2017/01/31\";\nSystem.out.println(String.format(\"2018/%s\", s.substring(5)));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"2018/%s\"", ",", "s", ".", "substring", "(", "5", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18612, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint M = Math.max(H, W);\nSystem.out.println((N + M - 1) / M);", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "M", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "M", "-", "1", ")", "/", "M", ")", ";"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["M", "14"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["M", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 4205, "code": "int H1 = 10, M1 = 0, H2 = 12, M2 = 0, K = 120;\nint timeW = M1 + H1 * 60;\nint timeS = M2 + H2 * 60;\nSystem.out.println(timeS - timeW - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "12", ",", "M2", "=", "0", ",", "K", "=", "120", ";", "<1>", "int", "timeW", "=", "M1", "+", "H1", "*", "60", ";", "<2>", "int", "timeS", "=", "M2", "+", "H2", "*", "60", ";", "<3>", "System", ".", "out", ".", "println", "(", "timeS", "-", "timeW", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["timeW", "600"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["timeW", "600"], ["timeS", "720"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["timeW", "600"], ["timeS", "720"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 4622, "code": "String s = \"smiles\";\nString n = String.valueOf(s.length() - 2);\nSystem.out.println(s.charAt(0) + n + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "String", "n", "=", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "n", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["n", "4"]]}, {"line": 2, "state": [["s", "smiles"], ["n", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 9305, "code": "System.out.println(\"2017/01/31\".replace(\"017\", \"018\"));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2017/01/31\"", ".", "replace", "(", "\"017\"", ",", "\"018\"", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 1031, "code": "System.out.println(-(-Integer.parseInt(\"111\") / 111 * 111));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "Integer", ".", "parseInt", "(", "\"111\"", ")", "/", "111", "*", "111", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 7639, "code": "int H = 210, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nint sum = 0;\nfor (int i = 0; i < A.length; i++) {\nsum = sum + A[i];}\nif (sum >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "210", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "sum", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "A", ".", "length", ";", "i", "++", ")", "{", "<4>", "sum", "=", "sum", "+", "A", "[", "i", "]", ";", "}", "<5>", "if", "(", "sum", ">=", "H", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "210"], ["N", "5"]]}, {"line": 1, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "0"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "0"], ["i", "0"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "31"], ["i", "0"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "31"], ["i", "1"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "72"], ["i", "1"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "72"], ["i", "2"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "131"], ["i", "2"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "131"], ["i", "3"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "157"], ["i", "3"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "157"], ["i", "4"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 5, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}, {"line": 6, "state": [["H", "210"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum", "210"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "6": [[6]]}}
{"id": 2416, "code": "int n = 1, m = 1;\nint x = n * (n - 1) / 2;\nint r = m * (m - 1) / 2;\nSystem.out.println(x + r);", "code_tokens": ["<0>", "int", "n", "=", "1", ",", "m", "=", "1", ";", "<1>", "int", "x", "=", "n", "*", "(", "n", "-", "1", ")", "/", "2", ";", "<2>", "int", "r", "=", "m", "*", "(", "m", "-", "1", ")", "/", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "x", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"], ["m", "1"]]}, {"line": 1, "state": [["n", "1"], ["m", "1"], ["x", "0"]]}, {"line": 2, "state": [["n", "1"], ["m", "1"], ["x", "0"], ["r", "0"]]}, {"line": 3, "state": [["n", "1"], ["m", "1"], ["x", "0"], ["r", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 15511, "code": "int X = 12, Y = 3, Z = 1;\nint s = Z;\nint c = 0;\nwhile (true) {\ns += Y + Z;\nif (s > X) {\nbreak;}\nc += 1;}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "s", "=", "Z", ";", "<2>", "int", "c", "=", "0", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "s", "+=", "Y", "+", "Z", ";", "<5>", "if", "(", "s", ">", "X", ")", "{", "<6>", "break", ";", "}", "<7>", "c", "+=", "1", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "1"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "1"], ["c", "0"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "1"], ["c", "0"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "5"], ["c", "0"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "5"], ["c", "0"]]}, {"line": 7, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "5"], ["c", "1"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "9"], ["c", "1"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "9"], ["c", "1"]]}, {"line": 7, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "9"], ["c", "2"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "2"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "2"]]}, {"line": 6, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "2"]]}, {"line": 8, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["s", "13"], ["c", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0], [4, 5, 4, 1, 0], [4, 5, 4, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 5, 4, 1, 0], [5, 4, 5, 4, 5, 4, 1, 0]], "6": [[6]], "7": [[7, 2], [7, 2]], "8": [[8, 7, 2]]}}
{"id": 17733, "code": "String s = \"1905\";\nint a1 = Integer.parseInt(s.substring(0, 2));\nint a2 = Integer.parseInt(s.substring(2));\nif (a1 >= 1 && a1 <= 12) {\nif (a2 >= 1 && a2 <= 12) {System.out.println(\"AMBIGUOUS\");}\nelse {System.out.println(\"MMYY\");}}\nelse {\nif (a2 >= 1 && a2 <= 12) {System.out.println(\"YYMM\");}\nelse {System.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "s", "=", "\"1905\"", ";", "<1>", "int", "a1", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ")", ";", "<2>", "int", "a2", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", ";", "<3>", "if", "(", "a1", ">=", "1", "&&", "a1", "<=", "12", ")", "{", "<4>", "if", "(", "a2", ">=", "1", "&&", "a2", "<=", "12", ")", "{", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<5>", "else", "{", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "a2", ">=", "1", "&&", "a2", "<=", "12", ")", "{", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<8>", "else", "{", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["s", "1905"]]}, {"line": 1, "state": [["s", "1905"], ["a1", "19"]]}, {"line": 2, "state": [["s", "1905"], ["a1", "19"], ["a2", "5"]]}, {"line": 3, "state": [["s", "1905"], ["a1", "19"], ["a2", "5"]]}, {"line": 7, "state": [["s", "1905"], ["a1", "19"], ["a2", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "7": [[7, 3, 1, 0]]}}
{"id": 3436, "code": "int A = 12, B = 4;\nif (A > 2 * B) {System.out.println(A - 2 * B);}\nelse {System.out.println(0);}", "code_tokens": ["<0>", "int", "A", "=", "12", ",", "B", "=", "4", ";", "<1>", "if", "(", "A", ">", "2", "*", "B", ")", "{", "System", ".", "out", ".", "println", "(", "A", "-", "2", "*", "B", ")", ";", "}", "<2>", "else", "{", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "12"], ["B", "4"]]}, {"line": 1, "state": [["A", "12"], ["B", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19299, "code": "int n = 12;\nint ans = 0;\nif (n % 2 == 1) {\nans = 0;}\nelse {\nint tmp = 10;\nwhile (tmp <= n) {\nans += n / tmp;\ntmp *= 5;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<3>", "ans", "=", "0", ";", "}", "<4>", "else", "{", "<5>", "int", "tmp", "=", "10", ";", "<6>", "while", "(", "tmp", "<=", "n", ")", "{", "<7>", "ans", "+=", "n", "/", "tmp", ";", "<8>", "tmp", "*=", "5", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"], ["ans", "0"]]}, {"line": 2, "state": [["n", "12"], ["ans", "0"]]}, {"line": 5, "state": [["n", "12"], ["ans", "0"], ["tmp", "10"]]}, {"line": 6, "state": [["n", "12"], ["ans", "0"], ["tmp", "10"]]}, {"line": 7, "state": [["n", "12"], ["ans", "1"], ["tmp", "10"]]}, {"line": 8, "state": [["n", "12"], ["ans", "1"], ["tmp", "50"]]}, {"line": 6, "state": [["n", "12"], ["ans", "1"], ["tmp", "50"]]}, {"line": 9, "state": [["n", "12"], ["ans", "1"], ["tmp", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "5": [[5]], "6": [[6, 5, 2, 0], [6, 8, 7, 6, 5, 2, 0]], "7": [[7, 6, 5, 2, 0]], "8": [[8, 7, 6, 5, 2, 0]], "9": [[9, 7, 6, 5, 2, 0]]}}
{"id": 5079, "code": "String S = \"xyz\";\nSystem.out.println(String.format(\"%s%d%s\", S.charAt(0), S.length() - 2, S.charAt(S.length() - 1)));", "code_tokens": ["<0>", "String", "S", "=", "\"xyz\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "S", ".", "charAt", "(", "0", ")", ",", "S", ".", "length", "(", ")", "-", "2", ",", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "xyz"]]}, {"line": 1, "state": [["S", "xyz"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18844, "code": "int h = 3;\nint w = 7;\nint n = 10;\nint r = Math.max(h, w);\nif (n % r != 0) {\nSystem.out.println(n / r + 1);}\nelse {\nSystem.out.println(n / r);}", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "int", "n", "=", "10", ";", "<3>", "int", "r", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "if", "(", "n", "%", "r", "!=", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "n", "/", "r", "+", "1", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "n", "/", "r", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["r", "7"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["r", "7"]]}, {"line": 5, "state": [["h", "3"], ["w", "7"], ["n", "10"], ["r", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 16174, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nArrays.sort(a);\nif (n == 2) {\nSystem.out.println(a[1] + \" \" + a[0]);\nreturn; // Exiting the program}\nint x = a[a.length - 1];\nint index = bisectLeft(a, x / 2.0, n - 1);\ndouble[][] ans = new double[2][2];\nans[0][0] = Math.abs(x / 2.0 - a[index - 1]);ans[0][1] = a[index - 1];\nans[1][0] = Math.abs(x / 2.0 - a[index]);ans[1][1] = a[index];\nArrays.sort(ans, (o1, o2) -> Double.compare(o1[0], o2[0]));\nSystem.out.println(x + \" \" + (int) ans[0][1]);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "if", "(", "n", "==", "2", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "a", "[", "1", "]", "+", "\" \"", "+", "a", "[", "0", "]", ")", ";", "<5>", "return", ";", "// Exiting the program}", "<6>", "int", "x", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<7>", "int", "index", "=", "bisectLeft", "(", "a", ",", "x", "/", "2.0", ",", "n", "-", "1", ")", ";", "<8>", "double", "[", "]", "[", "]", "ans", "=", "new", "double", "[", "2", "]", "[", "2", "]", ";", "<9>", "ans", "[", "0", "]", "[", "0", "]", "=", "Math", ".", "abs", "(", "x", "/", "2.0", "-", "a", "[", "index", "-", "1", "]", ")", ";", "ans", "[", "0", "]", "[", "1", "]", "=", "a", "[", "index", "-", "1", "]", ";", "<10>", "ans", "[", "1", "]", "[", "0", "]", "=", "Math", ".", "abs", "(", "x", "/", "2.0", "-", "a", "[", "index", "]", ")", ";", "ans", "[", "1", "]", "[", "1", "]", "=", "a", "[", "index", "]", ";", "<11>", "Arrays", ".", "sort", "(", "ans", ",", "(", "o1", ",", "o2", ")", "->", "Double", ".", "compare", "(", "o1", "[", "0", "]", ",", "o2", "[", "0", "]", ")", ")", ";", "<12>", "System", ".", "out", ".", "println", "(", "x", "+", "\" \"", "+", "(", "int", ")", "ans", "[", "0", "]", "[", "1", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"], ["index", "2"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"], ["index", "2"], ["ans", "[ ]"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"], ["index", "2"], ["ans", "[ [ 1.5 , 4 ] ]"]]}, {"line": 11, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"], ["index", "2"], ["ans", "[ [ 1.5 , 4 ] , [ 0.5 , 6 ] ]"]]}, {"line": 12, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"], ["index", "2"], ["ans", "[ [ 0.5 , 6 ] , [ 1.5 , 4 ] ]"]]}, {"line": 13, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["x", "11"], ["index", "2"], ["ans", "[ [ 0.5 , 6 ] , [ 1.5 , 4 ] ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 1]], "7": [[7, 3, 2]], "8": [[8, 7, 3, 2]], "9": [[9]], "10": [[10, 9, 8, 7, 3, 2]], "11": [[11, 10, 9, 8, 7, 3, 2]], "12": [[12, 11, 10, 9, 8, 7, 3, 2]], "13": [[13, 12, 11, 10, 9, 8, 7, 3, 2]]}}
{"id": 14724, "code": "int N = 1, P = 1;\nint[] A = {50};\nboolean inOdd = false;\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 != 0) {\ninOdd = true;\nbreak;}}\nif (!inOdd) {\nif (P != 0) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(Math.pow(2, N));}}\nelse {\nSystem.out.println(Math.pow(2, N - 1));}", "code_tokens": ["<0>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "50", "}", ";", "<2>", "boolean", "inOdd", "=", "false", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "[", "i", "]", "%", "2", "!=", "0", ")", "{", "<5>", "inOdd", "=", "true", ";", "<6>", "break", ";", "}", "}", "<7>", "if", "(", "!", "inOdd", ")", "{", "<8>", "if", "(", "P", "!=", "0", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "N", ")", ")", ";", "}", "}", "<12>", "else", "{", "<13>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "N", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "1"], ["P", "1"]]}, {"line": 1, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"]]}, {"line": 2, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"], ["i", "0"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"], ["i", "0"]]}, {"line": 3, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"], ["i", "0"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"], ["i", "0"]]}, {"line": 8, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"], ["i", "0"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["A", "[ 50 ]"], ["in_odd", "False"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0]], "4": [[4, 3, 0]], "7": [[7, 2]], "8": [[8, 0]], "9": [[9]]}}
{"id": 18347, "code": "int H = 3;\nint W = 7;\nint N = 10;\nN += Math.max(H - 1, W - 1);\nint ans = N / Math.max(H, W);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "3", ";", "<1>", "int", "W", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "N", "+=", "Math", ".", "max", "(", "H", "-", "1", ",", "W", "-", "1", ")", ";", "<4>", "int", "ans", "=", "N", "/", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "3"]]}, {"line": 1, "state": [["H", "3"], ["W", "7"]]}, {"line": 2, "state": [["H", "3"], ["W", "7"], ["N", "10"]]}, {"line": 3, "state": [["H", "3"], ["W", "7"], ["N", "16"]]}, {"line": 4, "state": [["H", "3"], ["W", "7"], ["N", "16"], ["ans", "2"]]}, {"line": 5, "state": [["H", "3"], ["W", "7"], ["N", "16"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 8206, "code": "int n = 4, k = 3;\nint[] a = {2, 3, 1, 4};\nint pos = bisectLeft(a, 1);\nSystem.out.println((pos + k - 2) / (k - 1) + (n - pos + k - 3) / (k - 1));", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "pos", "=", "bisectLeft", "(", "a", ",", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "pos", "+", "k", "-", "2", ")", "/", "(", "k", "-", "1", ")", "+", "(", "n", "-", "pos", "+", "k", "-", "3", ")", "/", "(", "k", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "4"], ["k", "3"]]}, {"line": 2, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["pos", "0"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["pos", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]]}}
{"id": 17312, "code": "String a = \"D\";String b = \"D\";\nif (a.equals(\"H\") && b.equals(\"H\")) {\nSystem.out.println(\"H\");\n} else if (a.equals(\"D\") && b.equals(\"H\")) {\nSystem.out.println(\"D\");\n} else if (a.equals(\"D\") && b.equals(\"D\")) {\nSystem.out.println(\"H\");\n} else {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", "&&", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<3>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"D\"", ")", "&&", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "<5>", "}", "else", "if", "(", "a", ".", "equals", "(", "\"D\"", ")", "&&", "b", ".", "equals", "(", "\"D\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 3, "state": [["a", "D"], ["b", "D"]]}, {"line": 5, "state": [["a", "D"], ["b", "D"]]}, {"line": 6, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]], "6": [[6]]}}
{"id": 6710, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nSystem.out.println(H <= sum(A) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "H", "<=", "sum", "(", "A", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 16206, "code": "int n = 5;\nint[] L = {6, 9, 4, 2, 11};\nArrays.sort(L);\nint maxL = L[L.length - 1];\ndouble[] li = new double[L.length];for (int i = 0; i < L.length; i++) {li[i] = Math.abs(L[i] - maxL / 2.0);}\nint a = 0;for (int i = 1; i < li.length; i++) {if (li[i] < li[a]) {a = i;}}\nSystem.out.println(maxL + \", \" + L[a]);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "L", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "Arrays", ".", "sort", "(", "L", ")", ";", "<3>", "int", "maxL", "=", "L", "[", "L", ".", "length", "-", "1", "]", ";", "<4>", "double", "[", "]", "li", "=", "new", "double", "[", "L", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "L", ".", "length", ";", "i", "++", ")", "{", "li", "[", "i", "]", "=", "Math", ".", "abs", "(", "L", "[", "i", "]", "-", "maxL", "/", "2.0", ")", ";", "}", "<5>", "int", "a", "=", "0", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "li", ".", "length", ";", "i", "++", ")", "{", "if", "(", "li", "[", "i", "]", "<", "li", "[", "a", "]", ")", "{", "a", "=", "i", ";", "}", "}", "<6>", "System", ".", "out", ".", "println", "(", "maxL", "+", "\", \"", "+", "L", "[", "a", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["L", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["L", "[ 2 , 4 , 6 , 9 , 11 ]"]]}, {"line": 3, "state": [["n", "5"], ["L", "[ 2 , 4 , 6 , 9 , 11 ]"], ["maxL", "11"]]}, {"line": 4, "state": []}, {"line": 4, "state": []}, {"line": 4, "state": [["x", "2"]]}, {"line": 4, "state": [["x", "4"]]}, {"line": 4, "state": [["x", "6"]]}, {"line": 4, "state": [["x", "9"]]}, {"line": 4, "state": [["x", "11"]]}, {"line": 4, "state": [["x", "11"]]}, {"line": 4, "state": [["n", "5"], ["L", "[ 2 , 4 , 6 , 9 , 11 ]"], ["maxL", "11"], ["li", "[ 3.5 , 1.5 , 0.5 , 3.5 , 5.5 ]"]]}, {"line": 5, "state": [["n", "5"], ["L", "[ 2 , 4 , 6 , 9 , 11 ]"], ["maxL", "11"], ["li", "[ 3.5 , 1.5 , 0.5 , 3.5 , 5.5 ]"], ["a", "2"]]}, {"line": 6, "state": [["n", "5"], ["L", "[ 2 , 4 , 6 , 9 , 11 ]"], ["maxL", "11"], ["li", "[ 3.5 , 1.5 , 0.5 , 3.5 , 5.5 ]"], ["a", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 5, 4, 3, 2, 1]]}}
{"id": 3833, "code": "int x = 13, y = 3, z = 1;\nint i = 0;\nwhile (y * i + z * (i + 1) <= x) {\ni += 1;}\ni -= 1;\nSystem.out.println(i);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "i", "=", "0", ";", "<2>", "while", "(", "y", "*", "i", "+", "z", "*", "(", "i", "+", "1", ")", "<=", "x", ")", "{", "<3>", "i", "+=", "1", ";", "}", "<4>", "i", "-=", "1", ";", "<5>", "System", ".", "out", ".", "println", "(", "i", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "0"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "1"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "1"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "2"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "2"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "3"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "3"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "4"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "4"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "3"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "4": [[4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "5": [[5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]]}}
{"id": 684, "code": "int k = 2;\nint ans = -1;\nint prev = 0;\nfor (int i = 1; i <= k; i++) {\nprev = (10 * prev + 7) % k;\nif (prev == 0) {\nans = i;\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "k", "=", "2", ";", "<1>", "int", "ans", "=", "-", "1", ";", "<2>", "int", "prev", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "k", ";", "i", "++", ")", "{", "<4>", "prev", "=", "(", "10", "*", "prev", "+", "7", ")", "%", "k", ";", "<5>", "if", "(", "prev", "==", "0", ")", "{", "<6>", "ans", "=", "i", ";", "<7>", "break", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["k", "2"]]}, {"line": 1, "state": [["k", "2"], ["ans", "-1"]]}, {"line": 2, "state": [["k", "2"], ["ans", "-1"], ["prev", "0"]]}, {"line": 3, "state": [["k", "2"], ["ans", "-1"], ["prev", "0"], ["i", "1"]]}, {"line": 4, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "1"]]}, {"line": 5, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "1"]]}, {"line": 3, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "2"]]}, {"line": 4, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "2"]]}, {"line": 5, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "2"]]}, {"line": 3, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "2"]]}, {"line": 8, "state": [["k", "2"], ["ans", "-1"], ["prev", "1"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 0], [3, 0]], "4": [[4, 3, 0], [4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 0]], "8": [[8, 1]]}}
{"id": 8216, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nN -= K;\nK -= 1;\nint ans = 1;\nans += (N - 1) / K + 1;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "N", "-=", "K", ";", "<3>", "K", "-=", "1", ";", "<4>", "int", "ans", "=", "1", ";", "<5>", "ans", "+=", "(", "N", "-", "1", ")", "/", "K", "+", "1", ";", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"], ["K", "3"]]}, {"line": 1, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["N", "0"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["N", "0"], ["K", "2"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 4, "state": [["N", "0"], ["K", "2"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 5, "state": [["N", "0"], ["K", "2"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 6, "state": [["N", "0"], ["K", "2"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4]], "5": [[5, 4, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 0]]}}
{"id": 3795, "code": "int X = 64146, Y = 123, Z = 456;\nX -= Z;\nSystem.out.println(X / (Y + Z));", "code_tokens": ["<0>", "int", "X", "=", "64146", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "X", "-=", "Z", ";", "<2>", "System", ".", "out", ".", "println", "(", "X", "/", "(", "Y", "+", "Z", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "64146"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "63690"], ["Y", "123"], ["Z", "456"]]}, {"line": 2, "state": [["X", "63690"], ["Y", "123"], ["Z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 18511, "code": "int a = 2;\nint b = 100;\nint c = Math.max(a, b);\nint n = 200;\nif (n % c == 0) {\nSystem.out.println(n / c);}\nelse {\nSystem.out.println(n / c + 1);}", "code_tokens": ["<0>", "int", "a", "=", "2", ";", "<1>", "int", "b", "=", "100", ";", "<2>", "int", "c", "=", "Math", ".", "max", "(", "a", ",", "b", ")", ";", "<3>", "int", "n", "=", "200", ";", "<4>", "if", "(", "n", "%", "c", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "n", "/", "c", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "n", "/", "c", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "2"]]}, {"line": 1, "state": [["a", "2"], ["b", "100"]]}, {"line": 2, "state": [["a", "2"], ["b", "100"], ["c", "100"]]}, {"line": 3, "state": [["a", "2"], ["b", "100"], ["c", "100"], ["n", "200"]]}, {"line": 4, "state": [["a", "2"], ["b", "100"], ["c", "100"], ["n", "200"]]}, {"line": 5, "state": [["a", "2"], ["b", "100"], ["c", "100"], ["n", "200"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 18303, "code": "int H = 14;\nint W = 12;\nint N = 112;\nif (N / H > N / W) {\nSystem.out.println((N % W != 0) ? (N / W) + 1 : (N / W));} else {\nSystem.out.println((N % H != 0) ? (N / H) + 1 : (N / H));}", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "if", "(", "N", "/", "H", ">", "N", "/", "W", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "(", "N", "%", "W", "!=", "0", ")", "?", "(", "N", "/", "W", ")", "+", "1", ":", "(", "N", "/", "W", ")", ")", ";", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "(", "N", "%", "H", "!=", "0", ")", "?", "(", "N", "/", "H", ")", "+", "1", ":", "(", "N", "/", "H", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 6, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "6": [[6, 3, 2, 1, 0]]}}
{"id": 3505, "code": "int a = 12, b = 4;\nSystem.out.println(Math.max(0, a - b * 2));", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "a", "-", "b", "*", "2", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "12"], ["b", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 4877, "code": "char[] a = {'s', 'm', 'i', 'l', 'e', 's'};\nSystem.out.println(a[0] + String.valueOf(a.length - 2) + a[a.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "a", "=", "{", "'s'", ",", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", ",", "'s'", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "[", "0", "]", "+", "String", ".", "valueOf", "(", "a", ".", "length", "-", "2", ")", "+", "a", "[", "a", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["a", "[ s , m , i , l , e , s ]"]]}, {"line": 1, "state": [["a", "[ s , m , i , l , e , s ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3345, "code": "String a = \"20\";String b = \"30\";\na = Integer.parseInt(a);\nb = Integer.parseInt(b);\nint ret = a - (b * 2);\nif (ret < 0) {\nret = 0;}\nSystem.out.println(ret);", "code_tokens": ["<0>", "String", "a", "=", "\"20\"", ";", "String", "b", "=", "\"30\"", ";", "<1>", "a", "=", "Integer", ".", "parseInt", "(", "a", ")", ";", "<2>", "b", "=", "Integer", ".", "parseInt", "(", "b", ")", ";", "<3>", "int", "ret", "=", "a", "-", "(", "b", "*", "2", ")", ";", "<4>", "if", "(", "ret", "<", "0", ")", "{", "<5>", "ret", "=", "0", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ret", ")", ";"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}, {"line": 3, "state": [["a", "20"], ["b", "30"], ["ret", "-40"]]}, {"line": 4, "state": [["a", "20"], ["b", "30"], ["ret", "-40"]]}, {"line": 5, "state": [["a", "20"], ["b", "30"], ["ret", "0"]]}, {"line": 6, "state": [["a", "20"], ["b", "30"], ["ret", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]], "6": [[6, 5, 4, 3, 2, 1, 0]]}}
{"id": 16486, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nint x = Arrays.stream(a).max().getAsInt();\ndouble m = x / 2.0;\nremoveElement(a, x);\nArrays.sort(a);\ndouble ans = x;\nfor (int i : a) {\ndouble y = Math.abs(i - m);\nif (ans >= y) {\nans = y;\n} else {\nbreak;}\nint z = i;}\nSystem.out.println(x + \" \" + z);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "int", "x", "=", "Arrays", ".", "stream", "(", "a", ")", ".", "max", "(", ")", ".", "getAsInt", "(", ")", ";", "<3>", "double", "m", "=", "x", "/", "2.0", ";", "<4>", "removeElement", "(", "a", ",", "x", ")", ";", "<5>", "Arrays", ".", "sort", "(", "a", ")", ";", "<6>", "double", "ans", "=", "x", ";", "<7>", "for", "(", "int", "i", ":", "a", ")", "{", "<8>", "double", "y", "=", "Math", ".", "abs", "(", "i", "-", "m", ")", ";", "<9>", "if", "(", "ans", ">=", "y", ")", "{", "<10>", "ans", "=", "y", ";", "<11>", "}", "else", "{", "<12>", "break", ";", "}", "<13>", "int", "z", "=", "i", ";", "}", "<14>", "System", ".", "out", ".", "println", "(", "x", "+", "\" \"", "+", "z", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["x", "11"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["x", "11"], ["m", "5.5"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 ]"], ["x", "11"], ["m", "5.5"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "11"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "11"], ["i", "2"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "11"], ["i", "2"], ["y", "3.5"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "11"], ["i", "2"], ["y", "3.5"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "3.5"], ["i", "2"], ["y", "3.5"]]}, {"line": 13, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "3.5"], ["i", "2"], ["y", "3.5"], ["z", "2"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "3.5"], ["i", "4"], ["y", "3.5"], ["z", "2"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "3.5"], ["i", "4"], ["y", "1.5"], ["z", "2"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "3.5"], ["i", "4"], ["y", "1.5"], ["z", "2"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "1.5"], ["i", "4"], ["y", "1.5"], ["z", "2"]]}, {"line": 13, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "1.5"], ["i", "4"], ["y", "1.5"], ["z", "4"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "1.5"], ["i", "6"], ["y", "1.5"], ["z", "4"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "1.5"], ["i", "6"], ["y", "0.5"], ["z", "4"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "1.5"], ["i", "6"], ["y", "0.5"], ["z", "4"]]}, {"line": 10, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "6"], ["y", "0.5"], ["z", "4"]]}, {"line": 13, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "6"], ["y", "0.5"], ["z", "6"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "9"], ["y", "0.5"], ["z", "6"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "9"], ["y", "3.5"], ["z", "6"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "9"], ["y", "3.5"], ["z", "6"]]}, {"line": 12, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "9"], ["y", "3.5"], ["z", "6"]]}, {"line": 14, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["x", "11"], ["m", "5.5"], ["ans", "0.5"], ["i", "9"], ["y", "3.5"], ["z", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 4, 3, 2, 1]], "7": [[7, 5, 4, 3, 2, 1], [7, 13, 8, 7, 5, 4, 3, 2, 1], [7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [7, 13, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1]], "8": [[8, 7, 5, 4, 3, 2, 1], [8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [8, 7, 13, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1]], "9": [[9, 8, 7, 5, 4, 3, 2, 1], [9, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [9, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [9, 8, 7, 13, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1]], "10": [[10, 9, 8, 7, 5, 4, 3, 2, 1], [10, 9, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [10, 9, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1]], "12": [[12]], "13": [[13, 8, 7, 5, 4, 3, 2, 1], [13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1], [13, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1]], "14": [[14, 13, 8, 7, 13, 8, 7, 13, 8, 7, 5, 4, 3, 2, 1]]}}
{"id": 13336, "code": "String s = \"abcde,fghihgf,edcba\";\ns = s.replace(',', ' ');\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "s", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "s", "=", "s", ".", "replace", "(", "','", ",", "' '", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["s", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["s", "abcde fghihgf edcba"]]}, {"line": 2, "state": [["s", "abcde fghihgf edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 19076, "code": "int n = 12;\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint i = 0;\nint a = n / 10;\nint b = 1;\nwhile (b != 0) {\ni += 1;\nb = n / ((int) (Math.pow(5, i) * 10));\na += b;}\nSystem.out.println(a);}", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "i", "=", "0", ";", "<5>", "int", "a", "=", "n", "/", "10", ";", "<6>", "int", "b", "=", "1", ";", "<7>", "while", "(", "b", "!=", "0", ")", "{", "<8>", "i", "+=", "1", ";", "<9>", "b", "=", "n", "/", "(", "(", "int", ")", "(", "Math", ".", "pow", "(", "5", ",", "i", ")", "*", "10", ")", ")", ";", "<10>", "a", "+=", "b", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "a", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"]]}, {"line": 4, "state": [["n", "12"], ["i", "0"]]}, {"line": 5, "state": [["n", "12"], ["i", "0"], ["a", "1"]]}, {"line": 6, "state": [["n", "12"], ["i", "0"], ["a", "1"], ["b", "1"]]}, {"line": 7, "state": [["n", "12"], ["i", "0"], ["a", "1"], ["b", "1"]]}, {"line": 8, "state": [["n", "12"], ["i", "1"], ["a", "1"], ["b", "1"]]}, {"line": 9, "state": [["n", "12"], ["i", "1"], ["a", "1"], ["b", "0"]]}, {"line": 10, "state": [["n", "12"], ["i", "1"], ["a", "1"], ["b", "0"]]}, {"line": 7, "state": [["n", "12"], ["i", "1"], ["a", "1"], ["b", "0"]]}, {"line": 11, "state": [["n", "12"], ["i", "1"], ["a", "1"], ["b", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5, 1, 0]], "6": [[6]], "7": [[7, 6], [7, 10, 9, 8, 4]], "8": [[8, 4]], "9": [[9, 8, 4]], "10": [[10, 9, 8, 4]], "11": [[11, 10, 9, 8, 4]]}}
{"id": 11685, "code": "String s = \"SUN\";\nif (s.equals(\"SAT\")) {\nSystem.out.println(1);}\nelse if (s.equals(\"FRI\")) {\nSystem.out.println(2);}\nelse if (s.equals(\"THU\")) {\nSystem.out.println(3);}\nelse if (s.equals(\"WED\")) {\nSystem.out.println(4);}\nelse if (s.equals(\"TUE\")) {\nSystem.out.println(5);}\nelse if (s.equals(\"MON\")) {\nSystem.out.println(6);}\nelse if (s.equals(\"SUN\")) {\nSystem.out.println(7);}\nelse {\nSystem.exit(0);}", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "if", "(", "s", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<3>", "else", "if", "(", "s", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "2", ")", ";", "}", "<5>", "else", "if", "(", "s", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "3", ")", ";", "}", "<7>", "else", "if", "(", "s", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "4", ")", ";", "}", "<9>", "else", "if", "(", "s", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "5", ")", ";", "}", "<11>", "else", "if", "(", "s", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "6", ")", ";", "}", "<13>", "else", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<15>", "else", "{", "<16>", "System", ".", "exit", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"]]}, {"line": 3, "state": [["s", "SUN"]]}, {"line": 5, "state": [["s", "SUN"]]}, {"line": 7, "state": [["s", "SUN"]]}, {"line": 9, "state": [["s", "SUN"]]}, {"line": 11, "state": [["s", "SUN"]]}, {"line": 13, "state": [["s", "SUN"]]}, {"line": 14, "state": [["s", "SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]], "7": [[7, 5, 3, 1, 0]], "9": [[9, 7, 5, 3, 1, 0]], "11": [[11, 9, 7, 5, 3, 1, 0]], "13": [[13, 11, 9, 7, 5, 3, 1, 0]], "14": [[14]]}}
{"id": 17254, "code": "String n = \"D\";String m = \"H\";\nSystem.out.println(\"DH\".charAt(n.equals(m) ? 1 : 0));", "code_tokens": ["<0>", "String", "n", "=", "\"D\"", ";", "String", "m", "=", "\"H\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"DH\"", ".", "charAt", "(", "n", ".", "equals", "(", "m", ")", "?", "1", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "D"], ["m", "H"]]}, {"line": 1, "state": [["n", "D"], ["m", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7110, "code": "int h = 211, n = 5;\nint[] a = Arrays.stream(\"31 41 59 26 53\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nif (Arrays.stream(a).sum() >= h) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "Arrays", ".", "stream", "(", "\"31 41 59 26 53\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "if", "(", "Arrays", ".", "stream", "(", "a", ")", ".", "sum", "(", ")", ">=", "h", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}, {"line": 1, "state": [["h", "211"], ["n", "5"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"]]}, {"line": 5, "state": [["h", "211"], ["n", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 2301, "code": "int n = 100, a = 100, b = 100;\nint ma = Math.min(a, b);\nint mi;if (a + b - n < 0) {\nmi = 0;\n} else {\nmi = a + b - n;}\nSystem.out.println(ma + \" \" + mi);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "mi", ";", "if", "(", "a", "+", "b", "-", "n", "<", "0", ")", "{", "<3>", "mi", "=", "0", ";", "<4>", "}", "else", "{", "<5>", "mi", "=", "a", "+", "b", "-", "n", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "mi", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"]]}, {"line": 5, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"], ["mi", "100"]]}, {"line": 6, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"], ["mi", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 2, 1, 0]], "6": [[6, 5, 2, 1, 0]]}}
{"id": 14619, "code": "int N = 3, P = 0;\nScanner scanner = new Scanner(System.in);int[] A = Arrays.stream(scanner.nextLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\nint odds = 0, evens = 0;\nfor (int i : A) {\nif ((i & 1) == 1) {\nodds += 1;}\nelse {\nevens += 1;}}\nBigInteger fo = factorial(odds);\nif (P == 0) {\nBigInteger ans = BigInteger.ZERO;\nfor (int r = 0; r <= odds; r += 2) {\nans = ans.add(fo.divide(factorial(odds - r).multiply(factorial(r))));}\nans = ans.multiply(BigInteger.valueOf(2).pow(evens));\n} else {\nBigInteger ans = BigInteger.ZERO;\nfor (int r = 1; r <= odds; r += 2) {\nans = ans.add(fo.divide(factorial(odds - r).multiply(factorial(r))));}\nans = ans.multiply(BigInteger.valueOf(2).pow(evens));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "P", "=", "0", ";", "<1>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "int", "[", "]", "A", "=", "Arrays", ".", "stream", "(", "scanner", ".", "nextLine", "(", ")", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "int", "odds", "=", "0", ",", "evens", "=", "0", ";", "<3>", "for", "(", "int", "i", ":", "A", ")", "{", "<4>", "if", "(", "(", "i", "&", "1", ")", "==", "1", ")", "{", "<5>", "odds", "+=", "1", ";", "}", "<6>", "else", "{", "<7>", "evens", "+=", "1", ";", "}", "}", "<8>", "BigInteger", "fo", "=", "factorial", "(", "odds", ")", ";", "<9>", "if", "(", "P", "==", "0", ")", "{", "<10>", "BigInteger", "ans", "=", "BigInteger", ".", "ZERO", ";", "<11>", "for", "(", "int", "r", "=", "0", ";", "r", "<=", "odds", ";", "r", "+=", "2", ")", "{", "<12>", "ans", "=", "ans", ".", "add", "(", "fo", ".", "divide", "(", "factorial", "(", "odds", "-", "r", ")", ".", "multiply", "(", "factorial", "(", "r", ")", ")", ")", ")", ";", "}", "<13>", "ans", "=", "ans", ".", "multiply", "(", "BigInteger", ".", "valueOf", "(", "2", ")", ".", "pow", "(", "evens", ")", ")", ";", "<14>", "}", "else", "{", "<15>", "BigInteger", "ans", "=", "BigInteger", ".", "ZERO", ";", "<16>", "for", "(", "int", "r", "=", "1", ";", "r", "<=", "odds", ";", "r", "+=", "2", ")", "{", "<17>", "ans", "=", "ans", ".", "add", "(", "fo", ".", "divide", "(", "factorial", "(", "odds", "-", "r", ")", ".", "multiply", "(", "factorial", "(", "r", ")", ")", ")", ")", ";", "}", "<18>", "ans", "=", "ans", ".", "multiply", "(", "BigInteger", ".", "valueOf", "(", "2", ")", ".", "pow", "(", "evens", ")", ")", ";", "}", "<19>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"], ["P", "0"]]}, {"line": 1, "state": [["N", "3"], ["P", "0"]]}, {"line": 2, "state": [["N", "3"], ["P", "0"], ["odds", "0"], ["evens", "0"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["odds", "0"], ["evens", "0"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["odds", "0"], ["evens", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["odds", "1"], ["evens", "0"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["odds", "1"], ["evens", "0"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["odds", "1"], ["evens", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["odds", "2"], ["evens", "0"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["odds", "2"], ["evens", "0"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["odds", "2"], ["evens", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"]]}, {"line": 8, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"]]}, {"line": 9, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"]]}, {"line": 10, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "0"]]}, {"line": 11, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "0"], ["fo", "6"]]}, {"line": 12, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "0"], ["fo", "6"], ["r", "0"]]}, {"line": 13, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "1"], ["fo", "6"], ["r", "0"]]}, {"line": 12, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "1"], ["fo", "6"], ["r", "2"]]}, {"line": 13, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "4"], ["fo", "6"], ["r", "2"]]}, {"line": 12, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "4"], ["fo", "6"], ["r", "2"]]}, {"line": 14, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "4"], ["fo", "6"], ["r", "2"]]}, {"line": 21, "state": [["N", "3"], ["P", "0"], ["odds", "3"], ["evens", "0"], ["i", "1"], ["ans", "4"], ["fo", "6"], ["r", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1]], "5": [[5, 2], [5, 2], [5, 2]], "8": [[8]], "9": [[9, 0]], "10": [[10]], "11": [[11, 5, 2]], "12": [[12, 11, 5, 2], [12, 13, 12, 11, 5, 2], [12, 13, 12, 13, 12, 11, 5, 2]], "13": [[13, 12, 11, 5, 2], [13, 12, 13, 12, 11, 5, 2]], "14": [[14, 13, 12, 13, 12, 11, 5, 2]], "21": [[21, 14, 13, 12, 13, 12, 11, 5, 2]]}}
{"id": 5102, "code": "String S = \"smiles\";\nchar start = S.charAt(0);\nchar end = S.charAt(S.length() - 1);\nint num = S.length() - 2;\nSystem.out.println(String.format(\"%c%d%c\", start, num, end));", "code_tokens": ["<0>", "String", "S", "=", "\"smiles\"", ";", "<1>", "char", "start", "=", "S", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "end", "=", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "int", "num", "=", "S", ".", "length", "(", ")", "-", "2", ";", "<4>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%c%d%c\"", ",", "start", ",", "num", ",", "end", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "smiles"]]}, {"line": 1, "state": [["S", "smiles"], ["start", "s"]]}, {"line": 2, "state": [["S", "smiles"], ["start", "s"], ["end", "s"]]}, {"line": 3, "state": [["S", "smiles"], ["start", "s"], ["end", "s"], ["num", "4"]]}, {"line": 4, "state": [["S", "smiles"], ["start", "s"], ["end", "s"], ["num", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 15146, "code": "int n = 2, p = 0;\nint[] nums = {1, 3};\nint odd = 0;\nint even = 0;\nfor (int num : nums) {\nif (num % 2 == 0) {\neven++;}\nelse {\nodd++;}}\nint ans = 0;\nif (p == 0) {\nint e = (int) Math.pow(2, even);\nint o = 0;\nfor (int i = 0; i <= odd; i += 2) {\no += (int) (factorial(odd) / (factorial(odd - i) * factorial(i)));}\nans += e * o;}\nelse if (p == 1) {\nint e = (int) Math.pow(2, even);\nint o = 0;\nfor (int i = 1; i <= odd; i += 2) {\no += (int) (factorial(odd) / (factorial(odd - i) * factorial(i)));}\nans += e * o;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ",", "p", "=", "0", ";", "<1>", "int", "[", "]", "nums", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "odd", "=", "0", ";", "<3>", "int", "even", "=", "0", ";", "<4>", "for", "(", "int", "num", ":", "nums", ")", "{", "<5>", "if", "(", "num", "%", "2", "==", "0", ")", "{", "<6>", "even", "++", ";", "}", "<7>", "else", "{", "<8>", "odd", "++", ";", "}", "}", "<9>", "int", "ans", "=", "0", ";", "<10>", "if", "(", "p", "==", "0", ")", "{", "<11>", "int", "e", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even", ")", ";", "<12>", "int", "o", "=", "0", ";", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "odd", ";", "i", "+=", "2", ")", "{", "<14>", "o", "+=", "(", "int", ")", "(", "factorial", "(", "odd", ")", "/", "(", "factorial", "(", "odd", "-", "i", ")", "*", "factorial", "(", "i", ")", ")", ")", ";", "}", "<15>", "ans", "+=", "e", "*", "o", ";", "}", "<16>", "else", "if", "(", "p", "==", "1", ")", "{", "<17>", "int", "e", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "even", ")", ";", "<18>", "int", "o", "=", "0", ";", "<19>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "odd", ";", "i", "+=", "2", ")", "{", "<20>", "o", "+=", "(", "int", ")", "(", "factorial", "(", "odd", ")", "/", "(", "factorial", "(", "odd", "-", "i", ")", "*", "factorial", "(", "i", ")", ")", ")", ";", "}", "<21>", "ans", "+=", "e", "*", "o", ";", "}", "<22>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"], ["p", "0"]]}, {"line": 2, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"]]}, {"line": 3, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "0"]]}, {"line": 4, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "0"], ["even", "0"]]}, {"line": 5, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "0"], ["even", "0"], ["num", "1"]]}, {"line": 6, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "0"], ["even", "0"], ["num", "1"]]}, {"line": 9, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "1"], ["even", "0"], ["num", "1"]]}, {"line": 5, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "1"], ["even", "0"], ["num", "3"]]}, {"line": 6, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "1"], ["even", "0"], ["num", "3"]]}, {"line": 9, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"]]}, {"line": 5, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"]]}, {"line": 10, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"]]}, {"line": 11, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"]]}, {"line": 12, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"]]}, {"line": 13, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"], ["o", "0"]]}, {"line": 14, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"], ["o", "0"], ["i", "0"]]}, {"line": 15, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"], ["o", "1"], ["i", "0"]]}, {"line": 14, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"], ["o", "1"], ["i", "2"]]}, {"line": 15, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"], ["o", "2"], ["i", "2"]]}, {"line": 14, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "0"], ["e", "1"], ["o", "2"], ["i", "2"]]}, {"line": 16, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "2"], ["e", "1"], ["o", "2"], ["i", "2"]]}, {"line": 23, "state": [["n", "2"], ["p", "0"], ["nums", "[ 1 , 3 ]"], ["odd", "2"], ["even", "0"], ["num", "3"], ["ans", "2"], ["e", "1"], ["o", "2"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2], [5, 6, 5, 2], [5, 6, 5, 6, 5, 2]], "6": [[6, 5, 2], [6, 5, 6, 5, 2]], "9": [[9, 3], [9, 3]], "10": [[10]], "11": [[11, 1]], "12": [[12, 4]], "13": [[13]], "14": [[14, 9, 3], [14, 15, 14, 9, 3], [14, 15, 14, 15, 14, 9, 3]], "15": [[15, 14, 9, 3], [15, 14, 15, 14, 9, 3]], "16": [[16, 15, 14, 15, 14, 9, 3]], "23": [[23, 16, 15, 14, 15, 14, 9, 3]]}}
{"id": 4395, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint d1 = h1 * 60 + m1;\nint d2 = h2 * 60 + m2;\nSystem.out.println(d2 - d1 - k);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "d1", "=", "h1", "*", "60", "+", "m1", ";", "<2>", "int", "d2", "=", "h2", "*", "60", "+", "m2", ";", "<3>", "System", ".", "out", ".", "println", "(", "d2", "-", "d1", "-", "k", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "600"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "600"], ["d2", "900"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["d1", "600"], ["d2", "900"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 7194, "code": "int v = 20, n = 3;\nint[] arr = {4, 5, 6};\nint sum = 0;for (int i = arr.length - n; i < arr.length; i++) {sum += arr[i];}System.out.println(sum >= v ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "v", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "arr", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "sum", "=", "0", ";", "for", "(", "int", "i", "=", "arr", ".", "length", "-", "n", ";", "i", "<", "arr", ".", "length", ";", "i", "++", ")", "{", "sum", "+=", "arr", "[", "i", "]", ";", "}", "System", ".", "out", ".", "println", "(", "sum", ">=", "v", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["v", "20"], ["n", "3"]]}, {"line": 1, "state": [["v", "20"], ["n", "3"], ["arr", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["v", "20"], ["n", "3"], ["arr", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 1055, "code": "int n = 112;\nint ans = 999;\nfor (int i = 1; i < 10; i++) {\nif (111 * i - n >= 0) {\nans = Math.min(ans, 111 * i - n);}}\nSystem.out.println(ans + n);", "code_tokens": ["<0>", "int", "n", "=", "112", ";", "<1>", "int", "ans", "=", "999", ";", "<2>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "10", ";", "i", "++", ")", "{", "<3>", "if", "(", "111", "*", "i", "-", "n", ">=", "0", ")", "{", "<4>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "111", "*", "i", "-", "n", ")", ";", "}", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", "+", "n", ")", ";"], "trace": [{"line": 0, "state": [["n", "112"]]}, {"line": 1, "state": [["n", "112"], ["ans", "999"]]}, {"line": 2, "state": [["n", "112"], ["ans", "999"], ["i", "1"]]}, {"line": 3, "state": [["n", "112"], ["ans", "999"], ["i", "1"]]}, {"line": 2, "state": [["n", "112"], ["ans", "999"], ["i", "2"]]}, {"line": 3, "state": [["n", "112"], ["ans", "999"], ["i", "2"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "2"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "3"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "3"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "3"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "4"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "4"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "4"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "5"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "5"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "5"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "6"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "6"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "6"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "7"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "7"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "7"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "8"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "8"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "8"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "9"]]}, {"line": 3, "state": [["n", "112"], ["ans", "110"], ["i", "9"]]}, {"line": 4, "state": [["n", "112"], ["ans", "110"], ["i", "9"]]}, {"line": 2, "state": [["n", "112"], ["ans", "110"], ["i", "9"]]}, {"line": 5, "state": [["n", "112"], ["ans", "110"], ["i", "9"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 3, 2], [2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2]], "3": [[3, 2], [3, 2, 3, 2], [3, 2, 4, 3, 2, 3, 2], [3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2]], "4": [[4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2]], "5": [[5, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 3, 2]]}}
{"id": 18238, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint X = 0;\nif (H <= W) {\nX = N / W;\nif (N % W != 0) {\nX = X + 1;}}\nelse {\nX = N / H;\nif (N % H != 0) {\nX = X + 1;}}\nSystem.out.println(X);", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "X", "=", "0", ";", "<4>", "if", "(", "H", "<=", "W", ")", "{", "<5>", "X", "=", "N", "/", "W", ";", "<6>", "if", "(", "N", "%", "W", "!=", "0", ")", "{", "<7>", "X", "=", "X", "+", "1", ";", "}", "}", "<8>", "else", "{", "<9>", "X", "=", "N", "/", "H", ";", "<10>", "if", "(", "N", "%", "H", "!=", "0", ")", "{", "<11>", "X", "=", "X", "+", "1", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "X", ")", ";"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["X", "0"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["X", "0"]]}, {"line": 9, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["X", "8"]]}, {"line": 10, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["X", "8"]]}, {"line": 12, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["X", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0]], "9": [[9, 4, 1, 0]], "10": [[10, 9, 4, 1, 0]], "12": [[12, 9, 4, 1, 0]]}}
{"id": 7322, "code": "int H = 20, N = 3;\nint[] a_nums = {4, 5, 6};\nint a_sum = 0;for (int num : a_nums) {a_sum += num;}\nif (a_sum >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "a_nums", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "a_sum", "=", "0", ";", "for", "(", "int", "num", ":", "a_nums", ")", "{", "a_sum", "+=", "num", ";", "}", "<3>", "if", "(", "a_sum", ">=", "H", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "20"], ["N", "3"]]}, {"line": 1, "state": [["H", "20"], ["N", "3"], ["a_nums", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["a_nums", "[ 4 , 5 , 6 ]"], ["a_sum", "15"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["a_nums", "[ 4 , 5 , 6 ]"], ["a_sum", "15"]]}, {"line": 6, "state": [["H", "20"], ["N", "3"], ["a_nums", "[ 4 , 5 , 6 ]"], ["a_sum", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 6210, "code": "int N = 2;\nint[] A = {1, 5};\nint[] B = {2, 4};\nint[] C = {3, 6};\nint ba = 0;\nint bc = N;\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint b = B[i];\nif (ba != N) {\nwhile (ba < N && A[ba] < b) {\nba++;\nif (ba == N) {\nbreak;}}}\nif (bc != 0) {\nwhile (bc > 0 && C[N - bc] <= b) {\nbc--;\nif (bc == 0) {\nbreak;}}}\nans += ba * bc;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "ba", "=", "0", ";", "<5>", "int", "bc", "=", "N", ";", "<6>", "int", "ans", "=", "0", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<8>", "int", "b", "=", "B", "[", "i", "]", ";", "<9>", "if", "(", "ba", "!=", "N", ")", "{", "<10>", "while", "(", "ba", "<", "N", "&&", "A", "[", "ba", "]", "<", "b", ")", "{", "<11>", "ba", "++", ";", "<12>", "if", "(", "ba", "==", "N", ")", "{", "<13>", "break", ";", "}", "}", "}", "<14>", "if", "(", "bc", "!=", "0", ")", "{", "<15>", "while", "(", "bc", ">", "0", "&&", "C", "[", "N", "-", "bc", "]", "<=", "b", ")", "{", "<16>", "bc", "--", ";", "<17>", "if", "(", "bc", "==", "0", ")", "{", "<18>", "break", ";", "}", "}", "}", "<19>", "ans", "+=", "ba", "*", "bc", ";", "}", "<20>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"], ["A", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"]]}, {"line": 6, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"], ["bc", "2"]]}, {"line": 7, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"], ["bc", "2"], ["ans", "0"]]}, {"line": 8, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"], ["bc", "2"], ["ans", "0"], ["i", "0"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 10, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 11, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "0"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 12, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 13, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 11, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 15, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 16, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "0"], ["i", "0"], ["b", "2"]]}, {"line": 20, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "0"], ["b", "2"]]}, {"line": 8, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "1"], ["b", "2"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 10, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 11, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 15, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 16, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "2"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 17, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "1"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 18, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "1"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 16, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "1"], ["ans", "2"], ["i", "1"], ["b", "4"]]}, {"line": 20, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "1"], ["ans", "3"], ["i", "1"], ["b", "4"]]}, {"line": 8, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "1"], ["ans", "3"], ["i", "1"], ["b", "4"]]}, {"line": 21, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ba", "1"], ["bc", "1"], ["ans", "3"], ["i", "1"], ["b", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1]], "7": [[7]], "8": [[8, 6, 1], [8, 9, 8, 6, 1], [8, 9, 8, 9, 8, 6, 1]], "9": [[9, 8, 6, 1], [9, 8, 9, 8, 6, 1]], "10": [[10, 8, 6, 1], [10, 8, 9, 8, 6, 1]], "11": [[11, 10, 8, 6, 1], [11, 13, 12, 11, 10, 8, 6, 1], [11, 10, 8, 9, 8, 6, 1]], "12": [[12, 11, 10, 8, 6, 1]], "13": [[13, 12, 11, 10, 8, 6, 1]], "15": [[15, 6, 1], [15, 20, 16, 15, 6, 1]], "16": [[16, 15, 6, 1], [16, 15, 20, 16, 15, 6, 1], [16, 18, 17, 16, 15, 20, 16, 15, 6, 1]], "17": [[17, 16, 15, 20, 16, 15, 6, 1]], "18": [[18, 17, 16, 15, 20, 16, 15, 6, 1]], "20": [[20, 16, 15, 6, 1], [20, 16, 18, 17, 16, 15, 20, 16, 15, 6, 1]], "21": [[21, 20, 16, 18, 17, 16, 15, 20, 16, 15, 6, 1]]}}
{"id": 1101, "code": "String[] n = {\"1\", \"1\", \"2\"};\nif (n[1].compareTo(n[2]) < 0) n[1] = String.valueOf(Integer.parseInt(n[1]) + 1);\nif (n[0].compareTo(n[1]) < 0) n[0] = String.valueOf(Integer.parseInt(n[0]) + 1);\nSystem.out.println(n[0].repeat(3));", "code_tokens": ["<0>", "String", "[", "]", "n", "=", "{", "\"1\"", ",", "\"1\"", ",", "\"2\"", "}", ";", "<1>", "if", "(", "n", "[", "1", "]", ".", "compareTo", "(", "n", "[", "2", "]", ")", "<", "0", ")", "n", "[", "1", "]", "=", "String", ".", "valueOf", "(", "Integer", ".", "parseInt", "(", "n", "[", "1", "]", ")", "+", "1", ")", ";", "<2>", "if", "(", "n", "[", "0", "]", ".", "compareTo", "(", "n", "[", "1", "]", ")", "<", "0", ")", "n", "[", "0", "]", "=", "String", ".", "valueOf", "(", "Integer", ".", "parseInt", "(", "n", "[", "0", "]", ")", "+", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "n", "[", "0", "]", ".", "repeat", "(", "3", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "[ 1 , 1 , 2 ]"]]}, {"line": 1, "state": [["n", "[ 1 , 2 , 2 ]"]]}, {"line": 2, "state": [["n", "[ 2 , 2 , 2 ]"]]}, {"line": 3, "state": [["n", "[ 2 , 2 , 2 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 2838, "code": "String S = \"1111111111\";\nint N = S.length();\nint ans = 1000;\nfor (int i = 0; i < N - 2; i++) {\nans = Math.min(ans, Math.abs(753 - (Character.getNumericValue(S.charAt(i)) * 100 +Character.getNumericValue(S.charAt(i + 1)) * 10 +Character.getNumericValue(S.charAt(i + 2)))));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"1111111111\"", ";", "<1>", "int", "N", "=", "S", ".", "length", "(", ")", ";", "<2>", "int", "ans", "=", "1000", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "2", ";", "i", "++", ")", "{", "<4>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "Math", ".", "abs", "(", "753", "-", "(", "Character", ".", "getNumericValue", "(", "S", ".", "charAt", "(", "i", ")", ")", "*", "100", "+", "Character", ".", "getNumericValue", "(", "S", ".", "charAt", "(", "i", "+", "1", ")", ")", "*", "10", "+", "Character", ".", "getNumericValue", "(", "S", ".", "charAt", "(", "i", "+", "2", ")", ")", ")", ")", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "1111111111"]]}, {"line": 1, "state": [["S", "1111111111"], ["N", "10"]]}, {"line": 2, "state": [["S", "1111111111"], ["N", "10"], ["ans", "1000"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "1000"], ["i", "0"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "0"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 4, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 3, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 5, "state": [["S", "1111111111"], ["N", "10"], ["ans", "642"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 8548, "code": "int n = 5;\nint[] a = {3, 2, 2, 4, 1};\nint[] b = {1, 2, 2, 2, 1};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint sumA = 0;for (int j = 0; j <= i; j++) {sumA += a[j];}int sumB = 0;for (int j = i; j < n; j++) {sumB += b[j];}if (ans < (sumA + sumB)) {\nans = (sumA + sumB);}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "sumA", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA", "+=", "a", "[", "j", "]", ";", "}", "int", "sumB", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumB", "+=", "b", "[", "j", "]", ";", "}", "if", "(", "ans", "<", "(", "sumA", "+", "sumB", ")", ")", "{", "<6>", "ans", "=", "(", "sumA", "+", "sumB", ")", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "0"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "1"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "3"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 3 , 2 , 2 , 4 , 1 ]"], ["b", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 0], [4, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 5, 4, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "7": [[7, 5, 4, 6, 5, 4, 5, 4, 6, 5, 4, 6, 5, 4, 0]]}}
{"id": 3227, "code": "String A = \"20\";String B = \"30\";\nA = Integer.parseInt(A);\nB = Integer.parseInt(B);\nint ans = Math.max(0, A - 2 * B);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "A", "=", "\"20\"", ";", "String", "B", "=", "\"30\"", ";", "<1>", "A", "=", "Integer", ".", "parseInt", "(", "A", ")", ";", "<2>", "B", "=", "Integer", ".", "parseInt", "(", "B", ")", ";", "<3>", "int", "ans", "=", "Math", ".", "max", "(", "0", ",", "A", "-", "2", "*", "B", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"]]}, {"line": 2, "state": [["A", "20"], ["B", "30"]]}, {"line": 3, "state": [["A", "20"], ["B", "30"], ["ans", "0"]]}, {"line": 4, "state": [["A", "20"], ["B", "30"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 11550, "code": "String S = \"SUN\";\nHashMap<String, String> List = new HashMap<>();List.put(\"SUN\", \"7\");List.put(\"MON\", \"6\");List.put(\"TUE\", \"5\");List.put(\"WED\", \"4\");List.put(\"THU\", \"3\");List.put(\"FRI\", \"2\");List.put(\"SAT\", \"1\");\nSystem.out.println(List.get(S));", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "HashMap", "<", "String", ",", "String", ">", "List", "=", "new", "HashMap", "<", ">", "(", ")", ";", "List", ".", "put", "(", "\"SUN\"", ",", "\"7\"", ")", ";", "List", ".", "put", "(", "\"MON\"", ",", "\"6\"", ")", ";", "List", ".", "put", "(", "\"TUE\"", ",", "\"5\"", ")", ";", "List", ".", "put", "(", "\"WED\"", ",", "\"4\"", ")", ";", "List", ".", "put", "(", "\"THU\"", ",", "\"3\"", ")", ";", "List", ".", "put", "(", "\"FRI\"", ",", "\"2\"", ")", ";", "List", ".", "put", "(", "\"SAT\"", ",", "\"1\"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "List", ".", "get", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["List", "{ SUN"]]}, {"line": 2, "state": [["S", "SUN"], ["List", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 12139, "code": "int M1 = 11, D1 = 16;\nint M2 = 11, D2 = 17;\nif (M1 != M2) {\nSystem.out.println(1);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "M1", "=", "11", ",", "D1", "=", "16", ";", "<1>", "int", "M2", "=", "11", ",", "D2", "=", "17", ";", "<2>", "if", "(", "M1", "!=", "M2", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["M1", "11"], ["D1", "16"]]}, {"line": 1, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 2, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 5, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 7413, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nif (sum(a) >= h) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "sum", "(", "a", ")", ">=", "h", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 974, "code": "String n = \"111\";\nif (Integer.parseInt(n) <= Integer.parseInt(n.charAt(0) + \"\" + n.charAt(0) + \"\" + n.charAt(0))) {\nSystem.out.println(Integer.parseInt(n.charAt(0) + \"\" + n.charAt(0) + \"\" + n.charAt(0)));\n} else {\nSystem.out.println(Integer.parseInt((Integer.parseInt(n.charAt(0) + \"\") + 1) + \"\" + (Integer.parseInt(n.charAt(0) + \"\") + 1) + \"\" + (Integer.parseInt(n.charAt(0) + \"\") + 1)));}", "code_tokens": ["<0>", "String", "n", "=", "\"111\"", ";", "<1>", "if", "(", "Integer", ".", "parseInt", "(", "n", ")", "<=", "Integer", ".", "parseInt", "(", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", "+", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", "+", "n", ".", "charAt", "(", "0", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "Integer", ".", "parseInt", "(", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", "+", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", "+", "n", ".", "charAt", "(", "0", ")", ")", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "Integer", ".", "parseInt", "(", "(", "Integer", ".", "parseInt", "(", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", ")", "+", "1", ")", "+", "\"\"", "+", "(", "Integer", ".", "parseInt", "(", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", ")", "+", "1", ")", "+", "\"\"", "+", "(", "Integer", ".", "parseInt", "(", "n", ".", "charAt", "(", "0", ")", "+", "\"\"", ")", "+", "1", ")", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"]]}, {"line": 2, "state": [["n", "111"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11428, "code": "String[] week = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nSystem.out.println(7 - java.util.Arrays.asList(week).indexOf(\"SAT\"));", "code_tokens": ["<0>", "String", "[", "]", "week", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "7", "-", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "week", ")", ".", "indexOf", "(", "\"SAT\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["week", "(SUN , MON , TUE , WED , THU , FRI , SAT)"]]}, {"line": 1, "state": [["week", "(SUN , MON , TUE , WED , THU , FRI , SAT)"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3246, "code": "int a = 12, b = 4;\nif (a <= b + b) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(a - b - b);}", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "if", "(", "a", "<=", "b", "+", "b", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "a", "-", "b", "-", "b", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"]]}, {"line": 4, "state": [["a", "12"], ["b", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 15326, "code": "int x = 12, y = 3, z = 1;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1788, "code": "int N = 10, A = 7, B = 5;\nint maximum = Math.min(A, B);\nint minimum;if (A + B >= N) {\nminimum = (A + B) - N;\n} else {\nminimum = 0;}\nSystem.out.println(maximum + \" \" + minimum);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "maximum", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "minimum", ";", "if", "(", "A", "+", "B", ">=", "N", ")", "{", "<3>", "minimum", "=", "(", "A", "+", "B", ")", "-", "N", ";", "<4>", "}", "else", "{", "<5>", "minimum", "=", "0", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "maximum", "+", "\" \"", "+", "minimum", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["maximum", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["maximum", "5"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["maximum", "5"], ["minimum", "2"]]}, {"line": 6, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["maximum", "5"], ["minimum", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6, 3, 2, 1, 0]]}}
{"id": 19243, "code": "int n = 5;\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint ans = 0;\nwhile (n >= 5) {\nans += (n / 5) / 2;\nn /= 5;}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "ans", "=", "0", ";", "<5>", "while", "(", "n", ">=", "5", ")", "{", "<6>", "ans", "+=", "(", "n", "/", "5", ")", "/", "2", ";", "<7>", "n", "/=", "5", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 268, "code": "String s = \"a\";\nint k = 25;\nStringBuilder ns = new StringBuilder();\nfor (int i = 0; i < s.length() - 1; i++) {char c = s.charAt(i);\nif (c == 'a') {\nns.append(c);\ncontinue;}\nint ofstoa = 'z' + 1 - c;\nif (k >= ofstoa) {\nns.append((char) (c + ofstoa - 26));\nk -= ofstoa;}\nelse {\nns.append(c);}}\nint last = s.charAt(s.length() - 1);\nk = k % 26;\nif (last + k > 'z') {\nns.append((char) (last + k - 26));}\nelse {\nns.append((char) (last + k));}\nSystem.out.println(ns.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "k", "=", "25", ";", "<2>", "StringBuilder", "ns", "=", "new", "StringBuilder", "(", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "1", ";", "i", "++", ")", "{", "char", "c", "=", "s", ".", "charAt", "(", "i", ")", ";", "<4>", "if", "(", "c", "==", "'a'", ")", "{", "<5>", "ns", ".", "append", "(", "c", ")", ";", "<6>", "continue", ";", "}", "<7>", "int", "ofstoa", "=", "'z'", "+", "1", "-", "c", ";", "<8>", "if", "(", "k", ">=", "ofstoa", ")", "{", "<9>", "ns", ".", "append", "(", "(", "char", ")", "(", "c", "+", "ofstoa", "-", "26", ")", ")", ";", "<10>", "k", "-=", "ofstoa", ";", "}", "<11>", "else", "{", "<12>", "ns", ".", "append", "(", "c", ")", ";", "}", "}", "<13>", "int", "last", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<14>", "k", "=", "k", "%", "26", ";", "<15>", "if", "(", "last", "+", "k", ">", "'z'", ")", "{", "<16>", "ns", ".", "append", "(", "(", "char", ")", "(", "last", "+", "k", "-", "26", ")", ")", ";", "}", "<17>", "else", "{", "<18>", "ns", ".", "append", "(", "(", "char", ")", "(", "last", "+", "k", ")", ")", ";", "}", "<19>", "System", ".", "out", ".", "println", "(", "ns", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["k", "25"]]}, {"line": 2, "state": [["s", "a"], ["k", "25"], ["ns", "[ ]"]]}, {"line": 3, "state": [["s", "a"], ["k", "25"], ["ns", "[ ]"]]}, {"line": 13, "state": [["s", "a"], ["k", "25"], ["ns", "[ ]"], ["last", "97"]]}, {"line": 14, "state": [["s", "a"], ["k", "25"], ["ns", "[ ]"], ["last", "97"]]}, {"line": 15, "state": [["s", "a"], ["k", "25"], ["ns", "[ ]"], ["last", "97"]]}, {"line": 18, "state": [["s", "a"], ["k", "25"], ["ns", "[ z ]"], ["last", "97"]]}, {"line": 19, "state": [["s", "a"], ["k", "25"], ["ns", "[ z ]"], ["last", "97"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "13": [[13, 3, 0]], "14": [[14, 1]], "15": [[15, 14, 1]], "18": [[18, 15, 14, 1]], "19": [[19, 18, 15, 14, 1]]}}
{"id": 11705, "code": "System.out.println(7 - java.util.Arrays.asList(\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\").indexOf(\"SUN\"));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "7", "-", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ")", ".", "indexOf", "(", "\"SUN\"", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 8510, "code": "int N = 5;\nint[] l1 = {3, 2, 2, 4, 1};\nint[] l2 = {1, 2, 2, 2, 1};\nint l1_sum = l1[0];\nint l2_sum = 0;for (int num : l2) {l2_sum += num;}\nint Max = l1_sum + l2_sum;\nfor (int i = 1; i < N; i++) {\nl1_sum += l1[i];\nl2_sum -= l2[i - 1];\nif (Max < l1_sum + l2_sum) {\nMax = l1_sum + l2_sum;}}\nSystem.out.println(Max);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "l1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "l2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "l1_sum", "=", "l1", "[", "0", "]", ";", "<4>", "int", "l2_sum", "=", "0", ";", "for", "(", "int", "num", ":", "l2", ")", "{", "l2_sum", "+=", "num", ";", "}", "<5>", "int", "Max", "=", "l1_sum", "+", "l2_sum", ";", "<6>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<7>", "l1_sum", "+=", "l1", "[", "i", "]", ";", "<8>", "l2_sum", "-=", "l2", "[", "i", "-", "1", "]", ";", "<9>", "if", "(", "Max", "<", "l1_sum", "+", "l2_sum", ")", "{", "<10>", "Max", "=", "l1_sum", "+", "l2_sum", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "Max", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "3"]]}, {"line": 4, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "3"], ["l2_sum", "8"]]}, {"line": 5, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "3"], ["l2_sum", "8"], ["Max", "11"]]}, {"line": 6, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "3"], ["l2_sum", "8"], ["Max", "11"], ["i", "1"]]}, {"line": 7, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "5"], ["l2_sum", "8"], ["Max", "11"], ["i", "1"]]}, {"line": 8, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "5"], ["l2_sum", "7"], ["Max", "11"], ["i", "1"]]}, {"line": 9, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "5"], ["l2_sum", "7"], ["Max", "11"], ["i", "1"]]}, {"line": 10, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "5"], ["l2_sum", "7"], ["Max", "12"], ["i", "1"]]}, {"line": 6, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "5"], ["l2_sum", "7"], ["Max", "12"], ["i", "2"]]}, {"line": 7, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "7"], ["l2_sum", "7"], ["Max", "12"], ["i", "2"]]}, {"line": 8, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "7"], ["l2_sum", "5"], ["Max", "12"], ["i", "2"]]}, {"line": 9, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "7"], ["l2_sum", "5"], ["Max", "12"], ["i", "2"]]}, {"line": 6, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "7"], ["l2_sum", "5"], ["Max", "12"], ["i", "3"]]}, {"line": 7, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "11"], ["l2_sum", "5"], ["Max", "12"], ["i", "3"]]}, {"line": 8, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "11"], ["l2_sum", "3"], ["Max", "12"], ["i", "3"]]}, {"line": 9, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "11"], ["l2_sum", "3"], ["Max", "12"], ["i", "3"]]}, {"line": 10, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "11"], ["l2_sum", "3"], ["Max", "14"], ["i", "3"]]}, {"line": 6, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "11"], ["l2_sum", "3"], ["Max", "14"], ["i", "4"]]}, {"line": 7, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "12"], ["l2_sum", "3"], ["Max", "14"], ["i", "4"]]}, {"line": 8, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "12"], ["l2_sum", "1"], ["Max", "14"], ["i", "4"]]}, {"line": 9, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "12"], ["l2_sum", "1"], ["Max", "14"], ["i", "4"]]}, {"line": 6, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "12"], ["l2_sum", "1"], ["Max", "14"], ["i", "4"]]}, {"line": 11, "state": [["N", "5"], ["l1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["l2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["l1_sum", "12"], ["l2_sum", "1"], ["Max", "14"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 2]], "5": [[5, 4, 2]], "6": [[6, 0], [6, 8, 7, 6, 0], [6, 8, 7, 6, 8, 7, 6, 0], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 8, 7, 6, 0], [7, 6, 8, 7, 6, 8, 7, 6, 0], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0]], "8": [[8, 7, 6, 0], [8, 7, 6, 8, 7, 6, 0], [8, 7, 6, 8, 7, 6, 8, 7, 6, 0], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0]], "9": [[9, 8, 7, 6, 0], [9, 8, 7, 6, 8, 7, 6, 0], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0]], "10": [[10, 9, 8, 7, 6, 0], [10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0]], "11": [[11, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 0]]}}
{"id": 15595, "code": "int X = 64145, Y = 123, Z = 456;\nX -= Z;\nSystem.out.println(X / (Y + Z));", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "X", "-=", "Z", ";", "<2>", "System", ".", "out", ".", "println", "(", "X", "/", "(", "Y", "+", "Z", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "63689"], ["Y", "123"], ["Z", "456"]]}, {"line": 2, "state": [["X", "63689"], ["Y", "123"], ["Z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11536, "code": "String S = \"SUN\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(7);}\nelse if (S.equals(\"MON\")) {\nSystem.out.println(6);}\nelse if (S.equals(\"TUE\")) {\nSystem.out.println(5);}\nelse if (S.equals(\"WED\")) {\nSystem.out.println(4);}\nelse if (S.equals(\"THU\")) {\nSystem.out.println(3);}\nelse if (S.equals(\"FRI\")) {\nSystem.out.println(2);}\nelse if (S.equals(\"SAT\")) {\nSystem.out.println(1);}", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<3>", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "6", ")", ";", "}", "<5>", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "5", ")", ";", "}", "<7>", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "4", ")", ";", "}", "<9>", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "3", ")", ";", "}", "<11>", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "2", ")", ";", "}", "<13>", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"]]}, {"line": 2, "state": [["S", "SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 8781, "code": "int n = 1;\nint[] a = {2};\nint[] b = {3};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint z = 0;\nfor (int j = 0; j <= i; j++) {\nz += a[j];}\nfor (int j = i; j < n; j++) {\nz += b[j];}\nans = Math.max(ans, z);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "3", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "z", "=", "0", ";", "<6>", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "<7>", "z", "+=", "a", "[", "j", "]", ";", "}", "<8>", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "<9>", "z", "+=", "b", "[", "j", "]", ";", "}", "<10>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "z", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "0"]]}, {"line": 6, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "0"], ["j", "0"]]}, {"line": 7, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "2"], ["j", "0"]]}, {"line": 6, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "2"], ["j", "0"]]}, {"line": 8, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "2"], ["j", "0"]]}, {"line": 9, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "5"], ["j", "0"]]}, {"line": 8, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "0"], ["i", "0"], ["z", "5"], ["j", "0"]]}, {"line": 10, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["z", "5"], ["j", "0"]]}, {"line": 4, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["z", "5"], ["j", "0"]]}, {"line": 11, "state": [["n", "1"], ["a", "[ 2 ]"], ["b", "[ 3 ]"], ["ans", "5"], ["i", "0"], ["z", "5"], ["j", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 8, 9, 8, 6, 7, 6, 4, 0]], "5": [[5]], "6": [[6, 4, 0], [6, 7, 6, 4, 0]], "7": [[7, 6, 4, 0]], "8": [[8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 4, 0]], "9": [[9, 8, 6, 7, 6, 4, 0]], "10": [[10, 9, 8, 6, 7, 6, 4, 0]], "11": [[11, 10, 9, 8, 6, 7, 6, 4, 0]]}}
{"id": 16311, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nArrays.sort(a);\nint large = a[a.length - 1];\na = Arrays.copyOf(a, a.length - 1); // Remove the last element\ndouble[] min_list = {0, large / 2.0};\nfor (int i : a) {\nif (Math.abs(i - large / 2.0) < min_list[1]) {\nmin_list[0] = i;min_list[1] = Math.abs(i - large / 2.0);}}\nSystem.out.println(large + \" \" + (int) min_list[0]);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "large", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<4>", "a", "=", "Arrays", ".", "copyOf", "(", "a", ",", "a", ".", "length", "-", "1", ")", ";", "// Remove the last element", "<5>", "double", "[", "]", "min_list", "=", "{", "0", ",", "large", "/", "2.0", "}", ";", "<6>", "for", "(", "int", "i", ":", "a", ")", "{", "<7>", "if", "(", "Math", ".", "abs", "(", "i", "-", "large", "/", "2.0", ")", "<", "min_list", "[", "1", "]", ")", "{", "<8>", "min_list", "[", "0", "]", "=", "i", ";", "min_list", "[", "1", "]", "=", "Math", ".", "abs", "(", "i", "-", "large", "/", "2.0", ")", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "large", "+", "\" \"", "+", "(", "int", ")", "min_list", "[", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["large", "11"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 0 , 5.5 ]"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 0 , 5.5 ]"], ["i", "2"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 0 , 5.5 ]"], ["i", "2"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 2 , 3.5 ]"], ["i", "2"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 2 , 3.5 ]"], ["i", "4"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 2 , 3.5 ]"], ["i", "4"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 4 , 1.5 ]"], ["i", "4"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 4 , 1.5 ]"], ["i", "6"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 4 , 1.5 ]"], ["i", "6"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 6 , 0.5 ]"], ["i", "6"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 6 , 0.5 ]"], ["i", "9"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 6 , 0.5 ]"], ["i", "9"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 6 , 0.5 ]"], ["i", "9"]]}, {"line": 9, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 ]"], ["large", "11"], ["min_list", "[ 6 , 0.5 ]"], ["i", "9"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 4, 3, 2, 1], [6, 8, 7, 6, 4, 3, 2, 1], [6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1], [6, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1]], "7": [[7, 6, 4, 3, 2, 1], [7, 6, 8, 7, 6, 4, 3, 2, 1], [7, 6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1]], "8": [[8, 7, 6, 4, 3, 2, 1], [8, 7, 6, 8, 7, 6, 4, 3, 2, 1], [8, 7, 6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1]], "9": [[9, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 4, 3, 2, 1]]}}
{"id": 3484, "code": "int A = 12, B = 4;\nint ans = A - B * 2;\nSystem.out.println(ans > 0 ? ans : 0);", "code_tokens": ["<0>", "int", "A", "=", "12", ",", "B", "=", "4", ";", "<1>", "int", "ans", "=", "A", "-", "B", "*", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ">", "0", "?", "ans", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["A", "12"], ["B", "4"]]}, {"line": 1, "state": [["A", "12"], ["B", "4"], ["ans", "4"]]}, {"line": 2, "state": [["A", "12"], ["B", "4"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5337, "code": "int n = 100;\nif (n % 2 == 0) {\nSystem.out.println(Math.round(n / 2.0));}\nelse {\nSystem.out.println(Math.round((n + 1) / 2.0));}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "round", "(", "n", "/", "2.0", ")", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "round", "(", "(", "n", "+", "1", ")", "/", "2.0", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}, {"line": 2, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 13642, "code": "String a = \"abcde\"; String b = \"fghihgf\"; String c = \"edcba\";\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "a", "=", "\"abcde\"", ";", "String", "b", "=", "\"fghihgf\"", ";", "String", "c", "=", "\"edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}, {"line": 1, "state": [["a", "abcde"], ["b", "fghihgf"], ["c", "edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2899, "code": "String s = \"1234567876\";\nint min_v = 9999;\nfor (int i = 0; i < s.length() - 2; i++) {\nint n = Integer.parseInt(s.substring(i, i + 3));\nmin_v = Math.min(min_v, Math.abs(753 - n));}\nSystem.out.println(min_v);", "code_tokens": ["<0>", "String", "s", "=", "\"1234567876\"", ";", "<1>", "int", "min_v", "=", "9999", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "n", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "min_v", "=", "Math", ".", "min", "(", "min_v", ",", "Math", ".", "abs", "(", "753", "-", "n", ")", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "min_v", ")", ";"], "trace": [{"line": 0, "state": [["s", "1234567876"]]}, {"line": 1, "state": [["s", "1234567876"], ["min_v", "9999"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "9999"], ["i", "0"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "9999"], ["i", "0"], ["n", "123"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "630"], ["i", "0"], ["n", "123"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "630"], ["i", "1"], ["n", "123"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "630"], ["i", "1"], ["n", "234"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "519"], ["i", "1"], ["n", "234"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "519"], ["i", "2"], ["n", "234"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "519"], ["i", "2"], ["n", "345"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "408"], ["i", "2"], ["n", "345"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "408"], ["i", "3"], ["n", "345"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "408"], ["i", "3"], ["n", "456"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "297"], ["i", "3"], ["n", "456"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "297"], ["i", "4"], ["n", "456"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "297"], ["i", "4"], ["n", "567"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "186"], ["i", "4"], ["n", "567"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "186"], ["i", "5"], ["n", "567"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "186"], ["i", "5"], ["n", "678"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "75"], ["i", "5"], ["n", "678"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "75"], ["i", "6"], ["n", "678"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "75"], ["i", "6"], ["n", "787"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "34"], ["i", "6"], ["n", "787"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "34"], ["i", "7"], ["n", "787"]]}, {"line": 3, "state": [["s", "1234567876"], ["min_v", "34"], ["i", "7"], ["n", "876"]]}, {"line": 4, "state": [["s", "1234567876"], ["min_v", "34"], ["i", "7"], ["n", "876"]]}, {"line": 2, "state": [["s", "1234567876"], ["min_v", "34"], ["i", "7"], ["n", "876"]]}, {"line": 5, "state": [["s", "1234567876"], ["min_v", "34"], ["i", "7"], ["n", "876"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 17032, "code": "String a = \"D\"; String b = \"H\";\nString ans;if (a.equals(\"H\")) {\nif (b.equals(\"D\")) {\nans = \"D\";}\nelse {\nans = \"H\";}}\nelse {\nif (b.equals(\"D\")) {\nans = \"H\";}\nelse {\nans = \"D\";}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "String", "ans", ";", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "if", "(", "b", ".", "equals", "(", "\"D\"", ")", ")", "{", "<3>", "ans", "=", "\"D\"", ";", "}", "<4>", "else", "{", "<5>", "ans", "=", "\"H\"", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "b", ".", "equals", "(", "\"D\"", ")", ")", "{", "<8>", "ans", "=", "\"H\"", ";", "}", "<9>", "else", "{", "<10>", "ans", "=", "\"D\"", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 7, "state": [["a", "D"], ["b", "H"]]}, {"line": 10, "state": [["a", "D"], ["b", "H"], ["ans", "D"]]}, {"line": 11, "state": [["a", "D"], ["b", "H"], ["ans", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "7": [[7, 0]], "10": [[10]], "11": [[11, 10]]}}
{"id": 6732, "code": "int h = 211, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nfor (int i = 0; i < n; i++) {\nh -= a[i];\nif (h <= 0) {\nSystem.out.println(\"Yes\");\nSystem.exit(0);}}\nSystem.out.println(\"No\");", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<3>", "h", "-=", "a", "[", "i", "]", ";", "<4>", "if", "(", "h", "<=", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "System", ".", "exit", "(", "0", ")", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h", "211"], ["n", "5"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 4, "state": [["h", "180"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 5, "state": [["h", "180"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "0"]]}, {"line": 3, "state": [["h", "180"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 4, "state": [["h", "139"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 5, "state": [["h", "139"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "1"]]}, {"line": 3, "state": [["h", "139"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 4, "state": [["h", "80"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 5, "state": [["h", "80"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "2"]]}, {"line": 3, "state": [["h", "80"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 4, "state": [["h", "54"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 5, "state": [["h", "54"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "3"]]}, {"line": 3, "state": [["h", "54"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 4, "state": [["h", "1"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 5, "state": [["h", "1"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 3, "state": [["h", "1"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}, {"line": 8, "state": [["h", "1"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "5": [[5, 4, 3, 1], [5, 4, 3, 4, 3, 1], [5, 4, 3, 4, 3, 4, 3, 1], [5, 4, 3, 4, 3, 4, 3, 4, 3, 1], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "8": [[8]]}}
{"id": 104, "code": "char[] s = {'x', 'y', 'z'};\nint k = 4;\nfor (int i = 0; i < s.length; i++) {char c = s[i];\nint t = ('z' - c + 1) % 26;\nif (k >= t) {\ns[i] = 'a';\nk -= t;}}\nint t = k % 26;\ns[s.length - 1] = (char) (s[s.length - 1] + t);\nSystem.out.println(String.valueOf(s));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", ";", "i", "++", ")", "{", "char", "c", "=", "s", "[", "i", "]", ";", "<3>", "int", "t", "=", "(", "'z'", "-", "c", "+", "1", ")", "%", "26", ";", "<4>", "if", "(", "k", ">=", "t", ")", "{", "<5>", "s", "[", "i", "]", "=", "'a'", ";", "<6>", "k", "-=", "t", ";", "}", "}", "<7>", "int", "t", "=", "k", "%", "26", ";", "<8>", "s", "[", "s", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "s", "[", "s", ".", "length", "-", "1", "]", "+", "t", ")", ";", "<9>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["k", "4"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["i", "0"], ["c", "x"]]}, {"line": 3, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["i", "0"], ["c", "x"], ["t", "3"]]}, {"line": 4, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["i", "0"], ["c", "x"], ["t", "3"]]}, {"line": 5, "state": [["s", "[ a , y , z ]"], ["k", "4"], ["i", "0"], ["c", "x"], ["t", "3"]]}, {"line": 6, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "0"], ["c", "x"], ["t", "3"]]}, {"line": 2, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "1"], ["c", "y"], ["t", "3"]]}, {"line": 3, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "1"], ["c", "y"], ["t", "2"]]}, {"line": 4, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "1"], ["c", "y"], ["t", "2"]]}, {"line": 2, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "2"], ["c", "z"], ["t", "2"]]}, {"line": 3, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "2"], ["c", "z"], ["t", "1"]]}, {"line": 4, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["i", "2"], ["c", "z"], ["t", "1"]]}, {"line": 5, "state": [["s", "[ a , y , a ]"], ["k", "1"], ["i", "2"], ["c", "z"], ["t", "1"]]}, {"line": 6, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["i", "2"], ["c", "z"], ["t", "1"]]}, {"line": 2, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["i", "2"], ["c", "z"], ["t", "1"]]}, {"line": 7, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["i", "2"], ["c", "z"], ["t", "0"]]}, {"line": 8, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["i", "2"], ["c", "z"], ["t", "0"]]}, {"line": 9, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["i", "2"], ["c", "z"], ["t", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 5, 2, 0], [2, 3, 2, 5, 2, 0], [2, 5, 2, 3, 2, 5, 2, 0]], "3": [[3, 2, 0], [3, 2, 5, 2, 0], [3, 2, 3, 2, 5, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 5, 2, 0], [4, 3, 2, 3, 2, 5, 2, 0]], "5": [[5, 2, 0], [5, 2, 3, 2, 5, 2, 0]], "6": [[6, 4, 3, 2, 0], [6, 4, 3, 2, 3, 2, 5, 2, 0]], "7": [[7, 6, 4, 3, 2, 3, 2, 5, 2, 0]], "8": [[8, 7, 6, 4, 3, 2, 3, 2, 5, 2, 0]], "9": [[9, 8, 7, 6, 4, 3, 2, 3, 2, 5, 2, 0]]}}
{"id": 1150, "code": "int N = 112;\nString S = String.valueOf(N);\nif (S.charAt(0) == S.charAt(1) && S.charAt(1) == S.charAt(2)) {\nSystem.out.println(N);} else {\nSystem.out.println(111 * (N / 111 + 1));}", "code_tokens": ["<0>", "int", "N", "=", "112", ";", "<1>", "String", "S", "=", "String", ".", "valueOf", "(", "N", ")", ";", "<2>", "if", "(", "S", ".", "charAt", "(", "0", ")", "==", "S", ".", "charAt", "(", "1", ")", "&&", "S", ".", "charAt", "(", "1", ")", "==", "S", ".", "charAt", "(", "2", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "111", "*", "(", "N", "/", "111", "+", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "112"]]}, {"line": 1, "state": [["N", "112"], ["S", "112"]]}, {"line": 2, "state": [["N", "112"], ["S", "112"]]}, {"line": 5, "state": [["N", "112"], ["S", "112"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5, 1, 0]]}}
{"id": 5621, "code": "int x = 2;\nSystem.out.println(x / 2 + x % 2);", "code_tokens": ["<0>", "int", "x", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "x", "/", "2", "+", "x", "%", "2", ")", ";"], "trace": [{"line": 0, "state": [["x", "2"]]}, {"line": 1, "state": [["x", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19452, "code": "int N = 3;\nSystem.out.println((N & 1) != 0 ? N * 2 : N);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "N", "&", "1", ")", "!=", "0", "?", "N", "*", "2", ":", "N", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19129, "code": "int n = 5;\nif ((n & 1) != 0) {\nSystem.out.println(0);}\nelse {\nint ans = 0;\nint x = 10;\nwhile (n >= x) {\nans += n / x;\nx *= 5;}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "(", "n", "&", "1", ")", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "ans", "=", "0", ";", "<5>", "int", "x", "=", "10", ";", "<6>", "while", "(", "n", ">=", "x", ")", "{", "<7>", "ans", "+=", "n", "/", "x", ";", "<8>", "x", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 13593, "code": "String x = \"haiku\";String y = \"atcoder\";String z = \"tasks\";\nSystem.out.println(x + \" \" + y + \" \" + z);", "code_tokens": ["<0>", "String", "x", "=", "\"haiku\"", ";", "String", "y", "=", "\"atcoder\"", ";", "String", "z", "=", "\"tasks\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "x", "+", "\" \"", "+", "y", "+", "\" \"", "+", "z", ")", ";"], "trace": [{"line": 0, "state": [["x", "haiku"], ["y", "atcoder"], ["z", "tasks"]]}, {"line": 1, "state": [["x", "haiku"], ["y", "atcoder"], ["z", "tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2099, "code": "int N = 10, A = 7, B = 5;\nint max_ = Math.min(A, B);\nint min_ = Math.max(0, (Math.min(A, B) - (N - Math.max(A, B))));\nSystem.out.println(max_ + \" \" + min_);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "max_", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "min_", "=", "Math", ".", "max", "(", "0", ",", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "-", "(", "N", "-", "Math", ".", "max", "(", "A", ",", "B", ")", ")", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "max_", "+", "\" \"", "+", "min_", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_", "5"], ["min_", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_", "5"], ["min_", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 1282, "code": "int a = 111;\na += 110;\na /= 111;\na *= 111;\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "a", "=", "111", ";", "<1>", "a", "+=", "110", ";", "<2>", "a", "/=", "111", ";", "<3>", "a", "*=", "111", ";", "<4>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["a", "111"]]}, {"line": 1, "state": [["a", "221"]]}, {"line": 2, "state": [["a", "1"]]}, {"line": 3, "state": [["a", "111"]]}, {"line": 4, "state": [["a", "111"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 5128, "code": "String s = \"internationalization\";\nSystem.out.println(s.charAt(0) + String.valueOf(s.length() - 2) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9622, "code": "String ss = \"2017/01/07\";\nSystem.out.println(ss.substring(0, 3) + '8' + ss.substring(4));", "code_tokens": ["<0>", "String", "ss", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "ss", ".", "substring", "(", "0", ",", "3", ")", "+", "'8'", "+", "ss", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["ss", "2017/01/07"]]}, {"line": 1, "state": [["ss", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9989, "code": "int N = 6;\nString S = \")))())\";\nwhile (true) {\nint lv = 0;\nint lmin = S.length();\nfor (int i = 0; i < S.length(); i++) {\nif (S.charAt(i) == '(') {\nlv += 1;}\nelse {\nlv -= 1;}\nlmin = Math.min(lmin, lv);}\nif (lmin < 0) {\nS = \"(\".repeat(-lmin) + S;}\nelse break;}\nint lv = 0;\nfor (int i = 0; i < S.length(); i++) {\nif (S.charAt(i) == '(') {\nlv += 1;}\nelse {\nlv -= 1;}}\nif (lv > 0) {\nS = S + \")\".repeat(lv);}\nSystem.out.println(S);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "String", "S", "=", "\")))())\"", ";", "<2>", "while", "(", "true", ")", "{", "<3>", "int", "lv", "=", "0", ";", "<4>", "int", "lmin", "=", "S", ".", "length", "(", ")", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<7>", "lv", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "lv", "-=", "1", ";", "}", "<10>", "lmin", "=", "Math", ".", "min", "(", "lmin", ",", "lv", ")", ";", "}", "<11>", "if", "(", "lmin", "<", "0", ")", "{", "<12>", "S", "=", "\"(\"", ".", "repeat", "(", "-", "lmin", ")", "+", "S", ";", "}", "<13>", "else", "break", ";", "}", "<14>", "int", "lv", "=", "0", ";", "<15>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<16>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<17>", "lv", "+=", "1", ";", "}", "<18>", "else", "{", "<19>", "lv", "-=", "1", ";", "}", "}", "<20>", "if", "(", "lv", ">", "0", ")", "{", "<21>", "S", "=", "S", "+", "\")\"", ".", "repeat", "(", "lv", ")", ";", "}", "<22>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["S", ")))())"]]}, {"line": 2, "state": [["N", "6"], ["S", ")))())"]]}, {"line": 3, "state": [["N", "6"], ["S", ")))())"], ["lv", "0"]]}, {"line": 4, "state": [["N", "6"], ["S", ")))())"], ["lv", "0"], ["lmin", "6"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "0"], ["lmin", "6"], ["i", "0"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["lv", "0"], ["lmin", "6"], ["i", "0"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["lv", "-1"], ["lmin", "6"], ["i", "0"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["lv", "-1"], ["lmin", "-1"], ["i", "0"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "-1"], ["lmin", "-1"], ["i", "1"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["lv", "-1"], ["lmin", "-1"], ["i", "1"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-1"], ["i", "1"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-2"], ["i", "1"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-2"], ["i", "2"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-2"], ["i", "2"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-2"], ["i", "2"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "2"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "3"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "3"]]}, {"line": 7, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-3"], ["i", "3"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-3"], ["i", "3"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-3"], ["i", "4"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["lv", "-2"], ["lmin", "-3"], ["i", "4"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "4"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "4"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "5"]]}, {"line": 6, "state": [["N", "6"], ["S", ")))())"], ["lv", "-3"], ["lmin", "-3"], ["i", "5"]]}, {"line": 9, "state": [["N", "6"], ["S", ")))())"], ["lv", "-4"], ["lmin", "-3"], ["i", "5"]]}, {"line": 10, "state": [["N", "6"], ["S", ")))())"], ["lv", "-4"], ["lmin", "-4"], ["i", "5"]]}, {"line": 5, "state": [["N", "6"], ["S", ")))())"], ["lv", "-4"], ["lmin", "-4"], ["i", "5"]]}, {"line": 11, "state": [["N", "6"], ["S", ")))())"], ["lv", "-4"], ["lmin", "-4"], ["i", "5"]]}, {"line": 12, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "-4"], ["lmin", "-4"], ["i", "5"]]}, {"line": 3, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "-4"], ["i", "5"]]}, {"line": 4, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "10"], ["i", "5"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "10"], ["i", "0"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "10"], ["i", "0"]]}, {"line": 7, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "10"], ["i", "0"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "1"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "1"]]}, {"line": 7, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "1"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "2"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "2"]]}, {"line": 7, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "2"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "2"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "3"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "3"]]}, {"line": 7, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "1"], ["i", "3"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "1"], ["i", "3"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "1"], ["i", "4"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "1"], ["i", "4"]]}, {"line": 9, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "4"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "4"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "5"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "1"], ["i", "5"]]}, {"line": 9, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "5"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "5"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "6"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "6"]]}, {"line": 9, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "6"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "6"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "7"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "7"]]}, {"line": 7, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "7"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "7"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "8"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "1"], ["i", "8"]]}, {"line": 9, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "8"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "8"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "9"]]}, {"line": 6, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "1"], ["i", "9"]]}, {"line": 9, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "1"], ["i", "9"]]}, {"line": 10, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 5, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 11, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 13, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 14, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "0"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "0"]]}, {"line": 17, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "0"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "1"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "1"]]}, {"line": 17, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "1"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "2"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "2"]]}, {"line": 17, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "0"], ["i", "2"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "0"], ["i", "3"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "0"], ["i", "3"]]}, {"line": 17, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "0"], ["i", "3"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "0"], ["i", "4"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "4"], ["lmin", "0"], ["i", "4"]]}, {"line": 19, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "0"], ["i", "4"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "0"], ["i", "5"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "3"], ["lmin", "0"], ["i", "5"]]}, {"line": 19, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "5"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "6"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "6"]]}, {"line": 19, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "6"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "7"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "7"]]}, {"line": 17, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "7"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "8"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "2"], ["lmin", "0"], ["i", "8"]]}, {"line": 19, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "8"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "9"]]}, {"line": 16, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "1"], ["lmin", "0"], ["i", "9"]]}, {"line": 19, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 15, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 20, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}, {"line": 22, "state": [["N", "6"], ["S", "(((()))())"], ["lv", "0"], ["lmin", "0"], ["i", "9"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "4": [[4, 1], [4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "5": [[5, 4, 1], [5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 1], [5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "6": [[6, 5, 4, 1], [6, 5, 6, 5, 4, 1], [6, 5, 6, 5, 6, 5, 4, 1], [6, 5, 6, 5, 6, 5, 6, 5, 4, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 1], [6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "7": [[7, 10, 9, 10, 9, 10, 9, 3], [7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "9": [[9, 3], [9, 10, 9, 3], [9, 10, 9, 10, 9, 3], [9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "10": [[10, 9, 3], [10, 9, 10, 9, 3], [10, 9, 10, 9, 10, 9, 3], [10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "11": [[11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "12": [[12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "13": [[13]], "14": [[14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "15": [[15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "16": [[16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "17": [[17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [17, 19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "19": [[19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [19, 17, 19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3], [19, 17, 19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "20": [[20, 19, 17, 19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 10, 7, 10, 7, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]], "22": [[22, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 10, 9, 10, 9, 10, 9, 3]]}}
{"id": 5377, "code": "int N = 5;\nint ans = N / 2;\nans += (N % 2 != 0) ? 1 : 0;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "ans", "=", "N", "/", "2", ";", "<2>", "ans", "+=", "(", "N", "%", "2", "!=", "0", ")", "?", "1", ":", "0", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["ans", "2"]]}, {"line": 2, "state": [["N", "5"], ["ans", "3"]]}, {"line": 3, "state": [["N", "5"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13592, "code": "String x = \"happy\"; String y = \"newyear\"; String z = \"enjoy\";\nSystem.out.println(x + ' ' + y + ' ' + z);", "code_tokens": ["<0>", "String", "x", "=", "\"happy\"", ";", "String", "y", "=", "\"newyear\"", ";", "String", "z", "=", "\"enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "x", "+", "' '", "+", "y", "+", "' '", "+", "z", ")", ";"], "trace": [{"line": 0, "state": [["x", "happy"], ["y", "newyear"], ["z", "enjoy"]]}, {"line": 1, "state": [["x", "happy"], ["y", "newyear"], ["z", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15258, "code": "int x = 100000, y = 1, z = 1;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4283, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nint hk = K / 60;\nint mk = K % 60;\nint ans = (H2 - hk) * 60 + (M2 - mk) - (H1 * 60 + M1);\nSystem.out.println(Math.max(ans, 0));", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "int", "hk", "=", "K", "/", "60", ";", "<2>", "int", "mk", "=", "K", "%", "60", ";", "<3>", "int", "ans", "=", "(", "H2", "-", "hk", ")", "*", "60", "+", "(", "M2", "-", "mk", ")", "-", "(", "H1", "*", "60", "+", "M1", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "ans", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["hk", "0"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["hk", "0"], ["mk", "30"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["hk", "0"], ["mk", "30"], ["ans", "270"]]}, {"line": 4, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["hk", "0"], ["mk", "30"], ["ans", "270"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 6913, "code": "int h = 210, n = 5;\nif (h <= sum(new int[]{31, 41, 59, 26, 53})) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "if", "(", "h", "<=", "sum", "(", "new", "int", "[", "]", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 15815, "code": "String[] input = \"64146 123 456\".split(\" \");int X = Integer.parseInt(input[0]);int Y = Integer.parseInt(input[1]);int Z = Integer.parseInt(input[2]);System.out.println((X - Z) / (Y + Z));", "code_tokens": ["<0>", "String", "[", "]", "input", "=", "\"64146 123 456\"", ".", "split", "(", "\" \"", ")", ";", "int", "X", "=", "Integer", ".", "parseInt", "(", "input", "[", "0", "]", ")", ";", "int", "Y", "=", "Integer", ".", "parseInt", "(", "input", "[", "1", "]", ")", ";", "int", "Z", "=", "Integer", ".", "parseInt", "(", "input", "[", "2", "]", ")", ";", "System", ".", "out", ".", "println", "(", "(", "X", "-", "Z", ")", "/", "(", "Y", "+", "Z", ")", ")", ";"], "trace": [{"line": 0, "state": [["X", "64146"], ["Y", "123"], ["Z", "456"]]}], "slices": {"0": [[0]]}}
{"id": 4404, "code": "int a = 10, b = 0, c = 12, d = 0, e = 120;\nint f = (c - a) * 60;\nf += (d - b);\nSystem.out.println(f - e);", "code_tokens": ["<0>", "int", "a", "=", "10", ",", "b", "=", "0", ",", "c", "=", "12", ",", "d", "=", "0", ",", "e", "=", "120", ";", "<1>", "int", "f", "=", "(", "c", "-", "a", ")", "*", "60", ";", "<2>", "f", "+=", "(", "d", "-", "b", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "f", "-", "e", ")", ";"], "trace": [{"line": 0, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"]]}, {"line": 1, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"], ["f", "120"]]}, {"line": 2, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"], ["f", "120"]]}, {"line": 3, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["e", "120"], ["f", "120"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 12995, "code": "String x = \"6\";\nSystem.out.println(\"357\".contains(x) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "String", "x", "=", "\"6\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"357\"", ".", "contains", "(", "x", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["x", "6"]]}, {"line": 1, "state": [["x", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5713, "code": "int N = 5;\nint res = N / 2;\nif (N % 2 != 0) {\nres += 1;}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "res", "=", "N", "/", "2", ";", "<2>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<3>", "res", "+=", "1", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["res", "2"]]}, {"line": 2, "state": [["N", "5"], ["res", "2"]]}, {"line": 3, "state": [["N", "5"], ["res", "3"]]}, {"line": 4, "state": [["N", "5"], ["res", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 5538, "code": "int n = 100;\nint gou = n / 2;\ngou += n % 2;\nSystem.out.println(gou);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "int", "gou", "=", "n", "/", "2", ";", "<2>", "gou", "+=", "n", "%", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "gou", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"], ["gou", "50"]]}, {"line": 2, "state": [["n", "100"], ["gou", "50"]]}, {"line": 3, "state": [["n", "100"], ["gou", "50"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 3362, "code": "int A = 20, B = 15;\nSystem.out.println(A >= 2 * B ? A - 2 * B : 0);", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "15", ";", "<1>", "System", ".", "out", ".", "println", "(", "A", ">=", "2", "*", "B", "?", "A", "-", "2", "*", "B", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "15"]]}, {"line": 1, "state": [["A", "20"], ["B", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19307, "code": "Scanner scanner = new Scanner(System.in);\nint N = 10;\nSystem.out.println((N % 2 == 1) ? (2 * N) : N);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "10", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "N", "%", "2", "==", "1", ")", "?", "(", "2", "*", "N", ")", ":", "N", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": [["N", "10"]]}, {"line": 5, "state": [["N", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 4]]}}
{"id": 16332, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nArrays.sort(a);\nfor (int i = 0; i < a.length / 2; i++) {int temp = a[i];a[i] = a[a.length - 1 - i];a[a.length - 1 - i] = temp;}\nint max_a = a[0];\nint[] new_a = new int[a.length - 1];System.arraycopy(a, 1, new_a, 0, new_a.length);a = new_a; // Now a is the array without the max_a\ndouble[] da = new double[a.length];for (int i = 0; i < a.length; i++) {da[i] = Math.abs(a[i] - max_a / 2.0);}\nint med_i = 0;double min_value = da[0];for (int i = 1; i < da.length; i++) {if (da[i] < min_value) {min_value = da[i];med_i = i;}}\nSystem.out.printf(\"%d %d\\n\", max_a, a[med_i]);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "a", "[", "i", "]", ";", "a", "[", "i", "]", "=", "a", "[", "a", ".", "length", "-", "1", "-", "i", "]", ";", "a", "[", "a", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<4>", "int", "max_a", "=", "a", "[", "0", "]", ";", "<5>", "int", "[", "]", "new_a", "=", "new", "int", "[", "a", ".", "length", "-", "1", "]", ";", "System", ".", "arraycopy", "(", "a", ",", "1", ",", "new_a", ",", "0", ",", "new_a", ".", "length", ")", ";", "a", "=", "new_a", ";", "// Now a is the array without the max_a", "<6>", "double", "[", "]", "da", "=", "new", "double", "[", "a", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "{", "da", "[", "i", "]", "=", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "max_a", "/", "2.0", ")", ";", "}", "<7>", "int", "med_i", "=", "0", ";", "double", "min_value", "=", "da", "[", "0", "]", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "da", ".", "length", ";", "i", "++", ")", "{", "if", "(", "da", "[", "i", "]", "<", "min_value", ")", "{", "min_value", "=", "da", "[", "i", "]", ";", "med_i", "=", "i", ";", "}", "}", "<8>", "System", ".", "out", ".", "printf", "(", "\"%d %d\\n\"", ",", "max_a", ",", "a", "[", "med_i", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 11 , 9 , 6 , 4 , 2 ]"], ["max_a", "11"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 9 , 6 , 4 , 2 ]"], ["max_a", "11"]]}, {"line": 5, "state": []}, {"line": 5, "state": []}, {"line": 5, "state": [["ai", "9"]]}, {"line": 5, "state": [["ai", "6"]]}, {"line": 5, "state": [["ai", "4"]]}, {"line": 5, "state": [["ai", "2"]]}, {"line": 5, "state": [["ai", "2"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 9 , 6 , 4 , 2 ]"], ["max_a", "11"], ["da", "[ 3.5 , 0.5 , 1.5 , 3.5 ]"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 9 , 6 , 4 , 2 ]"], ["max_a", "11"], ["da", "[ 3.5 , 0.5 , 1.5 , 3.5 ]"], ["med_i", "1"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 9 , 6 , 4 , 2 ]"], ["max_a", "11"], ["da", "[ 3.5 , 0.5 , 1.5 , 3.5 ]"], ["med_i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1]], "6": [[6, 5, 4, 3, 2, 1]], "7": [[7, 6, 5, 4, 3, 2, 1]]}}
{"id": 2383, "code": "System.out.println(java.util.stream.IntStream.of(\"0 3\".split(\" \")).mapToInt(Integer::parseInt).map(i -> i * (i - 1) / 2).sum());", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "stream", ".", "IntStream", ".", "of", "(", "\"0 3\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "map", "(", "i", "->", "i", "*", "(", "i", "-", "1", ")", "/", "2", ")", ".", "sum", "(", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": [["i", "0"]]}, {"line": 0, "state": [["i", "3"]]}, {"line": 0, "state": [["i", "3"]]}, {"line": 0, "state": []}], "slices": {"0": [[0], [0], [0], [0], [0], [0]]}}
{"id": 2572, "code": "System.out.println((new java.util.HashSet<>(java.util.Arrays.asList(1, 7, 9, 4))).equals(new java.util.HashSet<>(java.util.Arrays.asList(1, 9, 7, 4))) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "7", ",", "9", ",", "4", ")", ")", ")", ".", "equals", "(", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "9", ",", "7", ",", "4", ")", ")", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19466, "code": "long s = 999999999;\nif (s % 2 == 0) {\nSystem.out.println((int) s);}\nelse {\nSystem.out.println((int) (s * 2));}", "code_tokens": ["<0>", "long", "s", "=", "999999999", ";", "<1>", "if", "(", "s", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "s", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "(", "s", "*", "2", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "999999999"]]}, {"line": 1, "state": [["s", "999999999"]]}, {"line": 4, "state": [["s", "999999999"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 2971, "code": "String s = \"35753\";\nint ans = 999;\nfor (int i = 0; i < s.length() - 2; i++) {\nint x = Integer.parseInt(s.substring(i, i + 3));\nint diff = Math.abs(753 - x);\nans = Math.min(diff, ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"35753\"", ";", "<1>", "int", "ans", "=", "999", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "x", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "int", "diff", "=", "Math", ".", "abs", "(", "753", "-", "x", ")", ";", "<5>", "ans", "=", "Math", ".", "min", "(", "diff", ",", "ans", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "35753"]]}, {"line": 1, "state": [["s", "35753"], ["ans", "999"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "999"], ["i", "0"]]}, {"line": 3, "state": [["s", "35753"], ["ans", "999"], ["i", "0"], ["x", "357"]]}, {"line": 4, "state": [["s", "35753"], ["ans", "999"], ["i", "0"], ["x", "357"], ["diff", "396"]]}, {"line": 5, "state": [["s", "35753"], ["ans", "396"], ["i", "0"], ["x", "357"], ["diff", "396"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "396"], ["i", "1"], ["x", "357"], ["diff", "396"]]}, {"line": 3, "state": [["s", "35753"], ["ans", "396"], ["i", "1"], ["x", "575"], ["diff", "396"]]}, {"line": 4, "state": [["s", "35753"], ["ans", "396"], ["i", "1"], ["x", "575"], ["diff", "178"]]}, {"line": 5, "state": [["s", "35753"], ["ans", "178"], ["i", "1"], ["x", "575"], ["diff", "178"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "178"], ["i", "2"], ["x", "575"], ["diff", "178"]]}, {"line": 3, "state": [["s", "35753"], ["ans", "178"], ["i", "2"], ["x", "753"], ["diff", "178"]]}, {"line": 4, "state": [["s", "35753"], ["ans", "178"], ["i", "2"], ["x", "753"], ["diff", "0"]]}, {"line": 5, "state": [["s", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"], ["diff", "0"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"], ["diff", "0"]]}, {"line": 6, "state": [["s", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"], ["diff", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 2317, "code": "int N = 10, A = 3, B = 5;\nint maxA = Math.min(A, B);\nint minA = 0;\nif (N - Math.max(A, B) < maxA) {\nminA = maxA - (N - Math.max(A, B));}\nSystem.out.println(maxA + \" \" + minA);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "3", ",", "B", "=", "5", ";", "<1>", "int", "maxA", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "minA", "=", "0", ";", "<3>", "if", "(", "N", "-", "Math", ".", "max", "(", "A", ",", "B", ")", "<", "maxA", ")", "{", "<4>", "minA", "=", "maxA", "-", "(", "N", "-", "Math", ".", "max", "(", "A", ",", "B", ")", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "maxA", "+", "\" \"", "+", "minA", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "3"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["maxA", "3"]]}, {"line": 2, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["maxA", "3"], ["minA", "0"]]}, {"line": 3, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["maxA", "3"], ["minA", "0"]]}, {"line": 5, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["maxA", "3"], ["minA", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]]}}
{"id": 14492, "code": "int N = 7;\nint[] A = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint ans;if (N <= 2) {\nans = 1;} else {\nans = 1;\nint count = (A[0] < A[1]) ? 1 : (A[0] > A[1]) ? -1 : 0;\nint i = 2;\nwhile (i < N) {\nif (count * ((A[i - 1] < A[i]) ? 1 : (A[i - 1] > A[i]) ? -1 : 0) < 0) {\nans += 1;\ncount = 0;}\nelse {\nif (count == 0) {\ncount = (A[i - 1] < A[i]) ? 1 : (A[i - 1] > A[i]) ? -1 : 0;}}\ni += 1;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "int", "ans", ";", "if", "(", "N", "<=", "2", ")", "{", "<3>", "ans", "=", "1", ";", "}", "else", "{", "<4>", "ans", "=", "1", ";", "<5>", "int", "count", "=", "(", "A", "[", "0", "]", "<", "A", "[", "1", "]", ")", "?", "1", ":", "(", "A", "[", "0", "]", ">", "A", "[", "1", "]", ")", "?", "-", "1", ":", "0", ";", "<6>", "int", "i", "=", "2", ";", "<7>", "while", "(", "i", "<", "N", ")", "{", "<8>", "if", "(", "count", "*", "(", "(", "A", "[", "i", "-", "1", "]", "<", "A", "[", "i", "]", ")", "?", "1", ":", "(", "A", "[", "i", "-", "1", "]", ">", "A", "[", "i", "]", ")", "?", "-", "1", ":", "0", ")", "<", "0", ")", "{", "<9>", "ans", "+=", "1", ";", "<10>", "count", "=", "0", ";", "}", "<11>", "else", "{", "<12>", "if", "(", "count", "==", "0", ")", "{", "<13>", "count", "=", "(", "A", "[", "i", "-", "1", "]", "<", "A", "[", "i", "]", ")", "?", "1", ":", "(", "A", "[", "i", "-", "1", "]", ">", "A", "[", "i", "]", ")", "?", "-", "1", ":", "0", ";", "}", "}", "<14>", "i", "+=", "1", ";", "}", "}", "<15>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "2"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "2"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "2"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "2"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "3"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "3"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["count", "1"], ["i", "3"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "1"], ["i", "3"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "0"], ["i", "3"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "0"], ["i", "4"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "0"], ["i", "4"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "0"], ["i", "4"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "0"], ["i", "4"]]}, {"line": 14, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "-1"], ["i", "4"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "-1"], ["i", "5"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "-1"], ["i", "5"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["count", "-1"], ["i", "5"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "-1"], ["i", "5"]]}, {"line": 11, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "0"], ["i", "5"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "0"], ["i", "6"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "0"], ["i", "6"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "0"], ["i", "6"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "0"], ["i", "6"]]}, {"line": 14, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "1"], ["i", "6"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "1"], ["i", "7"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "1"], ["i", "7"]]}, {"line": 16, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["count", "1"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "5": [[5]], "6": [[6, 1]], "7": [[7]], "8": [[8, 7, 2, 0], [8, 15, 9, 8, 7, 2, 0], [8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [8, 15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0]], "9": [[9, 8, 7, 2, 0], [9, 8, 15, 9, 8, 7, 2, 0], [9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [9, 8, 15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0]], "10": [[10, 5], [10, 5]], "11": [[11, 9, 8, 15, 9, 8, 7, 2, 0], [11, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0]], "13": [[13, 9, 8, 7, 2, 0], [13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [13, 9, 8, 15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0]], "14": [[14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [14, 13, 9, 8, 15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0]], "15": [[15, 9, 8, 7, 2, 0], [15, 9, 8, 15, 9, 8, 7, 2, 0], [15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0], [15, 14, 13, 9, 8, 15, 9, 8, 15, 14, 13, 9, 8, 15, 9, 8, 15, 9, 8, 7, 2, 0]], "16": [[16, 10, 5]]}}
{"id": 6050, "code": "int n = 2;\nSystem.out.println(n / 2 + n % 2);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "n", "%", "2", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11588, "code": "String S = \"SAT\";\nString[] week = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint a = java.util.Arrays.asList(week).indexOf(S);\nSystem.out.println(7 - a);", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "week", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "a", "=", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "week", ")", ".", "indexOf", "(", "S", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "7", "-", "a", ")", ";"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["a", "6"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["a", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 18621, "code": "int h = 14;\nint w = 12;\nint n = 112;\nSystem.out.println((n / (-(Math.max(h, w)))) * (-1));", "code_tokens": ["<0>", "int", "h", "=", "14", ";", "<1>", "int", "w", "=", "12", ";", "<2>", "int", "n", "=", "112", ";", "<3>", "System", ".", "out", ".", "println", "(", "(", "n", "/", "(", "-", "(", "Math", ".", "max", "(", "h", ",", "w", ")", ")", ")", ")", "*", "(", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["h", "14"]]}, {"line": 1, "state": [["h", "14"], ["w", "12"]]}, {"line": 2, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 3, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]]}}
{"id": 14660, "code": "int n = 3, p = 0;\nint[] a = {1, 1, 1};\nint[] a2 = new int[a.length];for (int i = 0; i < a.length; i++) {a2[i] = a[i] % 2;}\nHashMap<Integer, Integer> a2Count = new HashMap<>();for (int num : a2) {a2Count.put(num, a2Count.getOrDefault(num, 0) + 1);}\nif (p == 0) {\nif (a2Count.getOrDefault(1, 0) == 0) {\nSystem.out.println((int)Math.pow(2, n));}\nelse {\nSystem.out.println((int)Math.pow(2, n - 1));}}\nelse {\nif (a2Count.getOrDefault(1, 0) == 0) {\nSystem.out.println(0);}\nelse {\nSystem.out.println((int)Math.pow(2, n - 1));}}", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "p", "=", "0", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "new", "int", "[", "a", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "{", "a2", "[", "i", "]", "=", "a", "[", "i", "]", "%", "2", ";", "}", "<3>", "HashMap", "<", "Integer", ",", "Integer", ">", "a2Count", "=", "new", "HashMap", "<", ">", "(", ")", ";", "for", "(", "int", "num", ":", "a2", ")", "{", "a2Count", ".", "put", "(", "num", ",", "a2Count", ".", "getOrDefault", "(", "num", ",", "0", ")", "+", "1", ")", ";", "}", "<4>", "if", "(", "p", "==", "0", ")", "{", "<5>", "if", "(", "a2Count", ".", "getOrDefault", "(", "1", ",", "0", ")", "==", "0", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", ")", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", "-", "1", ")", ")", ";", "}", "}", "<9>", "else", "{", "<10>", "if", "(", "a2Count", ".", "getOrDefault", "(", "1", ",", "0", ")", "==", "0", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<12>", "else", "{", "<13>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", "-", "1", ")", ")", ";", "}", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"], ["p", "0"]]}, {"line": 2, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["ai", "1"]]}, {"line": 3, "state": [["ai", "1"]]}, {"line": 3, "state": [["ai", "1"]]}, {"line": 3, "state": [["ai", "1"]]}, {"line": 3, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 ]"]]}, {"line": 4, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["a2", "Counter( { 1"]]}, {"line": 5, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["a2", "Counter( { 1"]]}, {"line": 6, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["a2", "Counter( { 1"]]}, {"line": 9, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["a2", "Counter( { 1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2], [3, 2], [3, 2], [3, 2], [3, 2], [3, 2], [3, 2]], "4": [[4, 3, 2]], "5": [[5, 1]], "6": [[6, 4, 3, 2]], "9": [[9, 1]]}}
{"id": 214, "code": "String s = \"codefestival\";\nint k = 100;\nint slen = s.length();\nString new_s = \"\";\nfor (int i = 0; i < slen; i++) {\nint val = ('z' + 1 - s.charAt(i)) % 26;\nif (k >= val) {\nk -= val;\nnew_s += \"a\";}\nelse {\nnew_s += s.charAt(i);}}\nif (k > 0) {\nint tmp_val = new_s.charAt(slen - 1) + k % 26;\nif (tmp_val > 'z') {\ntmp_val -= 26;}\nnew_s = new_s.substring(0, slen - 1) + (char) tmp_val;}\nSystem.out.println(new_s);", "code_tokens": ["<0>", "String", "s", "=", "\"codefestival\"", ";", "<1>", "int", "k", "=", "100", ";", "<2>", "int", "slen", "=", "s", ".", "length", "(", ")", ";", "<3>", "String", "new_s", "=", "\"\"", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "slen", ";", "i", "++", ")", "{", "<5>", "int", "val", "=", "(", "'z'", "+", "1", "-", "s", ".", "charAt", "(", "i", ")", ")", "%", "26", ";", "<6>", "if", "(", "k", ">=", "val", ")", "{", "<7>", "k", "-=", "val", ";", "<8>", "new_s", "+=", "\"a\"", ";", "}", "<9>", "else", "{", "<10>", "new_s", "+=", "s", ".", "charAt", "(", "i", ")", ";", "}", "}", "<11>", "if", "(", "k", ">", "0", ")", "{", "<12>", "int", "tmp_val", "=", "new_s", ".", "charAt", "(", "slen", "-", "1", ")", "+", "k", "%", "26", ";", "<13>", "if", "(", "tmp_val", ">", "'z'", ")", "{", "<14>", "tmp_val", "-=", "26", ";", "}", "<15>", "new_s", "=", "new_s", ".", "substring", "(", "0", ",", "slen", "-", "1", ")", "+", "(", "char", ")", "tmp_val", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "new_s", ")", ";"], "trace": [{"line": 0, "state": [["s", "codefestival"]]}, {"line": 1, "state": [["s", "codefestival"], ["k", "100"]]}, {"line": 2, "state": [["s", "codefestival"], ["k", "100"], ["slen", "12"]]}, {"line": 3, "state": [["s", "codefestival"], ["k", "100"], ["slen", "12"], ["new_s", ""]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "100"], ["slen", "12"], ["new_s", ""], ["i", "0"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "100"], ["slen", "12"], ["new_s", ""], ["i", "0"], ["val", "24"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "100"], ["slen", "12"], ["new_s", ""], ["i", "0"], ["val", "24"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "76"], ["slen", "12"], ["new_s", ""], ["i", "0"], ["val", "24"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "76"], ["slen", "12"], ["new_s", "a"], ["i", "0"], ["val", "24"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "76"], ["slen", "12"], ["new_s", "a"], ["i", "1"], ["val", "24"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "76"], ["slen", "12"], ["new_s", "a"], ["i", "1"], ["val", "12"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "76"], ["slen", "12"], ["new_s", "a"], ["i", "1"], ["val", "12"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "64"], ["slen", "12"], ["new_s", "a"], ["i", "1"], ["val", "12"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "64"], ["slen", "12"], ["new_s", "aa"], ["i", "1"], ["val", "12"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "64"], ["slen", "12"], ["new_s", "aa"], ["i", "2"], ["val", "12"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "64"], ["slen", "12"], ["new_s", "aa"], ["i", "2"], ["val", "23"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "64"], ["slen", "12"], ["new_s", "aa"], ["i", "2"], ["val", "23"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "41"], ["slen", "12"], ["new_s", "aa"], ["i", "2"], ["val", "23"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "41"], ["slen", "12"], ["i", "2"], ["val", "23"], ["new_s", "aaa"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "41"], ["slen", "12"], ["i", "3"], ["val", "23"], ["new_s", "aaa"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "41"], ["slen", "12"], ["i", "3"], ["val", "22"], ["new_s", "aaa"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "41"], ["slen", "12"], ["i", "3"], ["val", "22"], ["new_s", "aaa"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "3"], ["val", "22"], ["new_s", "aaa"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "3"], ["val", "22"], ["new_s", "aaaa"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "4"], ["val", "22"], ["new_s", "aaaa"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "4"], ["val", "21"], ["new_s", "aaaa"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "4"], ["val", "21"], ["new_s", "aaaa"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "4"], ["val", "21"], ["new_s", "aaaaf"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "5"], ["val", "21"], ["new_s", "aaaaf"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "5"], ["val", "22"], ["new_s", "aaaaf"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "5"], ["val", "22"], ["new_s", "aaaaf"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "5"], ["val", "22"], ["new_s", "aaaafe"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "6"], ["val", "22"], ["new_s", "aaaafe"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "6"], ["val", "8"], ["new_s", "aaaafe"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "19"], ["slen", "12"], ["i", "6"], ["val", "8"], ["new_s", "aaaafe"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "11"], ["slen", "12"], ["i", "6"], ["val", "8"], ["new_s", "aaaafe"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "11"], ["slen", "12"], ["i", "6"], ["val", "8"], ["new_s", "aaaafea"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "11"], ["slen", "12"], ["i", "7"], ["val", "8"], ["new_s", "aaaafea"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "11"], ["slen", "12"], ["i", "7"], ["val", "7"], ["new_s", "aaaafea"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "11"], ["slen", "12"], ["i", "7"], ["val", "7"], ["new_s", "aaaafea"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "7"], ["val", "7"], ["new_s", "aaaafea"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "7"], ["val", "7"], ["new_s", "aaaafeaa"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "8"], ["val", "7"], ["new_s", "aaaafeaa"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "8"], ["val", "18"], ["new_s", "aaaafeaa"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "8"], ["val", "18"], ["new_s", "aaaafeaa"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "8"], ["val", "18"], ["new_s", "aaaafeaai"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "9"], ["val", "18"], ["new_s", "aaaafeaai"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "9"], ["val", "5"], ["new_s", "aaaafeaai"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "9"], ["val", "5"], ["new_s", "aaaafeaai"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "9"], ["val", "5"], ["new_s", "aaaafeaaiv"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "10"], ["val", "5"], ["new_s", "aaaafeaaiv"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "10"], ["val", "0"], ["new_s", "aaaafeaaiv"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "10"], ["val", "0"], ["new_s", "aaaafeaaiv"]]}, {"line": 7, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "10"], ["val", "0"], ["new_s", "aaaafeaaiv"]]}, {"line": 8, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "10"], ["val", "0"], ["new_s", "aaaafeaaiva"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "0"], ["new_s", "aaaafeaaiva"]]}, {"line": 5, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaiva"]]}, {"line": 6, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaiva"]]}, {"line": 10, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaival"]]}, {"line": 4, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaival"]]}, {"line": 11, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaival"]]}, {"line": 12, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaival"], ["tmp_val", "112"]]}, {"line": 13, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaival"], ["tmp_val", "112"]]}, {"line": 15, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaivap"], ["tmp_val", "112"]]}, {"line": 16, "state": [["s", "codefestival"], ["k", "4"], ["slen", "12"], ["i", "11"], ["val", "15"], ["new_s", "aaaafeaaivap"], ["tmp_val", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4, 2, 0], [4, 5, 4, 2, 0], [4, 5, 4, 5, 4, 2, 0], [4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [4, 10, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 5, 4, 2, 0], [5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "6": [[6, 5, 4, 2, 0], [6, 5, 4, 5, 4, 2, 0], [6, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "7": [[7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 5, 4, 2, 0], [7, 6, 5, 4, 5, 4, 5, 4, 2, 0], [7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [7, 6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [7, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [7, 6, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "8": [[8, 3], [8, 3], [8, 3], [8, 3], [8, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [8, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [8, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "10": [[10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0], [10, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "11": [[11, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "12": [[12, 11, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "13": [[13, 12, 11, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "15": [[15, 13, 12, 11, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]], "16": [[16, 15, 13, 12, 11, 6, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 10, 5, 4, 10, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 0]]}}
{"id": 11048, "code": "String s = \"level\";\nint n = s.length();\nint x = n / 2;\nString a = s.substring(0, x);\nString b = s.substring(x + 1);\nif (a.equals(b)) {System.out.println(\"Yes\");\n} else {System.out.println(\"No\");}", "code_tokens": ["<0>", "String", "s", "=", "\"level\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "x", "=", "n", "/", "2", ";", "<3>", "String", "a", "=", "s", ".", "substring", "(", "0", ",", "x", ")", ";", "<4>", "String", "b", "=", "s", ".", "substring", "(", "x", "+", "1", ")", ";", "<5>", "if", "(", "a", ".", "equals", "(", "b", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "level"]]}, {"line": 1, "state": [["s", "level"], ["n", "5"]]}, {"line": 2, "state": [["s", "level"], ["n", "5"], ["x", "2"]]}, {"line": 3, "state": [["s", "level"], ["n", "5"], ["x", "2"], ["a", "le"]]}, {"line": 4, "state": [["s", "level"], ["n", "5"], ["x", "2"], ["a", "le"], ["b", "el"]]}, {"line": 5, "state": [["s", "level"], ["n", "5"], ["x", "2"], ["a", "le"], ["b", "el"]]}, {"line": 6, "state": [["s", "level"], ["n", "5"], ["x", "2"], ["a", "le"], ["b", "el"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]], "6": [[6]]}}
{"id": 14170, "code": "int n = 6;\nint[] a = {1, 2, 3, 2, 2, 1};\nif (n == 1) {\nSystem.out.println(1);\n} else {\nint ans = 1;\nint state(int n1, int n2) {return (n1 == n2) ? 0 : (n2 > n1) ? 1 : -1;}\nList<Integer> diff = IntStream.range(0, a.length - 1).map(i -> state(a[i], a[i + 1])).filter(x -> x != 0).boxed().collect(Collectors.toList());\nint p = 1;\nwhile (p < diff.size()) {\nif (Math.abs(diff.get(p) - diff.get(p - 1)) == 2) {\nans += 1;\np += 1;}\np += 1;}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "if", "(", "n", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "<4>", "}", "else", "{", "<5>", "int", "ans", "=", "1", ";", "<6>", "int", "state", "(", "int", "n1", ",", "int", "n2", ")", "{", "return", "(", "n1", "==", "n2", ")", "?", "0", ":", "(", "n2", ">", "n1", ")", "?", "1", ":", "-", "1", ";", "}", "<7>", "List", "<", "Integer", ">", "diff", "=", "IntStream", ".", "range", "(", "0", ",", "a", ".", "length", "-", "1", ")", ".", "map", "(", "i", "->", "state", "(", "a", "[", "i", "]", ",", "a", "[", "i", "+", "1", "]", ")", ")", ".", "filter", "(", "x", "->", "x", "!=", "0", ")", ".", "boxed", "(", ")", ".", "collect", "(", "Collectors", ".", "toList", "(", ")", ")", ";", "<8>", "int", "p", "=", "1", ";", "<9>", "while", "(", "p", "<", "diff", ".", "size", "(", ")", ")", "{", "<10>", "if", "(", "Math", ".", "abs", "(", "diff", ".", "get", "(", "p", ")", "-", "diff", ".", "get", "(", "p", "-", "1", ")", ")", "==", "2", ")", "{", "<11>", "ans", "+=", "1", ";", "<12>", "p", "+=", "1", ";", "}", "<13>", "p", "+=", "1", ";", "}", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["n", "6"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"]]}, {"line": 10, "state": []}, {"line": 10, "state": []}, {"line": 10, "state": [["n1", "1"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "1"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "1"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "1"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "1"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "1"], ["n2", "2"]]}, {"line": 9, "state": [["a1", "1"], ["a2", "2"]]}, {"line": 10, "state": [["n1", "2"], ["n2", "3"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "3"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "3"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "3"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "3"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "3"]]}, {"line": 9, "state": [["a1", "2"], ["a2", "3"]]}, {"line": 10, "state": [["n1", "3"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "3"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "3"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "3"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "3"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "3"], ["n2", "2"]]}, {"line": 9, "state": [["a1", "3"], ["a2", "2"]]}, {"line": 10, "state": [["n1", "2"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "2"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "2"]]}, {"line": 9, "state": [["a1", "2"], ["a2", "2"]]}, {"line": 10, "state": [["n1", "2"], ["n2", "1"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "1"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "1"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "1"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "1"]]}, {"line": 9, "state": [["n1", "2"], ["n2", "1"]]}, {"line": 9, "state": [["a1", "2"], ["a2", "1"]]}, {"line": 10, "state": [["a1", "2"], ["a2", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "1"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "1"]]}, {"line": 13, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "1"]]}, {"line": 16, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "2"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "2"]]}, {"line": 13, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "2"]]}, {"line": 14, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "2"]]}, {"line": 15, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "3"]]}, {"line": 16, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "4"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "4"]]}, {"line": 17, "state": [["n", "6"], ["a", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["state", "<function>"], ["diff", "[ 1 , 1 , -1 , -1 ]"], ["p", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 3]], "8": [[8]], "9": [[9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9], [9]], "10": [[10, 9, 4], [10, 9, 4], [10, 9, 4], [10, 9, 9, 9, 9, 9, 9, 9, 4], [10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4]], "11": [[11]], "12": [[12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [12, 16, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [12, 16, 15, 13, 12, 16, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4]], "13": [[13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [13, 12, 16, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4]], "14": [[14, 8]], "15": [[15, 13, 12, 16, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4]], "16": [[16, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4], [16, 15, 13, 12, 16, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4]], "17": [[17, 14, 8]]}}
{"id": 19465, "code": "int s = 10;\nif (s % 2 == 0) {\nSystem.out.println(s);}\nelse {\nSystem.out.println(s * 2);}", "code_tokens": ["<0>", "int", "s", "=", "10", ";", "<1>", "if", "(", "s", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "s", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "10"]]}, {"line": 1, "state": [["s", "10"]]}, {"line": 2, "state": [["s", "10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 13159, "code": "System.out.println(String.join(\" \", \"abcde,fghihgf,edcba\".split(\",\")));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "String", ".", "join", "(", "\" \"", ",", "\"abcde,fghihgf,edcba\"", ".", "split", "(", "\",\"", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 6110, "code": "int n = 3;\nint[] a = {1, 1, 1};\nint[] b = {2, 2, 2};\nint[] c = {3, 3, 3};\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nint ans = 0;\nint[] ind = new int[n + 1];ind[0] = 0;\nfor (int i = 0; i < n; i++) {\nind[i + 1] = n - bisectRight(c, b[i]) + ind[i];}\nfor (int i : a) {\nint b_ind = bisectRight(b, i);\nans += ind[n] - ind[b_ind];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "int", "[", "]", "ind", "=", "new", "int", "[", "n", "+", "1", "]", ";", "ind", "[", "0", "]", "=", "0", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<10>", "ind", "[", "i", "+", "1", "]", "=", "n", "-", "bisectRight", "(", "c", ",", "b", "[", "i", "]", ")", "+", "ind", "[", "i", "]", ";", "}", "<11>", "for", "(", "int", "i", ":", "a", ")", "{", "<12>", "int", "b_ind", "=", "bisectRight", "(", "b", ",", "i", ")", ";", "<13>", "ans", "+=", "ind", "[", "n", "]", "-", "ind", "[", "b_ind", "]", ";", "}", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"]]}, {"line": 2, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 ]"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 ]"], ["i", "0"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 ]"], ["i", "0"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 ]"], ["i", "1"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 , 6 ]"], ["i", "1"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 , 6 ]"], ["i", "2"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "2"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"]]}, {"line": 13, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 14, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 13, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 14, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 13, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 14, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}, {"line": 15, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["ind", "[ 0 , 3 , 6 , 9 ]"], ["i", "1"], ["b_ind", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7, 4]], "8": [[8]], "9": [[9]], "10": [[10, 1], [10, 11, 10, 1], [10, 11, 10, 11, 10, 1], [10, 11, 10, 11, 10, 11, 10, 1]], "11": [[11, 10, 1], [11, 10, 11, 10, 1], [11, 10, 11, 10, 11, 10, 1]], "12": [[12, 10, 11, 10, 11, 10, 11, 10, 1], [12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1], [12, 13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1], [12, 13, 12, 13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1]], "13": [[13, 12, 10, 11, 10, 11, 10, 11, 10, 1], [13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1], [13, 12, 13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1]], "14": [[14, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1], [14, 13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1], [14, 13, 12, 13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1]], "15": [[15, 14, 13, 12, 13, 12, 13, 12, 10, 11, 10, 11, 10, 11, 10, 1]]}}
{"id": 15555, "code": "int x = 100000, y = 1, z = 1;\nx -= z;\ny += z;\nSystem.out.println(x / y);", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "x", "-=", "z", ";", "<2>", "y", "+=", "z", ";", "<3>", "System", ".", "out", ".", "println", "(", "x", "/", "y", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "99999"], ["y", "1"], ["z", "1"]]}, {"line": 2, "state": [["x", "99999"], ["y", "2"], ["z", "1"]]}, {"line": 3, "state": [["x", "99999"], ["y", "2"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 11384, "code": "String[] A = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nString S = \"SAT\";\nfor (int i = 0; i < 7; i++) {\nif (S.equals(A[i])) {\nSystem.out.println(7 - i);}}", "code_tokens": ["<0>", "String", "[", "]", "A", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "String", "S", "=", "\"SAT\"", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "7", ";", "i", "++", ")", "{", "<3>", "if", "(", "S", ".", "equals", "(", "A", "[", "i", "]", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", "-", "i", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "0"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "0"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "1"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "1"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "2"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "2"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "3"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "3"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "4"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "4"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "5"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "5"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "6"]]}, {"line": 3, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "6"]]}, {"line": 4, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "6"]]}, {"line": 2, "state": [["A", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SAT"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 3, 2], [2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "3": [[3, 2], [3, 2, 3, 2], [3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]]}}
{"id": 18948, "code": "int N = 5;\nif (N % 2 != 0) {\nSystem.out.println(0);}\nelse {\nint answer = 0;\nint m = 10;\nwhile (m <= N) {\nanswer += N / m;\nm *= 5;}\nSystem.out.println(answer);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "answer", "=", "0", ";", "<5>", "int", "m", "=", "10", ";", "<6>", "while", "(", "m", "<=", "N", ")", "{", "<7>", "answer", "+=", "N", "/", "m", ";", "<8>", "m", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "answer", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 2, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 8713, "code": "int n = 5;\nint[] a1 = {3, 2, 2, 4, 1};\nint[] a2 = {1, 2, 2, 2, 1};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint sumA1 = 0;for (int j = 0; j <= i; j++) {sumA1 += a1[j];}int sumA2 = 0;for (int j = i; j < n; j++) {sumA2 += a2[j];}ans = Math.max(ans, sumA1 + sumA2);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "sumA1", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA1", "+=", "a1", "[", "j", "]", ";", "}", "int", "sumA2", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sumA2", "+=", "a2", "[", "j", "]", ";", "}", "ans", "=", "Math", ".", "max", "(", "ans", ",", "sumA1", "+", "sumA2", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "0"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "1"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "3"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 3406, "code": "int A = 12, B = 4;\nint c = A - 2 * B;\nif (c > 0) {\nSystem.out.println(c);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "A", "=", "12", ",", "B", "=", "4", ";", "<1>", "int", "c", "=", "A", "-", "2", "*", "B", ";", "<2>", "if", "(", "c", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "c", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "12"], ["B", "4"]]}, {"line": 1, "state": [["A", "12"], ["B", "4"], ["c", "4"]]}, {"line": 2, "state": [["A", "12"], ["B", "4"], ["c", "4"]]}, {"line": 3, "state": [["A", "12"], ["B", "4"], ["c", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 5769, "code": "int n = 100;\nif (n % 2 != 0) {\nSystem.out.println(n / 2 + 1);\n} else if (n % 2 == 0) {\nSystem.out.println(n / 2);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "<3>", "}", "else", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}, {"line": 3, "state": [["n", "100"]]}, {"line": 4, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]]}}
{"id": 7418, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nint rest_H = H - java.util.Arrays.stream(A).sum();\nif (rest_H <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "rest_H", "=", "H", "-", "java", ".", "util", ".", "Arrays", ".", "stream", "(", "A", ")", ".", "sum", "(", ")", ";", "<3>", "if", "(", "rest_H", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["rest_H", "1"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["rest_H", "1"]]}, {"line": 6, "state": [["H", "211"], ["N", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["rest_H", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6]]}}
{"id": 5007, "code": "String s = \"xyz\";\nint longVar = s.length() - 2;\nSystem.out.println(s.charAt(0) + String.valueOf(longVar) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "longVar", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "longVar", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["long", "1"]]}, {"line": 2, "state": [["s", "xyz"], ["long", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1662, "code": "int n = 10, a = 7, b = 5;\nint ab = a + b;\nboolean c = n < ab;\nint r = c ? ab - n : 0;\nSystem.out.println(min(a, b) + \" \" + r);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "ab", "=", "a", "+", "b", ";", "<2>", "boolean", "c", "=", "n", "<", "ab", ";", "<3>", "int", "r", "=", "c", "?", "ab", "-", "n", ":", "0", ";", "<4>", "System", ".", "out", ".", "println", "(", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ab", "12"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ab", "12"], ["c", "True"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ab", "12"], ["c", "True"], ["r", "2"]]}, {"line": 4, "state": []}, {"line": 4, "state": []}, {"line": 4, "state": [["i", "5"]]}, {"line": 4, "state": [["i", "2"]]}, {"line": 4, "state": [["i", "2"]]}, {"line": 4, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ab", "12"], ["c", "True"], ["r", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0], [4, 3, 2, 1, 0], [4, 3, 2, 1, 0], [4, 3, 2, 1, 0], [4, 3, 2, 1, 0], [4, 3, 2, 1, 0]]}}
{"id": 7034, "code": "int H = 211, N = 5;\nint[] i = Arrays.stream(\"31 41 59 26 53\".split(\" \")).mapToInt(Integer::parseInt).toArray();\nif (Arrays.stream(i).sum() >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "i", "=", "Arrays", ".", "stream", "(", "\"31 41 59 26 53\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "<2>", "if", "(", "Arrays", ".", "stream", "(", "i", ")", ".", "sum", "(", ")", ">=", "H", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"]]}, {"line": 5, "state": [["H", "211"], ["N", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 2932, "code": "String S = \"35753\";\nint t = 1000;\nfor (int s = 0; s < S.length() - 2; s++) {\nt = Math.min(Math.abs(753 - Integer.parseInt(S.substring(s, s + 3))), t);}\nSystem.out.println(t);", "code_tokens": ["<0>", "String", "S", "=", "\"35753\"", ";", "<1>", "int", "t", "=", "1000", ";", "<2>", "for", "(", "int", "s", "=", "0", ";", "s", "<", "S", ".", "length", "(", ")", "-", "2", ";", "s", "++", ")", "{", "<3>", "t", "=", "Math", ".", "min", "(", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "s", ",", "s", "+", "3", ")", ")", ")", ",", "t", ")", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "t", ")", ";"], "trace": [{"line": 0, "state": [["S", "35753"]]}, {"line": 1, "state": [["S", "35753"], ["t", "1000"]]}, {"line": 2, "state": [["S", "35753"], ["t", "1000"], ["s", "0"]]}, {"line": 3, "state": [["S", "35753"], ["t", "396"], ["s", "0"]]}, {"line": 2, "state": [["S", "35753"], ["t", "396"], ["s", "1"]]}, {"line": 3, "state": [["S", "35753"], ["t", "178"], ["s", "1"]]}, {"line": 2, "state": [["S", "35753"], ["t", "178"], ["s", "2"]]}, {"line": 3, "state": [["S", "35753"], ["t", "0"], ["s", "2"]]}, {"line": 2, "state": [["S", "35753"], ["t", "0"], ["s", "2"]]}, {"line": 4, "state": [["S", "35753"], ["t", "0"], ["s", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 19064, "code": "int N = 12;\nif (N % 2 != 0) {\nSystem.out.println(0);\nSystem.exit(0);}\nint cnt = 0;\nint current = 5;\nwhile (N / 2 >= current) {\ncnt += (N / 2 / current);\ncurrent *= 5;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "N", "=", "12", ";", "<1>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<3>", "System", ".", "exit", "(", "0", ")", ";", "}", "<4>", "int", "cnt", "=", "0", ";", "<5>", "int", "current", "=", "5", ";", "<6>", "while", "(", "N", "/", "2", ">=", "current", ")", "{", "<7>", "cnt", "+=", "(", "N", "/", "2", "/", "current", ")", ";", "<8>", "current", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["N", "12"]]}, {"line": 1, "state": [["N", "12"]]}, {"line": 4, "state": [["N", "12"], ["cnt", "0"]]}, {"line": 5, "state": [["N", "12"], ["cnt", "0"], ["current", "5"]]}, {"line": 6, "state": [["N", "12"], ["cnt", "0"], ["current", "5"]]}, {"line": 7, "state": [["N", "12"], ["cnt", "1"], ["current", "5"]]}, {"line": 8, "state": [["N", "12"], ["cnt", "1"], ["current", "25"]]}, {"line": 6, "state": [["N", "12"], ["cnt", "1"], ["current", "25"]]}, {"line": 9, "state": [["N", "12"], ["cnt", "1"], ["current", "25"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 5, 1, 0], [6, 8, 7, 6, 5, 1, 0]], "7": [[7, 6, 5, 1, 0]], "8": [[8, 7, 6, 5, 1, 0]], "9": [[9, 7, 6, 5, 1, 0]]}}
{"id": 9997, "code": "int n = 3;\nString s = \"())\";\nint nopen = 0;\nString sl = \"\";\nString sr = \"\";\nfor (char c : s.toCharArray()) {\nif (c == '(') {\nnopen += 1;}\nelse {\nif (nopen == 0) {\nsl += '(';}\nelse {\nnopen -= 1;}}}\nnopen = 0;for (char c : (sl + s).toCharArray()) {nopen += (c == '(') ? 1 : -1;}\nsr = new String(new char[nopen]).replace(\"\\0\", \")\");\nSystem.out.println(sl + s + sr);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "String", "s", "=", "\"())\"", ";", "<2>", "int", "nopen", "=", "0", ";", "<3>", "String", "sl", "=", "\"\"", ";", "<4>", "String", "sr", "=", "\"\"", ";", "<5>", "for", "(", "char", "c", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<6>", "if", "(", "c", "==", "'('", ")", "{", "<7>", "nopen", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "if", "(", "nopen", "==", "0", ")", "{", "<10>", "sl", "+=", "'('", ";", "}", "<11>", "else", "{", "<12>", "nopen", "-=", "1", ";", "}", "}", "}", "<13>", "nopen", "=", "0", ";", "for", "(", "char", "c", ":", "(", "sl", "+", "s", ")", ".", "toCharArray", "(", ")", ")", "{", "nopen", "+=", "(", "c", "==", "'('", ")", "?", "1", ":", "-", "1", ";", "}", "<14>", "sr", "=", "new", "String", "(", "new", "char", "[", "nopen", "]", ")", ".", "replace", "(", "\"\\0\"", ",", "\")\"", ")", ";", "<15>", "System", ".", "out", ".", "println", "(", "sl", "+", "s", "+", "sr", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "())"]]}, {"line": 2, "state": [["n", "3"], ["s", "())"], ["nopen", "0"]]}, {"line": 3, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""]]}, {"line": 4, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", "("]]}, {"line": 6, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", "("]]}, {"line": 7, "state": [["n", "3"], ["s", "())"], ["nopen", "1"], ["sl", ""], ["sr", ""], ["c", "("]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["nopen", "1"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 6, "state": [["n", "3"], ["s", "())"], ["nopen", "1"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 9, "state": [["n", "3"], ["s", "())"], ["nopen", "1"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 12, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 6, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 9, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", ""], ["sr", ""], ["c", ")"]]}, {"line": 10, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 5, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 13, "state": []}, {"line": 13, "state": []}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", "("]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["c", ")"]]}, {"line": 13, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 14, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}, {"line": 15, "state": [["n", "3"], ["s", "())"], ["nopen", "0"], ["sl", "("], ["sr", ""], ["c", ")"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 6, 5, 1], [5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 1]], "7": [[7, 2]], "9": [[9, 7, 2], [9, 12, 9, 7, 2]], "10": [[10, 3]], "12": [[12, 9, 7, 2]], "13": [[13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1], [13, 5, 6, 5, 6, 5, 6, 5, 1]], "14": [[14, 13, 5, 6, 5, 6, 5, 6, 5, 1]], "15": [[15, 14, 13, 5, 6, 5, 6, 5, 6, 5, 1]]}}
{"id": 4458, "code": "String s = \"xyz\";\nString mid = String.valueOf(s.length() - 2);\nSystem.out.println(s.charAt(0) + mid + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "String", "mid", "=", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "mid", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["mid", "1"]]}, {"line": 2, "state": [["s", "xyz"], ["mid", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11282, "code": "String s = \"SAT\";\njava.util.Map<String, Integer> ls = new java.util.HashMap<>();ls.put(\"MON\", 0);ls.put(\"TUE\", 1);ls.put(\"WED\", 2);ls.put(\"THU\", 3);ls.put(\"FRI\", 4);ls.put(\"SAT\", 5);ls.put(\"SUN\", -1);\nSystem.out.println(6 - ls.get(s));", "code_tokens": ["<0>", "String", "s", "=", "\"SAT\"", ";", "<1>", "java", ".", "util", ".", "Map", "<", "String", ",", "Integer", ">", "ls", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "ls", ".", "put", "(", "\"MON\"", ",", "0", ")", ";", "ls", ".", "put", "(", "\"TUE\"", ",", "1", ")", ";", "ls", ".", "put", "(", "\"WED\"", ",", "2", ")", ";", "ls", ".", "put", "(", "\"THU\"", ",", "3", ")", ";", "ls", ".", "put", "(", "\"FRI\"", ",", "4", ")", ";", "ls", ".", "put", "(", "\"SAT\"", ",", "5", ")", ";", "ls", ".", "put", "(", "\"SUN\"", ",", "-", "1", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "6", "-", "ls", ".", "get", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "SAT"]]}, {"line": 1, "state": [["s", "SAT"], ["ls", "{ MON"]]}, {"line": 2, "state": [["s", "SAT"], ["ls", "{ MON"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 1747, "code": "int N = 100, A = 100, B = 100;\nif (N >= A + B) {\nSystem.out.println(Math.min(A, B) + \" 0\");\n} else {\nSystem.out.println(Math.min(A, B) + \" \" + (A + B - N));}", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "if", "(", "N", ">=", "A", "+", "B", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "+", "\" 0\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "+", "\" \"", "+", "(", "A", "+", "B", "-", "N", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 4, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 2252, "code": "int N = 10, A = 7, B = 5;\nSystem.out.println(Math.min(A, B) + \" \" + (Math.min(A, B) - N + Math.max(A, B) < 0 ? 0 : Math.min(A, B) - N + Math.max(A, B)));", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "+", "\" \"", "+", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "-", "N", "+", "Math", ".", "max", "(", "A", ",", "B", ")", "<", "0", "?", "0", ":", "Math", ".", "min", "(", "A", ",", "B", ")", "-", "N", "+", "Math", ".", "max", "(", "A", ",", "B", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11742, "code": "int m1 = 11, d1 = 16;\nint m2 = 11, d2 = 17;\nif (m1 == m2) {\nSystem.out.println(\"0\");}\nelse {\nSystem.out.println(\"1\");}", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "16", ";", "<1>", "int", "m2", "=", "11", ",", "d2", "=", "17", ";", "<2>", "if", "(", "m1", "==", "m2", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "16"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 13345, "code": "String s = \"abcde,fghihgf,edcba\";\nSystem.out.println(String.join(\" \", s.split(\",\")));", "code_tokens": ["<0>", "String", "s", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "join", "(", "\" \"", ",", "s", ".", "split", "(", "\",\"", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["s", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9082, "code": "String a = \"2017/01/07\";\nString b = a.substring(0, 3) + \"8\" + a.substring(4);\nSystem.out.println(b);", "code_tokens": ["<0>", "String", "a", "=", "\"2017/01/07\"", ";", "<1>", "String", "b", "=", "a", ".", "substring", "(", "0", ",", "3", ")", "+", "\"8\"", "+", "a", ".", "substring", "(", "4", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017/01/07"]]}, {"line": 1, "state": [["a", "2017/01/07"], ["b", "2018/01/07"]]}, {"line": 2, "state": [["a", "2017/01/07"], ["b", "2018/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 262, "code": "String s = \"a\";\nint k = 25;\nStringBuilder sl = new StringBuilder();\nint n = s.length();\nfor (int i = 0; i < n; i++) {\nif (s.charAt(i) != 'a') {\nif (26 - (s.charAt(i) - 'a') <= k) {\nsl.append('a');\nk -= 26 - (s.charAt(i) - 'a');}\nelse {\nsl.append(s.charAt(i));}}\nelse {\nsl.append(s.charAt(i));}}\nif (k > 0) {\nif (k % 26 != 0) {\nsl.setCharAt(n - 1, (char) (sl.charAt(n - 1) + k % 26));}}\nSystem.out.println(sl.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "k", "=", "25", ";", "<2>", "StringBuilder", "sl", "=", "new", "StringBuilder", "(", ")", ";", "<3>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", ".", "charAt", "(", "i", ")", "!=", "'a'", ")", "{", "<6>", "if", "(", "26", "-", "(", "s", ".", "charAt", "(", "i", ")", "-", "'a'", ")", "<=", "k", ")", "{", "<7>", "sl", ".", "append", "(", "'a'", ")", ";", "<8>", "k", "-=", "26", "-", "(", "s", ".", "charAt", "(", "i", ")", "-", "'a'", ")", ";", "}", "<9>", "else", "{", "<10>", "sl", ".", "append", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "}", "}", "<11>", "else", "{", "<12>", "sl", ".", "append", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "}", "}", "<13>", "if", "(", "k", ">", "0", ")", "{", "<14>", "if", "(", "k", "%", "26", "!=", "0", ")", "{", "<15>", "sl", ".", "setCharAt", "(", "n", "-", "1", ",", "(", "char", ")", "(", "sl", ".", "charAt", "(", "n", "-", "1", ")", "+", "k", "%", "26", ")", ")", ";", "}", "}", "<16>", "System", ".", "out", ".", "println", "(", "sl", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["k", "25"]]}, {"line": 2, "state": [["s", "a"], ["k", "25"], ["sl", "[ ]"]]}, {"line": 3, "state": [["s", "a"], ["k", "25"], ["sl", "[ ]"], ["n", "1"]]}, {"line": 4, "state": [["s", "a"], ["k", "25"], ["sl", "[ ]"], ["n", "1"], ["i", "0"]]}, {"line": 5, "state": [["s", "a"], ["k", "25"], ["sl", "[ ]"], ["n", "1"], ["i", "0"]]}, {"line": 12, "state": [["s", "a"], ["k", "25"], ["sl", "[ a ]"], ["n", "1"], ["i", "0"]]}, {"line": 4, "state": [["s", "a"], ["k", "25"], ["sl", "[ a ]"], ["n", "1"], ["i", "0"]]}, {"line": 13, "state": [["s", "a"], ["k", "25"], ["sl", "[ a ]"], ["n", "1"], ["i", "0"]]}, {"line": 14, "state": [["s", "a"], ["k", "25"], ["sl", "[ a ]"], ["n", "1"], ["i", "0"]]}, {"line": 15, "state": [["s", "a"], ["k", "25"], ["sl", "[ z ]"], ["n", "1"], ["i", "0"]]}, {"line": 16, "state": [["s", "a"], ["k", "25"], ["sl", "[ z ]"], ["n", "1"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0], [4, 12, 5, 4, 3, 0]], "5": [[5, 4, 3, 0]], "12": [[12, 5, 4, 3, 0]], "13": [[13, 1]], "14": [[14, 13, 1]], "15": [[15, 14, 13, 1]], "16": [[16, 15, 14, 13, 1]]}}
{"id": 1735, "code": "Scanner scanner = new Scanner(System.in);\nint N = 100, A = 100, B = 100;\nif (A + B <= N) {\nSystem.out.println(Math.min(A, B) + \" \" + 0);} else {\nSystem.out.println(Math.min(A, B) + \" \" + ((A + B) - N));}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<2>", "if", "(", "A", "+", "B", "<=", "N", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "+", "\" \"", "+", "0", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "+", "\" \"", "+", "(", "(", "A", "+", "B", ")", "-", "N", ")", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 6, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "6": [[6, 3, 2]]}}
{"id": 16548, "code": "String a = \"H\";String b = \"H\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nSystem.out.println(\"HD\".replace(b, \"\"));}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"HD\"", ".", "replace", "(", "b", ",", "\"\"", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 6365, "code": "int N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nint[] cnt = new int[B.length];\nfor (int i = 0; i < B.length; i++) {\ncnt[i] = bisectLeft(A, B[i]) * (N - bisectRight(C, B[i]));}\nint sum = 0;for (int value : cnt) {sum += value;}System.out.println(sum);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "[", "]", "cnt", "=", "new", "int", "[", "B", ".", "length", "]", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "B", ".", "length", ";", "i", "++", ")", "{", "<6>", "cnt", "[", "i", "]", "=", "bisectLeft", "(", "A", ",", "B", "[", "i", "]", ")", "*", "(", "N", "-", "bisectRight", "(", "C", ",", "B", "[", "i", "]", ")", ")", ";", "}", "<7>", "int", "sum", "=", "0", ";", "for", "(", "int", "value", ":", "cnt", ")", "{", "sum", "+=", "value", ";", "}", "System", ".", "out", ".", "println", "(", "sum", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ ]"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ ]"], ["b", "2"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 ]"], ["b", "2"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 ]"], ["b", "2"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 , 9 ]"], ["b", "2"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 , 9 ]"], ["b", "2"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 , 9 , 9 ]"], ["b", "2"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 , 9 , 9 ]"], ["b", "2"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["cnt", "[ 9 , 9 , 9 ]"], ["b", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 7, 6, 3], [6, 7, 6, 7, 6, 3], [6, 7, 6, 7, 6, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 7, 6, 3], [7, 6, 7, 6, 7, 6, 3]], "8": [[8, 7, 6, 7, 6, 7, 6, 3]]}}
{"id": 9065, "code": "int A = 15;\nint B = 18;\nint C = 26;\nint D = 35;\nint E = 36;\nint Q = 18;\nint F = A - B;\nint G = A - C;\nint H = A - D;\nint I = A - E;\nint J = B - C;\nint K = B - D;\nint L = B - E;\nint M = C - D;\nint N = C - E;\nint O = D - E;\nint P = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.abs(F), Math.abs(G)), Math.abs(H)), Math.abs(I)), Math.abs(J)), Math.abs(K)),Math.abs(L)), Math.abs(M)), Math.abs(N)), Math.abs(O)));\nif (P <= Q) {\nSystem.out.println(\"Yay!\");\n} else {\nSystem.out.println(\":(\");}", "code_tokens": ["<0>", "int", "A", "=", "15", ";", "<1>", "int", "B", "=", "18", ";", "<2>", "int", "C", "=", "26", ";", "<3>", "int", "D", "=", "35", ";", "<4>", "int", "E", "=", "36", ";", "<5>", "int", "Q", "=", "18", ";", "<6>", "int", "F", "=", "A", "-", "B", ";", "<7>", "int", "G", "=", "A", "-", "C", ";", "<8>", "int", "H", "=", "A", "-", "D", ";", "<9>", "int", "I", "=", "A", "-", "E", ";", "<10>", "int", "J", "=", "B", "-", "C", ";", "<11>", "int", "K", "=", "B", "-", "D", ";", "<12>", "int", "L", "=", "B", "-", "E", ";", "<13>", "int", "M", "=", "C", "-", "D", ";", "<14>", "int", "N", "=", "C", "-", "E", ";", "<15>", "int", "O", "=", "D", "-", "E", ";", "<16>", "int", "P", "=", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "max", "(", "Math", ".", "abs", "(", "F", ")", ",", "Math", ".", "abs", "(", "G", ")", ")", ",", "Math", ".", "abs", "(", "H", ")", ")", ",", "Math", ".", "abs", "(", "I", ")", ")", ",", "Math", ".", "abs", "(", "J", ")", ")", ",", "Math", ".", "abs", "(", "K", ")", ")", ",", "Math", ".", "abs", "(", "L", ")", ")", ",", "Math", ".", "abs", "(", "M", ")", ")", ",", "Math", ".", "abs", "(", "N", ")", ")", ",", "Math", ".", "abs", "(", "O", ")", ")", ")", ";", "<17>", "if", "(", "P", "<=", "Q", ")", "{", "<18>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "<19>", "}", "else", "{", "<20>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "15"]]}, {"line": 1, "state": [["A", "15"], ["B", "18"]]}, {"line": 2, "state": [["A", "15"], ["B", "18"], ["C", "26"]]}, {"line": 3, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"]]}, {"line": 4, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"]]}, {"line": 5, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"]]}, {"line": 6, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"]]}, {"line": 7, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"]]}, {"line": 8, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"]]}, {"line": 9, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"]]}, {"line": 10, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"]]}, {"line": 11, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"]]}, {"line": 12, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"]]}, {"line": 13, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"], ["M", "-9"]]}, {"line": 14, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"], ["M", "-9"], ["N", "-10"]]}, {"line": 15, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"], ["M", "-9"], ["N", "-10"], ["O", "-1"]]}, {"line": 16, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"], ["M", "-9"], ["N", "-10"], ["O", "-1"], ["P", "21"]]}, {"line": 17, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"], ["M", "-9"], ["N", "-10"], ["O", "-1"], ["P", "21"]]}, {"line": 20, "state": [["A", "15"], ["B", "18"], ["C", "26"], ["D", "35"], ["E", "36"], ["Q", "18"], ["F", "-3"], ["G", "-11"], ["H", "-20"], ["I", "-21"], ["J", "-8"], ["K", "-17"], ["L", "-18"], ["M", "-9"], ["N", "-10"], ["O", "-1"], ["P", "21"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1, 0]], "7": [[7, 6, 1, 0]], "8": [[8, 7, 6, 1, 0]], "9": [[9, 8, 7, 6, 1, 0]], "10": [[10, 7, 6, 1, 0]], "11": [[11, 10, 7, 6, 1, 0]], "12": [[12, 11, 10, 7, 6, 1, 0]], "13": [[13, 11, 10, 7, 6, 1, 0]], "14": [[14, 13, 11, 10, 7, 6, 1, 0]], "15": [[15, 14, 13, 11, 10, 7, 6, 1, 0]], "16": [[16, 15, 14, 13, 11, 10, 7, 6, 1, 0]], "17": [[17, 16, 15, 14, 13, 11, 10, 7, 6, 1, 0]], "20": [[20]]}}
{"id": 6063, "code": "int n = 100;\nif (n % 2 == 1) {\nSystem.out.println(n / 2 + 1);}\nelse {\nSystem.out.println(n / 2);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}, {"line": 4, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 13839, "code": "int n = 7;\nint[] a_li = {1, 2, 3, 2, 1, 999999999, 1000000000};\nif (n < 3) {\nSystem.out.println(1);\nSystem.exit(0);}\nint ans = 1;\nString flag = \"flat\";\nfor (int i = 1; i < n; i++) {\nif (a_li[i - 1] > a_li[i]) {\nif (flag.equals(\"up\")) {\nans += 1;\nflag = \"flat\";\ncontinue;}\nflag = \"down\";}\nelse if (a_li[i - 1] < a_li[i]) {\nif (flag.equals(\"down\")) {\nans += 1;\nflag = \"flat\";\ncontinue;}\nflag = \"up\";}\nelse {\nif (flag.equals(\"flat\")) {\nflag = \"flat\";}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a_li", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "if", "(", "n", "<", "3", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "<4>", "System", ".", "exit", "(", "0", ")", ";", "}", "<5>", "int", "ans", "=", "1", ";", "<6>", "String", "flag", "=", "\"flat\"", ";", "<7>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<8>", "if", "(", "a_li", "[", "i", "-", "1", "]", ">", "a_li", "[", "i", "]", ")", "{", "<9>", "if", "(", "flag", ".", "equals", "(", "\"up\"", ")", ")", "{", "<10>", "ans", "+=", "1", ";", "<11>", "flag", "=", "\"flat\"", ";", "<12>", "continue", ";", "}", "<13>", "flag", "=", "\"down\"", ";", "}", "<14>", "else", "if", "(", "a_li", "[", "i", "-", "1", "]", "<", "a_li", "[", "i", "]", ")", "{", "<15>", "if", "(", "flag", ".", "equals", "(", "\"down\"", ")", ")", "{", "<16>", "ans", "+=", "1", ";", "<17>", "flag", "=", "\"flat\"", ";", "<18>", "continue", ";", "}", "<19>", "flag", "=", "\"up\"", ";", "}", "<20>", "else", "{", "<21>", "if", "(", "flag", ".", "equals", "(", "\"flat\"", ")", ")", "{", "<22>", "flag", "=", "\"flat\"", ";", "}", "}", "}", "<23>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 5, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"]]}, {"line": 6, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "flat"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "flat"], ["i", "1"]]}, {"line": 8, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "flat"], ["i", "1"]]}, {"line": 14, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "flat"], ["i", "1"]]}, {"line": 15, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "flat"], ["i", "1"]]}, {"line": 19, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "1"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "2"]]}, {"line": 8, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "2"]]}, {"line": 14, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "2"]]}, {"line": 15, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "2"]]}, {"line": 19, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "2"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "3"]]}, {"line": 8, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "3"]]}, {"line": 9, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["flag", "up"], ["i", "3"]]}, {"line": 10, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "up"], ["i", "3"]]}, {"line": 11, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "flat"], ["i", "3"]]}, {"line": 12, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "flat"], ["i", "3"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "flat"], ["i", "4"]]}, {"line": 8, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "flat"], ["i", "4"]]}, {"line": 9, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "flat"], ["i", "4"]]}, {"line": 13, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "down"], ["i", "4"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "down"], ["i", "5"]]}, {"line": 8, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "down"], ["i", "5"]]}, {"line": 14, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "down"], ["i", "5"]]}, {"line": 15, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["flag", "down"], ["i", "5"]]}, {"line": 16, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "down"], ["i", "5"]]}, {"line": 17, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "flat"], ["i", "5"]]}, {"line": 18, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "flat"], ["i", "5"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "flat"], ["i", "6"]]}, {"line": 8, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "flat"], ["i", "6"]]}, {"line": 14, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "flat"], ["i", "6"]]}, {"line": 15, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "flat"], ["i", "6"]]}, {"line": 19, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "up"], ["i", "6"]]}, {"line": 7, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "up"], ["i", "6"]]}, {"line": 23, "state": [["n", "7"], ["a_li", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["flag", "up"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "5": [[5]], "6": [[6]], "7": [[7, 2, 0], [7, 14, 8, 7, 2, 0], [7, 14, 8, 7, 14, 8, 7, 2, 0], [7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [7, 14, 8, 7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [7, 14, 8, 7, 14, 8, 7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0]], "8": [[8, 7, 2, 0], [8, 7, 14, 8, 7, 2, 0], [8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [8, 7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [8, 7, 14, 8, 7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0]], "9": [[9, 19, 15, 19, 15, 6], [9, 11, 9, 19, 15, 19, 15, 6]], "10": [[10, 5]], "11": [[11, 9, 19, 15, 19, 15, 6]], "12": [[12]], "13": [[13, 9, 11, 9, 19, 15, 19, 15, 6]], "14": [[14, 8, 7, 2, 0], [14, 8, 7, 14, 8, 7, 2, 0], [14, 8, 7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0], [14, 8, 7, 14, 8, 7, 8, 7, 8, 7, 14, 8, 7, 14, 8, 7, 2, 0]], "15": [[15, 6], [15, 19, 15, 6], [15, 13, 9, 11, 9, 19, 15, 19, 15, 6], [15, 17, 15, 13, 9, 11, 9, 19, 15, 19, 15, 6]], "16": [[16, 10, 5]], "17": [[17, 15, 13, 9, 11, 9, 19, 15, 19, 15, 6]], "18": [[18]], "19": [[19, 15, 6], [19, 15, 19, 15, 6], [19, 15, 17, 15, 13, 9, 11, 9, 19, 15, 19, 15, 6]], "23": [[23, 16, 10, 5]]}}
{"id": 19190, "code": "int N = 5;\nif (N % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint cnt = 0;\nfor (int i = 1; i < N; i++) {\nif (N >= 2 * (Math.pow(5, i))) {\ncnt += N / (2 * (int)(Math.pow(5, i)));}\nelse {\nbreak;}}\nSystem.out.println(cnt);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "cnt", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "if", "(", "N", ">=", "2", "*", "(", "Math", ".", "pow", "(", "5", ",", "i", ")", ")", ")", "{", "<7>", "cnt", "+=", "N", "/", "(", "2", "*", "(", "int", ")", "(", "Math", ".", "pow", "(", "5", ",", "i", ")", ")", ")", ";", "}", "<8>", "else", "{", "<9>", "break", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}, {"line": 2, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 2900, "code": "String s = \"35753\";\nint min_v = 9999;\nfor (int i = 0; i < s.length() - 2; i++) {\nint n = Integer.parseInt(s.substring(i, i + 3));\nmin_v = Math.min(min_v, Math.abs(753 - n));}\nSystem.out.println(min_v);", "code_tokens": ["<0>", "String", "s", "=", "\"35753\"", ";", "<1>", "int", "min_v", "=", "9999", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "n", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "min_v", "=", "Math", ".", "min", "(", "min_v", ",", "Math", ".", "abs", "(", "753", "-", "n", ")", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "min_v", ")", ";"], "trace": [{"line": 0, "state": [["s", "35753"]]}, {"line": 1, "state": [["s", "35753"], ["min_v", "9999"]]}, {"line": 2, "state": [["s", "35753"], ["min_v", "9999"], ["i", "0"]]}, {"line": 3, "state": [["s", "35753"], ["min_v", "9999"], ["i", "0"], ["n", "357"]]}, {"line": 4, "state": [["s", "35753"], ["min_v", "396"], ["i", "0"], ["n", "357"]]}, {"line": 2, "state": [["s", "35753"], ["min_v", "396"], ["i", "1"], ["n", "357"]]}, {"line": 3, "state": [["s", "35753"], ["min_v", "396"], ["i", "1"], ["n", "575"]]}, {"line": 4, "state": [["s", "35753"], ["min_v", "178"], ["i", "1"], ["n", "575"]]}, {"line": 2, "state": [["s", "35753"], ["min_v", "178"], ["i", "2"], ["n", "575"]]}, {"line": 3, "state": [["s", "35753"], ["min_v", "178"], ["i", "2"], ["n", "753"]]}, {"line": 4, "state": [["s", "35753"], ["min_v", "0"], ["i", "2"], ["n", "753"]]}, {"line": 2, "state": [["s", "35753"], ["min_v", "0"], ["i", "2"], ["n", "753"]]}, {"line": 5, "state": [["s", "35753"], ["min_v", "0"], ["i", "2"], ["n", "753"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 7893, "code": "int n = 4, k = 3;\nint[] a = {2, 3, 1, 4};\nn -= 1;\nk -= 1;\nSystem.out.println((int) Math.ceil((double) n / k));", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "n", "-=", "1", ";", "<3>", "k", "-=", "1", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "k", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "4"], ["k", "3"]]}, {"line": 2, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 4, "state": [["n", "3"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 5, "state": [["n", "3"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 1]], "5": [[5, 4, 1]]}}
{"id": 5406, "code": "int N = 100;\nN += 1;\nSystem.out.println(N / 2);", "code_tokens": ["<0>", "int", "N", "=", "100", ";", "<1>", "N", "+=", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "N", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"]]}, {"line": 1, "state": [["N", "101"]]}, {"line": 2, "state": [["N", "101"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4912, "code": "String s = \"internationalization\";\nchar fir = s.charAt(0);\nchar las = s.charAt(s.length() - 1);\ns = s.substring(1);\ns = s.substring(0, s.length() - 1);\nSystem.out.println(fir + String.valueOf(s.length()) + las);", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "char", "fir", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "las", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "s", "=", "s", ".", "substring", "(", "1", ")", ";", "<4>", "s", "=", "s", ".", "substring", "(", "0", ",", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "fir", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", ")", "+", "las", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["fir", "0"]]}, {"line": 2, "state": [["s", "internationalization"], ["fir", "1"], ["las", "n"]]}, {"line": 3, "state": [["s", "nternationalization"], ["fir", "2"], ["las", "n"]]}, {"line": 4, "state": [["s", "nternationalizatio"], ["fir", "2"], ["las", "n"]]}, {"line": 5, "state": [["s", "nternationalizatio"], ["fir", "2"], ["las", "n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 6323, "code": "int n = 2;\nint[] a = {1, 5};\nint[] b = {2, 4};\nint[] c = {3, 6};\nint[] ab = new int[n];\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nab[i] = (i == 0 ? 0 : ab[i - 1]) + bisectLeft(a, b[i]);}\nfor (int i = 0; i < n; i++) {\nint tmp = bisectLeft(b, c[i]);\nif (tmp != 0) {\nans += ab[tmp - 1];}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "[", "]", "ab", "=", "new", "int", "[", "n", "]", ";", "<5>", "int", "ans", "=", "0", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "ab", "[", "i", "]", "=", "(", "i", "==", "0", "?", "0", ":", "ab", "[", "i", "-", "1", "]", ")", "+", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", ";", "}", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<9>", "int", "tmp", "=", "bisectLeft", "(", "b", ",", "c", "[", "i", "]", ")", ";", "<10>", "if", "(", "tmp", "!=", "0", ")", "{", "<11>", "ans", "+=", "ab", "[", "tmp", "-", "1", "]", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"]]}, {"line": 5, "state": []}, {"line": 5, "state": []}, {"line": 5, "state": [["i", "0"]]}, {"line": 5, "state": [["i", "1"]]}, {"line": 5, "state": [["i", "1"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 0 , 0 ]"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 0 , 0 ]"], ["ans", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 0 , 0 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 0 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 0 ]"], ["ans", "0"], ["i", "1"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "0"], ["i", "1"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "0"], ["i", "1"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "0"], ["i", "0"], ["tmp", "1"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "0"], ["i", "0"], ["tmp", "1"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "1"], ["i", "0"], ["tmp", "1"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "1"], ["i", "1"], ["tmp", "1"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "1"], ["i", "1"], ["tmp", "2"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "1"], ["i", "1"], ["tmp", "2"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "3"], ["i", "1"], ["tmp", "2"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "3"], ["i", "1"], ["tmp", "2"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 1 , 5 ]"], ["b", "[ 2 , 4 ]"], ["c", "[ 3 , 6 ]"], ["ab", "[ 1 , 2 ]"], ["ans", "3"], ["i", "1"], ["tmp", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 1], [5, 1], [5, 1], [5, 1], [5, 1]], "6": [[6]], "7": [[7, 5, 1], [7, 8, 7, 5, 1], [7, 8, 7, 8, 7, 5, 1]], "8": [[8, 7, 5, 1], [8, 7, 8, 7, 5, 1]], "9": [[9, 7, 8, 7, 8, 7, 5, 1], [9, 10, 9, 7, 8, 7, 8, 7, 5, 1], [9, 10, 9, 10, 9, 7, 8, 7, 8, 7, 5, 1]], "10": [[10, 9, 7, 8, 7, 8, 7, 5, 1], [10, 9, 10, 9, 7, 8, 7, 8, 7, 5, 1]], "11": [[11, 10, 9, 7, 8, 7, 8, 7, 5, 1], [11, 10, 9, 10, 9, 7, 8, 7, 8, 7, 5, 1]], "12": [[12, 11, 10, 9, 7, 8, 7, 8, 7, 5, 1], [12, 11, 10, 9, 10, 9, 7, 8, 7, 8, 7, 5, 1]], "13": [[13, 12, 11, 10, 9, 10, 9, 7, 8, 7, 8, 7, 5, 1]]}}
{"id": 15787, "code": "int a = 13, b = 3, c = 1;\nSystem.out.println((a - c) / (b + c));", "code_tokens": ["<0>", "int", "a", "=", "13", ",", "b", "=", "3", ",", "c", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "c", ")", "/", "(", "b", "+", "c", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "13"], ["b", "3"], ["c", "1"]]}, {"line": 1, "state": [["a", "13"], ["b", "3"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 14721, "code": "int n = 1, p = 1;\nint[] a = {50};\nint[] d = {0, 0};\nfor (int i = 0; i < n; i++) {\nd[a[i] % 2]++;}\nlong q = (long) Math.pow(2, d[0]);\nlong ans = 0;\nint m = d[1];\nlong[] f = new long[m + 1];f[0] = 1; // f[0] is 1\nfor (int i = 1; i <= m; i++) {\nf[i] = f[i - 1] * i;}\nfor (int i = 0; i <= m; i++) {\nif (i % 2 != p) continue;\nans += q * f[m] / f[i] / f[m - i];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ",", "p", "=", "1", ";", "<1>", "int", "[", "]", "a", "=", "{", "50", "}", ";", "<2>", "int", "[", "]", "d", "=", "{", "0", ",", "0", "}", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "d", "[", "a", "[", "i", "]", "%", "2", "]", "++", ";", "}", "<5>", "long", "q", "=", "(", "long", ")", "Math", ".", "pow", "(", "2", ",", "d", "[", "0", "]", ")", ";", "<6>", "long", "ans", "=", "0", ";", "<7>", "int", "m", "=", "d", "[", "1", "]", ";", "<8>", "long", "[", "]", "f", "=", "new", "long", "[", "m", "+", "1", "]", ";", "f", "[", "0", "]", "=", "1", ";", "// f[0] is 1", "<9>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "m", ";", "i", "++", ")", "{", "<10>", "f", "[", "i", "]", "=", "f", "[", "i", "-", "1", "]", "*", "i", ";", "}", "<11>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "m", ";", "i", "++", ")", "{", "<12>", "if", "(", "i", "%", "2", "!=", "p", ")", "continue", ";", "<13>", "ans", "+=", "q", "*", "f", "[", "m", "]", "/", "f", "[", "i", "]", "/", "f", "[", "m", "-", "i", "]", ";", "}", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"], ["p", "1"]]}, {"line": 1, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"]]}, {"line": 2, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"]]}, {"line": 3, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"]]}, {"line": 4, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"]]}, {"line": 3, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"]]}, {"line": 5, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"]]}, {"line": 6, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"]]}, {"line": 7, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"]]}, {"line": 8, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"], ["f", "[ 1 ]"]]}, {"line": 9, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"], ["f", "[ 1 ]"]]}, {"line": 11, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"], ["f", "[ 1 ]"]]}, {"line": 12, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"], ["f", "[ 1 ]"]]}, {"line": 11, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"], ["f", "[ 1 ]"]]}, {"line": 14, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["d", "{ 0"], ["i", "0"], ["q", "2"], ["ans", "0"], ["m", "0"], ["f", "[ 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0]], "4": [[4, 3, 0]], "5": [[5, 4, 3, 0]], "6": [[6]], "7": [[7, 5, 4, 3, 0]], "8": [[8]], "9": [[9, 7, 5, 4, 3, 0]], "11": [[11, 9, 7, 5, 4, 3, 0], [11, 12, 11, 9, 7, 5, 4, 3, 0]], "12": [[12, 11, 9, 7, 5, 4, 3, 0]], "14": [[14, 6]]}}
{"id": 4294, "code": "int H_1 = 10, M_1 = 0, H_2 = 12, M_2 = 0, K = 120;\nint time_1 = H_1 * 60 + M_1;\nint time_2 = H_2 * 60 + M_2;\nSystem.out.println(time_2 - time_1 - K);", "code_tokens": ["<0>", "int", "H_1", "=", "10", ",", "M_1", "=", "0", ",", "H_2", "=", "12", ",", "M_2", "=", "0", ",", "K", "=", "120", ";", "<1>", "int", "time_1", "=", "H_1", "*", "60", "+", "M_1", ";", "<2>", "int", "time_2", "=", "H_2", "*", "60", "+", "M_2", ";", "<3>", "System", ".", "out", ".", "println", "(", "time_2", "-", "time_1", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H_1", "10"], ["M_1", "0"], ["H_2", "12"], ["M_2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H_1", "10"], ["M_1", "0"], ["H_2", "12"], ["M_2", "0"], ["K", "120"], ["time_1", "600"]]}, {"line": 2, "state": [["H_1", "10"], ["M_1", "0"], ["H_2", "12"], ["M_2", "0"], ["K", "120"], ["time_1", "600"], ["time_2", "720"]]}, {"line": 3, "state": [["H_1", "10"], ["M_1", "0"], ["H_2", "12"], ["M_2", "0"], ["K", "120"], ["time_1", "600"], ["time_2", "720"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 5315, "code": "int N = 2;\nSystem.out.println((N + 1) / 2);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "1", ")", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"]]}, {"line": 1, "state": [["N", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6368, "code": "int n = 3;\nint[] a = {1, 1, 1};\nint[] b = {2, 2, 2};\nint[] c = {3, 3, 3};\nint[] d = new int[n + 1];d[0] = 0;\nint[] e = new int[n];\nfor (int i = 0; i < n; i++) {\nd[i + 1] = bisectLeft(a, b[i]) + d[i];\ne[i] = bisectLeft(b, c[i]);}\nint ans = 0;\nfor (int i : e) {\nans += d[i];}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "[", "]", "d", "=", "new", "int", "[", "n", "+", "1", "]", ";", "d", "[", "0", "]", "=", "0", ";", "<5>", "int", "[", "]", "e", "=", "new", "int", "[", "n", "]", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "d", "[", "i", "+", "1", "]", "=", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", "+", "d", "[", "i", "]", ";", "<8>", "e", "[", "i", "]", "=", "bisectLeft", "(", "b", ",", "c", "[", "i", "]", ")", ";", "}", "<9>", "int", "ans", "=", "0", ";", "<10>", "for", "(", "int", "i", ":", "e", ")", "{", "<11>", "ans", "+=", "d", "[", "i", "]", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"]]}, {"line": 2, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 ]"]]}, {"line": 6, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 ]"], ["e", "[ ]"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 ]"], ["e", "[ ]"], ["i", "0"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 ]"], ["e", "[ ]"], ["i", "0"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 ]"], ["e", "[ 3 ]"], ["i", "0"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 ]"], ["e", "[ 3 ]"], ["i", "1"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 ]"], ["e", "[ 3 ]"], ["i", "1"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 ]"], ["e", "[ 3 , 3 ]"], ["i", "1"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 ]"], ["e", "[ 3 , 3 ]"], ["i", "2"]]}, {"line": 8, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 ]"], ["i", "2"]]}, {"line": 9, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "2"]]}, {"line": 7, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "2"], ["ans", "0"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "0"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "9"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "9"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "18"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "18"]]}, {"line": 12, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "27"]]}, {"line": 11, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "27"]]}, {"line": 13, "state": [["n", "3"], ["a", "[ 1 , 1 , 1 ]"], ["b", "[ 2 , 2 , 2 ]"], ["c", "[ 3 , 3 , 3 ]"], ["d", "[ 0 , 3 , 6 , 9 ]"], ["e", "[ 3 , 3 , 3 ]"], ["i", "3"], ["ans", "27"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 1], [7, 9, 8, 7, 1], [7, 9, 8, 7, 9, 8, 7, 1], [7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1]], "8": [[8, 7, 1], [8, 7, 9, 8, 7, 1], [8, 7, 9, 8, 7, 9, 8, 7, 1]], "9": [[9, 8, 7, 1], [9, 8, 7, 9, 8, 7, 1], [9, 8, 7, 9, 8, 7, 9, 8, 7, 1]], "10": [[10]], "11": [[11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1], [11, 12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1], [11, 12, 11, 12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1], [11, 12, 11, 12, 11, 12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1]], "12": [[12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1], [12, 11, 12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1], [12, 11, 12, 11, 12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1]], "13": [[13, 12, 11, 12, 11, 12, 11, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 1]]}}
{"id": 10719, "code": "String s = \"level\";\nint n = s.length();\nif (!s.equals(new StringBuilder(s).reverse().toString())) {\nSystem.out.println(\"No\");\n} else if (!s.substring(0, (n - 1) / 2).equals(new StringBuilder(s.substring((n - 1) / 2 - 1, (n - 1) / 2)).reverse().toString())) {\nSystem.out.println(\"No\");\n} else if (!s.substring((n + 3) / 2 - 1, n).equals(new StringBuilder(s.substring(n - 1, (n + 3) / 2 - 2)).reverse().toString())) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "String", "s", "=", "\"level\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "if", "(", "!", "s", ".", "equals", "(", "new", "StringBuilder", "(", "s", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<4>", "}", "else", "if", "(", "!", "s", ".", "substring", "(", "0", ",", "(", "n", "-", "1", ")", "/", "2", ")", ".", "equals", "(", "new", "StringBuilder", "(", "s", ".", "substring", "(", "(", "n", "-", "1", ")", "/", "2", "-", "1", ",", "(", "n", "-", "1", ")", "/", "2", ")", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<6>", "}", "else", "if", "(", "!", "s", ".", "substring", "(", "(", "n", "+", "3", ")", "/", "2", "-", "1", ",", "n", ")", ".", "equals", "(", "new", "StringBuilder", "(", "s", ".", "substring", "(", "n", "-", "1", ",", "(", "n", "+", "3", ")", "/", "2", "-", "2", ")", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<8>", "}", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "level"]]}, {"line": 1, "state": [["s", "level"], ["n", "5"]]}, {"line": 2, "state": [["s", "level"], ["n", "5"]]}, {"line": 4, "state": [["s", "level"], ["n", "5"]]}, {"line": 5, "state": [["s", "level"], ["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5]]}}
{"id": 11784, "code": "int M1 = 11, D1 = 16;\nint M2 = 11, D2 = 17;\nif (M1 == M2) {\nSystem.out.println(\"0\");}\nelse {\nSystem.out.println(\"1\");}", "code_tokens": ["<0>", "int", "M1", "=", "11", ",", "D1", "=", "16", ";", "<1>", "int", "M2", "=", "11", ",", "D2", "=", "17", ";", "<2>", "if", "(", "M1", "==", "M2", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["M1", "11"], ["D1", "16"]]}, {"line": 1, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 2, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}, {"line": 3, "state": [["M1", "11"], ["D1", "16"], ["M2", "11"], ["D2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 12162, "code": "int m1 = 11, d1 = 30;\nint m2 = 12, d2 = 1;\nif (m1 != 12) {\nif (m2 == m1 + 1) {\nSystem.out.println(1);}\nelse {\nSystem.out.println(0);}}\nelse {\nif (m2 == 1) {\nSystem.out.println(1);}\nelse {\nSystem.out.println(0);}}", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "30", ";", "<1>", "int", "m2", "=", "12", ",", "d2", "=", "1", ";", "<2>", "if", "(", "m1", "!=", "12", ")", "{", "<3>", "if", "(", "m2", "==", "m1", "+", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}", "<7>", "else", "{", "<8>", "if", "(", "m2", "==", "1", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "30"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 4, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4]]}}
{"id": 14305, "code": "N = 9\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nans = 1\nb= [a[0]]\nif N > 1:\n    for i in range(1,N):\n        if a[i] != a[i-1]:\n            b.append(a[i])\n    if b[0] < b[1]:\n        up_down = 1\n    else:\n        up_down = -1\ni = 1\nwhile i < len(b):\n    if up_down*(b[i] - b[i-1]) < 0:\n        ans += 1\n        if b[i] < b[min(len(b)-1,i+1)]:\n            up_down = 1\n        else:\n            up_down = -1\n        i += 2\n    else:\n        i += 1\nprint(ans)", "code_tokens": ["<0>", "N", "=", "9", "<1>", "a", "=", "[", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "]", "<2>", "ans", "=", "1", "<3>", "b", "=", "[", "a", "[", "0", "]", "]", "<4>", "if", "N", ">", "1", ":", "<5>", "<indent>", "for", "i", "in", "range", "(", "1", ",", "N", ")", ":", "<6>", "<indent>", "if", "a", "[", "i", "]", "!=", "a", "[", "i", "-", "1", "]", ":", "<7>", "<indent>", "b", ".", "append", "(", "a", "[", "i", "]", ")", "<8>", "<dedent>", "<dedent>", "if", "b", "[", "0", "]", "<", "b", "[", "1", "]", ":", "<9>", "<indent>", "up_down", "=", "1", "<10>", "<dedent>", "else", ":", "<11>", "<indent>", "up_down", "=", "-", "1", "<12>", "<dedent>", "<dedent>", "i", "=", "1", "<13>", "while", "i", "<", "len", "(", "b", ")", ":", "<14>", "<indent>", "if", "up_down", "*", "(", "b", "[", "i", "]", "-", "b", "[", "i", "-", "1", "]", ")", "<", "0", ":", "<15>", "<indent>", "ans", "+=", "1", "<16>", "if", "b", "[", "i", "]", "<", "b", "[", "min", "(", "len", "(", "b", ")", "-", "1", ",", "i", "+", "1", ")", "]", ":", "<17>", "<indent>", "up_down", "=", "1", "<18>", "<dedent>", "else", ":", "<19>", "<indent>", "up_down", "=", "-", "1", "<20>", "<dedent>", "i", "+=", "2", "<21>", "<dedent>", "else", ":", "<22>", "<indent>", "i", "+=", "1", "<23>", "<dedent>", "<dedent>", "print", "(", "ans", ")"], "trace": [{"line": 0, "state": [["N", "9"]]}, {"line": 1, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 3, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 ]"]]}, {"line": 4, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 ]"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 ]"], ["i", "1"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 ]"], ["i", "1"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 ]"], ["i", "2"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 ]"], ["i", "2"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 ]"], ["i", "3"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 ]"], ["i", "3"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 ]"], ["i", "4"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 ]"], ["i", "4"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 ]"], ["i", "5"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 ]"], ["i", "6"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 ]"], ["i", "6"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 ]"], ["i", "7"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 ]"], ["i", "8"]]}, {"line": 6, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 ]"], ["i", "8"]]}, {"line": 7, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"]]}, {"line": 5, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"]]}, {"line": 8, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"]]}, {"line": 9, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "1"]]}, {"line": 12, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["up_down", "1"]]}, {"line": 13, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["up_down", "1"]]}, {"line": 14, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["up_down", "1"]]}, {"line": 22, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["up_down", "1"]]}, {"line": 13, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["up_down", "1"]]}, {"line": 14, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["up_down", "1"]]}, {"line": 15, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["up_down", "1"]]}, {"line": 16, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["up_down", "1"]]}, {"line": 17, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["up_down", "1"]]}, {"line": 20, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["up_down", "1"]]}, {"line": 13, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["up_down", "1"]]}, {"line": 14, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["up_down", "1"]]}, {"line": 15, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["up_down", "1"]]}, {"line": 16, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["up_down", "1"]]}, {"line": 17, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["up_down", "1"]]}, {"line": 20, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["up_down", "1"]]}, {"line": 13, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["up_down", "1"]]}, {"line": 14, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["up_down", "1"]]}, {"line": 15, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["up_down", "1"]]}, {"line": 16, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["up_down", "1"]]}, {"line": 17, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["up_down", "1"]]}, {"line": 20, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "1"]]}, {"line": 13, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "1"]]}, {"line": 14, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "1"]]}, {"line": 15, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "1"]]}, {"line": 16, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "1"]]}, {"line": 19, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["up_down", "-1"]]}, {"line": 20, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "10"], ["up_down", "-1"]]}, {"line": 13, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "10"], ["up_down", "-1"]]}, {"line": 23, "state": [["N", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["b", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "10"], ["up_down", "-1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 0]], "5": [[5, 4, 0], [5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 7, 6, 5, 4, 0], [6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "9": [[9]], "12": [[12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "13": [[13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "14": [[14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "15": [[15, 2], [15, 2], [15, 2], [15, 2]], "16": [[16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "17": [[17, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [17, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [17, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "19": [[19, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "20": [[20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0], [20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 20, 16, 14, 13, 22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "22": [[22, 14, 13, 12, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 4, 0]], "23": [[23, 15, 2]]}}
{"id": 8359, "code": "int n = 1;\nint[] a1 = {2};\nint[] a2 = {3};\nint ans = sum(a1) + a2[n - 1];\nint sum_a = ans;\nfor (int i = 0; i < n - 1; i++) {\nsum_a = sum_a - a1[n - 1 - i] + a2[n - 2 - i];\nans = Math.max(ans, sum_a);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "a1", "=", "{", "2", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "3", "}", ";", "<3>", "int", "ans", "=", "sum", "(", "a1", ")", "+", "a2", "[", "n", "-", "1", "]", ";", "<4>", "int", "sum_a", "=", "ans", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<6>", "sum_a", "=", "sum_a", "-", "a1", "[", "n", "-", "1", "-", "i", "]", "+", "a2", "[", "n", "-", "2", "-", "i", "]", ";", "<7>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "sum_a", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a1", "[ 2 ]"]]}, {"line": 2, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"]]}, {"line": 3, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"]]}, {"line": 4, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"], ["sum_a", "5"]]}, {"line": 5, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"], ["sum_a", "5"]]}, {"line": 8, "state": [["n", "1"], ["a1", "[ 2 ]"], ["a2", "[ 3 ]"], ["ans", "5"], ["sum_a", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0]], "8": [[8, 4, 3, 2, 1, 0]]}}
{"id": 1917, "code": "int n = 100, a = 100, b = 100;\nint ans1 = Math.min(a, b);\nint ans2 = Math.max(0, a + b - n);\nSystem.out.println(String.format(\"%d %d\", ans1, ans2));", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "ans1", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "ans2", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "ans1", ",", "ans2", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ans1", "100"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ans1", "100"], ["ans2", "100"]]}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ans1", "100"], ["ans2", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13303, "code": "String text = \"abcde,fghihgf,edcba\";\nSystem.out.println(text.replace(\",\", \" \"));", "code_tokens": ["<0>", "String", "text", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "text", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ")", ";"], "trace": [{"line": 0, "state": [["text", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["text", "abcde , fghihgf , edcba"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1053, "code": "int N = 750;\nint now = 111;\nwhile (now < N) {\nnow += 111;}\nSystem.out.println(now);", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "int", "now", "=", "111", ";", "<2>", "while", "(", "now", "<", "N", ")", "{", "<3>", "now", "+=", "111", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "now", ")", ";"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": [["N", "750"], ["now", "111"]]}, {"line": 2, "state": [["N", "750"], ["now", "111"]]}, {"line": 3, "state": [["N", "750"], ["now", "222"]]}, {"line": 2, "state": [["N", "750"], ["now", "222"]]}, {"line": 3, "state": [["N", "750"], ["now", "333"]]}, {"line": 2, "state": [["N", "750"], ["now", "333"]]}, {"line": 3, "state": [["N", "750"], ["now", "444"]]}, {"line": 2, "state": [["N", "750"], ["now", "444"]]}, {"line": 3, "state": [["N", "750"], ["now", "555"]]}, {"line": 2, "state": [["N", "750"], ["now", "555"]]}, {"line": 3, "state": [["N", "750"], ["now", "666"]]}, {"line": 2, "state": [["N", "750"], ["now", "666"]]}, {"line": 3, "state": [["N", "750"], ["now", "777"]]}, {"line": 2, "state": [["N", "750"], ["now", "777"]]}, {"line": 4, "state": [["N", "750"], ["now", "777"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "4": [[4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]]}}
{"id": 12672, "code": "int x = 5;\nif (x == 7) {\nSystem.out.println(\"YES\");}\nelse if (x == 5) {\nSystem.out.println(\"YES\");}\nelse if (x == 3) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "x", "=", "5", ";", "<1>", "if", "(", "x", "==", "7", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "if", "(", "x", "==", "5", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<5>", "else", "if", "(", "x", "==", "3", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "5"]]}, {"line": 1, "state": [["x", "5"]]}, {"line": 3, "state": [["x", "5"]]}, {"line": 4, "state": [["x", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4]]}}
{"id": 12071, "code": "System.out.println(!(\"11 16\".substring(0, 2).equals(\"11 17\".substring(0, 2))));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "!", "(", "\"11 16\"", ".", "substring", "(", "0", ",", "2", ")", ".", "equals", "(", "\"11 17\"", ".", "substring", "(", "0", ",", "2", ")", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 5044, "code": "String S = \"internationalization\";\nString A = String.valueOf(S.length() - 2);\nSystem.out.println(S.charAt(0) + A + S.charAt(S.length() - 1));", "code_tokens": ["<0>", "String", "S", "=", "\"internationalization\"", ";", "<1>", "String", "A", "=", "String", ".", "valueOf", "(", "S", ".", "length", "(", ")", "-", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ".", "charAt", "(", "0", ")", "+", "A", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "internationalization"]]}, {"line": 1, "state": [["S", "internationalization"], ["A", "18"]]}, {"line": 2, "state": [["S", "internationalization"], ["A", "18"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11877, "code": "String M1 = \"11\";String D1 = \"30\";\nString M2 = \"12\";String D2 = \"1\";\nM1 = Integer.parseInt(M1);\nM2 = Integer.parseInt(M2);\nif (M1 != M2) {\nSystem.out.println(\"1\");}\nelse {\nSystem.out.println(\"0\");}", "code_tokens": ["<0>", "String", "M1", "=", "\"11\"", ";", "String", "D1", "=", "\"30\"", ";", "<1>", "String", "M2", "=", "\"12\"", ";", "String", "D2", "=", "\"1\"", ";", "<2>", "M1", "=", "Integer", ".", "parseInt", "(", "M1", ")", ";", "<3>", "M2", "=", "Integer", ".", "parseInt", "(", "M2", ")", ";", "<4>", "if", "(", "M1", "!=", "M2", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["M1", "11"], ["D1", "30"]]}, {"line": 1, "state": [["M1", "11"], ["D1", "30"], ["M2", "12"], ["D2", "1"]]}, {"line": 2, "state": [["M1", "11"], ["D1", "30"], ["M2", "12"], ["D2", "1"]]}, {"line": 3, "state": [["M1", "11"], ["D1", "30"], ["M2", "12"], ["D2", "1"]]}, {"line": 4, "state": [["M1", "11"], ["D1", "30"], ["M2", "12"], ["D2", "1"]]}, {"line": 5, "state": [["M1", "11"], ["D1", "30"], ["M2", "12"], ["D2", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]], "5": [[5]]}}
{"id": 2685, "code": "HashSet<Integer> n = new HashSet<>();n.add(1);n.add(4);n.add(9);n.add(7);\nif (n.equals(new HashSet<>(java.util.Arrays.asList(1, 7, 9, 4)))) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "HashSet", "<", "Integer", ">", "n", "=", "new", "HashSet", "<", ">", "(", ")", ";", "n", ".", "add", "(", "1", ")", ";", "n", ".", "add", "(", "4", ")", ";", "n", ".", "add", "(", "9", ")", ";", "n", ".", "add", "(", "7", ")", ";", "<1>", "if", "(", "n", ".", "equals", "(", "new", "HashSet", "<", ">", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "1", ",", "7", ",", "9", ",", "4", ")", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 1, "state": [["n", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 2, "state": [["n", "{ 1 , 4 , 9 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 8047, "code": "int n = 3, k = 3;\nint[] A = {1, 2, 3};\nn -= k;\nk -= 1;\nint ans = 1;\nans += (n + k - 1) / k;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "n", "-=", "k", ";", "<3>", "k", "-=", "1", ";", "<4>", "int", "ans", "=", "1", ";", "<5>", "ans", "+=", "(", "n", "+", "k", "-", "1", ")", "/", "k", ";", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "0"], ["k", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["n", "0"], ["k", "2"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 4, "state": [["n", "0"], ["k", "2"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 5, "state": [["n", "0"], ["k", "2"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 6, "state": [["n", "0"], ["k", "2"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4]], "5": [[5, 4, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 0]]}}
{"id": 4852, "code": "String a = \"internationalization\";\nSystem.out.println(a.charAt(0) + String.valueOf(a.length() - 2) + a.charAt(a.length() - 1));", "code_tokens": ["<0>", "String", "a", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "a", ".", "length", "(", ")", "-", "2", ")", "+", "a", ".", "charAt", "(", "a", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "internationalization"]]}, {"line": 1, "state": [["a", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 14890, "code": "int n = 3;int p = 0;\nint[] a = {1, 1, 1};\nint odd = 0;\nint even = 0;\nfor (int i = 0; i < n; i++) {\nif (a[i] % 2 == 0) {\neven++;}\nelse {\nodd++;}}\nint ans = 0;\nint t = 1;\nwhile (t <= odd) {\nBigInteger res = factorial(odd).divide(factorial(t).multiply(factorial(odd - t)));\nt += 2;\nif (even != 0) {\nint w = 0;\nwhile (w <= even) {\nBigInteger res1 = factorial(even).divide(factorial(w).multiply(factorial(even - w)));\nw++;\nans += res.intValue() * res1.intValue();}}\nelse {\nans += res.intValue();}}\nif (p == 1) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(Math.pow(2, n) - ans);}", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "int", "p", "=", "0", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "odd", "=", "0", ";", "<3>", "int", "even", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "a", "[", "i", "]", "%", "2", "==", "0", ")", "{", "<6>", "even", "++", ";", "}", "<7>", "else", "{", "<8>", "odd", "++", ";", "}", "}", "<9>", "int", "ans", "=", "0", ";", "<10>", "int", "t", "=", "1", ";", "<11>", "while", "(", "t", "<=", "odd", ")", "{", "<12>", "BigInteger", "res", "=", "factorial", "(", "odd", ")", ".", "divide", "(", "factorial", "(", "t", ")", ".", "multiply", "(", "factorial", "(", "odd", "-", "t", ")", ")", ")", ";", "<13>", "t", "+=", "2", ";", "<14>", "if", "(", "even", "!=", "0", ")", "{", "<15>", "int", "w", "=", "0", ";", "<16>", "while", "(", "w", "<=", "even", ")", "{", "<17>", "BigInteger", "res1", "=", "factorial", "(", "even", ")", ".", "divide", "(", "factorial", "(", "w", ")", ".", "multiply", "(", "factorial", "(", "even", "-", "w", ")", ")", ")", ";", "<18>", "w", "++", ";", "<19>", "ans", "+=", "res", ".", "intValue", "(", ")", "*", "res1", ".", "intValue", "(", ")", ";", "}", "}", "<20>", "else", "{", "<21>", "ans", "+=", "res", ".", "intValue", "(", ")", ";", "}", "}", "<22>", "if", "(", "p", "==", "1", ")", "{", "<23>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<24>", "else", "{", "<25>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "n", ")", "-", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "3"], ["p", "0"]]}, {"line": 2, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "0"]]}, {"line": 4, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "0"], ["even", "0"]]}, {"line": 5, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "0"], ["even", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "0"], ["even", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "1"], ["even", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "1"], ["even", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "1"], ["even", "0"], ["i", "1"]]}, {"line": 9, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "2"], ["even", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "2"], ["even", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "2"], ["even", "0"], ["i", "2"]]}, {"line": 9, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"]]}, {"line": 5, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "0"]]}, {"line": 11, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "0"], ["t", "1"]]}, {"line": 12, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "0"], ["t", "1"]]}, {"line": 13, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "0"], ["t", "1"], ["res", "3"]]}, {"line": 14, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "0"], ["t", "3"], ["res", "3"]]}, {"line": 15, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "0"], ["t", "3"], ["res", "3"]]}, {"line": 22, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "3"], ["t", "3"], ["res", "3"]]}, {"line": 12, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "3"], ["t", "3"], ["res", "3"]]}, {"line": 13, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "3"], ["t", "3"], ["res", "1"]]}, {"line": 14, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "3"], ["t", "5"], ["res", "1"]]}, {"line": 15, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "3"], ["t", "5"], ["res", "1"]]}, {"line": 22, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "4"], ["t", "5"], ["res", "1"]]}, {"line": 12, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "4"], ["t", "5"], ["res", "1"]]}, {"line": 23, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "4"], ["t", "5"], ["res", "1"]]}, {"line": 26, "state": [["n", "3"], ["p", "0"], ["a", "[ 1 , 1 , 1 ]"], ["odd", "3"], ["even", "0"], ["i", "2"], ["ans", "4"], ["t", "5"], ["res", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 6, 5, 1], [5, 6, 5, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 6, 5, 1], [6, 5, 6, 5, 6, 5, 1]], "9": [[9, 3], [9, 3], [9, 3]], "10": [[10]], "11": [[11]], "12": [[12, 11, 9, 3], [12, 14, 13, 12, 11, 9, 3], [12, 14, 13, 12, 14, 13, 12, 11, 9, 3]], "13": [[13, 12, 11, 9, 3], [13, 12, 14, 13, 12, 11, 9, 3]], "14": [[14, 13, 12, 11, 9, 3], [14, 13, 12, 14, 13, 12, 11, 9, 3]], "15": [[15, 4], [15, 4]], "22": [[22, 13, 12, 11, 9, 3], [22, 13, 12, 14, 13, 12, 11, 9, 3]], "23": [[23, 1]], "26": [[26, 22, 13, 12, 14, 13, 12, 11, 9, 3]]}}
{"id": 1648, "code": "int N = 100, A = 100, B = 100;\nint ans1 = Math.min(A, B);\nint ans2 = Math.max(A + B - N, 0);\nSystem.out.println(ans1 + \" \" + ans2);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "ans1", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "ans2", "=", "Math", ".", "max", "(", "A", "+", "B", "-", "N", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans1", "+", "\" \"", "+", "ans2", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["ans1", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["ans1", "100"], ["ans2", "100"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["ans1", "100"], ["ans2", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 12691, "code": "int[] l = {1, 1, 1, 0, 1, 0, 1, 0, 1, 1};\nString result = \"YNEOS\";String output = result.substring(l[Integer.parseInt(\"6\")], result.length()).replaceAll(\".\", \"\").replaceAll(\"(?<=\\\\G.{2})\", \"\");System.out.println(output);", "code_tokens": ["<0>", "int", "[", "]", "l", "=", "{", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", "}", ";", "<1>", "String", "result", "=", "\"YNEOS\"", ";", "String", "output", "=", "result", ".", "substring", "(", "l", "[", "Integer", ".", "parseInt", "(", "\"6\"", ")", "]", ",", "result", ".", "length", "(", ")", ")", ".", "replaceAll", "(", "\".\"", ",", "\"\"", ")", ".", "replaceAll", "(", "\"(?<=\\\\G.{2})\"", ",", "\"\"", ")", ";", "System", ".", "out", ".", "println", "(", "output", ")", ";"], "trace": [{"line": 0, "state": [["l", "[ 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 ]"]]}, {"line": 1, "state": [["l", "[ 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1657, "code": "int n = 100, a = 100, b = 100;\nint max;if (a < b) {\nmax = a;\n} else {\nmax = b;}\nint min = (a + b) - n;\nif (min < 0) {\nmin = 0;}\nSystem.out.println(max + \" \" + min);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "max", ";", "if", "(", "a", "<", "b", ")", "{", "<2>", "max", "=", "a", ";", "<3>", "}", "else", "{", "<4>", "max", "=", "b", ";", "}", "<5>", "int", "min", "=", "(", "a", "+", "b", ")", "-", "n", ";", "<6>", "if", "(", "min", "<", "0", ")", "{", "<7>", "min", "=", "0", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "max", "+", "\" \"", "+", "min", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 4, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max", "100"]]}, {"line": 5, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max", "100"], ["min", "100"]]}, {"line": 6, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max", "100"], ["min", "100"]]}, {"line": 8, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max", "100"], ["min", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]], "6": [[6, 5, 4, 1, 0]], "8": [[8, 6, 5, 4, 1, 0]]}}
{"id": 3958, "code": "int X = 64146, Y = 123, Z = 456;\nif ((X - 2 * Z) % (Y + Z) >= Y) {\nSystem.out.println((X - 2 * Z) / (Y + Z) + 1);}\nelse {\nSystem.out.println((X - 2 * Z) / (Y + Z));}", "code_tokens": ["<0>", "int", "X", "=", "64146", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "if", "(", "(", "X", "-", "2", "*", "Z", ")", "%", "(", "Y", "+", "Z", ")", ">=", "Y", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "(", "X", "-", "2", "*", "Z", ")", "/", "(", "Y", "+", "Z", ")", "+", "1", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "(", "X", "-", "2", "*", "Z", ")", "/", "(", "Y", "+", "Z", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "64146"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "64146"], ["Y", "123"], ["Z", "456"]]}, {"line": 2, "state": [["X", "64146"], ["Y", "123"], ["Z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1883, "code": "int n = 10, a = 7, b = 5;\nint[] ans = {0, 0};\nans[0] = Math.min(a, b);\nans[1] = Math.max(0, a + b - n);\nSystem.out.println(ans[0] + \" \" + ans[1]);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "[", "]", "ans", "=", "{", "0", ",", "0", "}", ";", "<2>", "ans", "[", "0", "]", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<3>", "ans", "[", "1", "]", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", "[", "0", "]", "+", "\" \"", "+", "ans", "[", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ans", "[ 0 , 0 ]"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ans", "[ 5 , 0 ]"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ans", "[ 5 , 2 ]"]]}, {"line": 4, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["ans", "[ 5 , 2 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 10038, "code": "int N = 6;\nchar[] S = {')', ')', ')', '(', ')', ')'};\nint[] c = {0, 0};\nfor (char s : S) {\nif (s == '(') {\nc[0] += 1;}\nelse {\nif (c[0] > 0) {\nc[0] -= 1;}\nelse {\nc[1] += 1;}}}\nchar[] pre = new char[c[1]];for (int i = 0; i < c[1]; i++) {pre[i] = '(';}\nchar[] rear = new char[c[0]];for (int i = 0; i < c[0]; i++) {rear[i] = ')';}\nchar[] ans = new char[pre.length + S.length + rear.length];System.arraycopy(pre, 0, ans, 0, pre.length);System.arraycopy(S, 0, ans, pre.length, S.length);System.arraycopy(rear, 0, ans, pre.length + S.length, rear.length);\nSystem.out.println(String.valueOf(ans));", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "char", "[", "]", "S", "=", "{", "')'", ",", "')'", ",", "')'", ",", "'('", ",", "')'", ",", "')'", "}", ";", "<2>", "int", "[", "]", "c", "=", "{", "0", ",", "0", "}", ";", "<3>", "for", "(", "char", "s", ":", "S", ")", "{", "<4>", "if", "(", "s", "==", "'('", ")", "{", "<5>", "c", "[", "0", "]", "+=", "1", ";", "}", "<6>", "else", "{", "<7>", "if", "(", "c", "[", "0", "]", ">", "0", ")", "{", "<8>", "c", "[", "0", "]", "-=", "1", ";", "}", "<9>", "else", "{", "<10>", "c", "[", "1", "]", "+=", "1", ";", "}", "}", "}", "<11>", "char", "[", "]", "pre", "=", "new", "char", "[", "c", "[", "1", "]", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", "[", "1", "]", ";", "i", "++", ")", "{", "pre", "[", "i", "]", "=", "'('", ";", "}", "<12>", "char", "[", "]", "rear", "=", "new", "char", "[", "c", "[", "0", "]", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", "[", "0", "]", ";", "i", "++", ")", "{", "rear", "[", "i", "]", "=", "')'", ";", "}", "<13>", "char", "[", "]", "ans", "=", "new", "char", "[", "pre", ".", "length", "+", "S", ".", "length", "+", "rear", ".", "length", "]", ";", "System", ".", "arraycopy", "(", "pre", ",", "0", ",", "ans", ",", "0", ",", "pre", ".", "length", ")", ";", "System", ".", "arraycopy", "(", "S", ",", "0", ",", "ans", ",", "pre", ".", "length", ",", "S", ".", "length", ")", ";", "System", ".", "arraycopy", "(", "rear", ",", "0", ",", "ans", ",", "pre", ".", "length", "+", "S", ".", "length", ",", "rear", ".", "length", ")", ";", "<14>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"]]}, {"line": 2, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 0 ]"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 0 ]"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 0 ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 0 ]"], ["s", ")"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 1 ]"], ["s", ")"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 1 ]"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 1 ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 1 ]"], ["s", ")"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 2 ]"], ["s", ")"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 2 ]"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 2 ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 2 ]"], ["s", ")"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", ")"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", "("]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", "("]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 1 , 3 ]"], ["s", "("]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 1 , 3 ]"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 1 , 3 ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 1 , 3 ]"], ["s", ")"]]}, {"line": 8, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", ")"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", ")"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", ")"]]}, {"line": 7, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 3 ]"], ["s", ")"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 4 ]"], ["s", ")"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 4 ]"], ["s", ")"]]}, {"line": 11, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 4 ]"], ["s", ")"], ["pre", "[ ( , ( , ( , ( ]"]]}, {"line": 12, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 4 ]"], ["s", ")"], ["pre", "[ ( , ( , ( , ( ]"], ["rear", "[ ]"]]}, {"line": 13, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 4 ]"], ["s", ")"], ["pre", "[ ( , ( , ( , ( ]"], ["rear", "[ ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["c", "[ 0 , 4 ]"], ["s", ")"], ["pre", "[ ( , ( , ( , ( ]"], ["rear", "[ ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1]], "5": [[5, 10, 7, 10, 7, 10, 7, 2]], "7": [[7, 2], [7, 10, 7, 2], [7, 10, 7, 10, 7, 2], [7, 5, 10, 7, 10, 7, 10, 7, 2], [7, 8, 7, 5, 10, 7, 10, 7, 10, 7, 2]], "8": [[8, 7, 5, 10, 7, 10, 7, 10, 7, 2]], "10": [[10, 7, 2], [10, 7, 10, 7, 2], [10, 7, 10, 7, 10, 7, 2], [10, 7, 8, 7, 5, 10, 7, 10, 7, 10, 7, 2]], "11": [[11, 10, 7, 8, 7, 5, 10, 7, 10, 7, 10, 7, 2]], "12": [[12, 11, 10, 7, 8, 7, 5, 10, 7, 10, 7, 10, 7, 2]], "13": [[13, 12, 11, 10, 7, 8, 7, 5, 10, 7, 10, 7, 10, 7, 2]], "14": [[14, 13, 12, 11, 10, 7, 8, 7, 5, 10, 7, 10, 7, 10, 7, 2]]}}
{"id": 1417, "code": "int n = 750;\nString[] N = String.valueOf(n).split(\"\");\nString ans = \"\";\nString res = N[0];\nboolean mn = true;\nboolean bl = true;\nfor (String x : N) {\nif (Integer.parseInt(res) < Integer.parseInt(x)) {\nmn = false;}\nif (!x.equals(res)) {\nbl = false;}}\nif (bl) {\nSystem.out.println(n);}\nelse {\nif (!mn) {\nfor (int i = 0; i < N.length; i++) {\nans += (Integer.parseInt(res) + 1);}\nSystem.out.println(ans);}\nelse {\nfor (int i = 0; i < N.length; i++) {\nans += res;}\nSystem.out.println(ans);}}", "code_tokens": ["<0>", "int", "n", "=", "750", ";", "<1>", "String", "[", "]", "N", "=", "String", ".", "valueOf", "(", "n", ")", ".", "split", "(", "\"\"", ")", ";", "<2>", "String", "ans", "=", "\"\"", ";", "<3>", "String", "res", "=", "N", "[", "0", "]", ";", "<4>", "boolean", "mn", "=", "true", ";", "<5>", "boolean", "bl", "=", "true", ";", "<6>", "for", "(", "String", "x", ":", "N", ")", "{", "<7>", "if", "(", "Integer", ".", "parseInt", "(", "res", ")", "<", "Integer", ".", "parseInt", "(", "x", ")", ")", "{", "<8>", "mn", "=", "false", ";", "}", "<9>", "if", "(", "!", "x", ".", "equals", "(", "res", ")", ")", "{", "<10>", "bl", "=", "false", ";", "}", "}", "<11>", "if", "(", "bl", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "}", "<13>", "else", "{", "<14>", "if", "(", "!", "mn", ")", "{", "<15>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ".", "length", ";", "i", "++", ")", "{", "<16>", "ans", "+=", "(", "Integer", ".", "parseInt", "(", "res", ")", "+", "1", ")", ";", "}", "<17>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<18>", "else", "{", "<19>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ".", "length", ";", "i", "++", ")", "{", "<20>", "ans", "+=", "res", ";", "}", "<21>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "750"]]}, {"line": 1, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"]]}, {"line": 2, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""]]}, {"line": 3, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"]]}, {"line": 4, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"]]}, {"line": 5, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"]]}, {"line": 6, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"], ["x", "7"]]}, {"line": 7, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"], ["x", "7"]]}, {"line": 9, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"], ["x", "7"]]}, {"line": 6, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"], ["x", "5"]]}, {"line": 7, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"], ["x", "5"]]}, {"line": 9, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "True"], ["x", "5"]]}, {"line": 10, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "5"]]}, {"line": 6, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 7, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 9, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 10, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 6, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 11, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 14, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"]]}, {"line": 19, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", ""], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "0"]]}, {"line": 20, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", "7"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "0"]]}, {"line": 19, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", "7"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "1"]]}, {"line": 20, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", "77"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "1"]]}, {"line": 19, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["ans", "77"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "2"]]}, {"line": 20, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "2"], ["ans", "777"]]}, {"line": 19, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "2"], ["ans", "777"]]}, {"line": 21, "state": [["n", "750"], ["N", "[ 7 , 5 , 0 ]"], ["res", "7"], ["mn", "True"], ["bl", "False"], ["x", "0"], ["i", "2"], ["ans", "777"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 3, 1, 0], [6, 9, 7, 6, 3, 1, 0], [6, 9, 7, 6, 9, 7, 6, 3, 1, 0], [6, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0]], "7": [[7, 6, 3, 1, 0], [7, 6, 9, 7, 6, 3, 1, 0], [7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0]], "9": [[9, 7, 6, 3, 1, 0], [9, 7, 6, 9, 7, 6, 3, 1, 0], [9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0]], "10": [[10, 5], [10, 5]], "11": [[11, 10, 5]], "14": [[14, 4]], "19": [[19, 6, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0], [19, 6, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0], [19, 6, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0], [19, 6, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0]], "20": [[20, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0], [20, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0], [20, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0]], "21": [[21, 20, 9, 7, 6, 9, 7, 6, 9, 7, 6, 3, 1, 0]]}}
{"id": 3401, "code": "int a = 20, b = 15;\nif (a - b * 2 <= 0) {System.out.println(0);}\nelse {System.out.println(a - b * 2);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "if", "(", "a", "-", "b", "*", "2", "<=", "0", ")", "{", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<2>", "else", "{", "System", ".", "out", ".", "println", "(", "a", "-", "b", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11135, "code": "String s = \"atcoder\";\nString target = s.substring(0, (s.length() - 1) / 2);\nString target2 = s.substring((s.length() + 3) / 2 - 1);\nif (target.equals(target2)) {\nint l = 0, r = s.length() - 1;\nboolean flag = true;\nwhile (l <= r) {\nif (s.charAt(l) == s.charAt(r)) {\nl++;\nr--;}\nelse {\nSystem.out.println(\"No\");\nSystem.exit(0);}}\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "s", "=", "\"atcoder\"", ";", "<1>", "String", "target", "=", "s", ".", "substring", "(", "0", ",", "(", "s", ".", "length", "(", ")", "-", "1", ")", "/", "2", ")", ";", "<2>", "String", "target2", "=", "s", ".", "substring", "(", "(", "s", ".", "length", "(", ")", "+", "3", ")", "/", "2", "-", "1", ")", ";", "<3>", "if", "(", "target", ".", "equals", "(", "target2", ")", ")", "{", "<4>", "int", "l", "=", "0", ",", "r", "=", "s", ".", "length", "(", ")", "-", "1", ";", "<5>", "boolean", "flag", "=", "true", ";", "<6>", "while", "(", "l", "<=", "r", ")", "{", "<7>", "if", "(", "s", ".", "charAt", "(", "l", ")", "==", "s", ".", "charAt", "(", "r", ")", ")", "{", "<8>", "l", "++", ";", "<9>", "r", "--", ";", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<12>", "System", ".", "exit", "(", "0", ")", ";", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<14>", "else", "{", "<15>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "atcoder"]]}, {"line": 1, "state": [["s", "atcoder"], ["target", "atc"]]}, {"line": 2, "state": [["s", "atcoder"], ["target", "atc"], ["target2", "der"]]}, {"line": 3, "state": [["s", "atcoder"], ["target", "atc"], ["target2", "der"]]}, {"line": 15, "state": [["s", "atcoder"], ["target", "atc"], ["target2", "der"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "15": [[15]]}}
{"id": 9920, "code": "int N = 8;\nchar[] S = {')', ')', ')', ')', '(', '(', '(', '('};\nStringBuilder ans = new StringBuilder();\nint count = 0;\nboolean addFlag = true;\nfor (int i = 0; i < N; i++) {\nif (addFlag) {\nif (S[i] == ')') {\nans.append(')');\nans.insert(0, '(');\n} else {\nans.append('(');\ncount += 1;\naddFlag = false;}\n} else {\nif (S[i] == '(') {\nans.append('(');\ncount += 1;\n} else {\nans.append(')');\ncount -= 1;\nif (count == 0) {\naddFlag = true;}}}}\nfor (int j = 0; j < count; j++) {\nans.append(')');}\nSystem.out.println(ans.toString());", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "char", "[", "]", "S", "=", "{", "')'", ",", "')'", ",", "')'", ",", "')'", ",", "'('", ",", "'('", ",", "'('", ",", "'('", "}", ";", "<2>", "StringBuilder", "ans", "=", "new", "StringBuilder", "(", ")", ";", "<3>", "int", "count", "=", "0", ";", "<4>", "boolean", "addFlag", "=", "true", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "if", "(", "addFlag", ")", "{", "<7>", "if", "(", "S", "[", "i", "]", "==", "')'", ")", "{", "<8>", "ans", ".", "append", "(", "')'", ")", ";", "<9>", "ans", ".", "insert", "(", "0", ",", "'('", ")", ";", "<10>", "}", "else", "{", "<11>", "ans", ".", "append", "(", "'('", ")", ";", "<12>", "count", "+=", "1", ";", "<13>", "addFlag", "=", "false", ";", "}", "<14>", "}", "else", "{", "<15>", "if", "(", "S", "[", "i", "]", "==", "'('", ")", "{", "<16>", "ans", ".", "append", "(", "'('", ")", ";", "<17>", "count", "+=", "1", ";", "<18>", "}", "else", "{", "<19>", "ans", ".", "append", "(", "')'", ")", ";", "<20>", "count", "-=", "1", ";", "<21>", "if", "(", "count", "==", "0", ")", "{", "<22>", "addFlag", "=", "true", ";", "}", "}", "}", "}", "<23>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "count", ";", "j", "++", ")", "{", "<24>", "ans", ".", "append", "(", "')'", ")", ";", "}", "<25>", "System", ".", "out", ".", "println", "(", "ans", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "8"]]}, {"line": 1, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 2, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ]"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ]"], ["count", "0"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ]"], ["count", "0"], ["addFlag", "True"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ]"], ["count", "0"], ["addFlag", "True"], ["i", "0"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ]"], ["count", "0"], ["addFlag", "True"], ["i", "0"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ]"], ["count", "0"], ["addFlag", "True"], ["i", "0"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "0"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "0"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "1"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "1"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "1"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "1"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "1"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "2"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "2"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "2"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "2"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "2"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "3"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "3"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "3"]]}, {"line": 8, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ) , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "3"]]}, {"line": 9, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "3"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "4"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "4"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "0"], ["addFlag", "True"], ["i", "4"]]}, {"line": 11, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( ]"], ["count", "0"], ["addFlag", "True"], ["i", "4"]]}, {"line": 12, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( ]"], ["count", "1"], ["addFlag", "True"], ["i", "4"]]}, {"line": 13, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( ]"], ["count", "1"], ["addFlag", "False"], ["i", "4"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( ]"], ["count", "1"], ["addFlag", "False"], ["i", "5"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( ]"], ["count", "1"], ["addFlag", "False"], ["i", "5"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( ]"], ["count", "1"], ["addFlag", "False"], ["i", "5"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( ]"], ["count", "1"], ["addFlag", "False"], ["i", "5"]]}, {"line": 17, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( ]"], ["count", "2"], ["addFlag", "False"], ["i", "5"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( ]"], ["count", "2"], ["addFlag", "False"], ["i", "6"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( ]"], ["count", "2"], ["addFlag", "False"], ["i", "6"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( ]"], ["count", "2"], ["addFlag", "False"], ["i", "6"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( ]"], ["count", "2"], ["addFlag", "False"], ["i", "6"]]}, {"line": 17, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( ]"], ["count", "3"], ["addFlag", "False"], ["i", "6"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( ]"], ["count", "3"], ["addFlag", "False"], ["i", "7"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( ]"], ["count", "3"], ["addFlag", "False"], ["i", "7"]]}, {"line": 15, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( ]"], ["count", "3"], ["addFlag", "False"], ["i", "7"]]}, {"line": 16, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "3"], ["addFlag", "False"], ["i", "7"]]}, {"line": 17, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 23, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 24, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 23, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 24, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 23, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 24, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 23, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 24, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 23, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}, {"line": 25, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["ans", "[ ( , ( , ( , ( , ) , ) , ) , ) , ( , ( , ( , ( , ) , ) , ) , ) ]"], ["count", "4"], ["addFlag", "False"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 7, 5, 0], [5, 7, 5, 7, 5, 0], [5, 7, 5, 7, 5, 7, 5, 0], [5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [5, 15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0]], "6": [[6, 4], [6, 4], [6, 4], [6, 4], [6, 4], [6, 13, 6, 4], [6, 13, 6, 4], [6, 13, 6, 4]], "7": [[7, 5, 0], [7, 5, 7, 5, 0], [7, 5, 7, 5, 7, 5, 0], [7, 5, 7, 5, 7, 5, 7, 5, 0], [7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0]], "8": [[8, 2], [8, 9, 8, 2], [8, 9, 8, 9, 8, 2], [8, 9, 8, 9, 8, 9, 8, 2]], "9": [[9, 8, 2], [9, 8, 9, 8, 2], [9, 8, 9, 8, 9, 8, 2], [9, 8, 9, 8, 9, 8, 9, 8, 2]], "11": [[11, 9, 8, 9, 8, 9, 8, 9, 8, 2]], "12": [[12, 3]], "13": [[13, 6, 4]], "15": [[15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0]], "16": [[16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2], [16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2], [16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2]], "17": [[17, 12, 3], [17, 12, 3], [17, 12, 3]], "23": [[23, 5, 15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [23, 5, 15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [23, 5, 15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [23, 5, 15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0], [23, 5, 15, 5, 15, 5, 15, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 0]], "24": [[24, 16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2], [24, 16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2], [24, 16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2], [24, 16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2]], "25": [[25, 24, 16, 11, 9, 8, 9, 8, 9, 8, 9, 8, 2]]}}
{"id": 9411, "code": "String d = \"2017/01/31\";\nSystem.out.println(\"2018/01/\" + d.substring(8));", "code_tokens": ["<0>", "String", "d", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018/01/\"", "+", "d", ".", "substring", "(", "8", ")", ")", ";"], "trace": [{"line": 0, "state": [["d", "2017/01/31"]]}, {"line": 1, "state": [["d", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 12173, "code": "Scanner scanner = new Scanner(System.in);\nint m1 = 11, d1 = 16;\nint m2 = 11, d2 = 17;\nif (m1 == m2) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(1);}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "m1", "=", "11", ",", "d1", "=", "16", ";", "<2>", "int", "m2", "=", "11", ",", "d2", "=", "17", ";", "<3>", "if", "(", "m1", "==", "m2", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["m1", "11"], ["d1", "16"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 4, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 1271, "code": "int n = 112;\nSystem.out.println(Math.ceil(n / 111.0) * 111);", "code_tokens": ["<0>", "int", "n", "=", "112", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "ceil", "(", "n", "/", "111.0", ")", "*", "111", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "112"]]}, {"line": 2, "state": [["n", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 1422, "code": "String[] N = {\"1\", \"1\", \"2\"};\nint n = Integer.parseInt(String.join(\"\", N));\nint ck = Integer.parseInt(N[0] + N[0] + N[0]);\nif (n - ck <= 0) {\nSystem.out.println(Integer.parseInt(N[0] + N[0] + N[0]));\n} else {\nSystem.out.println(Integer.parseInt((Integer.parseInt(N[0]) + 1) + \"\" + (Integer.parseInt(N[0]) + 1) + \"\" + (Integer.parseInt(N[0]) + 1)));}", "code_tokens": ["<0>", "String", "[", "]", "N", "=", "{", "\"1\"", ",", "\"1\"", ",", "\"2\"", "}", ";", "<1>", "int", "n", "=", "Integer", ".", "parseInt", "(", "String", ".", "join", "(", "\"\"", ",", "N", ")", ")", ";", "<2>", "int", "ck", "=", "Integer", ".", "parseInt", "(", "N", "[", "0", "]", "+", "N", "[", "0", "]", "+", "N", "[", "0", "]", ")", ";", "<3>", "if", "(", "n", "-", "ck", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "Integer", ".", "parseInt", "(", "N", "[", "0", "]", "+", "N", "[", "0", "]", "+", "N", "[", "0", "]", ")", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "Integer", ".", "parseInt", "(", "(", "Integer", ".", "parseInt", "(", "N", "[", "0", "]", ")", "+", "1", ")", "+", "\"\"", "+", "(", "Integer", ".", "parseInt", "(", "N", "[", "0", "]", ")", "+", "1", ")", "+", "\"\"", "+", "(", "Integer", ".", "parseInt", "(", "N", "[", "0", "]", ")", "+", "1", ")", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "[ 1 , 1 , 2 ]"]]}, {"line": 1, "state": [["N", "[ 1 , 1 , 2 ]"], ["n", "112"]]}, {"line": 2, "state": [["N", "[ 1 , 1 , 2 ]"], ["n", "112"], ["ck", "111"]]}, {"line": 3, "state": [["N", "[ 1 , 1 , 2 ]"], ["n", "112"], ["ck", "111"]]}, {"line": 6, "state": [["N", "[ 1 , 1 , 2 ]"], ["n", "112"], ["ck", "111"]]}, {"line": 7, "state": [["N", "[ 1 , 1 , 2 ]"], ["n", "112"], ["ck", "111"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6, 2, 1, 0]], "7": [[7]]}}
{"id": 6312, "code": "int N = 6;\nint[] A = {3, 14, 159, 2, 6, 53};\nint[] B = {58, 9, 79, 323, 84, 6};\nint[] C = {2643, 383, 2, 79, 50, 288};\nArrays.sort(A);\nArrays.sort(C);\nint ans = 0;\nfor (int b : B) {\nans += bisectLeft(A, b) * (N - bisectRight(C, b));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "14", ",", "159", ",", "2", ",", "6", ",", "53", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "58", ",", "9", ",", "79", ",", "323", ",", "84", ",", "6", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "2643", ",", "383", ",", "2", ",", "79", ",", "50", ",", "288", "}", ";", "<4>", "Arrays", ".", "sort", "(", "A", ")", ";", "<5>", "Arrays", ".", "sort", "(", "C", ")", ";", "<6>", "int", "ans", "=", "0", ";", "<7>", "for", "(", "int", "b", ":", "B", ")", "{", "<8>", "ans", "+=", "bisectLeft", "(", "A", ",", "b", ")", "*", "(", "N", "-", "bisectRight", "(", "C", ",", "b", ")", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "6"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 8, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["b", "58"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "58"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "20"], ["b", "9"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "9"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "35"], ["b", "79"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "79"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "50"], ["b", "323"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "323"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "62"], ["b", "84"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "84"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "77"], ["b", "6"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"]]}, {"line": 9, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["B", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["C", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["b", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3]], "7": [[7, 5]], "8": [[8]], "9": [[9, 4], [9, 10, 9, 4], [9, 10, 9, 10, 9, 4], [9, 10, 9, 10, 9, 10, 9, 4], [9, 10, 9, 10, 9, 10, 9, 10, 9, 4], [9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 4], [9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 4]], "10": [[10, 9, 4], [10, 9, 10, 9, 4], [10, 9, 10, 9, 10, 9, 4], [10, 9, 10, 9, 10, 9, 10, 9, 4], [10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 4], [10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 4]], "11": [[11, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 4]]}}
{"id": 16455, "code": "int n = 2;\nint[] A = {0, 100};\ndouble diff = Double.POSITIVE_INFINITY;\nint ans = 0;\nfor (int a : java.util.Arrays.copyOfRange(A, 0, A.length - 1)) {\ndouble d = Math.abs(a - A[A.length - 1] / 2.0);\nif (d < diff) {\nans = a;\ndiff = d;}}\nSystem.out.println(A[A.length - 1] + \" \" + ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "0", ",", "100", "}", ";", "<2>", "double", "diff", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "a", ":", "java", ".", "util", ".", "Arrays", ".", "copyOfRange", "(", "A", ",", "0", ",", "A", ".", "length", "-", "1", ")", ")", "{", "<5>", "double", "d", "=", "Math", ".", "abs", "(", "a", "-", "A", "[", "A", ".", "length", "-", "1", "]", "/", "2.0", ")", ";", "<6>", "if", "(", "d", "<", "diff", ")", "{", "<7>", "ans", "=", "a", ";", "<8>", "diff", "=", "d", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "A", "[", "A", ".", "length", "-", "1", "]", "+", "\" \"", "+", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["A", "[ 0 , 100 ]"]]}, {"line": 2, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "inf"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "inf"], ["ans", "0"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "inf"], ["ans", "0"], ["a", "0"]]}, {"line": 5, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "inf"], ["ans", "0"], ["a", "0"], ["d", "50.0"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "inf"], ["ans", "0"], ["a", "0"], ["d", "50.0"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "inf"], ["ans", "0"], ["a", "0"], ["d", "50.0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "50.0"], ["ans", "0"], ["a", "0"], ["d", "50.0"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "50.0"], ["ans", "0"], ["a", "0"], ["d", "50.0"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 0 , 100 ]"], ["diff", "50.0"], ["ans", "0"], ["a", "0"], ["d", "50.0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 7, 5, 4, 1]], "5": [[5, 4, 1]], "6": [[6, 5, 4, 1]], "7": [[7, 5, 4, 1]], "8": [[8, 6, 5, 4, 1]], "9": [[9, 4, 7, 5, 4, 1]]}}
{"id": 1505, "code": "int N = 750;\nint[] L = new int[9];for (int i = 0; i < 9; i++) {L[i] = 111 * (i + 1);}\nint ans = 0;\nfor (int l : L) {\nif (N <= l) {\nans = l;\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "int", "[", "]", "L", "=", "new", "int", "[", "9", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "9", ";", "i", "++", ")", "{", "L", "[", "i", "]", "=", "111", "*", "(", "i", "+", "1", ")", ";", "}", "<2>", "int", "ans", "=", "0", ";", "<3>", "for", "(", "int", "l", ":", "L", ")", "{", "<4>", "if", "(", "N", "<=", "l", ")", "{", "<5>", "ans", "=", "l", ";", "<6>", "break", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": [["i", "1"]]}, {"line": 1, "state": [["i", "2"]]}, {"line": 1, "state": [["i", "3"]]}, {"line": 1, "state": [["i", "4"]]}, {"line": 1, "state": [["i", "5"]]}, {"line": 1, "state": [["i", "6"]]}, {"line": 1, "state": [["i", "7"]]}, {"line": 1, "state": [["i", "8"]]}, {"line": 1, "state": [["i", "9"]]}, {"line": 1, "state": [["i", "9"]]}, {"line": 1, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"]]}, {"line": 2, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "111"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "111"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "222"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "222"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "333"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "333"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "444"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "444"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "555"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "555"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "666"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "666"]]}, {"line": 3, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "777"]]}, {"line": 4, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "0"], ["l", "777"]]}, {"line": 5, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "777"], ["l", "777"]]}, {"line": 6, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "777"], ["l", "777"]]}, {"line": 7, "state": [["N", "750"], ["L", "[ 111 , 222 , 333 , 444 , 555 , 666 , 777 , 888 , 999 ]"], ["ans", "777"], ["l", "777"]]}], "slices": {"0": [[0]], "1": [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]], "2": [[2]], "3": [[3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "4": [[4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "6": [[6]], "7": [[7, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}}
{"id": 11365, "code": "String S = \"SUN\";\nString[] ls = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint cnt = 0;\nHashMap<String, Integer> dict = new HashMap<>();\nfor (String item : ls) {\ndict.put(item, cnt);\ncnt += 1;}\nSystem.out.println(7 - dict.get(S));", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "ls", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "cnt", "=", "0", ";", "<3>", "HashMap", "<", "String", ",", "Integer", ">", "dict", "=", "new", "HashMap", "<", ">", "(", ")", ";", "<4>", "for", "(", "String", "item", ":", "ls", ")", "{", "<5>", "dict", ".", "put", "(", "item", ",", "cnt", ")", ";", "<6>", "cnt", "+=", "1", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "7", "-", "dict", ".", "get", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "0"]]}, {"line": 3, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "0"], ["dict", "{ }"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "0"], ["dict", "{ }"], ["item", "SUN"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "0"], ["dict", "{ SUN"], ["item", "SUN"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "1"], ["dict", "{ SUN"], ["item", "SUN"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "1"], ["dict", "{ SUN"], ["item", "MON"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "1"], ["dict", "{ SUN"], ["item", "MON"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "2"], ["dict", "{ SUN"], ["item", "MON"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "2"], ["dict", "{ SUN"], ["item", "TUE"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "2"], ["dict", "{ SUN"], ["item", "TUE"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "3"], ["dict", "{ SUN"], ["item", "TUE"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "3"], ["dict", "{ SUN"], ["item", "WED"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "3"], ["dict", "{ SUN"], ["item", "WED"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "4"], ["dict", "{ SUN"], ["item", "WED"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "4"], ["dict", "{ SUN"], ["item", "THU"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "4"], ["dict", "{ SUN"], ["item", "THU"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "5"], ["dict", "{ SUN"], ["item", "THU"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "5"], ["dict", "{ SUN"], ["item", "FRI"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "5"], ["dict", "{ SUN"], ["item", "FRI"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "6"], ["dict", "{ SUN"], ["item", "FRI"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "6"], ["dict", "{ SUN"], ["item", "SAT"]]}, {"line": 5, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "6"], ["dict", "{ SUN"], ["item", "SAT"]]}, {"line": 6, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "7"], ["dict", "{ SUN"], ["item", "SAT"]]}, {"line": 4, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "7"], ["dict", "{ SUN"], ["item", "SAT"]]}, {"line": 7, "state": [["S", "SUN"], ["ls", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["cnt", "7"], ["dict", "{ SUN"], ["item", "SAT"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "6": [[6, 5, 4, 1], [6, 5, 4, 5, 4, 1], [6, 5, 4, 5, 4, 5, 4, 1], [6, 5, 4, 5, 4, 5, 4, 5, 4, 1], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "7": [[7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 16191, "code": "int n = 2;\nint[] a = {100, 0};\njava.util.Arrays.sort(a);\nint N = a[a.length - 1];\ndouble ans = Double.POSITIVE_INFINITY;\nint r = a[0];\nfor (int i = 0; i < a.length - 1; i++) {\nif (ans > Math.abs(a[i] - N / 2.0)) {\nans = Math.abs(a[i] - N / 2.0);\nr = a[i];}}\nSystem.out.println(N + \" \" + r);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "N", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "<4>", "double", "ans", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<5>", "int", "r", "=", "a", "[", "0", "]", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", "-", "1", ";", "i", "++", ")", "{", "<7>", "if", "(", "ans", ">", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "N", "/", "2.0", ")", ")", "{", "<8>", "ans", "=", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "N", "/", "2.0", ")", ";", "<9>", "r", "=", "a", "[", "i", "]", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "N", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "inf"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "inf"], ["r", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "inf"], ["r", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "inf"], ["r", "0"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "50.0"], ["r", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "50.0"], ["r", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "50.0"], ["r", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 0 , 100 ]"], ["N", "100"], ["ans", "50.0"], ["r", "0"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1], [6, 9, 8, 7, 6, 5, 3, 2, 1]], "7": [[7, 6, 5, 3, 2, 1]], "8": [[8, 7, 6, 5, 3, 2, 1]], "9": [[9, 8, 7, 6, 5, 3, 2, 1]], "10": [[10, 9, 8, 7, 6, 5, 3, 2, 1]]}}
{"id": 12075, "code": "int m1 = 11, d1 = 16;\nint m2 = 11, d2 = 17;\nboolean ok = false;\nif (d1 + 1 != d2) {\nok = true;}\nif (ok) {\nSystem.out.println(1);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "16", ";", "<1>", "int", "m2", "=", "11", ",", "d2", "=", "17", ";", "<2>", "boolean", "ok", "=", "false", ";", "<3>", "if", "(", "d1", "+", "1", "!=", "d2", ")", "{", "<4>", "ok", "=", "true", ";", "}", "<5>", "if", "(", "ok", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "16"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ok", "False"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ok", "False"]]}, {"line": 5, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ok", "False"]]}, {"line": 8, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ok", "False"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "5": [[5, 2]], "8": [[8]]}}
{"id": 1451, "code": "int N = 112;\nfor (int i = N; i < 1000; i++) {\nString strI = String.valueOf(i);if (strI.charAt(0) == strI.charAt(1) && strI.charAt(1) == strI.charAt(2)) {\nSystem.out.println(i);\nbreak;}}", "code_tokens": ["<0>", "int", "N", "=", "112", ";", "<1>", "for", "(", "int", "i", "=", "N", ";", "i", "<", "1000", ";", "i", "++", ")", "{", "<2>", "String", "strI", "=", "String", ".", "valueOf", "(", "i", ")", ";", "if", "(", "strI", ".", "charAt", "(", "0", ")", "==", "strI", ".", "charAt", "(", "1", ")", "&&", "strI", ".", "charAt", "(", "1", ")", "==", "strI", ".", "charAt", "(", "2", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<4>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["N", "112"]]}, {"line": 1, "state": [["N", "112"], ["i", "112"]]}, {"line": 2, "state": [["N", "112"], ["i", "112"]]}, {"line": 1, "state": [["N", "112"], ["i", "113"]]}, {"line": 2, "state": [["N", "112"], ["i", "113"]]}, {"line": 1, "state": [["N", "112"], ["i", "114"]]}, {"line": 2, "state": [["N", "112"], ["i", "114"]]}, {"line": 1, "state": [["N", "112"], ["i", "115"]]}, {"line": 2, "state": [["N", "112"], ["i", "115"]]}, {"line": 1, "state": [["N", "112"], ["i", "116"]]}, {"line": 2, "state": [["N", "112"], ["i", "116"]]}, {"line": 1, "state": [["N", "112"], ["i", "117"]]}, {"line": 2, "state": [["N", "112"], ["i", "117"]]}, {"line": 1, "state": [["N", "112"], ["i", "118"]]}, {"line": 2, "state": [["N", "112"], ["i", "118"]]}, {"line": 1, "state": [["N", "112"], ["i", "119"]]}, {"line": 2, "state": [["N", "112"], ["i", "119"]]}, {"line": 1, "state": [["N", "112"], ["i", "120"]]}, {"line": 2, "state": [["N", "112"], ["i", "120"]]}, {"line": 1, "state": [["N", "112"], ["i", "121"]]}, {"line": 2, "state": [["N", "112"], ["i", "121"]]}, {"line": 1, "state": [["N", "112"], ["i", "122"]]}, {"line": 2, "state": [["N", "112"], ["i", "122"]]}, {"line": 1, "state": [["N", "112"], ["i", "123"]]}, {"line": 2, "state": [["N", "112"], ["i", "123"]]}, {"line": 1, "state": [["N", "112"], ["i", "124"]]}, {"line": 2, "state": [["N", "112"], ["i", "124"]]}, {"line": 1, "state": [["N", "112"], ["i", "125"]]}, {"line": 2, "state": [["N", "112"], ["i", "125"]]}, {"line": 1, "state": [["N", "112"], ["i", "126"]]}, {"line": 2, "state": [["N", "112"], ["i", "126"]]}, {"line": 1, "state": [["N", "112"], ["i", "127"]]}, {"line": 2, "state": [["N", "112"], ["i", "127"]]}, {"line": 1, "state": [["N", "112"], ["i", "128"]]}, {"line": 2, "state": [["N", "112"], ["i", "128"]]}, {"line": 1, "state": [["N", "112"], ["i", "129"]]}, {"line": 2, "state": [["N", "112"], ["i", "129"]]}, {"line": 1, "state": [["N", "112"], ["i", "130"]]}, {"line": 2, "state": [["N", "112"], ["i", "130"]]}, {"line": 1, "state": [["N", "112"], ["i", "131"]]}, {"line": 2, "state": [["N", "112"], ["i", "131"]]}, {"line": 1, "state": [["N", "112"], ["i", "132"]]}, {"line": 2, "state": [["N", "112"], ["i", "132"]]}, {"line": 1, "state": [["N", "112"], ["i", "133"]]}, {"line": 2, "state": [["N", "112"], ["i", "133"]]}, {"line": 1, "state": [["N", "112"], ["i", "134"]]}, {"line": 2, "state": [["N", "112"], ["i", "134"]]}, {"line": 1, "state": [["N", "112"], ["i", "135"]]}, {"line": 2, "state": [["N", "112"], ["i", "135"]]}, {"line": 1, "state": [["N", "112"], ["i", "136"]]}, {"line": 2, "state": [["N", "112"], ["i", "136"]]}, {"line": 1, "state": [["N", "112"], ["i", "137"]]}, {"line": 2, "state": [["N", "112"], ["i", "137"]]}, {"line": 1, "state": [["N", "112"], ["i", "138"]]}, {"line": 2, "state": [["N", "112"], ["i", "138"]]}, {"line": 1, "state": [["N", "112"], ["i", "139"]]}, {"line": 2, "state": [["N", "112"], ["i", "139"]]}, {"line": 1, "state": [["N", "112"], ["i", "140"]]}, {"line": 2, "state": [["N", "112"], ["i", "140"]]}, {"line": 1, "state": [["N", "112"], ["i", "141"]]}, {"line": 2, "state": [["N", "112"], ["i", "141"]]}, {"line": 1, "state": [["N", "112"], ["i", "142"]]}, {"line": 2, "state": [["N", "112"], ["i", "142"]]}, {"line": 1, "state": [["N", "112"], ["i", "143"]]}, {"line": 2, "state": [["N", "112"], ["i", "143"]]}, {"line": 1, "state": [["N", "112"], ["i", "144"]]}, {"line": 2, "state": [["N", "112"], ["i", "144"]]}, {"line": 1, "state": [["N", "112"], ["i", "145"]]}, {"line": 2, "state": [["N", "112"], ["i", "145"]]}, {"line": 1, "state": [["N", "112"], ["i", "146"]]}, {"line": 2, "state": [["N", "112"], ["i", "146"]]}, {"line": 1, "state": [["N", "112"], ["i", "147"]]}, {"line": 2, "state": [["N", "112"], ["i", "147"]]}, {"line": 1, "state": [["N", "112"], ["i", "148"]]}, {"line": 2, "state": [["N", "112"], ["i", "148"]]}, {"line": 1, "state": [["N", "112"], ["i", "149"]]}, {"line": 2, "state": [["N", "112"], ["i", "149"]]}, {"line": 1, "state": [["N", "112"], ["i", "150"]]}, {"line": 2, "state": [["N", "112"], ["i", "150"]]}, {"line": 1, "state": [["N", "112"], ["i", "151"]]}, {"line": 2, "state": [["N", "112"], ["i", "151"]]}, {"line": 1, "state": [["N", "112"], ["i", "152"]]}, {"line": 2, "state": [["N", "112"], ["i", "152"]]}, {"line": 1, "state": [["N", "112"], ["i", "153"]]}, {"line": 2, "state": [["N", "112"], ["i", "153"]]}, {"line": 1, "state": [["N", "112"], ["i", "154"]]}, {"line": 2, "state": [["N", "112"], ["i", "154"]]}, {"line": 1, "state": [["N", "112"], ["i", "155"]]}, {"line": 2, "state": [["N", "112"], ["i", "155"]]}, {"line": 1, "state": [["N", "112"], ["i", "156"]]}, {"line": 2, "state": [["N", "112"], ["i", "156"]]}, {"line": 1, "state": [["N", "112"], ["i", "157"]]}, {"line": 2, "state": [["N", "112"], ["i", "157"]]}, {"line": 1, "state": [["N", "112"], ["i", "158"]]}, {"line": 2, "state": [["N", "112"], ["i", "158"]]}, {"line": 1, "state": [["N", "112"], ["i", "159"]]}, {"line": 2, "state": [["N", "112"], ["i", "159"]]}, {"line": 1, "state": [["N", "112"], ["i", "160"]]}, {"line": 2, "state": [["N", "112"], ["i", "160"]]}, {"line": 1, "state": [["N", "112"], ["i", "161"]]}, {"line": 2, "state": [["N", "112"], ["i", "161"]]}, {"line": 1, "state": [["N", "112"], ["i", "162"]]}, {"line": 2, "state": [["N", "112"], ["i", "162"]]}, {"line": 1, "state": [["N", "112"], ["i", "163"]]}, {"line": 2, "state": [["N", "112"], ["i", "163"]]}, {"line": 1, "state": [["N", "112"], ["i", "164"]]}, {"line": 2, "state": [["N", "112"], ["i", "164"]]}, {"line": 1, "state": [["N", "112"], ["i", "165"]]}, {"line": 2, "state": [["N", "112"], ["i", "165"]]}, {"line": 1, "state": [["N", "112"], ["i", "166"]]}, {"line": 2, "state": [["N", "112"], ["i", "166"]]}, {"line": 1, "state": [["N", "112"], ["i", "167"]]}, {"line": 2, "state": [["N", "112"], ["i", "167"]]}, {"line": 1, "state": [["N", "112"], ["i", "168"]]}, {"line": 2, "state": [["N", "112"], ["i", "168"]]}, {"line": 1, "state": [["N", "112"], ["i", "169"]]}, {"line": 2, "state": [["N", "112"], ["i", "169"]]}, {"line": 1, "state": [["N", "112"], ["i", "170"]]}, {"line": 2, "state": [["N", "112"], ["i", "170"]]}, {"line": 1, "state": [["N", "112"], ["i", "171"]]}, {"line": 2, "state": [["N", "112"], ["i", "171"]]}, {"line": 1, "state": [["N", "112"], ["i", "172"]]}, {"line": 2, "state": [["N", "112"], ["i", "172"]]}, {"line": 1, "state": [["N", "112"], ["i", "173"]]}, {"line": 2, "state": [["N", "112"], ["i", "173"]]}, {"line": 1, "state": [["N", "112"], ["i", "174"]]}, {"line": 2, "state": [["N", "112"], ["i", "174"]]}, {"line": 1, "state": [["N", "112"], ["i", "175"]]}, {"line": 2, "state": [["N", "112"], ["i", "175"]]}, {"line": 1, "state": [["N", "112"], ["i", "176"]]}, {"line": 2, "state": [["N", "112"], ["i", "176"]]}, {"line": 1, "state": [["N", "112"], ["i", "177"]]}, {"line": 2, "state": [["N", "112"], ["i", "177"]]}, {"line": 1, "state": [["N", "112"], ["i", "178"]]}, {"line": 2, "state": [["N", "112"], ["i", "178"]]}, {"line": 1, "state": [["N", "112"], ["i", "179"]]}, {"line": 2, "state": [["N", "112"], ["i", "179"]]}, {"line": 1, "state": [["N", "112"], ["i", "180"]]}, {"line": 2, "state": [["N", "112"], ["i", "180"]]}, {"line": 1, "state": [["N", "112"], ["i", "181"]]}, {"line": 2, "state": [["N", "112"], ["i", "181"]]}, {"line": 1, "state": [["N", "112"], ["i", "182"]]}, {"line": 2, "state": [["N", "112"], ["i", "182"]]}, {"line": 1, "state": [["N", "112"], ["i", "183"]]}, {"line": 2, "state": [["N", "112"], ["i", "183"]]}, {"line": 1, "state": [["N", "112"], ["i", "184"]]}, {"line": 2, "state": [["N", "112"], ["i", "184"]]}, {"line": 1, "state": [["N", "112"], ["i", "185"]]}, {"line": 2, "state": [["N", "112"], ["i", "185"]]}, {"line": 1, "state": [["N", "112"], ["i", "186"]]}, {"line": 2, "state": [["N", "112"], ["i", "186"]]}, {"line": 1, "state": [["N", "112"], ["i", "187"]]}, {"line": 2, "state": [["N", "112"], ["i", "187"]]}, {"line": 1, "state": [["N", "112"], ["i", "188"]]}, {"line": 2, "state": [["N", "112"], ["i", "188"]]}, {"line": 1, "state": [["N", "112"], ["i", "189"]]}, {"line": 2, "state": [["N", "112"], ["i", "189"]]}, {"line": 1, "state": [["N", "112"], ["i", "190"]]}, {"line": 2, "state": [["N", "112"], ["i", "190"]]}, {"line": 1, "state": [["N", "112"], ["i", "191"]]}, {"line": 2, "state": [["N", "112"], ["i", "191"]]}, {"line": 1, "state": [["N", "112"], ["i", "192"]]}, {"line": 2, "state": [["N", "112"], ["i", "192"]]}, {"line": 1, "state": [["N", "112"], ["i", "193"]]}, {"line": 2, "state": [["N", "112"], ["i", "193"]]}, {"line": 1, "state": [["N", "112"], ["i", "194"]]}, {"line": 2, "state": [["N", "112"], ["i", "194"]]}, {"line": 1, "state": [["N", "112"], ["i", "195"]]}, {"line": 2, "state": [["N", "112"], ["i", "195"]]}, {"line": 1, "state": [["N", "112"], ["i", "196"]]}, {"line": 2, "state": [["N", "112"], ["i", "196"]]}, {"line": 1, "state": [["N", "112"], ["i", "197"]]}, {"line": 2, "state": [["N", "112"], ["i", "197"]]}, {"line": 1, "state": [["N", "112"], ["i", "198"]]}, {"line": 2, "state": [["N", "112"], ["i", "198"]]}, {"line": 1, "state": [["N", "112"], ["i", "199"]]}, {"line": 2, "state": [["N", "112"], ["i", "199"]]}, {"line": 1, "state": [["N", "112"], ["i", "200"]]}, {"line": 2, "state": [["N", "112"], ["i", "200"]]}, {"line": 1, "state": [["N", "112"], ["i", "201"]]}, {"line": 2, "state": [["N", "112"], ["i", "201"]]}, {"line": 1, "state": [["N", "112"], ["i", "202"]]}, {"line": 2, "state": [["N", "112"], ["i", "202"]]}, {"line": 1, "state": [["N", "112"], ["i", "203"]]}, {"line": 2, "state": [["N", "112"], ["i", "203"]]}, {"line": 1, "state": [["N", "112"], ["i", "204"]]}, {"line": 2, "state": [["N", "112"], ["i", "204"]]}, {"line": 1, "state": [["N", "112"], ["i", "205"]]}, {"line": 2, "state": [["N", "112"], ["i", "205"]]}, {"line": 1, "state": [["N", "112"], ["i", "206"]]}, {"line": 2, "state": [["N", "112"], ["i", "206"]]}, {"line": 1, "state": [["N", "112"], ["i", "207"]]}, {"line": 2, "state": [["N", "112"], ["i", "207"]]}, {"line": 1, "state": [["N", "112"], ["i", "208"]]}, {"line": 2, "state": [["N", "112"], ["i", "208"]]}, {"line": 1, "state": [["N", "112"], ["i", "209"]]}, {"line": 2, "state": [["N", "112"], ["i", "209"]]}, {"line": 1, "state": [["N", "112"], ["i", "210"]]}, {"line": 2, "state": [["N", "112"], ["i", "210"]]}, {"line": 1, "state": [["N", "112"], ["i", "211"]]}, {"line": 2, "state": [["N", "112"], ["i", "211"]]}, {"line": 1, "state": [["N", "112"], ["i", "212"]]}, {"line": 2, "state": [["N", "112"], ["i", "212"]]}, {"line": 1, "state": [["N", "112"], ["i", "213"]]}, {"line": 2, "state": [["N", "112"], ["i", "213"]]}, {"line": 1, "state": [["N", "112"], ["i", "214"]]}, {"line": 2, "state": [["N", "112"], ["i", "214"]]}, {"line": 1, "state": [["N", "112"], ["i", "215"]]}, {"line": 2, "state": [["N", "112"], ["i", "215"]]}, {"line": 1, "state": [["N", "112"], ["i", "216"]]}, {"line": 2, "state": [["N", "112"], ["i", "216"]]}, {"line": 1, "state": [["N", "112"], ["i", "217"]]}, {"line": 2, "state": [["N", "112"], ["i", "217"]]}, {"line": 1, "state": [["N", "112"], ["i", "218"]]}, {"line": 2, "state": [["N", "112"], ["i", "218"]]}, {"line": 1, "state": [["N", "112"], ["i", "219"]]}, {"line": 2, "state": [["N", "112"], ["i", "219"]]}, {"line": 1, "state": [["N", "112"], ["i", "220"]]}, {"line": 2, "state": [["N", "112"], ["i", "220"]]}, {"line": 1, "state": [["N", "112"], ["i", "221"]]}, {"line": 2, "state": [["N", "112"], ["i", "221"]]}, {"line": 1, "state": [["N", "112"], ["i", "222"]]}, {"line": 2, "state": [["N", "112"], ["i", "222"]]}, {"line": 3, "state": [["N", "112"], ["i", "222"]]}, {"line": 4, "state": [["N", "112"], ["i", "222"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "2": [[2, 1, 0], [2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "3": [[3, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "4": [[4]]}}
{"id": 4541, "code": "String s = \"smiles\";\nString ans = s.charAt(0) + String.valueOf(s.length() - 2) + s.charAt(s.length() - 1);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "String", "ans", "=", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["ans", "s4s"]]}, {"line": 2, "state": [["s", "smiles"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 6000, "code": "Scanner scanner = new Scanner(System.in);\nint N = 100;\nif (N % 2 == 1) {\nSystem.out.println(N / 2 + 1);} else {\nSystem.out.println(N / 2);}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "100", ";", "<2>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "N", "/", "2", "+", "1", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "N", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "100"]]}, {"line": 2, "state": [["N", "100"]]}, {"line": 5, "state": [["N", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5, 2, 1]]}}
{"id": 4033, "code": "int H1 = 10, M1 = 0, H2 = 12, M2 = 0, K = 120;\nM1 += H1 * 60;\nM2 += H2 * 60;\nSystem.out.println(M2 - M1 - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "12", ",", "M2", "=", "0", ",", "K", "=", "120", ";", "<1>", "M1", "+=", "H1", "*", "60", ";", "<2>", "M2", "+=", "H2", "*", "60", ";", "<3>", "System", ".", "out", ".", "println", "(", "M2", "-", "M1", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "600"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "600"], ["H2", "12"], ["M2", "720"], ["K", "120"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "600"], ["H2", "12"], ["M2", "720"], ["K", "120"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 3349, "code": "Scanner scanner = new Scanner(System.in);\nint A = 12, B = 4;\nSystem.out.println(Math.max(0, A - 2 * B));", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "A", "=", "12", ",", "B", "=", "4", ";", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "A", "-", "2", "*", "B", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["A", "12"], ["B", "4"]]}, {"line": 3, "state": [["A", "12"], ["B", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]]}}
{"id": 9589, "code": "String s = \"2017/01/31\";\nSystem.out.println(s.replace(s.substring(0, 4), \"2018\"));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "replace", "(", "s", ".", "substring", "(", "0", ",", "4", ")", ",", "\"2018\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15828, "code": "int x = 12, y = 3, z = 1;\nint res = (x - z) / (y + z);\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "res", "=", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["res", "2"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["res", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 14433, "code": "int N = 9;\nint[] A = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint cnt = 1;\nboolean top = true;\nfor (int i = 1; i < N; i++) {\nif (A[i] == A[i - 1]) {\ncontinue;}\nif (top == true) {\nboolean inc = (A[i] > A[i - 1]);\ntop = false;\ncontinue;}\nboolean flag = (A[i] > A[i - 1]);\nif (inc != flag) {\ncnt++;\ntop = true;}}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "N", "=", "9", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "cnt", "=", "1", ";", "<3>", "boolean", "top", "=", "true", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "A", "[", "i", "]", "==", "A", "[", "i", "-", "1", "]", ")", "{", "<6>", "continue", ";", "}", "<7>", "if", "(", "top", "==", "true", ")", "{", "<8>", "boolean", "inc", "=", "(", "A", "[", "i", "]", ">", "A", "[", "i", "-", "1", "]", ")", ";", "<9>", "top", "=", "false", ";", "<10>", "continue", ";", "}", "<11>", "boolean", "flag", "=", "(", "A", "[", "i", "]", ">", "A", "[", "i", "-", "1", "]", ")", ";", "<12>", "if", "(", "inc", "!=", "flag", ")", "{", "<13>", "cnt", "++", ";", "<14>", "top", "=", "true", ";", "}", "}", "<15>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["N", "9"]]}, {"line": 1, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"]]}, {"line": 3, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "True"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "True"], ["i", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "True"], ["i", "1"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "True"], ["i", "1"]]}, {"line": 8, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "True"], ["i", "1"], ["inc", "True"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "1"], ["inc", "True"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "1"], ["inc", "True"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "2"], ["inc", "True"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "2"], ["inc", "True"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "2"], ["inc", "True"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "2"], ["inc", "True"], ["flag", "False"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "1"], ["top", "False"], ["i", "2"], ["inc", "True"], ["flag", "False"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "2"], ["inc", "True"], ["flag", "False"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "True"], ["i", "2"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "True"], ["i", "3"], ["inc", "True"], ["flag", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "True"], ["i", "3"], ["inc", "True"], ["flag", "False"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "True"], ["i", "3"], ["inc", "True"], ["flag", "False"]]}, {"line": 8, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "True"], ["i", "3"], ["inc", "True"], ["flag", "False"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "3"], ["inc", "True"], ["flag", "False"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "3"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "2"], ["top", "False"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "True"], ["i", "4"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "True"], ["i", "5"], ["inc", "True"], ["flag", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "True"], ["i", "5"], ["inc", "True"], ["flag", "False"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "True"], ["i", "5"], ["inc", "True"], ["flag", "False"]]}, {"line": 8, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "True"], ["i", "5"], ["inc", "True"], ["flag", "False"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "5"], ["inc", "True"], ["flag", "False"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "5"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "3"], ["top", "False"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "True"], ["i", "6"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "True"], ["i", "7"], ["inc", "True"], ["flag", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "True"], ["i", "7"], ["inc", "True"], ["flag", "False"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "True"], ["i", "7"], ["inc", "True"], ["flag", "False"]]}, {"line": 8, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "True"], ["i", "7"], ["inc", "True"], ["flag", "False"]]}, {"line": 9, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "7"], ["inc", "True"], ["flag", "False"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "7"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "4"], ["top", "False"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["top", "False"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["top", "True"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["top", "True"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}, {"line": 15, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["cnt", "5"], ["top", "True"], ["i", "8"], ["inc", "True"], ["flag", "False"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 8, 5, 4, 0], [4, 11, 5, 4, 8, 5, 4, 0], [4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 8, 5, 4, 0], [5, 4, 11, 5, 4, 8, 5, 4, 0], [5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0]], "7": [[7, 3], [7, 9, 7, 3], [7, 14, 7, 9, 7, 3], [7, 9, 7, 14, 7, 9, 7, 3], [7, 14, 7, 9, 7, 14, 7, 9, 7, 3], [7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3], [7, 14, 7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3], [7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3]], "8": [[8, 5, 4, 0], [8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0]], "9": [[9, 7, 3], [9, 7, 14, 7, 9, 7, 3], [9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3], [9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3]], "10": [[10], [10], [10], [10]], "11": [[11, 5, 4, 8, 5, 4, 0], [11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0]], "12": [[12, 11, 5, 4, 8, 5, 4, 0], [12, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [12, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0], [12, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 11, 5, 4, 8, 5, 4, 0]], "13": [[13, 2], [13, 2], [13, 2], [13, 2]], "14": [[14, 7, 9, 7, 3], [14, 7, 9, 7, 14, 7, 9, 7, 3], [14, 7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3], [14, 7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 14, 7, 9, 7, 3]], "15": [[15, 13, 2]]}}
{"id": 11609, "code": "String[] li = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nString S = \"SUN\";\nint rest = 7 - java.util.Arrays.asList(li).indexOf(S);\nSystem.out.println(rest);", "code_tokens": ["<0>", "String", "[", "]", "li", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "String", "S", "=", "\"SUN\"", ";", "<2>", "int", "rest", "=", "7", "-", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "li", ")", ".", "indexOf", "(", "S", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "rest", ")", ";"], "trace": [{"line": 0, "state": [["li", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["li", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SUN"]]}, {"line": 2, "state": [["li", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SUN"], ["rest", "7"]]}, {"line": 3, "state": [["li", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["S", "SUN"], ["rest", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 17343, "code": "String a = \"H\";String b = \"H\";\nif (a.equals(b)) {\nSystem.out.println(\"H\");}\nelse if (!a.equals(b)) {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "b", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "if", "(", "!", "a", ".", "equals", "(", "b", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 16081, "code": "int[] a = {20, 30};\nint x = a[1] * 2;\nif (x >= a[0]) {\nSystem.out.println(0);\n} else {\nSystem.out.println(a[0] - x);}", "code_tokens": ["<0>", "int", "[", "]", "a", "=", "{", "20", ",", "30", "}", ";", "<1>", "int", "x", "=", "a", "[", "1", "]", "*", "2", ";", "<2>", "if", "(", "x", ">=", "a", "[", "0", "]", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "a", "[", "0", "]", "-", "x", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "[ 20 , 30 ]"]]}, {"line": 1, "state": [["a", "[ 20 , 30 ]"], ["x", "60"]]}, {"line": 2, "state": [["a", "[ 20 , 30 ]"], ["x", "60"]]}, {"line": 3, "state": [["a", "[ 20 , 30 ]"], ["x", "60"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 15424, "code": "int x = 13, y = 3, z = 1;\nint seated = z;\nint cnt = 0;\nwhile (true) {\nseated += (y + z);\nif (seated > x) {\nbreak;}\ncnt += 1;}\nSystem.out.println(cnt);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "seated", "=", "z", ";", "<2>", "int", "cnt", "=", "0", ";", "<3>", "while", "(", "true", ")", "{", "<4>", "seated", "+=", "(", "y", "+", "z", ")", ";", "<5>", "if", "(", "seated", ">", "x", ")", "{", "<6>", "break", ";", "}", "<7>", "cnt", "+=", "1", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "1"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "1"], ["cnt", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "1"], ["cnt", "0"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "5"], ["cnt", "0"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "5"], ["cnt", "0"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "5"], ["cnt", "1"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "9"], ["cnt", "1"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "9"], ["cnt", "1"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "9"], ["cnt", "2"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "13"], ["cnt", "2"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "13"], ["cnt", "2"]]}, {"line": 7, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "13"], ["cnt", "3"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "17"], ["cnt", "3"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "17"], ["cnt", "3"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "17"], ["cnt", "3"]]}, {"line": 8, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["seated", "17"], ["cnt", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0], [4, 5, 4, 1, 0], [4, 5, 4, 5, 4, 1, 0], [4, 5, 4, 5, 4, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 5, 4, 1, 0], [5, 4, 5, 4, 5, 4, 1, 0], [5, 4, 5, 4, 5, 4, 5, 4, 1, 0]], "6": [[6]], "7": [[7, 2], [7, 2], [7, 2]], "8": [[8, 7, 2]]}}
{"id": 8425, "code": "int N = 4;\nint[] A = {1, 1, 1, 1};\nint[] B = {1, 1, 1, 1};\nint max = -1;\nfor (int i = 0; i < N; i++) {\nint sum = 0;\nfor (int k = 0; k <= i; k++) {\nsum += A[k];}\nfor (int k = i; k < N; k++) {\nsum += B[k];}\nif (sum > max) {\nmax = sum;}}\nSystem.out.println(max);", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "max", "=", "-", "1", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "sum", "=", "0", ";", "<6>", "for", "(", "int", "k", "=", "0", ";", "k", "<=", "i", ";", "k", "++", ")", "{", "<7>", "sum", "+=", "A", "[", "k", "]", ";", "}", "<8>", "for", "(", "int", "k", "=", "i", ";", "k", "<", "N", ";", "k", "++", ")", "{", "<9>", "sum", "+=", "B", "[", "k", "]", ";", "}", "<10>", "if", "(", "sum", ">", "max", ")", "{", "<11>", "max", "=", "sum", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "max", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"]]}, {"line": 1, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "0"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "0"], ["k", "0"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "1"], ["k", "0"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "1"], ["k", "0"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "1"], ["k", "0"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "2"], ["k", "0"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "2"], ["k", "1"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "3"], ["k", "1"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "3"], ["k", "2"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "4"], ["k", "2"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "4"], ["k", "3"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "5"], ["k", "3"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "5"], ["k", "3"]]}, {"line": 10, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "-1"], ["i", "0"], ["sum", "5"], ["k", "3"]]}, {"line": 11, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "0"], ["sum", "5"], ["k", "3"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "5"], ["k", "3"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "0"], ["k", "3"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "0"], ["k", "0"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "1"], ["k", "0"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "1"], ["k", "1"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "2"], ["k", "1"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "2"], ["k", "1"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "2"], ["k", "1"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "3"], ["k", "1"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "3"], ["k", "2"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "4"], ["k", "2"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "4"], ["k", "3"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "5"], ["k", "3"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "5"], ["k", "3"]]}, {"line": 10, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "1"], ["sum", "5"], ["k", "3"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "5"], ["k", "3"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "0"], ["k", "3"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "0"], ["k", "0"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "1"], ["k", "0"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "1"], ["k", "1"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "2"], ["k", "1"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "2"], ["k", "2"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "3"], ["k", "2"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "3"], ["k", "2"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "3"], ["k", "2"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "4"], ["k", "2"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "4"], ["k", "3"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "5"], ["k", "3"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "5"], ["k", "3"]]}, {"line": 10, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "2"], ["sum", "5"], ["k", "3"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "5"], ["k", "3"]]}, {"line": 5, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "0"], ["k", "3"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "0"], ["k", "0"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "1"], ["k", "0"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "1"], ["k", "1"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "2"], ["k", "1"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "2"], ["k", "2"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "3"], ["k", "2"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "3"], ["k", "3"]]}, {"line": 7, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "4"], ["k", "3"]]}, {"line": 6, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "4"], ["k", "3"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "4"], ["k", "3"]]}, {"line": 9, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "5"], ["k", "3"]]}, {"line": 8, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "5"], ["k", "3"]]}, {"line": 10, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "5"], ["k", "3"]]}, {"line": 4, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "5"], ["k", "3"]]}, {"line": 12, "state": [["N", "4"], ["A", "[ 1 , 1 , 1 , 1 ]"], ["B", "[ 1 , 1 , 1 , 1 ]"], ["max", "5"], ["i", "3"], ["sum", "5"], ["k", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "5": [[5], [5, 11, 10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [5, 10, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [5, 10, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "6": [[6, 4, 0], [6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "7": [[7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "8": [[8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "9": [[9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "10": [[10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "11": [[11, 10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "12": [[12, 10, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]]}}
{"id": 5773, "code": "int n = 5;\nSystem.out.println((n / 2) + (n % 2 != 0 ? 1 : 0));", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "n", "/", "2", ")", "+", "(", "n", "%", "2", "!=", "0", "?", "1", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9020, "code": "int a = 1, b = 2, c = 4, d = 8, e = 9, k = 15;\nif (e - a <= k) {System.out.println(\"Yay!\");\n} else {System.out.println(\":(\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ",", "b", "=", "2", ",", "c", "=", "4", ",", "d", "=", "8", ",", "e", "=", "9", ",", "k", "=", "15", ";", "<1>", "if", "(", "e", "-", "a", "<=", "k", ")", "{", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "<2>", "}", "else", "{", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 1, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 17480, "code": "String S = \"1700\";\nif (1 <= Integer.parseInt(S.substring(0, 2)) && Integer.parseInt(S.substring(0, 2)) <= 12) {\nif (1 <= Integer.parseInt(S.substring(2)) && Integer.parseInt(S.substring(2)) <= 12) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse {\nif (1 <= Integer.parseInt(S.substring(2)) && Integer.parseInt(S.substring(2)) <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "S", "=", "\"1700\"", ";", "<1>", "if", "(", "1", "<=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "0", ",", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "0", ",", "2", ")", ")", "<=", "12", ")", "{", "<2>", "if", "(", "1", "<=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "2", ")", ")", "<=", "12", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<6>", "else", "{", "<7>", "if", "(", "1", "<=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "2", ")", ")", "&&", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "2", ")", ")", "<=", "12", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "1700"]]}, {"line": 1, "state": [["S", "1700"]]}, {"line": 7, "state": [["S", "1700"]]}, {"line": 10, "state": [["S", "1700"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "7": [[7, 1, 0]], "10": [[10]]}}
{"id": 17361, "code": "String a = \"H\"; String b = \"H\";\njava.util.Map<String, String> t = new java.util.HashMap<>();t.put(\"HH\", \"H\");t.put(\"HD\", \"D\");t.put(\"DH\", \"D\");t.put(\"DD\", \"H\");\nSystem.out.println(t.get(a + b));", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "java", ".", "util", ".", "Map", "<", "String", ",", "String", ">", "t", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "t", ".", "put", "(", "\"HH\"", ",", "\"H\"", ")", ";", "t", ".", "put", "(", "\"HD\"", ",", "\"D\"", ")", ";", "t", ".", "put", "(", "\"DH\"", ",", "\"D\"", ")", ";", "t", ".", "put", "(", "\"DD\"", ",", "\"H\"", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "t", ".", "get", "(", "a", "+", "b", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"], ["t", "{ HH"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"], ["t", "{ HH"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 5400, "code": "int S = 100;\nint q = S / 2;int mod = S % 2;\nSystem.out.println(q + mod);", "code_tokens": ["<0>", "int", "S", "=", "100", ";", "<1>", "int", "q", "=", "S", "/", "2", ";", "int", "mod", "=", "S", "%", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "q", "+", "mod", ")", ";"], "trace": [{"line": 0, "state": [["S", "100"]]}, {"line": 1, "state": [["S", "100"], ["q", "50"], ["mod", "0"]]}, {"line": 2, "state": [["S", "100"], ["q", "50"], ["mod", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 7794, "code": "int N = 3, K = 3;\nint[] A = {1, 2, 3};\nSystem.out.println((int) Math.ceil((double)(N - 1) / (K - 1)));", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "(", "N", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"], ["K", "3"]]}, {"line": 2, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["N", "3"], ["K", "3"], ["A", "[ 1 , 2 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]]}}
{"id": 58, "code": "String s = \"a\";\nint k = 25;\nStringBuilder ans = new StringBuilder();\nfor (int i = 0; i < s.length() - 1; i++) {char c = s.charAt(i);\nint to_a = ('z' - c + 1) % 26;\nif (k < to_a) {\nans.append(c);}\nelse {\nk -= to_a;\nans.append('a');}}\n{\nchar c = s.charAt(s.length() - 1);\nint x = c - 'a';\nint y = (k + x) % 26;\nans.append((char) ('a' + y));}\nSystem.out.println(ans.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "k", "=", "25", ";", "<2>", "StringBuilder", "ans", "=", "new", "StringBuilder", "(", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "1", ";", "i", "++", ")", "{", "char", "c", "=", "s", ".", "charAt", "(", "i", ")", ";", "<4>", "int", "to_a", "=", "(", "'z'", "-", "c", "+", "1", ")", "%", "26", ";", "<5>", "if", "(", "k", "<", "to_a", ")", "{", "<6>", "ans", ".", "append", "(", "c", ")", ";", "}", "<7>", "else", "{", "<8>", "k", "-=", "to_a", ";", "<9>", "ans", ".", "append", "(", "'a'", ")", ";", "}", "}", "<10>", "{", "<11>", "char", "c", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<12>", "int", "x", "=", "c", "-", "'a'", ";", "<13>", "int", "y", "=", "(", "k", "+", "x", ")", "%", "26", ";", "<14>", "ans", ".", "append", "(", "(", "char", ")", "(", "'a'", "+", "y", ")", ")", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "ans", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["k", "25"]]}, {"line": 2, "state": [["s", "a"], ["k", "25"], ["ans", "[ ]"]]}, {"line": 3, "state": [["s", "a"], ["k", "25"], ["ans", "[ ]"]]}, {"line": 11, "state": [["s", "a"], ["k", "25"], ["ans", "[ ]"], ["c", "a"]]}, {"line": 12, "state": [["s", "a"], ["k", "25"], ["ans", "[ ]"], ["c", "a"], ["x", "0"]]}, {"line": 13, "state": [["s", "a"], ["k", "25"], ["ans", "[ ]"], ["c", "a"], ["x", "0"], ["y", "25"]]}, {"line": 14, "state": [["s", "a"], ["k", "25"], ["ans", "[ z ]"], ["c", "a"], ["x", "0"], ["y", "25"]]}, {"line": 15, "state": [["s", "a"], ["k", "25"], ["ans", "[ z ]"], ["c", "a"], ["x", "0"], ["y", "25"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "11": [[11, 3, 0]], "12": [[12, 11, 3, 0]], "13": [[13, 12, 11, 3, 0]], "14": [[14, 13, 12, 11, 3, 0]], "15": [[15, 14, 13, 12, 11, 3, 0]]}}
{"id": 7581, "code": "int h = 10, n = 3;\nint[] a = {4, 5, 6};\nSystem.out.println((sum(a) < h) ? \"No\" : \"Yes\");", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "sum", "(", "a", ")", "<", "h", ")", "?", "\"No\"", ":", "\"Yes\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "10"], ["n", "3"]]}, {"line": 1, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 3552, "code": "int A = 20, B = 30;\nB *= 2;\nif (A <= B) {\nSystem.out.println(0);\n} else {\nSystem.out.println(A - B);}", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "B", "*=", "2", ";", "<2>", "if", "(", "A", "<=", "B", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "A", "-", "B", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "60"]]}, {"line": 2, "state": [["A", "20"], ["B", "60"]]}, {"line": 3, "state": [["A", "20"], ["B", "60"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 1453, "code": "int N = 111;\nSystem.out.println(111 * (int)Math.ceil(N / 111.0));", "code_tokens": ["<0>", "int", "N", "=", "111", ";", "<1>", "System", ".", "out", ".", "println", "(", "111", "*", "(", "int", ")", "Math", ".", "ceil", "(", "N", "/", "111.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "111"]]}, {"line": 2, "state": [["N", "111"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 7988, "code": "int n = 8, k = 3;\nint[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nint count = 1;\nn = n - k;\nwhile (n > 0) {\nn = n - (k - 1);\ncount += 1;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "int", "count", "=", "1", ";", "<3>", "n", "=", "n", "-", "k", ";", "<4>", "while", "(", "n", ">", "0", ")", "{", "<5>", "n", "=", "n", "-", "(", "k", "-", "1", ")", ";", "<6>", "count", "+=", "1", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 3, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 4, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 5, "state": [["n", "3"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 6, "state": [["n", "3"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 5, "state": [["n", "1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 6, "state": [["n", "1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 4, "state": [["n", "1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 5, "state": [["n", "-1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 6, "state": [["n", "-1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "4"]]}, {"line": 4, "state": [["n", "-1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "4"]]}, {"line": 7, "state": [["n", "-1"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0], [4, 5, 4, 3, 0], [4, 5, 4, 5, 4, 3, 0], [4, 5, 4, 5, 4, 5, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 5, 4, 3, 0], [5, 4, 5, 4, 5, 4, 3, 0]], "6": [[6, 2], [6, 2], [6, 2]], "7": [[7, 6, 2]]}}
{"id": 4468, "code": "String s = \"internationalization\";\nSystem.out.print(s.charAt(0));System.out.print(s.length() - 2);System.out.print(s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "0", ")", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9494, "code": "System.out.println(\"2018/01/\" + \"2017/01/07\".substring(8));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2018/01/\"", "+", "\"2017/01/07\"", ".", "substring", "(", "8", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 9572, "code": "String y = \"2017\"; String m = \"01\"; String d = \"07\";\nSystem.out.println((Integer.parseInt(y) + 1) + \"/\" + m + \"/\" + d);", "code_tokens": ["<0>", "String", "y", "=", "\"2017\"", ";", "String", "m", "=", "\"01\"", ";", "String", "d", "=", "\"07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "Integer", ".", "parseInt", "(", "y", ")", "+", "1", ")", "+", "\"/\"", "+", "m", "+", "\"/\"", "+", "d", ")", ";"], "trace": [{"line": 0, "state": [["y", "2017"], ["m", "01"], ["d", "07"]]}, {"line": 1, "state": [["y", "2017"], ["m", "01"], ["d", "07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8104, "code": "int n = 8, k = 3;\nint[] a = {7, 3, 1, 8, 4, 6, 2, 5};\nint aa = Integer.MAX_VALUE;for (int value : a) {if (value < aa) {aa = value;}}\nn -= k;\nint q = 0;\nif (n % (k - 1) == 0) {\nq += n / (k - 1);}\nelse {\nq += n / (k - 1) + 1;}\nSystem.out.println(q + 1);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "int", "aa", "=", "Integer", ".", "MAX_VALUE", ";", "for", "(", "int", "value", ":", "a", ")", "{", "if", "(", "value", "<", "aa", ")", "{", "aa", "=", "value", ";", "}", "}", "<3>", "n", "-=", "k", ";", "<4>", "int", "q", "=", "0", ";", "<5>", "if", "(", "n", "%", "(", "k", "-", "1", ")", "==", "0", ")", "{", "<6>", "q", "+=", "n", "/", "(", "k", "-", "1", ")", ";", "}", "<7>", "else", "{", "<8>", "q", "+=", "n", "/", "(", "k", "-", "1", ")", "+", "1", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "q", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"]]}, {"line": 3, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"]]}, {"line": 4, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"]]}, {"line": 5, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"], ["q", "0"]]}, {"line": 6, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"], ["q", "0"]]}, {"line": 9, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"], ["q", "3"]]}, {"line": 10, "state": [["n", "5"], ["k", "3"], ["a", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["aa", "1"], ["q", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 0]], "4": [[4]], "5": [[5]], "6": [[6, 3, 0]], "9": [[9, 6, 3, 0]], "10": [[10, 9, 6, 3, 0]]}}
{"id": 3582, "code": "int a = 20, b = 30;\nif (b * 2 >= a) {\nSystem.out.println(\"0\");}\nelse {\nSystem.out.println(a - b * 2);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<1>", "if", "(", "b", "*", "2", ">=", "a", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "a", "-", "b", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 4871, "code": "String s = \"smiles\";\nString answer = \"\";\nchar[] sArray = s.toCharArray();\nanswer = sArray[0] + String.valueOf(sArray.length - 2) + sArray[sArray.length - 1];\nSystem.out.println(answer);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "String", "answer", "=", "\"\"", ";", "<2>", "char", "[", "]", "sArray", "=", "s", ".", "toCharArray", "(", ")", ";", "<3>", "answer", "=", "sArray", "[", "0", "]", "+", "String", ".", "valueOf", "(", "sArray", ".", "length", "-", "2", ")", "+", "sArray", "[", "sArray", ".", "length", "-", "1", "]", ";", "<4>", "System", ".", "out", ".", "println", "(", "answer", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["answer", ""]]}, {"line": 2, "state": [["s", "[ s , m , i , l , e , s ]"], ["answer", ""]]}, {"line": 3, "state": [["s", "[ s , m , i , l , e , s ]"], ["answer", "s4s"]]}, {"line": 4, "state": [["s", "[ s , m , i , l , e , s ]"], ["answer", "s4s"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 16588, "code": "String a = \"D\";String b = \"H\";\nString p = a + b;\nString[] p1 = p.chars().distinct().mapToObj(c -> String.valueOf((char) c)).toArray(String[]::new);\nif (p1.length == 1) {\nSystem.out.println(\"H\");\n} else {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "String", "p", "=", "a", "+", "b", ";", "<2>", "String", "[", "]", "p1", "=", "p", ".", "chars", "(", ")", ".", "distinct", "(", ")", ".", "mapToObj", "(", "c", "->", "String", ".", "valueOf", "(", "(", "char", ")", "c", ")", ")", ".", "toArray", "(", "String", "[", "]", "::", "new", ")", ";", "<3>", "if", "(", "p1", ".", "length", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"], ["p", "DH"]]}, {"line": 2, "state": [["a", "D"], ["b", "H"], ["p", "DH"], ["p1", "[ H , D ]"]]}, {"line": 3, "state": [["a", "D"], ["b", "H"], ["p", "DH"], ["p1", "[ H , D ]"]]}, {"line": 6, "state": [["a", "D"], ["b", "H"], ["p", "DH"], ["p1", "[ H , D ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6]]}}
{"id": 2121, "code": "int n = 100, a = 100, b = 100;\nint ma = Math.min(a, b);\nint mi = Math.max(ma - (n - Math.max(a, b)), 0);\nSystem.out.println(ma + \" \" + mi);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "mi", "=", "Math", ".", "max", "(", "ma", "-", "(", "n", "-", "Math", ".", "max", "(", "a", ",", "b", ")", ")", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "mi", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"], ["mi", "100"]]}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"], ["mi", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 403, "code": "String S = \"codefestival\";\nint K = 100;\nint[] V = new int[S.length()];\nfor (char e : S.toCharArray()) {\nV[S.indexOf(e)] = e - 'a';}\nfor (int i = 0; i < S.length(); i++) {\nif (S.charAt(i) == 'a') {\ncontinue;}\nif (K < 26 - V[i]) {\n}\nelse {\nK -= 26 - V[i];\nV[i] = 0;}}\nV[V.length - 1] += K;\nV[V.length - 1] %= 26;\nStringBuilder result = new StringBuilder();for (int e : V) {result.append((char) (e + 'a'));}\nSystem.out.println(result.toString());", "code_tokens": ["<0>", "String", "S", "=", "\"codefestival\"", ";", "<1>", "int", "K", "=", "100", ";", "<2>", "int", "[", "]", "V", "=", "new", "int", "[", "S", ".", "length", "(", ")", "]", ";", "<3>", "for", "(", "char", "e", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<4>", "V", "[", "S", ".", "indexOf", "(", "e", ")", "]", "=", "e", "-", "'a'", ";", "}", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'a'", ")", "{", "<7>", "continue", ";", "}", "<8>", "if", "(", "K", "<", "26", "-", "V", "[", "i", "]", ")", "{", "<9>", "}", "<10>", "else", "{", "<11>", "K", "-=", "26", "-", "V", "[", "i", "]", ";", "<12>", "V", "[", "i", "]", "=", "0", ";", "}", "}", "<13>", "V", "[", "V", ".", "length", "-", "1", "]", "+=", "K", ";", "<14>", "V", "[", "V", ".", "length", "-", "1", "]", "%=", "26", ";", "<15>", "StringBuilder", "result", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "e", ":", "V", ")", "{", "result", ".", "append", "(", "(", "char", ")", "(", "e", "+", "'a'", ")", ")", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "result", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "codefestival"]]}, {"line": 1, "state": [["S", "codefestival"], ["K", "100"]]}, {"line": 2, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ ]"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ ]"], ["e", "c"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 ]"], ["e", "c"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 ]"], ["e", "o"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 ]"], ["e", "o"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 ]"], ["e", "d"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 ]"], ["e", "d"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 ]"], ["e", "e"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 ]"], ["e", "e"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 ]"], ["e", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 ]"], ["e", "<_io.TextIOWrapper name=result/exec/result_32.json mode=r encoding=utf8>"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 ]"], ["e", "e"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 ]"], ["e", "e"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 ]"], ["e", "s"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 ]"], ["e", "s"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 ]"], ["e", "t"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 ]"], ["e", "t"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 ]"], ["e", "3"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 ]"], ["e", "3"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 ]"], ["e", "v"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 ]"], ["e", "v"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 ]"], ["e", "a"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 ]"], ["e", "a"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 ]"], ["e", "l"]]}, {"line": 4, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"]]}, {"line": 3, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "0"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "0"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "100"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "0"]]}, {"line": 11, "state": [["S", "codefestival"], ["K", "76"], ["V", "[ 2 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "0"]]}, {"line": 12, "state": [["S", "codefestival"], ["K", "76"], ["V", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "0"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "76"], ["V", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "1"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "76"], ["V", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "1"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "76"], ["V", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "1"]]}, {"line": 11, "state": [["S", "codefestival"], ["K", "64"], ["V", "[ 0 , 14 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "1"]]}, {"line": 12, "state": [["S", "codefestival"], ["K", "64"], ["V", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "1"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "64"], ["V", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "2"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "64"], ["V", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "2"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "64"], ["V", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "2"]]}, {"line": 11, "state": [["S", "codefestival"], ["K", "41"], ["V", "[ 0 , 0 , 3 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "2"]]}, {"line": 12, "state": [["S", "codefestival"], ["K", "41"], ["V", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "2"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "41"], ["V", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "3"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "41"], ["V", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "3"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "41"], ["V", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "3"]]}, {"line": 11, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 4 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "3"]]}, {"line": 12, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "3"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "4"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "4"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "4"]]}, {"line": 9, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "4"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "5"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "5"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "5"]]}, {"line": 9, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "5"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "6"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "6"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "19"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "6"]]}, {"line": 11, "state": [["S", "codefestival"], ["K", "11"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 18 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "6"]]}, {"line": 12, "state": [["S", "codefestival"], ["K", "11"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "6"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "11"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "7"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "11"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "7"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "11"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "7"]]}, {"line": 11, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 19 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "7"]]}, {"line": 12, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "7"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "8"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "8"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "8"]]}, {"line": 9, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "8"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "9"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "9"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "9"]]}, {"line": 9, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "9"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "10"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "10"]]}, {"line": 7, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "10"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "11"]]}, {"line": 6, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "11"]]}, {"line": 8, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "11"]]}, {"line": 9, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "11"]]}, {"line": 5, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 11 ]"], ["e", "l"], ["i", "11"]]}, {"line": 13, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 15 ]"], ["e", "l"], ["i", "11"]]}, {"line": 14, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ 0 , 0 , 0 , 0 , 5 , 4 , 0 , 0 , 8 , 21 , 0 , 15 ]"], ["e", "l"], ["i", "11"]]}, {"line": 15, "state": []}, {"line": 15, "state": []}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "5"]]}, {"line": 15, "state": [["e", "4"]]}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "8"]]}, {"line": 15, "state": [["e", "21"]]}, {"line": 15, "state": [["e", "0"]]}, {"line": 15, "state": [["e", "15"]]}, {"line": 15, "state": [["e", "15"]]}, {"line": 15, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["e", "l"], ["i", "11"]]}, {"line": 16, "state": [["S", "codefestival"], ["K", "4"], ["V", "[ a , a , a , a , f , e , a , a , i , v , a , p ]"], ["e", "l"], ["i", "11"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [5, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "6": [[6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "7": [[7]], "8": [[8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "9": [[9], [9], [9], [9], [9]], "11": [[11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "12": [[12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "13": [[13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "14": [[14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "15": [[15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "16": [[16, 15, 14, 13, 8, 6, 5, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 8, 6, 5, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 12, 11, 8, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]]}}
{"id": 18991, "code": "String n = \"5\";\nint m = n.length();\nn = Integer.parseInt(n);\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse {\nif (m == 1) {\nSystem.out.println(0);}\nelse {\nint ans = 0;\nint i = 1;\nwhile (true) {\nint ans_plus = n / (2 * (int) Math.pow(5, i));\nif (ans_plus == 0) {\nbreak;}\nans += ans_plus;\ni += 1;}\nSystem.out.println(ans);}}", "code_tokens": ["<0>", "String", "n", "=", "\"5\"", ";", "<1>", "int", "m", "=", "n", ".", "length", "(", ")", ";", "<2>", "n", "=", "Integer", ".", "parseInt", "(", "n", ")", ";", "<3>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<5>", "else", "{", "<6>", "if", "(", "m", "==", "1", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<8>", "else", "{", "<9>", "int", "ans", "=", "0", ";", "<10>", "int", "i", "=", "1", ";", "<11>", "while", "(", "true", ")", "{", "<12>", "int", "ans_plus", "=", "n", "/", "(", "2", "*", "(", "int", ")", "Math", ".", "pow", "(", "5", ",", "i", ")", ")", ";", "<13>", "if", "(", "ans_plus", "==", "0", ")", "{", "<14>", "break", ";", "}", "<15>", "ans", "+=", "ans_plus", ";", "<16>", "i", "+=", "1", ";", "}", "<17>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["m", "1"]]}, {"line": 2, "state": [["n", "5"], ["m", "1"]]}, {"line": 3, "state": [["n", "5"], ["m", "1"]]}, {"line": 4, "state": [["n", "5"], ["m", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4]]}}
{"id": 11336, "code": "String S = \"SAT\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(7);}\nif (S.equals(\"MON\")) {\nSystem.out.println(6);}\nif (S.equals(\"TUE\")) {\nSystem.out.println(5);}\nif (S.equals(\"WED\")) {\nSystem.out.println(4);}\nif (S.equals(\"THU\")) {\nSystem.out.println(3);}\nif (S.equals(\"FRI\")) {\nSystem.out.println(2);}\nif (S.equals(\"SAT\")) {\nSystem.out.println(1);}", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<3>", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "6", ")", ";", "}", "<5>", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "5", ")", ";", "}", "<7>", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "4", ")", ";", "}", "<9>", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "3", ")", ";", "}", "<11>", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "2", ")", ";", "}", "<13>", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["S", "SAT"]]}, {"line": 2, "state": [["S", "SAT"]]}, {"line": 4, "state": [["S", "SAT"]]}, {"line": 6, "state": [["S", "SAT"]]}, {"line": 8, "state": [["S", "SAT"]]}, {"line": 10, "state": [["S", "SAT"]]}, {"line": 12, "state": [["S", "SAT"]]}, {"line": 14, "state": [["S", "SAT"]]}, {"line": 15, "state": [["S", "SAT"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "4": [[4, 2, 1]], "6": [[6, 4, 2, 1]], "8": [[8, 6, 4, 2, 1]], "10": [[10, 8, 6, 4, 2, 1]], "12": [[12, 10, 8, 6, 4, 2, 1]], "14": [[14, 12, 10, 8, 6, 4, 2, 1]], "15": [[15]]}}
{"id": 14093, "code": "int n = 6;\nint[] A = {1, 2, 3, 2, 2, 1};\nArrayList<Integer> B = new ArrayList<>();\nfor (int a : A) {\nif (!B.isEmpty()) {\nif (B.get(B.size() - 1).equals(a)) {\ncontinue;}\nelse {\nB.add(a);}}\nelse {\nB.add(a);}}\nint m = B.size();\nArrayList<Integer> X = new ArrayList<>();\nfor (int i = 0; i < m; i++) {\nif (i == 0) {\nint cur = B.get(0);\nint cnt = 1;\nint flag = 0;\n} else {\nif (flag == 0) {\nif (B.get(i) > cur) {\nflag = 1;\ncnt++;\ncur = B.get(i);}\nif (B.get(i) < cur) {\nflag = -1;\ncnt++;\ncur = B.get(i);}}\nelse if (flag == 1) {\nif (B.get(i) > cur) {\ncnt++;\ncur = B.get(i);}\nelse {\nX.add(cnt);\ncur = B.get(i);\ncnt = 1;\nflag = 0;}}\nelse {\nif (B.get(i) < cur) {\ncnt++;\ncur = B.get(i);}\nelse {\nX.add(cnt);\ncur = B.get(i);\ncnt = 1;\nflag = 0;}}}}\nelse {\nX.add(cnt);}\nSystem.out.println(X.size());", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "ArrayList", "<", "Integer", ">", "B", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<3>", "for", "(", "int", "a", ":", "A", ")", "{", "<4>", "if", "(", "!", "B", ".", "isEmpty", "(", ")", ")", "{", "<5>", "if", "(", "B", ".", "get", "(", "B", ".", "size", "(", ")", "-", "1", ")", ".", "equals", "(", "a", ")", ")", "{", "<6>", "continue", ";", "}", "<7>", "else", "{", "<8>", "B", ".", "add", "(", "a", ")", ";", "}", "}", "<9>", "else", "{", "<10>", "B", ".", "add", "(", "a", ")", ";", "}", "}", "<11>", "int", "m", "=", "B", ".", "size", "(", ")", ";", "<12>", "ArrayList", "<", "Integer", ">", "X", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "<14>", "if", "(", "i", "==", "0", ")", "{", "<15>", "int", "cur", "=", "B", ".", "get", "(", "0", ")", ";", "<16>", "int", "cnt", "=", "1", ";", "<17>", "int", "flag", "=", "0", ";", "<18>", "}", "else", "{", "<19>", "if", "(", "flag", "==", "0", ")", "{", "<20>", "if", "(", "B", ".", "get", "(", "i", ")", ">", "cur", ")", "{", "<21>", "flag", "=", "1", ";", "<22>", "cnt", "++", ";", "<23>", "cur", "=", "B", ".", "get", "(", "i", ")", ";", "}", "<24>", "if", "(", "B", ".", "get", "(", "i", ")", "<", "cur", ")", "{", "<25>", "flag", "=", "-", "1", ";", "<26>", "cnt", "++", ";", "<27>", "cur", "=", "B", ".", "get", "(", "i", ")", ";", "}", "}", "<28>", "else", "if", "(", "flag", "==", "1", ")", "{", "<29>", "if", "(", "B", ".", "get", "(", "i", ")", ">", "cur", ")", "{", "<30>", "cnt", "++", ";", "<31>", "cur", "=", "B", ".", "get", "(", "i", ")", ";", "}", "<32>", "else", "{", "<33>", "X", ".", "add", "(", "cnt", ")", ";", "<34>", "cur", "=", "B", ".", "get", "(", "i", ")", ";", "<35>", "cnt", "=", "1", ";", "<36>", "flag", "=", "0", ";", "}", "}", "<37>", "else", "{", "<38>", "if", "(", "B", ".", "get", "(", "i", ")", "<", "cur", ")", "{", "<39>", "cnt", "++", ";", "<40>", "cur", "=", "B", ".", "get", "(", "i", ")", ";", "}", "<41>", "else", "{", "<42>", "X", ".", "add", "(", "cnt", ")", ";", "<43>", "cur", "=", "B", ".", "get", "(", "i", ")", ";", "<44>", "cnt", "=", "1", ";", "<45>", "flag", "=", "0", ";", "}", "}", "}", "}", "<46>", "else", "{", "<47>", "X", ".", "add", "(", "cnt", ")", ";", "}", "<48>", "System", ".", "out", ".", "println", "(", "X", ".", "size", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ ]"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ ]"], ["a", "1"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ ]"], ["a", "1"]]}, {"line": 10, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 ]"], ["a", "1"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 ]"], ["a", "2"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 ]"], ["a", "2"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 ]"], ["a", "2"]]}, {"line": 8, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 ]"], ["a", "2"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 ]"], ["a", "3"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 ]"], ["a", "3"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 ]"], ["a", "3"]]}, {"line": 8, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 ]"], ["a", "3"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 ]"], ["a", "2"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 ]"], ["a", "2"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 ]"], ["a", "2"]]}, {"line": 8, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "2"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "2"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "2"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "2"]]}, {"line": 6, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "2"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "1"]]}, {"line": 4, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "1"]]}, {"line": 5, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 ]"], ["a", "1"]]}, {"line": 8, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"]]}, {"line": 3, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"]]}, {"line": 11, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"]]}, {"line": 12, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "0"]]}, {"line": 14, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "0"]]}, {"line": 15, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "0"], ["cur", "1"]]}, {"line": 16, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "0"], ["cur", "1"], ["cnt", "1"]]}, {"line": 17, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "0"], ["cur", "1"], ["cnt", "1"], ["flag", "0"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "1"], ["cnt", "1"], ["flag", "0"]]}, {"line": 14, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "1"], ["cnt", "1"], ["flag", "0"]]}, {"line": 19, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "1"], ["cnt", "1"], ["flag", "0"]]}, {"line": 20, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "1"], ["cnt", "1"], ["flag", "0"]]}, {"line": 21, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "1"], ["cnt", "1"], ["flag", "1"]]}, {"line": 22, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "1"], ["cnt", "2"], ["flag", "1"]]}, {"line": 23, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 24, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "1"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 14, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 19, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 28, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 29, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "2"], ["cnt", "2"], ["flag", "1"]]}, {"line": 30, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "2"], ["cnt", "3"], ["flag", "1"]]}, {"line": 31, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "2"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "3"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 14, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "3"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 19, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "3"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 28, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "3"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 29, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ ]"], ["i", "3"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 33, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "3"], ["cur", "3"], ["cnt", "3"], ["flag", "1"]]}, {"line": 34, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "3"], ["cur", "2"], ["cnt", "3"], ["flag", "1"]]}, {"line": 35, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "3"], ["cur", "2"], ["cnt", "1"], ["flag", "1"]]}, {"line": 36, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "3"], ["cur", "2"], ["cnt", "1"], ["flag", "0"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "1"], ["flag", "0"]]}, {"line": 14, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "1"], ["flag", "0"]]}, {"line": 19, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "1"], ["flag", "0"]]}, {"line": 20, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "1"], ["flag", "0"]]}, {"line": 24, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "1"], ["flag", "0"]]}, {"line": 25, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "1"], ["flag", "-1"]]}, {"line": 26, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "2"], ["cnt", "2"], ["flag", "-1"]]}, {"line": 27, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "1"], ["cnt", "2"], ["flag", "-1"]]}, {"line": 13, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 ]"], ["i", "4"], ["cur", "1"], ["cnt", "2"], ["flag", "-1"]]}, {"line": 47, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 , 2 ]"], ["i", "4"], ["cur", "1"], ["cnt", "2"], ["flag", "-1"]]}, {"line": 48, "state": [["n", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["B", "[ 1 , 2 , 3 , 2 , 1 ]"], ["a", "1"], ["m", "5"], ["X", "[ 3 , 2 ]"], ["i", "4"], ["cur", "1"], ["cnt", "2"], ["flag", "-1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 10, 4, 2], [3, 8, 5, 4, 10, 4, 2], [3, 8, 5, 4, 8, 5, 4, 10, 4, 2], [3, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [3, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [3, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "4": [[4, 2], [4, 10, 4, 2], [4, 8, 5, 4, 10, 4, 2], [4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "5": [[5, 4, 10, 4, 2], [5, 4, 8, 5, 4, 10, 4, 2], [5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "6": [[6]], "8": [[8, 5, 4, 10, 4, 2], [8, 5, 4, 8, 5, 4, 10, 4, 2], [8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "10": [[10, 4, 2]], "11": [[11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "12": [[12]], "13": [[13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [13, 34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [13, 27, 24, 20, 14, 13, 34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "14": [[14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [14, 13, 34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "15": [[15, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "16": [[16]], "17": [[17]], "19": [[19, 17], [19, 21, 19, 17], [19, 28, 19, 21, 19, 17], [19, 36, 28, 19, 28, 19, 21, 19, 17]], "20": [[20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [20, 14, 13, 34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "21": [[21, 19, 17]], "22": [[22, 16]], "23": [[23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "24": [[24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [24, 20, 14, 13, 34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "25": [[25, 19, 36, 28, 19, 28, 19, 21, 19, 17]], "26": [[26, 35, 33, 30, 22, 16]], "27": [[27, 24, 20, 14, 13, 34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "28": [[28, 19, 21, 19, 17], [28, 19, 28, 19, 21, 19, 17]], "29": [[29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2], [29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "30": [[30, 22, 16]], "31": [[31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "33": [[33, 30, 22, 16]], "34": [[34, 29, 14, 13, 31, 29, 14, 13, 24, 23, 20, 14, 13, 14, 13, 11, 8, 5, 4, 5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 10, 4, 2]], "35": [[35, 33, 30, 22, 16]], "36": [[36, 28, 19, 28, 19, 21, 19, 17]], "47": [[47, 26, 35, 33, 30, 22, 16]], "48": [[48, 47, 26, 35, 33, 30, 22, 16]]}}
{"id": 1278, "code": "int n = 750;\nint k = n / 100;\nint nex = 111 * k;\nif (nex >= n) {\nSystem.out.println(nex);}\nelse {\nSystem.out.println(nex + 111);}", "code_tokens": ["<0>", "int", "n", "=", "750", ";", "<1>", "int", "k", "=", "n", "/", "100", ";", "<2>", "int", "nex", "=", "111", "*", "k", ";", "<3>", "if", "(", "nex", ">=", "n", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "nex", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "nex", "+", "111", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "750"]]}, {"line": 1, "state": [["n", "750"], ["k", "7"]]}, {"line": 2, "state": [["n", "750"], ["k", "7"], ["nex", "777"]]}, {"line": 3, "state": [["n", "750"], ["k", "7"], ["nex", "777"]]}, {"line": 4, "state": [["n", "750"], ["k", "7"], ["nex", "777"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 2203, "code": "int n = 10, a = 3, b = 5;\nint both_max = Math.min(a, b);\nif (a + b <= n) {\nint both_min = 0;\nSystem.out.println(both_max + \" \" + both_min);} else {\nint both_min = a + b - n;\nSystem.out.println(both_max + \" \" + both_min);}", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "both_max", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "if", "(", "a", "+", "b", "<=", "n", ")", "{", "<3>", "int", "both_min", "=", "0", ";", "<4>", "System", ".", "out", ".", "println", "(", "both_max", "+", "\" \"", "+", "both_min", ")", ";", "}", "else", "{", "<5>", "int", "both_min", "=", "a", "+", "b", "-", "n", ";", "<6>", "System", ".", "out", ".", "println", "(", "both_max", "+", "\" \"", "+", "both_min", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["both_max", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["both_max", "3"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["both_max", "3"], ["both_min", "0"]]}, {"line": 6, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["both_max", "3"], ["both_min", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]], "6": [[6, 3, 1, 0]]}}
{"id": 11510, "code": "String[] days = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint i = 6;\nSystem.out.println(i < 7 ? (7 - i) : 7);", "code_tokens": ["<0>", "String", "[", "]", "days", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<1>", "int", "i", "=", "6", ";", "<2>", "System", ".", "out", ".", "println", "(", "i", "<", "7", "?", "(", "7", "-", "i", ")", ":", "7", ")", ";"], "trace": [{"line": 0, "state": [["days", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 1, "state": [["days", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "6"]]}, {"line": 2, "state": [["days", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 18457, "code": "Scanner scanner = new Scanner(System.in);\nint h = 2;\nint w = 100;\nint n = 200;\nint ans = Math.min((int) Math.ceil((double) n / h), (int) Math.ceil((double) n / w));\nSystem.out.println(ans);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "h", "=", "2", ";", "<2>", "int", "w", "=", "100", ";", "<3>", "int", "n", "=", "200", ";", "<4>", "int", "ans", "=", "Math", ".", "min", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "h", ")", ",", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "w", ")", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": []}, {"line": 5, "state": []}, {"line": 6, "state": [["h", "2"]]}, {"line": 7, "state": [["h", "2"], ["w", "100"]]}, {"line": 8, "state": [["h", "2"], ["w", "100"], ["n", "200"]]}, {"line": 9, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["ans", "2"]]}, {"line": 10, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8]], "9": [[9, 8, 7, 6]], "10": [[10, 9, 8, 7, 6]]}}
{"id": 8802, "code": "int N = 4;\nint[] A1 = {1, 1, 1, 1};\nint[] A2 = {1, 1, 1, 1};\njava.util.List<Integer> ans = new java.util.ArrayList<>();\nfor (int n = 0; n < N; n++) {\nint ame = 0;\nfor (int i = 0; i <= n; i++) {\name += A1[i];}\nfor (int j = n; j < N; j++) {\name += A2[j];}\nans.add(ame);}\nSystem.out.println(java.util.Collections.max(ans));", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "A1", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "java", ".", "util", ".", "List", "<", "Integer", ">", "ans", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "<4>", "for", "(", "int", "n", "=", "0", ";", "n", "<", "N", ";", "n", "++", ")", "{", "<5>", "int", "ame", "=", "0", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "n", ";", "i", "++", ")", "{", "<7>", "ame", "+=", "A1", "[", "i", "]", ";", "}", "<8>", "for", "(", "int", "j", "=", "n", ";", "j", "<", "N", ";", "j", "++", ")", "{", "<9>", "ame", "+=", "A2", "[", "j", "]", ";", "}", "<10>", "ans", ".", "add", "(", "ame", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Collections", ".", "max", "(", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"]]}, {"line": 1, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "0"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "1"], ["i", "0"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "1"], ["i", "0"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "1"], ["i", "0"], ["j", "0"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "2"], ["i", "0"], ["j", "0"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "2"], ["i", "0"], ["j", "1"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "3"], ["i", "0"], ["j", "1"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "3"], ["i", "0"], ["j", "2"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "4"], ["i", "0"], ["j", "2"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "4"], ["i", "0"], ["j", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "5"], ["i", "0"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ ]"], ["n", "0"], ["ame", "5"], ["i", "0"], ["j", "3"]]}, {"line": 10, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "0"], ["ame", "5"], ["i", "0"], ["j", "3"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "5"], ["i", "0"], ["j", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "0"], ["i", "0"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "0"], ["i", "0"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "1"], ["i", "0"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "1"], ["i", "1"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "2"], ["i", "1"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "2"], ["i", "1"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "2"], ["i", "1"], ["j", "1"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "3"], ["i", "1"], ["j", "1"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "3"], ["i", "1"], ["j", "2"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "4"], ["i", "1"], ["j", "2"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "4"], ["i", "1"], ["j", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "5"], ["i", "1"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 ]"], ["n", "1"], ["ame", "5"], ["i", "1"], ["j", "3"]]}, {"line": 10, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "1"], ["ame", "5"], ["i", "1"], ["j", "3"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "5"], ["i", "1"], ["j", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "0"], ["i", "1"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "0"], ["i", "0"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "1"], ["i", "0"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "1"], ["i", "1"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "2"], ["i", "1"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "2"], ["i", "2"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "3"], ["i", "2"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "3"], ["i", "2"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "3"], ["i", "2"], ["j", "2"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "4"], ["i", "2"], ["j", "2"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "4"], ["i", "2"], ["j", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "5"], ["i", "2"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 ]"], ["n", "2"], ["ame", "5"], ["i", "2"], ["j", "3"]]}, {"line": 10, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "2"], ["ame", "5"], ["i", "2"], ["j", "3"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "5"], ["i", "2"], ["j", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "0"], ["i", "2"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "0"], ["i", "0"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "1"], ["i", "0"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "1"], ["i", "1"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "2"], ["i", "1"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "2"], ["i", "2"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "3"], ["i", "2"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "3"], ["i", "3"], ["j", "3"]]}, {"line": 7, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "4"], ["i", "3"], ["j", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "4"], ["i", "3"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "4"], ["i", "3"], ["j", "3"]]}, {"line": 9, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "5"], ["i", "3"], ["j", "3"]]}, {"line": 8, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 ]"], ["n", "3"], ["ame", "5"], ["i", "3"], ["j", "3"]]}, {"line": 10, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 , 5 ]"], ["n", "3"], ["ame", "5"], ["i", "3"], ["j", "3"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 , 5 ]"], ["n", "3"], ["ame", "5"], ["i", "3"], ["j", "3"]]}, {"line": 11, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["ans", "[ 5 , 5 , 5 , 5 ]"], ["n", "3"], ["ame", "5"], ["i", "3"], ["j", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [4, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "5": [[5], [5, 10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [5, 10, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [5, 10, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "6": [[6, 4, 0], [6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "7": [[7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "8": [[8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "9": [[9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "10": [[10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0], [10, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]], "11": [[11, 10, 9, 8, 6, 7, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 7, 6, 4, 8, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 6, 4, 0]]}}
{"id": 1797, "code": "int[] list = {10, 7, 5};\nSystem.out.println(Math.min(list[0], Math.min(list[1], list[2])), (list[1] + list[2]) - list[0] > 0 ? (list[1] + list[2]) - list[0] : 0);", "code_tokens": ["<0>", "int", "[", "]", "list", "=", "{", "10", ",", "7", ",", "5", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "list", "[", "0", "]", ",", "Math", ".", "min", "(", "list", "[", "1", "]", ",", "list", "[", "2", "]", ")", ")", ",", "(", "list", "[", "1", "]", "+", "list", "[", "2", "]", ")", "-", "list", "[", "0", "]", ">", "0", "?", "(", "list", "[", "1", "]", "+", "list", "[", "2", "]", ")", "-", "list", "[", "0", "]", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["list", "[ 10 , 7 , 5 ]"]]}, {"line": 1, "state": [["list", "[ 10 , 7 , 5 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5106, "code": "String s = \"xyz\";\nchar first_letter = s.charAt(0);\nchar last_letter = s.charAt(s.length() - 1);\nString number = String.valueOf(s.length() - 2);\nSystem.out.println(first_letter + number + last_letter);", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "char", "first_letter", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "last_letter", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "String", "number", "=", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "first_letter", "+", "number", "+", "last_letter", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["first_letter", "x"]]}, {"line": 2, "state": [["s", "xyz"], ["first_letter", "x"], ["last_letter", "z"]]}, {"line": 3, "state": [["s", "xyz"], ["first_letter", "x"], ["last_letter", "z"], ["number", "1"]]}, {"line": 4, "state": [["s", "xyz"], ["first_letter", "x"], ["last_letter", "z"], ["number", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 9161, "code": "char[] A = {'2', '0', '1', '7', '/', '0', '1', '/', '3', '1'};\nA[0] = '2';A[1] = '0';A[2] = '1';A[3] = '8';\nSystem.out.println(String.valueOf(A));", "code_tokens": ["<0>", "char", "[", "]", "A", "=", "{", "'2'", ",", "'0'", ",", "'1'", ",", "'7'", ",", "'/'", ",", "'0'", ",", "'1'", ",", "'/'", ",", "'3'", ",", "'1'", "}", ";", "<1>", "A", "[", "0", "]", "=", "'2'", ";", "A", "[", "1", "]", "=", "'0'", ";", "A", "[", "2", "]", "=", "'1'", ";", "A", "[", "3", "]", "=", "'8'", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "A", ")", ")", ";"], "trace": [{"line": 0, "state": [["A", "[ 2 , 0 , 1 , 7 , / , 0 , 1 , / , 3 , 1 ]"]]}, {"line": 1, "state": [["A", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 3 , 1 ]"]]}, {"line": 2, "state": [["A", "[ 2 , 0 , 1 , 8 , / , 0 , 1 , / , 3 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5657, "code": "int n = 2;\nint ans = 0;\nif (n % 2 == 0) {\nans = n / 2;\nSystem.out.println(ans);}\nelse {\nans = n / 2 + 1;\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "ans", "=", "n", "/", "2", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<5>", "else", "{", "<6>", "ans", "=", "n", "/", "2", "+", "1", ";", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["ans", "0"]]}, {"line": 2, "state": [["n", "2"], ["ans", "0"]]}, {"line": 3, "state": [["n", "2"], ["ans", "1"]]}, {"line": 4, "state": [["n", "2"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 3918, "code": "int x = 12, y = 3, z = 1;\nSystem.out.println((x - z) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19513, "code": "long N = 999999999;\nif (N % 2 != 0) {System.out.println(2 * N);}\nelse {System.out.println(N);}", "code_tokens": ["<0>", "long", "N", "=", "999999999", ";", "<1>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "System", ".", "out", ".", "println", "(", "2", "*", "N", ")", ";", "}", "<2>", "else", "{", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "999999999"]]}, {"line": 1, "state": [["N", "999999999"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3079, "code": "String s = \"1234567876\";\nint n = s.length();\nint ans = 753;\nfor (int i = 0; i < n - 2; i++) {\nint t = Integer.parseInt(s.substring(i, i + 3));\nans = Math.min(ans, Math.abs(753 - t));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"1234567876\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "ans", "=", "753", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "2", ";", "i", "++", ")", "{", "<4>", "int", "t", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<5>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "Math", ".", "abs", "(", "753", "-", "t", ")", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "1234567876"]]}, {"line": 1, "state": [["s", "1234567876"], ["n", "10"]]}, {"line": 2, "state": [["s", "1234567876"], ["n", "10"], ["ans", "753"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "753"], ["i", "0"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "753"], ["i", "0"], ["t", "123"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "630"], ["i", "0"], ["t", "123"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "630"], ["i", "1"], ["t", "123"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "630"], ["i", "1"], ["t", "234"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "519"], ["i", "1"], ["t", "234"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "519"], ["i", "2"], ["t", "234"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "519"], ["i", "2"], ["t", "345"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "408"], ["i", "2"], ["t", "345"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "408"], ["i", "3"], ["t", "345"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "408"], ["i", "3"], ["t", "456"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "297"], ["i", "3"], ["t", "456"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "297"], ["i", "4"], ["t", "456"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "297"], ["i", "4"], ["t", "567"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "186"], ["i", "4"], ["t", "567"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "186"], ["i", "5"], ["t", "567"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "186"], ["i", "5"], ["t", "678"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "75"], ["i", "5"], ["t", "678"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "75"], ["i", "6"], ["t", "678"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "75"], ["i", "6"], ["t", "787"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "34"], ["i", "6"], ["t", "787"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "34"], ["i", "7"], ["t", "787"]]}, {"line": 4, "state": [["s", "1234567876"], ["n", "10"], ["ans", "34"], ["i", "7"], ["t", "876"]]}, {"line": 5, "state": [["s", "1234567876"], ["n", "10"], ["ans", "34"], ["i", "7"], ["t", "876"]]}, {"line": 3, "state": [["s", "1234567876"], ["n", "10"], ["ans", "34"], ["i", "7"], ["t", "876"]]}, {"line": 6, "state": [["s", "1234567876"], ["n", "10"], ["ans", "34"], ["i", "7"], ["t", "876"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "6": [[6, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 8900, "code": "int N = 4;\nint[] A1 = {1, 1, 1, 1};\nint[] A2 = {1, 1, 1, 1};\njava.util.List<Integer> candies = new java.util.ArrayList<>();\nfor (int i = 0; i < N; i++) {\nint sumA1 = 0;for (int j = 0; j <= i; j++) {sumA1 += A1[j];}int sumA2 = 0;for (int j = i; j < N; j++) {sumA2 += A2[j];}candies.add(sumA1 + sumA2);}\nSystem.out.println(java.util.Collections.max(candies));", "code_tokens": ["<0>", "int", "N", "=", "4", ";", "<1>", "int", "[", "]", "A1", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "java", ".", "util", ".", "List", "<", "Integer", ">", "candies", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "sumA1", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA1", "+=", "A1", "[", "j", "]", ";", "}", "int", "sumA2", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "N", ";", "j", "++", ")", "{", "sumA2", "+=", "A2", "[", "j", "]", ";", "}", "candies", ".", "add", "(", "sumA1", "+", "sumA2", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Collections", ".", "max", "(", "candies", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "4"]]}, {"line": 1, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ ]"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 , 5 ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 , 5 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 , 5 , 5 ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 , 5 , 5 ]"], ["i", "3"]]}, {"line": 6, "state": [["N", "4"], ["A1", "[ 1 , 1 , 1 , 1 ]"], ["A2", "[ 1 , 1 , 1 , 1 ]"], ["candies", "[ 5 , 5 , 5 , 5 ]"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 11260, "code": "String a = \"SAT\";\nString[] day = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nint[] values = {7, 6, 5, 4, 3, 2, 1};\nMap<String, Integer> d = new HashMap<>();for (int i = 0; i < day.length; i++) {d.put(day[i], values[i]);}\nSystem.out.println(d.get(a));", "code_tokens": ["<0>", "String", "a", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "day", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "int", "[", "]", "values", "=", "{", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", "}", ";", "<3>", "Map", "<", "String", ",", "Integer", ">", "d", "=", "new", "HashMap", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "day", ".", "length", ";", "i", "++", ")", "{", "d", ".", "put", "(", "day", "[", "i", "]", ",", "values", "[", "i", "]", ")", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "d", ".", "get", "(", "a", ")", ")", ";"], "trace": [{"line": 0, "state": [["a", "SAT"]]}, {"line": 1, "state": [["a", "SAT"], ["day", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["a", "SAT"], ["day", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["values", "[ 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"]]}, {"line": 3, "state": [["a", "SAT"], ["day", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["values", "[ 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["d", "{ SUN"]]}, {"line": 4, "state": [["a", "SAT"], ["day", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["values", "[ 7 , 6 , 5 , 4 , 3 , 2 , 1 ]"], ["d", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]]}}
{"id": 4038, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nif (h1 > h2) {\nh2 += 24;}\nint h = h2 - h1;\nint m = m2 - m1;\nif (m < 0) {\nm = m + 60;\nh = h - 1;}\nint time = h * 60 + m;\nSystem.out.println(time - k);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "if", "(", "h1", ">", "h2", ")", "{", "<2>", "h2", "+=", "24", ";", "}", "<3>", "int", "h", "=", "h2", "-", "h1", ";", "<4>", "int", "m", "=", "m2", "-", "m1", ";", "<5>", "if", "(", "m", "<", "0", ")", "{", "<6>", "m", "=", "m", "+", "60", ";", "<7>", "h", "=", "h", "-", "1", ";", "}", "<8>", "int", "time", "=", "h", "*", "60", "+", "m", ";", "<9>", "System", ".", "out", ".", "println", "(", "time", "-", "k", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["h", "5"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["h", "5"], ["m", "0"]]}, {"line": 5, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["h", "5"], ["m", "0"]]}, {"line": 8, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["h", "5"], ["m", "0"], ["time", "300"]]}, {"line": 9, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["h", "5"], ["m", "0"], ["time", "300"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4, 0]], "5": [[5, 4, 0]], "8": [[8, 5, 4, 0]], "9": [[9, 8, 5, 4, 0]]}}
{"id": 4061, "code": "int H1 = 10, M1 = 0, H2 = 12, M2 = 0, K = 120;\nSystem.out.println(H2 * 60 + M2 - H1 * 60 - M1 - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "12", ",", "M2", "=", "0", ",", "K", "=", "120", ";", "<1>", "System", ".", "out", ".", "println", "(", "H2", "*", "60", "+", "M2", "-", "H1", "*", "60", "-", "M1", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5087, "code": "char[] s = {'s', 'm', 'i', 'l', 'e', 's'};\nString ans = String.valueOf(s[0]);\nans += String.valueOf(s.length - 2);\nans += s[s.length - 1];\nSystem.out.println(ans);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'s'", ",", "'m'", ",", "'i'", ",", "'l'", ",", "'e'", ",", "'s'", "}", ";", "<1>", "String", "ans", "=", "String", ".", "valueOf", "(", "s", "[", "0", "]", ")", ";", "<2>", "ans", "+=", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", ";", "<3>", "ans", "+=", "s", "[", "s", ".", "length", "-", "1", "]", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ s , m , i , l , e , s ]"]]}, {"line": 1, "state": [["s", "[ s , m , i , l , e , s ]"], ["ans", "s"]]}, {"line": 2, "state": [["s", "[ s , m , i , l , e , s ]"], ["ans", "s4"]]}, {"line": 3, "state": [["s", "[ s , m , i , l , e , s ]"], ["ans", "s4s"]]}, {"line": 4, "state": [["s", "[ s , m , i , l , e , s ]"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 2440, "code": "int n = 4, m = 3;\nint eve = (n * (n - 1)) / 2;\nint odd = (m * (m - 1)) / 2;\nSystem.out.println(eve + odd);", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "m", "=", "3", ";", "<1>", "int", "eve", "=", "(", "n", "*", "(", "n", "-", "1", ")", ")", "/", "2", ";", "<2>", "int", "odd", "=", "(", "m", "*", "(", "m", "-", "1", ")", ")", "/", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "eve", "+", "odd", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "4"], ["m", "3"]]}, {"line": 2, "state": [["n", "4"], ["m", "3"], ["eve", "6"]]}, {"line": 3, "state": [["n", "4"], ["m", "3"], ["eve", "6"], ["odd", "3"]]}, {"line": 4, "state": [["n", "4"], ["m", "3"], ["eve", "6"], ["odd", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 1]], "4": [[4, 3, 1]]}}
{"id": 18314, "code": "int h = 3;\nint w = 7;\nSystem.out.println((Integer.parseInt(\"10\") - 1) / Math.max(h, w) + 1);", "code_tokens": ["<0>", "int", "h", "=", "3", ";", "<1>", "int", "w", "=", "7", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "Integer", ".", "parseInt", "(", "\"10\"", ")", "-", "1", ")", "/", "Math", ".", "max", "(", "h", ",", "w", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["h", "3"]]}, {"line": 1, "state": [["h", "3"], ["w", "7"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 6843, "code": "int H = 210, N = 5;\nint[] lists = {31, 41, 59, 26, 53};\njava.util.Arrays.sort(lists);\nint SAM = 0;for (int num : lists) {SAM += num;}\nif (SAM >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "210", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "lists", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "lists", ")", ";", "<3>", "int", "SAM", "=", "0", ";", "for", "(", "int", "num", ":", "lists", ")", "{", "SAM", "+=", "num", ";", "}", "<4>", "if", "(", "SAM", ">=", "H", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "210"], ["N", "5"]]}, {"line": 1, "state": [["H", "210"], ["N", "5"], ["lists", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "210"], ["N", "5"], ["lists", "[ 26 , 31 , 41 , 53 , 59 ]"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["lists", "[ 26 , 31 , 41 , 53 , 59 ]"], ["SAM", "210"]]}, {"line": 4, "state": [["H", "210"], ["N", "5"], ["lists", "[ 26 , 31 , 41 , 53 , 59 ]"], ["SAM", "210"]]}, {"line": 5, "state": [["H", "210"], ["N", "5"], ["lists", "[ 26 , 31 , 41 , 53 , 59 ]"], ["SAM", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5]]}}
{"id": 16038, "code": "Scanner scanner = new Scanner(System.in);\nint A = 20, B = 15;\nif (A > 2 * B) {\nSystem.out.println(A - 2 * B);\n} else {\nSystem.out.println(0);}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "A", "=", "20", ",", "B", "=", "15", ";", "<2>", "if", "(", "A", ">", "2", "*", "B", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "A", "-", "2", "*", "B", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["A", "20"], ["B", "15"]]}, {"line": 2, "state": [["A", "20"], ["B", "15"]]}, {"line": 5, "state": [["A", "20"], ["B", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5]]}}
{"id": 8020, "code": "int N = 8, K = 3;\nint[] A = {7, 3, 1, 8, 4, 6, 2, 5};\nfor (int i = 0; i < N; i++) {\nif (A[i] == 1) {\nint ans = N;\nfor (int j = Math.max(0, i - (K - 1)); j < Math.min(N, i + K - 1); j++) {\nans = Math.min((int) Math.ceil((double) j / (K - 1)) + (int) Math.ceil((double) (N - j - 1) / (K - 1)), ans);}\nbreak;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "8", ",", "K", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<3>", "if", "(", "A", "[", "i", "]", "==", "1", ")", "{", "<4>", "int", "ans", "=", "N", ";", "<5>", "for", "(", "int", "j", "=", "Math", ".", "max", "(", "0", ",", "i", "-", "(", "K", "-", "1", ")", ")", ";", "j", "<", "Math", ".", "min", "(", "N", ",", "i", "+", "K", "-", "1", ")", ";", "j", "++", ")", "{", "<6>", "ans", "=", "Math", ".", "min", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "j", "/", "(", "K", "-", "1", ")", ")", "+", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "(", "N", "-", "j", "-", "1", ")", "/", "(", "K", "-", "1", ")", ")", ",", "ans", ")", ";", "}", "<7>", "break", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "8"], ["K", "3"]]}, {"line": 3, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 4, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"]]}, {"line": 6, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "8"]]}, {"line": 7, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "8"], ["j", "0"]]}, {"line": 8, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "0"]]}, {"line": 7, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "1"]]}, {"line": 8, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "1"]]}, {"line": 7, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "2"]]}, {"line": 8, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "2"]]}, {"line": 7, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "3"]]}, {"line": 8, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "3"]]}, {"line": 7, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "3"]]}, {"line": 9, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "3"]]}, {"line": 10, "state": [["N", "8"], ["K", "3"], ["A", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["i", "2"], ["ans", "4"], ["j", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2], [4, 5, 4, 2], [4, 5, 4, 5, 4, 2]], "5": [[5, 4, 2], [5, 4, 5, 4, 2], [5, 4, 5, 4, 5, 4, 2]], "6": [[6, 4, 5, 4, 5, 4, 2]], "7": [[7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [7, 8, 7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2]], "8": [[8, 7, 6, 4, 5, 4, 5, 4, 2], [8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2], [8, 7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2]], "9": [[9]], "10": [[10, 8, 7, 8, 7, 8, 7, 8, 7, 6, 4, 5, 4, 5, 4, 2]]}}
{"id": 1497, "code": "System.out.println(Math.ceil(Integer.parseInt(\"111\") / 111.0) * 111);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "Math", ".", "ceil", "(", "Integer", ".", "parseInt", "(", "\"111\"", ")", "/", "111.0", ")", "*", "111", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}], "slices": {"0": [[0]], "1": [[1]]}}
{"id": 2211, "code": "int n = 100, a = 100, b = 100;\nSystem.out.println((a < b ? a : b) + \" \" + (a + b < n ? 0 : a + b - n));", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "a", "<", "b", "?", "a", ":", "b", ")", "+", "\" \"", "+", "(", "a", "+", "b", "<", "n", "?", "0", ":", "a", "+", "b", "-", "n", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13863, "code": "int n = 6;\nint[] a_l = {1, 2, 3, 2, 2, 1};\nint ans = 1;\nBoolean is_plus = null;\njava.util.ArrayList<Integer> sub = new java.util.ArrayList<>();\nfor (int i : a_l) {\nif (sub.size() == 0) {\nsub.add(i);\ncontinue;}\nif (sub.get(sub.size() - 1) == i) {\nsub.add(i);\ncontinue;}\nif (is_plus == null) {\nif (sub.get(sub.size() - 1) > i) {\nis_plus = false;}\nelse {\nis_plus = true;}\nsub.add(i);}\nelse if (is_plus) {\nif (sub.get(sub.size() - 1) > i) {\nsub = new java.util.ArrayList<>();sub.add(i);\nans += 1;\nis_plus = null;}\nelse {\nsub.add(i);}}\nelse {\nif (sub.get(sub.size() - 1) < i) {\nsub = new java.util.ArrayList<>();sub.add(i);\nans += 1;\nis_plus = null;}\nelse {\nsub.add(i);}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a_l", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "Boolean", "is_plus", "=", "null", ";", "<4>", "java", ".", "util", ".", "ArrayList", "<", "Integer", ">", "sub", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "<5>", "for", "(", "int", "i", ":", "a_l", ")", "{", "<6>", "if", "(", "sub", ".", "size", "(", ")", "==", "0", ")", "{", "<7>", "sub", ".", "add", "(", "i", ")", ";", "<8>", "continue", ";", "}", "<9>", "if", "(", "sub", ".", "get", "(", "sub", ".", "size", "(", ")", "-", "1", ")", "==", "i", ")", "{", "<10>", "sub", ".", "add", "(", "i", ")", ";", "<11>", "continue", ";", "}", "<12>", "if", "(", "is_plus", "==", "null", ")", "{", "<13>", "if", "(", "sub", ".", "get", "(", "sub", ".", "size", "(", ")", "-", "1", ")", ">", "i", ")", "{", "<14>", "is_plus", "=", "false", ";", "}", "<15>", "else", "{", "<16>", "is_plus", "=", "true", ";", "}", "<17>", "sub", ".", "add", "(", "i", ")", ";", "}", "<18>", "else", "if", "(", "is_plus", ")", "{", "<19>", "if", "(", "sub", ".", "get", "(", "sub", ".", "size", "(", ")", "-", "1", ")", ">", "i", ")", "{", "<20>", "sub", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "sub", ".", "add", "(", "i", ")", ";", "<21>", "ans", "+=", "1", ";", "<22>", "is_plus", "=", "null", ";", "}", "<23>", "else", "{", "<24>", "sub", ".", "add", "(", "i", ")", ";", "}", "}", "<25>", "else", "{", "<26>", "if", "(", "sub", ".", "get", "(", "sub", ".", "size", "(", ")", "-", "1", ")", "<", "i", ")", "{", "<27>", "sub", "=", "new", "java", ".", "util", ".", "ArrayList", "<", ">", "(", ")", ";", "sub", ".", "add", "(", "i", ")", ";", "<28>", "ans", "+=", "1", ";", "<29>", "is_plus", "=", "null", ";", "}", "<30>", "else", "{", "<31>", "sub", ".", "add", "(", "i", ")", ";", "}", "}", "}", "<32>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"]]}, {"line": 4, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ ]"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ ]"], ["i", "1"]]}, {"line": 6, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ ]"], ["i", "1"]]}, {"line": 7, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "1"]]}, {"line": 8, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "2"]]}, {"line": 9, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "2"]]}, {"line": 12, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "2"]]}, {"line": 13, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "None"], ["sub", "[ 1 ]"], ["i", "2"]]}, {"line": 16, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 ]"], ["i", "2"]]}, {"line": 17, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "3"]]}, {"line": 6, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "3"]]}, {"line": 9, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "3"]]}, {"line": 12, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "3"]]}, {"line": 18, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "3"]]}, {"line": 19, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 ]"], ["i", "3"]]}, {"line": 24, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "3"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "2"]]}, {"line": 9, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "2"]]}, {"line": 12, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "2"]]}, {"line": 18, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "2"]]}, {"line": 19, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 1 , 2 , 3 ]"], ["i", "2"]]}, {"line": 20, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "1"], ["is_plus", "True"], ["sub", "[ 2 ]"], ["i", "2"]]}, {"line": 21, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "True"], ["sub", "[ 2 ]"], ["i", "2"]]}, {"line": 22, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 ]"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 ]"], ["i", "2"]]}, {"line": 6, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 ]"], ["i", "2"]]}, {"line": 9, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 ]"], ["i", "2"]]}, {"line": 10, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "2"]]}, {"line": 11, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "2"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "1"]]}, {"line": 6, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "1"]]}, {"line": 9, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "1"]]}, {"line": 12, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "1"]]}, {"line": 13, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "None"], ["sub", "[ 2 , 2 ]"], ["i", "1"]]}, {"line": 14, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "False"], ["sub", "[ 2 , 2 ]"], ["i", "1"]]}, {"line": 17, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "False"], ["sub", "[ 2 , 2 , 1 ]"], ["i", "1"]]}, {"line": 5, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "False"], ["sub", "[ 2 , 2 , 1 ]"], ["i", "1"]]}, {"line": 32, "state": [["n", "6"], ["a_l", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["ans", "2"], ["is_plus", "False"], ["sub", "[ 2 , 2 , 1 ]"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 7, 6, 4], [5, 17, 13, 9, 6, 7, 6, 4], [5, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [5, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [5, 10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [5, 17, 13, 9, 6, 10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "6": [[6, 4], [6, 7, 6, 4], [6, 17, 13, 9, 6, 7, 6, 4], [6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [6, 10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "7": [[7, 6, 4]], "8": [[8]], "9": [[9, 6, 7, 6, 4], [9, 6, 17, 13, 9, 6, 7, 6, 4], [9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [9, 6, 10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "10": [[10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "11": [[11]], "12": [[12, 3], [12, 16, 12, 3], [12, 18, 12, 16, 12, 3], [12, 22, 18, 12, 18, 12, 16, 12, 3]], "13": [[13, 9, 6, 7, 6, 4], [13, 9, 6, 10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "14": [[14, 12, 22, 18, 12, 18, 12, 16, 12, 3]], "16": [[16, 12, 3]], "17": [[17, 13, 9, 6, 7, 6, 4], [17, 13, 9, 6, 10, 9, 6, 20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "18": [[18, 12, 16, 12, 3], [18, 12, 18, 12, 16, 12, 3]], "19": [[19, 9, 6, 17, 13, 9, 6, 7, 6, 4], [19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "20": [[20, 19, 9, 6, 24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "21": [[21, 2]], "22": [[22, 18, 12, 18, 12, 16, 12, 3]], "24": [[24, 19, 9, 6, 17, 13, 9, 6, 7, 6, 4]], "32": [[32, 21, 2]]}}
{"id": 14154, "code": "int N = 6;\nint[] A = {1, 2, 3, 2, 2, 1};\nStringBuilder li = new StringBuilder();\nfor (int i = 0; i < N - 1; i++) {\nif (A[i + 1] - A[i] > 0) {\nli.append('+');}\nelse if (A[i + 1] - A[i] < 0) {\nli.append('-');}\nelse {\ncontinue;}}\nint ans = 1;\nint p = 0;\nint m = 0;\nfor (int j = 0; j < li.length(); j++) {char i = li.charAt(j);\nif (i == '+') {\np = 1;}\nelse if (i == '-') {\nm = 1;}\nif (p == 1 && m == 1) { // Note: using && instead of &\nans += 1;\np = 0;\nm = 0;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "1", "}", ";", "<2>", "StringBuilder", "li", "=", "new", "StringBuilder", "(", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "[", "i", "+", "1", "]", "-", "A", "[", "i", "]", ">", "0", ")", "{", "<5>", "li", ".", "append", "(", "'+'", ")", ";", "}", "<6>", "else", "if", "(", "A", "[", "i", "+", "1", "]", "-", "A", "[", "i", "]", "<", "0", ")", "{", "<7>", "li", ".", "append", "(", "'-'", ")", ";", "}", "<8>", "else", "{", "<9>", "continue", ";", "}", "}", "<10>", "int", "ans", "=", "1", ";", "<11>", "int", "p", "=", "0", ";", "<12>", "int", "m", "=", "0", ";", "<13>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "li", ".", "length", "(", ")", ";", "j", "++", ")", "{", "char", "i", "=", "li", ".", "charAt", "(", "j", ")", ";", "<14>", "if", "(", "i", "==", "'+'", ")", "{", "<15>", "p", "=", "1", ";", "}", "<16>", "else", "if", "(", "i", "==", "'-'", ")", "{", "<17>", "m", "=", "1", ";", "}", "<18>", "if", "(", "p", "==", "1", "&&", "m", "==", "1", ")", "{", "// Note: using && instead of &", "<19>", "ans", "+=", "1", ";", "<20>", "p", "=", "0", ";", "<21>", "m", "=", "0", ";", "}", "}", "<22>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ ]"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + ]"], ["i", "0"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + ]"], ["i", "1"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + ]"], ["i", "2"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + ]"], ["i", "2"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "2"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "3"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "3"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "4"]]}, {"line": 4, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "4"]]}, {"line": 6, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - ]"], ["i", "4"]]}, {"line": 7, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "4"]]}, {"line": 3, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "4"]]}, {"line": 10, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "4"], ["ans", "1"]]}, {"line": 11, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "4"], ["ans", "1"], ["p", "0"]]}, {"line": 12, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "4"], ["ans", "1"], ["p", "0"], ["m", "0"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "0"], ["m", "0"]]}, {"line": 14, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "0"], ["m", "0"]]}, {"line": 15, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 18, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 14, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 15, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 18, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "+"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 14, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 16, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "1"], ["p", "1"], ["m", "0"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "1"], ["p", "1"], ["m", "1"]]}, {"line": 18, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "1"], ["p", "1"], ["m", "1"]]}, {"line": 19, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "1"], ["m", "1"]]}, {"line": 20, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "1"]]}, {"line": 21, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "0"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "0"]]}, {"line": 14, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "0"]]}, {"line": 16, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "0"]]}, {"line": 17, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "1"]]}, {"line": 18, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "1"]]}, {"line": 13, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "1"]]}, {"line": 22, "state": [["N", "6"], ["A", "[ 1 , 2 , 3 , 2 , 2 , 1 ]"], ["li", "[ + , + , - , - ]"], ["i", "-"], ["ans", "2"], ["p", "0"], ["m", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 6, 4, 3, 4, 3, 4, 3, 0], [3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 2], [5, 2]], "6": [[6, 4, 3, 4, 3, 4, 3, 0], [6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0]], "7": [[7, 5, 2], [7, 5, 2]], "10": [[10]], "11": [[11]], "12": [[12]], "13": [[13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [13, 16, 14, 13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [13, 16, 14, 13, 16, 14, 13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0]], "14": [[14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [14, 13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [14, 13, 16, 14, 13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0]], "15": [[15, 11], [15, 18, 15, 11]], "16": [[16, 14, 13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0], [16, 14, 13, 16, 14, 13, 14, 13, 14, 13, 3, 6, 4, 3, 6, 4, 3, 6, 4, 3, 4, 3, 4, 3, 0]], "17": [[17, 18, 15, 18, 15, 11], [17, 21, 18, 17, 18, 15, 18, 15, 11]], "18": [[18, 15, 11], [18, 15, 18, 15, 11], [18, 17, 18, 15, 18, 15, 11], [18, 17, 21, 18, 17, 18, 15, 18, 15, 11]], "19": [[19, 10]], "20": [[20, 18, 17, 18, 15, 18, 15, 11]], "21": [[21, 18, 17, 18, 15, 18, 15, 11]], "22": [[22, 19, 10]]}}
{"id": 14838, "code": "int N = 2, P = 0;\nint[] A = {1, 3};\nint dp0 = 1;\nint dp1 = 0;\nfor (int a : A) {\nif ((a & 1) == 1) {\nint new0 = dp0 + dp1;\nint new1 = new0;\n} else {\nint new0 = dp0 * 2;\nint new1 = dp1 * 2;}\ndp0 = new0;\ndp1 = new1;}\nSystem.out.println((P & 1) == 1 ? dp1 : dp0);", "code_tokens": ["<0>", "int", "N", "=", "2", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "dp0", "=", "1", ";", "<3>", "int", "dp1", "=", "0", ";", "<4>", "for", "(", "int", "a", ":", "A", ")", "{", "<5>", "if", "(", "(", "a", "&", "1", ")", "==", "1", ")", "{", "<6>", "int", "new0", "=", "dp0", "+", "dp1", ";", "<7>", "int", "new1", "=", "new0", ";", "<8>", "}", "else", "{", "<9>", "int", "new0", "=", "dp0", "*", "2", ";", "<10>", "int", "new1", "=", "dp1", "*", "2", ";", "}", "<11>", "dp0", "=", "new0", ";", "<12>", "dp1", "=", "new1", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "(", "P", "&", "1", ")", "==", "1", "?", "dp1", ":", "dp0", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"], ["P", "0"]]}, {"line": 1, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"]]}, {"line": 2, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"]]}, {"line": 3, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "0"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "0"], ["a", "1"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "0"], ["a", "1"]]}, {"line": 6, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "0"], ["a", "1"], ["new0", "1"]]}, {"line": 7, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "0"], ["a", "1"], ["new0", "1"], ["new1", "1"]]}, {"line": 11, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "0"], ["a", "1"], ["new0", "1"], ["new1", "1"]]}, {"line": 12, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "1"], ["a", "1"], ["new0", "1"], ["new1", "1"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "1"], ["a", "3"], ["new0", "1"], ["new1", "1"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "1"], ["a", "3"], ["new0", "1"], ["new1", "1"]]}, {"line": 6, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "1"], ["a", "3"], ["new0", "2"], ["new1", "1"]]}, {"line": 7, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "1"], ["dp1", "1"], ["a", "3"], ["new0", "2"], ["new1", "2"]]}, {"line": 11, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "2"], ["dp1", "1"], ["a", "3"], ["new0", "2"], ["new1", "2"]]}, {"line": 12, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "2"], ["dp1", "2"], ["a", "3"], ["new0", "2"], ["new1", "2"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "2"], ["dp1", "2"], ["a", "3"], ["new0", "2"], ["new1", "2"]]}, {"line": 13, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["dp0", "2"], ["dp1", "2"], ["a", "3"], ["new0", "2"], ["new1", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1]], "6": [[6, 3, 2], [6, 12, 7, 6, 3, 2]], "7": [[7, 6, 3, 2], [7, 6, 12, 7, 6, 3, 2]], "11": [[11, 7, 6, 3, 2], [11, 7, 6, 12, 7, 6, 3, 2]], "12": [[12, 7, 6, 3, 2], [12, 7, 6, 12, 7, 6, 3, 2]], "13": [[13, 12, 7, 6, 12, 7, 6, 3, 2]]}}
{"id": 1360, "code": "int n = 111;\nfor (int i = 1; i < 10; i++) {\nint ans = i * 111;\nif (ans >= n) {\nSystem.out.println(ans);\nbreak;}}", "code_tokens": ["<0>", "int", "n", "=", "111", ";", "<1>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "10", ";", "i", "++", ")", "{", "<2>", "int", "ans", "=", "i", "*", "111", ";", "<3>", "if", "(", "ans", ">=", "n", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "<5>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["n", "111"]]}, {"line": 1, "state": [["n", "111"], ["i", "1"]]}, {"line": 2, "state": [["n", "111"], ["i", "1"], ["ans", "111"]]}, {"line": 3, "state": [["n", "111"], ["i", "1"], ["ans", "111"]]}, {"line": 4, "state": [["n", "111"], ["i", "1"], ["ans", "111"]]}, {"line": 5, "state": [["n", "111"], ["i", "1"], ["ans", "111"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5]]}}
{"id": 16052, "code": "int a = 12, b = 4;\nint n = Math.max(a - 2 * b, 0);\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "int", "n", "=", "Math", ".", "max", "(", "a", "-", "2", "*", "b", ",", "0", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"], ["n", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"], ["n", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 9241, "code": "String s = \"2017/01/31\";\nSystem.out.println(s.replace(\"2017/\", \"2018/\"));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "s", ".", "replace", "(", "\"2017/\"", ",", "\"2018/\"", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8193, "code": "int n = 8, k = 3;\nint[] nums = {7, 3, 1, 8, 4, 6, 2, 5};\nint count = 0;\nwhile (n > 0) {\nif (n > k) {\nn -= k - 1;}\nelse {\nn -= k;}\ncount += 1;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "n", "=", "8", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "nums", "=", "{", "7", ",", "3", ",", "1", ",", "8", ",", "4", ",", "6", ",", "2", ",", "5", "}", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "while", "(", "n", ">", "0", ")", "{", "<4>", "if", "(", "n", ">", "k", ")", "{", "<5>", "n", "-=", "k", "-", "1", ";", "}", "<6>", "else", "{", "<7>", "n", "-=", "k", ";", "}", "<8>", "count", "+=", "1", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"], ["k", "3"]]}, {"line": 1, "state": [["n", "8"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"]]}, {"line": 2, "state": [["n", "8"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "0"]]}, {"line": 3, "state": [["n", "8"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "0"]]}, {"line": 4, "state": [["n", "8"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "0"]]}, {"line": 5, "state": [["n", "6"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "0"]]}, {"line": 8, "state": [["n", "6"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 3, "state": [["n", "6"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 4, "state": [["n", "6"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 5, "state": [["n", "4"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "1"]]}, {"line": 8, "state": [["n", "4"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 5, "state": [["n", "2"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "2"]]}, {"line": 8, "state": [["n", "2"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 3, "state": [["n", "2"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 4, "state": [["n", "2"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 7, "state": [["n", "-1"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "3"]]}, {"line": 8, "state": [["n", "-1"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "4"]]}, {"line": 3, "state": [["n", "-1"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "4"]]}, {"line": 9, "state": [["n", "-1"], ["k", "3"], ["nums", "[ 7 , 3 , 1 , 8 , 4 , 6 , 2 , 5 ]"], ["count", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 5, 4, 3, 0], [3, 5, 4, 3, 5, 4, 3, 0], [3, 5, 4, 3, 5, 4, 3, 5, 4, 3, 0], [3, 7, 4, 3, 5, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 5, 4, 3, 0], [4, 3, 5, 4, 3, 5, 4, 3, 0], [4, 3, 5, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 5, 4, 3, 0], [5, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "7": [[7, 4, 3, 5, 4, 3, 5, 4, 3, 5, 4, 3, 0]], "8": [[8, 2], [8, 2], [8, 2], [8, 2]], "9": [[9, 8, 2]]}}
{"id": 8434, "code": "int N = 5;\nint[][] A = new int[2][];\nA[0] = new int[]{3, 2, 2, 4, 1};A[1] = new int[]{};\nA[1] = new int[]{1, 2, 2, 2, 1};\nint result = 0;\nfor (int i = 0; i <= N; i++) {\nresult = Math.max(sum(A[0], i) + sum(A[1], i - 1), result);}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "[", "]", "A", "=", "new", "int", "[", "2", "]", "[", "]", ";", "<2>", "A", "[", "0", "]", "=", "new", "int", "[", "]", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "A", "[", "1", "]", "=", "new", "int", "[", "]", "{", "}", ";", "<3>", "A", "[", "1", "]", "=", "new", "int", "[", "]", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<4>", "int", "result", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "N", ";", "i", "++", ")", "{", "<6>", "result", "=", "Math", ".", "max", "(", "sum", "(", "A", "[", "0", "]", ",", "i", ")", "+", "sum", "(", "A", "[", "1", "]", ",", "i", "-", "1", ")", ",", "result", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ [ ] , [ ] ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ ] ]"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "0"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "1"], ["i", "1"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "11"], ["i", "1"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "11"], ["i", "2"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "12"], ["i", "2"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "12"], ["i", "3"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "12"], ["i", "3"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "12"], ["i", "4"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "14"], ["i", "4"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "14"], ["i", "5"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "14"], ["i", "5"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "14"], ["i", "5"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ [ 3 , 2 , 2 , 4 , 1 ] , [ 1 , 2 , 2 , 2 , 1 ] ]"], ["result", "14"], ["i", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 0], [5, 6, 5, 0], [5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "7": [[7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]]}}
{"id": 7124, "code": "int h = 20, n = 3;\nint sum = 0;\nint[] li = {4, 5, 6};\nfor (int val : li) {\nsum += val;}\nif (sum >= h) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "sum", "=", "0", ";", "<2>", "int", "[", "]", "li", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<3>", "for", "(", "int", "val", ":", "li", ")", "{", "<4>", "sum", "+=", "val", ";", "}", "<5>", "if", "(", "sum", ">=", "h", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<7>", "}", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h", "20"], ["n", "3"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["sum", "0"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["sum", "0"], ["li", "[ 4 , 5 , 6 ]"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["sum", "0"], ["li", "[ 4 , 5 , 6 ]"], ["val", "4"]]}, {"line": 5, "state": [["h", "20"], ["n", "3"], ["sum", "4"], ["li", "[ 4 , 5 , 6 ]"], ["val", "4"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["sum", "4"], ["li", "[ 4 , 5 , 6 ]"], ["val", "5"]]}, {"line": 5, "state": [["h", "20"], ["n", "3"], ["sum", "9"], ["li", "[ 4 , 5 , 6 ]"], ["val", "5"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["sum", "9"], ["li", "[ 4 , 5 , 6 ]"], ["val", "6"]]}, {"line": 5, "state": [["h", "20"], ["n", "3"], ["sum", "15"], ["li", "[ 4 , 5 , 6 ]"], ["val", "6"]]}, {"line": 4, "state": [["h", "20"], ["n", "3"], ["sum", "15"], ["li", "[ 4 , 5 , 6 ]"], ["val", "6"]]}, {"line": 6, "state": [["h", "20"], ["n", "3"], ["sum", "15"], ["li", "[ 4 , 5 , 6 ]"], ["val", "6"]]}, {"line": 9, "state": [["h", "20"], ["n", "3"], ["sum", "15"], ["li", "[ 4 , 5 , 6 ]"], ["val", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3], [4, 5, 4, 3], [4, 5, 4, 5, 4, 3], [4, 5, 4, 5, 4, 5, 4, 3]], "5": [[5, 4, 3], [5, 4, 5, 4, 3], [5, 4, 5, 4, 5, 4, 3]], "6": [[6, 5, 4, 5, 4, 5, 4, 3]], "9": [[9]]}}
{"id": 8577, "code": "int N = 7;\nint[] A = {3, 3, 4, 5, 4, 5, 3};\nint[] B = {5, 3, 4, 4, 2, 3, 2};\nint maxi = 0;\nfor (int i = 0; i < N; i++) {\nint sumA = 0;for (int j = 0; j <= i; j++) {sumA += A[j];}int sumB = 0;for (int j = i; j < N; j++) {sumB += B[j];}if (sumA + sumB > maxi) {\nmaxi = sumA + sumB;}}\nSystem.out.println(maxi);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "maxi", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "sumA", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "sumA", "+=", "A", "[", "j", "]", ";", "}", "int", "sumB", "=", "0", ";", "for", "(", "int", "j", "=", "i", ";", "j", "<", "N", ";", "j", "++", ")", "{", "sumB", "+=", "B", "[", "j", "]", ";", "}", "if", "(", "sumA", "+", "sumB", ">", "maxi", ")", "{", "<6>", "maxi", "=", "sumA", "+", "sumB", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "maxi", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "7"]]}, {"line": 2, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 3, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "0"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "0"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "1"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "1"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "2"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "2"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "3"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "3"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "4"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "4"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "5"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "26"], ["i", "5"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "5"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["B", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["maxi", "29"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1], [5, 7, 6, 5, 1], [5, 6, 5, 7, 6, 5, 1], [5, 6, 5, 6, 5, 7, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1], [5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1], [5, 7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1], [5, 6, 5, 7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1]], "6": [[6, 5, 1], [6, 5, 7, 6, 5, 1], [6, 5, 6, 5, 7, 6, 5, 1], [6, 5, 6, 5, 6, 5, 7, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1], [6, 5, 7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1]], "7": [[7, 6, 5, 1], [7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1]], "8": [[8, 6, 5, 7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 1]]}}
{"id": 14346, "code": "int N = 7;\nif (N == 1) {System.out.println(1);System.exit(0);}\nint[] A = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint ans = 1;\nint cur = A[0];\nboolean Decided = A[0] != A[1];\nboolean Flat = A[0] == A[1];\nboolean Up = A[0] < A[1];\nfor (int n = 1; n < N; n++) {\nif (Decided) {\nif (A[n] == cur) {\ncontinue;}\nif ((A[n] >= cur) == Up) {\ncur = A[n];}\nelse {\ncur = A[n];\nUp = !Up;\nDecided = false;\nans += 1;}}\nelse {\nif (A[n] != cur) {\nUp = A[n] > cur;\ncur = A[n];\nDecided = true;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "if", "(", "N", "==", "1", ")", "{", "System", ".", "out", ".", "println", "(", "1", ")", ";", "System", ".", "exit", "(", "0", ")", ";", "}", "<2>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<3>", "int", "ans", "=", "1", ";", "<4>", "int", "cur", "=", "A", "[", "0", "]", ";", "<5>", "boolean", "Decided", "=", "A", "[", "0", "]", "!=", "A", "[", "1", "]", ";", "<6>", "boolean", "Flat", "=", "A", "[", "0", "]", "==", "A", "[", "1", "]", ";", "<7>", "boolean", "Up", "=", "A", "[", "0", "]", "<", "A", "[", "1", "]", ";", "<8>", "for", "(", "int", "n", "=", "1", ";", "n", "<", "N", ";", "n", "++", ")", "{", "<9>", "if", "(", "Decided", ")", "{", "<10>", "if", "(", "A", "[", "n", "]", "==", "cur", ")", "{", "<11>", "continue", ";", "}", "<12>", "if", "(", "(", "A", "[", "n", "]", ">=", "cur", ")", "==", "Up", ")", "{", "<13>", "cur", "=", "A", "[", "n", "]", ";", "}", "<14>", "else", "{", "<15>", "cur", "=", "A", "[", "n", "]", ";", "<16>", "Up", "=", "!", "Up", ";", "<17>", "Decided", "=", "false", ";", "<18>", "ans", "+=", "1", ";", "}", "}", "<19>", "else", "{", "<20>", "if", "(", "A", "[", "n", "]", "!=", "cur", ")", "{", "<21>", "Up", "=", "A", "[", "n", "]", ">", "cur", ";", "<22>", "cur", "=", "A", "[", "n", "]", ";", "<23>", "Decided", "=", "true", ";", "}", "}", "}", "<24>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"]]}, {"line": 2, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 3, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"]]}, {"line": 4, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"]]}, {"line": 5, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"]]}, {"line": 6, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"]]}, {"line": 7, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "1"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 13, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "2"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "3"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "3"]]}, {"line": 16, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "True"], ["Flat", "False"], ["Up", "0"], ["n", "3"]]}, {"line": 17, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "3"]]}, {"line": 18, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "3"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "4"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "4"]]}, {"line": 20, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "0"], ["n", "4"]]}, {"line": 21, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "2"], ["Decided", "False"], ["Flat", "False"], ["Up", "False"], ["n", "4"]]}, {"line": 22, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "False"], ["Flat", "False"], ["Up", "False"], ["n", "4"]]}, {"line": 23, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "4"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 10, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 12, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "1"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 15, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "999999999"], ["Decided", "True"], ["Flat", "False"], ["Up", "False"], ["n", "5"]]}, {"line": 16, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "999999999"], ["Decided", "True"], ["Flat", "False"], ["Up", "1"], ["n", "5"]]}, {"line": 17, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["cur", "999999999"], ["Decided", "False"], ["Flat", "False"], ["Up", "1"], ["n", "5"]]}, {"line": 18, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "999999999"], ["Decided", "False"], ["Flat", "False"], ["Up", "1"], ["n", "5"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "999999999"], ["Decided", "False"], ["Flat", "False"], ["Up", "1"], ["n", "6"]]}, {"line": 9, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "999999999"], ["Decided", "False"], ["Flat", "False"], ["Up", "1"], ["n", "6"]]}, {"line": 20, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "999999999"], ["Decided", "False"], ["Flat", "False"], ["Up", "1"], ["n", "6"]]}, {"line": 21, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "999999999"], ["Decided", "False"], ["Flat", "False"], ["Up", "True"], ["n", "6"]]}, {"line": 22, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "1000000000"], ["Decided", "False"], ["Flat", "False"], ["Up", "True"], ["n", "6"]]}, {"line": 23, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "1000000000"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "6"]]}, {"line": 8, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "1000000000"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "6"]]}, {"line": 24, "state": [["N", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["cur", "1000000000"], ["Decided", "True"], ["Flat", "False"], ["Up", "True"], ["n", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 2]], "5": [[5, 4, 2]], "6": [[6, 5, 4, 2]], "7": [[7, 6, 5, 4, 2]], "8": [[8, 1, 0], [8, 13, 12, 10, 8, 1, 0], [8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 15, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [8, 22, 21, 20, 8, 15, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "9": [[9, 5, 4, 2], [9, 5, 4, 2], [9, 5, 4, 2], [9, 17, 9, 5, 4, 2], [9, 23, 9, 17, 9, 5, 4, 2], [9, 17, 9, 23, 9, 17, 9, 5, 4, 2]], "10": [[10, 8, 1, 0], [10, 8, 13, 12, 10, 8, 1, 0], [10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "12": [[12, 10, 8, 1, 0], [12, 10, 8, 13, 12, 10, 8, 1, 0], [12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "13": [[13, 12, 10, 8, 1, 0], [13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "15": [[15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [15, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "16": [[16, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [16, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "17": [[17, 9, 5, 4, 2], [17, 9, 23, 9, 17, 9, 5, 4, 2]], "18": [[18, 3], [18, 3]], "20": [[20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [20, 8, 15, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "21": [[21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [21, 20, 8, 15, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "22": [[22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0], [22, 21, 20, 8, 15, 12, 10, 8, 22, 21, 20, 8, 15, 12, 10, 8, 13, 12, 10, 8, 13, 12, 10, 8, 1, 0]], "23": [[23, 9, 17, 9, 5, 4, 2], [23, 9, 17, 9, 23, 9, 17, 9, 5, 4, 2]], "24": [[24, 18, 3]]}}
{"id": 2187, "code": "int n = 100, a = 100, b = 100;\nint max_sub = Math.min(a, b);\nint min_sub = max_sub - (n - Math.max(a, b));\nSystem.out.println(max_sub + \" \" + (min_sub > 0 ? min_sub : 0));", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "max_sub", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "min_sub", "=", "max_sub", "-", "(", "n", "-", "Math", ".", "max", "(", "a", ",", "b", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "max_sub", "+", "\" \"", "+", "(", "min_sub", ">", "0", "?", "min_sub", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max_sub", "100"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max_sub", "100"], ["min_sub", "100"]]}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["max_sub", "100"], ["min_sub", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 2138, "code": "int N = 10, A = 7, B = 5;\nint ma = Math.min(A, B);\nint mi = A + B - N;\nif (mi <= 0) {\nmi = 0;}\nSystem.out.println(ma + \" \" + mi);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "mi", "=", "A", "+", "B", "-", "N", ";", "<3>", "if", "(", "mi", "<=", "0", ")", "{", "<4>", "mi", "=", "0", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "mi", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"], ["mi", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"], ["mi", "2"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["ma", "5"], ["mi", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "5": [[5, 3, 2, 1, 0]]}}
{"id": 4041, "code": "int a = 10, b = 0, c = 12, d = 0, K = 120;\nint hour = (c - a) * 60;\nint min = d - b;\nint ans = hour + min - K;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "a", "=", "10", ",", "b", "=", "0", ",", "c", "=", "12", ",", "d", "=", "0", ",", "K", "=", "120", ";", "<1>", "int", "hour", "=", "(", "c", "-", "a", ")", "*", "60", ";", "<2>", "int", "min", "=", "d", "-", "b", ";", "<3>", "int", "ans", "=", "hour", "+", "min", "-", "K", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["K", "120"]]}, {"line": 1, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["K", "120"], ["hour", "120"]]}, {"line": 2, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["K", "120"], ["hour", "120"], ["min", "0"]]}, {"line": 3, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["K", "120"], ["hour", "120"], ["min", "0"], ["ans", "0"]]}, {"line": 4, "state": [["a", "10"], ["b", "0"], ["c", "12"], ["d", "0"], ["K", "120"], ["hour", "120"], ["min", "0"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 8118, "code": "int n = 3, k = 3;\nint[] a = {1, 2, 3};\nint i = indexOf(a, 1);\nint s = n;\nfor (int j = i - k + 1; j < i + k; j++) {\nif (j < 0) {\ncontinue;}\nelse if (j >= n) {\ncontinue;}\nelse {\nint l = j;\nint u = (n - 1 - j);\nint t = (l + k - 2) / (k - 1) + (u + k - 2) / (k - 1);\ns = Math.min(s, t);}}\nSystem.out.println(s);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "int", "i", "=", "indexOf", "(", "a", ",", "1", ")", ";", "<3>", "int", "s", "=", "n", ";", "<4>", "for", "(", "int", "j", "=", "i", "-", "k", "+", "1", ";", "j", "<", "i", "+", "k", ";", "j", "++", ")", "{", "<5>", "if", "(", "j", "<", "0", ")", "{", "<6>", "continue", ";", "}", "<7>", "else", "if", "(", "j", ">=", "n", ")", "{", "<8>", "continue", ";", "}", "<9>", "else", "{", "<10>", "int", "l", "=", "j", ";", "<11>", "int", "u", "=", "(", "n", "-", "1", "-", "j", ")", ";", "<12>", "int", "t", "=", "(", "l", "+", "k", "-", "2", ")", "/", "(", "k", "-", "1", ")", "+", "(", "u", "+", "k", "-", "2", ")", "/", "(", "k", "-", "1", ")", ";", "<13>", "s", "=", "Math", ".", "min", "(", "s", ",", "t", ")", ";", "}", "}", "<14>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "-2"]]}, {"line": 5, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "-2"]]}, {"line": 6, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "-2"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "-1"]]}, {"line": 5, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "-1"]]}, {"line": 6, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "-1"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "0"]]}, {"line": 5, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "0"]]}, {"line": 7, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "0"]]}, {"line": 10, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "0"], ["l", "0"]]}, {"line": 11, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "0"], ["l", "0"], ["u", "2"]]}, {"line": 12, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "3"], ["j", "0"], ["l", "0"], ["u", "2"], ["t", "1"]]}, {"line": 13, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "0"], ["l", "0"], ["u", "2"], ["t", "1"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "0"], ["u", "2"], ["t", "1"]]}, {"line": 5, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "0"], ["u", "2"], ["t", "1"]]}, {"line": 7, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "0"], ["u", "2"], ["t", "1"]]}, {"line": 10, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "1"], ["u", "2"], ["t", "1"]]}, {"line": 11, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "1"], ["u", "1"], ["t", "1"]]}, {"line": 12, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "1"], ["u", "1"], ["t", "2"]]}, {"line": 13, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "1"], ["l", "1"], ["u", "1"], ["t", "2"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "1"], ["u", "1"], ["t", "2"]]}, {"line": 5, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "1"], ["u", "1"], ["t", "2"]]}, {"line": 7, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "1"], ["u", "1"], ["t", "2"]]}, {"line": 10, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "2"], ["u", "1"], ["t", "2"]]}, {"line": 11, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "2"], ["u", "0"], ["t", "2"]]}, {"line": 12, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "2"], ["u", "0"], ["t", "1"]]}, {"line": 13, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "2"], ["u", "0"], ["t", "1"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "2"], ["u", "0"], ["t", "1"]]}, {"line": 14, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"], ["i", "0"], ["s", "1"], ["j", "2"], ["l", "2"], ["u", "0"], ["t", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 0]], "4": [[4, 2, 1], [4, 5, 4, 2, 1], [4, 5, 4, 5, 4, 2, 1], [4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "5": [[5, 4, 2, 1], [5, 4, 5, 4, 2, 1], [5, 4, 5, 4, 5, 4, 2, 1], [5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "6": [[6], [6]], "7": [[7, 5, 4, 5, 4, 5, 4, 2, 1], [7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "10": [[10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [10, 7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "11": [[11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "12": [[12, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [12, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [12, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "13": [[13, 12, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [13, 12, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1], [13, 12, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]], "14": [[14, 13, 12, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 11, 10, 7, 5, 4, 5, 4, 5, 4, 2, 1]]}}
{"id": 18443, "code": "int A = 3;\nint B = 7;\nint N = 10;\nif (A < B) {\nint X = N / B;\nif (N % B == 0) {\nSystem.out.println(X);}\nelse {\nSystem.out.println(X + 1);}}\nelse {\nint X = N / A;\nif (N % A == 0) {\nSystem.out.println(X);}\nelse {\nSystem.out.println(X + 1);}}", "code_tokens": ["<0>", "int", "A", "=", "3", ";", "<1>", "int", "B", "=", "7", ";", "<2>", "int", "N", "=", "10", ";", "<3>", "if", "(", "A", "<", "B", ")", "{", "<4>", "int", "X", "=", "N", "/", "B", ";", "<5>", "if", "(", "N", "%", "B", "==", "0", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "X", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "X", "+", "1", ")", ";", "}", "}", "<9>", "else", "{", "<10>", "int", "X", "=", "N", "/", "A", ";", "<11>", "if", "(", "N", "%", "A", "==", "0", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "X", ")", ";", "}", "<13>", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "X", "+", "1", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["A", "3"]]}, {"line": 1, "state": [["A", "3"], ["B", "7"]]}, {"line": 2, "state": [["A", "3"], ["B", "7"], ["N", "10"]]}, {"line": 3, "state": [["A", "3"], ["B", "7"], ["N", "10"]]}, {"line": 4, "state": [["A", "3"], ["B", "7"], ["N", "10"], ["X", "1"]]}, {"line": 5, "state": [["A", "3"], ["B", "7"], ["N", "10"], ["X", "1"]]}, {"line": 8, "state": [["A", "3"], ["B", "7"], ["N", "10"], ["X", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]], "8": [[8, 4, 3, 1, 0]]}}
{"id": 9345, "code": "String S = \"2017/01/31\";\nString day = S.substring(S.length() - 6);\nSystem.out.println(\"2018\" + day);", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/31\"", ";", "<1>", "String", "day", "=", "S", ".", "substring", "(", "S", ".", "length", "(", ")", "-", "6", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "day", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/31"]]}, {"line": 1, "state": [["S", "2017/01/31"], ["day", "/01/31"]]}, {"line": 2, "state": [["S", "2017/01/31"], ["day", "/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 17418, "code": "String s = \"1905\";\nint a = Integer.parseInt(s.substring(0, 2));\nint b = Integer.parseInt(s.substring(2));\nif (0 < a && a < 13) {\nif (0 < b && b < 13) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse {\nif (0 < b && b < 13) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "String", "s", "=", "\"1905\"", ";", "<1>", "int", "a", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "0", ",", "2", ")", ")", ";", "<2>", "int", "b", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "2", ")", ")", ";", "<3>", "if", "(", "0", "<", "a", "&&", "a", "<", "13", ")", "{", "<4>", "if", "(", "0", "<", "b", "&&", "b", "<", "13", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<8>", "else", "{", "<9>", "if", "(", "0", "<", "b", "&&", "b", "<", "13", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["s", "1905"]]}, {"line": 1, "state": [["s", "1905"], ["a", "19"]]}, {"line": 2, "state": [["s", "1905"], ["a", "19"], ["b", "5"]]}, {"line": 3, "state": [["s", "1905"], ["a", "19"], ["b", "5"]]}, {"line": 9, "state": [["s", "1905"], ["a", "19"], ["b", "5"]]}, {"line": 10, "state": [["s", "1905"], ["a", "19"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "9": [[9, 2, 1, 0]], "10": [[10]]}}
{"id": 4986, "code": "String s = \"xyz\";\nSystem.out.print(s.charAt(0));System.out.print(len(s) - 2);System.out.print(s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "0", ")", ")", ";", "System", ".", "out", ".", "print", "(", "len", "(", "s", ")", "-", "2", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9338, "code": "String S = \"2017/01/07\";\nSystem.out.println(\"2018\" + S.substring(4));", "code_tokens": ["<0>", "String", "S", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "S", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "2017/01/07"]]}, {"line": 1, "state": [["S", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 12006, "code": "int m1 = 11, d1 = 16;\nint m2 = 11, d2 = 17;\nint ans = 1;\nif (m1 == m2) {\nans = 0;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "16", ";", "<1>", "int", "m2", "=", "11", ",", "d2", "=", "17", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "if", "(", "m1", "==", "m2", ")", "{", "<4>", "ans", "=", "0", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "16"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ans", "1"]]}, {"line": 3, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ans", "1"]]}, {"line": 4, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ans", "0"]]}, {"line": 5, "state": [["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 2]], "5": [[5, 4, 2]]}}
{"id": 11899, "code": "int m1 = 11, d1 = 30;\nint m2 = 12, d2 = 1;\nSystem.out.println(new String[] {\"0\", \"1\"}[m1 < m2 ? 1 : 0]);", "code_tokens": ["<0>", "int", "m1", "=", "11", ",", "d1", "=", "30", ";", "<1>", "int", "m2", "=", "12", ",", "d2", "=", "1", ";", "<2>", "System", ".", "out", ".", "println", "(", "new", "String", "[", "]", "{", "\"0\"", ",", "\"1\"", "}", "[", "m1", "<", "m2", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["m1", "11"], ["d1", "30"]]}, {"line": 1, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}, {"line": 2, "state": [["m1", "11"], ["d1", "30"], ["m2", "12"], ["d2", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 15934, "code": "int A = 20, B = 30;\nSystem.out.println((B * 2) >= A ? 0 : A - (B * 2));", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "B", "*", "2", ")", ">=", "A", "?", "0", ":", "A", "-", "(", "B", "*", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2923, "code": "String s = \"35753\";\nint ans = 753;\nfor (int i = 0; i < s.length() - 2; i++) {\nint x = Integer.parseInt(s.substring(i, i + 3));\nif (Math.abs(753 - x) < ans) {\nans = Math.abs(753 - x);}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"35753\"", ";", "<1>", "int", "ans", "=", "753", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "x", "=", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "if", "(", "Math", ".", "abs", "(", "753", "-", "x", ")", "<", "ans", ")", "{", "<5>", "ans", "=", "Math", ".", "abs", "(", "753", "-", "x", ")", ";", "}", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "35753"]]}, {"line": 1, "state": [["s", "35753"], ["ans", "753"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "753"], ["i", "0"]]}, {"line": 3, "state": [["s", "35753"], ["ans", "753"], ["i", "0"], ["x", "357"]]}, {"line": 4, "state": [["s", "35753"], ["ans", "753"], ["i", "0"], ["x", "357"]]}, {"line": 5, "state": [["s", "35753"], ["ans", "396"], ["i", "0"], ["x", "357"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "396"], ["i", "1"], ["x", "357"]]}, {"line": 3, "state": [["s", "35753"], ["ans", "396"], ["i", "1"], ["x", "575"]]}, {"line": 4, "state": [["s", "35753"], ["ans", "396"], ["i", "1"], ["x", "575"]]}, {"line": 5, "state": [["s", "35753"], ["ans", "178"], ["i", "1"], ["x", "575"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "178"], ["i", "2"], ["x", "575"]]}, {"line": 3, "state": [["s", "35753"], ["ans", "178"], ["i", "2"], ["x", "753"]]}, {"line": 4, "state": [["s", "35753"], ["ans", "178"], ["i", "2"], ["x", "753"]]}, {"line": 5, "state": [["s", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"]]}, {"line": 2, "state": [["s", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"]]}, {"line": 6, "state": [["s", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 11312, "code": "String S = \"SAT\";\nint output = 0;if (S.equals(\"SUN\")) {\noutput = 7;\n} else if (S.equals(\"MON\")) {\noutput = 6;\n} else if (S.equals(\"TUE\")) {\noutput = 5;\n} else if (S.equals(\"WED\")) {\noutput = 4;\n} else if (S.equals(\"THU\")) {\noutput = 3;\n} else if (S.equals(\"FRI\")) {\noutput = 2;\n} else if (S.equals(\"SAT\")) {\noutput = 1;}\nSystem.out.println(output);", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "int", "output", "=", "0", ";", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "output", "=", "7", ";", "<3>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "output", "=", "6", ";", "<5>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "output", "=", "5", ";", "<7>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "output", "=", "4", ";", "<9>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "output", "=", "3", ";", "<11>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "output", "=", "2", ";", "<13>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "output", "=", "1", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "output", ")", ";"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"]]}, {"line": 3, "state": [["S", "SAT"]]}, {"line": 5, "state": [["S", "SAT"]]}, {"line": 7, "state": [["S", "SAT"]]}, {"line": 9, "state": [["S", "SAT"]]}, {"line": 11, "state": [["S", "SAT"]]}, {"line": 13, "state": [["S", "SAT"]]}, {"line": 14, "state": [["S", "SAT"], ["output", "1"]]}, {"line": 15, "state": [["S", "SAT"], ["output", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]], "7": [[7, 5, 3, 1, 0]], "9": [[9, 7, 5, 3, 1, 0]], "11": [[11, 9, 7, 5, 3, 1, 0]], "13": [[13, 11, 9, 7, 5, 3, 1, 0]], "14": [[14]], "15": [[15, 14]]}}
{"id": 4476, "code": "String s = \"xyz\";\nchar first = s.charAt(0);\nchar end = s.charAt(s.length() - 1);\nint strCount = s.length() - 2;\nSystem.out.println(String.format(\"%c%d%c\", first, strCount, end));", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "char", "first", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "end", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "int", "strCount", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<4>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%c%d%c\"", ",", "first", ",", "strCount", ",", "end", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["first", "x"]]}, {"line": 2, "state": [["s", "xyz"], ["first", "x"], ["end", "z"]]}, {"line": 3, "state": [["s", "xyz"], ["first", "x"], ["end", "z"], ["strCount", "1"]]}, {"line": 4, "state": [["s", "xyz"], ["first", "x"], ["end", "z"], ["strCount", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 9569, "code": "String s = \"2017/01/31\";\ns = \"2018/01\" + s.substring(7, 10);\nSystem.out.println(s);", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/31\"", ";", "<1>", "s", "=", "\"2018/01\"", "+", "s", ".", "substring", "(", "7", ",", "10", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/31"]]}, {"line": 1, "state": [["s", "2018/01/31"]]}, {"line": 2, "state": [["s", "2018/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 14696, "code": "int N = 2, P = 0;\nint[] A = {1, 3};\nint kisu = 0;\nint gusu = 0;\nfor (int a : A) {\nif (a % 2 == 1) {\nkisu += 1;}\nelse {\ngusu += 1;}}\nint total = (int) Math.pow(2, N);\nint ans;if (kisu == 0) {\nans = (int) Math.pow(2, gusu);}\nelse {\nans = (int) Math.pow(2, gusu) * (int) Math.pow(2, kisu - 1);}\nif (P == 0) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(total - ans);}", "code_tokens": ["<0>", "int", "N", "=", "2", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "3", "}", ";", "<2>", "int", "kisu", "=", "0", ";", "<3>", "int", "gusu", "=", "0", ";", "<4>", "for", "(", "int", "a", ":", "A", ")", "{", "<5>", "if", "(", "a", "%", "2", "==", "1", ")", "{", "<6>", "kisu", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "gusu", "+=", "1", ";", "}", "}", "<9>", "int", "total", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "N", ")", ";", "<10>", "int", "ans", ";", "if", "(", "kisu", "==", "0", ")", "{", "<11>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "gusu", ")", ";", "}", "<12>", "else", "{", "<13>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "gusu", ")", "*", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "kisu", "-", "1", ")", ";", "}", "<14>", "if", "(", "P", "==", "0", ")", "{", "<15>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<16>", "else", "{", "<17>", "System", ".", "out", ".", "println", "(", "total", "-", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"], ["P", "0"]]}, {"line": 2, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"]]}, {"line": 3, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "0"]]}, {"line": 4, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "0"], ["gusu", "0"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "0"], ["gusu", "0"], ["a", "1"]]}, {"line": 6, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "0"], ["gusu", "0"], ["a", "1"]]}, {"line": 7, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "1"], ["gusu", "0"], ["a", "1"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "1"], ["gusu", "0"], ["a", "3"]]}, {"line": 6, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "1"], ["gusu", "0"], ["a", "3"]]}, {"line": 7, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"]]}, {"line": 5, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"]]}, {"line": 10, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"], ["total", "4"]]}, {"line": 11, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"], ["total", "4"]]}, {"line": 14, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"], ["total", "4"], ["ans", "2"]]}, {"line": 15, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"], ["total", "4"], ["ans", "2"]]}, {"line": 16, "state": [["N", "2"], ["P", "0"], ["A", "[ 1 , 3 ]"], ["kisu", "2"], ["gusu", "0"], ["a", "3"], ["total", "4"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2], [5, 6, 5, 2], [5, 6, 5, 6, 5, 2]], "6": [[6, 5, 2], [6, 5, 6, 5, 2]], "7": [[7, 3], [7, 3]], "10": [[10, 1]], "11": [[11, 7, 3]], "14": [[14, 11, 7, 3]], "15": [[15, 1]], "16": [[16, 14, 11, 7, 3]]}}
{"id": 5656, "code": "int n = 5;\nint ans = 0;\nif (n % 2 == 0) {\nans = n / 2;\nSystem.out.println(ans);}\nelse {\nans = n / 2 + 1;\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "ans", "=", "n", "/", "2", ";", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<5>", "else", "{", "<6>", "ans", "=", "n", "/", "2", "+", "1", ";", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["ans", "0"]]}, {"line": 2, "state": [["n", "5"], ["ans", "0"]]}, {"line": 6, "state": [["n", "5"], ["ans", "3"]]}, {"line": 7, "state": [["n", "5"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "6": [[6, 2, 0]], "7": [[7, 6, 2, 0]]}}
{"id": 4901, "code": "String S = \"smiles\";\nString ans = S.charAt(0) + String.valueOf(S.length() - 2) + S.charAt(S.length() - 1);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"smiles\"", ";", "<1>", "String", "ans", "=", "S", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "S", ".", "length", "(", ")", "-", "2", ")", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "smiles"]]}, {"line": 1, "state": [["S", "smiles"], ["ans", "s4s"]]}, {"line": 2, "state": [["S", "smiles"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 10199, "code": "int n = 3;\nchar[] s = {'(', ')', ')'};\nint l_ins = 0;\nint l = 0;\nint r = 0;\nfor (int i = 0; i < n; i++) {\nif (s[i] == '(') {\nl += 1;}\nelse {\nr += 1;}\nl_ins = Math.max(l_ins, r - l);}\nint r_ins = 0;\nl = 0;\nr = 0;\nfor (int i = n - 1; i >= 0; i--) {\nif (s[i] == '(') {\nl += 1;}\nelse {\nr += 1;}\nr_ins = Math.max(r_ins, l - r);}\nchar[] ar = new char[l_ins + n + r_ins];for (int i = 0; i < l_ins; i++) {ar[i] = '(';}System.arraycopy(s, 0, ar, l_ins, n);for (int i = 0; i < r_ins; i++) {ar[l_ins + n + i] = ')';}\nSystem.out.println(String.valueOf(ar));", "code_tokens": ["<0>", "int", "n", "=", "3", ";", "<1>", "char", "[", "]", "s", "=", "{", "'('", ",", "')'", ",", "')'", "}", ";", "<2>", "int", "l_ins", "=", "0", ";", "<3>", "int", "l", "=", "0", ";", "<4>", "int", "r", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "if", "(", "s", "[", "i", "]", "==", "'('", ")", "{", "<7>", "l", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "r", "+=", "1", ";", "}", "<10>", "l_ins", "=", "Math", ".", "max", "(", "l_ins", ",", "r", "-", "l", ")", ";", "}", "<11>", "int", "r_ins", "=", "0", ";", "<12>", "l", "=", "0", ";", "<13>", "r", "=", "0", ";", "<14>", "for", "(", "int", "i", "=", "n", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "<15>", "if", "(", "s", "[", "i", "]", "==", "'('", ")", "{", "<16>", "l", "+=", "1", ";", "}", "<17>", "else", "{", "<18>", "r", "+=", "1", ";", "}", "<19>", "r_ins", "=", "Math", ".", "max", "(", "r_ins", ",", "l", "-", "r", ")", ";", "}", "<20>", "char", "[", "]", "ar", "=", "new", "char", "[", "l_ins", "+", "n", "+", "r_ins", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l_ins", ";", "i", "++", ")", "{", "ar", "[", "i", "]", "=", "'('", ";", "}", "System", ".", "arraycopy", "(", "s", ",", "0", ",", "ar", ",", "l_ins", ",", "n", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "r_ins", ";", "i", "++", ")", "{", "ar", "[", "l_ins", "+", "n", "+", "i", "]", "=", "')'", ";", "}", "<21>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "ar", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"]]}, {"line": 1, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"]]}, {"line": 2, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"]]}, {"line": 3, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "0"]]}, {"line": 4, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "0"], ["r", "0"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "0"], ["r", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "0"], ["r", "0"], ["i", "0"]]}, {"line": 7, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "0"], ["i", "1"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "0"], ["i", "1"]]}, {"line": 9, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "1"], ["i", "2"]]}, {"line": 9, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "0"], ["l", "1"], ["r", "2"], ["i", "2"]]}, {"line": 10, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "2"]]}, {"line": 11, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "2"], ["r_ins", "0"]]}, {"line": 12, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "2"], ["i", "2"], ["r_ins", "0"]]}, {"line": 13, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "0"], ["i", "2"], ["r_ins", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "0"], ["i", "2"], ["r_ins", "0"]]}, {"line": 15, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "0"], ["i", "2"], ["r_ins", "0"]]}, {"line": 18, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "1"], ["i", "2"], ["r_ins", "0"]]}, {"line": 19, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "1"], ["i", "2"], ["r_ins", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "1"], ["i", "1"], ["r_ins", "0"]]}, {"line": 15, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "1"], ["i", "1"], ["r_ins", "0"]]}, {"line": 18, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "2"], ["i", "1"], ["r_ins", "0"]]}, {"line": 19, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "2"], ["i", "1"], ["r_ins", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "2"], ["i", "0"], ["r_ins", "0"]]}, {"line": 15, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "0"], ["r", "2"], ["i", "0"], ["r_ins", "0"]]}, {"line": 16, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "0"], ["r_ins", "0"]]}, {"line": 19, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "0"], ["r_ins", "0"]]}, {"line": 14, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "0"], ["r_ins", "0"]]}, {"line": 20, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "0"], ["r_ins", "0"], ["ar", "[ ( , ( , ) , ) ]"]]}, {"line": 21, "state": [["n", "3"], ["s", "[ ( , ) , ) ]"], ["l_ins", "1"], ["l", "1"], ["r", "2"], ["i", "0"], ["r_ins", "0"], ["ar", "[ ( , ( , ) , ) ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 6, 5, 0], [5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 0]], "7": [[7, 3]], "9": [[9, 10, 7, 3], [9, 10, 9, 10, 7, 3]], "10": [[10, 7, 3], [10, 9, 10, 7, 3], [10, 9, 10, 9, 10, 7, 3]], "11": [[11]], "12": [[12, 10, 9, 10, 9, 10, 7, 3]], "13": [[13, 10, 9, 10, 9, 10, 7, 3]], "14": [[14, 5, 6, 5, 6, 5, 6, 5, 0], [14, 15, 14, 5, 6, 5, 6, 5, 6, 5, 0], [14, 15, 14, 15, 14, 5, 6, 5, 6, 5, 6, 5, 0], [14, 15, 14, 15, 14, 15, 14, 5, 6, 5, 6, 5, 6, 5, 0]], "15": [[15, 14, 5, 6, 5, 6, 5, 6, 5, 0], [15, 14, 15, 14, 5, 6, 5, 6, 5, 6, 5, 0], [15, 14, 15, 14, 15, 14, 5, 6, 5, 6, 5, 6, 5, 0]], "16": [[16, 19, 18, 19, 18, 13, 10, 9, 10, 9, 10, 7, 3]], "18": [[18, 13, 10, 9, 10, 9, 10, 7, 3], [18, 19, 18, 13, 10, 9, 10, 9, 10, 7, 3]], "19": [[19, 18, 13, 10, 9, 10, 9, 10, 7, 3], [19, 18, 19, 18, 13, 10, 9, 10, 9, 10, 7, 3], [19, 16, 19, 18, 19, 18, 13, 10, 9, 10, 9, 10, 7, 3]], "20": [[20, 19, 16, 19, 18, 19, 18, 13, 10, 9, 10, 9, 10, 7, 3]], "21": [[21, 20, 19, 16, 19, 18, 19, 18, 13, 10, 9, 10, 9, 10, 7, 3]]}}
{"id": 1698, "code": "int n = 10, a = 7, b = 5;\nif (n - (a + b) > 0) {\nSystem.out.println(Math.min(a, b) + \" \" + 0);}\nelse {\nSystem.out.println(Math.min(a, b) + \" \" + Math.abs(n - (a + b)));}", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "if", "(", "n", "-", "(", "a", "+", "b", ")", ">", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "Math", ".", "abs", "(", "n", "-", "(", "a", "+", "b", ")", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 4, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 6677, "code": "int h = 210, n = 5;\nint[] A = {31, 41, 59, 26, 53};\nif (h - sum(A) > 0) {\nSystem.out.println(\"No\");} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "h", "-", "sum", "(", "A", ")", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 5, "state": [["h", "210"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 855, "code": "int k = 101;\nint rep = 0;\nint f = 0;\nfor (int i = 0; i < k; i++) {\nrep = rep * 10 + 7;\nif (rep % k == 0) {\nf = 1;\nbreak;}\nrep = rep % k;}\nSystem.out.println(f == 0 ? -1 : (i + 1));", "code_tokens": ["<0>", "int", "k", "=", "101", ";", "<1>", "int", "rep", "=", "0", ";", "<2>", "int", "f", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "k", ";", "i", "++", ")", "{", "<4>", "rep", "=", "rep", "*", "10", "+", "7", ";", "<5>", "if", "(", "rep", "%", "k", "==", "0", ")", "{", "<6>", "f", "=", "1", ";", "<7>", "break", ";", "}", "<8>", "rep", "=", "rep", "%", "k", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "f", "==", "0", "?", "-", "1", ":", "(", "i", "+", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["k", "101"]]}, {"line": 1, "state": [["k", "101"], ["rep", "0"]]}, {"line": 2, "state": [["k", "101"], ["rep", "0"], ["f", "0"]]}, {"line": 3, "state": [["k", "101"], ["rep", "0"], ["f", "0"], ["i", "0"]]}, {"line": 4, "state": [["k", "101"], ["rep", "7"], ["f", "0"], ["i", "0"]]}, {"line": 5, "state": [["k", "101"], ["rep", "7"], ["f", "0"], ["i", "0"]]}, {"line": 8, "state": [["k", "101"], ["rep", "7"], ["f", "0"], ["i", "0"]]}, {"line": 3, "state": [["k", "101"], ["rep", "7"], ["f", "0"], ["i", "1"]]}, {"line": 4, "state": [["k", "101"], ["rep", "77"], ["f", "0"], ["i", "1"]]}, {"line": 5, "state": [["k", "101"], ["rep", "77"], ["f", "0"], ["i", "1"]]}, {"line": 8, "state": [["k", "101"], ["rep", "77"], ["f", "0"], ["i", "1"]]}, {"line": 3, "state": [["k", "101"], ["rep", "77"], ["f", "0"], ["i", "2"]]}, {"line": 4, "state": [["k", "101"], ["rep", "777"], ["f", "0"], ["i", "2"]]}, {"line": 5, "state": [["k", "101"], ["rep", "777"], ["f", "0"], ["i", "2"]]}, {"line": 8, "state": [["k", "101"], ["rep", "70"], ["f", "0"], ["i", "2"]]}, {"line": 3, "state": [["k", "101"], ["rep", "70"], ["f", "0"], ["i", "3"]]}, {"line": 4, "state": [["k", "101"], ["rep", "707"], ["f", "0"], ["i", "3"]]}, {"line": 5, "state": [["k", "101"], ["rep", "707"], ["f", "0"], ["i", "3"]]}, {"line": 6, "state": [["k", "101"], ["rep", "707"], ["f", "1"], ["i", "3"]]}, {"line": 7, "state": [["k", "101"], ["rep", "707"], ["f", "1"], ["i", "3"]]}, {"line": 9, "state": [["k", "101"], ["rep", "707"], ["f", "1"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 0], [3, 0], [3, 0]], "4": [[4, 1], [4, 8, 5, 4, 1], [4, 8, 5, 4, 8, 5, 4, 1], [4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 8, 5, 4, 1], [5, 4, 8, 5, 4, 8, 5, 4, 1], [5, 4, 8, 5, 4, 8, 5, 4, 8, 5, 4, 1]], "6": [[6, 2]], "7": [[7]], "8": [[8, 5, 4, 1], [8, 5, 4, 8, 5, 4, 1], [8, 5, 4, 8, 5, 4, 8, 5, 4, 1]], "9": [[9, 6, 2]]}}
{"id": 1636, "code": "int n = 100, a = 100, b = 100;\nint maxInt = 0;\nint minInt = 0;\nif (a <= b) {\nmaxInt = a;\nminInt = a - (n - b);} else {\nmaxInt = b;\nminInt = b - (n - a);}\nif (a + b < n) {\nminInt = 0;}\nSystem.out.println(maxInt + \" \" + minInt);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "maxInt", "=", "0", ";", "<2>", "int", "minInt", "=", "0", ";", "<3>", "if", "(", "a", "<=", "b", ")", "{", "<4>", "maxInt", "=", "a", ";", "<5>", "minInt", "=", "a", "-", "(", "n", "-", "b", ")", ";", "}", "else", "{", "<6>", "maxInt", "=", "b", ";", "<7>", "minInt", "=", "b", "-", "(", "n", "-", "a", ")", ";", "}", "<8>", "if", "(", "a", "+", "b", "<", "n", ")", "{", "<9>", "minInt", "=", "0", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "maxInt", "+", "\" \"", "+", "minInt", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"], ["minInt", "0"]]}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"], ["minInt", "0"]]}, {"line": 4, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"], ["minInt", "0"], ["maxInt", "100"]]}, {"line": 5, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"], ["minInt", "100"], ["maxInt", "100"]]}, {"line": 9, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"], ["minInt", "100"], ["maxInt", "100"]]}, {"line": 11, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["maxint", "0"], ["minInt", "100"], ["maxInt", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]], "5": [[5, 4, 3, 0]], "9": [[9, 5, 4, 3, 0]], "11": [[11, 5, 4, 3, 0]]}}
{"id": 4737, "code": "String charStr = \"xyz\";\nint length = charStr.length();\nSystem.out.println(String.format(\"%s%d%s\", charStr.charAt(0), length - 2, charStr.charAt(length - 1)));", "code_tokens": ["<0>", "String", "charStr", "=", "\"xyz\"", ";", "<1>", "int", "length", "=", "charStr", ".", "length", "(", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "charStr", ".", "charAt", "(", "0", ")", ",", "length", "-", "2", ",", "charStr", ".", "charAt", "(", "length", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["char", "xyz"]]}, {"line": 1, "state": [["char", "xyz"], ["length", "3"]]}, {"line": 2, "state": [["char", "xyz"], ["length", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1463, "code": "int N = 112;\nif (N % 111 == 0) {\nSystem.out.println(N);}\nelse {\nint A = (N / 111 + 1) * 111;\nSystem.out.println(A);}", "code_tokens": ["<0>", "int", "N", "=", "112", ";", "<1>", "if", "(", "N", "%", "111", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "A", "=", "(", "N", "/", "111", "+", "1", ")", "*", "111", ";", "<5>", "System", ".", "out", ".", "println", "(", "A", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "112"]]}, {"line": 1, "state": [["N", "112"]]}, {"line": 4, "state": [["N", "112"], ["A", "222"]]}, {"line": 5, "state": [["N", "112"], ["A", "222"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]]}}
{"id": 13534, "code": "String n = \"abcde,fghihgf,edcba\";\nfor (char i : n.toCharArray()) {\nif (i == ',') {\nn = n.replace(\",\", \" \");}}\nSystem.out.println(n);", "code_tokens": ["<0>", "String", "n", "=", "\"abcde,fghihgf,edcba\"", ";", "<1>", "for", "(", "char", "i", ":", "n", ".", "toCharArray", "(", ")", ")", "{", "<2>", "if", "(", "i", "==", "','", ")", "{", "<3>", "n", "=", "n", ".", "replace", "(", "\",\"", ",", "\" \"", ")", ";", "}", "}", "<4>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["n", "abcde , fghihgf , edcba"]]}, {"line": 1, "state": [["n", "abcde , fghihgf , edcba"], ["i", "a"]]}, {"line": 2, "state": [["n", "abcde , fghihgf , edcba"], ["i", "a"]]}, {"line": 1, "state": [["n", "abcde , fghihgf , edcba"], ["i", "b"]]}, {"line": 2, "state": [["n", "abcde , fghihgf , edcba"], ["i", "b"]]}, {"line": 1, "state": [["n", "abcde , fghihgf , edcba"], ["i", "c"]]}, {"line": 2, "state": [["n", "abcde , fghihgf , edcba"], ["i", "c"]]}, {"line": 1, "state": [["n", "abcde , fghihgf , edcba"], ["i", "d"]]}, {"line": 2, "state": [["n", "abcde , fghihgf , edcba"], ["i", "d"]]}, {"line": 1, "state": [["n", "abcde , fghihgf , edcba"], ["i", "e"]]}, {"line": 2, "state": [["n", "abcde , fghihgf , edcba"], ["i", "e"]]}, {"line": 1, "state": [["n", "abcde , fghihgf , edcba"], ["i", ","]]}, {"line": 2, "state": [["n", "abcde , fghihgf , edcba"], ["i", ","]]}, {"line": 3, "state": [["n", "abcde fghihgf edcba"], ["i", ","]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "<_io.TextIOWrapper name=result/exec/result_17.json mode=r encoding=utf8>"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "<_io.TextIOWrapper name=result/exec/result_17.json mode=r encoding=utf8>"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "g"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "g"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "h"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "h"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "1"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "1"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "h"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "h"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "g"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "g"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "<_io.TextIOWrapper name=result/exec/result_17.json mode=r encoding=utf8>"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "<_io.TextIOWrapper name=result/exec/result_17.json mode=r encoding=utf8>"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", ","]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", ","]]}, {"line": 3, "state": [["n", "abcde fghihgf edcba"], ["i", ","]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "e"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "e"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "d"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "d"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "c"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "c"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "b"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "b"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "a"]]}, {"line": 2, "state": [["n", "abcde fghihgf edcba"], ["i", "a"]]}, {"line": 1, "state": [["n", "abcde fghihgf edcba"], ["i", "a"]]}, {"line": 4, "state": [["n", "abcde fghihgf edcba"], ["i", "a"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 2, 1, 0], [1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "2": [[2, 1, 0], [2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "3": [[3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0], [3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]], "4": [[4, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]]}}
{"id": 15643, "code": "int X = 12, Y = 3, Z = 1;\nint n = X / (Y + Z);\nif (X % (Y + Z) < Z) {\nSystem.out.println(n - 1);} else {\nSystem.out.println(n);}", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "n", "=", "X", "/", "(", "Y", "+", "Z", ")", ";", "<2>", "if", "(", "X", "%", "(", "Y", "+", "Z", ")", "<", "Z", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "n", "-", "1", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["n", "3"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["n", "3"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["n", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]]}}
{"id": 1701, "code": "double n = 10.0, a = 7.0, b = 5.0;\nSystem.out.println((int) Math.min(a, b) + \" \" + (int) Math.max(a + b - n, 0));", "code_tokens": ["<0>", "double", "n", "=", "10.0", ",", "a", "=", "7.0", ",", "b", "=", "5.0", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "(", "int", ")", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "10.0"], ["a", "7.0"], ["b", "5.0"]]}, {"line": 1, "state": [["n", "10.0"], ["a", "7.0"], ["b", "5.0"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 198, "code": "Scanner scanner = new Scanner(System.in);\nchar[] S = {'c', 'o', 'd', 'e', 'f', 'e', 's', 't', 'i', 'v', 'a'};\nint K = 100;\nint a = 'a';\nint N = S.length;\nfor (int i = 0; i < N; i++) {\nint x = S[i];\nif (K >= (a - x + 26) % 26) {\nK -= (a - x + 26) % 26;\nS[i] = 'a';}}\nS[N - 1] = (char) ((S[N - 1] - a + K % 26 + 26) % 26 + a);\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "char", "[", "]", "S", "=", "{", "'c'", ",", "'o'", ",", "'d'", ",", "'e'", ",", "'f'", ",", "'e'", ",", "'s'", ",", "'t'", ",", "'i'", ",", "'v'", ",", "'a'", "}", ";", "<2>", "int", "K", "=", "100", ";", "<3>", "int", "a", "=", "'a'", ";", "<4>", "int", "N", "=", "S", ".", "length", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<6>", "int", "x", "=", "S", "[", "i", "]", ";", "<7>", "if", "(", "K", ">=", "(", "a", "-", "x", "+", "26", ")", "%", "26", ")", "{", "<8>", "K", "-=", "(", "a", "-", "x", "+", "26", ")", "%", "26", ";", "<9>", "S", "[", "i", "]", "=", "'a'", ";", "}", "}", "<10>", "S", "[", "N", "-", "1", "]", "=", "(", "char", ")", "(", "(", "S", "[", "N", "-", "1", "]", "-", "a", "+", "K", "%", "26", "+", "26", ")", "%", "26", "+", "a", ")", ";", "<11>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"]]}, {"line": 3, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "100"]]}, {"line": 4, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "100"], ["a", "97"]]}, {"line": 5, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "100"], ["a", "97"], ["N", "11"]]}, {"line": 6, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "100"], ["a", "97"], ["N", "11"], ["i", "0"]]}, {"line": 7, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "100"], ["a", "97"], ["N", "11"], ["i", "0"], ["x", "99"]]}, {"line": 8, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "100"], ["a", "97"], ["N", "11"], ["i", "0"], ["x", "99"]]}, {"line": 9, "state": [["S", "[ c , o , d , e , f , e , s , t , i , v , a ]"], ["K", "76"], ["a", "97"], ["N", "11"], ["i", "0"], ["x", "99"]]}, {"line": 10, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a ]"], ["K", "76"], ["a", "97"], ["N", "11"], ["i", "0"], ["x", "99"]]}, {"line": 6, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a ]"], ["K", "76"], ["a", "97"], ["N", "11"], ["i", "1"], ["x", "99"]]}, {"line": 7, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a ]"], ["K", "76"], ["a", "97"], ["N", "11"], ["i", "1"], ["x", "111"]]}, {"line": 8, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a ]"], ["K", "76"], ["a", "97"], ["N", "11"], ["i", "1"], ["x", "111"]]}, {"line": 9, "state": [["S", "[ a , o , d , e , f , e , s , t , i , v , a ]"], ["K", "64"], ["a", "97"], ["N", "11"], ["i", "1"], ["x", "111"]]}, {"line": 10, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a ]"], ["K", "64"], ["a", "97"], ["N", "11"], ["i", "1"], ["x", "111"]]}, {"line": 6, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a ]"], ["K", "64"], ["a", "97"], ["N", "11"], ["i", "2"], ["x", "111"]]}, {"line": 7, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a ]"], ["K", "64"], ["a", "97"], ["N", "11"], ["i", "2"], ["x", "100"]]}, {"line": 8, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a ]"], ["K", "64"], ["a", "97"], ["N", "11"], ["i", "2"], ["x", "100"]]}, {"line": 9, "state": [["S", "[ a , a , d , e , f , e , s , t , i , v , a ]"], ["K", "41"], ["a", "97"], ["N", "11"], ["i", "2"], ["x", "100"]]}, {"line": 10, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a ]"], ["K", "41"], ["a", "97"], ["N", "11"], ["i", "2"], ["x", "100"]]}, {"line": 6, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a ]"], ["K", "41"], ["a", "97"], ["N", "11"], ["i", "3"], ["x", "100"]]}, {"line": 7, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a ]"], ["K", "41"], ["a", "97"], ["N", "11"], ["i", "3"], ["x", "101"]]}, {"line": 8, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a ]"], ["K", "41"], ["a", "97"], ["N", "11"], ["i", "3"], ["x", "101"]]}, {"line": 9, "state": [["S", "[ a , a , a , e , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "3"], ["x", "101"]]}, {"line": 10, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "3"], ["x", "101"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "4"], ["x", "101"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "4"], ["x", "102"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "4"], ["x", "102"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "5"], ["x", "102"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "5"], ["x", "101"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "5"], ["x", "101"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "6"], ["x", "101"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "6"], ["x", "115"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "19"], ["a", "97"], ["N", "11"], ["i", "6"], ["x", "115"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , s , t , i , v , a ]"], ["K", "11"], ["a", "97"], ["N", "11"], ["i", "6"], ["x", "115"]]}, {"line": 10, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a ]"], ["K", "11"], ["a", "97"], ["N", "11"], ["i", "6"], ["x", "115"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a ]"], ["K", "11"], ["a", "97"], ["N", "11"], ["i", "7"], ["x", "115"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a ]"], ["K", "11"], ["a", "97"], ["N", "11"], ["i", "7"], ["x", "116"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a ]"], ["K", "11"], ["a", "97"], ["N", "11"], ["i", "7"], ["x", "116"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , a , t , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "7"], ["x", "116"]]}, {"line": 10, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "7"], ["x", "116"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "8"], ["x", "116"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "8"], ["x", "105"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "8"], ["x", "105"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "9"], ["x", "105"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "9"], ["x", "118"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "9"], ["x", "118"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "118"]]}, {"line": 7, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}, {"line": 8, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}, {"line": 9, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}, {"line": 10, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}, {"line": 6, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , a ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}, {"line": 11, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , e ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}, {"line": 12, "state": [["S", "[ a , a , a , a , f , e , a , a , i , v , e ]"], ["K", "4"], ["a", "97"], ["N", "11"], ["i", "10"], ["x", "97"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2]], "6": [[6, 5, 2], [6, 10, 7, 6, 5, 2], [6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]], "7": [[7, 6, 5, 2], [7, 6, 10, 7, 6, 5, 2], [7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]], "8": [[8, 7, 6, 5, 2], [8, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [8, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]], "9": [[9, 8, 7, 6, 5, 2], [9, 8, 7, 6, 10, 7, 6, 5, 2], [9, 8, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [9, 8, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [9, 8, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [9, 8, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [9, 8, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]], "10": [[10, 7, 6, 5, 2], [10, 7, 6, 10, 7, 6, 5, 2], [10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2], [10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]], "11": [[11, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]], "12": [[12, 11, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 7, 6, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 10, 7, 6, 5, 2]]}}
{"id": 4586, "code": "String s = \"smiles\";\nint l = s.length();\nString front = String.valueOf(s.charAt(0));\nString back = String.valueOf(s.charAt(l - 1));\nString center = String.valueOf(l - 2);\nString ans = front + center + back;\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "l", "=", "s", ".", "length", "(", ")", ";", "<2>", "String", "front", "=", "String", ".", "valueOf", "(", "s", ".", "charAt", "(", "0", ")", ")", ";", "<3>", "String", "back", "=", "String", ".", "valueOf", "(", "s", ".", "charAt", "(", "l", "-", "1", ")", ")", ";", "<4>", "String", "center", "=", "String", ".", "valueOf", "(", "l", "-", "2", ")", ";", "<5>", "String", "ans", "=", "front", "+", "center", "+", "back", ";", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["l", "6"]]}, {"line": 2, "state": [["s", "smiles"], ["l", "6"], ["front", "s"]]}, {"line": 3, "state": [["s", "smiles"], ["l", "6"], ["front", "s"], ["back", "s"]]}, {"line": 4, "state": [["s", "smiles"], ["l", "6"], ["front", "s"], ["back", "s"], ["center", "4"]]}, {"line": 5, "state": [["s", "smiles"], ["l", "6"], ["front", "s"], ["back", "s"], ["center", "4"], ["ans", "s4s"]]}, {"line": 6, "state": [["s", "smiles"], ["l", "6"], ["front", "s"], ["back", "s"], ["center", "4"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]], "6": [[6, 5, 4, 3, 2, 1, 0]]}}
{"id": 12339, "code": "String S = \"level\";\nint N = S.length();\nif (S.equals(new StringBuilder(S).reverse().toString())) {\nif (S.substring(0, (N - 1) / 2).equals(S.substring((N + 1) / 2))) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "S", "=", "\"level\"", ";", "<1>", "int", "N", "=", "S", ".", "length", "(", ")", ";", "<2>", "if", "(", "S", ".", "equals", "(", "new", "StringBuilder", "(", "S", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<3>", "if", "(", "S", ".", "substring", "(", "0", ",", "(", "N", "-", "1", ")", "/", "2", ")", ".", "equals", "(", "S", ".", "substring", "(", "(", "N", "+", "1", ")", "/", "2", ")", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "level"]]}, {"line": 1, "state": [["S", "level"], ["N", "5"]]}, {"line": 2, "state": [["S", "level"], ["N", "5"]]}, {"line": 3, "state": [["S", "level"], ["N", "5"]]}, {"line": 6, "state": [["S", "level"], ["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "6": [[6]]}}
{"id": 4757, "code": "String s = \"smiles\";\nint n = s.length();\nint a = n - 2;\nSystem.out.println(s.charAt(0) + Integer.toString(n - 2) + s.charAt(n - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "a", "=", "n", "-", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "n", "-", "2", ")", "+", "s", ".", "charAt", "(", "n", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["n", "6"]]}, {"line": 2, "state": [["s", "smiles"], ["n", "6"], ["a", "4"]]}, {"line": 3, "state": [["s", "smiles"], ["n", "6"], ["a", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 11573, "code": "String S = \"SAT\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(7 - 0);}\nelse if (S.equals(\"MON\")) {\nSystem.out.println(7 - 1);}\nelse if (S.equals(\"TUE\")) {\nSystem.out.println(7 - 2);}\nelse if (S.equals(\"WED\")) {\nSystem.out.println(7 - 3);}\nelse if (S.equals(\"THU\")) {\nSystem.out.println(7 - 4);}\nelse if (S.equals(\"FRI\")) {\nSystem.out.println(7 - 5);}\nelse if (S.equals(\"SAT\")) {\nSystem.out.println(7 - 6);}", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "7", "-", "0", ")", ";", "}", "<3>", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", "-", "1", ")", ";", "}", "<5>", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "7", "-", "2", ")", ";", "}", "<7>", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "7", "-", "3", ")", ";", "}", "<9>", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "7", "-", "4", ")", ";", "}", "<11>", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "7", "-", "5", ")", ";", "}", "<13>", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "7", "-", "6", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"]]}, {"line": 3, "state": [["S", "SAT"]]}, {"line": 5, "state": [["S", "SAT"]]}, {"line": 7, "state": [["S", "SAT"]]}, {"line": 9, "state": [["S", "SAT"]]}, {"line": 11, "state": [["S", "SAT"]]}, {"line": 13, "state": [["S", "SAT"]]}, {"line": 14, "state": [["S", "SAT"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "5": [[5, 3, 1, 0]], "7": [[7, 5, 3, 1, 0]], "9": [[9, 7, 5, 3, 1, 0]], "11": [[11, 9, 7, 5, 3, 1, 0]], "13": [[13, 11, 9, 7, 5, 3, 1, 0]], "14": [[14]]}}
{"id": 12327, "code": "String S = \"level\";\nboolean T = true;\nfor (int i = 0; i <= (S.length() - 2) / 2 - 1; i++) {\nif (S.charAt(i) != S.charAt(S.length() - 1 - i)) {\nT = false;}}\nfor (int i = 0; i <= (S.length() - 3) / 4; i++) {\nif (S.charAt(i) != S.charAt((S.length() - 3) / 2 - i)) {\nT = false;}}\nif (T == false) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "String", "S", "=", "\"level\"", ";", "<1>", "boolean", "T", "=", "true", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "(", "S", ".", "length", "(", ")", "-", "2", ")", "/", "2", "-", "1", ";", "i", "++", ")", "{", "<3>", "if", "(", "S", ".", "charAt", "(", "i", ")", "!=", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", "-", "i", ")", ")", "{", "<4>", "T", "=", "false", ";", "}", "}", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "(", "S", ".", "length", "(", ")", "-", "3", ")", "/", "4", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", ".", "charAt", "(", "i", ")", "!=", "S", ".", "charAt", "(", "(", "S", ".", "length", "(", ")", "-", "3", ")", "/", "2", "-", "i", ")", ")", "{", "<7>", "T", "=", "false", ";", "}", "}", "<8>", "if", "(", "T", "==", "false", ")", "{", "<9>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<10>", "}", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "level"]]}, {"line": 1, "state": [["S", "level"], ["T", "True"]]}, {"line": 2, "state": [["S", "level"], ["T", "True"], ["i", "0"]]}, {"line": 3, "state": [["S", "level"], ["T", "True"], ["i", "0"]]}, {"line": 2, "state": [["S", "level"], ["T", "True"], ["i", "0"]]}, {"line": 5, "state": [["S", "level"], ["T", "True"], ["i", "0"]]}, {"line": 6, "state": [["S", "level"], ["T", "True"], ["i", "0"]]}, {"line": 7, "state": [["S", "level"], ["T", "False"], ["i", "0"]]}, {"line": 5, "state": [["S", "level"], ["T", "False"], ["i", "0"]]}, {"line": 8, "state": [["S", "level"], ["T", "False"], ["i", "0"]]}, {"line": 9, "state": [["S", "level"], ["T", "False"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0]], "3": [[3, 2, 0]], "5": [[5, 2, 3, 2, 0], [5, 6, 5, 2, 3, 2, 0]], "6": [[6, 5, 2, 3, 2, 0]], "7": [[7, 1]], "8": [[8, 7, 1]], "9": [[9]]}}
{"id": 591, "code": "String S = \"xyz\";\nint K = 4;\nString ans = \"\";\nfor (char s : S.toCharArray()) {\nint to_a_cost = (26 - (s - 'a')) % 26;\nif (to_a_cost <= K) {\nans += 'a';\nK -= to_a_cost;}\nelse {\nans += s;}}\nif (K > 0) {\nK %= 26;\nans = ans.substring(0, ans.length() - 1) + (char) ('a' + (((ans.charAt(ans.length() - 1) - 'a') + K) % 26));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"xyz\"", ";", "<1>", "int", "K", "=", "4", ";", "<2>", "String", "ans", "=", "\"\"", ";", "<3>", "for", "(", "char", "s", ":", "S", ".", "toCharArray", "(", ")", ")", "{", "<4>", "int", "to_a_cost", "=", "(", "26", "-", "(", "s", "-", "'a'", ")", ")", "%", "26", ";", "<5>", "if", "(", "to_a_cost", "<=", "K", ")", "{", "<6>", "ans", "+=", "'a'", ";", "<7>", "K", "-=", "to_a_cost", ";", "}", "<8>", "else", "{", "<9>", "ans", "+=", "s", ";", "}", "}", "<10>", "if", "(", "K", ">", "0", ")", "{", "<11>", "K", "%=", "26", ";", "<12>", "ans", "=", "ans", ".", "substring", "(", "0", ",", "ans", ".", "length", "(", ")", "-", "1", ")", "+", "(", "char", ")", "(", "'a'", "+", "(", "(", "(", "ans", ".", "charAt", "(", "ans", ".", "length", "(", ")", "-", "1", ")", "-", "'a'", ")", "+", "K", ")", "%", "26", ")", ")", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "xyz"]]}, {"line": 1, "state": [["S", "xyz"], ["K", "4"]]}, {"line": 2, "state": [["S", "xyz"], ["K", "4"], ["ans", ""]]}, {"line": 3, "state": [["S", "xyz"], ["K", "4"], ["ans", ""], ["s", "x"]]}, {"line": 4, "state": [["S", "xyz"], ["K", "4"], ["ans", ""], ["s", "x"], ["to_a_cost", "3"]]}, {"line": 5, "state": [["S", "xyz"], ["K", "4"], ["ans", ""], ["s", "x"], ["to_a_cost", "3"]]}, {"line": 6, "state": [["S", "xyz"], ["K", "4"], ["ans", "a"], ["s", "x"], ["to_a_cost", "3"]]}, {"line": 7, "state": [["S", "xyz"], ["K", "1"], ["ans", "a"], ["s", "x"], ["to_a_cost", "3"]]}, {"line": 3, "state": [["S", "xyz"], ["K", "1"], ["ans", "a"], ["s", "y"], ["to_a_cost", "3"]]}, {"line": 4, "state": [["S", "xyz"], ["K", "1"], ["ans", "a"], ["s", "y"], ["to_a_cost", "2"]]}, {"line": 5, "state": [["S", "xyz"], ["K", "1"], ["ans", "a"], ["s", "y"], ["to_a_cost", "2"]]}, {"line": 9, "state": [["S", "xyz"], ["K", "1"], ["ans", "ay"], ["s", "y"], ["to_a_cost", "2"]]}, {"line": 3, "state": [["S", "xyz"], ["K", "1"], ["ans", "ay"], ["s", "z"], ["to_a_cost", "2"]]}, {"line": 4, "state": [["S", "xyz"], ["K", "1"], ["ans", "ay"], ["s", "z"], ["to_a_cost", "1"]]}, {"line": 5, "state": [["S", "xyz"], ["K", "1"], ["ans", "ay"], ["s", "z"], ["to_a_cost", "1"]]}, {"line": 6, "state": [["S", "xyz"], ["K", "1"], ["s", "z"], ["to_a_cost", "1"], ["ans", "aya"]]}, {"line": 7, "state": [["S", "xyz"], ["K", "0"], ["s", "z"], ["to_a_cost", "1"], ["ans", "aya"]]}, {"line": 3, "state": [["S", "xyz"], ["K", "0"], ["s", "z"], ["to_a_cost", "1"], ["ans", "aya"]]}, {"line": 10, "state": [["S", "xyz"], ["K", "0"], ["s", "z"], ["to_a_cost", "1"], ["ans", "aya"]]}, {"line": 13, "state": [["S", "xyz"], ["K", "0"], ["s", "z"], ["to_a_cost", "1"], ["ans", "aya"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 9, 4, 3, 4, 3, 0], [3, 4, 3, 9, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 9, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 0], [5, 4, 3, 4, 3, 0], [5, 4, 3, 9, 4, 3, 4, 3, 0]], "6": [[6, 2], [6, 9, 4, 3, 4, 3, 0]], "7": [[7, 5, 4, 3, 0], [7, 5, 4, 3, 9, 4, 3, 4, 3, 0]], "9": [[9, 4, 3, 4, 3, 0]], "10": [[10, 7, 5, 4, 3, 9, 4, 3, 4, 3, 0]], "13": [[13, 6, 9, 4, 3, 4, 3, 0]]}}
{"id": 6811, "code": "int[] z = {210, 5};\nint[] x = {31, 41, 59, 26, 53};\nHashMap<Integer, Integer> d = new HashMap<>();\nint c = 0;\nfor (int i : x) {\nif (d.getOrDefault(i, 0) == 0) {\nc += i;}}\nif (c >= z[0]) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "[", "]", "z", "=", "{", "210", ",", "5", "}", ";", "<1>", "int", "[", "]", "x", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "HashMap", "<", "Integer", ",", "Integer", ">", "d", "=", "new", "HashMap", "<", ">", "(", ")", ";", "<3>", "int", "c", "=", "0", ";", "<4>", "for", "(", "int", "i", ":", "x", ")", "{", "<5>", "if", "(", "d", ".", "getOrDefault", "(", "i", ",", "0", ")", "==", "0", ")", "{", "<6>", "c", "+=", "i", ";", "}", "}", "<7>", "if", "(", "c", ">=", "z", "[", "0", "]", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<9>", "else", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["z", "[ 210 , 5 ]"]]}, {"line": 1, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"]]}, {"line": 3, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "0"]]}, {"line": 4, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "0"], ["i", "31"]]}, {"line": 5, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "0"], ["i", "31"]]}, {"line": 6, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "31"], ["i", "31"]]}, {"line": 4, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "31"], ["i", "41"]]}, {"line": 5, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "31"], ["i", "41"]]}, {"line": 6, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "72"], ["i", "41"]]}, {"line": 4, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "72"], ["i", "59"]]}, {"line": 5, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "72"], ["i", "59"]]}, {"line": 6, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "131"], ["i", "59"]]}, {"line": 4, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "131"], ["i", "26"]]}, {"line": 5, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "131"], ["i", "26"]]}, {"line": 6, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "157"], ["i", "26"]]}, {"line": 4, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "157"], ["i", "53"]]}, {"line": 5, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "157"], ["i", "53"]]}, {"line": 6, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "210"], ["i", "53"]]}, {"line": 4, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "210"], ["i", "53"]]}, {"line": 7, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "210"], ["i", "53"]]}, {"line": 8, "state": [["z", "[ 210 , 5 ]"], ["x", "[ 31 , 41 , 59 , 26 , 53 ]"], ["d", "{ }"], ["c", "210"], ["i", "53"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 6, 5, 4, 1], [4, 6, 5, 4, 6, 5, 4, 1], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 6, 5, 4, 1], [5, 4, 6, 5, 4, 6, 5, 4, 1], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1]], "6": [[6, 5, 4, 1], [6, 5, 4, 6, 5, 4, 1], [6, 5, 4, 6, 5, 4, 6, 5, 4, 1], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1]], "7": [[7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 1]], "8": [[8]]}}
{"id": 1573, "code": "int n = 112;\nSystem.out.println(((n + 110) / 111) * 111);", "code_tokens": ["<0>", "int", "n", "=", "112", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "(", "n", "+", "110", ")", "/", "111", ")", "*", "111", ")", ";"], "trace": [{"line": 0, "state": [["n", "112"]]}, {"line": 1, "state": [["n", "112"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 4659, "code": "String S = \"xyz\";\nint N = S.length() - 2;\nSystem.out.println(S.charAt(0) + String.valueOf(N) + S.charAt(S.length() - 1));", "code_tokens": ["<0>", "String", "S", "=", "\"xyz\"", ";", "<1>", "int", "N", "=", "S", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "S", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "N", ")", "+", "S", ".", "charAt", "(", "S", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "xyz"]]}, {"line": 1, "state": [["S", "xyz"], ["N", "1"]]}, {"line": 2, "state": [["S", "xyz"], ["N", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 5075, "code": "String s = \"smiles\";\nint n = s.length() - 2;\nString ans = s.charAt(0) + Integer.toString(n) + s.charAt(s.length() - 1);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "String", "ans", "=", "s", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "n", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": []}, {"line": 4, "state": []}, {"line": 5, "state": []}, {"line": 6, "state": [["s", "smiles"]]}, {"line": 7, "state": [["s", "smiles"], ["n", "4"]]}, {"line": 8, "state": [["s", "smiles"], ["n", "4"], ["ans", "s4s"]]}, {"line": 9, "state": [["s", "smiles"], ["n", "4"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 6]], "8": [[8, 7, 6]], "9": [[9, 8, 7, 6]]}}
{"id": 2707, "code": "if (java.util.Arrays.equals(java.util.Arrays.stream(\"4 9 0 8\".split(\" \")).mapToInt(Integer::parseInt).sorted().toArray(), new int[]{1, 4, 7, 9})) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "if", "(", "java", ".", "util", ".", "Arrays", ".", "equals", "(", "java", ".", "util", ".", "Arrays", ".", "stream", "(", "\"4 9 0 8\"", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "sorted", "(", ")", ".", "toArray", "(", ")", ",", "new", "int", "[", "]", "{", "1", ",", "4", ",", "7", ",", "9", "}", ")", ")", "{", "<1>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<2>", "}", "else", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 3, "state": []}], "slices": {"0": [[0]], "3": [[3]]}}
{"id": 8951, "code": "int N = 5;\nint[] A = {3, 2, 2, 4, 1};\nint[] B = {1, 2, 2, 2, 1};\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nint ans_ = 0;for (int j = 0; j <= i; j++) {ans_ += A[j];}\nfor (int j = i; j < N; j++) {ans_ += B[j];}\nans = Math.max(ans, ans_);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "ans_", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "ans_", "+=", "A", "[", "j", "]", ";", "}", "<6>", "for", "(", "int", "j", "=", "i", ";", "j", "<", "N", ";", "j", "++", ")", "{", "ans_", "+=", "B", "[", "j", "]", ";", "}", "<7>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "ans_", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"], ["ans_", "3"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "0"], ["i", "0"], ["ans_", "11"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "0"], ["ans_", "11"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["ans_", "11"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["ans_", "5"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "11"], ["i", "1"], ["ans_", "12"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "1"], ["ans_", "12"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["ans_", "12"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["ans_", "7"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["ans_", "12"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "2"], ["ans_", "12"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["ans_", "12"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["ans_", "11"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "12"], ["i", "3"], ["ans_", "14"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "3"], ["ans_", "14"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["ans_", "14"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["ans_", "12"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["ans_", "13"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["ans_", "13"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["ans_", "13"]]}, {"line": 8, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ans", "14"], ["i", "4"], ["ans_", "13"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "8": [[8, 7, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]]}}
{"id": 10270, "code": "int N = 8;\nchar[] S = {')', ')', ')', ')', '(', '(', '(', '('};\nint f = 0;\nint b = 0;\nint count = 0;\nfor (int i = N - 1; i >= 0; i--) {\nif (S[i] == '(') {\nif (count > 0) {\ncount--;}\nelse {\nb++;}}\nelse {\ncount++;}}\nfor (int j = 0; j < count; j++) {System.out.print('(');}\nSystem.out.print(String.valueOf(S));\nfor (int j = 0; j < b; j++) {System.out.print(')');}", "code_tokens": ["<0>", "int", "N", "=", "8", ";", "<1>", "char", "[", "]", "S", "=", "{", "')'", ",", "')'", ",", "')'", ",", "')'", ",", "'('", ",", "'('", ",", "'('", ",", "'('", "}", ";", "<2>", "int", "f", "=", "0", ";", "<3>", "int", "b", "=", "0", ";", "<4>", "int", "count", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "N", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "<6>", "if", "(", "S", "[", "i", "]", "==", "'('", ")", "{", "<7>", "if", "(", "count", ">", "0", ")", "{", "<8>", "count", "--", ";", "}", "<9>", "else", "{", "<10>", "b", "++", ";", "}", "}", "<11>", "else", "{", "<12>", "count", "++", ";", "}", "}", "<13>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "count", ";", "j", "++", ")", "{", "System", ".", "out", ".", "print", "(", "'('", ")", ";", "}", "<14>", "System", ".", "out", ".", "print", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";", "<15>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "b", ";", "j", "++", ")", "{", "System", ".", "out", ".", "print", "(", "')'", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "8"]]}, {"line": 1, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"]]}, {"line": 2, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"]]}, {"line": 3, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "0"]]}, {"line": 4, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "0"], ["count", "0"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "0"], ["count", "0"], ["i", "7"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "0"], ["count", "0"], ["i", "7"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "0"], ["count", "0"], ["i", "7"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "1"], ["count", "0"], ["i", "7"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "1"], ["count", "0"], ["i", "6"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "1"], ["count", "0"], ["i", "6"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "1"], ["count", "0"], ["i", "6"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "2"], ["count", "0"], ["i", "6"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "2"], ["count", "0"], ["i", "5"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "2"], ["count", "0"], ["i", "5"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "2"], ["count", "0"], ["i", "5"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "3"], ["count", "0"], ["i", "5"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "3"], ["count", "0"], ["i", "4"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "3"], ["count", "0"], ["i", "4"]]}, {"line": 7, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "3"], ["count", "0"], ["i", "4"]]}, {"line": 10, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "0"], ["i", "4"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "0"], ["i", "3"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "0"], ["i", "3"]]}, {"line": 12, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "1"], ["i", "3"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "1"], ["i", "2"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "1"], ["i", "2"]]}, {"line": 12, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "2"], ["i", "2"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "2"], ["i", "1"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "2"], ["i", "1"]]}, {"line": 12, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "3"], ["i", "1"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "3"], ["i", "0"]]}, {"line": 6, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "3"], ["i", "0"]]}, {"line": 12, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "4"], ["i", "0"]]}, {"line": 5, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "4"], ["i", "0"]]}, {"line": 13, "state": [["N", "8"], ["S", "[ ) , ) , ) , ) , ( , ( , ( , ( ]"], ["f", "0"], ["b", "4"], ["count", "4"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 6, 5, 0], [5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0], [6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0]], "7": [[7, 4], [7, 4], [7, 4], [7, 4]], "10": [[10, 3], [10, 3], [10, 3], [10, 3]], "12": [[12, 7, 4], [12, 7, 4], [12, 7, 4], [12, 7, 4]], "13": [[13, 12, 7, 4]]}}
{"id": 8711, "code": "int N = 7;\nint[] A1 = {3, 3, 4, 5, 4, 5, 3};\nint[] A2 = {5, 3, 4, 4, 2, 3, 2};\nfor (int j = 0; j < A2.length / 2; j++) {int temp = A2[j];A2[j] = A2[A2.length - 1 - j];A2[A2.length - 1 - j] = temp;}\nfor (int i = 0; i < N - 1; i++) {\nA1[i + 1] += A1[i];\nA2[i + 1] += A2[i];}\nint ans = 0;\nfor (int i = 0; i < N; i++) {\nans = Math.max(ans, A1[i] + A2[N - 1 - i]);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A1", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "A2", ".", "length", "/", "2", ";", "j", "++", ")", "{", "int", "temp", "=", "A2", "[", "j", "]", ";", "A2", "[", "j", "]", "=", "A2", "[", "A2", ".", "length", "-", "1", "-", "j", "]", ";", "A2", "[", "A2", ".", "length", "-", "1", "-", "j", "]", "=", "temp", ";", "}", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<5>", "A1", "[", "i", "+", "1", "]", "+=", "A1", "[", "i", "]", ";", "<6>", "A2", "[", "i", "+", "1", "]", "+=", "A2", "[", "i", "]", ";", "}", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<9>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "A1", "[", "i", "]", "+", "A2", "[", "N", "-", "1", "-", "i", "]", ")", ";", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 3 , 2 , 4 , 4 , 3 , 5 ]"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 3 , 2 , 4 , 4 , 3 , 5 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 6 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 3 , 2 , 4 , 4 , 3 , 5 ]"], ["i", "0"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 6 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 2 , 4 , 4 , 3 , 5 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 6 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 2 , 4 , 4 , 3 , 5 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 2 , 4 , 4 , 3 , 5 ]"], ["i", "1"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 4 , 4 , 3 , 5 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 4 , 4 , 3 , 5 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 4 , 4 , 3 , 5 ]"], ["i", "2"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 4 , 3 , 5 ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 4 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 4 , 3 , 5 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 4 , 3 , 5 ]"], ["i", "3"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 3 , 5 ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 5 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 3 , 5 ]"], ["i", "4"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 3 , 5 ]"], ["i", "4"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 5 ]"], ["i", "4"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 3 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 5 ]"], ["i", "5"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 5 ]"], ["i", "5"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"], ["ans", "0"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "0"], ["ans", "0"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "0"], ["ans", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "1"], ["ans", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "1"], ["ans", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "2"], ["ans", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "2"], ["ans", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "3"], ["ans", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "3"], ["ans", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "4"], ["ans", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "4"], ["ans", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"], ["ans", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"], ["ans", "29"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["ans", "29"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["ans", "29"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["ans", "29"]]}, {"line": 10, "state": [["N", "7"], ["A1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["A2", "[ 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["ans", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 0], [4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "7": [[7]], "8": [[8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "9": [[9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0], [9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]], "10": [[10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 6, 5, 4, 0]]}}
{"id": 7486, "code": "int H = 211, N = 5;\nint[] data = {31, 41, 59, 26, 53};\nif (H - sum(data) > 0) {\nSystem.out.println(\"No\");} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "data", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "H", "-", "sum", "(", "data", ")", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["data", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 19499, "code": "Scanner scanner = new Scanner(System.in);\nlong N = 999999999;\nif (N % 2 == 0) {\nSystem.out.println(N);}\nelse {\nSystem.out.println(2 * N);}", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "long", "N", "=", "999999999", ";", "<2>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "2", "*", "N", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "999999999"]]}, {"line": 3, "state": [["N", "999999999"]]}, {"line": 6, "state": [["N", "999999999"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "6": [[6, 3, 2]]}}
{"id": 14778, "code": "int n = 1, p = 1;\nint[] a = {50};\nint[] cnt = new int[2];\nfor (int num : a) {\ncnt[num % 2] += 1;}\nif (cnt[1] == 0) {\nif (p == 0) {\nSystem.out.println((int) Math.pow(2, n));}\nelse {\nSystem.out.println(0);}}\nelse {\nSystem.out.println((int) Math.pow(2, (n - 1)));}", "code_tokens": ["<0>", "int", "n", "=", "1", ",", "p", "=", "1", ";", "<1>", "int", "[", "]", "a", "=", "{", "50", "}", ";", "<2>", "int", "[", "]", "cnt", "=", "new", "int", "[", "2", "]", ";", "<3>", "for", "(", "int", "num", ":", "a", ")", "{", "<4>", "cnt", "[", "num", "%", "2", "]", "+=", "1", ";", "}", "<5>", "if", "(", "cnt", "[", "1", "]", "==", "0", ")", "{", "<6>", "if", "(", "p", "==", "0", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", ")", ")", ";", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "}", "<10>", "else", "{", "<11>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "(", "n", "-", "1", ")", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "1"], ["p", "1"]]}, {"line": 1, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"]]}, {"line": 2, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 0 , 0 ]"]]}, {"line": 3, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 0 , 0 ]"], ["num", "50"]]}, {"line": 4, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 1 , 0 ]"], ["num", "50"]]}, {"line": 3, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 1 , 0 ]"], ["num", "50"]]}, {"line": 5, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 1 , 0 ]"], ["num", "50"]]}, {"line": 6, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 1 , 0 ]"], ["num", "50"]]}, {"line": 9, "state": [["n", "1"], ["p", "1"], ["a", "[ 50 ]"], ["cnt", "[ 1 , 0 ]"], ["num", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1]], "4": [[4, 3, 1]], "5": [[5, 4, 3, 1]], "6": [[6, 0]], "9": [[9]]}}
{"id": 7955, "code": "int n = 4, k = 3;\nint[] a = {2, 3, 1, 4};\nn -= k;\nk -= 1;\nint count = 1;\nif (n <= 0) {\n}\nelse {\nwhile (n > 0) {\nn -= k;\ncount += 1;}}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "n", "-=", "k", ";", "<3>", "k", "-=", "1", ";", "<4>", "int", "count", "=", "1", ";", "<5>", "if", "(", "n", "<=", "0", ")", "{", "<6>", "}", "<7>", "else", "{", "<8>", "while", "(", "n", ">", "0", ")", "{", "<9>", "n", "-=", "k", ";", "<10>", "count", "+=", "1", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"], ["k", "3"]]}, {"line": 1, "state": [["n", "4"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["n", "1"], ["k", "3"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 3, "state": [["n", "1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 4, "state": [["n", "1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "1"]]}, {"line": 5, "state": [["n", "1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "1"]]}, {"line": 8, "state": [["n", "1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "1"]]}, {"line": 9, "state": [["n", "-1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "1"]]}, {"line": 10, "state": [["n", "-1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "2"]]}, {"line": 8, "state": [["n", "-1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "2"]]}, {"line": 11, "state": [["n", "-1"], ["k", "2"], ["a", "[ 2 , 3 , 1 , 4 ]"], ["count", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4]], "5": [[5, 2, 0]], "8": [[8, 5, 2, 0], [8, 9, 8, 5, 2, 0]], "9": [[9, 8, 5, 2, 0]], "10": [[10, 4]], "11": [[11, 10, 4]]}}
{"id": 6281, "code": "int N = 2;\nint[] A = {1, 5};\nint[] B = {2, 4};\nint[] C = {3, 6};\nint count = 0;\nfor (int j = 0; j < N; j++) {\nint c = N - upperBound(C, B[j]);\nint b = upperBound(A, B[j] - 1);\ncount += b * c;}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "count", "=", "0", ";", "<5>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "N", ";", "j", "++", ")", "{", "<6>", "int", "c", "=", "N", "-", "upperBound", "(", "C", ",", "B", "[", "j", "]", ")", ";", "<7>", "int", "b", "=", "upperBound", "(", "A", ",", "B", "[", "j", "]", "-", "1", ")", ";", "<8>", "count", "+=", "b", "*", "c", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "2"]]}, {"line": 2, "state": [["N", "2"], ["A", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "0"]]}, {"line": 6, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "0"], ["j", "0"]]}, {"line": 7, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "0"], ["j", "0"], ["c", "2"]]}, {"line": 8, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "0"], ["j", "0"], ["c", "2"], ["b", "1"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "2"], ["j", "0"], ["c", "2"], ["b", "1"]]}, {"line": 6, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "2"], ["j", "1"], ["c", "2"], ["b", "1"]]}, {"line": 7, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "2"], ["j", "1"], ["c", "1"], ["b", "1"]]}, {"line": 8, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "2"], ["j", "1"], ["c", "1"], ["b", "1"]]}, {"line": 9, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "3"], ["j", "1"], ["c", "1"], ["b", "1"]]}, {"line": 6, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "3"], ["j", "1"], ["c", "1"], ["b", "1"]]}, {"line": 10, "state": [["N", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["count", "3"], ["j", "1"], ["c", "1"], ["b", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 1], [6, 8, 7, 6, 1], [6, 8, 7, 6, 8, 7, 6, 1]], "7": [[7, 6, 1], [7, 6, 8, 7, 6, 1]], "8": [[8, 7, 6, 1], [8, 7, 6, 8, 7, 6, 1]], "9": [[9, 8, 7, 6, 1], [9, 8, 7, 6, 8, 7, 6, 1]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 1]]}}
{"id": 15731, "code": "int x = 12, y = 3, z = 1;\nx -= z;\nSystem.out.println(x / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "x", "-=", "z", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "11"], ["y", "3"], ["z", "1"]]}, {"line": 2, "state": [["x", "11"], ["y", "3"], ["z", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4235, "code": "int[] h = {10, 0, 12, 0, 120};\nif (h[1] < h[3]) {\nSystem.out.println((h[2] - h[0]) * 60 + h[3] - h[1] - h[4]);\n} else {\nSystem.out.println((h[2] - h[0] - 1) * 60 + 60 - h[1] + h[3] - h[4]);}", "code_tokens": ["<0>", "int", "[", "]", "h", "=", "{", "10", ",", "0", ",", "12", ",", "0", ",", "120", "}", ";", "<1>", "if", "(", "h", "[", "1", "]", "<", "h", "[", "3", "]", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "(", "h", "[", "2", "]", "-", "h", "[", "0", "]", ")", "*", "60", "+", "h", "[", "3", "]", "-", "h", "[", "1", "]", "-", "h", "[", "4", "]", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "(", "h", "[", "2", "]", "-", "h", "[", "0", "]", "-", "1", ")", "*", "60", "+", "60", "-", "h", "[", "1", "]", "+", "h", "[", "3", "]", "-", "h", "[", "4", "]", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "[ 10 , 0 , 12 , 0 , 120 ]"]]}, {"line": 1, "state": [["h", "[ 10 , 0 , 12 , 0 , 120 ]"]]}, {"line": 4, "state": [["h", "[ 10 , 0 , 12 , 0 , 120 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 15297, "code": "int X = 12, Y = 3, Z = 1;\nint answer = 0;\nint width = Y + 2 * Z;\nwhile (width <= X) {\nanswer += 1;\nwidth += Y + Z;}\nSystem.out.println(answer);", "code_tokens": ["<0>", "int", "X", "=", "12", ",", "Y", "=", "3", ",", "Z", "=", "1", ";", "<1>", "int", "answer", "=", "0", ";", "<2>", "int", "width", "=", "Y", "+", "2", "*", "Z", ";", "<3>", "while", "(", "width", "<=", "X", ")", "{", "<4>", "answer", "+=", "1", ";", "<5>", "width", "+=", "Y", "+", "Z", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "answer", ")", ";"], "trace": [{"line": 0, "state": [["X", "12"], ["Y", "3"], ["Z", "1"]]}, {"line": 1, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "0"]]}, {"line": 2, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "0"], ["width", "5"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "0"], ["width", "5"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "1"], ["width", "5"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "1"], ["width", "9"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "1"], ["width", "9"]]}, {"line": 4, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "2"], ["width", "9"]]}, {"line": 5, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "2"], ["width", "13"]]}, {"line": 3, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "2"], ["width", "13"]]}, {"line": 6, "state": [["X", "12"], ["Y", "3"], ["Z", "1"], ["answer", "2"], ["width", "13"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 5, 3, 2, 0], [3, 5, 3, 5, 3, 2, 0]], "4": [[4, 1], [4, 1]], "5": [[5, 3, 2, 0], [5, 3, 5, 3, 2, 0]], "6": [[6, 4, 1]]}}
{"id": 16072, "code": "String a = \"20\";String b = \"30\";\nint c = Integer.parseInt(a) - (2 * Integer.parseInt(b));\nif (c >= 0) {\nSystem.out.println(c);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "String", "a", "=", "\"20\"", ";", "String", "b", "=", "\"30\"", ";", "<1>", "int", "c", "=", "Integer", ".", "parseInt", "(", "a", ")", "-", "(", "2", "*", "Integer", ".", "parseInt", "(", "b", ")", ")", ";", "<2>", "if", "(", "c", ">=", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "c", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"], ["c", "-40"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"], ["c", "-40"]]}, {"line": 5, "state": [["a", "20"], ["b", "30"], ["c", "-40"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 16634, "code": "String a = \"D\";String b = \"D\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nif (b.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 4, "state": [["a", "D"], ["b", "D"]]}, {"line": 7, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 0]], "7": [[7]]}}
{"id": 11313, "code": "String S = \"SUN\";\nint output = 0;if (S.equals(\"SUN\")) {\noutput = 7;\n} else if (S.equals(\"MON\")) {\noutput = 6;\n} else if (S.equals(\"TUE\")) {\noutput = 5;\n} else if (S.equals(\"WED\")) {\noutput = 4;\n} else if (S.equals(\"THU\")) {\noutput = 3;\n} else if (S.equals(\"FRI\")) {\noutput = 2;\n} else if (S.equals(\"SAT\")) {\noutput = 1;}\nSystem.out.println(output);", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "int", "output", "=", "0", ";", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "output", "=", "7", ";", "<3>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "output", "=", "6", ";", "<5>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "output", "=", "5", ";", "<7>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "output", "=", "4", ";", "<9>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "output", "=", "3", ";", "<11>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "output", "=", "2", ";", "<13>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "output", "=", "1", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "output", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"]]}, {"line": 2, "state": [["S", "SUN"], ["output", "7"]]}, {"line": 15, "state": [["S", "SUN"], ["output", "7"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "15": [[15, 2]]}}
{"id": 4430, "code": "String s = \"smiles\";\nSystem.out.println(String.format(\"%s%d%s\", s.charAt(0), s.length() - 2, s.charAt(s.length() - 1)));", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "s", ".", "charAt", "(", "0", ")", ",", "s", ".", "length", "(", ")", "-", "2", ",", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8427, "code": "int n = 1;\nint[][] a = new int[2][];\na[0] = new int[]{2};\na[1] = new int[]{3};\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint tmp = a[0][0];\nint x = 0;\nint y = 0;\nfor (int j = 0; j < n; j++) {\nif (i == j) {\ny += 1;}\nelse {\nx += 1;}\ntmp += a[y][x];}\nans = Math.max(tmp, ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ";", "<1>", "int", "[", "]", "[", "]", "a", "=", "new", "int", "[", "2", "]", "[", "]", ";", "<2>", "a", "[", "0", "]", "=", "new", "int", "[", "]", "{", "2", "}", ";", "<3>", "a", "[", "1", "]", "=", "new", "int", "[", "]", "{", "3", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "int", "tmp", "=", "a", "[", "0", "]", "[", "0", "]", ";", "<7>", "int", "x", "=", "0", ";", "<8>", "int", "y", "=", "0", ";", "<9>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "<10>", "if", "(", "i", "==", "j", ")", "{", "<11>", "y", "+=", "1", ";", "}", "<12>", "else", "{", "<13>", "x", "+=", "1", ";", "}", "<14>", "tmp", "+=", "a", "[", "y", "]", "[", "x", "]", ";", "}", "<15>", "ans", "=", "Math", ".", "max", "(", "tmp", ",", "ans", ")", ";", "}", "<16>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"]]}, {"line": 1, "state": [["n", "1"], ["a", "[ ]"]]}, {"line": 2, "state": []}, {"line": 2, "state": []}, {"line": 2, "state": [["i", "2"]]}, {"line": 2, "state": [["i", "2"]]}, {"line": 2, "state": [["n", "1"], ["a", "[ [ 2 ] ]"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"]]}, {"line": 4, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"]]}, {"line": 5, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"]]}, {"line": 6, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "2"]]}, {"line": 7, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "2"], ["x", "0"]]}, {"line": 8, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "2"], ["x", "0"], ["y", "0"]]}, {"line": 9, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "2"], ["x", "0"], ["y", "0"], ["j", "0"]]}, {"line": 10, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "2"], ["x", "0"], ["y", "0"], ["j", "0"]]}, {"line": 11, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "2"], ["x", "0"], ["y", "1"], ["j", "0"]]}, {"line": 14, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "5"], ["x", "0"], ["y", "1"], ["j", "0"]]}, {"line": 9, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "0"], ["i", "0"], ["tmp", "5"], ["x", "0"], ["y", "1"], ["j", "0"]]}, {"line": 15, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "5"], ["i", "0"], ["tmp", "5"], ["x", "0"], ["y", "1"], ["j", "0"]]}, {"line": 5, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "5"], ["i", "0"], ["tmp", "5"], ["x", "0"], ["y", "1"], ["j", "0"]]}, {"line": 16, "state": [["n", "1"], ["a", "[ [ 2 ] , [ 3 ] ]"], ["ans", "5"], ["i", "0"], ["tmp", "5"], ["x", "0"], ["y", "1"], ["j", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1], [2, 1], [2, 1], [2, 1], [2, 1]], "3": [[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]], "4": [[4]], "5": [[5, 3, 2, 1], [5, 10, 9, 5, 3, 2, 1]], "6": [[6, 3, 2, 1]], "7": [[7]], "8": [[8]], "9": [[9, 5, 3, 2, 1], [9, 10, 9, 5, 3, 2, 1]], "10": [[10, 9, 5, 3, 2, 1]], "11": [[11, 8]], "14": [[14, 11, 8]], "15": [[15, 14, 11, 8]], "16": [[16, 15, 14, 11, 8]]}}
{"id": 13044, "code": "int n = 5;\njava.util.Set<Integer> shichigosan = new java.util.HashSet<>();shichigosan.add(3);shichigosan.add(5);shichigosan.add(7);\nif (shichigosan.contains(n)) {\nSystem.out.println(\"YES\");}\nelse {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "java", ".", "util", ".", "Set", "<", "Integer", ">", "shichigosan", "=", "new", "java", ".", "util", ".", "HashSet", "<", ">", "(", ")", ";", "shichigosan", ".", "add", "(", "3", ")", ";", "shichigosan", ".", "add", "(", "5", ")", ";", "shichigosan", ".", "add", "(", "7", ")", ";", "<2>", "if", "(", "shichigosan", ".", "contains", "(", "n", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["shichigosan", "{ 3 , 5 , 7 }"]]}, {"line": 2, "state": [["n", "5"], ["shichigosan", "{ 3 , 5 , 7 }"]]}, {"line": 3, "state": [["n", "5"], ["shichigosan", "{ 3 , 5 , 7 }"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 10961, "code": "String kai = \"level\";\nint num = kai.length();\nint ans = 0;\nint n1 = (num - 1) / 2;\nfor (int i = 0; i < n1; i++) {\nif (kai.charAt(i) != kai.charAt(num - 1 - (i + 1))) {\nans += 1;}}\nString l1 = kai.substring(0, n1);\nfor (int i = 0; i < l1.length(); i++) {\nif (l1.charAt(i) != l1.charAt(l1.length() - 1 - (i + 1))) {\nans += 1;}}\nString l2 = kai.substring(n1 + 1);\nfor (int i = 0; i < l2.length(); i++) {\nif (l2.charAt(i) != l2.charAt(l2.length() - 1 - (i + 1))) {\nans += 1;}}\nif (ans == 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "kai", "=", "\"level\"", ";", "<1>", "int", "num", "=", "kai", ".", "length", "(", ")", ";", "<2>", "int", "ans", "=", "0", ";", "<3>", "int", "n1", "=", "(", "num", "-", "1", ")", "/", "2", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n1", ";", "i", "++", ")", "{", "<5>", "if", "(", "kai", ".", "charAt", "(", "i", ")", "!=", "kai", ".", "charAt", "(", "num", "-", "1", "-", "(", "i", "+", "1", ")", ")", ")", "{", "<6>", "ans", "+=", "1", ";", "}", "}", "<7>", "String", "l1", "=", "kai", ".", "substring", "(", "0", ",", "n1", ")", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l1", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<9>", "if", "(", "l1", ".", "charAt", "(", "i", ")", "!=", "l1", ".", "charAt", "(", "l1", ".", "length", "(", ")", "-", "1", "-", "(", "i", "+", "1", ")", ")", ")", "{", "<10>", "ans", "+=", "1", ";", "}", "}", "<11>", "String", "l2", "=", "kai", ".", "substring", "(", "n1", "+", "1", ")", ";", "<12>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l2", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<13>", "if", "(", "l2", ".", "charAt", "(", "i", ")", "!=", "l2", ".", "charAt", "(", "l2", ".", "length", "(", ")", "-", "1", "-", "(", "i", "+", "1", ")", ")", ")", "{", "<14>", "ans", "+=", "1", ";", "}", "}", "<15>", "if", "(", "ans", "==", "0", ")", "{", "<16>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<17>", "}", "else", "{", "<18>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["kai", "level"]]}, {"line": 1, "state": [["kai", "level"], ["num", "5"]]}, {"line": 2, "state": [["kai", "level"], ["num", "5"], ["ans", "0"]]}, {"line": 3, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"]]}, {"line": 4, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "0"]]}, {"line": 5, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "0"]]}, {"line": 4, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "1"]]}, {"line": 5, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "1"]]}, {"line": 4, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "1"]]}, {"line": 7, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "1"], ["l1", "le"]]}, {"line": 8, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "0"], ["l1", "le"]]}, {"line": 9, "state": [["kai", "level"], ["num", "5"], ["ans", "0"], ["n1", "2"], ["i", "0"], ["l1", "le"]]}, {"line": 10, "state": [["kai", "level"], ["num", "5"], ["ans", "1"], ["n1", "2"], ["i", "0"], ["l1", "le"]]}, {"line": 8, "state": [["kai", "level"], ["num", "5"], ["ans", "1"], ["n1", "2"], ["i", "1"], ["l1", "le"]]}, {"line": 9, "state": [["kai", "level"], ["num", "5"], ["ans", "1"], ["n1", "2"], ["i", "1"], ["l1", "le"]]}, {"line": 10, "state": [["kai", "level"], ["num", "5"], ["ans", "2"], ["n1", "2"], ["i", "1"], ["l1", "le"]]}, {"line": 8, "state": [["kai", "level"], ["num", "5"], ["ans", "2"], ["n1", "2"], ["i", "1"], ["l1", "le"]]}, {"line": 11, "state": [["kai", "level"], ["num", "5"], ["ans", "2"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}, {"line": 12, "state": [["kai", "level"], ["num", "5"], ["ans", "2"], ["n1", "2"], ["i", "0"], ["l1", "le"], ["l2", "el"]]}, {"line": 13, "state": [["kai", "level"], ["num", "5"], ["ans", "2"], ["n1", "2"], ["i", "0"], ["l1", "le"], ["l2", "el"]]}, {"line": 14, "state": [["kai", "level"], ["num", "5"], ["ans", "3"], ["n1", "2"], ["i", "0"], ["l1", "le"], ["l2", "el"]]}, {"line": 12, "state": [["kai", "level"], ["num", "5"], ["ans", "3"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}, {"line": 13, "state": [["kai", "level"], ["num", "5"], ["ans", "3"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}, {"line": 14, "state": [["kai", "level"], ["num", "5"], ["ans", "4"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}, {"line": 12, "state": [["kai", "level"], ["num", "5"], ["ans", "4"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}, {"line": 15, "state": [["kai", "level"], ["num", "5"], ["ans", "4"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}, {"line": 18, "state": [["kai", "level"], ["num", "5"], ["ans", "4"], ["n1", "2"], ["i", "1"], ["l1", "le"], ["l2", "el"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0], [4, 5, 4, 3, 1, 0], [4, 5, 4, 5, 4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0], [5, 4, 5, 4, 3, 1, 0]], "7": [[7, 4, 5, 4, 5, 4, 3, 1, 0]], "8": [[8, 7, 4, 5, 4, 5, 4, 3, 1, 0], [8, 9, 8, 7, 4, 5, 4, 5, 4, 3, 1, 0], [8, 9, 8, 9, 8, 7, 4, 5, 4, 5, 4, 3, 1, 0]], "9": [[9, 8, 7, 4, 5, 4, 5, 4, 3, 1, 0], [9, 8, 9, 8, 7, 4, 5, 4, 5, 4, 3, 1, 0]], "10": [[10, 2], [10, 2]], "11": [[11, 7, 4, 5, 4, 5, 4, 3, 1, 0]], "12": [[12, 11, 7, 4, 5, 4, 5, 4, 3, 1, 0], [12, 13, 12, 11, 7, 4, 5, 4, 5, 4, 3, 1, 0], [12, 13, 12, 13, 12, 11, 7, 4, 5, 4, 5, 4, 3, 1, 0]], "13": [[13, 12, 11, 7, 4, 5, 4, 5, 4, 3, 1, 0], [13, 12, 13, 12, 11, 7, 4, 5, 4, 5, 4, 3, 1, 0]], "14": [[14, 10, 2], [14, 10, 2]], "15": [[15, 14, 10, 2]], "18": [[18]]}}
{"id": 5397, "code": "int n = 100;\nif (n % 2 != 0) {\nn = n + 1;}\nSystem.out.println(n / 2);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<2>", "n", "=", "n", "+", "1", ";", "}", "<3>", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"]]}, {"line": 3, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]]}}
{"id": 3563, "code": "int house_len = 20, curtain_len = 15;\nif (house_len >= curtain_len * 2) {\nSystem.out.println(house_len - curtain_len * 2);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "house_len", "=", "20", ",", "curtain_len", "=", "15", ";", "<1>", "if", "(", "house_len", ">=", "curtain_len", "*", "2", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "house_len", "-", "curtain_len", "*", "2", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["house_len", "20"], ["curtain_len", "15"]]}, {"line": 1, "state": [["house_len", "20"], ["curtain_len", "15"]]}, {"line": 4, "state": [["house_len", "20"], ["curtain_len", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 11501, "code": "String s = \"SUN\";\nString[] w = {\"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nSystem.out.println(java.util.Arrays.asList(w).indexOf(s) + 1);", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "w", "=", "{", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "w", ")", ".", "indexOf", "(", "s", ")", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"], ["w", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 2, "state": [["s", "SUN"], ["w", "[ SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 9387, "code": "System.out.println(\"2017/01/31\".replaceFirst(\"7\", \"8\"));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2017/01/31\"", ".", "replaceFirst", "(", "\"7\"", ",", "\"8\"", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 14371, "code": "int n = 9;\nint[] a = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint ans = 1;\nint m = 0;\nfor (int i = 1; i < n; i++) {\nif ((a[i] - a[i - 1]) * m < 0) {\nans += 1;\nm = 0;}\nelse if (a[i] - a[i - 1] != 0) {\nm = a[i] - a[i - 1];}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "9", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "int", "m", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "(", "a", "[", "i", "]", "-", "a", "[", "i", "-", "1", "]", ")", "*", "m", "<", "0", ")", "{", "<6>", "ans", "+=", "1", ";", "<7>", "m", "=", "0", ";", "}", "<8>", "else", "if", "(", "a", "[", "i", "]", "-", "a", "[", "i", "-", "1", "]", "!=", "0", ")", "{", "<9>", "m", "=", "a", "[", "i", "]", "-", "a", "[", "i", "-", "1", "]", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "9"]]}, {"line": 1, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "0"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "0"], ["i", "1"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "0"], ["i", "1"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "1"], ["i", "1"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "1"], ["i", "2"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "1"], ["m", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "1"], ["i", "2"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "0"], ["i", "2"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "0"], ["i", "3"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "0"], ["i", "3"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "0"], ["i", "3"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "1"], ["i", "3"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "1"], ["i", "4"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "2"], ["m", "1"], ["i", "4"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "1"], ["i", "4"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "0"], ["i", "4"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "0"], ["i", "5"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "0"], ["i", "5"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "0"], ["i", "5"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "1"], ["i", "5"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "1"], ["i", "6"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "3"], ["m", "1"], ["i", "6"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "1"], ["i", "6"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "0"], ["i", "6"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "0"], ["i", "7"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "0"], ["i", "7"]]}, {"line": 8, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "0"], ["i", "7"]]}, {"line": 9, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "1"], ["i", "7"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "1"], ["i", "8"]]}, {"line": 5, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "4"], ["m", "1"], ["i", "8"]]}, {"line": 6, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["m", "1"], ["i", "8"]]}, {"line": 7, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["m", "0"], ["i", "8"]]}, {"line": 4, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["m", "0"], ["i", "8"]]}, {"line": 10, "state": [["n", "9"], ["a", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["ans", "5"], ["m", "0"], ["i", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 9, 8, 5, 4, 0], [4, 5, 4, 9, 8, 5, 4, 0], [4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 9, 8, 5, 4, 0], [5, 4, 5, 4, 9, 8, 5, 4, 0], [5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0]], "6": [[6, 2], [6, 2], [6, 2], [6, 2]], "7": [[7, 5, 4, 9, 8, 5, 4, 0], [7, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [7, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [7, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0]], "8": [[8, 5, 4, 0], [8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0]], "9": [[9, 8, 5, 4, 0], [9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0], [9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 5, 4, 9, 8, 5, 4, 0]], "10": [[10, 6, 2]]}}
{"id": 2856, "code": "String s = \"1111111111\";\nint n = s.length();\nint ans = Integer.MAX_VALUE;\nfor (int i = 0; i < n - 2; i++) {\nans = Math.min(ans, Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"1111111111\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "ans", "=", "Integer", ".", "MAX_VALUE", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "2", ";", "i", "++", ")", "{", "<4>", "ans", "=", "Math", ".", "min", "(", "ans", ",", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "1111111111"]]}, {"line": 1, "state": [["s", "1111111111"], ["n", "10"]]}, {"line": 2, "state": [["s", "1111111111"], ["n", "10"], ["ans", "inf"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "inf"], ["i", "0"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "inf"], ["i", "0"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "inf"], ["i", "0"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "inf"], ["i", "0"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "0"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "1"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "2"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "3"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "4"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "5"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "6"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 4, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 0, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 3, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}, {"line": 5, "state": [["s", "1111111111"], ["n", "10"], ["ans", "642"], ["i", "7"]]}], "slices": {"0": [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 1, 0]]}}
{"id": 2804, "code": "String S = \"35753\";\nint min_val = 1000000000;\nfor (int i = 0; i < S.length() - 2; i++) {\nint temp = Math.abs(753 - Integer.parseInt(S.substring(i, i + 3)));\nmin_val = Math.min(min_val, temp);}\nSystem.out.println(min_val);", "code_tokens": ["<0>", "String", "S", "=", "\"35753\"", ";", "<1>", "int", "min_val", "=", "1000000000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "temp", "=", "Math", ".", "abs", "(", "753", "-", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ")", ";", "<4>", "min_val", "=", "Math", ".", "min", "(", "min_val", ",", "temp", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "min_val", ")", ";"], "trace": [{"line": 0, "state": [["S", "35753"]]}, {"line": 1, "state": [["S", "35753"], ["min_val", "1000000000"]]}, {"line": 2, "state": [["S", "35753"], ["min_val", "1000000000"], ["i", "0"]]}, {"line": 3, "state": [["S", "35753"], ["min_val", "1000000000"], ["i", "0"], ["temp", "396"]]}, {"line": 4, "state": [["S", "35753"], ["min_val", "396"], ["i", "0"], ["temp", "396"]]}, {"line": 2, "state": [["S", "35753"], ["min_val", "396"], ["i", "1"], ["temp", "396"]]}, {"line": 3, "state": [["S", "35753"], ["min_val", "396"], ["i", "1"], ["temp", "178"]]}, {"line": 4, "state": [["S", "35753"], ["min_val", "178"], ["i", "1"], ["temp", "178"]]}, {"line": 2, "state": [["S", "35753"], ["min_val", "178"], ["i", "2"], ["temp", "178"]]}, {"line": 3, "state": [["S", "35753"], ["min_val", "178"], ["i", "2"], ["temp", "0"]]}, {"line": 4, "state": [["S", "35753"], ["min_val", "0"], ["i", "2"], ["temp", "0"]]}, {"line": 2, "state": [["S", "35753"], ["min_val", "0"], ["i", "2"], ["temp", "0"]]}, {"line": 5, "state": [["S", "35753"], ["min_val", "0"], ["i", "2"], ["temp", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 16912, "code": "System.out.println(\" HD\"[(eval(\"D H\".replace(\"H\", \"+\").replace(\"D\", \"-\").replace(\" \",\"1*\") + \"1\"))]);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\" HD\"", "[", "(", "eval", "(", "\"D H\"", ".", "replace", "(", "\"H\"", ",", "\"+\"", ")", ".", "replace", "(", "\"D\"", ",", "\"-\"", ")", ".", "replace", "(", "\" \"", ",", "\"1*\"", ")", "+", "\"1\"", ")", ")", "]", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": []}, {"line": 0, "state": []}], "slices": {"0": [[0], [0], [0], [0]]}}
{"id": 11199, "code": "String[] a = {\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"};\nString b = \"SUN\";\nSystem.out.println(!b.equals(\"SUN\") ? 6 - indexOf(a, b) : \"7\");", "code_tokens": ["<0>", "String", "[", "]", "a", "=", "{", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", ",", "\"SUN\"", "}", ";", "<1>", "String", "b", "=", "\"SUN\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "!", "b", ".", "equals", "(", "\"SUN\"", ")", "?", "6", "-", "indexOf", "(", "a", ",", "b", ")", ":", "\"7\"", ")", ";"], "trace": [{"line": 0, "state": [["a", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"]]}, {"line": 1, "state": [["a", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["b", "SUN"]]}, {"line": 2, "state": [["a", "[ MON , TUE , WED , THU , FRI , SAT , SUN ]"], ["b", "SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 16775, "code": "String a = \"D\";String t = \"D\";\nSystem.out.println(a.equals(t) ? 'H' : 'D');", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "t", "=", "\"D\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "a", ".", "equals", "(", "t", ")", "?", "'H'", ":", "'D'", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["t", "D"]]}, {"line": 1, "state": [["a", "D"], ["t", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 1668, "code": "int n = 10, a = 7, b = 5;\nint p = Math.min(a, b);\nint q = Math.max(a + b - n, 0);\nSystem.out.println(p + \" \" + q);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "int", "p", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "q", "=", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "p", "+", "\" \"", "+", "q", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["p", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["p", "5"], ["q", "2"]]}, {"line": 3, "state": [["n", "10"], ["a", "7"], ["b", "5"], ["p", "5"], ["q", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 18603, "code": "int h = 14;\nint w = 12;\nint n = 112;\nint m = Math.max(h, w);\nSystem.out.println((int) Math.ceil((double) n / m));", "code_tokens": ["<0>", "int", "h", "=", "14", ";", "<1>", "int", "w", "=", "12", ";", "<2>", "int", "n", "=", "112", ";", "<3>", "int", "m", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "m", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h", "14"]]}, {"line": 2, "state": [["h", "14"], ["w", "12"]]}, {"line": 3, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 4, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["m", "14"]]}, {"line": 5, "state": [["h", "14"], ["w", "12"], ["n", "112"], ["m", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2, 1]], "5": [[5, 4, 2, 1]]}}
{"id": 9578, "code": "String s = \"2017/01/07\";\nSystem.out.println(\"2018/01/\" + s.substring(s.length() - 2));", "code_tokens": ["<0>", "String", "s", "=", "\"2017/01/07\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018/01/\"", "+", "s", ".", "substring", "(", "s", ".", "length", "(", ")", "-", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "2017/01/07"]]}, {"line": 1, "state": [["s", "2017/01/07"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16104, "code": "int a = 12, b = 4;\nint result = a - (b * 2);\nif (result <= 0) {\nresult = 0;}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "int", "result", "=", "a", "-", "(", "b", "*", "2", ")", ";", "<2>", "if", "(", "result", "<=", "0", ")", "{", "<3>", "result", "=", "0", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"], ["result", "4"]]}, {"line": 2, "state": [["a", "12"], ["b", "4"], ["result", "4"]]}, {"line": 4, "state": [["a", "12"], ["b", "4"], ["result", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]]}}
{"id": 1984, "code": "int n = 100, a = 100, b = 100;\nn = Integer.parseInt(String.valueOf(n));\na = Integer.parseInt(String.valueOf(a));\nb = Integer.parseInt(String.valueOf(b));\nint mx_x;if (a > b) {\nmx_x = b;\n} else {\nmx_x = a;}\nint mx_y;if ((a + b - n) < 0) {\nmx_y = 0;\n} else {\nmx_y = a + b - n;}\nSystem.out.println(mx_x + \" \" + mx_y);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "n", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "n", ")", ")", ";", "<2>", "a", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "a", ")", ")", ";", "<3>", "b", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "b", ")", ")", ";", "<4>", "int", "mx_x", ";", "if", "(", "a", ">", "b", ")", "{", "<5>", "mx_x", "=", "b", ";", "<6>", "}", "else", "{", "<7>", "mx_x", "=", "a", ";", "}", "<8>", "int", "mx_y", ";", "if", "(", "(", "a", "+", "b", "-", "n", ")", "<", "0", ")", "{", "<9>", "mx_y", "=", "0", ";", "<10>", "}", "else", "{", "<11>", "mx_y", "=", "a", "+", "b", "-", "n", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "mx_x", "+", "\" \"", "+", "mx_y", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 4, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 7, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["mx_x", "100"]]}, {"line": 8, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["mx_x", "100"]]}, {"line": 11, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["mx_x", "100"], ["mx_y", "100"]]}, {"line": 12, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["mx_x", "100"], ["mx_y", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "7": [[7, 4, 3, 2, 1, 0]], "8": [[8, 7, 4, 3, 2, 1, 0]], "11": [[11, 8, 7, 4, 3, 2, 1, 0]], "12": [[12, 11, 8, 7, 4, 3, 2, 1, 0]]}}
{"id": 1861, "code": "Scanner scanner = new Scanner(System.in);\nint N = 10, A = 3, B = 5;\nint M = Math.min(A, B);\nint m = 0;\nif (A + B > N) {\nm = A + B - N;\n} else {\nm = 0;}\nSystem.out.println(M + \" \" + m);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "10", ",", "A", "=", "3", ",", "B", "=", "5", ";", "<2>", "int", "M", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<3>", "int", "m", "=", "0", ";", "<4>", "if", "(", "A", "+", "B", ">", "N", ")", "{", "<5>", "m", "=", "A", "+", "B", "-", "N", ";", "<6>", "}", "else", "{", "<7>", "m", "=", "0", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "M", "+", "\" \"", "+", "m", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "10"], ["A", "3"], ["B", "5"]]}, {"line": 3, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["M", "3"]]}, {"line": 4, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["M", "3"], ["m", "0"]]}, {"line": 5, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["M", "3"], ["m", "0"]]}, {"line": 8, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["M", "3"], ["m", "0"]]}, {"line": 9, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["M", "3"], ["m", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5, 3, 2]], "8": [[8, 4]], "9": [[9, 8, 4]]}}
{"id": 11831, "code": "int m1 = 11;\nint m2 = 12;\nif (m1 < m2) {\nSystem.out.println(1);\n} else {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "m1", "=", "11", ";", "<1>", "int", "m2", "=", "12", ";", "<2>", "if", "(", "m1", "<", "m2", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["m1", "11"]]}, {"line": 1, "state": [["m1", "11"], ["m2", "12"]]}, {"line": 2, "state": [["m1", "11"], ["m2", "12"]]}, {"line": 3, "state": [["m1", "11"], ["m2", "12"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 4948, "code": "String s = \"internationalization\";\nString sin = s.substring(1, s.length() - 1);\nSystem.out.println(s.charAt(0) + String.valueOf(sin.length()) + s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "String", "sin", "=", "s", ".", "substring", "(", "1", ",", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "sin", ".", "length", "(", ")", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["sin", "nternationalizatio"]]}, {"line": 2, "state": [["s", "internationalization"], ["sin", "nternationalizatio"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1438, "code": "String input() { return \"750\".trim(); }\nint[] mapint() { return Arrays.stream(input().split(\" \")).mapToInt(Integer::parseInt).toArray(); }\nint N = 750;\nSystem.out.println(-(-N / 111) * 111);", "code_tokens": ["<0>", "String", "input", "(", ")", "{", "return", "\"750\"", ".", "trim", "(", ")", ";", "}", "<1>", "int", "[", "]", "mapint", "(", ")", "{", "return", "Arrays", ".", "stream", "(", "input", "(", ")", ".", "split", "(", "\" \"", ")", ")", ".", "mapToInt", "(", "Integer", "::", "parseInt", ")", ".", "toArray", "(", ")", ";", "}", "<2>", "int", "N", "=", "750", ";", "<3>", "System", ".", "out", ".", "println", "(", "-", "(", "-", "N", "/", "111", ")", "*", "111", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["input", "<function>"]]}, {"line": 2, "state": [["input", "<function>"], ["mapint", "<function>"]]}, {"line": 3, "state": [["input", "<function>"], ["mapint", "<function>"]]}, {"line": 4, "state": [["input", "<function>"], ["mapint", "<function>"], ["N", "750"]]}, {"line": 5, "state": [["input", "<function>"], ["mapint", "<function>"], ["N", "750"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 4]]}}
{"id": 4925, "code": "String s = \"smiles\";\nchar s1 = s.charAt(0);String s2 = s.substring(1, s.length() - 1);char s3 = s.charAt(s.length() - 1);\nString ans = s1 + String.valueOf(s2.length()) + s3;\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "char", "s1", "=", "s", ".", "charAt", "(", "0", ")", ";", "String", "s2", "=", "s", ".", "substring", "(", "1", ",", "s", ".", "length", "(", ")", "-", "1", ")", ";", "char", "s3", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<2>", "String", "ans", "=", "s1", "+", "String", ".", "valueOf", "(", "s2", ".", "length", "(", ")", ")", "+", "s3", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["s1", "s"], ["s2", "mile"], ["s3", "s"]]}, {"line": 2, "state": [["s", "smiles"], ["s1", "s"], ["s2", "mile"], ["s3", "s"], ["ans", "s4s"]]}, {"line": 3, "state": [["s", "smiles"], ["s1", "s"], ["s2", "mile"], ["s3", "s"], ["ans", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 6195, "code": "int n = 2;\nint[] A = {1, 5};\nint[] B = {2, 4};\nint[] C = {3, 6};\nint ans = 0;\nfor (int b : B) {\nint a_index = bisectLeft(A, b);\nint c_index = bisectRight(C, b);\nans += a_index * (n - c_index);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "5", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "4", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "6", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "B", ")", "{", "<6>", "int", "a_index", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<7>", "int", "c_index", "=", "bisectRight", "(", "C", ",", "b", ")", ";", "<8>", "ans", "+=", "a_index", "*", "(", "n", "-", "c_index", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "2"]]}, {"line": 2, "state": [["n", "2"], ["A", "[ 1 , 5 ]"]]}, {"line": 3, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"]]}, {"line": 4, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"]]}, {"line": 5, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"], ["a_index", "1"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "0"], ["b", "2"], ["a_index", "1"], ["c_index", "0"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "2"], ["a_index", "1"], ["c_index", "0"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["a_index", "1"], ["c_index", "0"]]}, {"line": 7, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["a_index", "1"], ["c_index", "0"]]}, {"line": 8, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "2"], ["b", "4"], ["a_index", "1"], ["c_index", "1"]]}, {"line": 9, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["a_index", "1"], ["c_index", "1"]]}, {"line": 6, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["a_index", "1"], ["c_index", "1"]]}, {"line": 10, "state": [["n", "2"], ["A", "[ 1 , 5 ]"], ["B", "[ 2 , 4 ]"], ["C", "[ 3 , 6 ]"], ["ans", "3"], ["b", "4"], ["a_index", "1"], ["c_index", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 18428, "code": "class Main {public static void main(String[] args) {\nint h = 3;\nint w = 7;\nint n = 10;\nSystem.out.println((int) ceil(n / Math.max(h, w)));", "code_tokens": ["<0>", "class", "Main", "{", "public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "{", "<1>", "int", "h", "=", "3", ";", "<2>", "int", "w", "=", "7", ";", "<3>", "int", "n", "=", "10", ";", "<4>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "ceil", "(", "n", "/", "Math", ".", "max", "(", "h", ",", "w", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h", "3"]]}, {"line": 2, "state": [["h", "3"], ["w", "7"]]}, {"line": 3, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}, {"line": 4, "state": [["h", "3"], ["w", "7"], ["n", "10"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3, 2, 1]]}}
{"id": 18903, "code": "int n = 12;\nif (n % 2 == 1) {\nSystem.out.println(0);\nSystem.exit(0);}\nint mp = 0, tmp = 0;\nwhile (true) {\nif (Math.pow(5, tmp) > n) {\nbreak;}\nmp = tmp;\ntmp += 1;}\nint ans = 0;\nfor (int i = 1; i <= mp; i++) {\nans += n / (2 * (int)Math.pow(5, i));}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "12", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "<3>", "System", ".", "exit", "(", "0", ")", ";", "}", "<4>", "int", "mp", "=", "0", ",", "tmp", "=", "0", ";", "<5>", "while", "(", "true", ")", "{", "<6>", "if", "(", "Math", ".", "pow", "(", "5", ",", "tmp", ")", ">", "n", ")", "{", "<7>", "break", ";", "}", "<8>", "mp", "=", "tmp", ";", "<9>", "tmp", "+=", "1", ";", "}", "<10>", "int", "ans", "=", "0", ";", "<11>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "mp", ";", "i", "++", ")", "{", "<12>", "ans", "+=", "n", "/", "(", "2", "*", "(", "int", ")", "Math", ".", "pow", "(", "5", ",", "i", ")", ")", ";", "}", "<13>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "12"]]}, {"line": 1, "state": [["n", "12"]]}, {"line": 4, "state": [["n", "12"], ["mp", "0"], ["tmp", "0"]]}, {"line": 5, "state": [["n", "12"], ["mp", "0"], ["tmp", "0"]]}, {"line": 6, "state": [["n", "12"], ["mp", "0"], ["tmp", "0"]]}, {"line": 8, "state": [["n", "12"], ["mp", "0"], ["tmp", "0"]]}, {"line": 9, "state": [["n", "12"], ["mp", "0"], ["tmp", "1"]]}, {"line": 6, "state": [["n", "12"], ["mp", "0"], ["tmp", "1"]]}, {"line": 8, "state": [["n", "12"], ["mp", "1"], ["tmp", "1"]]}, {"line": 9, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"]]}, {"line": 6, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"]]}, {"line": 7, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"]]}, {"line": 10, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"], ["ans", "0"]]}, {"line": 11, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"], ["ans", "0"], ["i", "1"]]}, {"line": 12, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"], ["ans", "1"], ["i", "1"]]}, {"line": 11, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"], ["ans", "1"], ["i", "1"]]}, {"line": 13, "state": [["n", "12"], ["mp", "1"], ["tmp", "2"], ["ans", "1"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 4, 1, 0], [6, 9, 8, 6, 4, 1, 0], [6, 9, 8, 6, 9, 8, 6, 4, 1, 0]], "7": [[7]], "8": [[8, 6, 4, 1, 0], [8, 6, 9, 8, 6, 4, 1, 0]], "9": [[9, 8, 6, 4, 1, 0], [9, 8, 6, 9, 8, 6, 4, 1, 0]], "10": [[10]], "11": [[11, 8, 6, 9, 8, 6, 4, 1, 0], [11, 12, 11, 8, 6, 9, 8, 6, 4, 1, 0]], "12": [[12, 11, 8, 6, 9, 8, 6, 4, 1, 0]], "13": [[13, 12, 11, 8, 6, 9, 8, 6, 4, 1, 0]]}}
{"id": 7295, "code": "int h = 10, n = 3;\nint[] a = {4, 5, 6};\nSystem.out.println((sum(a) >= h) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "sum", "(", "a", ")", ">=", "h", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "10"], ["n", "3"]]}, {"line": 1, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 2493, "code": "int[] N = {4, 9, 0, 8};\nMap<Integer, Boolean> dic = new HashMap<>();dic.put(1, false);dic.put(9, false);dic.put(7, false);dic.put(4, false);\nfor (int n : N) {\ndic.put(n, true);}\nif (dic.values().stream().allMatch(v -> v)) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "[", "]", "N", "=", "{", "4", ",", "9", ",", "0", ",", "8", "}", ";", "<1>", "Map", "<", "Integer", ",", "Boolean", ">", "dic", "=", "new", "HashMap", "<", ">", "(", ")", ";", "dic", ".", "put", "(", "1", ",", "false", ")", ";", "dic", ".", "put", "(", "9", ",", "false", ")", ";", "dic", ".", "put", "(", "7", ",", "false", ")", ";", "dic", ".", "put", "(", "4", ",", "false", ")", ";", "<2>", "for", "(", "int", "n", ":", "N", ")", "{", "<3>", "dic", ".", "put", "(", "n", ",", "true", ")", ";", "}", "<4>", "if", "(", "dic", ".", "values", "(", ")", ".", "stream", "(", ")", ".", "allMatch", "(", "v", "->", "v", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["dic", "{ 1"]]}, {"line": 2, "state": [["dic", "{ 1"], ["n", "4"]]}, {"line": 3, "state": [["dic", "{ 1"], ["n", "4"]]}, {"line": 2, "state": [["dic", "{ 1"], ["n", "9"]]}, {"line": 3, "state": [["dic", "{ 1"], ["n", "9"]]}, {"line": 2, "state": [["dic", "{ 1"], ["n", "0"]]}, {"line": 3, "state": [["dic", "{ 1"], ["n", "0"]]}, {"line": 2, "state": [["dic", "{ 1"], ["n", "8"]]}, {"line": 3, "state": [["dic", "{ 1"], ["n", "8"]]}, {"line": 2, "state": [["dic", "{ 1"], ["n", "8"]]}, {"line": 4, "state": [["dic", "{ 1"], ["n", "8"]]}, {"line": 7, "state": [["dic", "{ 1"], ["n", "8"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "7": [[7]]}}
{"id": 554, "code": "String s = \"xyz\";\nint k = 4;\nint n = s.length();\nStringBuilder ans = new StringBuilder();\nfor (int i = 0; i < n; i++) {\nif (s.charAt(i) == 'a') {\nans.append(\"a\");}\nelse if (123 - s.charAt(i) <= k) {\nans.append(\"a\");\nk -= 123 - s.charAt(i);}\nelse {\nans.append(s.charAt(i));}}\nk %= 26;\nchar lastChar = ans.charAt(ans.length() - 1);ans.setCharAt(ans.length() - 1, (char) ((lastChar + k - 'a') % 26 + 'a'));\nSystem.out.println(ans.toString());", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<3>", "StringBuilder", "ans", "=", "new", "StringBuilder", "(", ")", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", ".", "charAt", "(", "i", ")", "==", "'a'", ")", "{", "<6>", "ans", ".", "append", "(", "\"a\"", ")", ";", "}", "<7>", "else", "if", "(", "123", "-", "s", ".", "charAt", "(", "i", ")", "<=", "k", ")", "{", "<8>", "ans", ".", "append", "(", "\"a\"", ")", ";", "<9>", "k", "-=", "123", "-", "s", ".", "charAt", "(", "i", ")", ";", "}", "<10>", "else", "{", "<11>", "ans", ".", "append", "(", "s", ".", "charAt", "(", "i", ")", ")", ";", "}", "}", "<12>", "k", "%=", "26", ";", "<13>", "char", "lastChar", "=", "ans", ".", "charAt", "(", "ans", ".", "length", "(", ")", "-", "1", ")", ";", "ans", ".", "setCharAt", "(", "ans", ".", "length", "(", ")", "-", "1", ",", "(", "char", ")", "(", "(", "lastChar", "+", "k", "-", "'a'", ")", "%", "26", "+", "'a'", ")", ")", ";", "<14>", "System", ".", "out", ".", "println", "(", "ans", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["k", "4"]]}, {"line": 2, "state": [["s", "xyz"], ["k", "4"], ["n", "3"]]}, {"line": 3, "state": [["s", "xyz"], ["k", "4"], ["n", "3"], ["ans", "[ ]"]]}, {"line": 4, "state": [["s", "xyz"], ["k", "4"], ["n", "3"], ["ans", "[ ]"], ["i", "0"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "4"], ["n", "3"], ["ans", "[ ]"], ["i", "0"]]}, {"line": 7, "state": [["s", "xyz"], ["k", "4"], ["n", "3"], ["ans", "[ ]"], ["i", "0"]]}, {"line": 8, "state": [["s", "xyz"], ["k", "4"], ["n", "3"], ["ans", "[ a ]"], ["i", "0"]]}, {"line": 9, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a ]"], ["i", "0"]]}, {"line": 4, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a ]"], ["i", "1"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a ]"], ["i", "1"]]}, {"line": 7, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a ]"], ["i", "1"]]}, {"line": 11, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a , y ]"], ["i", "1"]]}, {"line": 4, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a , y ]"], ["i", "2"]]}, {"line": 5, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a , y ]"], ["i", "2"]]}, {"line": 7, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a , y ]"], ["i", "2"]]}, {"line": 8, "state": [["s", "xyz"], ["k", "1"], ["n", "3"], ["ans", "[ a , y , a ]"], ["i", "2"]]}, {"line": 9, "state": [["s", "xyz"], ["k", "0"], ["n", "3"], ["ans", "[ a , y , a ]"], ["i", "2"]]}, {"line": 4, "state": [["s", "xyz"], ["k", "0"], ["n", "3"], ["ans", "[ a , y , a ]"], ["i", "2"]]}, {"line": 12, "state": [["s", "xyz"], ["k", "0"], ["n", "3"], ["ans", "[ a , y , a ]"], ["i", "2"]]}, {"line": 13, "state": [["s", "xyz"], ["k", "0"], ["n", "3"], ["ans", "[ a , y , a ]"], ["i", "2"]]}, {"line": 14, "state": [["s", "xyz"], ["k", "0"], ["n", "3"], ["ans", "[ a , y , a ]"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "4": [[4, 2, 0], [4, 9, 7, 5, 4, 2, 0], [4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0], [4, 9, 7, 5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "5": [[5, 4, 2, 0], [5, 4, 9, 7, 5, 4, 2, 0], [5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "7": [[7, 5, 4, 2, 0], [7, 5, 4, 9, 7, 5, 4, 2, 0], [7, 5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "8": [[8, 3], [8, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "9": [[9, 7, 5, 4, 2, 0], [9, 7, 5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "11": [[11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "12": [[12, 9, 7, 5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "13": [[13, 12, 9, 7, 5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]], "14": [[14, 13, 12, 9, 7, 5, 4, 11, 7, 5, 4, 9, 7, 5, 4, 2, 0]]}}
{"id": 9623, "code": "String ss = \"2017/01/31\";\nSystem.out.println(ss.substring(0, 3) + '8' + ss.substring(4));", "code_tokens": ["<0>", "String", "ss", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "ss", ".", "substring", "(", "0", ",", "3", ")", "+", "'8'", "+", "ss", ".", "substring", "(", "4", ")", ")", ";"], "trace": [{"line": 0, "state": [["ss", "2017/01/31"]]}, {"line": 1, "state": [["ss", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6552, "code": "int n = 6;\nint[] a = {3, 14, 159, 2, 6, 53};\nint[] b = {58, 9, 79, 323, 84, 6};\nint[] c = {2643, 383, 2, 79, 50, 288};\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nfor (int i = 0; i < c.length; i++) {c[i] = -c[i];}\nint ans = 0;\nfor (int x : b) {\nint countA = bisectLeft(a, x);int countC = bisectLeft(c, -x);ans += countA * countC;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "14", ",", "159", ",", "2", ",", "6", ",", "53", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "58", ",", "9", ",", "79", ",", "323", ",", "84", ",", "6", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "2643", ",", "383", ",", "2", ",", "79", ",", "50", ",", "288", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", ".", "length", ";", "i", "++", ")", "{", "c", "[", "i", "]", "=", "-", "c", "[", "i", "]", ";", "}", "<8>", "int", "ans", "=", "0", ";", "<9>", "for", "(", "int", "x", ":", "b", ")", "{", "<10>", "int", "countA", "=", "bisectLeft", "(", "a", ",", "x", ")", ";", "int", "countC", "=", "bisectLeft", "(", "c", ",", "-", "x", ")", ";", "ans", "+=", "countA", "*", "countC", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2643 , 383 , 288 , 79 , 50 , 2 ]"]]}, {"line": 8, "state": []}, {"line": 8, "state": []}, {"line": 8, "state": [["x", "2643"]]}, {"line": 8, "state": [["x", "383"]]}, {"line": 8, "state": [["x", "288"]]}, {"line": 8, "state": [["x", "79"]]}, {"line": 8, "state": [["x", "50"]]}, {"line": 8, "state": [["x", "2"]]}, {"line": 8, "state": [["x", "2"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "0"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "0"], ["x", "6"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "10"], ["x", "6"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "10"], ["x", "9"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "25"], ["x", "9"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "25"], ["x", "58"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "45"], ["x", "58"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "45"], ["x", "79"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "60"], ["x", "79"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "60"], ["x", "84"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "75"], ["x", "84"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "75"], ["x", "323"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "87"], ["x", "323"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "87"], ["x", "323"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ -2643 , -383 , -288 , -79 , -50 , -2 ]"], ["ans", "87"], ["x", "323"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 1]], "6": [[6, 2]], "7": [[7, 3]], "8": [[8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3], [8, 7, 3]], "9": [[9]], "10": [[10, 8, 7, 3], [10, 11, 10, 8, 7, 3], [10, 11, 10, 11, 10, 8, 7, 3], [10, 11, 10, 11, 10, 11, 10, 8, 7, 3], [10, 11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3], [10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3], [10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3]], "11": [[11, 10, 8, 7, 3], [11, 10, 11, 10, 8, 7, 3], [11, 10, 11, 10, 11, 10, 8, 7, 3], [11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3], [11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3], [11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3]], "12": [[12, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 8, 7, 3]]}}
{"id": 12813, "code": "String n = \"6\";\nSystem.out.println(n.equals(\"7\") || n.equals(\"5\") || n.equals(\"3\") ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "String", "n", "=", "\"6\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", ".", "equals", "(", "\"7\"", ")", "||", "n", ".", "equals", "(", "\"5\"", ")", "||", "n", ".", "equals", "(", "\"3\"", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 9, "code": "String s = \"a\";\nint x = 25;\nint[] tank = new int[s.length()];\nfor (char c : s.toCharArray()) {\nif (c == 'a') {\ntank[tank.length - 1] = 0;}\nelse {\ntank[tank.length - 1] = ('z' + 1 - c);}}\nString res = \"\";\nfor (int i = 0; i < tank.length; i++) {\nif (tank[i] == 0) {\nres += s.charAt(i);}\nelse if (tank[i] <= x) {\nx -= tank[i];\ntank[i] = 0;\nres += 'a';}\nelse {\nres += s.charAt(i);}}\nchar c = res.charAt(res.length() - 1);\nx %= 26;\nif (c + x <= 'z') {\nres = res.substring(0, res.length() - 1) + (char) (c + x);}\nelse {\nres = res.substring(0, res.length() - 1) + (char) (c + x - 'z' + 'a' - 1);}\nSystem.out.println(res);", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "x", "=", "25", ";", "<2>", "int", "[", "]", "tank", "=", "new", "int", "[", "s", ".", "length", "(", ")", "]", ";", "<3>", "for", "(", "char", "c", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<4>", "if", "(", "c", "==", "'a'", ")", "{", "<5>", "tank", "[", "tank", ".", "length", "-", "1", "]", "=", "0", ";", "}", "<6>", "else", "{", "<7>", "tank", "[", "tank", ".", "length", "-", "1", "]", "=", "(", "'z'", "+", "1", "-", "c", ")", ";", "}", "}", "<8>", "String", "res", "=", "\"\"", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "tank", ".", "length", ";", "i", "++", ")", "{", "<10>", "if", "(", "tank", "[", "i", "]", "==", "0", ")", "{", "<11>", "res", "+=", "s", ".", "charAt", "(", "i", ")", ";", "}", "<12>", "else", "if", "(", "tank", "[", "i", "]", "<=", "x", ")", "{", "<13>", "x", "-=", "tank", "[", "i", "]", ";", "<14>", "tank", "[", "i", "]", "=", "0", ";", "<15>", "res", "+=", "'a'", ";", "}", "<16>", "else", "{", "<17>", "res", "+=", "s", ".", "charAt", "(", "i", ")", ";", "}", "}", "<18>", "char", "c", "=", "res", ".", "charAt", "(", "res", ".", "length", "(", ")", "-", "1", ")", ";", "<19>", "x", "%=", "26", ";", "<20>", "if", "(", "c", "+", "x", "<=", "'z'", ")", "{", "<21>", "res", "=", "res", ".", "substring", "(", "0", ",", "res", ".", "length", "(", ")", "-", "1", ")", "+", "(", "char", ")", "(", "c", "+", "x", ")", ";", "}", "<22>", "else", "{", "<23>", "res", "=", "res", ".", "substring", "(", "0", ",", "res", ".", "length", "(", ")", "-", "1", ")", "+", "(", "char", ")", "(", "c", "+", "x", "-", "'z'", "+", "'a'", "-", "1", ")", ";", "}", "<24>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["x", "25"]]}, {"line": 2, "state": [["s", "a"], ["x", "25"], ["tank", "[ ]"]]}, {"line": 3, "state": [["s", "a"], ["x", "25"], ["tank", "[ ]"], ["c", "a"]]}, {"line": 4, "state": [["s", "a"], ["x", "25"], ["tank", "[ ]"], ["c", "a"]]}, {"line": 5, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"]]}, {"line": 3, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"]]}, {"line": 8, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", ""]]}, {"line": 9, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", ""], ["i", "0"]]}, {"line": 10, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", ""], ["i", "0"]]}, {"line": 11, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "a"], ["i", "0"]]}, {"line": 9, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "a"], ["i", "0"]]}, {"line": 18, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "a"], ["i", "0"]]}, {"line": 19, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "a"], ["i", "0"]]}, {"line": 20, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "a"], ["i", "0"]]}, {"line": 21, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "z"], ["i", "0"]]}, {"line": 24, "state": [["s", "a"], ["x", "25"], ["tank", "[ 0 ]"], ["c", "a"], ["res", "z"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0]], "4": [[4, 3, 0]], "5": [[5, 2]], "8": [[8]], "9": [[9, 5, 2], [9, 11, 10, 9, 5, 2]], "10": [[10, 9, 5, 2]], "11": [[11, 10, 9, 5, 2]], "18": [[18, 11, 10, 9, 5, 2]], "19": [[19, 1]], "20": [[20, 19, 1]], "21": [[21, 20, 19, 1]], "24": [[24, 21, 20, 19, 1]]}}
{"id": 11087, "code": "String word = \"level\";\nint n = word.length();\nint hanbun = (n - 1) / 2;\nint notk = 0;\nfor (int i = 0; i < hanbun; i++) {\nif (word.charAt(i) != word.charAt(n - i - 1)) {\nnotk = 1;\nbreak;}}\nint hanbun2;if (hanbun % 2 == 0) {\nhanbun2 = hanbun / 2;}\nelse {\nhanbun2 = (hanbun - 1) / 2;}\nfor (int j = 0; j < hanbun2; j++) {\nif (word.charAt(j) != word.charAt(hanbun - j - 1)) {\nnotk = 1;\nbreak;}}\nif (notk == 1) {\nSystem.out.println(\"No\");}\nelse {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "String", "word", "=", "\"level\"", ";", "<1>", "int", "n", "=", "word", ".", "length", "(", ")", ";", "<2>", "int", "hanbun", "=", "(", "n", "-", "1", ")", "/", "2", ";", "<3>", "int", "notk", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "hanbun", ";", "i", "++", ")", "{", "<5>", "if", "(", "word", ".", "charAt", "(", "i", ")", "!=", "word", ".", "charAt", "(", "n", "-", "i", "-", "1", ")", ")", "{", "<6>", "notk", "=", "1", ";", "<7>", "break", ";", "}", "}", "<8>", "int", "hanbun2", ";", "if", "(", "hanbun", "%", "2", "==", "0", ")", "{", "<9>", "hanbun2", "=", "hanbun", "/", "2", ";", "}", "<10>", "else", "{", "<11>", "hanbun2", "=", "(", "hanbun", "-", "1", ")", "/", "2", ";", "}", "<12>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "hanbun2", ";", "j", "++", ")", "{", "<13>", "if", "(", "word", ".", "charAt", "(", "j", ")", "!=", "word", ".", "charAt", "(", "hanbun", "-", "j", "-", "1", ")", ")", "{", "<14>", "notk", "=", "1", ";", "<15>", "break", ";", "}", "}", "<16>", "if", "(", "notk", "==", "1", ")", "{", "<17>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}", "<18>", "else", "{", "<19>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["word", "level"]]}, {"line": 1, "state": [["word", "level"], ["n", "5"]]}, {"line": 2, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"]]}, {"line": 3, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"]]}, {"line": 4, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "0"]]}, {"line": 5, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "0"]]}, {"line": 4, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"]]}, {"line": 5, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"]]}, {"line": 4, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"]]}, {"line": 8, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"]]}, {"line": 9, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"], ["hanbun2", "1"]]}, {"line": 12, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"], ["hanbun2", "1"], ["j", "0"]]}, {"line": 13, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "0"], ["i", "1"], ["hanbun2", "1"], ["j", "0"]]}, {"line": 14, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "1"], ["i", "1"], ["hanbun2", "1"], ["j", "0"]]}, {"line": 15, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "1"], ["i", "1"], ["hanbun2", "1"], ["j", "0"]]}, {"line": 16, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "1"], ["i", "1"], ["hanbun2", "1"], ["j", "0"]]}, {"line": 17, "state": [["word", "level"], ["n", "5"], ["hanbun", "2"], ["notk", "1"], ["i", "1"], ["hanbun2", "1"], ["j", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]], "4": [[4, 2, 1, 0], [4, 5, 4, 2, 1, 0], [4, 5, 4, 5, 4, 2, 1, 0]], "5": [[5, 4, 2, 1, 0], [5, 4, 5, 4, 2, 1, 0]], "8": [[8, 4, 5, 4, 5, 4, 2, 1, 0]], "9": [[9, 8, 4, 5, 4, 5, 4, 2, 1, 0]], "12": [[12, 9, 8, 4, 5, 4, 5, 4, 2, 1, 0]], "13": [[13, 12, 9, 8, 4, 5, 4, 5, 4, 2, 1, 0]], "14": [[14, 3]], "15": [[15]], "16": [[16, 14, 3]], "17": [[17]]}}
{"id": 17224, "code": "String[] parts = \"D H\".split(\" \");String a = parts[0];String b = parts[1];System.out.println(new String[][] {{\"H\", \"D\"}, {b}}[a.equals(\"H\") ? 0 : 1][0]);", "code_tokens": ["<0>", "String", "[", "]", "parts", "=", "\"D H\"", ".", "split", "(", "\" \"", ")", ";", "String", "a", "=", "parts", "[", "0", "]", ";", "String", "b", "=", "parts", "[", "1", "]", ";", "System", ".", "out", ".", "println", "(", "new", "String", "[", "]", "[", "]", "{", "{", "\"H\"", ",", "\"D\"", "}", ",", "{", "b", "}", "}", "[", "a", ".", "equals", "(", "\"H\"", ")", "?", "0", ":", "1", "]", "[", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]]}}
{"id": 11315, "code": "String s = \"SUN\";\nif (s.equals(\"SUN\")) {System.out.println(7);}\nelse if (s.equals(\"MON\")) {System.out.println(6);}\nelse if (s.equals(\"TUE\")) {System.out.println(5);}\nelse if (s.equals(\"WED\")) {System.out.println(4);}\nelse if (s.equals(\"THU\")) {System.out.println(3);}\nelse if (s.equals(\"FRI\")) {System.out.println(2);}\nelse {System.out.println(1);}", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<2>", "else", "if", "(", "s", ".", "equals", "(", "\"MON\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "6", ")", ";", "}", "<3>", "else", "if", "(", "s", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "5", ")", ";", "}", "<4>", "else", "if", "(", "s", ".", "equals", "(", "\"WED\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "4", ")", ";", "}", "<5>", "else", "if", "(", "s", ".", "equals", "(", "\"THU\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "3", ")", ";", "}", "<6>", "else", "if", "(", "s", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "2", ")", ";", "}", "<7>", "else", "{", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3483, "code": "int a = 20, b = 30;\nif (a > b * 2) {\nSystem.out.println(a - b * 2);}\nelse if (a <= b * 2) {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<1>", "if", "(", "a", ">", "b", "*", "2", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "a", "-", "b", "*", "2", ")", ";", "}", "<3>", "else", "if", "(", "a", "<=", "b", "*", "2", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 3, "state": [["a", "20"], ["b", "30"]]}, {"line": 4, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "3": [[3, 1, 0]], "4": [[4]]}}
{"id": 16833, "code": "String A = \"H\"; String B = \"H\";\nif (A.equals(B)) {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "A", "=", "\"H\"", ";", "String", "B", "=", "\"H\"", ";", "<1>", "if", "(", "A", ".", "equals", "(", "B", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "H"], ["B", "H"]]}, {"line": 1, "state": [["A", "H"], ["B", "H"]]}, {"line": 2, "state": [["A", "H"], ["B", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 7494, "code": "int h = 20, n = 3;\nint[] xlist = {4, 5, 6};\nint sum = 0;for (int num : xlist) {sum += num;}if (sum >= h) {\nSystem.out.println(\"Yes\");} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "xlist", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "sum", "=", "0", ";", "for", "(", "int", "num", ":", "xlist", ")", "{", "sum", "+=", "num", ";", "}", "if", "(", "sum", ">=", "h", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["xlist", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["xlist", "[ 4 , 5 , 6 ]"]]}, {"line": 5, "state": [["h", "20"], ["n", "3"], ["xlist", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 19321, "code": "int N = 10;\nif (N % 2 == 0) {\nSystem.out.println(N);}\nelse {\nSystem.out.println(2 * N);}", "code_tokens": ["<0>", "int", "N", "=", "10", ";", "<1>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "2", "*", "N", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "10"]]}, {"line": 1, "state": [["N", "10"]]}, {"line": 2, "state": [["N", "10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4192, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint w1 = h1 * 60 + m1;\nint w2 = h2 * 60 + m2;\nint w3 = (w2 - w1 + 24 * 60) % (24 * 60);\nw3 = w3 - k;\nSystem.out.println(w3);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "w1", "=", "h1", "*", "60", "+", "m1", ";", "<2>", "int", "w2", "=", "h2", "*", "60", "+", "m2", ";", "<3>", "int", "w3", "=", "(", "w2", "-", "w1", "+", "24", "*", "60", ")", "%", "(", "24", "*", "60", ")", ";", "<4>", "w3", "=", "w3", "-", "k", ";", "<5>", "System", ".", "out", ".", "println", "(", "w3", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 4, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["w1", "600"]]}, {"line": 5, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["w1", "600"], ["w2", "900"]]}, {"line": 6, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["w1", "600"], ["w2", "900"], ["w3", "300"]]}, {"line": 7, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["w1", "600"], ["w2", "900"], ["w3", "270"]]}, {"line": 8, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["w1", "600"], ["w2", "900"], ["w3", "270"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3]], "5": [[5, 3]], "6": [[6, 5, 3]], "7": [[7, 6, 5, 3]], "8": [[8, 7, 6, 5, 3]]}}
{"id": 13099, "code": "System.out.println(\"NYOE S\".charAt(\"753\".contains(\"6\") ? 6 : -1)); // Adjusted for index access", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"NYOE S\"", ".", "charAt", "(", "\"753\"", ".", "contains", "(", "\"6\"", ")", "?", "6", ":", "-", "1", ")", ")", ";", "// Adjusted for index access"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 19273, "code": "int n = 5;\nif (n % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint res = 0;\nint m = 10;\nwhile (n / m > 0) {\nres += n / m;\nm *= 5;}\nSystem.out.println(res);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "res", "=", "0", ";", "<5>", "int", "m", "=", "10", ";", "<6>", "while", "(", "n", "/", "m", ">", "0", ")", "{", "<7>", "res", "+=", "n", "/", "m", ";", "<8>", "m", "*=", "5", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "res", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 13685, "code": "int h1 = 10, m1 = 0, h2 = 15, m2 = 0, k = 30;\nint hm = ((h2 - h1) * 60) - (m1 - m2) - k;\nSystem.out.println(hm);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "15", ",", "m2", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "hm", "=", "(", "(", "h2", "-", "h1", ")", "*", "60", ")", "-", "(", "m1", "-", "m2", ")", "-", "k", ";", "<2>", "System", ".", "out", ".", "println", "(", "hm", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["hm", "270"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "15"], ["m2", "0"], ["k", "30"], ["hm", "270"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 19104, "code": "int N = 5;\nint ans = 0;\nif (N % 2 != 0) {\nSystem.out.println(ans);} else {\nint i = 1;\nwhile (true) {\nint tmp = (int) (Math.pow(5, i) * 2);\nif (tmp <= N) {\nans += N / tmp;\ni += 1;\n} else {\nbreak;}}\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "N", "%", "2", "!=", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "else", "{", "<4>", "int", "i", "=", "1", ";", "<5>", "while", "(", "true", ")", "{", "<6>", "int", "tmp", "=", "(", "int", ")", "(", "Math", ".", "pow", "(", "5", ",", "i", ")", "*", "2", ")", ";", "<7>", "if", "(", "tmp", "<=", "N", ")", "{", "<8>", "ans", "+=", "N", "/", "tmp", ";", "<9>", "i", "+=", "1", ";", "<10>", "}", "else", "{", "<11>", "break", ";", "}", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["ans", "0"]]}, {"line": 2, "state": [["N", "5"], ["ans", "0"]]}, {"line": 3, "state": [["N", "5"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 1]]}}
{"id": 6034, "code": "Scanner input = new Scanner(System.in);\nint n = 5;\nSystem.out.println((int) Math.ceil(n / 2.0));", "code_tokens": ["<0>", "Scanner", "input", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "n", "=", "5", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "Math", ".", "ceil", "(", "n", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["n", "5"]]}, {"line": 4, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 3]]}}
{"id": 13424, "code": "String s = \"happy,newyear,enjoy\";\nString a = s.substring(0, 5);\nString b = s.substring(6, 13);\nString c = s.substring(14);\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "s", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "String", "a", "=", "s", ".", "substring", "(", "0", ",", "5", ")", ";", "<2>", "String", "b", "=", "s", ".", "substring", "(", "6", ",", "13", ")", ";", "<3>", "String", "c", "=", "s", ".", "substring", "(", "14", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["s", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"]]}, {"line": 2, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"], ["b", "newyear"]]}, {"line": 3, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}, {"line": 4, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 2373, "code": "int n = 0, m = 3;\nint ans = n * (n - 1) / 2 + m * (m - 1) / 2;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "0", ",", "m", "=", "3", ";", "<1>", "int", "ans", "=", "n", "*", "(", "n", "-", "1", ")", "/", "2", "+", "m", "*", "(", "m", "-", "1", ")", "/", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "0"], ["m", "3"]]}, {"line": 1, "state": [["n", "0"], ["m", "3"], ["ans", "3"]]}, {"line": 2, "state": [["n", "0"], ["m", "3"], ["ans", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 10032, "code": "int N = 6;\nchar[] S = {')', ')', ')', '(', ')', ')'};\nint count = 0;\nint[] LR = {0, 0};\nfor (int i = 0; i < N; i++) {\nif (S[i] == '(') {\ncount++;}\nelse {\nif (count == 0) {\nLR[0]++;\ncontinue;}\ncount--;}}\nLR[1] = count;\nfor (int i = 0; i < 2; i++) {\nfor (int j = 0; j < LR[i]; j++) {\nif (i == 0) {\nS = insertAtBeginning(S, '(');}\nelse {\nS = appendAtEnd(S, ')');}}}\nSystem.out.println(String.valueOf(S));", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "char", "[", "]", "S", "=", "{", "')'", ",", "')'", ",", "')'", ",", "'('", ",", "')'", ",", "')'", "}", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "int", "[", "]", "LR", "=", "{", "0", ",", "0", "}", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "S", "[", "i", "]", "==", "'('", ")", "{", "<6>", "count", "++", ";", "}", "<7>", "else", "{", "<8>", "if", "(", "count", "==", "0", ")", "{", "<9>", "LR", "[", "0", "]", "++", ";", "<10>", "continue", ";", "}", "<11>", "count", "--", ";", "}", "}", "<12>", "LR", "[", "1", "]", "=", "count", ";", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "2", ";", "i", "++", ")", "{", "<14>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "LR", "[", "i", "]", ";", "j", "++", ")", "{", "<15>", "if", "(", "i", "==", "0", ")", "{", "<16>", "S", "=", "insertAtBeginning", "(", "S", ",", "'('", ")", ";", "}", "<17>", "else", "{", "<18>", "S", "=", "appendAtEnd", "(", "S", ",", "')'", ")", ";", "}", "}", "}", "<19>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"]]}, {"line": 2, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"]]}, {"line": 3, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"], ["i", "0"]]}, {"line": 8, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 0 , 0 ]"], ["i", "0"]]}, {"line": 9, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "0"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "1"]]}, {"line": 8, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 1 , 0 ]"], ["i", "1"]]}, {"line": 9, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "1"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "2"]]}, {"line": 8, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 2 , 0 ]"], ["i", "2"]]}, {"line": 9, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "2"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "3"]]}, {"line": 6, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "1"], ["LR", "[ 3 , 0 ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "1"], ["LR", "[ 3 , 0 ]"], ["i", "4"]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "1"], ["LR", "[ 3 , 0 ]"], ["i", "4"]]}, {"line": 8, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "1"], ["LR", "[ 3 , 0 ]"], ["i", "4"]]}, {"line": 11, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "4"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "5"]]}, {"line": 5, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "5"]]}, {"line": 8, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 3 , 0 ]"], ["i", "5"]]}, {"line": 9, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 10, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 4, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 12, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "5"]]}, {"line": 13, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "0"]]}, {"line": 15, "state": [["N", "6"], ["S", "[ ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "0"]]}, {"line": 16, "state": [["N", "6"], ["S", "[ ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "0"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "1"]]}, {"line": 15, "state": [["N", "6"], ["S", "[ ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "1"]]}, {"line": 16, "state": [["N", "6"], ["S", "[ ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "1"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "2"]]}, {"line": 15, "state": [["N", "6"], ["S", "[ ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "2"]]}, {"line": 16, "state": [["N", "6"], ["S", "[ ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "2"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "3"]]}, {"line": 15, "state": [["N", "6"], ["S", "[ ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "3"]]}, {"line": 16, "state": [["N", "6"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "3"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "0"], ["j", "3"]]}, {"line": 13, "state": [["N", "6"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "1"], ["j", "3"]]}, {"line": 14, "state": [["N", "6"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "1"], ["j", "3"]]}, {"line": 13, "state": [["N", "6"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "1"], ["j", "3"]]}, {"line": 19, "state": [["N", "6"], ["S", "[ ( , ( , ( , ( , ) , ) , ) , ( , ) , ) ]"], ["count", "0"], ["LR", "[ 4 , 0 ]"], ["i", "1"], ["j", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 8, 2]], "8": [[8, 2], [8, 2], [8, 2], [8, 6, 8, 2], [8, 11, 8, 6, 8, 2]], "9": [[9, 3], [9, 3], [9, 3], [9, 3]], "10": [[10], [10], [10], [10]], "11": [[11, 8, 6, 8, 2]], "12": [[12, 9, 3]], "13": [[13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [13, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "14": [[14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "15": [[15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [15, 14, 15, 14, 15, 14, 15, 14, 13, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "16": [[16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "19": [[19, 16, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 3822, "code": "int x = 64146, y = 123, z = 456;\nint ans = (int) Math.floor((x - z) / (double) (y + z));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "ans", "=", "(", "int", ")", "Math", ".", "floor", "(", "(", "x", "-", "z", ")", "/", "(", "double", ")", "(", "y", "+", "z", ")", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}, {"line": 3, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 16812, "code": "String a = \"H\";String b = \"H\";\nif (a.equals(\"H\")) {\nif (b.equals(\"H\")) {System.out.println(\"H\");}\nelse {System.out.println(\"D\");}}\nelse {\nif (b.equals(\"H\")) {System.out.println(\"D\");}\nelse {System.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "}", "<4>", "else", "{", "<5>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 9880, "code": "int n = 8;\nString s = \"))))((((\";\nint L = 0;\nint R = 0;\nfor (char i : s.toCharArray()) {\nif (i == ')') {\nif (R > 0) {R -= 1;} else {L += 1;}\n} else {\nR += 1;}}\nSystem.out.println(\"(\".repeat(L) + s + \")\".repeat(R));", "code_tokens": ["<0>", "int", "n", "=", "8", ";", "<1>", "String", "s", "=", "\"))))((((\"", ";", "<2>", "int", "L", "=", "0", ";", "<3>", "int", "R", "=", "0", ";", "<4>", "for", "(", "char", "i", ":", "s", ".", "toCharArray", "(", ")", ")", "{", "<5>", "if", "(", "i", "==", "')'", ")", "{", "<6>", "if", "(", "R", ">", "0", ")", "{", "R", "-=", "1", ";", "}", "else", "{", "L", "+=", "1", ";", "}", "<7>", "}", "else", "{", "<8>", "R", "+=", "1", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "L", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "R", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "8"]]}, {"line": 1, "state": [["n", "8"], ["s", "))))(((("]]}, {"line": 2, "state": [["n", "8"], ["s", "))))(((("], ["L", "0"]]}, {"line": 3, "state": [["n", "8"], ["s", "))))(((("], ["L", "0"], ["R", "0"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["L", "0"], ["R", "0"], ["i", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["L", "1"], ["R", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "1"], ["R", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "1"], ["R", "0"], ["i", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["L", "1"], ["R", "0"], ["i", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["L", "2"], ["R", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "2"], ["R", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "2"], ["R", "0"], ["i", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["L", "2"], ["R", "0"], ["i", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["L", "3"], ["R", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "3"], ["R", "0"], ["i", ")"]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "3"], ["R", "0"], ["i", ")"]]}, {"line": 6, "state": [["n", "8"], ["s", "))))(((("], ["L", "3"], ["R", "0"], ["i", ")"]]}, {"line": 7, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "0"], ["i", ")"]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "0"], ["i", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "0"], ["i", "("]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "1"], ["i", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "1"], ["i", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "1"], ["i", "("]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "2"], ["i", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "2"], ["i", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "2"], ["i", "("]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "3"], ["i", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "3"], ["i", "("]]}, {"line": 5, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "3"], ["i", "("]]}, {"line": 9, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "4"], ["i", "("]]}, {"line": 4, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "4"], ["i", "("]]}, {"line": 10, "state": [["n", "8"], ["s", "))))(((("], ["L", "4"], ["R", "4"], ["i", "("]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1], [4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "5": [[5, 4, 1], [5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]], "6": [[6, 3], [6, 3], [6, 3], [6, 3]], "7": [[7, 2], [7, 2], [7, 2], [7, 2]], "9": [[9, 6, 3], [9, 6, 3], [9, 6, 3], [9, 6, 3]], "10": [[10, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 1]]}}
{"id": 5361, "code": "int n = 100;\nSystem.out.println((int) ceil(n / 2.0));", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "int", ")", "ceil", "(", "n", "/", "2.0", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "100"]]}, {"line": 2, "state": [["n", "100"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 15858, "code": "int x = 64146, y = 123, z = 456;\nSystem.out.println((x - z + 1 - (z + y)) / (z + y)); // Length calculation", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "z", "+", "1", "-", "(", "z", "+", "y", ")", ")", "/", "(", "z", "+", "y", ")", ")", ";", "// Length calculation"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 15907, "code": "int A = 20, B = 30;\nSystem.out.println(A - 2 * B > 0 ? A - 2 * B : 0);", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "A", "-", "2", "*", "B", ">", "0", "?", "A", "-", "2", "*", "B", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 94, "code": "char[] s = {'x', 'y', 'z'};\nint k = 4;\nint n = s.length;\nfor (int i = 0; i < n; i++) {\nif (s[i] == 'a') continue;\nint d = 'z' - s[i] + 1;\nif (d <= k) {\ns[i] = 'a';\nk -= d;}}\nint x = ('z' - s[s.length - 1] + k) % 26;\ns[s.length - 1] = (char) ('a' + x);\nSystem.out.println(String.valueOf(s));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "int", "n", "=", "s", ".", "length", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "if", "(", "s", "[", "i", "]", "==", "'a'", ")", "continue", ";", "<5>", "int", "d", "=", "'z'", "-", "s", "[", "i", "]", "+", "1", ";", "<6>", "if", "(", "d", "<=", "k", ")", "{", "<7>", "s", "[", "i", "]", "=", "'a'", ";", "<8>", "k", "-=", "d", ";", "}", "}", "<9>", "int", "x", "=", "(", "'z'", "-", "s", "[", "s", ".", "length", "-", "1", "]", "+", "k", ")", "%", "26", ";", "<10>", "s", "[", "s", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "'a'", "+", "x", ")", ";", "<11>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["k", "4"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"]]}, {"line": 3, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["i", "0"]]}, {"line": 4, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["i", "0"]]}, {"line": 5, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["i", "0"], ["d", "3"]]}, {"line": 6, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["n", "3"], ["i", "0"], ["d", "3"]]}, {"line": 7, "state": [["s", "[ a , y , z ]"], ["k", "4"], ["n", "3"], ["i", "0"], ["d", "3"]]}, {"line": 8, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "0"], ["d", "3"]]}, {"line": 3, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "1"], ["d", "3"]]}, {"line": 4, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "1"], ["d", "3"]]}, {"line": 5, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "1"], ["d", "2"]]}, {"line": 6, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "1"], ["d", "2"]]}, {"line": 3, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "2"], ["d", "2"]]}, {"line": 4, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "2"], ["d", "2"]]}, {"line": 5, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "2"], ["d", "1"]]}, {"line": 6, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["n", "3"], ["i", "2"], ["d", "1"]]}, {"line": 7, "state": [["s", "[ a , y , a ]"], ["k", "1"], ["n", "3"], ["i", "2"], ["d", "1"]]}, {"line": 8, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["i", "2"], ["d", "1"]]}, {"line": 3, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["i", "2"], ["d", "1"]]}, {"line": 9, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["i", "2"], ["d", "1"], ["x", "0"]]}, {"line": 10, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["i", "2"], ["d", "1"], ["x", "0"]]}, {"line": 11, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["n", "3"], ["i", "2"], ["d", "1"], ["x", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0], [3, 7, 5, 4, 3, 2, 0], [3, 5, 4, 3, 7, 5, 4, 3, 2, 0], [3, 7, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 7, 5, 4, 3, 2, 0], [4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 7, 5, 4, 3, 2, 0], [5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 0], [6, 5, 4, 3, 7, 5, 4, 3, 2, 0], [6, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "7": [[7, 5, 4, 3, 2, 0], [7, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "8": [[8, 6, 5, 4, 3, 2, 0], [8, 6, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "9": [[9, 8, 6, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "10": [[10, 9, 8, 6, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]], "11": [[11, 10, 9, 8, 6, 5, 4, 3, 5, 4, 3, 7, 5, 4, 3, 2, 0]]}}
{"id": 8995, "code": "int a = 15, b = 18, c = 26, d = 35, e = 36, k = 18;\nint[] l = {a, b, c, d, e};\nint f = 0;\nfor (int i = 0; i < 4; i++) {\nfor (int j = i + 1; j < 5; j++) {\nint dValue = Math.abs(l[j] - l[i]);\nif (dValue > k) {\nf = 1;\nbreak;}}}\nif (f == 0) {\nSystem.out.println(\"Yay!\");}\nelse {\nSystem.out.println(\":(\");}", "code_tokens": ["<0>", "int", "a", "=", "15", ",", "b", "=", "18", ",", "c", "=", "26", ",", "d", "=", "35", ",", "e", "=", "36", ",", "k", "=", "18", ";", "<1>", "int", "[", "]", "l", "=", "{", "a", ",", "b", ",", "c", ",", "d", ",", "e", "}", ";", "<2>", "int", "f", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "4", ";", "i", "++", ")", "{", "<4>", "for", "(", "int", "j", "=", "i", "+", "1", ";", "j", "<", "5", ";", "j", "++", ")", "{", "<5>", "int", "dValue", "=", "Math", ".", "abs", "(", "l", "[", "j", "]", "-", "l", "[", "i", "]", ")", ";", "<6>", "if", "(", "dValue", ">", "k", ")", "{", "<7>", "f", "=", "1", ";", "<8>", "break", ";", "}", "}", "}", "<9>", "if", "(", "f", "==", "0", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"]]}, {"line": 1, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"]]}, {"line": 2, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "35"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "1"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "3"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "1"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "3"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "1"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "3"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "2"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "11"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "2"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "11"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "2"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "11"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "3"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "20"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "3"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "20"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "0"], ["i", "0"], ["j", "3"]]}, {"line": 7, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "20"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "0"], ["j", "3"]]}, {"line": 8, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "20"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "0"], ["j", "3"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "20"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "3"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "20"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "2"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "8"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "2"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "8"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "2"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "8"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "3"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "17"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "3"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "17"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "3"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "17"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "4"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "18"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "4"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "18"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "4"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "18"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "1"], ["j", "4"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "18"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "4"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "18"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "3"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "9"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "3"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "9"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "3"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "9"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "4"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "10"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "4"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "10"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "4"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "10"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "2"], ["j", "4"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "10"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "10"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 5, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "1"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 6, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "1"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 4, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "1"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 3, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "1"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 9, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "1"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}, {"line": 12, "state": [["a", "15"], ["b", "18"], ["c", "26"], ["d", "1"], ["e", "36"], ["k", "18"], ["l", "[ 15 , 18 , 26 , 35 , 36 ]"], ["f", "1"], ["i", "3"], ["j", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3], [3, 5, 4, 5, 4, 5, 4, 3], [3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [3, 4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [3, 4, 5, 4, 3, 4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3]], "4": [[4, 3], [4, 5, 4, 3], [4, 5, 4, 5, 4, 3], [4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 3, 4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [4, 5, 4, 3, 4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3]], "5": [[5, 4, 3], [5, 4, 5, 4, 3], [5, 4, 5, 4, 5, 4, 3], [5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [5, 4, 3, 4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3]], "6": [[6, 5, 4, 3], [6, 5, 4, 5, 4, 3], [6, 5, 4, 5, 4, 5, 4, 3], [6, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [6, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [6, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [6, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [6, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3], [6, 5, 4, 3, 4, 5, 4, 5, 4, 3, 4, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3]], "7": [[7, 2]], "8": [[8]], "9": [[9, 7, 2]], "12": [[12]]}}
{"id": 3413, "code": "int A = 20, B = 15;\nint x;if (A <= 2 * B) {\nx = 0;}\nelse {x = A - 2 * B;}\nSystem.out.println(x);", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "15", ";", "<1>", "int", "x", ";", "if", "(", "A", "<=", "2", "*", "B", ")", "{", "<2>", "x", "=", "0", ";", "}", "<3>", "else", "{", "x", "=", "A", "-", "2", "*", "B", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "15"]]}, {"line": 1, "state": [["A", "20"], ["B", "15"]]}, {"line": 2, "state": [["A", "20"], ["B", "15"], ["x", "0"]]}, {"line": 4, "state": [["A", "20"], ["B", "15"], ["x", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "4": [[4, 2]]}}
{"id": 8646, "code": "int n = 4;\nint[] a1 = {1, 1, 1, 1};\nint[] a2 = {1, 1, 1, 1};\nint maxSum = Integer.MIN_VALUE;for (int i = 1; i <= n; i++) {int sum = 0;for (int j = 0; j < i; j++) {sum += a1[j];}for (int j = i - 1; j < n; j++) {sum += a2[j];}if (sum > maxSum) {maxSum = sum;}}System.out.println(maxSum);", "code_tokens": ["<0>", "int", "n", "=", "4", ";", "<1>", "int", "[", "]", "a1", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "1", ",", "1", ",", "1", "}", ";", "<3>", "int", "maxSum", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "n", ";", "i", "++", ")", "{", "int", "sum", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "i", ";", "j", "++", ")", "{", "sum", "+=", "a1", "[", "j", "]", ";", "}", "for", "(", "int", "j", "=", "i", "-", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sum", "+=", "a2", "[", "j", "]", ";", "}", "if", "(", "sum", ">", "maxSum", ")", "{", "maxSum", "=", "sum", ";", "}", "}", "System", ".", "out", ".", "println", "(", "maxSum", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"]]}, {"line": 1, "state": [["n", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["n", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["i", "1"]]}, {"line": 3, "state": [["i", "2"]]}, {"line": 3, "state": [["i", "3"]]}, {"line": 3, "state": [["i", "4"]]}, {"line": 3, "state": [["i", "4"]]}, {"line": 3, "state": [["n", "4"], ["a1", "[ 1 , 1 , 1 , 1 ]"], ["a2", "[ 1 , 1 , 1 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0], [3, 2, 1, 0]]}}
{"id": 5938, "code": "int N = 5;\nSystem.out.println(N / 2 + N % 2);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "N", "/", "2", "+", "N", "%", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2488, "code": "Set<Integer> n1 = new HashSet<>();n1.add(1);n1.add(2);n1.add(9);\nSet<Integer> n2 = new HashSet<>();n2.add(1);n2.add(7);n2.add(9);n2.add(4);\nString ans = n1.equals(n2) ? \"YES\" : \"NO\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "Set", "<", "Integer", ">", "n1", "=", "new", "HashSet", "<", ">", "(", ")", ";", "n1", ".", "add", "(", "1", ")", ";", "n1", ".", "add", "(", "2", ")", ";", "n1", ".", "add", "(", "9", ")", ";", "<1>", "Set", "<", "Integer", ">", "n2", "=", "new", "HashSet", "<", ">", "(", ")", ";", "n2", ".", "add", "(", "1", ")", ";", "n2", ".", "add", "(", "7", ")", ";", "n2", ".", "add", "(", "9", ")", ";", "n2", ".", "add", "(", "4", ")", ";", "<2>", "String", "ans", "=", "n1", ".", "equals", "(", "n2", ")", "?", "\"YES\"", ":", "\"NO\"", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n1", "{ 1 , 2 , 9 }"]]}, {"line": 1, "state": [["n1", "{ 1 , 2 , 9 }"], ["n2", "{ 1 , 4 , 9 , 7 }"]]}, {"line": 2, "state": [["n1", "{ 1 , 2 , 9 }"], ["n2", "{ 1 , 4 , 9 , 7 }"], ["ans", "NO"]]}, {"line": 3, "state": [["n1", "{ 1 , 2 , 9 }"], ["n2", "{ 1 , 4 , 9 , 7 }"], ["ans", "NO"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 6857, "code": "int h = 10, n = 3;\nint[] a = {4, 5, 6};\nint x = 0;for (int num : a) {x += num;}\nif ((h - x) <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "x", "=", "0", ";", "for", "(", "int", "num", ":", "a", ")", "{", "x", "+=", "num", ";", "}", "<3>", "if", "(", "(", "h", "-", "x", ")", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "10"], ["n", "3"]]}, {"line": 1, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"]]}, {"line": 3, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"]]}, {"line": 4, "state": [["h", "10"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]]}}
{"id": 13726, "code": "int H1 = 10, M1 = 0, H2 = 12, M2 = 0, K = 120;\nint t1 = 60 * H1 + M1;\nint t2 = 60 * H2 + M2;\nint t = t2 - K;\nint ans = t - t1;\nSystem.out.println(Math.max(0, ans));", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "12", ",", "M2", "=", "0", ",", "K", "=", "120", ";", "<1>", "int", "t1", "=", "60", "*", "H1", "+", "M1", ";", "<2>", "int", "t2", "=", "60", "*", "H2", "+", "M2", ";", "<3>", "int", "t", "=", "t2", "-", "K", ";", "<4>", "int", "ans", "=", "t", "-", "t1", ";", "<5>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "ans", ")", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["t1", "600"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["t1", "600"], ["t2", "720"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["t1", "600"], ["t2", "720"], ["t", "600"]]}, {"line": 4, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["t1", "600"], ["t2", "720"], ["t", "600"], ["ans", "0"]]}, {"line": 5, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["t1", "600"], ["t2", "720"], ["t", "600"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]], "5": [[5, 4, 3, 2, 0]]}}
{"id": 16978, "code": "boolean a = false, b = true;\nif (a ^ b) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}", "code_tokens": ["<0>", "boolean", "a", "=", "false", ",", "b", "=", "true", ";", "<1>", "if", "(", "a", "^", "b", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "False"], ["b", "True"]]}, {"line": 1, "state": [["a", "False"], ["b", "True"]]}, {"line": 2, "state": [["a", "False"], ["b", "True"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 5435, "code": "int n = 2;\nint a = (n + 2 - 1) / 2;\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "a", "=", "(", "n", "+", "2", "-", "1", ")", "/", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "1"]]}, {"line": 2, "state": [["n", "2"], ["a", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 16521, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nint m = Arrays.stream(a).max().getAsInt();\nint k = 0;\nfor (int x : a) {\nif (Math.abs((k * 2 - m)) > Math.abs((x * 2 - m))) {\nk = x;}}\nSystem.out.println(m + \" \" + k);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "int", "m", "=", "Arrays", ".", "stream", "(", "a", ")", ".", "max", "(", ")", ".", "getAsInt", "(", ")", ";", "<3>", "int", "k", "=", "0", ";", "<4>", "for", "(", "int", "x", ":", "a", ")", "{", "<5>", "if", "(", "Math", ".", "abs", "(", "(", "k", "*", "2", "-", "m", ")", ")", ">", "Math", ".", "abs", "(", "(", "x", "*", "2", "-", "m", ")", ")", ")", "{", "<6>", "k", "=", "x", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "m", "+", "\" \"", "+", "k", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "0"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "0"], ["x", "6"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "0"], ["x", "6"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "6"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "9"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "9"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "4"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "4"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "2"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "2"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "11"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "11"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "11"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"], ["k", "6"], ["x", "11"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5, 3, 2], [5, 7, 6, 5, 3, 2], [5, 6, 5, 7, 6, 5, 3, 2], [5, 6, 5, 6, 5, 7, 6, 5, 3, 2], [5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 3, 2], [5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 3, 2]], "6": [[6, 5, 3, 2], [6, 5, 7, 6, 5, 3, 2], [6, 5, 6, 5, 7, 6, 5, 3, 2], [6, 5, 6, 5, 6, 5, 7, 6, 5, 3, 2], [6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 3, 2]], "7": [[7, 6, 5, 3, 2]], "8": [[8, 6, 5, 6, 5, 6, 5, 6, 5, 7, 6, 5, 3, 2]]}}
{"id": 11271, "code": "String s = \"SUN\";\nint x = 7;\nif (s.equals(\"SUN\")) {\n} else if (s.equals(\"SAT\")) {\nx = x - 6;\n} else if (s.equals(\"FRI\")) {\nx = x - 5;\n} else if (s.equals(\"THU\")) {\nx = x - 4;\n} else if (s.equals(\"WED\")) {\nx = x - 3;\n} else if (s.equals(\"TUE\")) {\nx = x - 2;\n} else if (s.equals(\"MON\")) {\nx = x - 1;}\nSystem.out.println(x);", "code_tokens": ["<0>", "String", "s", "=", "\"SUN\"", ";", "<1>", "int", "x", "=", "7", ";", "<2>", "if", "(", "s", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<3>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<4>", "x", "=", "x", "-", "6", ";", "<5>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<6>", "x", "=", "x", "-", "5", ";", "<7>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<8>", "x", "=", "x", "-", "4", ";", "<9>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<10>", "x", "=", "x", "-", "3", ";", "<11>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<12>", "x", "=", "x", "-", "2", ";", "<13>", "}", "else", "if", "(", "s", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<14>", "x", "=", "x", "-", "1", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["s", "SUN"]]}, {"line": 1, "state": [["s", "SUN"], ["x", "7"]]}, {"line": 2, "state": [["s", "SUN"], ["x", "7"]]}, {"line": 3, "state": [["s", "SUN"], ["x", "7"]]}, {"line": 16, "state": [["s", "SUN"], ["x", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3]], "16": [[16, 1]]}}
{"id": 15139, "code": "int n = 1, p = 1;\nint[] A = {50};\nint even = 0;\nint odd = 0;\nfor (int a : A) {\nif (a % 2 == 0) {\neven += 1;}\nelse {\nodd += 1;}}\nint ans = 0;\nif (odd == 0) {\nif (p == 0) {\nans = (int) Math.pow(2, n);}\nelse {\nans = 0;}}\nelse {\nans = (int) Math.pow(2, n - 1);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "1", ",", "p", "=", "1", ";", "<1>", "int", "[", "]", "A", "=", "{", "50", "}", ";", "<2>", "int", "even", "=", "0", ";", "<3>", "int", "odd", "=", "0", ";", "<4>", "for", "(", "int", "a", ":", "A", ")", "{", "<5>", "if", "(", "a", "%", "2", "==", "0", ")", "{", "<6>", "even", "+=", "1", ";", "}", "<7>", "else", "{", "<8>", "odd", "+=", "1", ";", "}", "}", "<9>", "int", "ans", "=", "0", ";", "<10>", "if", "(", "odd", "==", "0", ")", "{", "<11>", "if", "(", "p", "==", "0", ")", "{", "<12>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", ")", ";", "}", "<13>", "else", "{", "<14>", "ans", "=", "0", ";", "}", "}", "<15>", "else", "{", "<16>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "n", "-", "1", ")", ";", "}", "<17>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "1"], ["p", "1"]]}, {"line": 1, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"]]}, {"line": 2, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "0"]]}, {"line": 3, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "0"], ["odd", "0"]]}, {"line": 4, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "0"], ["odd", "0"], ["a", "50"]]}, {"line": 5, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "0"], ["odd", "0"], ["a", "50"]]}, {"line": 6, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"]]}, {"line": 4, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"]]}, {"line": 9, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"], ["ans", "0"]]}, {"line": 10, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"], ["ans", "0"]]}, {"line": 11, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"], ["ans", "0"]]}, {"line": 14, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"], ["ans", "0"]]}, {"line": 17, "state": [["n", "1"], ["p", "1"], ["A", "[ 50 ]"], ["even", "1"], ["odd", "0"], ["a", "50"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1], [4, 5, 4, 1]], "5": [[5, 4, 1]], "6": [[6, 2]], "9": [[9]], "10": [[10, 3]], "11": [[11, 0]], "14": [[14, 9]], "17": [[17, 14, 9]]}}
{"id": 2557, "code": "Set<Integer> N = new HashSet<>();N.add(0);N.add(9);N.add(4);N.add(8);\nif (N.equals(new HashSet<>(Set.of(1, 9, 7, 4)))) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "Set", "<", "Integer", ">", "N", "=", "new", "HashSet", "<", ">", "(", ")", ";", "N", ".", "add", "(", "0", ")", ";", "N", ".", "add", "(", "9", ")", ";", "N", ".", "add", "(", "4", ")", ";", "N", ".", "add", "(", "8", ")", ";", "<1>", "if", "(", "N", ".", "equals", "(", "new", "HashSet", "<", ">", "(", "Set", ".", "of", "(", "1", ",", "9", ",", "7", ",", "4", ")", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "{ 0 , 9 , 4 , 8 }"]]}, {"line": 2, "state": [["N", "{ 0 , 9 , 4 , 8 }"]]}, {"line": 5, "state": [["N", "{ 0 , 9 , 4 , 8 }"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "5": [[5]]}}
{"id": 15880, "code": "int x = 12, y = 3, z = 1;\nx = x - z;\nint c = y + z;\nint n = 0;\nwhile (x > 0) {\nif (c <= x) {\nn = n + 1;\nx = x - c;}\nelse {\nbreak;}}\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "x", "=", "x", "-", "z", ";", "<2>", "int", "c", "=", "y", "+", "z", ";", "<3>", "int", "n", "=", "0", ";", "<4>", "while", "(", "x", ">", "0", ")", "{", "<5>", "if", "(", "c", "<=", "x", ")", "{", "<6>", "n", "=", "n", "+", "1", ";", "<7>", "x", "=", "x", "-", "c", ";", "}", "<8>", "else", "{", "<9>", "break", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "11"], ["y", "3"], ["z", "1"]]}, {"line": 2, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["c", "4"]]}, {"line": 3, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "0"]]}, {"line": 4, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "0"]]}, {"line": 5, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "0"]]}, {"line": 6, "state": [["x", "11"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "1"]]}, {"line": 7, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "1"]]}, {"line": 4, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "1"]]}, {"line": 5, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "1"]]}, {"line": 6, "state": [["x", "7"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "2"]]}, {"line": 7, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "2"]]}, {"line": 4, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "2"]]}, {"line": 5, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "2"]]}, {"line": 9, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "2"]]}, {"line": 10, "state": [["x", "3"], ["y", "3"], ["z", "1"], ["c", "4"], ["n", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]], "4": [[4, 1, 0], [4, 7, 5, 4, 1, 0], [4, 7, 5, 4, 7, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 7, 5, 4, 1, 0], [5, 4, 7, 5, 4, 7, 5, 4, 1, 0]], "6": [[6, 3], [6, 3]], "7": [[7, 5, 4, 1, 0], [7, 5, 4, 7, 5, 4, 1, 0]], "9": [[9]], "10": [[10, 6, 3]]}}
{"id": 15088, "code": "\n\n\nint N = 1, P = 1;\nint[] As = {50};\nint odd = 0;\nint even = 0;\nfor (int A : As) {\nif (A % 2 == 0) {\neven++;}\nelse {\nodd++;}}\nint even_combi = 0;\nfor (int i = 0; i <= even; i++) {\neven_combi += factorial(even) / (factorial(i) * factorial(even - i));}\nint odd_combi = 0;\nif (P == 0) {\nfor (int i = 0; i <= odd; i += 2) {\nodd_combi += factorial(odd) / (factorial(i) * factorial(odd - i));}}\nelse {\nfor (int i = 1; i <= odd; i += 2) {\nodd_combi += factorial(odd) / (factorial(i) * factorial(odd - i));}}\nSystem.out.println(odd_combi * even_combi);", "code_tokens": ["<3>", "int", "N", "=", "1", ",", "P", "=", "1", ";", "<4>", "int", "[", "]", "As", "=", "{", "50", "}", ";", "<5>", "int", "odd", "=", "0", ";", "<6>", "int", "even", "=", "0", ";", "<7>", "for", "(", "int", "A", ":", "As", ")", "{", "<8>", "if", "(", "A", "%", "2", "==", "0", ")", "{", "<9>", "even", "++", ";", "}", "<10>", "else", "{", "<11>", "odd", "++", ";", "}", "}", "<12>", "int", "even_combi", "=", "0", ";", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "even", ";", "i", "++", ")", "{", "<14>", "even_combi", "+=", "factorial", "(", "even", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "even", "-", "i", ")", ")", ";", "}", "<15>", "int", "odd_combi", "=", "0", ";", "<16>", "if", "(", "P", "==", "0", ")", "{", "<17>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "odd", ";", "i", "+=", "2", ")", "{", "<18>", "odd_combi", "+=", "factorial", "(", "odd", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "odd", "-", "i", ")", ")", ";", "}", "}", "<19>", "else", "{", "<20>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "odd", ";", "i", "+=", "2", ")", "{", "<21>", "odd_combi", "+=", "factorial", "(", "odd", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "odd", "-", "i", ")", ")", ";", "}", "}", "<22>", "System", ".", "out", ".", "println", "(", "odd_combi", "*", "even_combi", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["N", "1"], ["P", "1"]]}, {"line": 4, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"]]}, {"line": 5, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"]]}, {"line": 6, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "0"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "0"], ["A", "50"]]}, {"line": 8, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "0"], ["A", "50"]]}, {"line": 9, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"]]}, {"line": 7, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"]]}, {"line": 12, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "0"]]}, {"line": 13, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "0"], ["i", "0"]]}, {"line": 14, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "1"], ["i", "0"]]}, {"line": 13, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "1"], ["i", "1"]]}, {"line": 14, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "2"], ["i", "1"]]}, {"line": 13, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "2"], ["i", "1"]]}, {"line": 15, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "2"], ["i", "1"], ["odd_combi", "0"]]}, {"line": 16, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "2"], ["i", "1"], ["odd_combi", "0"]]}, {"line": 20, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "2"], ["i", "1"], ["odd_combi", "0"]]}, {"line": 22, "state": [["N", "1"], ["P", "1"], ["As", "[ 50 ]"], ["odd", "0"], ["even", "1"], ["A", "50"], ["even_combi", "2"], ["i", "1"], ["odd_combi", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7, 4], [7, 8, 7, 4]], "8": [[8, 7, 4]], "9": [[9, 6]], "12": [[12]], "13": [[13, 9, 6], [13, 14, 13, 9, 6], [13, 14, 13, 14, 13, 9, 6]], "14": [[14, 13, 9, 6], [14, 13, 14, 13, 9, 6]], "15": [[15]], "16": [[16, 3]], "20": [[20, 13, 14, 13, 14, 13, 9, 6]], "22": [[22, 15, 14, 13, 14, 13, 9, 6]]}}
{"id": 315, "code": "char[] s = {'x', 'y', 'z'};\nint k = 4;\nint z = 'z';\nint a = 'a';\nfor (int i = 0; i < s.length - 1; i++) {\nif (s[i] == 'a') {\ncontinue;}\nif (z - s[i] + 1 <= k) {\nk -= z - s[i] + 1;\ns[i] = 'a';}}\nif (k > 0) {\nk = k % 26;\nint x = z - s[s.length - 1] + 1;\nif (k >= x) {\nk -= z - s[s.length - 1] + 1;\ns[s.length - 1] = (char) (a + k);}\nelse {\ns[s.length - 1] = (char) (s[s.length - 1] + k);}}\nSystem.out.println(String.valueOf(s));", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "int", "k", "=", "4", ";", "<2>", "int", "z", "=", "'z'", ";", "<3>", "int", "a", "=", "'a'", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "-", "1", ";", "i", "++", ")", "{", "<5>", "if", "(", "s", "[", "i", "]", "==", "'a'", ")", "{", "<6>", "continue", ";", "}", "<7>", "if", "(", "z", "-", "s", "[", "i", "]", "+", "1", "<=", "k", ")", "{", "<8>", "k", "-=", "z", "-", "s", "[", "i", "]", "+", "1", ";", "<9>", "s", "[", "i", "]", "=", "'a'", ";", "}", "}", "<10>", "if", "(", "k", ">", "0", ")", "{", "<11>", "k", "=", "k", "%", "26", ";", "<12>", "int", "x", "=", "z", "-", "s", "[", "s", ".", "length", "-", "1", "]", "+", "1", ";", "<13>", "if", "(", "k", ">=", "x", ")", "{", "<14>", "k", "-=", "z", "-", "s", "[", "s", ".", "length", "-", "1", "]", "+", "1", ";", "<15>", "s", "[", "s", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "a", "+", "k", ")", ";", "}", "<16>", "else", "{", "<17>", "s", "[", "s", ".", "length", "-", "1", "]", "=", "(", "char", ")", "(", "s", "[", "s", ".", "length", "-", "1", "]", "+", "k", ")", ";", "}", "}", "<18>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["k", "4"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["z", "122"]]}, {"line": 3, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["z", "122"], ["a", "97"]]}, {"line": 4, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["z", "122"], ["a", "97"], ["i", "0"]]}, {"line": 5, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["z", "122"], ["a", "97"], ["i", "0"]]}, {"line": 7, "state": [["s", "[ x , y , z ]"], ["k", "4"], ["z", "122"], ["a", "97"], ["i", "0"]]}, {"line": 8, "state": [["s", "[ x , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "0"]]}, {"line": 9, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "0"]]}, {"line": 4, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"]]}, {"line": 5, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"]]}, {"line": 7, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"]]}, {"line": 4, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"]]}, {"line": 10, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"]]}, {"line": 11, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"]]}, {"line": 12, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"], ["x", "1"]]}, {"line": 13, "state": [["s", "[ a , y , z ]"], ["k", "1"], ["z", "122"], ["a", "97"], ["i", "1"], ["x", "1"]]}, {"line": 14, "state": [["s", "[ a , y , z ]"], ["k", "0"], ["z", "122"], ["a", "97"], ["i", "1"], ["x", "1"]]}, {"line": 15, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["z", "122"], ["a", "97"], ["i", "1"], ["x", "1"]]}, {"line": 18, "state": [["s", "[ a , y , a ]"], ["k", "0"], ["z", "122"], ["a", "97"], ["i", "1"], ["x", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 0], [4, 9, 8, 7, 5, 4, 0], [4, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 9, 8, 7, 5, 4, 0]], "7": [[7, 5, 4, 0], [7, 5, 4, 9, 8, 7, 5, 4, 0]], "8": [[8, 7, 5, 4, 0]], "9": [[9, 8, 7, 5, 4, 0]], "10": [[10, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "11": [[11, 10, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "12": [[12, 4, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "13": [[13, 12, 4, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "14": [[14, 13, 12, 4, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "15": [[15, 14, 13, 12, 4, 7, 5, 4, 9, 8, 7, 5, 4, 0]], "18": [[18, 15, 14, 13, 12, 4, 7, 5, 4, 9, 8, 7, 5, 4, 0]]}}
{"id": 11562, "code": "String S = \"SUN\";\njava.util.HashMap<String, Integer> DAYS_TO_NUM = new java.util.HashMap<>();DAYS_TO_NUM.put(\"SUN\", 0);DAYS_TO_NUM.put(\"MON\", 1);DAYS_TO_NUM.put(\"TUE\", 2);DAYS_TO_NUM.put(\"WED\", 3);DAYS_TO_NUM.put(\"THU\", 4);DAYS_TO_NUM.put(\"FRI\", 5);DAYS_TO_NUM.put(\"SAT\", 6);\nSystem.out.println(7 - DAYS_TO_NUM.get(S));", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "java", ".", "util", ".", "HashMap", "<", "String", ",", "Integer", ">", "DAYS_TO_NUM", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"SUN\"", ",", "0", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"MON\"", ",", "1", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"TUE\"", ",", "2", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"WED\"", ",", "3", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"THU\"", ",", "4", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"FRI\"", ",", "5", ")", ";", "DAYS_TO_NUM", ".", "put", "(", "\"SAT\"", ",", "6", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "7", "-", "DAYS_TO_NUM", ".", "get", "(", "S", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"], ["DAYS_TO_NUM", "{ SUN"]]}, {"line": 2, "state": [["S", "SUN"], ["DAYS_TO_NUM", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 5133, "code": "char[] s = {'x', 'y', 'z'};\nString y = String.valueOf(s.length - 2);\nSystem.out.println(s[0] + y + s[s.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "String", "y", "=", "String", ".", "valueOf", "(", "s", ".", "length", "-", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", "[", "0", "]", "+", "y", "+", "s", "[", "s", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["y", "1"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["y", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11054, "code": "String s = \"akasaka\";\nint n = s.length() / 2;\nif (s.substring(0, n).equals(s.substring(n + 1))) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "s", "=", "\"akasaka\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", "/", "2", ";", "<2>", "if", "(", "s", ".", "substring", "(", "0", ",", "n", ")", ".", "equals", "(", "s", ".", "substring", "(", "n", "+", "1", ")", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["s", "akasaka"]]}, {"line": 1, "state": [["s", "akasaka"], ["n", "3"]]}, {"line": 2, "state": [["s", "akasaka"], ["n", "3"]]}, {"line": 3, "state": [["s", "akasaka"], ["n", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 9260, "code": "String a = \"2017\"; String b = \"01\"; String c = \"07\";\na = \"2018\";\nSystem.out.println(a + '/' + b + '/' + c);", "code_tokens": ["<0>", "String", "a", "=", "\"2017\"", ";", "String", "b", "=", "\"01\"", ";", "String", "c", "=", "\"07\"", ";", "<1>", "a", "=", "\"2018\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", "+", "'/'", "+", "b", "+", "'/'", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["a", "2017"], ["b", "01"], ["c", "07"]]}, {"line": 1, "state": [["a", "2018"], ["b", "01"], ["c", "07"]]}, {"line": 2, "state": [["a", "2018"], ["b", "01"], ["c", "07"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 12719, "code": "String X = \"6\";\nSystem.out.println(X.contains(\"7\") || X.contains(\"5\") || X.contains(\"3\") ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "String", "X", "=", "\"6\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "X", ".", "contains", "(", "\"7\"", ")", "||", "X", ".", "contains", "(", "\"5\"", ")", "||", "X", ".", "contains", "(", "\"3\"", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["X", "6"]]}, {"line": 1, "state": [["X", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7624, "code": "int H = 211, N = 5;\nint[] A = {31, 41, 59, 26, 53};\nif (H <= sum(A)) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "H", "<=", "sum", "(", "A", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"]]}, {"line": 5, "state": [["H", "211"], ["N", "5"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 7684, "code": "int h = 211, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nint b = 0;for (int num : a) {b += num;}\nif (b >= h) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "b", "=", "0", ";", "for", "(", "int", "num", ":", "a", ")", "{", "b", "+=", "num", ";", "}", "<3>", "if", "(", "b", ">=", "h", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}, {"line": 1, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["b", "210"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["b", "210"]]}, {"line": 6, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"], ["b", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 1561, "code": "int N = 111;\nfor (int i = 0; i < 10; i++) {\nif (Integer.parseInt(String.valueOf(i) + String.valueOf(i) + String.valueOf(i)) < N && N <= Integer.parseInt(String.valueOf(i + 1) + String.valueOf(i + 1) + String.valueOf(i + 1))) {\nbreak;}}\nSystem.out.println(String.valueOf(i + 1) + String.valueOf(i + 1) + String.valueOf(i + 1));", "code_tokens": ["<0>", "int", "N", "=", "111", ";", "<1>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "10", ";", "i", "++", ")", "{", "<2>", "if", "(", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "i", ")", "+", "String", ".", "valueOf", "(", "i", ")", "+", "String", ".", "valueOf", "(", "i", ")", ")", "<", "N", "&&", "N", "<=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "i", "+", "1", ")", "+", "String", ".", "valueOf", "(", "i", "+", "1", ")", "+", "String", ".", "valueOf", "(", "i", "+", "1", ")", ")", ")", "{", "<3>", "break", ";", "}", "}", "<4>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "i", "+", "1", ")", "+", "String", ".", "valueOf", "(", "i", "+", "1", ")", "+", "String", ".", "valueOf", "(", "i", "+", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "111"]]}, {"line": 1, "state": [["N", "111"], ["i", "0"]]}, {"line": 2, "state": [["N", "111"], ["i", "0"]]}, {"line": 3, "state": [["N", "111"], ["i", "0"]]}, {"line": 4, "state": [["N", "111"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 2, 1]]}}
{"id": 12727, "code": "int N = 6;\nint[] gre = {3, 5, 7};\nboolean found = false;for (int i = 0; i < gre.length; i++) {if (N == gre[i]) {found = true;break;}}if (found) {\nSystem.out.println(\"YES\");} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "gre", "=", "{", "3", ",", "5", ",", "7", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "gre", ".", "length", ";", "i", "++", ")", "{", "if", "(", "N", "==", "gre", "[", "i", "]", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "6"]]}, {"line": 1, "state": [["N", "6"], ["gre", "[ 3 , 5 , 7 ]"]]}, {"line": 2, "state": [["N", "6"], ["gre", "[ 3 , 5 , 7 ]"]]}, {"line": 5, "state": [["N", "6"], ["gre", "[ 3 , 5 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 8411, "code": "int N = 7;\nint[] A1 = {3, 3, 4, 5, 4, 5, 3};\nint[] A2 = {5, 3, 4, 4, 2, 3, 2};\nint[] csA1 = new int[N];csA1[0] = A1[0];for (int i = 1; i < N; i++) {csA1[i] = csA1[i - 1] + A1[i];}\nint[] csA2 = new int[N];csA2[0] = A2[0];for (int i = 1; i < N; i++) {csA2[i] = csA2[i - 1] + A2[i];}\nint ans = A1[0] + csA2[N - 1];\nfor (int i = 0; i < N - 1; i++) {\nint tmp = csA1[i] + (csA2[N - 1] - csA2[i]) + A2[i];\nans = Math.max(ans, tmp);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A1", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "[", "]", "csA1", "=", "new", "int", "[", "N", "]", ";", "csA1", "[", "0", "]", "=", "A1", "[", "0", "]", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "csA1", "[", "i", "]", "=", "csA1", "[", "i", "-", "1", "]", "+", "A1", "[", "i", "]", ";", "}", "<4>", "int", "[", "]", "csA2", "=", "new", "int", "[", "N", "]", ";", "csA2", "[", "0", "]", "=", "A2", "[", "0", "]", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "N", ";", "i", "++", ")", "{", "csA2", "[", "i", "]", "=", "csA2", "[", "i", "-", "1", "]", "+", "A2", "[", "i", "]", ";", "}", "<5>", "int", "ans", "=", "A1", "[", "0", "]", "+", "csA2", "[", "N", "-", "1", "]", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", "-", "1", ";", "i", "++", ")", "{", "<7>", "int", "tmp", "=", "csA1", "[", "i", "]", "+", "(", "csA2", "[", "N", "-", "1", "]", "-", "csA2", "[", "i", "]", ")", "+", "A2", "[", "i", "]", ";", "<8>", "ans", "=", "Math", ".", "max", "(", "ans", ",", "tmp", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "7"]]}, {"line": 2, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 3, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "0"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "0"], ["tmp", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "0"], ["tmp", "26"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "1"], ["tmp", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "1"], ["tmp", "24"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "1"], ["tmp", "24"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "2"], ["tmp", "24"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "2"], ["tmp", "25"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "2"], ["tmp", "25"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "3"], ["tmp", "25"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "3"], ["tmp", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "3"], ["tmp", "26"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "4"], ["tmp", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "4"], ["tmp", "26"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "4"], ["tmp", "26"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "5"], ["tmp", "26"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "26"], ["i", "5"], ["tmp", "29"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "29"], ["i", "5"], ["tmp", "29"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "29"], ["i", "5"], ["tmp", "29"]]}, {"line": 10, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["csA1", "[ 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["csA2", "[ 5 , 8 , 12 , 16 , 18 , 21 , 23 ]"], ["ans", "29"], ["i", "5"], ["tmp", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 2]], "5": [[5, 4, 2]], "6": [[6, 5, 4, 2]], "7": [[7, 1], [7, 8, 7, 1], [7, 8, 7, 8, 7, 1], [7, 8, 7, 8, 7, 8, 7, 1], [7, 8, 7, 8, 7, 8, 7, 8, 7, 1], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1]], "8": [[8, 7, 1], [8, 7, 8, 7, 1], [8, 7, 8, 7, 8, 7, 1], [8, 7, 8, 7, 8, 7, 8, 7, 1], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1]], "9": [[9, 8, 7, 1], [9, 8, 7, 8, 7, 1], [9, 8, 7, 8, 7, 8, 7, 1], [9, 8, 7, 8, 7, 8, 7, 8, 7, 1], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1], [9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1]], "10": [[10, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1]]}}
{"id": 15092, "code": "int N = 3, P = 0;\nint[] A = {1, 1, 1};\nint g = 0, k = 0;\nfor (int i : A) {\nif (i % 2 != 0) {\nk += 1;}\nelse {\ng += 1;}}\nint a = 0;\nif (P != 0) {\nfor (int i = 1; i <= k; i += 2) {\na += factorial(k) / (factorial(i) * factorial(k - i));}}\nelse {\nfor (int i = 0; i <= k; i += 2) {\na += factorial(k) / (factorial(i) * factorial(k - i));}}\nSystem.out.println(a * Math.pow(2, g));", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "g", "=", "0", ",", "k", "=", "0", ";", "<3>", "for", "(", "int", "i", ":", "A", ")", "{", "<4>", "if", "(", "i", "%", "2", "!=", "0", ")", "{", "<5>", "k", "+=", "1", ";", "}", "<6>", "else", "{", "<7>", "g", "+=", "1", ";", "}", "}", "<8>", "int", "a", "=", "0", ";", "<9>", "if", "(", "P", "!=", "0", ")", "{", "<10>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "k", ";", "i", "+=", "2", ")", "{", "<11>", "a", "+=", "factorial", "(", "k", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "k", "-", "i", ")", ")", ";", "}", "}", "<12>", "else", "{", "<13>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "k", ";", "i", "+=", "2", ")", "{", "<14>", "a", "+=", "factorial", "(", "k", ")", "/", "(", "factorial", "(", "i", ")", "*", "factorial", "(", "k", "-", "i", ")", ")", ";", "}", "}", "<15>", "System", ".", "out", ".", "println", "(", "a", "*", "Math", ".", "pow", "(", "2", ",", "g", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"], ["P", "0"]]}, {"line": 1, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "0"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "0"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "1"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "1"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "2"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "2"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "2"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "1"]]}, {"line": 8, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "1"], ["a", "0"]]}, {"line": 9, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "1"], ["a", "0"]]}, {"line": 10, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "1"], ["a", "0"]]}, {"line": 14, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "0"], ["a", "0"]]}, {"line": 15, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "0"], ["a", "1"]]}, {"line": 14, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "2"], ["a", "1"]]}, {"line": 15, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "2"], ["a", "4"]]}, {"line": 14, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "2"], ["a", "4"]]}, {"line": 16, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["g", "0"], ["k", "3"], ["i", "2"], ["a", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1], [3, 4, 3, 1], [3, 4, 3, 4, 3, 1], [3, 4, 3, 4, 3, 4, 3, 1]], "4": [[4, 3, 1], [4, 3, 4, 3, 1], [4, 3, 4, 3, 4, 3, 1]], "5": [[5, 2], [5, 2], [5, 2]], "8": [[8]], "9": [[9]], "10": [[10, 0]], "14": [[14, 3, 4, 3, 4, 3, 4, 3, 1], [14, 15, 14, 3, 4, 3, 4, 3, 4, 3, 1], [14, 15, 14, 15, 14, 3, 4, 3, 4, 3, 4, 3, 1]], "15": [[15, 14, 3, 4, 3, 4, 3, 4, 3, 1], [15, 14, 15, 14, 3, 4, 3, 4, 3, 4, 3, 1]], "16": [[16, 15, 14, 15, 14, 3, 4, 3, 4, 3, 4, 3, 1]]}}
{"id": 18041, "code": "int s = 1700;\nint yy = s / 100;\nint mm = s % 100;\nif (1 <= yy && yy <= 12) {\nif (1 <= mm && mm <= 12) {\nSystem.out.println(\"AMBIGUOUS\");}\nelse {\nSystem.out.println(\"MMYY\");}}\nelse {\nif (1 <= mm && mm <= 12) {\nSystem.out.println(\"YYMM\");}\nelse {\nSystem.out.println(\"NA\");}}", "code_tokens": ["<0>", "int", "s", "=", "1700", ";", "<1>", "int", "yy", "=", "s", "/", "100", ";", "<2>", "int", "mm", "=", "s", "%", "100", ";", "<3>", "if", "(", "1", "<=", "yy", "&&", "yy", "<=", "12", ")", "{", "<4>", "if", "(", "1", "<=", "mm", "&&", "mm", "<=", "12", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"AMBIGUOUS\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"MMYY\"", ")", ";", "}", "}", "<8>", "else", "{", "<9>", "if", "(", "1", "<=", "mm", "&&", "mm", "<=", "12", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"YYMM\"", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"NA\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["s", "1700"]]}, {"line": 1, "state": [["s", "1700"], ["yy", "17"]]}, {"line": 2, "state": [["s", "1700"], ["yy", "17"], ["mm", "0"]]}, {"line": 3, "state": [["s", "1700"], ["yy", "17"], ["mm", "0"]]}, {"line": 9, "state": [["s", "1700"], ["yy", "17"], ["mm", "0"]]}, {"line": 12, "state": [["s", "1700"], ["yy", "17"], ["mm", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "9": [[9, 2, 1, 0]], "12": [[12]]}}
{"id": 3455, "code": "int a = 20, b = 15;\nint temp = a - 2 * b;\nint ans = (temp > 0) ? temp : 0;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "int", "temp", "=", "a", "-", "2", "*", "b", ";", "<2>", "int", "ans", "=", "(", "temp", ">", "0", ")", "?", "temp", ":", "0", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"], ["temp", "-10"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"], ["temp", "-10"], ["ans", "0"]]}, {"line": 3, "state": [["a", "20"], ["b", "15"], ["temp", "-10"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13466, "code": "String S = \"happy,newyear,enjoy\";\nString x = S.substring(0, 5) + \" \" + S.substring(6, 13) + \" \" + S.substring(14);\nSystem.out.println(x);", "code_tokens": ["<0>", "String", "S", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "String", "x", "=", "S", ".", "substring", "(", "0", ",", "5", ")", "+", "\" \"", "+", "S", ".", "substring", "(", "6", ",", "13", ")", "+", "\" \"", "+", "S", ".", "substring", "(", "14", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "x", ")", ";"], "trace": [{"line": 0, "state": [["S", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["S", "happy , newyear , enjoy"], ["x", "happy newyear enjoy"]]}, {"line": 2, "state": [["S", "happy , newyear , enjoy"], ["x", "happy newyear enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3314, "code": "int a = 20, b = 15;\nSystem.out.println((a - 2 * b >= 0) ? (a - 2 * b) : 0);", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "a", "-", "2", "*", "b", ">=", "0", ")", "?", "(", "a", "-", "2", "*", "b", ")", ":", "0", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "20"], ["b", "15"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 2453, "code": "int x = 1, y = 1;\nint a = x * (x - 1) / 2;\nint b = y * (y - 1) / 2;\nSystem.out.println(a + b);", "code_tokens": ["<0>", "int", "x", "=", "1", ",", "y", "=", "1", ";", "<1>", "int", "a", "=", "x", "*", "(", "x", "-", "1", ")", "/", "2", ";", "<2>", "int", "b", "=", "y", "*", "(", "y", "-", "1", ")", "/", "2", ";", "<3>", "System", ".", "out", ".", "println", "(", "a", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["x", "1"], ["y", "1"]]}, {"line": 1, "state": [["x", "1"], ["y", "1"], ["a", "0"]]}, {"line": 2, "state": [["x", "1"], ["y", "1"], ["a", "0"], ["b", "0"]]}, {"line": 3, "state": [["x", "1"], ["y", "1"], ["a", "0"], ["b", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]]}}
{"id": 1201, "code": "int N = 750;\nint a = Integer.parseInt(String.valueOf(String.valueOf(N).charAt(0)).repeat(3));\nif (N == a) {\nSystem.out.println(N);\n} else if (N < a) {\nSystem.out.println(a);\n} else {\nSystem.out.println(a + 111);}", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "int", "a", "=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "String", ".", "valueOf", "(", "N", ")", ".", "charAt", "(", "0", ")", ")", ".", "repeat", "(", "3", ")", ")", ";", "<2>", "if", "(", "N", "==", "a", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "N", ")", ";", "<4>", "}", "else", "if", "(", "N", "<", "a", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "a", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "a", "+", "111", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": [["N", "750"], ["a", "777"]]}, {"line": 2, "state": [["N", "750"], ["a", "777"]]}, {"line": 4, "state": [["N", "750"], ["a", "777"]]}, {"line": 5, "state": [["N", "750"], ["a", "777"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]], "5": [[5, 4, 2, 1, 0]]}}
{"id": 16642, "code": "String A = \"D\";String B = \"H\";\nif (A.equals(B)) {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "A", "=", "\"D\"", ";", "String", "B", "=", "\"H\"", ";", "<1>", "if", "(", "A", ".", "equals", "(", "B", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "D"], ["B", "H"]]}, {"line": 1, "state": [["A", "D"], ["B", "H"]]}, {"line": 4, "state": [["A", "D"], ["B", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 2076, "code": "int N = 10, A = 7, B = 5;\nint[] check = new int[N];\nfor (int i = 0; i < A; i++) {\ncheck[i] += 1;}\nfor (int i = 0; i < B; i++) {\ncheck[N - (i + 1)] += 1;}\nint cnt = 0;\nfor (int c : check) {\nif (c == 2) {\ncnt += 1;}}\nSystem.out.println(Math.min(A, B) + \" \" + cnt);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "[", "]", "check", "=", "new", "int", "[", "N", "]", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "A", ";", "i", "++", ")", "{", "<3>", "check", "[", "i", "]", "+=", "1", ";", "}", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "B", ";", "i", "++", ")", "{", "<5>", "check", "[", "N", "-", "(", "i", "+", "1", ")", "]", "+=", "1", ";", "}", "<6>", "int", "cnt", "=", "0", ";", "<7>", "for", "(", "int", "c", ":", "check", ")", "{", "<8>", "if", "(", "c", "==", "2", ")", "{", "<9>", "cnt", "+=", "1", ";", "}", "}", "<10>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "A", ",", "B", ")", "+", "\" \"", "+", "cnt", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": []}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "1"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "1"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "2"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "3"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "3"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "4"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "4"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "5"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 ]"], ["i", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 ]"], ["i", "6"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 ]"], ["i", "6"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 ]"], ["i", "6"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 ]"], ["i", "0"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 ]"], ["i", "1"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ]"], ["i", "2"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 1 , 1 , 1 ]"], ["i", "3"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 1 , 1 , 1 ]"], ["i", "4"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"]]}, {"line": 6, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "2"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "0"], ["c", "2"]]}, {"line": 9, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "1"], ["c", "2"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "1"], ["c", "2"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "1"], ["c", "2"]]}, {"line": 9, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "2"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 8, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 7, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}, {"line": 10, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["check", "[ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 1 , 1 , 1 ]"], ["i", "4"], ["cnt", "2"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], "2": [[2, 1, 0], [2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "4": [[4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "5": [[5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "6": [[6]], "7": [[7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "8": [[8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0], [8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0]], "9": [[9, 6], [9, 6]], "10": [[10, 9, 6]]}}
{"id": 9728, "code": "int n = 6;\nString s = \")))())\";\nString ns = s;\nwhile (ns.contains(\"()\")) {\nns = ns.replace(\"()\", \"\");}\nint l = ns.length() - ns.replace(\")\", \"\").length();\nint r = ns.length() - ns.replace(\"(\", \"\").length();\nSystem.out.println(\"(\".repeat(l) + s + \")\".repeat(r));", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "String", "s", "=", "\")))())\"", ";", "<2>", "String", "ns", "=", "s", ";", "<3>", "while", "(", "ns", ".", "contains", "(", "\"()\"", ")", ")", "{", "<4>", "ns", "=", "ns", ".", "replace", "(", "\"()\"", ",", "\"\"", ")", ";", "}", "<5>", "int", "l", "=", "ns", ".", "length", "(", ")", "-", "ns", ".", "replace", "(", "\")\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<6>", "int", "r", "=", "ns", ".", "length", "(", ")", "-", "ns", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", ".", "length", "(", ")", ";", "<7>", "System", ".", "out", ".", "println", "(", "\"(\"", ".", "repeat", "(", "l", ")", "+", "s", "+", "\")\"", ".", "repeat", "(", "r", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["s", ")))())"]]}, {"line": 2, "state": [["n", "6"], ["s", ")))())"], ["ns", ")))())"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["ns", ")))())"]]}, {"line": 4, "state": [["n", "6"], ["s", ")))())"], ["ns", "))))"]]}, {"line": 3, "state": [["n", "6"], ["s", ")))())"], ["ns", "))))"]]}, {"line": 5, "state": [["n", "6"], ["s", ")))())"], ["ns", "))))"], ["l", "4"]]}, {"line": 6, "state": [["n", "6"], ["s", ")))())"], ["ns", "))))"], ["l", "4"], ["r", "0"]]}, {"line": 7, "state": [["n", "6"], ["s", ")))())"], ["ns", "))))"], ["l", "4"], ["r", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1], [3, 4, 3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 3, 4, 3, 2, 1]], "6": [[6, 5, 3, 4, 3, 2, 1]], "7": [[7, 6, 5, 3, 4, 3, 2, 1]]}}
{"id": 10088, "code": "Scanner scanner = new Scanner(System.in);\nint N = 3;\nString S = \"())\";\nint open = 0;\nint a = 0;\nfor (int i = 0; i < S.length(); i++) {\nif (S.charAt(i) == '(') {\nopen += 1;}\nelse {\nif (open == 0) {\na += 1;}\nelse {\nopen -= 1;}}}\nStringBuilder result = new StringBuilder();for (int j = 0; j < a; j++) {result.append('(');}result.append(S);for (int j = 0; j < open; j++) {result.append(')');}System.out.println(result.toString());", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "3", ";", "<2>", "String", "S", "=", "\"())\"", ";", "<3>", "int", "open", "=", "0", ";", "<4>", "int", "a", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<7>", "open", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "if", "(", "open", "==", "0", ")", "{", "<10>", "a", "+=", "1", ";", "}", "<11>", "else", "{", "<12>", "open", "-=", "1", ";", "}", "}", "}", "<13>", "StringBuilder", "result", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "a", ";", "j", "++", ")", "{", "result", ".", "append", "(", "'('", ")", ";", "}", "result", ".", "append", "(", "S", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "open", ";", "j", "++", ")", "{", "result", ".", "append", "(", "')'", ")", ";", "}", "System", ".", "out", ".", "println", "(", "result", ".", "toString", "(", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "3"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["open", "0"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"], ["i", "0"]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["open", "1"], ["a", "0"], ["i", "0"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["open", "1"], ["a", "0"], ["i", "1"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["open", "1"], ["a", "0"], ["i", "1"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["open", "1"], ["a", "0"], ["i", "1"]]}, {"line": 13, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"], ["i", "1"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"], ["i", "2"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"], ["i", "2"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "0"], ["i", "2"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "1"], ["i", "2"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "1"], ["i", "2"]]}, {"line": 14, "state": [["N", "3"], ["S", "())"], ["open", "0"], ["a", "1"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 7, 6, 3], [6, 7, 6, 7, 6, 3], [6, 7, 6, 7, 6, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 7, 6, 3], [7, 6, 7, 6, 7, 6, 3]], "8": [[8, 4]], "10": [[10, 8, 4], [10, 13, 10, 8, 4]], "11": [[11, 5]], "13": [[13, 10, 8, 4]], "14": [[14, 6, 7, 6, 7, 6, 7, 6, 3]]}}
{"id": 3040, "code": "String s = \"35753\";double m = Double.POSITIVE_INFINITY;\nfor (int i = 0; i < s.length() - 2; i++) {m = Math.min(m, Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753));}\nSystem.out.println(m);", "code_tokens": ["<0>", "String", "s", "=", "\"35753\"", ";", "double", "m", "=", "Double", ".", "POSITIVE_INFINITY", ";", "<1>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "m", "=", "Math", ".", "min", "(", "m", ",", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ")", ";", "}", "<2>", "System", ".", "out", ".", "println", "(", "m", ")", ";"], "trace": [{"line": 0, "state": [["s", "35753"], ["m", "inf"]]}, {"line": 1, "state": [["s", "35753"], ["m", "396"], ["i", "0"]]}, {"line": 1, "state": [["s", "35753"], ["m", "178"], ["i", "1"]]}, {"line": 1, "state": [["s", "35753"], ["m", "0"], ["i", "2"]]}, {"line": 1, "state": [["s", "35753"], ["m", "0"], ["i", "2"]]}, {"line": 2, "state": [["s", "35753"], ["m", "0"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0]], "2": [[2, 1, 0]]}}
{"id": 4571, "code": "String s = \"smiles\";\nString n = String.valueOf(s.length() - 2);\nString p = s.charAt(0) + n + s.charAt(s.length() - 1);\nSystem.out.println(p);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "String", "n", "=", "String", ".", "valueOf", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "<2>", "String", "p", "=", "s", ".", "charAt", "(", "0", ")", "+", "n", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "p", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["n", "4"]]}, {"line": 2, "state": [["s", "smiles"], ["n", "4"], ["p", "s4s"]]}, {"line": 3, "state": [["s", "smiles"], ["n", "4"], ["p", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 7274, "code": "int h = 211, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nif (h <= sum(a)) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "if", "(", "h", "<=", "sum", "(", "a", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}, {"line": 1, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 5, "state": [["h", "211"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 7961, "code": "int n = 4, k = 3;\nint[] ar = {2, 3, 1, 4};\nint pos = indexOf(ar, 1);\nint a = n - 1 - pos;\nint b = pos;\nint a1 = a / (k - 1);\nint a2 = b / (k - 1);\nint c = (int) Math.ceil((n - 1 - ((a1 + a2) * (k - 1))) / (double)(k - 1));\nSystem.out.println(a1 + a2 + c);", "code_tokens": ["<0>", "int", "n", "=", "4", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "ar", "=", "{", "2", ",", "3", ",", "1", ",", "4", "}", ";", "<2>", "int", "pos", "=", "indexOf", "(", "ar", ",", "1", ")", ";", "<3>", "int", "a", "=", "n", "-", "1", "-", "pos", ";", "<4>", "int", "b", "=", "pos", ";", "<5>", "int", "a1", "=", "a", "/", "(", "k", "-", "1", ")", ";", "<6>", "int", "a2", "=", "b", "/", "(", "k", "-", "1", ")", ";", "<7>", "int", "c", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "n", "-", "1", "-", "(", "(", "a1", "+", "a2", ")", "*", "(", "k", "-", "1", ")", ")", ")", "/", "(", "double", ")", "(", "k", "-", "1", ")", ")", ";", "<8>", "System", ".", "out", ".", "println", "(", "a1", "+", "a2", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["n", "4"], ["k", "3"]]}, {"line": 1, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 2, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"]]}, {"line": 3, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"]]}, {"line": 4, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"], ["a", "1"]]}, {"line": 5, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"], ["a", "1"], ["b", "2"]]}, {"line": 6, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"], ["a", "1"], ["b", "2"], ["a1", "0"]]}, {"line": 7, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"], ["a", "1"], ["b", "2"], ["a1", "0"], ["a2", "1"]]}, {"line": 8, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"], ["a", "1"], ["b", "2"], ["a1", "0"], ["a2", "1"], ["c", "1"]]}, {"line": 9, "state": [["n", "4"], ["k", "3"], ["ar", "[ 2 , 3 , 1 , 4 ]"], ["pos", "2"], ["a", "1"], ["b", "2"], ["a1", "0"], ["a2", "1"], ["c", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 3, 1]], "5": [[5, 4, 3, 1]], "6": [[6, 4, 3, 1]], "7": [[7, 6, 4, 3, 1]], "8": [[8, 7, 6, 4, 3, 1]], "9": [[9, 8, 7, 6, 4, 3, 1]]}}
{"id": 12160, "code": "String[] targetDay = {\"11\", \"30\"};\nString[] nextDay = {\"12\", \"1\"};\nif (!targetDay[0].equals(nextDay[0])) {\nSystem.out.println(1);\n} else {\nSystem.out.println(0);}", "code_tokens": ["<0>", "String", "[", "]", "targetDay", "=", "{", "\"11\"", ",", "\"30\"", "}", ";", "<1>", "String", "[", "]", "nextDay", "=", "{", "\"12\"", ",", "\"1\"", "}", ";", "<2>", "if", "(", "!", "targetDay", "[", "0", "]", ".", "equals", "(", "nextDay", "[", "0", "]", ")", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["targetDay", "[ 11 , 30 ]"]]}, {"line": 1, "state": [["targetDay", "[ 11 , 30 ]"], ["nextDay", "[ 12 , 1 ]"]]}, {"line": 2, "state": [["targetDay", "[ 11 , 30 ]"], ["nextDay", "[ 12 , 1 ]"]]}, {"line": 3, "state": [["targetDay", "[ 11 , 30 ]"], ["nextDay", "[ 12 , 1 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 8526, "code": "int n = 5;\nint[] a1 = {3, 2, 2, 4, 1};\nint[] a2 = {1, 2, 2, 2, 1};\nint candy_max = 0;\nfor (int i = 0; i <= n; i++) {\nint candies = sum(a1, 0, i) + sum(a2, i, n);\nif (candy_max < candies) {\ncandy_max = candies;}}\nSystem.out.println(candy_max);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "candy_max", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "n", ";", "i", "++", ")", "{", "<5>", "int", "candies", "=", "sum", "(", "a1", ",", "0", ",", "i", ")", "+", "sum", "(", "a2", ",", "i", ",", "n", ")", ";", "<6>", "if", "(", "candy_max", "<", "candies", ")", "{", "<7>", "candy_max", "=", "candies", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "candy_max", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "0"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "0"], ["i", "0"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "0"], ["i", "0"], ["candies", "11"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "0"], ["i", "0"], ["candies", "11"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "11"], ["i", "0"], ["candies", "11"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "11"], ["i", "1"], ["candies", "11"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "11"], ["i", "1"], ["candies", "12"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "11"], ["i", "1"], ["candies", "12"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "1"], ["candies", "12"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "2"], ["candies", "12"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "2"], ["candies", "12"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "2"], ["candies", "12"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "3"], ["candies", "12"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "3"], ["candies", "14"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "12"], ["i", "3"], ["candies", "14"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "3"], ["candies", "14"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "4"], ["candies", "14"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "4"], ["candies", "13"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "4"], ["candies", "13"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "5"], ["candies", "13"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "5"], ["candies", "12"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "5"], ["candies", "12"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "5"], ["candies", "12"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["candy_max", "14"], ["i", "5"], ["candies", "12"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 0], [7, 6, 5, 4, 5, 4, 0], [7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "8": [[8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 12181, "code": "System.out.println(Integer.parseInt(\"11 17\".split(\" \")[1]) == 1 ? 1 : 0);", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "Integer", ".", "parseInt", "(", "\"11 17\"", ".", "split", "(", "\" \"", ")", "[", "1", "]", ")", "==", "1", "?", "1", ":", "0", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 16438, "code": "int N = 2;\nint[] a = {100, 0};\nint n = 0;for (int i = 0; i < a.length; i++) {n = Math.max(n, a[i]);}\nint r = 0;\nfor (int i = 0; i < N; i++) {\nif (Math.abs(a[i] - (n / 2.0)) < Math.abs(r - (n / 2.0))) {\nr = a[i];}}\nSystem.out.println(n + \" \" + r);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "int", "n", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "{", "n", "=", "Math", ".", "max", "(", "n", ",", "a", "[", "i", "]", ")", ";", "}", "<3>", "int", "r", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "if", "(", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "(", "n", "/", "2.0", ")", ")", "<", "Math", ".", "abs", "(", "r", "-", "(", "n", "/", "2.0", ")", ")", ")", "{", "<6>", "r", "=", "a", "[", "i", "]", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "n", "+", "\" \"", "+", "r", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"]]}, {"line": 1, "state": [["N", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"]]}, {"line": 3, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"]]}, {"line": 4, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"], ["i", "0"]]}, {"line": 4, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"], ["i", "1"]]}, {"line": 4, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"], ["i", "1"]]}, {"line": 7, "state": [["N", "2"], ["a", "[ 100 , 0 ]"], ["n", "100"], ["r", "0"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0]], "7": [[7, 5, 4, 5, 4, 0]]}}
{"id": 5350, "code": "int N = 5;\nSystem.out.println((N + 1) / 2);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "1", ")", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11308, "code": "String[] weekdays = {\"\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nString w = \"SAT\";\nSystem.out.println(java.util.Arrays.asList(weekdays).indexOf(w));", "code_tokens": ["<0>", "String", "[", "]", "weekdays", "=", "{", "\"\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<1>", "String", "w", "=", "\"SAT\"", ";", "<2>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "weekdays", ")", ".", "indexOf", "(", "w", ")", ")", ";"], "trace": [{"line": 0, "state": [["weekdays", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 1, "state": [["weekdays", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["w", "SAT"]]}, {"line": 2, "state": [["weekdays", "[ , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["w", "SAT"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 11713, "code": "String input = \"<function <lambda>>\";\njava.util.function.Consumer<String> write = (x) -> System.out.println(x);\nString s = \"SUN\";\nHashMap<String, Integer> d = new HashMap<>();d.put(\"SUN\", 7);d.put(\"MON\", 6);d.put(\"TUE\", 5);d.put(\"WED\", 4);d.put(\"THU\", 3);d.put(\"FRI\", 2);d.put(\"SAT\", 1);\nSystem.out.println(d.get(s));", "code_tokens": ["<0>", "String", "input", "=", "\"<function <lambda>>\"", ";", "<1>", "java", ".", "util", ".", "function", ".", "Consumer", "<", "String", ">", "write", "=", "(", "x", ")", "->", "System", ".", "out", ".", "println", "(", "x", ")", ";", "<2>", "String", "s", "=", "\"SUN\"", ";", "<3>", "HashMap", "<", "String", ",", "Integer", ">", "d", "=", "new", "HashMap", "<", ">", "(", ")", ";", "d", ".", "put", "(", "\"SUN\"", ",", "7", ")", ";", "d", ".", "put", "(", "\"MON\"", ",", "6", ")", ";", "d", ".", "put", "(", "\"TUE\"", ",", "5", ")", ";", "d", ".", "put", "(", "\"WED\"", ",", "4", ")", ";", "d", ".", "put", "(", "\"THU\"", ",", "3", ")", ";", "d", ".", "put", "(", "\"FRI\"", ",", "2", ")", ";", "d", ".", "put", "(", "\"SAT\"", ",", "1", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "d", ".", "get", "(", "s", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": []}, {"line": 3, "state": [["write", "<function>"]]}, {"line": 4, "state": [["write", "<function>"], ["s", "SUN"]]}, {"line": 5, "state": [["write", "<function>"], ["s", "SUN"], ["d", "{ SUN"]]}, {"line": 6, "state": [["write", "<function>"], ["s", "SUN"], ["d", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5]], "6": [[6, 5, 4]]}}
{"id": 16388, "code": "int n = 5;\nint[] a = {6, 9, 4, 2, 11};\nint m = max(a);\njava.util.Arrays.sort(a);\nint ans = 0;\nfor (int i : a) {\nif (Math.abs(m / 2.0 - i) < Math.abs(m / 2.0 - ans)) {\nans = i;}}\nSystem.out.println(m + \" \" + ans);", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "int", "m", "=", "max", "(", "a", ")", ";", "<3>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "i", ":", "a", ")", "{", "<6>", "if", "(", "Math", ".", "abs", "(", "m", "/", "2.0", "-", "i", ")", "<", "Math", ".", "abs", "(", "m", "/", "2.0", "-", "ans", ")", ")", "{", "<7>", "ans", "=", "i", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "m", "+", "\" \"", "+", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["n", "5"], ["a", "[ 6 , 9 , 4 , 2 , 11 ]"], ["m", "11"]]}, {"line": 3, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"]]}, {"line": 4, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "0"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "0"], ["i", "2"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "0"], ["i", "2"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "2"], ["i", "2"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "2"], ["i", "4"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "2"], ["i", "4"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "4"], ["i", "4"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "4"], ["i", "6"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "4"], ["i", "6"]]}, {"line": 7, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "6"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "9"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "9"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "11"]]}, {"line": 6, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "11"]]}, {"line": 5, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "11"]]}, {"line": 8, "state": [["n", "5"], ["a", "[ 2 , 4 , 6 , 9 , 11 ]"], ["m", "11"], ["ans", "6"], ["i", "11"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4]], "5": [[5, 3, 2, 1], [5, 7, 6, 5, 3, 2, 1], [5, 7, 6, 5, 7, 6, 5, 3, 2, 1], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1], [5, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1], [5, 6, 5, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1]], "6": [[6, 5, 3, 2, 1], [6, 5, 7, 6, 5, 3, 2, 1], [6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1], [6, 5, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1]], "7": [[7, 6, 5, 3, 2, 1], [7, 6, 5, 7, 6, 5, 3, 2, 1], [7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1]], "8": [[8, 6, 5, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 3, 2, 1]]}}
{"id": 5051, "code": "String s = \"smiles\";\nint l = s.length() - 2;\nString i = s.charAt(0) + Integer.toString(l) + s.charAt(s.length() - 1);\nSystem.out.println(i);", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "l", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "String", "i", "=", "s", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "l", ")", "+", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "i", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["l", "4"]]}, {"line": 2, "state": [["s", "smiles"], ["l", "4"], ["i", "s4s"]]}, {"line": 3, "state": [["s", "smiles"], ["l", "4"], ["i", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 3070, "code": "String s = \"1234567876\";\nint ans = 642;\nfor (int i = 0; i < s.length() - 2; i++) {\nif (ans > Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753)) {\nans = Math.abs(Integer.parseInt(s.substring(i, i + 3)) - 753);}\nelse {\nans = ans;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"1234567876\"", ";", "<1>", "int", "ans", "=", "642", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "if", "(", "ans", ">", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ")", "{", "<4>", "ans", "=", "Math", ".", "abs", "(", "Integer", ".", "parseInt", "(", "s", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", "-", "753", ")", ";", "}", "<5>", "else", "{", "<6>", "ans", "=", "ans", ";", "}", "}", "<7>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "1234567876"]]}, {"line": 1, "state": [["s", "1234567876"], ["ans", "642"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "642"], ["i", "0"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "642"], ["i", "0"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "630"], ["i", "0"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "630"], ["i", "1"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "630"], ["i", "1"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "519"], ["i", "1"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "519"], ["i", "2"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "519"], ["i", "2"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "408"], ["i", "2"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "408"], ["i", "3"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "408"], ["i", "3"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "297"], ["i", "3"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "297"], ["i", "4"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "297"], ["i", "4"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "186"], ["i", "4"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "186"], ["i", "5"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "186"], ["i", "5"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "75"], ["i", "5"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "75"], ["i", "6"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "75"], ["i", "6"]]}, {"line": 4, "state": [["s", "1234567876"], ["ans", "34"], ["i", "6"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 3, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 6, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 2, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}, {"line": 7, "state": [["s", "1234567876"], ["ans", "34"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [2, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "6": [[6, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]], "7": [[7, 6, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2, 0]]}}
{"id": 5394, "code": "int N = 100;\nSystem.out.println((N + 1) / 2);", "code_tokens": ["<0>", "int", "N", "=", "100", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "N", "+", "1", ")", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"]]}, {"line": 1, "state": [["N", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3129, "code": "String S = \"1234567876\";\nint ans = 999;\nfor (int i = 0; i < S.length() - 2; i++) {\nint num = Integer.parseInt(S.substring(i, i + 3));\nif (Math.abs(num - 753) < ans) {\nans = Math.abs(num - 753);}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"1234567876\"", ";", "<1>", "int", "ans", "=", "999", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "num", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "if", "(", "Math", ".", "abs", "(", "num", "-", "753", ")", "<", "ans", ")", "{", "<5>", "ans", "=", "Math", ".", "abs", "(", "num", "-", "753", ")", ";", "}", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "1234567876"]]}, {"line": 1, "state": [["S", "1234567876"], ["ans", "999"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "999"], ["i", "0"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "999"], ["i", "0"], ["num", "123"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "999"], ["i", "0"], ["num", "123"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "630"], ["i", "0"], ["num", "123"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "630"], ["i", "1"], ["num", "123"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "630"], ["i", "1"], ["num", "234"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "630"], ["i", "1"], ["num", "234"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "519"], ["i", "1"], ["num", "234"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "519"], ["i", "2"], ["num", "234"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "519"], ["i", "2"], ["num", "345"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "519"], ["i", "2"], ["num", "345"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "408"], ["i", "2"], ["num", "345"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "408"], ["i", "3"], ["num", "345"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "408"], ["i", "3"], ["num", "456"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "408"], ["i", "3"], ["num", "456"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "297"], ["i", "3"], ["num", "456"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "297"], ["i", "4"], ["num", "456"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "297"], ["i", "4"], ["num", "567"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "297"], ["i", "4"], ["num", "567"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "186"], ["i", "4"], ["num", "567"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "186"], ["i", "5"], ["num", "567"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "186"], ["i", "5"], ["num", "678"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "186"], ["i", "5"], ["num", "678"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "75"], ["i", "5"], ["num", "678"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "75"], ["i", "6"], ["num", "678"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "75"], ["i", "6"], ["num", "787"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "75"], ["i", "6"], ["num", "787"]]}, {"line": 5, "state": [["S", "1234567876"], ["ans", "34"], ["i", "6"], ["num", "787"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "34"], ["i", "7"], ["num", "787"]]}, {"line": 3, "state": [["S", "1234567876"], ["ans", "34"], ["i", "7"], ["num", "876"]]}, {"line": 4, "state": [["S", "1234567876"], ["ans", "34"], ["i", "7"], ["num", "876"]]}, {"line": 2, "state": [["S", "1234567876"], ["ans", "34"], ["i", "7"], ["num", "876"]]}, {"line": 6, "state": [["S", "1234567876"], ["ans", "34"], ["i", "7"], ["num", "876"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "6": [[6, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 9093, "code": "System.out.println(\"2018\" + String.valueOf(\"2017/01/31\".substring(4)));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "\"2018\"", "+", "String", ".", "valueOf", "(", "\"2017/01/31\"", ".", "substring", "(", "4", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 13765, "code": "int H1 = 10, M1 = 0, H2 = 15, M2 = 0, K = 30;\nSystem.out.println(60 * (H2 - H1) + M2 - M1 - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "15", ",", "M2", "=", "0", ",", "K", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "60", "*", "(", "H2", "-", "H1", ")", "+", "M2", "-", "M1", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7891, "code": "int n = 3, k = 3;\nint[] A = {1, 2, 3};\nint ans = (int) Math.ceil((double) (n - 1) / (k - 1));\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "int", "ans", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "(", "n", "-", "1", ")", "/", "(", "k", "-", "1", ")", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["A", "[ 1 , 2 , 3 ]"]]}, {"line": 3, "state": [["n", "3"], ["k", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}, {"line": 4, "state": [["n", "3"], ["k", "3"], ["A", "[ 1 , 2 , 3 ]"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4, 3, 0]]}}
{"id": 9858, "code": "int N = 3;\nString S = \"())\";\nint left = 0;\nint right = 0;\nint left_ans = 0;\nint right_ans = 0;\nfor (int i = 0; i < N; i++) {\nchar now = S.charAt(i);\nif (now == '(') {\nleft += 1;\n} else {\nright += 1;\nif (left == 0) {\nleft_ans += 1;\n} else {\nleft -= 1;\nleft = Math.max(0, left);}}}\nString S_mirror = \"\";\nfor (int i = N - 1; i >= 0; i--) {\nif (S.charAt(i) == '(') {\nS_mirror += \")\";\n} else {\nS_mirror += \"(\";}}\nleft = 0;\nright = 0;\nright_ans = 0;\nfor (int i = 0; i < N; i++) {\nchar now = S_mirror.charAt(i);\nif (now == '(') {\nleft += 1;\n} else {\nright += 1;\nif (left == 0) {\nright_ans += 1;\n} else {\nleft -= 1;\nleft = Math.max(0, left);}}}\nString ans = \"(\".repeat(left_ans) + S + \")\".repeat(right_ans);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "String", "S", "=", "\"())\"", ";", "<2>", "int", "left", "=", "0", ";", "<3>", "int", "right", "=", "0", ";", "<4>", "int", "left_ans", "=", "0", ";", "<5>", "int", "right_ans", "=", "0", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<7>", "char", "now", "=", "S", ".", "charAt", "(", "i", ")", ";", "<8>", "if", "(", "now", "==", "'('", ")", "{", "<9>", "left", "+=", "1", ";", "<10>", "}", "else", "{", "<11>", "right", "+=", "1", ";", "<12>", "if", "(", "left", "==", "0", ")", "{", "<13>", "left_ans", "+=", "1", ";", "<14>", "}", "else", "{", "<15>", "left", "-=", "1", ";", "<16>", "left", "=", "Math", ".", "max", "(", "0", ",", "left", ")", ";", "}", "}", "}", "<17>", "String", "S_mirror", "=", "\"\"", ";", "<18>", "for", "(", "int", "i", "=", "N", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "<19>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<20>", "S_mirror", "+=", "\")\"", ";", "<21>", "}", "else", "{", "<22>", "S_mirror", "+=", "\"(\"", ";", "}", "}", "<23>", "left", "=", "0", ";", "<24>", "right", "=", "0", ";", "<25>", "right_ans", "=", "0", ";", "<26>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<27>", "char", "now", "=", "S_mirror", ".", "charAt", "(", "i", ")", ";", "<28>", "if", "(", "now", "==", "'('", ")", "{", "<29>", "left", "+=", "1", ";", "<30>", "}", "else", "{", "<31>", "right", "+=", "1", ";", "<32>", "if", "(", "left", "==", "0", ")", "{", "<33>", "right_ans", "+=", "1", ";", "<34>", "}", "else", "{", "<35>", "left", "-=", "1", ";", "<36>", "left", "=", "Math", ".", "max", "(", "0", ",", "left", ")", ";", "}", "}", "}", "<37>", "String", "ans", "=", "\"(\"", ".", "repeat", "(", "left_ans", ")", "+", "S", "+", "\")\"", ".", "repeat", "(", "right_ans", ")", ";", "<38>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"], ["S", "())"]]}, {"line": 2, "state": [["N", "3"], ["S", "())"], ["left", "0"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "0"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "0"], ["now", "("]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "0"], ["now", "("]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "0"], ["now", "("]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", "("]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", ")"]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", ")"]]}, {"line": 12, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", ")"]]}, {"line": 15, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", ")"]]}, {"line": 16, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "1"], ["now", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 8, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "1"], ["left_ans", "0"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "0"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 12, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "0"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 13, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"]]}, {"line": 17, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", ""]]}, {"line": 18, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", ""]]}, {"line": 19, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", ""]]}, {"line": 22, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "("]]}, {"line": 18, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", ")"], ["S_mirror", "("]]}, {"line": 19, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", ")"], ["S_mirror", "("]]}, {"line": 22, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", ")"], ["S_mirror", "(("]]}, {"line": 18, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(("]]}, {"line": 19, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(("]]}, {"line": 20, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 18, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 23, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "2"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 24, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 25, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 26, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 27, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 28, "state": [["N", "3"], ["S", "())"], ["left", "0"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 29, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "0"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 26, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 27, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 28, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 29, "state": [["N", "3"], ["S", "())"], ["left", "2"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "1"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 26, "state": [["N", "3"], ["S", "())"], ["left", "2"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", "("], ["S_mirror", "(()"]]}, {"line": 27, "state": [["N", "3"], ["S", "())"], ["left", "2"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 28, "state": [["N", "3"], ["S", "())"], ["left", "2"], ["right", "0"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 31, "state": [["N", "3"], ["S", "())"], ["left", "2"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 32, "state": [["N", "3"], ["S", "())"], ["left", "2"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 35, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 36, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 26, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"]]}, {"line": 37, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"], ["ans", "()"]]}, {"line": 38, "state": [["N", "3"], ["S", "())"], ["left", "1"], ["right", "1"], ["left_ans", "1"], ["right_ans", "0"], ["i", "2"], ["now", ")"], ["S_mirror", "(()"], ["ans", "()"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 0], [6, 7, 6, 0], [6, 7, 6, 7, 6, 0], [6, 7, 6, 7, 6, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 7, 6, 0], [7, 6, 7, 6, 7, 6, 0]], "8": [[8, 7, 6, 0], [8, 7, 6, 7, 6, 0], [8, 7, 6, 7, 6, 7, 6, 0]], "9": [[9, 2]], "11": [[11, 3], [11, 3]], "12": [[12, 9, 2], [12, 16, 15, 12, 9, 2]], "13": [[13, 4]], "15": [[15, 12, 9, 2]], "16": [[16, 15, 12, 9, 2]], "17": [[17]], "18": [[18, 6, 7, 6, 7, 6, 7, 6, 0], [18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0]], "19": [[19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0]], "20": [[20, 22, 17]], "22": [[22, 17], [22, 17]], "23": [[23, 12, 16, 15, 12, 9, 2]], "24": [[24, 11, 3]], "25": [[25, 5]], "26": [[26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [26, 27, 26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [26, 27, 26, 27, 26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0]], "27": [[27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [27, 26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [27, 26, 27, 26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0]], "28": [[28, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [28, 27, 26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0], [28, 27, 26, 27, 26, 27, 26, 18, 19, 18, 19, 18, 19, 18, 6, 7, 6, 7, 6, 7, 6, 0]], "29": [[29, 23, 12, 16, 15, 12, 9, 2], [29, 23, 12, 16, 15, 12, 9, 2]], "31": [[31, 24, 11, 3]], "32": [[32, 29, 23, 12, 16, 15, 12, 9, 2]], "35": [[35, 32, 29, 23, 12, 16, 15, 12, 9, 2]], "36": [[36, 35, 32, 29, 23, 12, 16, 15, 12, 9, 2]], "37": [[37, 25, 5]], "38": [[38, 37, 25, 5]]}}
{"id": 14255, "code": "int N = 9;\nint[] A = {1, 2, 1, 2, 1, 2, 1, 2, 1};\nint i = 0;\nint a = 1;\nint t = 0;\nwhile (i < N - 1) {\nif (A[i] < A[i + 1]) {\nif (t == -1) {\na += 1;\nt = 0;}\nelse if (t == 0) {\nt = 1;}}\nelse if (A[i] > A[i + 1]) {\nif (t == 1) {\na += 1;\nt = 0;}\nelse if (t == 0) {\nt = -1;}}\ni++;}\nSystem.out.println(a);", "code_tokens": ["<0>", "int", "N", "=", "9", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", "}", ";", "<2>", "int", "i", "=", "0", ";", "<3>", "int", "a", "=", "1", ";", "<4>", "int", "t", "=", "0", ";", "<5>", "while", "(", "i", "<", "N", "-", "1", ")", "{", "<6>", "if", "(", "A", "[", "i", "]", "<", "A", "[", "i", "+", "1", "]", ")", "{", "<7>", "if", "(", "t", "==", "-", "1", ")", "{", "<8>", "a", "+=", "1", ";", "<9>", "t", "=", "0", ";", "}", "<10>", "else", "if", "(", "t", "==", "0", ")", "{", "<11>", "t", "=", "1", ";", "}", "}", "<12>", "else", "if", "(", "A", "[", "i", "]", ">", "A", "[", "i", "+", "1", "]", ")", "{", "<13>", "if", "(", "t", "==", "1", ")", "{", "<14>", "a", "+=", "1", ";", "<15>", "t", "=", "0", ";", "}", "<16>", "else", "if", "(", "t", "==", "0", ")", "{", "<17>", "t", "=", "-", "1", ";", "}", "}", "<18>", "i", "++", ";", "}", "<19>", "System", ".", "out", ".", "println", "(", "a", ")", ";"], "trace": [{"line": 0, "state": [["N", "9"]]}, {"line": 1, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"]]}, {"line": 2, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"]]}, {"line": 3, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"]]}, {"line": 4, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"], ["t", "0"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"], ["t", "0"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"], ["t", "0"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"], ["t", "0"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"], ["t", "0"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "0"], ["a", "1"], ["t", "1"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "1"], ["t", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "1"], ["t", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "1"], ["t", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "1"], ["t", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "1"], ["t", "1"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "2"], ["t", "1"]]}, {"line": 15, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "1"], ["a", "2"], ["t", "0"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["a", "2"], ["t", "0"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["a", "2"], ["t", "0"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["a", "2"], ["t", "0"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["a", "2"], ["t", "0"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["a", "2"], ["t", "0"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "2"], ["a", "2"], ["t", "1"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "2"], ["t", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "2"], ["t", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "2"], ["t", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "2"], ["t", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "2"], ["t", "1"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "3"], ["t", "1"]]}, {"line": 15, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "3"], ["a", "3"], ["t", "0"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["a", "3"], ["t", "0"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["a", "3"], ["t", "0"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["a", "3"], ["t", "0"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["a", "3"], ["t", "0"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["a", "3"], ["t", "0"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "4"], ["a", "3"], ["t", "1"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "3"], ["t", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "3"], ["t", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "3"], ["t", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "3"], ["t", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "3"], ["t", "1"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "4"], ["t", "1"]]}, {"line": 15, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "5"], ["a", "4"], ["t", "0"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["a", "4"], ["t", "0"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["a", "4"], ["t", "0"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["a", "4"], ["t", "0"]]}, {"line": 7, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["a", "4"], ["t", "0"]]}, {"line": 10, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["a", "4"], ["t", "0"]]}, {"line": 11, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "6"], ["a", "4"], ["t", "1"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "4"], ["t", "1"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "4"], ["t", "1"]]}, {"line": 6, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "4"], ["t", "1"]]}, {"line": 12, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "4"], ["t", "1"]]}, {"line": 13, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "4"], ["t", "1"]]}, {"line": 14, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "5"], ["t", "1"]]}, {"line": 15, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "7"], ["a", "5"], ["t", "0"]]}, {"line": 18, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["a", "5"], ["t", "0"]]}, {"line": 5, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["a", "5"], ["t", "0"]]}, {"line": 19, "state": [["N", "9"], ["A", "[ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ]"], ["i", "8"], ["a", "5"], ["t", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2, 0], [5, 18, 6, 5, 2, 0], [5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0]], "6": [[6, 5, 2, 0], [6, 5, 18, 6, 5, 2, 0], [6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0]], "7": [[7, 4], [7, 15, 13, 11, 10, 7, 4], [7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4]], "10": [[10, 7, 4], [10, 7, 15, 13, 11, 10, 7, 4], [10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4]], "11": [[11, 10, 7, 4], [11, 10, 7, 15, 13, 11, 10, 7, 4], [11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4]], "12": [[12, 6, 5, 18, 6, 5, 2, 0], [12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0]], "13": [[13, 11, 10, 7, 4], [13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4]], "14": [[14, 3], [14, 3], [14, 3], [14, 3]], "15": [[15, 13, 11, 10, 7, 4], [15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4], [15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 15, 13, 11, 10, 7, 4]], "18": [[18, 6, 5, 2, 0], [18, 12, 6, 5, 18, 6, 5, 2, 0], [18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0], [18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 18, 12, 6, 5, 18, 6, 5, 2, 0]], "19": [[19, 14, 3]]}}
{"id": 4446, "code": "Scanner scanner = new Scanner(System.in);\nString s = \"xyz\";\nSystem.out.printf(\"%s%d%s\", s.substring(0, 1), s.length() - 2, s.charAt(s.length() - 1));", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "String", "s", "=", "\"xyz\"", ";", "<2>", "System", ".", "out", ".", "printf", "(", "\"%s%d%s\"", ",", "s", ".", "substring", "(", "0", ",", "1", ")", ",", "s", ".", "length", "(", ")", "-", "2", ",", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["s", "xyz"]]}, {"line": 2, "state": [["s", "xyz"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 6333, "code": "int N = 6;\nint[] As = {2, 3, 6, 14, 53, 159};\nint[] Bs = {6, 9, 58, 79, 84, 323};\nint[] Cs = {2, 50, 79, 288, 383, 2643};\nint ans = 0;\nfor (int B : Bs) {\nint A_idx = bisectLeft(As, B);\nint C_idx = bisectRight(Cs, B);\nans += A_idx * (N - C_idx);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "6", ";", "<1>", "int", "[", "]", "As", "=", "{", "2", ",", "3", ",", "6", ",", "14", ",", "53", ",", "159", "}", ";", "<2>", "int", "[", "]", "Bs", "=", "{", "6", ",", "9", ",", "58", ",", "79", ",", "84", ",", "323", "}", ";", "<3>", "int", "[", "]", "Cs", "=", "{", "2", ",", "50", ",", "79", ",", "288", ",", "383", ",", "2643", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "B", ":", "Bs", ")", "{", "<6>", "int", "A_idx", "=", "bisectLeft", "(", "As", ",", "B", ")", ";", "<7>", "int", "C_idx", "=", "bisectRight", "(", "Cs", ",", "B", ")", ";", "<8>", "ans", "+=", "A_idx", "*", "(", "N", "-", "C_idx", ")", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "6"]]}, {"line": 2, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"]]}, {"line": 3, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"]]}, {"line": 4, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 5, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["B", "6"]]}, {"line": 7, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["B", "6"], ["A_idx", "2"]]}, {"line": 8, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["B", "6"], ["A_idx", "2"], ["C_idx", "1"]]}, {"line": 9, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["B", "6"], ["A_idx", "2"], ["C_idx", "1"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["B", "9"], ["A_idx", "2"], ["C_idx", "1"]]}, {"line": 7, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["B", "9"], ["A_idx", "3"], ["C_idx", "1"]]}, {"line": 8, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["B", "9"], ["A_idx", "3"], ["C_idx", "1"]]}, {"line": 9, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["B", "9"], ["A_idx", "3"], ["C_idx", "1"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["B", "58"], ["A_idx", "3"], ["C_idx", "1"]]}, {"line": 7, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["B", "58"], ["A_idx", "5"], ["C_idx", "1"]]}, {"line": 8, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["B", "58"], ["A_idx", "5"], ["C_idx", "2"]]}, {"line": 9, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["B", "58"], ["A_idx", "5"], ["C_idx", "2"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["B", "79"], ["A_idx", "5"], ["C_idx", "2"]]}, {"line": 7, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["B", "79"], ["A_idx", "5"], ["C_idx", "2"]]}, {"line": 8, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["B", "79"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 9, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["B", "79"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["B", "84"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 7, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["B", "84"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 8, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["B", "84"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 9, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["B", "84"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["B", "323"], ["A_idx", "5"], ["C_idx", "3"]]}, {"line": 7, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["B", "323"], ["A_idx", "6"], ["C_idx", "3"]]}, {"line": 8, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["B", "323"], ["A_idx", "6"], ["C_idx", "4"]]}, {"line": 9, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["B", "323"], ["A_idx", "6"], ["C_idx", "4"]]}, {"line": 6, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["B", "323"], ["A_idx", "6"], ["C_idx", "4"]]}, {"line": 10, "state": [["N", "6"], ["As", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["Bs", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["Cs", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["B", "323"], ["A_idx", "6"], ["C_idx", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 15820, "code": "int a = 64146, b = 123, c = 456;\nint m = a % (b + c);\nint ans = a / (b + c);\nif (m >= c) {\nSystem.out.println(ans);}\nelse {\nSystem.out.println(ans - 1);}", "code_tokens": ["<0>", "int", "a", "=", "64146", ",", "b", "=", "123", ",", "c", "=", "456", ";", "<1>", "int", "m", "=", "a", "%", "(", "b", "+", "c", ")", ";", "<2>", "int", "ans", "=", "a", "/", "(", "b", "+", "c", ")", ";", "<3>", "if", "(", "m", ">=", "c", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "ans", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "64146"], ["b", "123"], ["c", "456"]]}, {"line": 1, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["m", "456"]]}, {"line": 2, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["m", "456"], ["ans", "110"]]}, {"line": 3, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["m", "456"], ["ans", "110"]]}, {"line": 4, "state": [["a", "64146"], ["b", "123"], ["c", "456"], ["m", "456"], ["ans", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 2, 1, 0]]}}
{"id": 11828, "code": "int x = 11, y = 16;\ny = 17;\nif (y == 1) {\nSystem.out.println(1);\n} else {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "x", "=", "11", ",", "y", "=", "16", ";", "<1>", "y", "=", "17", ";", "<2>", "if", "(", "y", "==", "1", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "11"], ["y", "16"]]}, {"line": 1, "state": [["x", "11"], ["y", "17"]]}, {"line": 2, "state": [["x", "11"], ["y", "17"]]}, {"line": 5, "state": [["x", "11"], ["y", "17"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 4410, "code": "int h = 10, m = 0, eh = 12, em = 0, k = 120;\nint start = h * 60 + m;\nint end = eh * 60 + em;\nif (end - start > k) {\nSystem.out.println(end - k - start);\n} else {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "m", "=", "0", ",", "eh", "=", "12", ",", "em", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "start", "=", "h", "*", "60", "+", "m", ";", "<2>", "int", "end", "=", "eh", "*", "60", "+", "em", ";", "<3>", "if", "(", "end", "-", "start", ">", "k", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "end", "-", "k", "-", "start", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h", "10"], ["m", "0"], ["eh", "12"], ["em", "0"], ["k", "120"]]}, {"line": 2, "state": [["h", "10"], ["m", "0"], ["eh", "12"], ["em", "0"], ["k", "120"], ["start", "600"]]}, {"line": 3, "state": [["h", "10"], ["m", "0"], ["eh", "12"], ["em", "0"], ["k", "120"], ["start", "600"], ["end", "720"]]}, {"line": 4, "state": [["h", "10"], ["m", "0"], ["eh", "12"], ["em", "0"], ["k", "120"], ["start", "600"], ["end", "720"]]}, {"line": 7, "state": [["h", "10"], ["m", "0"], ["eh", "12"], ["em", "0"], ["k", "120"], ["start", "600"], ["end", "720"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 1]], "4": [[4, 3, 1]], "7": [[7]]}}
{"id": 1613, "code": "int n = 10, a = 3, b = 5;\nint mi = Math.max(0, a + b - n);\nint ma = Math.min(n, Math.min(a, b));\nSystem.out.printf(\"%d %d%n\", ma, mi);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "mi", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<2>", "int", "ma", "=", "Math", ".", "min", "(", "n", ",", "Math", ".", "min", "(", "a", ",", "b", ")", ")", ";", "<3>", "System", ".", "out", ".", "printf", "(", "\"%d %d%n\"", ",", "ma", ",", "mi", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["mi", "0"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["mi", "0"], ["ma", "3"]]}, {"line": 4, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["mi", "0"], ["ma", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]]}}
{"id": 5450, "code": "int n = 2;\nSystem.out.println(n / 2 + n % 2);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "n", "%", "2", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7990, "code": "int n = 3, k = 3;\nint[] a = {1, 2, 3};\nSystem.out.println((n - 1) / (k - 1) + ((n - 1) % (k - 1) > 0 ? 1 : 0));", "code_tokens": ["<0>", "int", "n", "=", "3", ",", "k", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "n", "-", "1", ")", "/", "(", "k", "-", "1", ")", "+", "(", "(", "n", "-", "1", ")", "%", "(", "k", "-", "1", ")", ">", "0", "?", "1", ":", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "3"], ["k", "3"]]}, {"line": 1, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}, {"line": 2, "state": [["n", "3"], ["k", "3"], ["a", "[ 1 , 2 , 3 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]]}}
{"id": 6347, "code": "int N = 3;\nint[] A = {1, 1, 1};\nint[] B = {2, 2, 2};\nint[] C = {3, 3, 3};\nint ans = 0;\nfor (int b : B) {\nint lenA = bisectLeft(A, b);\nint lenC = N - bisectRight(C, b);\nans += lenA * lenC;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "2", ",", "2", ",", "2", "}", ";", "<3>", "int", "[", "]", "C", "=", "{", "3", ",", "3", ",", "3", "}", ";", "<4>", "int", "ans", "=", "0", ";", "<5>", "for", "(", "int", "b", ":", "B", ")", "{", "<6>", "int", "lenA", "=", "bisectLeft", "(", "A", ",", "b", ")", ";", "<7>", "int", "lenC", "=", "N", "-", "bisectRight", "(", "C", ",", "b", ")", ";", "<8>", "ans", "+=", "lenA", "*", "lenC", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["N", "3"]]}, {"line": 2, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 3, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"]]}, {"line": 4, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"]]}, {"line": 5, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["b", "2"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["b", "2"], ["lenA", "3"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "0"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "9"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 7, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 8, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "18"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 9, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 6, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}, {"line": 10, "state": [["N", "3"], ["A", "[ 1 , 1 , 1 ]"], ["B", "[ 2 , 2 , 2 ]"], ["C", "[ 3 , 3 , 3 ]"], ["ans", "27"], ["b", "2"], ["lenA", "3"], ["lenC", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 3], [6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 3], [6, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 8, 7, 6, 3], [7, 6, 8, 7, 6, 8, 7, 6, 3]], "8": [[8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 3], [8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "9": [[9, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 3], [9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]], "10": [[10, 9, 8, 7, 6, 8, 7, 6, 8, 7, 6, 3]]}}
{"id": 18393, "code": "int div = 0;\nint mod = 0;\nint h = 14;\nint w = 12;\nint n = 112;\nif (h > w) {\ndiv = n / h;\nmod = n % h;}\nelse {\ndiv = n / w;\nmod = n % w;}\nif (mod > 0) {\nSystem.out.println(div + 1);}\nelse {\nSystem.out.println(div);}", "code_tokens": ["<0>", "int", "div", "=", "0", ";", "<1>", "int", "mod", "=", "0", ";", "<2>", "int", "h", "=", "14", ";", "<3>", "int", "w", "=", "12", ";", "<4>", "int", "n", "=", "112", ";", "<5>", "if", "(", "h", ">", "w", ")", "{", "<6>", "div", "=", "n", "/", "h", ";", "<7>", "mod", "=", "n", "%", "h", ";", "}", "<8>", "else", "{", "<9>", "div", "=", "n", "/", "w", ";", "<10>", "mod", "=", "n", "%", "w", ";", "}", "<11>", "if", "(", "mod", ">", "0", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "div", "+", "1", ")", ";", "}", "<13>", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "div", ")", ";", "}"], "trace": [{"line": 0, "state": [["div", "0"]]}, {"line": 1, "state": [["div", "0"], ["mod", "0"]]}, {"line": 2, "state": [["div", "0"], ["mod", "0"], ["h", "14"]]}, {"line": 3, "state": [["div", "0"], ["mod", "0"], ["h", "14"], ["w", "12"]]}, {"line": 4, "state": [["div", "0"], ["mod", "0"], ["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 5, "state": [["div", "0"], ["mod", "0"], ["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 6, "state": [["div", "8"], ["mod", "0"], ["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 7, "state": [["div", "8"], ["mod", "0"], ["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 11, "state": [["div", "8"], ["mod", "0"], ["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 14, "state": [["div", "8"], ["mod", "0"], ["h", "14"], ["w", "12"], ["n", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 3, 2]], "6": [[6, 5, 3, 2]], "7": [[7, 6, 5, 3, 2]], "11": [[11, 7, 6, 5, 3, 2]], "14": [[14, 6, 5, 3, 2]]}}
{"id": 882, "code": "int k = 101;\nint seven = 0;\nint i = 0;\nif (k % 2 == 0) {\nSystem.out.println(-1);}\nelse {\nwhile (true) {\ni += 1;\nseven = seven * 10 + 7;\nseven = seven % k;\nif (seven == 0) {\nSystem.out.println(i);\nbreak;}\nif (i > 1000000) {\nSystem.out.println(-1);\nbreak;}}}", "code_tokens": ["<0>", "int", "k", "=", "101", ";", "<1>", "int", "seven", "=", "0", ";", "<2>", "int", "i", "=", "0", ";", "<3>", "if", "(", "k", "%", "2", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}", "<5>", "else", "{", "<6>", "while", "(", "true", ")", "{", "<7>", "i", "+=", "1", ";", "<8>", "seven", "=", "seven", "*", "10", "+", "7", ";", "<9>", "seven", "=", "seven", "%", "k", ";", "<10>", "if", "(", "seven", "==", "0", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<12>", "break", ";", "}", "<13>", "if", "(", "i", ">", "1000000", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "<15>", "break", ";", "}", "}", "}"], "trace": [{"line": 0, "state": [["k", "101"]]}, {"line": 1, "state": [["k", "101"], ["seven", "0"]]}, {"line": 2, "state": [["k", "101"], ["seven", "0"], ["i", "0"]]}, {"line": 3, "state": [["k", "101"], ["seven", "0"], ["i", "0"]]}, {"line": 6, "state": [["k", "101"], ["seven", "0"], ["i", "0"]]}, {"line": 7, "state": [["k", "101"], ["seven", "0"], ["i", "1"]]}, {"line": 8, "state": [["k", "101"], ["seven", "7"], ["i", "1"]]}, {"line": 9, "state": [["k", "101"], ["seven", "7"], ["i", "1"]]}, {"line": 10, "state": [["k", "101"], ["seven", "7"], ["i", "1"]]}, {"line": 13, "state": [["k", "101"], ["seven", "7"], ["i", "1"]]}, {"line": 7, "state": [["k", "101"], ["seven", "7"], ["i", "2"]]}, {"line": 8, "state": [["k", "101"], ["seven", "77"], ["i", "2"]]}, {"line": 9, "state": [["k", "101"], ["seven", "77"], ["i", "2"]]}, {"line": 10, "state": [["k", "101"], ["seven", "77"], ["i", "2"]]}, {"line": 13, "state": [["k", "101"], ["seven", "77"], ["i", "2"]]}, {"line": 7, "state": [["k", "101"], ["seven", "77"], ["i", "3"]]}, {"line": 8, "state": [["k", "101"], ["seven", "777"], ["i", "3"]]}, {"line": 9, "state": [["k", "101"], ["seven", "70"], ["i", "3"]]}, {"line": 10, "state": [["k", "101"], ["seven", "70"], ["i", "3"]]}, {"line": 13, "state": [["k", "101"], ["seven", "70"], ["i", "3"]]}, {"line": 7, "state": [["k", "101"], ["seven", "70"], ["i", "4"]]}, {"line": 8, "state": [["k", "101"], ["seven", "707"], ["i", "4"]]}, {"line": 9, "state": [["k", "101"], ["seven", "0"], ["i", "4"]]}, {"line": 10, "state": [["k", "101"], ["seven", "0"], ["i", "4"]]}, {"line": 11, "state": [["k", "101"], ["seven", "0"], ["i", "4"]]}, {"line": 12, "state": [["k", "101"], ["seven", "0"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "6": [[6]], "7": [[7, 2], [7, 13, 7, 2], [7, 13, 7, 13, 7, 2], [7, 13, 7, 13, 7, 13, 7, 2]], "8": [[8, 1], [8, 10, 9, 8, 1], [8, 10, 9, 8, 10, 9, 8, 1], [8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 1]], "9": [[9, 8, 1], [9, 8, 10, 9, 8, 1], [9, 8, 10, 9, 8, 10, 9, 8, 1], [9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 1]], "10": [[10, 9, 8, 1], [10, 9, 8, 10, 9, 8, 1], [10, 9, 8, 10, 9, 8, 10, 9, 8, 1], [10, 9, 8, 10, 9, 8, 10, 9, 8, 10, 9, 8, 1]], "11": [[11, 7, 13, 7, 13, 7, 13, 7, 2]], "12": [[12]], "13": [[13, 7, 2], [13, 7, 13, 7, 2], [13, 7, 13, 7, 13, 7, 2]]}}
{"id": 18710, "code": "int h = 14;\nint w = 12;\nint n = 112;\nif (n % Math.max(h, w) == 0) {\nSystem.out.println(n / Math.max(h, w));} else {\nSystem.out.println(n / Math.max(h, w) + 1);}", "code_tokens": ["<0>", "int", "h", "=", "14", ";", "<1>", "int", "w", "=", "12", ";", "<2>", "int", "n", "=", "112", ";", "<3>", "if", "(", "n", "%", "Math", ".", "max", "(", "h", ",", "w", ")", "==", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "n", "/", "Math", ".", "max", "(", "h", ",", "w", ")", ")", ";", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "n", "/", "Math", ".", "max", "(", "h", ",", "w", ")", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "14"]]}, {"line": 1, "state": [["h", "14"], ["w", "12"]]}, {"line": 2, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 3, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}, {"line": 4, "state": [["h", "14"], ["w", "12"], ["n", "112"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 4739, "code": "String s = \"smiles\";\nint k = s.length() - 2;\nSystem.out.println(String.format(\"%s%d%s\", s.charAt(0), k, s.charAt(s.length() - 1)));", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "int", "k", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%s%d%s\"", ",", "s", ".", "charAt", "(", "0", ")", ",", "k", ",", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"], ["k", "4"]]}, {"line": 2, "state": [["s", "smiles"], ["k", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1396, "code": "int N = 750;\nfor (int i = 0; i < 10; i++) {\nif (N <= i * 111) {\nSystem.out.println(i * 111);\nbreak;}}", "code_tokens": ["<0>", "int", "N", "=", "750", ";", "<1>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "10", ";", "i", "++", ")", "{", "<2>", "if", "(", "N", "<=", "i", "*", "111", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "i", "*", "111", ")", ";", "<4>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["N", "750"]]}, {"line": 1, "state": [["N", "750"], ["i", "0"]]}, {"line": 2, "state": [["N", "750"], ["i", "0"]]}, {"line": 1, "state": [["N", "750"], ["i", "1"]]}, {"line": 2, "state": [["N", "750"], ["i", "1"]]}, {"line": 1, "state": [["N", "750"], ["i", "2"]]}, {"line": 2, "state": [["N", "750"], ["i", "2"]]}, {"line": 1, "state": [["N", "750"], ["i", "3"]]}, {"line": 2, "state": [["N", "750"], ["i", "3"]]}, {"line": 1, "state": [["N", "750"], ["i", "4"]]}, {"line": 2, "state": [["N", "750"], ["i", "4"]]}, {"line": 1, "state": [["N", "750"], ["i", "5"]]}, {"line": 2, "state": [["N", "750"], ["i", "5"]]}, {"line": 1, "state": [["N", "750"], ["i", "6"]]}, {"line": 2, "state": [["N", "750"], ["i", "6"]]}, {"line": 1, "state": [["N", "750"], ["i", "7"]]}, {"line": 2, "state": [["N", "750"], ["i", "7"]]}, {"line": 3, "state": [["N", "750"], ["i", "7"]]}, {"line": 4, "state": [["N", "750"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1], [1, 2, 1], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]], "2": [[2, 1], [2, 1, 2, 1], [2, 1, 2, 1, 2, 1], [2, 1, 2, 1, 2, 1, 2, 1], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]], "3": [[3, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]], "4": [[4]]}}
{"id": 17144, "code": "String a = \"D\";String b = \"H\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nif (b.equals(\"H\")) {\nSystem.out.println('D');}\nelse {\nSystem.out.println('H');}}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "'D'", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "'H'", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "H"]]}, {"line": 1, "state": [["a", "D"], ["b", "H"]]}, {"line": 4, "state": [["a", "D"], ["b", "H"]]}, {"line": 5, "state": [["a", "D"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 0]], "5": [[5]]}}
{"id": 16968, "code": "String a = \"H\";String b = \"H\";\nString[][] ok = {{\"H\", \"H\"}, {\"D\", \"D\"}};\nboolean found = false;for (String[] pair : ok) {if (pair[0].equals(a) && pair[1].equals(b)) {found = true;break;}}if (found) {\nSystem.out.println(\"H\");} else {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "String", "[", "]", "[", "]", "ok", "=", "{", "{", "\"H\"", ",", "\"H\"", "}", ",", "{", "\"D\"", ",", "\"D\"", "}", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "String", "[", "]", "pair", ":", "ok", ")", "{", "if", "(", "pair", "[", "0", "]", ".", "equals", "(", "a", ")", "&&", "pair", "[", "1", "]", ".", "equals", "(", "b", ")", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"], ["ok", "[ (H , H) , (D , D) ]"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"], ["ok", "[ (H , H) , (D , D) ]"]]}, {"line": 3, "state": [["a", "H"], ["b", "H"], ["ok", "[ (H , H) , (D , D) ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 19130, "code": "int N = 12;\nif (N % 2 == 1) {\nSystem.out.println(0);}\nelse {\nint divide = 2;\nint count = 0;\nwhile (divide < N) {\ndivide *= 5;\ncount += N / divide;}\nSystem.out.println(count);}", "code_tokens": ["<0>", "int", "N", "=", "12", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "divide", "=", "2", ";", "<5>", "int", "count", "=", "0", ";", "<6>", "while", "(", "divide", "<", "N", ")", "{", "<7>", "divide", "*=", "5", ";", "<8>", "count", "+=", "N", "/", "divide", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "count", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "12"]]}, {"line": 1, "state": [["N", "12"]]}, {"line": 4, "state": [["N", "12"], ["divide", "2"]]}, {"line": 5, "state": [["N", "12"], ["divide", "2"], ["count", "0"]]}, {"line": 6, "state": [["N", "12"], ["divide", "2"], ["count", "0"]]}, {"line": 7, "state": [["N", "12"], ["divide", "10"], ["count", "0"]]}, {"line": 8, "state": [["N", "12"], ["divide", "10"], ["count", "1"]]}, {"line": 6, "state": [["N", "12"], ["divide", "10"], ["count", "1"]]}, {"line": 7, "state": [["N", "12"], ["divide", "50"], ["count", "1"]]}, {"line": 8, "state": [["N", "12"], ["divide", "50"], ["count", "1"]]}, {"line": 6, "state": [["N", "12"], ["divide", "50"], ["count", "1"]]}, {"line": 9, "state": [["N", "12"], ["divide", "50"], ["count", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]], "5": [[5]], "6": [[6, 4, 1, 0], [6, 8, 7, 6, 4, 1, 0], [6, 8, 7, 6, 8, 7, 6, 4, 1, 0]], "7": [[7, 6, 4, 1, 0], [7, 6, 8, 7, 6, 4, 1, 0]], "8": [[8, 7, 6, 4, 1, 0], [8, 7, 6, 8, 7, 6, 4, 1, 0]], "9": [[9, 8, 7, 6, 8, 7, 6, 4, 1, 0]]}}
{"id": 6555, "code": "int n = 6;\nint[] a = {3, 14, 159, 2, 6, 53};\nint[] b = {58, 9, 79, 323, 84, 6};\nint[] c = {2643, 383, 2, 79, 50, 288};\nArrays.sort(a);\nArrays.sort(b);\nArrays.sort(c);\nint ans = 0;\nfor (int i = 0; i < n; i++) {\nint pos_a = bisectLeft(a, b[i]);\nint pos_c = bisectRight(c, b[i]);\nans += pos_a * (n - pos_c);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "int", "[", "]", "a", "=", "{", "3", ",", "14", ",", "159", ",", "2", ",", "6", ",", "53", "}", ";", "<2>", "int", "[", "]", "b", "=", "{", "58", ",", "9", ",", "79", ",", "323", ",", "84", ",", "6", "}", ";", "<3>", "int", "[", "]", "c", "=", "{", "2643", ",", "383", ",", "2", ",", "79", ",", "50", ",", "288", "}", ";", "<4>", "Arrays", ".", "sort", "(", "a", ")", ";", "<5>", "Arrays", ".", "sort", "(", "b", ")", ";", "<6>", "Arrays", ".", "sort", "(", "c", ")", ";", "<7>", "int", "ans", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<9>", "int", "pos_a", "=", "bisectLeft", "(", "a", ",", "b", "[", "i", "]", ")", ";", "<10>", "int", "pos_c", "=", "bisectRight", "(", "c", ",", "b", "[", "i", "]", ")", ";", "<11>", "ans", "+=", "pos_a", "*", "(", "n", "-", "pos_c", ")", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"]]}, {"line": 2, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"]]}, {"line": 3, "state": [["n", "6"], ["a", "[ 3 , 14 , 159 , 2 , 6 , 53 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 4, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 58 , 9 , 79 , 323 , 84 , 6 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 5, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2643 , 383 , 2 , 79 , 50 , 288 ]"]]}, {"line": 6, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 7, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"]]}, {"line": 8, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["i", "0"], ["pos_a", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "0"], ["i", "0"], ["pos_a", "2"], ["pos_c", "1"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "0"], ["pos_a", "2"], ["pos_c", "1"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "1"], ["pos_a", "2"], ["pos_c", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "1"], ["pos_a", "3"], ["pos_c", "1"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "10"], ["i", "1"], ["pos_a", "3"], ["pos_c", "1"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "1"], ["pos_a", "3"], ["pos_c", "1"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "2"], ["pos_a", "3"], ["pos_c", "1"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "2"], ["pos_a", "5"], ["pos_c", "1"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "25"], ["i", "2"], ["pos_a", "5"], ["pos_c", "2"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "2"], ["pos_a", "5"], ["pos_c", "2"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "3"], ["pos_a", "5"], ["pos_c", "2"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "3"], ["pos_a", "5"], ["pos_c", "2"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "45"], ["i", "3"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "3"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "4"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "4"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "60"], ["i", "4"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "4"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "5"], ["pos_a", "5"], ["pos_c", "3"]]}, {"line": 10, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "5"], ["pos_a", "6"], ["pos_c", "3"]]}, {"line": 11, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "75"], ["i", "5"], ["pos_a", "6"], ["pos_c", "4"]]}, {"line": 12, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["i", "5"], ["pos_a", "6"], ["pos_c", "4"]]}, {"line": 9, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["i", "5"], ["pos_a", "6"], ["pos_c", "4"]]}, {"line": 13, "state": [["n", "6"], ["a", "[ 2 , 3 , 6 , 14 , 53 , 159 ]"], ["b", "[ 6 , 9 , 58 , 79 , 84 , 323 ]"], ["c", "[ 2 , 50 , 79 , 288 , 383 , 2643 ]"], ["ans", "87"], ["i", "5"], ["pos_a", "6"], ["pos_c", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1]], "5": [[5, 2]], "6": [[6, 3]], "7": [[7]], "8": [[8]], "9": [[9, 0], [9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "10": [[10, 9, 0], [10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "11": [[11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "12": [[12, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0], [12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]], "13": [[13, 12, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 11, 10, 9, 0]]}}
{"id": 15196, "code": "int X = 64145, Y = 123, Z = 456;\nint result = X / (Y + Z) - 1;\nwhile (X >= (result + 1) * Y + (result + 2) * Z) {\nresult += 1;}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "X", "=", "64145", ",", "Y", "=", "123", ",", "Z", "=", "456", ";", "<1>", "int", "result", "=", "X", "/", "(", "Y", "+", "Z", ")", "-", "1", ";", "<2>", "while", "(", "X", ">=", "(", "result", "+", "1", ")", "*", "Y", "+", "(", "result", "+", "2", ")", "*", "Z", ")", "{", "<3>", "result", "+=", "1", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"]]}, {"line": 1, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["result", "109"]]}, {"line": 2, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["result", "109"]]}, {"line": 4, "state": [["X", "64145"], ["Y", "123"], ["Z", "456"], ["result", "109"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]]}}
{"id": 4576, "code": "String arg = \"internationalization\";\nSystem.out.println(arg.charAt(0) + String.valueOf(arg.length() - 2) + arg.charAt(arg.length() - 1));", "code_tokens": ["<0>", "String", "arg", "=", "\"internationalization\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "arg", ".", "charAt", "(", "0", ")", "+", "String", ".", "valueOf", "(", "arg", ".", "length", "(", ")", "-", "2", ")", "+", "arg", ".", "charAt", "(", "arg", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["arg", "internationalization"]]}, {"line": 1, "state": [["arg", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 11633, "code": "String A = \"SUN\";\nString[] S = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nfor (int i = 0; i < 7; i++) {\nif (A.equals(S[i])) {\nSystem.out.println(7 - i);\nbreak;}\ni += 1; // This line is not necessary in Java as the for loop already increments i}", "code_tokens": ["<0>", "String", "A", "=", "\"SUN\"", ";", "<1>", "String", "[", "]", "S", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "7", ";", "i", "++", ")", "{", "<3>", "if", "(", "A", ".", "equals", "(", "S", "[", "i", "]", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", "-", "i", ")", ";", "<5>", "break", ";", "}", "<6>", "i", "+=", "1", ";", "// This line is not necessary in Java as the for loop already increments i}"], "trace": [{"line": 0, "state": [["A", "SUN"]]}, {"line": 1, "state": [["A", "SUN"], ["S", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["A", "SUN"], ["S", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}, {"line": 3, "state": [["A", "SUN"], ["S", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}, {"line": 4, "state": [["A", "SUN"], ["S", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}, {"line": 5, "state": [["A", "SUN"], ["S", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4, 3, 2]], "5": [[5]]}}
{"id": 15269, "code": "int x = 12, y = 3, z = 1;\nint n = 1;\nwhile (x >= (n + 1) * z + n * y) {\nn += 1;}\nSystem.out.println(n - 1);", "code_tokens": ["<0>", "int", "x", "=", "12", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "n", "=", "1", ";", "<2>", "while", "(", "x", ">=", "(", "n", "+", "1", ")", "*", "z", "+", "n", "*", "y", ")", "{", "<3>", "n", "+=", "1", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "n", "-", "1", ")", ";"], "trace": [{"line": 0, "state": [["x", "12"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "1"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "1"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "2"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "2"]]}, {"line": 3, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "3"]]}, {"line": 2, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "3"]]}, {"line": 4, "state": [["x", "12"], ["y", "3"], ["z", "1"], ["n", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0], [2, 3, 2, 1, 0], [2, 3, 2, 3, 2, 1, 0]], "3": [[3, 2, 1, 0], [3, 2, 3, 2, 1, 0]], "4": [[4, 2, 3, 2, 3, 2, 1, 0]]}}
{"id": 13706, "code": "int h1 = 10, m1 = 0, h2 = 12, m2 = 0, k = 120;\nint total = (h2 - h1) * 60;\nif (m1 <= m2) {\ntotal += (m2 - m1);}\nelse {\nif (m2 == 0) {\ntotal += 60 - m1;\ntotal -= 60;}\nelse {\ntotal -= (m1 - m2);}}\nint ans = total - k;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h1", "=", "10", ",", "m1", "=", "0", ",", "h2", "=", "12", ",", "m2", "=", "0", ",", "k", "=", "120", ";", "<1>", "int", "total", "=", "(", "h2", "-", "h1", ")", "*", "60", ";", "<2>", "if", "(", "m1", "<=", "m2", ")", "{", "<3>", "total", "+=", "(", "m2", "-", "m1", ")", ";", "}", "<4>", "else", "{", "<5>", "if", "(", "m2", "==", "0", ")", "{", "<6>", "total", "+=", "60", "-", "m1", ";", "<7>", "total", "-=", "60", ";", "}", "<8>", "else", "{", "<9>", "total", "-=", "(", "m1", "-", "m2", ")", ";", "}", "}", "<10>", "int", "ans", "=", "total", "-", "k", ";", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"]]}, {"line": 1, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["total", "120"]]}, {"line": 2, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["total", "120"]]}, {"line": 3, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["total", "120"]]}, {"line": 10, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["total", "120"], ["ans", "0"]]}, {"line": 11, "state": [["h1", "10"], ["m1", "0"], ["h2", "12"], ["m2", "0"], ["k", "120"], ["total", "120"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "10": [[10, 3, 2, 0]], "11": [[11, 10, 3, 2, 0]]}}
{"id": 5498, "code": "int N = 2;\nSystem.out.println(N % 2 == 0 ? N / 2 : (N + 1) / 2);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "System", ".", "out", ".", "println", "(", "N", "%", "2", "==", "0", "?", "N", "/", "2", ":", "(", "N", "+", "1", ")", "/", "2", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"]]}, {"line": 1, "state": [["N", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 7588, "code": "int H = 211, N = 5;\nint[] list_A = {31, 41, 59, 26, 53};\nint sum_list_A = 0;for (int num : list_A) {sum_list_A += num;}\nif (sum_list_A >= H) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "211", ",", "N", "=", "5", ";", "<1>", "int", "[", "]", "list_A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "sum_list_A", "=", "0", ";", "for", "(", "int", "num", ":", "list_A", ")", "{", "sum_list_A", "+=", "num", ";", "}", "<3>", "if", "(", "sum_list_A", ">=", "H", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "211"], ["N", "5"]]}, {"line": 1, "state": [["H", "211"], ["N", "5"], ["list_A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["H", "211"], ["N", "5"], ["list_A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum_list_A", "210"]]}, {"line": 3, "state": [["H", "211"], ["N", "5"], ["list_A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum_list_A", "210"]]}, {"line": 6, "state": [["H", "211"], ["N", "5"], ["list_A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["sum_list_A", "210"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 9155, "code": "String dateString = \"2017/01/31\";\nSystem.out.println(\"2018/01/\" + dateString.substring(dateString.length() - 2));", "code_tokens": ["<0>", "String", "dateString", "=", "\"2017/01/31\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018/01/\"", "+", "dateString", ".", "substring", "(", "dateString", ".", "length", "(", ")", "-", "2", ")", ")", ";"], "trace": [{"line": 0, "state": [["dateString", "2017/01/31"]]}, {"line": 1, "state": [["dateString", "2017/01/31"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 3523, "code": "int a = 12, b = 4;\nif (a <= b * 2) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(a - b * 2);}", "code_tokens": ["<0>", "int", "a", "=", "12", ",", "b", "=", "4", ";", "<1>", "if", "(", "a", "<=", "b", "*", "2", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "a", "-", "b", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "12"], ["b", "4"]]}, {"line": 1, "state": [["a", "12"], ["b", "4"]]}, {"line": 4, "state": [["a", "12"], ["b", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 5015, "code": "String n = \"smiles\";\nchar[] nArray = n.toCharArray();\nchar a = nArray[0];\nchar b = nArray[nArray.length - 1];\nint c = nArray.length - 2; // since we pop two elements\nSystem.out.println(a + String.valueOf(c) + b);", "code_tokens": ["<0>", "String", "n", "=", "\"smiles\"", ";", "<1>", "char", "[", "]", "nArray", "=", "n", ".", "toCharArray", "(", ")", ";", "<2>", "char", "a", "=", "nArray", "[", "0", "]", ";", "<3>", "char", "b", "=", "nArray", "[", "nArray", ".", "length", "-", "1", "]", ";", "<4>", "int", "c", "=", "nArray", ".", "length", "-", "2", ";", "// since we pop two elements", "<5>", "System", ".", "out", ".", "println", "(", "a", "+", "String", ".", "valueOf", "(", "c", ")", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["n", "smiles"]]}, {"line": 1, "state": [["n", "[ s , m , i , l , e , s ]"]]}, {"line": 2, "state": [["n", "[ m , i , l , e , s ]"], ["a", "s"]]}, {"line": 3, "state": [["n", "[ m , i , l , e ]"], ["a", "s"], ["b", "s"]]}, {"line": 4, "state": [["n", "[ m , i , l , e ]"], ["a", "s"], ["b", "s"], ["c", "4"]]}, {"line": 5, "state": [["n", "[ m , i , l , e ]"], ["a", "s"], ["b", "s"], ["c", "4"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5, 4, 3, 2, 1, 0]]}}
{"id": 16053, "code": "int a = 20, b = 15;\nint n = Math.max(a - 2 * b, 0);\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "int", "n", "=", "Math", ".", "max", "(", "a", "-", "2", "*", "b", ",", "0", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"], ["n", "0"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"], ["n", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 11223, "code": "String[] days = {\"DAYS\", \"SAT\", \"FRI\", \"THU\", \"WED\", \"TUE\", \"MON\", \"SUN\"};\nString s = \"SUN\";\nfor (String i : days) {\nif (i.equals(s)) {\nSystem.out.println(java.util.Arrays.asList(days).indexOf(i));\nbreak;}}", "code_tokens": ["<0>", "String", "[", "]", "days", "=", "{", "\"DAYS\"", ",", "\"SAT\"", ",", "\"FRI\"", ",", "\"THU\"", ",", "\"WED\"", ",", "\"TUE\"", ",", "\"MON\"", ",", "\"SUN\"", "}", ";", "<1>", "String", "s", "=", "\"SUN\"", ";", "<2>", "for", "(", "String", "i", ":", "days", ")", "{", "<3>", "if", "(", "i", ".", "equals", "(", "s", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "asList", "(", "days", ")", ".", "indexOf", "(", "i", ")", ")", ";", "<5>", "break", ";", "}", "}"], "trace": [{"line": 0, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"]]}, {"line": 1, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "DAYS"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "DAYS"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "SAT"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "SAT"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "FRI"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "FRI"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "THU"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "THU"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "WED"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "WED"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "TUE"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "TUE"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "MON"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "MON"]]}, {"line": 2, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "SUN"]]}, {"line": 3, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "SUN"]]}, {"line": 4, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "SUN"]]}, {"line": 5, "state": [["days", "[ DAYS , SAT , FRI , THU , WED , TUE , MON , SUN ]"], ["s", "SUN"], ["i", "SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "5": [[5]]}}
{"id": 3677, "code": "int a = 20, b = 30;\nSystem.out.println((b * 2 <= a) ? (a - b * 2) : '0');", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "(", "b", "*", "2", "<=", "a", ")", "?", "(", "a", "-", "b", "*", "2", ")", ":", "'0'", ")", ";"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "30"]]}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13604, "code": "String S = \"happy,newyear,enjoy\";\nSystem.out.println(S.replace(',', ' '));", "code_tokens": ["<0>", "String", "S", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "S", ".", "replace", "(", "','", ",", "' '", ")", ")", ";"], "trace": [{"line": 0, "state": [["S", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["S", "happy , newyear , enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13102, "code": "String x = \"5\";\nString[] list = {\"3\", \"5\", \"7\"};\nboolean found = false;for (String item : list) {if (item.equals(x)) {found = true;break;}}if (found) {\nSystem.out.println(\"YES\");} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "String", "x", "=", "\"5\"", ";", "<1>", "String", "[", "]", "list", "=", "{", "\"3\"", ",", "\"5\"", ",", "\"7\"", "}", ";", "<2>", "boolean", "found", "=", "false", ";", "for", "(", "String", "item", ":", "list", ")", "{", "if", "(", "item", ".", "equals", "(", "x", ")", ")", "{", "found", "=", "true", ";", "break", ";", "}", "}", "if", "(", "found", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "5"]]}, {"line": 1, "state": [["x", "5"], ["list", "[ 3 , 5 , 7 ]"]]}, {"line": 2, "state": [["x", "5"], ["list", "[ 3 , 5 , 7 ]"]]}, {"line": 3, "state": [["x", "5"], ["list", "[ 3 , 5 , 7 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3]]}}
{"id": 1713, "code": "int N = 10, A = 7, B = 5;\nint mx = Math.min(A, B);\nint mn = Math.max(A + B - N, 0);\nSystem.out.println(mx + \" \" + mn);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "mx", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "mn", "=", "Math", ".", "max", "(", "A", "+", "B", "-", "N", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "mx", "+", "\" \"", "+", "mn", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["mx", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["mx", "5"], ["mn", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["mx", "5"], ["mn", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13931, "code": "int n = 7;\nint[] a = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint ans = 1;\nboolean u = false;\nboolean d = false;\nfor (int i = 1; i < n; i++) {\nif (u) {\nif (a[i] < a[i - 1]) {\nu = false;\nans += 1;}\n} else if (d) {\nif (a[i] > a[i - 1]) {\nd = false;\nans += 1;}\n} else {\nif (a[i] > a[i - 1]) {\nu = true;\n} else if (a[i] < a[i - 1]) {\nd = true;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "boolean", "u", "=", "false", ";", "<4>", "boolean", "d", "=", "false", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "if", "(", "u", ")", "{", "<7>", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "-", "1", "]", ")", "{", "<8>", "u", "=", "false", ";", "<9>", "ans", "+=", "1", ";", "}", "<10>", "}", "else", "if", "(", "d", ")", "{", "<11>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "-", "1", "]", ")", "{", "<12>", "d", "=", "false", ";", "<13>", "ans", "+=", "1", ";", "}", "<14>", "}", "else", "{", "<15>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "-", "1", "]", ")", "{", "<16>", "u", "=", "true", ";", "<17>", "}", "else", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "-", "1", "]", ")", "{", "<18>", "d", "=", "true", ";", "}", "}", "}", "<19>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"], ["d", "False"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"], ["d", "False"], ["i", "1"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"], ["d", "False"], ["i", "1"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"], ["d", "False"], ["i", "1"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"], ["d", "False"], ["i", "1"]]}, {"line": 16, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "2"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "2"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "3"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "3"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "True"], ["d", "False"], ["i", "3"]]}, {"line": 8, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["u", "False"], ["d", "False"], ["i", "3"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "4"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "4"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "4"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "4"]]}, {"line": 17, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "4"]]}, {"line": 18, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "True"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "True"], ["i", "5"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "True"], ["i", "5"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "True"], ["i", "5"]]}, {"line": 11, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "True"], ["i", "5"]]}, {"line": 12, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["u", "False"], ["d", "False"], ["i", "5"]]}, {"line": 13, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "False"], ["d", "False"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "False"], ["d", "False"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "False"], ["d", "False"], ["i", "6"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "False"], ["d", "False"], ["i", "6"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "False"], ["d", "False"], ["i", "6"]]}, {"line": 16, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "True"], ["d", "False"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "True"], ["d", "False"], ["i", "6"]]}, {"line": 19, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["u", "True"], ["d", "False"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 15, 5, 0], [5, 7, 5, 15, 5, 0], [5, 7, 5, 7, 5, 15, 5, 0], [5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0], [5, 11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0], [5, 15, 5, 11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "6": [[6, 3], [6, 16, 6, 3], [6, 16, 6, 3], [6, 8, 6, 16, 6, 3], [6, 8, 6, 16, 6, 3], [6, 8, 6, 16, 6, 3]], "7": [[7, 5, 15, 5, 0], [7, 5, 7, 5, 15, 5, 0]], "8": [[8, 6, 16, 6, 3]], "9": [[9, 2]], "10": [[10, 4], [10, 4], [10, 18, 10, 4], [10, 12, 10, 18, 10, 4]], "11": [[11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "12": [[12, 10, 18, 10, 4]], "13": [[13, 9, 2]], "15": [[15, 5, 0], [15, 5, 7, 5, 7, 5, 15, 5, 0], [15, 5, 11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "16": [[16, 6, 3], [16, 6, 8, 6, 16, 6, 3]], "17": [[17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "18": [[18, 10, 4]], "19": [[19, 13, 9, 2]]}}
{"id": 15179, "code": "int x = 64145, y = 123, z = 456;\nx -= z;\nSystem.out.println((x - (x % (y + z))) / (y + z));", "code_tokens": ["<0>", "int", "x", "=", "64145", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "x", "-=", "z", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "x", "-", "(", "x", "%", "(", "y", "+", "z", ")", ")", ")", "/", "(", "y", "+", "z", ")", ")", ";"], "trace": [{"line": 0, "state": [["x", "64145"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "63689"], ["y", "123"], ["z", "456"]]}, {"line": 2, "state": [["x", "63689"], ["y", "123"], ["z", "456"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15520, "code": "int x = 64146, y = 123, z = 456;\nint ans = x / (y + z);\nif (x < ans * (y + z) + z) {\nans -= 1;}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "x", "=", "64146", ",", "y", "=", "123", ",", "z", "=", "456", ";", "<1>", "int", "ans", "=", "x", "/", "(", "y", "+", "z", ")", ";", "<2>", "if", "(", "x", "<", "ans", "*", "(", "y", "+", "z", ")", "+", "z", ")", "{", "<3>", "ans", "-=", "1", ";", "}", "<4>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["x", "64146"], ["y", "123"], ["z", "456"]]}, {"line": 1, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}, {"line": 2, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}, {"line": 4, "state": [["x", "64146"], ["y", "123"], ["z", "456"], ["ans", "110"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "4": [[4, 2, 1, 0]]}}
{"id": 5438, "code": "int n = 2;\nif (n % 2 == 0) {System.out.println(n / 2);} else {System.out.println(n / 2 + 1);}", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "System", ".", "out", ".", "println", "(", "n", "/", "2", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "n", "/", "2", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 14732, "code": "int N = 3, P = 0;\nint[] A = {1, 1, 1};\nint[] dic = {0, 0}; // dic[0] for \"even\", dic[1] for \"odd\"\nfor (int i = 0; i < N; i++) {\nif (A[i] % 2 == 0) {\ndic[0] += 1; // even count}\nelse {\ndic[1] += 1; // odd count}}\nif (dic[1] == 0) {\nif (P == 1) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(Math.pow(2, dic[0]));}}\nelse {\nSystem.out.println(Math.pow(2, N - 1));}", "code_tokens": ["<0>", "int", "N", "=", "3", ",", "P", "=", "0", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "[", "]", "dic", "=", "{", "0", ",", "0", "}", ";", "// dic[0] for \"even\", dic[1] for \"odd\"", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<4>", "if", "(", "A", "[", "i", "]", "%", "2", "==", "0", ")", "{", "<5>", "dic", "[", "0", "]", "+=", "1", ";", "// even count}", "<6>", "else", "{", "<7>", "dic", "[", "1", "]", "+=", "1", ";", "// odd count}}", "<8>", "if", "(", "dic", "[", "1", "]", "==", "0", ")", "{", "<9>", "if", "(", "P", "==", "1", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "dic", "[", "0", "]", ")", ")", ";", "}", "}", "<13>", "else", "{", "<14>", "System", ".", "out", ".", "println", "(", "Math", ".", "pow", "(", "2", ",", "N", "-", "1", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "3"], ["P", "0"]]}, {"line": 1, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "0"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "1"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "1"]]}, {"line": 7, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "1"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "2"]]}, {"line": 4, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "2"]]}, {"line": 7, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "2"]]}, {"line": 3, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "2"]]}, {"line": 8, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "2"]]}, {"line": 14, "state": [["N", "3"], ["P", "0"], ["A", "[ 1 , 1 , 1 ]"], ["dic", "{ even"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0]], "7": [[7, 2], [7, 2], [7, 2]], "8": [[8, 7, 2]], "14": [[14, 3, 4, 3, 4, 3, 4, 3, 0]]}}
{"id": 4386, "code": "int H1 = 10, M1 = 0, H2 = 12, M2 = 0, K = 120;\nint ans = 0;\nif (M1 <= M2) {\nans = (H2 - H1) * 60 + M2 - M1 - K;}\nelse {\nans = (H2 - H1 - 1) * 60 + (60 - M1) + M2 - K;}\nif (ans < 0) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(ans);}", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "12", ",", "M2", "=", "0", ",", "K", "=", "120", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "if", "(", "M1", "<=", "M2", ")", "{", "<3>", "ans", "=", "(", "H2", "-", "H1", ")", "*", "60", "+", "M2", "-", "M1", "-", "K", ";", "}", "<4>", "else", "{", "<5>", "ans", "=", "(", "H2", "-", "H1", "-", "1", ")", "*", "60", "+", "(", "60", "-", "M1", ")", "+", "M2", "-", "K", ";", "}", "<6>", "if", "(", "ans", "<", "0", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "ans", ")", ";", "}"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["ans", "0"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["ans", "0"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["ans", "0"]]}, {"line": 6, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["ans", "0"]]}, {"line": 9, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["ans", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "6": [[6, 3, 2, 0]], "9": [[9, 6, 3, 2, 0]]}}
{"id": 7140, "code": "int h = 211, n = 5;\nint[] A = {31, 41, 59, 26, 53};\nint attack = 0;\nfor (int i = 0; i < n; i++) {\nattack += A[i];}\nif (attack >= h) {\nSystem.out.println(\"Yes\");}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "211", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "int", "attack", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<4>", "attack", "+=", "A", "[", "i", "]", ";", "}", "<5>", "if", "(", "attack", ">=", "h", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}", "<7>", "else", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}, {"line": 1, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "0"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "0"], ["i", "0"]]}, {"line": 4, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "31"], ["i", "0"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "31"], ["i", "1"]]}, {"line": 4, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "72"], ["i", "1"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "72"], ["i", "2"]]}, {"line": 4, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "131"], ["i", "2"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "131"], ["i", "3"]]}, {"line": 4, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "157"], ["i", "3"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "157"], ["i", "4"]]}, {"line": 4, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "210"], ["i", "4"]]}, {"line": 3, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "210"], ["i", "4"]]}, {"line": 5, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "210"], ["i", "4"]]}, {"line": 8, "state": [["h", "211"], ["n", "5"], ["A", "[ 31 , 41 , 59 , 26 , 53 ]"], ["attack", "210"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 4, 3, 0], [3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 0], [3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "4": [[4, 3, 0], [4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 0], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "5": [[5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0]], "8": [[8]]}}
{"id": 7433, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\njava.util.Arrays.sort(a);\nfor (int i = 0; i < a.length / 2; i++) {int temp = a[i];a[i] = a[a.length - 1 - i];a[a.length - 1 - i] = temp;}for (int v : a) {\nh -= v;\nif (h <= 0) {\nSystem.out.println(\"Yes\");\nbreak;}}\nelse {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "a", "[", "i", "]", ";", "a", "[", "i", "]", "=", "a", "[", "a", ".", "length", "-", "1", "-", "i", "]", ";", "a", "[", "a", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "for", "(", "int", "v", ":", "a", ")", "{", "<4>", "h", "-=", "v", ";", "<5>", "if", "(", "h", "<=", "0", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<7>", "break", ";", "}", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"]]}, {"line": 3, "state": [["h", "210"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "59"]]}, {"line": 4, "state": [["h", "151"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "59"]]}, {"line": 5, "state": [["h", "151"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "59"]]}, {"line": 3, "state": [["h", "151"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "53"]]}, {"line": 4, "state": [["h", "98"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "53"]]}, {"line": 5, "state": [["h", "98"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "53"]]}, {"line": 3, "state": [["h", "98"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "41"]]}, {"line": 4, "state": [["h", "57"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "41"]]}, {"line": 5, "state": [["h", "57"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "41"]]}, {"line": 3, "state": [["h", "57"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "31"]]}, {"line": 4, "state": [["h", "26"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "31"]]}, {"line": 5, "state": [["h", "26"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "31"]]}, {"line": 3, "state": [["h", "26"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "26"]]}, {"line": 4, "state": [["h", "0"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "26"]]}, {"line": 5, "state": [["h", "0"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "26"]]}, {"line": 6, "state": [["h", "0"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "26"]]}, {"line": 7, "state": [["h", "0"], ["n", "5"], ["a", "[ 59 , 53 , 41 , 31 , 26 ]"], ["v", "26"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1], [3, 4, 3, 2, 1], [3, 4, 3, 4, 3, 2, 1], [3, 4, 3, 4, 3, 4, 3, 2, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3, 2, 1]], "4": [[4, 3, 2, 1], [4, 3, 4, 3, 2, 1], [4, 3, 4, 3, 4, 3, 2, 1], [4, 3, 4, 3, 4, 3, 4, 3, 2, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1], [5, 4, 3, 4, 3, 2, 1], [5, 4, 3, 4, 3, 4, 3, 2, 1], [5, 4, 3, 4, 3, 4, 3, 4, 3, 2, 1], [5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 2, 1]], "6": [[6]], "7": [[7]]}}
{"id": 3507, "code": "int a = 20, b = 30;\nSystem.out.println(Math.max(0, a - b * 2));", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "Math", ".", "max", "(", "0", ",", "a", "-", "b", "*", "2", ")", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["a", "20"], ["b", "30"]]}, {"line": 2, "state": [["a", "20"], ["b", "30"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]]}}
{"id": 7325, "code": "int H = 10, N = 3;\nint[] data = {4, 5, 6};\nint sum = 0;for (int num : data) {sum += num;}\nif (H - sum > 0) {\nSystem.out.println(\"No\");\n} else {\nSystem.out.println(\"Yes\");}", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "data", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "sum", "=", "0", ";", "for", "(", "int", "num", ":", "data", ")", "{", "sum", "+=", "num", ";", "}", "<3>", "if", "(", "H", "-", "sum", ">", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"], ["data", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"], ["data", "[ 4 , 5 , 6 ]"], ["sum", "15"]]}, {"line": 3, "state": [["H", "10"], ["N", "3"], ["data", "[ 4 , 5 , 6 ]"], ["sum", "15"]]}, {"line": 6, "state": [["H", "10"], ["N", "3"], ["data", "[ 4 , 5 , 6 ]"], ["sum", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 18957, "code": "int N = 5;\nint n = 0;\nif (N % 2 == 0) {\nint s = 5;\nN = N / 2;\nwhile (N >= s) {\nn += N / s;\ns *= 5;}}\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "n", "=", "0", ";", "<2>", "if", "(", "N", "%", "2", "==", "0", ")", "{", "<3>", "int", "s", "=", "5", ";", "<4>", "N", "=", "N", "/", "2", ";", "<5>", "while", "(", "N", ">=", "s", ")", "{", "<6>", "n", "+=", "N", "/", "s", ";", "<7>", "s", "*=", "5", ";", "}", "}", "<8>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["n", "0"]]}, {"line": 2, "state": [["N", "5"], ["n", "0"]]}, {"line": 8, "state": [["N", "5"], ["n", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "8": [[8, 1]]}}
{"id": 13619, "code": "String X = \"happy\"; String Y = \"newyear\"; String Z = \"enjoy\";\nSystem.out.println(X + \" \" + Y + \" \" + Z);", "code_tokens": ["<0>", "String", "X", "=", "\"happy\"", ";", "String", "Y", "=", "\"newyear\"", ";", "String", "Z", "=", "\"enjoy\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "X", "+", "\" \"", "+", "Y", "+", "\" \"", "+", "Z", ")", ";"], "trace": [{"line": 0, "state": [["X", "happy"], ["Y", "newyear"], ["Z", "enjoy"]]}, {"line": 1, "state": [["X", "happy"], ["Y", "newyear"], ["Z", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8990, "code": "int a = 1;\nint b = 2;\nint c = 4;\nint d = 8;\nint e = 9;\nint k = 15;\nint[] S = {a, b, c, d, e};\nint max = S[0];int min = S[0];for (int value : S) {if (value > max) {max = value;}if (value < min) {min = value;}}if ((max - min) <= k) {\nSystem.out.println(\"Yay!\");} else {\nSystem.out.println(\":(\");}", "code_tokens": ["<0>", "int", "a", "=", "1", ";", "<1>", "int", "b", "=", "2", ";", "<2>", "int", "c", "=", "4", ";", "<3>", "int", "d", "=", "8", ";", "<4>", "int", "e", "=", "9", ";", "<5>", "int", "k", "=", "15", ";", "<6>", "int", "[", "]", "S", "=", "{", "a", ",", "b", ",", "c", ",", "d", ",", "e", "}", ";", "<7>", "int", "max", "=", "S", "[", "0", "]", ";", "int", "min", "=", "S", "[", "0", "]", ";", "for", "(", "int", "value", ":", "S", ")", "{", "if", "(", "value", ">", "max", ")", "{", "max", "=", "value", ";", "}", "if", "(", "value", "<", "min", ")", "{", "min", "=", "value", ";", "}", "}", "if", "(", "(", "max", "-", "min", ")", "<=", "k", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"Yay!\"", ")", ";", "}", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "\":(\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "1"]]}, {"line": 1, "state": [["a", "1"], ["b", "2"]]}, {"line": 2, "state": [["a", "1"], ["b", "2"], ["c", "4"]]}, {"line": 3, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"]]}, {"line": 4, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"]]}, {"line": 5, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"]]}, {"line": 6, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["S", "(1 , 2 , 4 , 8 , 9)"]]}, {"line": 7, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["S", "(1 , 2 , 4 , 8 , 9)"]]}, {"line": 8, "state": [["a", "1"], ["b", "2"], ["c", "4"], ["d", "8"], ["e", "9"], ["k", "15"], ["S", "(1 , 2 , 4 , 8 , 9)"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6, 4, 3, 2, 1, 0]], "7": [[7, 6, 4, 3, 2, 1, 0]], "8": [[8]]}}
{"id": 5648, "code": "int n = 2;\nint count = n / 2;\nif (n % 2 == 0) {\nSystem.out.println(count);}\nelse {\ncount = count + 1;\nSystem.out.println(count);}", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "count", "=", "n", "/", "2", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "count", ")", ";", "}", "<4>", "else", "{", "<5>", "count", "=", "count", "+", "1", ";", "<6>", "System", ".", "out", ".", "println", "(", "count", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["count", "1"]]}, {"line": 2, "state": [["n", "2"], ["count", "1"]]}, {"line": 3, "state": [["n", "2"], ["count", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]]}}
{"id": 7599, "code": "int h = 210, n = 5;\nint[] a = {31, 41, 59, 26, 53};\nSystem.out.println((sum(a) >= h) ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "h", "=", "210", ",", "n", "=", "5", ";", "<1>", "int", "[", "]", "a", "=", "{", "31", ",", "41", ",", "59", ",", "26", ",", "53", "}", ";", "<2>", "System", ".", "out", ".", "println", "(", "(", "sum", "(", "a", ")", ">=", "h", ")", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["h", "210"], ["n", "5"]]}, {"line": 1, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}, {"line": 2, "state": [["h", "210"], ["n", "5"], ["a", "[ 31 , 41 , 59 , 26 , 53 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 2268, "code": "int N = 100, A = 100, B = 100;\nint ans1 = Math.min(A, B), ans2 = Math.max(0, A + B - N);\nSystem.out.println(ans1 + \" \" + ans2);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "ans1", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ",", "ans2", "=", "Math", ".", "max", "(", "0", ",", "A", "+", "B", "-", "N", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans1", "+", "\" \"", "+", "ans2", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["ans1", "100"], ["ans2", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["ans1", "100"], ["ans2", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 4810, "code": "String[] st_list = {'i', 'n', 't', 'e', 'r', 'n', 'a', 't', 'i', 'o', 'n', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n'};\nSystem.out.println(st_list[0] + (st_list.length - 2) + st_list[st_list.length - 1]);", "code_tokens": ["<0>", "String", "[", "]", "st_list", "=", "{", "'i'", ",", "'n'", ",", "'t'", ",", "'e'", ",", "'r'", ",", "'n'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", ",", "'a'", ",", "'l'", ",", "'i'", ",", "'z'", ",", "'a'", ",", "'t'", ",", "'i'", ",", "'o'", ",", "'n'", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "st_list", "[", "0", "]", "+", "(", "st_list", ".", "length", "-", "2", ")", "+", "st_list", "[", "st_list", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["st_list", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 1, "state": [["st_list", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 19412, "code": "int n = 10;\nint ans = (n % 2 == 0) ? n : 2 * n;\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "10", ";", "<1>", "int", "ans", "=", "(", "n", "%", "2", "==", "0", ")", "?", "n", ":", "2", "*", "n", ";", "<2>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"]]}, {"line": 1, "state": [["n", "10"], ["ans", "10"]]}, {"line": 2, "state": [["n", "10"], ["ans", "10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1878, "code": "int N = 100, A = 100, B = 100;\nint x;if (A < B) {\nx = A;} else {\nx = B;}\nint y;if (A + B - N < 0) {\ny = 0;} else {\ny = A + B - N;}\nSystem.out.println(x + \" \" + y);", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "x", ";", "if", "(", "A", "<", "B", ")", "{", "<2>", "x", "=", "A", ";", "}", "else", "{", "<3>", "x", "=", "B", ";", "}", "<4>", "int", "y", ";", "if", "(", "A", "+", "B", "-", "N", "<", "0", ")", "{", "<5>", "y", "=", "0", ";", "}", "else", "{", "<6>", "y", "=", "A", "+", "B", "-", "N", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "x", "+", "\" \"", "+", "y", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 4, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["x", "100"]]}, {"line": 5, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["x", "100"]]}, {"line": 8, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["x", "100"], ["y", "100"]]}, {"line": 9, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["x", "100"], ["y", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]], "5": [[5, 4, 1, 0]], "8": [[8, 5, 4, 1, 0]], "9": [[9, 8, 5, 4, 1, 0]]}}
{"id": 5847, "code": "int n = 100;\nint a = n / 2;int b = n % 2;\nSystem.out.println(a + b);", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "int", "a", "=", "n", "/", "2", ";", "int", "b", "=", "n", "%", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "a", "+", "b", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "50"], ["b", "0"]]}, {"line": 2, "state": [["n", "100"], ["a", "50"], ["b", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 17072, "code": "String a = \"D\";String b = \"D\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse {\nif (b.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "{", "<4>", "if", "(", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<6>", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 4, "state": [["a", "D"], ["b", "D"]]}, {"line": 7, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 0]], "7": [[7]]}}
{"id": 4720, "code": "String s = \"internationalization\";\nint n = s.length();\nchar[] S = s.toCharArray();\nString t = S[0] + Integer.toString(n - 2) + S[n - 1];\nSystem.out.println(t);", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "char", "[", "]", "S", "=", "s", ".", "toCharArray", "(", ")", ";", "<3>", "String", "t", "=", "S", "[", "0", "]", "+", "Integer", ".", "toString", "(", "n", "-", "2", ")", "+", "S", "[", "n", "-", "1", "]", ";", "<4>", "System", ".", "out", ".", "println", "(", "t", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["n", "20"]]}, {"line": 2, "state": [["s", "internationalization"], ["n", "20"], ["S", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 3, "state": [["s", "internationalization"], ["n", "20"], ["S", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["t", "i18n"]]}, {"line": 4, "state": [["s", "internationalization"], ["n", "20"], ["S", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"], ["t", "i18n"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 14420, "code": "int n = 7;\nint[] a = {1, 2, 3, 2, 1, 999999999, 1000000000};\nboolean up = false;\nboolean down = false;\nint ans = 1;\nfor (int i = 1; i < n; i++) {\nif (up) {\nif (a[i] < a[i - 1]) {\nans += 1;\nup = false;}\n} else if (down) {\nif (a[i] > a[i - 1]) {\nans += 1;\ndown = false;}\n} else {\nif (a[i] > a[i - 1]) {\nup = true;\n} else if (a[i] < a[i - 1]) {\ndown = true;}}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "boolean", "up", "=", "false", ";", "<3>", "boolean", "down", "=", "false", ";", "<4>", "int", "ans", "=", "1", ";", "<5>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "if", "(", "up", ")", "{", "<7>", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "-", "1", "]", ")", "{", "<8>", "ans", "+=", "1", ";", "<9>", "up", "=", "false", ";", "}", "<10>", "}", "else", "if", "(", "down", ")", "{", "<11>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "-", "1", "]", ")", "{", "<12>", "ans", "+=", "1", ";", "<13>", "down", "=", "false", ";", "}", "<14>", "}", "else", "{", "<15>", "if", "(", "a", "[", "i", "]", ">", "a", "[", "i", "-", "1", "]", ")", "{", "<16>", "up", "=", "true", ";", "<17>", "}", "else", "if", "(", "a", "[", "i", "]", "<", "a", "[", "i", "-", "1", "]", ")", "{", "<18>", "down", "=", "true", ";", "}", "}", "}", "<19>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"]]}, {"line": 3, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"]]}, {"line": 4, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 16, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "3"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "3"]]}, {"line": 7, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "1"], ["i", "3"]]}, {"line": 8, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 9, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 17, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "2"], ["i", "4"]]}, {"line": 18, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}, {"line": 11, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "True"], ["ans", "2"], ["i", "5"]]}, {"line": 12, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "True"], ["ans", "3"], ["i", "5"]]}, {"line": 13, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "3"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 10, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 15, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "False"], ["down", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 16, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "3"], ["i", "6"]]}, {"line": 19, "state": [["n", "7"], ["a", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["up", "True"], ["down", "False"], ["ans", "3"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 15, 5, 0], [5, 7, 5, 15, 5, 0], [5, 7, 5, 7, 5, 15, 5, 0], [5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0], [5, 11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0], [5, 15, 5, 11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "6": [[6, 2], [6, 16, 6, 2], [6, 16, 6, 2], [6, 9, 6, 16, 6, 2], [6, 9, 6, 16, 6, 2], [6, 9, 6, 16, 6, 2]], "7": [[7, 5, 15, 5, 0], [7, 5, 7, 5, 15, 5, 0]], "8": [[8, 4]], "9": [[9, 6, 16, 6, 2]], "10": [[10, 3], [10, 3], [10, 18, 10, 3], [10, 13, 10, 18, 10, 3]], "11": [[11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "12": [[12, 8, 4]], "13": [[13, 10, 18, 10, 3]], "15": [[15, 5, 0], [15, 5, 7, 5, 7, 5, 15, 5, 0], [15, 5, 11, 5, 17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "16": [[16, 6, 2], [16, 6, 9, 6, 16, 6, 2]], "17": [[17, 15, 5, 7, 5, 7, 5, 15, 5, 0]], "18": [[18, 10, 3]], "19": [[19, 12, 8, 4]]}}
{"id": 1178, "code": "String x = \"750\";\nif (Integer.parseInt(String.valueOf(x.charAt(0))) > Integer.parseInt(String.valueOf(x.charAt(1)))) {\nSystem.out.println(String.valueOf(x.charAt(0)).repeat(3));\n} else if (Integer.parseInt(String.valueOf(x.charAt(0))) == Integer.parseInt(String.valueOf(x.charAt(1)))) {\nif (Integer.parseInt(String.valueOf(x.charAt(0))) >= Integer.parseInt(String.valueOf(x.charAt(2)))) {\nSystem.out.println(String.valueOf(x.charAt(0)).repeat(3));\n} else {\nSystem.out.println(String.valueOf(Integer.parseInt(String.valueOf(x.charAt(0))) + 1).repeat(3));}\n} else {\nSystem.out.println(String.valueOf(Integer.parseInt(String.valueOf(x.charAt(0))) + 1).repeat(3));}", "code_tokens": ["<0>", "String", "x", "=", "\"750\"", ";", "<1>", "if", "(", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ")", ">", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "1", ")", ")", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ".", "repeat", "(", "3", ")", ")", ";", "<3>", "}", "else", "if", "(", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ")", "==", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "1", ")", ")", ")", ")", "{", "<4>", "if", "(", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ")", ">=", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "2", ")", ")", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ".", "repeat", "(", "3", ")", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ")", "+", "1", ")", ".", "repeat", "(", "3", ")", ")", ";", "}", "<8>", "}", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "String", ".", "valueOf", "(", "Integer", ".", "parseInt", "(", "String", ".", "valueOf", "(", "x", ".", "charAt", "(", "0", ")", ")", ")", "+", "1", ")", ".", "repeat", "(", "3", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["x", "750"]]}, {"line": 1, "state": [["x", "750"]]}, {"line": 2, "state": [["x", "750"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 1674, "code": "int n = 10, a = 7, b = 5;\nif (n < a + b) {\nSystem.out.println(Math.min(a, b) + \" \" + (a + b - n));}\nelse {\nSystem.out.println(Math.min(a, b) + \" \" + 0);}", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "if", "(", "n", "<", "a", "+", "b", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "(", "a", "+", "b", "-", "n", ")", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 2, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 15572, "code": "int x = 13, y = 3, z = 1;\nint temp = z;\nint result = 0;\nwhile (temp <= x - y - z) {\ntemp = temp + y + z;\nresult = result + 1;}\nSystem.out.println(result);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "temp", "=", "z", ";", "<2>", "int", "result", "=", "0", ";", "<3>", "while", "(", "temp", "<=", "x", "-", "y", "-", "z", ")", "{", "<4>", "temp", "=", "temp", "+", "y", "+", "z", ";", "<5>", "result", "=", "result", "+", "1", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "result", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "1"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "1"], ["result", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "1"], ["result", "0"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "5"], ["result", "0"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "5"], ["result", "1"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "5"], ["result", "1"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "9"], ["result", "1"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "9"], ["result", "2"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "9"], ["result", "2"]]}, {"line": 4, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "13"], ["result", "2"]]}, {"line": 5, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "13"], ["result", "3"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "13"], ["result", "3"]]}, {"line": 6, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["temp", "13"], ["result", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3, 1, 0], [3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 1, 0], [3, 4, 3, 4, 3, 4, 3, 1, 0]], "4": [[4, 3, 1, 0], [4, 3, 4, 3, 1, 0], [4, 3, 4, 3, 4, 3, 1, 0]], "5": [[5, 2], [5, 2], [5, 2]], "6": [[6, 5, 2]]}}
{"id": 4072, "code": "int h = 10, m = 0, a = 15, b = 0, k = 30;\nint h_to_min = h * 60;\nint a_to_min = a * 60;\nint re1 = a_to_min - h_to_min;\nint re2 = b - m;\nint re = re1 + re2;\nSystem.out.println(re - k);", "code_tokens": ["<0>", "int", "h", "=", "10", ",", "m", "=", "0", ",", "a", "=", "15", ",", "b", "=", "0", ",", "k", "=", "30", ";", "<1>", "int", "h_to_min", "=", "h", "*", "60", ";", "<2>", "int", "a_to_min", "=", "a", "*", "60", ";", "<3>", "int", "re1", "=", "a_to_min", "-", "h_to_min", ";", "<4>", "int", "re2", "=", "b", "-", "m", ";", "<5>", "int", "re", "=", "re1", "+", "re2", ";", "<6>", "System", ".", "out", ".", "println", "(", "re", "-", "k", ")", ";"], "trace": [{"line": 0, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"]]}, {"line": 1, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"], ["h_to_min", "600"]]}, {"line": 2, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"], ["h_to_min", "600"], ["a_to_min", "900"]]}, {"line": 3, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"], ["h_to_min", "600"], ["a_to_min", "900"], ["re1", "300"]]}, {"line": 4, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"], ["h_to_min", "600"], ["a_to_min", "900"], ["re1", "300"], ["re2", "0"]]}, {"line": 5, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"], ["h_to_min", "600"], ["a_to_min", "900"], ["re1", "300"], ["re2", "0"], ["re", "300"]]}, {"line": 6, "state": [["h", "10"], ["m", "0"], ["a", "15"], ["b", "0"], ["k", "30"], ["h_to_min", "600"], ["a_to_min", "900"], ["re1", "300"], ["re2", "0"], ["re", "300"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 0]], "5": [[5, 4, 0]], "6": [[6, 5, 4, 0]]}}
{"id": 12037, "code": "int[] input1 = {11, 16};\nint[] input2 = {11, 17};\nint m1 = input1[0];\nint d1 = input1[1];\nint m2 = input2[0];\nint d2 = input2[1];\nif (m1 == m2) {\nSystem.out.println(0);}\nelse {\nSystem.out.println(1);}", "code_tokens": ["<0>", "int", "[", "]", "input1", "=", "{", "11", ",", "16", "}", ";", "<1>", "int", "[", "]", "input2", "=", "{", "11", ",", "17", "}", ";", "<2>", "int", "m1", "=", "input1", "[", "0", "]", ";", "<3>", "int", "d1", "=", "input1", "[", "1", "]", ";", "<4>", "int", "m2", "=", "input2", "[", "0", "]", ";", "<5>", "int", "d2", "=", "input2", "[", "1", "]", ";", "<6>", "if", "(", "m1", "==", "m2", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<8>", "else", "{", "<9>", "System", ".", "out", ".", "println", "(", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["input1", "[ 11 , 16 ]"]]}, {"line": 1, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"]]}, {"line": 2, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"], ["m1", "11"]]}, {"line": 3, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"], ["m1", "11"], ["d1", "16"]]}, {"line": 4, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"], ["m1", "11"], ["d1", "16"], ["m2", "11"]]}, {"line": 5, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"], ["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 6, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"], ["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}, {"line": 7, "state": [["input1", "[ 11 , 16 ]"], ["input2", "[ 11 , 17 ]"], ["m1", "11"], ["d1", "16"], ["m2", "11"], ["d2", "17"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 1]], "5": [[5, 4, 1]], "6": [[6, 4, 1]], "7": [[7]]}}
{"id": 7269, "code": "int H = 210, N = 5;\nString[] input = \"31 41 59 26 53\".split(\" \");int[] A_list = new int[N];for (int i = 0; i < N; i++) {A_list[i] = Integer.parseInt(input[i]);}\nString ans = (sum(A_list) >= H) ? \"Yes\" : \"No\";\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "H", "=", "210", ",", "N", "=", "5", ";", "<1>", "String", "[", "]", "input", "=", "\"31 41 59 26 53\"", ".", "split", "(", "\" \"", ")", ";", "int", "[", "]", "A_list", "=", "new", "int", "[", "N", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "A_list", "[", "i", "]", "=", "Integer", ".", "parseInt", "(", "input", "[", "i", "]", ")", ";", "}", "<2>", "String", "ans", "=", "(", "sum", "(", "A_list", ")", ">=", "H", ")", "?", "\"Yes\"", ":", "\"No\"", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["H", "210"], ["N", "5"]]}, {"line": 1, "state": [["H", "210"], ["N", "5"]]}, {"line": 2, "state": [["H", "210"], ["N", "5"], ["ans", "Yes"]]}, {"line": 3, "state": [["H", "210"], ["N", "5"], ["ans", "Yes"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 13289, "code": "String s = \"happy,newyear,enjoy\";\nString a = s.substring(0, 5);\nString b = s.substring(6, 13);\nString c = s.substring(14);\nSystem.out.println(a + \" \" + b + \" \" + c);", "code_tokens": ["<0>", "String", "s", "=", "\"happy,newyear,enjoy\"", ";", "<1>", "String", "a", "=", "s", ".", "substring", "(", "0", ",", "5", ")", ";", "<2>", "String", "b", "=", "s", ".", "substring", "(", "6", ",", "13", ")", ";", "<3>", "String", "c", "=", "s", ".", "substring", "(", "14", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "a", "+", "\" \"", "+", "b", "+", "\" \"", "+", "c", ")", ";"], "trace": [{"line": 0, "state": [["s", "happy , newyear , enjoy"]]}, {"line": 1, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"]]}, {"line": 2, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"], ["b", "newyear"]]}, {"line": 3, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}, {"line": 4, "state": [["s", "happy , newyear , enjoy"], ["a", "happy"], ["b", "newyear"], ["c", "enjoy"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 13488, "code": "String s = \"haiku,atcoder,tasks\";\nSystem.out.println(String.join(\" \", s.split(\",\")));", "code_tokens": ["<0>", "String", "s", "=", "\"haiku,atcoder,tasks\"", ";", "<1>", "System", ".", "out", ".", "println", "(", "String", ".", "join", "(", "\" \"", ",", "s", ".", "split", "(", "\",\"", ")", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "haiku , atcoder , tasks"]]}, {"line": 1, "state": [["s", "haiku , atcoder , tasks"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 18855, "code": "int N = 5, x = 9;\nint[] values = {3, 1, 4, 1, 5};\nint count = 0;\nint v1 = values[0];\nfor (int i = 1; i < values.length; i++) {int v2 = values[i];\nint surplus = Math.max(v1 + v2 - x, 0);\ncount += surplus;\nv1 = Math.max(0, v2 - surplus);}\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "N", "=", "5", ",", "x", "=", "9", ";", "<1>", "int", "[", "]", "values", "=", "{", "3", ",", "1", ",", "4", ",", "1", ",", "5", "}", ";", "<2>", "int", "count", "=", "0", ";", "<3>", "int", "v1", "=", "values", "[", "0", "]", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "values", ".", "length", ";", "i", "++", ")", "{", "int", "v2", "=", "values", "[", "i", "]", ";", "<5>", "int", "surplus", "=", "Math", ".", "max", "(", "v1", "+", "v2", "-", "x", ",", "0", ")", ";", "<6>", "count", "+=", "surplus", ";", "<7>", "v1", "=", "Math", ".", "max", "(", "0", ",", "v2", "-", "surplus", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"], ["x", "9"]]}, {"line": 1, "state": [["N", "5"], ["x", "9"]]}, {"line": 2, "state": [["N", "5"], ["x", "9"], ["count", "0"]]}, {"line": 3, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "3"]]}, {"line": 4, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "3"], ["v2", "1"]]}, {"line": 5, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "3"], ["v2", "1"], ["surplus", "0"]]}, {"line": 6, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "3"], ["v2", "1"], ["surplus", "0"]]}, {"line": 7, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "1"], ["surplus", "0"]]}, {"line": 4, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "4"], ["surplus", "0"]]}, {"line": 5, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "4"], ["surplus", "0"]]}, {"line": 6, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "4"], ["surplus", "0"]]}, {"line": 7, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "4"], ["v2", "4"], ["surplus", "0"]]}, {"line": 4, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "4"], ["v2", "1"], ["surplus", "0"]]}, {"line": 5, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "4"], ["v2", "1"], ["surplus", "0"]]}, {"line": 6, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "4"], ["v2", "1"], ["surplus", "0"]]}, {"line": 7, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "1"], ["surplus", "0"]]}, {"line": 4, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "5"], ["surplus", "0"]]}, {"line": 5, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "5"], ["surplus", "0"]]}, {"line": 6, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "1"], ["v2", "5"], ["surplus", "0"]]}, {"line": 7, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "5"], ["v2", "5"], ["surplus", "0"]]}, {"line": 4, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "5"], ["v2", "5"], ["surplus", "0"]]}, {"line": 8, "state": [["N", "5"], ["x", "9"], ["count", "0"], ["v1", "5"], ["v2", "5"], ["surplus", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1]], "4": [[4, 3, 1], [4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "5": [[5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "6": [[6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "7": [[7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]], "8": [[8, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 7, 6, 5, 4, 3, 1]]}}
{"id": 5933, "code": "int N = 2;\nint ans = 0;\nans = (int) Math.ceil((double) N / 2);\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "int", "ans", "=", "0", ";", "<2>", "ans", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "N", "/", "2", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "2"]]}, {"line": 1, "state": [["N", "2"], ["ans", "0"]]}, {"line": 2, "state": [["N", "2"], ["ans", "1"]]}, {"line": 3, "state": [["N", "2"], ["ans", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 11542, "code": "String S = \"SUN\";\nif (S.equals(\"SUN\")) {\nSystem.out.println(\"7\");\n} else if (S.equals(\"MON\")) {\nSystem.out.println(\"6\");\n} else if (S.equals(\"TUE\")) {\nSystem.out.println(\"5\");\n} else if (S.equals(\"WED\")) {\nSystem.out.println(\"4\");\n} else if (S.equals(\"THU\")) {\nSystem.out.println(\"3\");\n} else if (S.equals(\"FRI\")) {\nSystem.out.println(\"2\");\n} else if (S.equals(\"SAT\")) {\nSystem.out.println(\"1\");\n} else {\nSystem.out.println(\"Error\");}", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"7\"", ")", ";", "<3>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"6\"", ")", ";", "<5>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"5\"", ")", ";", "<7>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<8>", "System", ".", "out", ".", "println", "(", "\"4\"", ")", ";", "<9>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "\"3\"", ")", ";", "<11>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<12>", "System", ".", "out", ".", "println", "(", "\"2\"", ")", ";", "<13>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<14>", "System", ".", "out", ".", "println", "(", "\"1\"", ")", ";", "<15>", "}", "else", "{", "<16>", "System", ".", "out", ".", "println", "(", "\"Error\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"]]}, {"line": 2, "state": [["S", "SUN"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 1862, "code": "Scanner scanner = new Scanner(System.in);\nint N = 10, A = 7, B = 5;\nint M = Math.min(A, B);\nint m = 0;\nif (A + B > N) {\nm = A + B - N;}\nelse {\nm = 0;}\nSystem.out.println(M + \" \" + m);", "code_tokens": ["<0>", "Scanner", "scanner", "=", "new", "Scanner", "(", "System", ".", "in", ")", ";", "<1>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<2>", "int", "M", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<3>", "int", "m", "=", "0", ";", "<4>", "if", "(", "A", "+", "B", ">", "N", ")", "{", "<5>", "m", "=", "A", "+", "B", "-", "N", ";", "}", "<6>", "else", "{", "<7>", "m", "=", "0", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "M", "+", "\" \"", "+", "m", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["M", "5"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["M", "5"], ["m", "0"]]}, {"line": 5, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["M", "5"], ["m", "0"]]}, {"line": 6, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["M", "5"], ["m", "2"]]}, {"line": 9, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["M", "5"], ["m", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5, 3, 2]], "6": [[6, 5, 3, 2]], "9": [[9, 6, 5, 3, 2]]}}
{"id": 7573, "code": "int H = 10, N = 3;\nSystem.out.println(\"NYoe s\".charAt(H <= (4 + 5 + 6) ? 0 : 1));", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"NYoe s\"", ".", "charAt", "(", "H", "<=", "(", "4", "+", "5", "+", "6", ")", "?", "0", ":", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 2786, "code": "String S = \"35753\";\nint ans = 1000;\nfor (int i = 0; i < S.length() - 2; i++) {\nint x = Integer.parseInt(S.substring(i, i + 3));\nint dif = Math.abs(753 - x);\nans = Math.min(dif, ans);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "S", "=", "\"35753\"", ";", "<1>", "int", "ans", "=", "1000", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "x", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "int", "dif", "=", "Math", ".", "abs", "(", "753", "-", "x", ")", ";", "<5>", "ans", "=", "Math", ".", "min", "(", "dif", ",", "ans", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["S", "35753"]]}, {"line": 1, "state": [["S", "35753"], ["ans", "1000"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "1000"], ["i", "0"]]}, {"line": 3, "state": [["S", "35753"], ["ans", "1000"], ["i", "0"], ["x", "357"]]}, {"line": 4, "state": [["S", "35753"], ["ans", "1000"], ["i", "0"], ["x", "357"], ["dif", "396"]]}, {"line": 5, "state": [["S", "35753"], ["ans", "396"], ["i", "0"], ["x", "357"], ["dif", "396"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "396"], ["i", "1"], ["x", "357"], ["dif", "396"]]}, {"line": 3, "state": [["S", "35753"], ["ans", "396"], ["i", "1"], ["x", "575"], ["dif", "396"]]}, {"line": 4, "state": [["S", "35753"], ["ans", "396"], ["i", "1"], ["x", "575"], ["dif", "178"]]}, {"line": 5, "state": [["S", "35753"], ["ans", "178"], ["i", "1"], ["x", "575"], ["dif", "178"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "178"], ["i", "2"], ["x", "575"], ["dif", "178"]]}, {"line": 3, "state": [["S", "35753"], ["ans", "178"], ["i", "2"], ["x", "753"], ["dif", "178"]]}, {"line": 4, "state": [["S", "35753"], ["ans", "178"], ["i", "2"], ["x", "753"], ["dif", "0"]]}, {"line": 5, "state": [["S", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"], ["dif", "0"]]}, {"line": 2, "state": [["S", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"], ["dif", "0"]]}, {"line": 6, "state": [["S", "35753"], ["ans", "0"], ["i", "2"], ["x", "753"], ["dif", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 0], [5, 4, 3, 2, 3, 2, 0], [5, 4, 3, 2, 3, 2, 3, 2, 0]], "6": [[6, 5, 4, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 11259, "code": "int SUN_N = 0;\nint MON_N = 1;\nint TUE_N = 2;\nint WED_N = 3;\nint THU_N = 4;\nint FRI_N = 5;\nint SAT_N = 6;\nString S = \"SUN\";\nint From_days;if (S.equals(\"SUN\")) {\nFrom_days = SUN_N;\n} else if (S.equals(\"MON\")) {\nFrom_days = MON_N;\n} else if (S.equals(\"TUE\")) {\nFrom_days = TUE_N;\n} else if (S.equals(\"WED\")) {\nFrom_days = WED_N;\n} else if (S.equals(\"THU\")) {\nFrom_days = THU_N;\n} else if (S.equals(\"FRI\")) {\nFrom_days = FRI_N;\n} else if (S.equals(\"SAT\")) {\nFrom_days = SAT_N;\n} else {\nFrom_days = -99;}\nint To_days = 7 - From_days;\nSystem.out.println(To_days);", "code_tokens": ["<0>", "int", "SUN_N", "=", "0", ";", "<1>", "int", "MON_N", "=", "1", ";", "<2>", "int", "TUE_N", "=", "2", ";", "<3>", "int", "WED_N", "=", "3", ";", "<4>", "int", "THU_N", "=", "4", ";", "<5>", "int", "FRI_N", "=", "5", ";", "<6>", "int", "SAT_N", "=", "6", ";", "<7>", "String", "S", "=", "\"SUN\"", ";", "<8>", "int", "From_days", ";", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<9>", "From_days", "=", "SUN_N", ";", "<10>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"MON\"", ")", ")", "{", "<11>", "From_days", "=", "MON_N", ";", "<12>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"TUE\"", ")", ")", "{", "<13>", "From_days", "=", "TUE_N", ";", "<14>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"WED\"", ")", ")", "{", "<15>", "From_days", "=", "WED_N", ";", "<16>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"THU\"", ")", ")", "{", "<17>", "From_days", "=", "THU_N", ";", "<18>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"FRI\"", ")", ")", "{", "<19>", "From_days", "=", "FRI_N", ";", "<20>", "}", "else", "if", "(", "S", ".", "equals", "(", "\"SAT\"", ")", ")", "{", "<21>", "From_days", "=", "SAT_N", ";", "<22>", "}", "else", "{", "<23>", "From_days", "=", "-", "99", ";", "}", "<24>", "int", "To_days", "=", "7", "-", "From_days", ";", "<25>", "System", ".", "out", ".", "println", "(", "To_days", ")", ";"], "trace": [{"line": 0, "state": [["SUN_N", "0"]]}, {"line": 1, "state": [["SUN_N", "0"], ["MON_N", "1"]]}, {"line": 2, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"]]}, {"line": 3, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"]]}, {"line": 4, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"]]}, {"line": 5, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"]]}, {"line": 6, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"], ["SAT_N", "6"]]}, {"line": 7, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"], ["SAT_N", "6"], ["S", "SUN"]]}, {"line": 8, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"], ["SAT_N", "6"], ["S", "SUN"]]}, {"line": 9, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"], ["SAT_N", "6"], ["S", "SUN"], ["From_days", "0"]]}, {"line": 24, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"], ["SAT_N", "6"], ["S", "SUN"], ["From_days", "0"], ["To_days", "7"]]}, {"line": 25, "state": [["SUN_N", "0"], ["MON_N", "1"], ["TUE_N", "2"], ["WED_N", "3"], ["THU_N", "4"], ["FRI_N", "5"], ["SAT_N", "6"], ["S", "SUN"], ["From_days", "0"], ["To_days", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8, 7]], "9": [[9, 0]], "24": [[24, 9, 0]], "25": [[25, 24, 9, 0]]}}
{"id": 9103, "code": "String[] S = {\"2017\", \"01\", \"31\"};\nSystem.out.println(\"2018/\" + S[1] + \"/\" + S[2]);", "code_tokens": ["<0>", "String", "[", "]", "S", "=", "{", "\"2017\"", ",", "\"01\"", ",", "\"31\"", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "\"2018/\"", "+", "S", "[", "1", "]", "+", "\"/\"", "+", "S", "[", "2", "]", ")", ";"], "trace": [{"line": 0, "state": [["S", "[ 2017 , 01 , 31 ]"]]}, {"line": 1, "state": [["S", "[ 2017 , 01 , 31 ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 16068, "code": "int A = 20, B = 15;\nif (A - B * 2 < 0) {\nSystem.out.println(\"0\");}\nelse {\nSystem.out.println(A - B * 2);}", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "15", ";", "<1>", "if", "(", "A", "-", "B", "*", "2", "<", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"0\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "A", "-", "B", "*", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "15"]]}, {"line": 1, "state": [["A", "20"], ["B", "15"]]}, {"line": 2, "state": [["A", "20"], ["B", "15"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 1139, "code": "String str_n = \"750\";\nint temp = Character.getNumericValue(str_n.charAt(0));\ntemp = 111 * temp;\nint int_n = Integer.parseInt(str_n);\nif (int_n > temp) {\ntemp = Character.getNumericValue(str_n.charAt(0));\ntemp = temp + 1;\nSystem.out.println(111 * temp);}\nelse {\ntemp = Character.getNumericValue(str_n.charAt(0));\nSystem.out.println(111 * temp);}", "code_tokens": ["<0>", "String", "str_n", "=", "\"750\"", ";", "<1>", "int", "temp", "=", "Character", ".", "getNumericValue", "(", "str_n", ".", "charAt", "(", "0", ")", ")", ";", "<2>", "temp", "=", "111", "*", "temp", ";", "<3>", "int", "int_n", "=", "Integer", ".", "parseInt", "(", "str_n", ")", ";", "<4>", "if", "(", "int_n", ">", "temp", ")", "{", "<5>", "temp", "=", "Character", ".", "getNumericValue", "(", "str_n", ".", "charAt", "(", "0", ")", ")", ";", "<6>", "temp", "=", "temp", "+", "1", ";", "<7>", "System", ".", "out", ".", "println", "(", "111", "*", "temp", ")", ";", "}", "<8>", "else", "{", "<9>", "temp", "=", "Character", ".", "getNumericValue", "(", "str_n", ".", "charAt", "(", "0", ")", ")", ";", "<10>", "System", ".", "out", ".", "println", "(", "111", "*", "temp", ")", ";", "}"], "trace": [{"line": 0, "state": [["str_n", "750"]]}, {"line": 1, "state": [["str_n", "750"], ["temp", "7"]]}, {"line": 2, "state": [["str_n", "750"], ["temp", "777"]]}, {"line": 3, "state": [["str_n", "750"], ["temp", "777"], ["int_n", "750"]]}, {"line": 4, "state": [["str_n", "750"], ["temp", "777"], ["int_n", "750"]]}, {"line": 9, "state": [["str_n", "750"], ["temp", "7"], ["int_n", "750"]]}, {"line": 10, "state": [["str_n", "750"], ["temp", "7"], ["int_n", "750"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "9": [[9, 4, 3, 1, 0]], "10": [[10, 9, 4, 3, 1, 0]]}}
{"id": 18433, "code": "int h = 2;\nint w = 100;\nint n = 200;\nint temp = Math.max(h, w);w = Math.min(h, w);h = temp;\nint black_tile = 0;\nfor (int i = 0; i < w; i++) {\nblack_tile += h;\nif (black_tile >= n) break;}\nSystem.out.println(i + 1);", "code_tokens": ["<0>", "int", "h", "=", "2", ";", "<1>", "int", "w", "=", "100", ";", "<2>", "int", "n", "=", "200", ";", "<3>", "int", "temp", "=", "Math", ".", "max", "(", "h", ",", "w", ")", ";", "w", "=", "Math", ".", "min", "(", "h", ",", "w", ")", ";", "h", "=", "temp", ";", "<4>", "int", "black_tile", "=", "0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "w", ";", "i", "++", ")", "{", "<6>", "black_tile", "+=", "h", ";", "<7>", "if", "(", "black_tile", ">=", "n", ")", "break", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "i", "+", "1", ")", ";"], "trace": [{"line": 0, "state": [["h", "2"]]}, {"line": 1, "state": [["h", "2"], ["w", "100"]]}, {"line": 2, "state": [["h", "2"], ["w", "100"], ["n", "200"]]}, {"line": 3, "state": [["h", "100"], ["w", "2"], ["n", "200"]]}, {"line": 4, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "0"]]}, {"line": 5, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "0"], ["i", "0"]]}, {"line": 6, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "100"], ["i", "0"]]}, {"line": 7, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "100"], ["i", "0"]]}, {"line": 5, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "100"], ["i", "1"]]}, {"line": 6, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "200"], ["i", "1"]]}, {"line": 7, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "200"], ["i", "1"]]}, {"line": 8, "state": [["h", "100"], ["w", "2"], ["n", "200"], ["black_tile", "200"], ["i", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4]], "5": [[5, 3, 1, 0], [5, 3, 1, 0]], "6": [[6, 4, 3, 1, 0], [6, 7, 6, 4, 3, 1, 0]], "7": [[7, 6, 4, 3, 1, 0], [7, 6, 7, 6, 4, 3, 1, 0]], "8": [[8, 5, 3, 1, 0]]}}
{"id": 5388, "code": "String x = \"100\";\nint page = (Integer.parseInt(x) + 1) / 2;\nSystem.out.println(page);", "code_tokens": ["<0>", "String", "x", "=", "\"100\"", ";", "<1>", "int", "page", "=", "(", "Integer", ".", "parseInt", "(", "x", ")", "+", "1", ")", "/", "2", ";", "<2>", "System", ".", "out", ".", "println", "(", "page", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["x", "100"]]}, {"line": 2, "state": [["x", "100"], ["page", "50"]]}, {"line": 3, "state": [["x", "100"], ["page", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]]}}
{"id": 12949, "code": "int n = 6;\nSystem.out.println(new String[]{\"NO\", \"YES\"}[n == 3 || n == 5 || n == 7 ? 1 : 0]);", "code_tokens": ["<0>", "int", "n", "=", "6", ";", "<1>", "System", ".", "out", ".", "println", "(", "new", "String", "[", "]", "{", "\"NO\"", ",", "\"YES\"", "}", "[", "n", "==", "3", "||", "n", "==", "5", "||", "n", "==", "7", "?", "1", ":", "0", "]", ")", ";"], "trace": [{"line": 0, "state": [["n", "6"]]}, {"line": 1, "state": [["n", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6935, "code": "int H = 10, N = 3;\nint[] A = {4, 5, 6};\nint sum = 0;for (int num : A) {sum += num;}System.out.println(sum >= H ? \"Yes\" : \"No\");", "code_tokens": ["<0>", "int", "H", "=", "10", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "sum", "=", "0", ";", "for", "(", "int", "num", ":", "A", ")", "{", "sum", "+=", "num", ";", "}", "System", ".", "out", ".", "println", "(", "sum", ">=", "H", "?", "\"Yes\"", ":", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["H", "10"], ["N", "3"]]}, {"line": 1, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "10"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1, 0]]}}
{"id": 19227, "code": "int n = 5;\nif (n % 2 != 0) {\nSystem.out.println(0);}\nelse {\nint c = 0;\nn /= 2;\nwhile (n != 0) {\nn /= 5;\nc += n;}\nSystem.out.println(c);}", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "if", "(", "n", "%", "2", "!=", "0", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}", "<3>", "else", "{", "<4>", "int", "c", "=", "0", ";", "<5>", "n", "/=", "2", ";", "<6>", "while", "(", "n", "!=", "0", ")", "{", "<7>", "n", "/=", "5", ";", "<8>", "c", "+=", "n", ";", "}", "<9>", "System", ".", "out", ".", "println", "(", "c", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"]]}, {"line": 2, "state": [["n", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]]}}
{"id": 7221, "code": "int H = 20, N = 3;\nint[] A = {4, 5, 6};\njava.util.Arrays.sort(A);\nfor (int j = 0; j < A.length / 2; j++) {int temp = A[j];A[j] = A[A.length - 1 - j];A[A.length - 1 - j] = temp;}\nfor (int i : A) {\nH -= i;\nif (H <= 0) {\nSystem.out.println(\"Yes\");\nSystem.exit(0);}}\nSystem.out.println(\"No\");", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "java", ".", "util", ".", "Arrays", ".", "sort", "(", "A", ")", ";", "<3>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "A", ".", "length", "/", "2", ";", "j", "++", ")", "{", "int", "temp", "=", "A", "[", "j", "]", ";", "A", "[", "j", "]", "=", "A", "[", "A", ".", "length", "-", "1", "-", "j", "]", ";", "A", "[", "A", ".", "length", "-", "1", "-", "j", "]", "=", "temp", ";", "}", "<4>", "for", "(", "int", "i", ":", "A", ")", "{", "<5>", "H", "-=", "i", ";", "<6>", "if", "(", "H", "<=", "0", ")", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<8>", "System", ".", "exit", "(", "0", ")", ";", "}", "}", "<9>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";"], "trace": [{"line": 0, "state": [["H", "20"], ["N", "3"]]}, {"line": 1, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "6"]]}, {"line": 4, "state": [["H", "14"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "6"]]}, {"line": 5, "state": [["H", "14"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "6"]]}, {"line": 3, "state": [["H", "14"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "5"]]}, {"line": 4, "state": [["H", "9"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "5"]]}, {"line": 5, "state": [["H", "9"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "5"]]}, {"line": 3, "state": [["H", "9"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "4"]]}, {"line": 4, "state": [["H", "5"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "4"]]}, {"line": 5, "state": [["H", "5"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "4"]]}, {"line": 3, "state": [["H", "5"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "4"]]}, {"line": 8, "state": [["H", "5"], ["N", "3"], ["A", "[ 6 , 5 , 4 ]"], ["i", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1], [3, 4, 3, 2, 1], [3, 4, 3, 4, 3, 2, 1], [3, 4, 3, 4, 3, 4, 3, 2, 1]], "4": [[4, 3, 2, 1], [4, 3, 4, 3, 2, 1], [4, 3, 4, 3, 4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1], [5, 4, 3, 4, 3, 2, 1], [5, 4, 3, 4, 3, 4, 3, 2, 1]], "8": [[8]]}}
{"id": 2183, "code": "int N = 10, A = 7, B = 5;\nint max_ans = Math.min(A, B);\nint tmp = A + B - N;\nint min_ans = (tmp <= 0) ? 0 : tmp;\nSystem.out.println(max_ans + \" \" + min_ans);", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "7", ",", "B", "=", "5", ";", "<1>", "int", "max_ans", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "tmp", "=", "A", "+", "B", "-", "N", ";", "<3>", "int", "min_ans", "=", "(", "tmp", "<=", "0", ")", "?", "0", ":", "tmp", ";", "<4>", "System", ".", "out", ".", "println", "(", "max_ans", "+", "\" \"", "+", "min_ans", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "7"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_ans", "5"]]}, {"line": 2, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_ans", "5"], ["tmp", "2"]]}, {"line": 3, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_ans", "5"], ["tmp", "2"], ["min_ans", "2"]]}, {"line": 4, "state": [["N", "10"], ["A", "7"], ["B", "5"], ["max_ans", "5"], ["tmp", "2"], ["min_ans", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 7596, "code": "String[] input = \"211 5\".split(\" \");int h = Integer.parseInt(input[0]);int n = Integer.parseInt(input[1]);int sum = 0;String[] numbers = \"31 41 59 26 53\".split(\" \");for (String number : numbers) {sum += Integer.parseInt(number);}System.out.println(\"NYoe s\".charAt(h <= sum ? 0 : 1));", "code_tokens": ["<0>", "String", "[", "]", "input", "=", "\"211 5\"", ".", "split", "(", "\" \"", ")", ";", "int", "h", "=", "Integer", ".", "parseInt", "(", "input", "[", "0", "]", ")", ";", "int", "n", "=", "Integer", ".", "parseInt", "(", "input", "[", "1", "]", ")", ";", "int", "sum", "=", "0", ";", "String", "[", "]", "numbers", "=", "\"31 41 59 26 53\"", ".", "split", "(", "\" \"", ")", ";", "for", "(", "String", "number", ":", "numbers", ")", "{", "sum", "+=", "Integer", ".", "parseInt", "(", "number", ")", ";", "}", "System", ".", "out", ".", "println", "(", "\"NYoe s\"", ".", "charAt", "(", "h", "<=", "sum", "?", "0", ":", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["h", "211"], ["n", "5"]]}], "slices": {"0": [[0]]}}
{"id": 2106, "code": "int n = 100, a = 100, b = 100;\nint ma = Math.min(a, b);\nint mi = Math.max(0, a + b - n);\nSystem.out.println(ma + \" \" + mi);", "code_tokens": ["<0>", "int", "n", "=", "100", ",", "a", "=", "100", ",", "b", "=", "100", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "mi", "=", "Math", ".", "max", "(", "0", ",", "a", "+", "b", "-", "n", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "ma", "+", "\" \"", "+", "mi", ")", ";"], "trace": [{"line": 0, "state": [["n", "100"], ["a", "100"], ["b", "100"]]}, {"line": 1, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"]]}, {"line": 2, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"], ["mi", "100"]]}, {"line": 3, "state": [["n", "100"], ["a", "100"], ["b", "100"], ["ma", "100"], ["mi", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 2288, "code": "int n = 10, a = 7, b = 5;\nif (a + b > n) {System.out.println(Math.min(a, b) + \" \" + (a + b - n));} else {System.out.println(Math.min(a, b) + \" 0\");}", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "7", ",", "b", "=", "5", ";", "<1>", "if", "(", "a", "+", "b", ">", "n", ")", "{", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" \"", "+", "(", "a", "+", "b", "-", "n", ")", ")", ";", "}", "else", "{", "System", ".", "out", ".", "println", "(", "Math", ".", "min", "(", "a", ",", "b", ")", "+", "\" 0\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "7"], ["b", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 6782, "code": "int H = 20, N = 3;\nint[] A = {4, 5, 6};\nint Total_attack = 0;for (int attack : A) {Total_attack += attack;}\nif (H - Total_attack <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "H", "=", "20", ",", "N", "=", "3", ";", "<1>", "int", "[", "]", "A", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "Total_attack", "=", "0", ";", "for", "(", "int", "attack", ":", "A", ")", "{", "Total_attack", "+=", "attack", ";", "}", "<3>", "if", "(", "H", "-", "Total_attack", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "20"], ["N", "3"]]}, {"line": 1, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["Total_attack", "15"]]}, {"line": 3, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["Total_attack", "15"]]}, {"line": 6, "state": [["H", "20"], ["N", "3"], ["A", "[ 4 , 5 , 6 ]"], ["Total_attack", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 16862, "code": "String a = \"D\";String b = \"D\";\nif (a.equals(\"H\") ^ b.equals(\"H\")) {\nSystem.out.println(\"D\");}\nelse {\nSystem.out.println(\"H\");}", "code_tokens": ["<0>", "String", "a", "=", "\"D\"", ";", "String", "b", "=", "\"D\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", "^", "b", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}", "<3>", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "D"], ["b", "D"]]}, {"line": 1, "state": [["a", "D"], ["b", "D"]]}, {"line": 4, "state": [["a", "D"], ["b", "D"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 4493, "code": "String a = \"smiles\";\nString b = a.charAt(0) + Integer.toString(a.length() - 2) + a.charAt(a.length() - 1);\nSystem.out.println(b);", "code_tokens": ["<0>", "String", "a", "=", "\"smiles\"", ";", "<1>", "String", "b", "=", "a", ".", "charAt", "(", "0", ")", "+", "Integer", ".", "toString", "(", "a", ".", "length", "(", ")", "-", "2", ")", "+", "a", ".", "charAt", "(", "a", ".", "length", "(", ")", "-", "1", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";"], "trace": [{"line": 0, "state": [["a", "smiles"]]}, {"line": 1, "state": [["a", "smiles"], ["b", "s4s"]]}, {"line": 2, "state": [["a", "smiles"], ["b", "s4s"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 3363, "code": "int A = 20, B = 30;\nSystem.out.println(A >= 2 * B ? A - 2 * B : 0);", "code_tokens": ["<0>", "int", "A", "=", "20", ",", "B", "=", "30", ";", "<1>", "System", ".", "out", ".", "println", "(", "A", ">=", "2", "*", "B", "?", "A", "-", "2", "*", "B", ":", "0", ")", ";"], "trace": [{"line": 0, "state": [["A", "20"], ["B", "30"]]}, {"line": 1, "state": [["A", "20"], ["B", "30"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 5646, "code": "int n = 100;\nint m = n / 2;\nif (n % 2 == 0) {\nSystem.out.println(m);\n} else {\nSystem.out.println(m + 1);}", "code_tokens": ["<0>", "int", "n", "=", "100", ";", "<1>", "int", "m", "=", "n", "/", "2", ";", "<2>", "if", "(", "n", "%", "2", "==", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "m", ")", ";", "<4>", "}", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "m", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["n", "100"]]}, {"line": 2, "state": [["n", "100"], ["m", "50"]]}, {"line": 3, "state": [["n", "100"], ["m", "50"]]}, {"line": 4, "state": [["n", "100"], ["m", "50"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 2, 1]]}}
{"id": 6858, "code": "int h = 20, n = 3;\nint[] a = {4, 5, 6};\nint x = 0;for (int num : a) {x += num;}\nif ((h - x) <= 0) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "int", "h", "=", "20", ",", "n", "=", "3", ";", "<1>", "int", "[", "]", "a", "=", "{", "4", ",", "5", ",", "6", "}", ";", "<2>", "int", "x", "=", "0", ";", "for", "(", "int", "num", ":", "a", ")", "{", "x", "+=", "num", ";", "}", "<3>", "if", "(", "(", "h", "-", "x", ")", "<=", "0", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<5>", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["h", "20"], ["n", "3"]]}, {"line": 1, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"]]}, {"line": 2, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"]]}, {"line": 3, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"]]}, {"line": 6, "state": [["h", "20"], ["n", "3"], ["a", "[ 4 , 5 , 6 ]"], ["x", "15"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "6": [[6]]}}
{"id": 8419, "code": "int n = 7;\nint[] a_1 = {3, 3, 4, 5, 4, 5, 3};\nint[] a_2 = {5, 3, 4, 4, 2, 3, 2};\nint[] sum_a_1 = new int[n + 1];\nint[] sum_a_2 = new int[n + 1];\nfor (int i = 0; i < n; i++) {\nsum_a_1[i + 1] = sum_a_1[i] + a_1[i];\nsum_a_2[i + 1] = sum_a_2[i] + a_2[n - i - 1];}\nint res = 0;\nfor (int i = 0; i < n; i++) {\nres = Math.max(res, sum_a_1[i + 1] + sum_a_2[n - i]);}\nSystem.out.println(res);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "a_1", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "a_2", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "[", "]", "sum_a_1", "=", "new", "int", "[", "n", "+", "1", "]", ";", "<4>", "int", "[", "]", "sum_a_2", "=", "new", "int", "[", "n", "+", "1", "]", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<6>", "sum_a_1", "[", "i", "+", "1", "]", "=", "sum_a_1", "[", "i", "]", "+", "a_1", "[", "i", "]", ";", "<7>", "sum_a_2", "[", "i", "+", "1", "]", "=", "sum_a_2", "[", "i", "]", "+", "a_2", "[", "n", "-", "i", "-", "1", "]", ";", "}", "<8>", "int", "res", "=", "0", ";", "<9>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<10>", "res", "=", "Math", ".", "max", "(", "res", ",", "sum_a_1", "[", "i", "+", "1", "]", "+", "sum_a_2", "[", "n", "-", "i", "]", ")", ";", "}", "<11>", "System", ".", "out", ".", "println", "(", "res", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 ]"]]}, {"line": 4, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 ]"], ["sum_a_2", "[ 0 ]"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 ]"], ["sum_a_2", "[ 0 ]"], ["i", "0"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 ]"], ["sum_a_2", "[ 0 ]"], ["i", "0"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 ]"], ["sum_a_2", "[ 0 , 2 ]"], ["i", "0"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 ]"], ["sum_a_2", "[ 0 , 2 ]"], ["i", "1"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 ]"], ["sum_a_2", "[ 0 , 2 ]"], ["i", "1"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 ]"], ["sum_a_2", "[ 0 , 2 , 5 ]"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 ]"], ["sum_a_2", "[ 0 , 2 , 5 ]"], ["i", "2"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 ]"], ["sum_a_2", "[ 0 , 2 , 5 ]"], ["i", "2"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 ]"], ["i", "2"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 ]"], ["i", "3"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 ]"], ["i", "3"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 ]"], ["i", "3"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 ]"], ["i", "4"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 ]"], ["i", "4"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 ]"], ["i", "4"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 ]"], ["i", "5"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 ]"], ["i", "5"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 ]"], ["i", "5"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 ]"], ["i", "6"]]}, {"line": 6, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 ]"], ["i", "6"]]}, {"line": 7, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"]]}, {"line": 5, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"]]}, {"line": 8, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["res", "0"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "0"], ["res", "0"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "0"], ["res", "26"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "1"], ["res", "26"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "1"], ["res", "26"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "2"], ["res", "26"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "2"], ["res", "26"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "3"], ["res", "26"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "3"], ["res", "26"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "4"], ["res", "26"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "4"], ["res", "26"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"], ["res", "26"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "5"], ["res", "29"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["res", "29"]]}, {"line": 10, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["res", "29"]]}, {"line": 9, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["res", "29"]]}, {"line": 11, "state": [["n", "7"], ["a_1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["a_2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["sum_a_1", "[ 0 , 3 , 6 , 10 , 15 , 19 , 24 , 27 ]"], ["sum_a_2", "[ 0 , 2 , 5 , 7 , 11 , 15 , 18 , 23 ]"], ["i", "6"], ["res", "29"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 0], [5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0]], "6": [[6, 5, 0], [6, 5, 7, 6, 5, 0], [6, 5, 7, 6, 5, 7, 6, 5, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0]], "7": [[7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0]], "8": [[8]], "9": [[9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0]], "10": [[10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0], [10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0]], "11": [[11, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 7, 6, 5, 0]]}}
{"id": 15450, "code": "int x = 13, y = 3, z = 1;\nint rm = x % (y + z);\nint a = (rm < z) ? -1 : 0;\nSystem.out.println(x / (y + z) + a);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "rm", "=", "x", "%", "(", "y", "+", "z", ")", ";", "<2>", "int", "a", "=", "(", "rm", "<", "z", ")", "?", "-", "1", ":", "0", ";", "<3>", "System", ".", "out", ".", "println", "(", "x", "/", "(", "y", "+", "z", ")", "+", "a", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["rm", "1"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["rm", "1"], ["a", "0"]]}, {"line": 3, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["rm", "1"], ["a", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 3446, "code": "int a = 20, b = 15;\nint result = a - b * 2;\nif (result > 0) {\nSystem.out.println(result);}\nelse {\nSystem.out.println(0);}", "code_tokens": ["<0>", "int", "a", "=", "20", ",", "b", "=", "15", ";", "<1>", "int", "result", "=", "a", "-", "b", "*", "2", ";", "<2>", "if", "(", "result", ">", "0", ")", "{", "<3>", "System", ".", "out", ".", "println", "(", "result", ")", ";", "}", "<4>", "else", "{", "<5>", "System", ".", "out", ".", "println", "(", "0", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "20"], ["b", "15"]]}, {"line": 1, "state": [["a", "20"], ["b", "15"], ["result", "-10"]]}, {"line": 2, "state": [["a", "20"], ["b", "15"], ["result", "-10"]]}, {"line": 5, "state": [["a", "20"], ["b", "15"], ["result", "-10"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "5": [[5]]}}
{"id": 18409, "code": "int h = 2;\nint w = 100;\nint n = 200;\nint ans = 0;\nif (h < w) {\nans = (int) Math.ceil((double) n / w);\n} else {\nans = (int) Math.ceil((double) n / h);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "h", "=", "2", ";", "<1>", "int", "w", "=", "100", ";", "<2>", "int", "n", "=", "200", ";", "<3>", "int", "ans", "=", "0", ";", "<4>", "if", "(", "h", "<", "w", ")", "{", "<5>", "ans", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "w", ")", ";", "<6>", "}", "else", "{", "<7>", "ans", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "double", ")", "n", "/", "h", ")", ";", "}", "<8>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": [["h", "2"]]}, {"line": 2, "state": [["h", "2"], ["w", "100"]]}, {"line": 3, "state": [["h", "2"], ["w", "100"], ["n", "200"]]}, {"line": 4, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["ans", "0"]]}, {"line": 5, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["ans", "0"]]}, {"line": 6, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["ans", "2"]]}, {"line": 9, "state": [["h", "2"], ["w", "100"], ["n", "200"], ["ans", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4]], "5": [[5, 2, 1]], "6": [[6, 5, 2, 1]], "9": [[9, 6, 5, 2, 1]]}}
{"id": 16734, "code": "String a = \"H\";String b = \"H\";\nif (a.equals(\"H\")) {\nSystem.out.println(b);}\nelse if (b.equals(\"D\")) {\nSystem.out.println(\"H\");}\nelse {\nSystem.out.println(\"D\");}", "code_tokens": ["<0>", "String", "a", "=", "\"H\"", ";", "String", "b", "=", "\"H\"", ";", "<1>", "if", "(", "a", ".", "equals", "(", "\"H\"", ")", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "b", ")", ";", "}", "<3>", "else", "if", "(", "b", ".", "equals", "(", "\"D\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"H\"", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "\"D\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "H"], ["b", "H"]]}, {"line": 1, "state": [["a", "H"], ["b", "H"]]}, {"line": 2, "state": [["a", "H"], ["b", "H"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]]}}
{"id": 182, "code": "String s = \"a\";\nint k = 25;\nString ans = \"\";\nfor (int j = 0; j < s.length() - 1; j++) {char i = s.charAt(j);\nif (i == 'a') {\nans += i;\ncontinue;}\nif (k >= 123 - (int) i) {\nk -= 123 - (int) i;\nans += 'a';}\nelse {\nans += i;}}\nchar i = s.charAt(s.length() - 1);\nans += (char) (((int) i + k - 97) % 26 + 97);\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"a\"", ";", "<1>", "int", "k", "=", "25", ";", "<2>", "String", "ans", "=", "\"\"", ";", "<3>", "for", "(", "int", "j", "=", "0", ";", "j", "<", "s", ".", "length", "(", ")", "-", "1", ";", "j", "++", ")", "{", "char", "i", "=", "s", ".", "charAt", "(", "j", ")", ";", "<4>", "if", "(", "i", "==", "'a'", ")", "{", "<5>", "ans", "+=", "i", ";", "<6>", "continue", ";", "}", "<7>", "if", "(", "k", ">=", "123", "-", "(", "int", ")", "i", ")", "{", "<8>", "k", "-=", "123", "-", "(", "int", ")", "i", ";", "<9>", "ans", "+=", "'a'", ";", "}", "<10>", "else", "{", "<11>", "ans", "+=", "i", ";", "}", "}", "<12>", "char", "i", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<13>", "ans", "+=", "(", "char", ")", "(", "(", "(", "int", ")", "i", "+", "k", "-", "97", ")", "%", "26", "+", "97", ")", ";", "<14>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "a"]]}, {"line": 1, "state": [["s", "a"], ["k", "25"]]}, {"line": 2, "state": [["s", "a"], ["k", "25"], ["ans", ""]]}, {"line": 3, "state": [["s", "a"], ["k", "25"], ["ans", ""]]}, {"line": 12, "state": [["s", "a"], ["k", "25"], ["ans", ""], ["i", "a"]]}, {"line": 13, "state": [["s", "a"], ["k", "25"], ["ans", "z"], ["i", "a"]]}, {"line": 14, "state": [["s", "a"], ["k", "25"], ["ans", "z"], ["i", "a"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "12": [[12, 3, 0]], "13": [[13, 12, 3, 0]], "14": [[14, 13, 12, 3, 0]]}}
{"id": 18486, "code": "int H = 14;\nint W = 12;\nint N = 112;\nint a = Math.max(H, W);\nif (N % a == 0) {\nSystem.out.println(N / a);} else {\nSystem.out.println(N / a + 1);}", "code_tokens": ["<0>", "int", "H", "=", "14", ";", "<1>", "int", "W", "=", "12", ";", "<2>", "int", "N", "=", "112", ";", "<3>", "int", "a", "=", "Math", ".", "max", "(", "H", ",", "W", ")", ";", "<4>", "if", "(", "N", "%", "a", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "N", "/", "a", ")", ";", "}", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "N", "/", "a", "+", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["H", "14"]]}, {"line": 1, "state": [["H", "14"], ["W", "12"]]}, {"line": 2, "state": [["H", "14"], ["W", "12"], ["N", "112"]]}, {"line": 3, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["a", "14"]]}, {"line": 4, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["a", "14"]]}, {"line": 5, "state": [["H", "14"], ["W", "12"], ["N", "112"], ["a", "14"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 1, 0]], "4": [[4, 3, 1, 0]], "5": [[5, 4, 3, 1, 0]]}}
{"id": 5651, "code": "int N = 2;\nif (N % 2 == 1) {\nSystem.out.println((N - 1) / 2 + 1);} else {\nSystem.out.println(N / 2);}", "code_tokens": ["<0>", "int", "N", "=", "2", ";", "<1>", "if", "(", "N", "%", "2", "==", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "(", "N", "-", "1", ")", "/", "2", "+", "1", ")", ";", "}", "else", "{", "<3>", "System", ".", "out", ".", "println", "(", "N", "/", "2", ")", ";", "}"], "trace": [{"line": 0, "state": [["N", "2"]]}, {"line": 1, "state": [["N", "2"]]}, {"line": 4, "state": [["N", "2"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4, 1, 0]]}}
{"id": 12365, "code": "String s = \"level\";\nint n = s.length();\nString ans = \"No\";\nint cnt = 0;\nif (s.equals(new StringBuilder(s).reverse().toString())) {\ncnt += 1;}\nif (s.substring(0, (n - 1) / 2).equals(new StringBuilder(s.substring((n - 1) / 2 - 1, -1)).reverse().toString())) {\ncnt += 1;}\nif (s.substring((n + 1) / 2).equals(new StringBuilder(s.substring(0, (n - 1) / 2)).reverse().toString())) {\ncnt += 1;}\nif (cnt == 3) {\nans = \"Yes\";}\nSystem.out.println(ans);", "code_tokens": ["<0>", "String", "s", "=", "\"level\"", ";", "<1>", "int", "n", "=", "s", ".", "length", "(", ")", ";", "<2>", "String", "ans", "=", "\"No\"", ";", "<3>", "int", "cnt", "=", "0", ";", "<4>", "if", "(", "s", ".", "equals", "(", "new", "StringBuilder", "(", "s", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<5>", "cnt", "+=", "1", ";", "}", "<6>", "if", "(", "s", ".", "substring", "(", "0", ",", "(", "n", "-", "1", ")", "/", "2", ")", ".", "equals", "(", "new", "StringBuilder", "(", "s", ".", "substring", "(", "(", "n", "-", "1", ")", "/", "2", "-", "1", ",", "-", "1", ")", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<7>", "cnt", "+=", "1", ";", "}", "<8>", "if", "(", "s", ".", "substring", "(", "(", "n", "+", "1", ")", "/", "2", ")", ".", "equals", "(", "new", "StringBuilder", "(", "s", ".", "substring", "(", "0", ",", "(", "n", "-", "1", ")", "/", "2", ")", ")", ".", "reverse", "(", ")", ".", "toString", "(", ")", ")", ")", "{", "<9>", "cnt", "+=", "1", ";", "}", "<10>", "if", "(", "cnt", "==", "3", ")", "{", "<11>", "ans", "=", "\"Yes\"", ";", "}", "<12>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["s", "level"]]}, {"line": 1, "state": [["s", "level"], ["n", "5"]]}, {"line": 2, "state": [["s", "level"], ["n", "5"], ["ans", "No"]]}, {"line": 3, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "0"]]}, {"line": 4, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "0"]]}, {"line": 5, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "1"]]}, {"line": 6, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "1"]]}, {"line": 8, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "1"]]}, {"line": 10, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "1"]]}, {"line": 12, "state": [["s", "level"], ["n", "5"], ["ans", "No"], ["cnt", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0]], "5": [[5, 3]], "6": [[6, 4, 1, 0]], "8": [[8, 6, 4, 1, 0]], "10": [[10, 5, 3]], "12": [[12, 2]]}}
{"id": 8909, "code": "int n = 5;\nint[] a1 = {3, 2, 2, 4, 1};\nint[] a2 = {1, 2, 2, 2, 1};\nfor (int i = 0; i < a2.length / 2; i++) {int temp = a2[i];a2[i] = a2[a2.length - 1 - i];a2[a2.length - 1 - i] = temp;}\nArrayList<Integer> asum1 = new ArrayList<>();\nArrayList<Integer> asum2 = new ArrayList<>();\nint tmp1 = 0;\nint tmp2 = 0;\nfor (int i = 0; i < n; i++) {\ntmp1 += a1[i];\nasum1.add(tmp1);\ntmp2 += a2[i];\nasum2.add(tmp2);}\nCollections.reverse(asum2);\nArrayList<Integer> asum = new ArrayList<>();for (int i = 0; i < asum1.size(); i++) {asum.add(asum1.get(i) + asum2.get(i));}\nSystem.out.println(Collections.max(asum));", "code_tokens": ["<0>", "int", "n", "=", "5", ";", "<1>", "int", "[", "]", "a1", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "a2", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "a2", ".", "length", "/", "2", ";", "i", "++", ")", "{", "int", "temp", "=", "a2", "[", "i", "]", ";", "a2", "[", "i", "]", "=", "a2", "[", "a2", ".", "length", "-", "1", "-", "i", "]", ";", "a2", "[", "a2", ".", "length", "-", "1", "-", "i", "]", "=", "temp", ";", "}", "<4>", "ArrayList", "<", "Integer", ">", "asum1", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<5>", "ArrayList", "<", "Integer", ">", "asum2", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "<6>", "int", "tmp1", "=", "0", ";", "<7>", "int", "tmp2", "=", "0", ";", "<8>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<9>", "tmp1", "+=", "a1", "[", "i", "]", ";", "<10>", "asum1", ".", "add", "(", "tmp1", ")", ";", "<11>", "tmp2", "+=", "a2", "[", "i", "]", ";", "<12>", "asum2", ".", "add", "(", "tmp2", ")", ";", "}", "<13>", "Collections", ".", "reverse", "(", "asum2", ")", ";", "<14>", "ArrayList", "<", "Integer", ">", "asum", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "asum1", ".", "size", "(", ")", ";", "i", "++", ")", "{", "asum", ".", "add", "(", "asum1", ".", "get", "(", "i", ")", "+", "asum2", ".", "get", "(", "i", ")", ")", ";", "}", "<15>", "System", ".", "out", ".", "println", "(", "Collections", ".", "max", "(", "asum", ")", ")", ";"], "trace": [{"line": 0, "state": [["n", "5"]]}, {"line": 1, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 4, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ ]"]]}, {"line": 5, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ ]"], ["asum2", "[ ]"]]}, {"line": 6, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ ]"], ["asum2", "[ ]"], ["tmp1", "0"]]}, {"line": 7, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ ]"], ["asum2", "[ ]"], ["tmp1", "0"], ["tmp2", "0"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ ]"], ["asum2", "[ ]"], ["tmp1", "0"], ["tmp2", "0"], ["i", "0"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ ]"], ["asum2", "[ ]"], ["tmp1", "3"], ["tmp2", "0"], ["i", "0"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 ]"], ["asum2", "[ ]"], ["tmp1", "3"], ["tmp2", "0"], ["i", "0"]]}, {"line": 11, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 ]"], ["asum2", "[ ]"], ["tmp1", "3"], ["tmp2", "1"], ["i", "0"]]}, {"line": 12, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 ]"], ["asum2", "[ 1 ]"], ["tmp1", "3"], ["tmp2", "1"], ["i", "0"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 ]"], ["asum2", "[ 1 ]"], ["tmp1", "3"], ["tmp2", "1"], ["i", "1"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 ]"], ["asum2", "[ 1 ]"], ["tmp1", "5"], ["tmp2", "1"], ["i", "1"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 ]"], ["asum2", "[ 1 ]"], ["tmp1", "5"], ["tmp2", "1"], ["i", "1"]]}, {"line": 11, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 ]"], ["asum2", "[ 1 ]"], ["tmp1", "5"], ["tmp2", "3"], ["i", "1"]]}, {"line": 12, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 ]"], ["asum2", "[ 1 , 3 ]"], ["tmp1", "5"], ["tmp2", "3"], ["i", "1"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 ]"], ["asum2", "[ 1 , 3 ]"], ["tmp1", "5"], ["tmp2", "3"], ["i", "2"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 ]"], ["asum2", "[ 1 , 3 ]"], ["tmp1", "7"], ["tmp2", "3"], ["i", "2"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 ]"], ["asum2", "[ 1 , 3 ]"], ["tmp1", "7"], ["tmp2", "3"], ["i", "2"]]}, {"line": 11, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 ]"], ["asum2", "[ 1 , 3 ]"], ["tmp1", "7"], ["tmp2", "5"], ["i", "2"]]}, {"line": 12, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 ]"], ["asum2", "[ 1 , 3 , 5 ]"], ["tmp1", "7"], ["tmp2", "5"], ["i", "2"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 ]"], ["asum2", "[ 1 , 3 , 5 ]"], ["tmp1", "7"], ["tmp2", "5"], ["i", "3"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 ]"], ["asum2", "[ 1 , 3 , 5 ]"], ["tmp1", "11"], ["tmp2", "5"], ["i", "3"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 ]"], ["asum2", "[ 1 , 3 , 5 ]"], ["tmp1", "11"], ["tmp2", "5"], ["i", "3"]]}, {"line": 11, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 ]"], ["asum2", "[ 1 , 3 , 5 ]"], ["tmp1", "11"], ["tmp2", "7"], ["i", "3"]]}, {"line": 12, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 ]"], ["asum2", "[ 1 , 3 , 5 , 7 ]"], ["tmp1", "11"], ["tmp2", "7"], ["i", "3"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 ]"], ["asum2", "[ 1 , 3 , 5 , 7 ]"], ["tmp1", "11"], ["tmp2", "7"], ["i", "4"]]}, {"line": 9, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 ]"], ["asum2", "[ 1 , 3 , 5 , 7 ]"], ["tmp1", "12"], ["tmp2", "7"], ["i", "4"]]}, {"line": 10, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 1 , 3 , 5 , 7 ]"], ["tmp1", "12"], ["tmp2", "7"], ["i", "4"]]}, {"line": 11, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 1 , 3 , 5 , 7 ]"], ["tmp1", "12"], ["tmp2", "8"], ["i", "4"]]}, {"line": 12, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 1 , 3 , 5 , 7 , 8 ]"], ["tmp1", "12"], ["tmp2", "8"], ["i", "4"]]}, {"line": 8, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 1 , 3 , 5 , 7 , 8 ]"], ["tmp1", "12"], ["tmp2", "8"], ["i", "4"]]}, {"line": 13, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 8 , 7 , 5 , 3 , 1 ]"], ["tmp1", "12"], ["tmp2", "8"], ["i", "4"]]}, {"line": 14, "state": []}, {"line": 14, "state": []}, {"line": 14, "state": [["x", "3"], ["y", "8"]]}, {"line": 14, "state": [["x", "5"], ["y", "7"]]}, {"line": 14, "state": [["x", "7"], ["y", "5"]]}, {"line": 14, "state": [["x", "11"], ["y", "3"]]}, {"line": 14, "state": [["x", "12"], ["y", "1"]]}, {"line": 14, "state": [["x", "12"], ["y", "1"]]}, {"line": 14, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 8 , 7 , 5 , 3 , 1 ]"], ["tmp1", "12"], ["tmp2", "8"], ["i", "4"], ["asum", "[ 11 , 12 , 12 , 14 , 13 ]"]]}, {"line": 15, "state": [["n", "5"], ["a1", "[ 3 , 2 , 2 , 4 , 1 ]"], ["a2", "[ 1 , 2 , 2 , 2 , 1 ]"], ["asum1", "[ 3 , 5 , 7 , 11 , 12 ]"], ["asum2", "[ 8 , 7 , 5 , 3 , 1 ]"], ["tmp1", "12"], ["tmp2", "8"], ["i", "4"], ["asum", "[ 11 , 12 , 12 , 14 , 13 ]"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]], "4": [[4]], "5": [[5]], "6": [[6]], "7": [[7]], "8": [[8, 0], [8, 11, 9, 8, 0], [8, 11, 9, 8, 11, 9, 8, 0], [8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "9": [[9, 8, 0], [9, 8, 11, 9, 8, 0], [9, 8, 11, 9, 8, 11, 9, 8, 0], [9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "10": [[10, 9, 8, 0], [10, 9, 8, 11, 9, 8, 0], [10, 9, 8, 11, 9, 8, 11, 9, 8, 0], [10, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [10, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "11": [[11, 9, 8, 0], [11, 9, 8, 11, 9, 8, 0], [11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "12": [[12, 11, 9, 8, 0], [12, 11, 9, 8, 11, 9, 8, 0], [12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "13": [[13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "14": [[14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0], [14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]], "15": [[15, 14, 13, 12, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 11, 9, 8, 0]]}}
{"id": 4589, "code": "String s = \"smiles\";\nSystem.out.print(s.charAt(0));System.out.print(s.length() - 2);System.out.print(s.charAt(s.length() - 1));", "code_tokens": ["<0>", "String", "s", "=", "\"smiles\"", ";", "<1>", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "0", ")", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "length", "(", ")", "-", "2", ")", ";", "System", ".", "out", ".", "print", "(", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ")", ";"], "trace": [{"line": 0, "state": [["s", "smiles"]]}, {"line": 1, "state": [["s", "smiles"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 8368, "code": "int N = 5;\nint[] A = {3, 2, 2, 4, 1};\nint[] B = {1, 2, 2, 2, 1};\nint ma = 0;\nfor (int i = 0; i < N; i++) {\nint c = 0;for (int j = 0; j <= i; j++) {c += A[j];}for (int j = i; j < N; j++) {c += B[j];}\nma = Math.max(ma, c);}\nSystem.out.println(ma);", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "3", ",", "2", ",", "2", ",", "4", ",", "1", "}", ";", "<2>", "int", "[", "]", "B", "=", "{", "1", ",", "2", ",", "2", ",", "2", ",", "1", "}", ";", "<3>", "int", "ma", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "<5>", "int", "c", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "c", "+=", "A", "[", "j", "]", ";", "}", "for", "(", "int", "j", "=", "i", ";", "j", "<", "N", ";", "j", "++", ")", "{", "c", "+=", "B", "[", "j", "]", ";", "}", "<6>", "ma", "=", "Math", ".", "max", "(", "ma", ",", "c", ")", ";", "}", "<7>", "System", ".", "out", ".", "println", "(", "ma", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "0"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "0"], ["i", "0"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "0"], ["i", "0"], ["c", "11"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "11"], ["i", "0"], ["c", "11"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "11"], ["i", "1"], ["c", "11"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "11"], ["i", "1"], ["c", "12"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "12"], ["i", "1"], ["c", "12"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "12"], ["i", "2"], ["c", "12"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "12"], ["i", "2"], ["c", "12"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "12"], ["i", "2"], ["c", "12"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "12"], ["i", "3"], ["c", "12"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "12"], ["i", "3"], ["c", "14"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "14"], ["i", "3"], ["c", "14"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "14"], ["i", "4"], ["c", "14"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "14"], ["i", "4"], ["c", "13"]]}, {"line": 6, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "14"], ["i", "4"], ["c", "13"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "14"], ["i", "4"], ["c", "13"]]}, {"line": 7, "state": [["N", "5"], ["A", "[ 3 , 2 , 2 , 4 , 1 ]"], ["B", "[ 1 , 2 , 2 , 2 , 1 ]"], ["ma", "14"], ["i", "4"], ["c", "13"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 5, 4, 0], [6, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 0], [6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "7": [[7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]]}}
{"id": 11416, "code": "String S = \"SAT\";\nString[] week = {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};\nfor (int i = 0; i < 7; i++) {\nif (week[i].equals(S)) {\nSystem.out.println(7 - i);}}", "code_tokens": ["<0>", "String", "S", "=", "\"SAT\"", ";", "<1>", "String", "[", "]", "week", "=", "{", "\"SUN\"", ",", "\"MON\"", ",", "\"TUE\"", ",", "\"WED\"", ",", "\"THU\"", ",", "\"FRI\"", ",", "\"SAT\"", "}", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "7", ";", "i", "++", ")", "{", "<3>", "if", "(", "week", "[", "i", "]", ".", "equals", "(", "S", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", "-", "i", ")", ";", "}", "}"], "trace": [{"line": 0, "state": [["S", "SAT"]]}, {"line": 1, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "0"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "1"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "1"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "2"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "2"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "3"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "3"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "4"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "4"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "5"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "5"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "6"]]}, {"line": 3, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "6"]]}, {"line": 4, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "6"]]}, {"line": 2, "state": [["S", "SAT"], ["week", "[ SUN , MON , TUE , WED , THU , FRI , SAT ]"], ["i", "6"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2], [2, 3, 2], [2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "3": [[3, 2], [3, 2, 3, 2], [3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]], "4": [[4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]]}}
{"id": 15512, "code": "int x = 13, y = 3, z = 1;\nint n = (int)((x - z) / (y + z));\nSystem.out.println(n);", "code_tokens": ["<0>", "int", "x", "=", "13", ",", "y", "=", "3", ",", "z", "=", "1", ";", "<1>", "int", "n", "=", "(", "int", ")", "(", "(", "x", "-", "z", ")", "/", "(", "y", "+", "z", ")", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "n", ")", ";"], "trace": [{"line": 0, "state": [["x", "13"], ["y", "3"], ["z", "1"]]}, {"line": 1, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["n", "3"]]}, {"line": 2, "state": [["x", "13"], ["y", "3"], ["z", "1"], ["n", "3"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 14019, "code": "int n = 7;\nint[] A = {1, 2, 3, 2, 1, 999999999, 1000000000};\nint ans = 1;\nint d = 0;\nfor (int i = 1; i < n; i++) {\nint diff = A[i] - A[i - 1];\nif (d == 0) {\nd = diff;}\nelse if (d * diff < 0) {\nd = 0;\nans += 1;}}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "n", "=", "7", ";", "<1>", "int", "[", "]", "A", "=", "{", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "999999999", ",", "1000000000", "}", ";", "<2>", "int", "ans", "=", "1", ";", "<3>", "int", "d", "=", "0", ";", "<4>", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<5>", "int", "diff", "=", "A", "[", "i", "]", "-", "A", "[", "i", "-", "1", "]", ";", "<6>", "if", "(", "d", "==", "0", ")", "{", "<7>", "d", "=", "diff", ";", "}", "<8>", "else", "if", "(", "d", "*", "diff", "<", "0", ")", "{", "<9>", "d", "=", "0", ";", "<10>", "ans", "+=", "1", ";", "}", "}", "<11>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["n", "7"]]}, {"line": 1, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"]]}, {"line": 2, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"]]}, {"line": 3, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "0"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "0"], ["i", "1"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "0"], ["i", "1"], ["diff", "1"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "0"], ["i", "1"], ["diff", "1"]]}, {"line": 7, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "1"], ["diff", "1"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 8, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "2"], ["diff", "1"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "3"], ["diff", "1"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "3"], ["diff", "-1"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "3"], ["diff", "-1"]]}, {"line": 8, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "1"], ["i", "3"], ["diff", "-1"]]}, {"line": 9, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "1"], ["d", "0"], ["i", "3"], ["diff", "-1"]]}, {"line": 10, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "0"], ["i", "3"], ["diff", "-1"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "0"], ["i", "4"], ["diff", "-1"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "0"], ["i", "4"], ["diff", "-1"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "0"], ["i", "4"], ["diff", "-1"]]}, {"line": 7, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "-1"], ["i", "4"], ["diff", "-1"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "-1"], ["i", "5"], ["diff", "-1"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "-1"], ["i", "5"], ["diff", "999999998"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "-1"], ["i", "5"], ["diff", "999999998"]]}, {"line": 8, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "-1"], ["i", "5"], ["diff", "999999998"]]}, {"line": 9, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "2"], ["d", "0"], ["i", "5"], ["diff", "999999998"]]}, {"line": 10, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "0"], ["i", "5"], ["diff", "999999998"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "0"], ["i", "6"], ["diff", "999999998"]]}, {"line": 5, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "0"], ["i", "6"], ["diff", "1"]]}, {"line": 6, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "0"], ["i", "6"], ["diff", "1"]]}, {"line": 7, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "1"]]}, {"line": 4, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "1"]]}, {"line": 11, "state": [["n", "7"], ["A", "[ 1 , 2 , 3 , 2 , 1 , 999999999 , 1000000000 ]"], ["ans", "3"], ["d", "1"], ["i", "6"], ["diff", "1"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 0], [4, 5, 4, 0], [4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "5": [[5, 4, 0], [5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0], [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0]], "6": [[6, 3], [6, 7, 6, 3], [6, 8, 6, 7, 6, 3], [6, 9, 8, 6, 8, 6, 7, 6, 3], [6, 7, 6, 9, 8, 6, 8, 6, 7, 6, 3], [6, 9, 8, 6, 7, 6, 9, 8, 6, 8, 6, 7, 6, 3]], "7": [[7, 6, 3], [7, 6, 9, 8, 6, 8, 6, 7, 6, 3], [7, 6, 9, 8, 6, 7, 6, 9, 8, 6, 8, 6, 7, 6, 3]], "8": [[8, 6, 7, 6, 3], [8, 6, 8, 6, 7, 6, 3], [8, 6, 7, 6, 9, 8, 6, 8, 6, 7, 6, 3]], "9": [[9, 8, 6, 8, 6, 7, 6, 3], [9, 8, 6, 7, 6, 9, 8, 6, 8, 6, 7, 6, 3]], "10": [[10, 2], [10, 2]], "11": [[11, 10, 2]]}}
{"id": 15784, "code": "int x = 100000, y = 1, z = 1;\nint count = 1;\nx -= 2 * z + y;\ncount += x / (y + z);\nSystem.out.println(count);", "code_tokens": ["<0>", "int", "x", "=", "100000", ",", "y", "=", "1", ",", "z", "=", "1", ";", "<1>", "int", "count", "=", "1", ";", "<2>", "x", "-=", "2", "*", "z", "+", "y", ";", "<3>", "count", "+=", "x", "/", "(", "y", "+", "z", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "count", ")", ";"], "trace": [{"line": 0, "state": [["x", "100000"], ["y", "1"], ["z", "1"]]}, {"line": 1, "state": [["x", "100000"], ["y", "1"], ["z", "1"], ["count", "1"]]}, {"line": 2, "state": [["x", "99997"], ["y", "1"], ["z", "1"], ["count", "1"]]}, {"line": 3, "state": [["x", "99997"], ["y", "1"], ["z", "1"], ["count", "49999"]]}, {"line": 4, "state": [["x", "99997"], ["y", "1"], ["z", "1"], ["count", "49999"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 4191, "code": "int H1 = 10, M1 = 0, H2 = 12, M2 = 0, K = 120;\nint h1 = 60 * H1 + M1;\nint h2 = 60 * H2 + M2;\nint d = h2 - h1;\nSystem.out.println(d - K);", "code_tokens": ["<0>", "int", "H1", "=", "10", ",", "M1", "=", "0", ",", "H2", "=", "12", ",", "M2", "=", "0", ",", "K", "=", "120", ";", "<1>", "int", "h1", "=", "60", "*", "H1", "+", "M1", ";", "<2>", "int", "h2", "=", "60", "*", "H2", "+", "M2", ";", "<3>", "int", "d", "=", "h2", "-", "h1", ";", "<4>", "System", ".", "out", ".", "println", "(", "d", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"]]}, {"line": 1, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["h1", "600"]]}, {"line": 2, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["h1", "600"], ["h2", "720"]]}, {"line": 3, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["h1", "600"], ["h2", "720"], ["d", "120"]]}, {"line": 4, "state": [["H1", "10"], ["M1", "0"], ["H2", "12"], ["M2", "0"], ["K", "120"], ["h1", "600"], ["h2", "720"], ["d", "120"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 0]], "3": [[3, 2, 0]], "4": [[4, 3, 2, 0]]}}
{"id": 11711, "code": "System.out.println(java.util.Map.of(\"SU\", 7, \"MO\", 6, \"TU\", 5, \"WE\", 4, \"TH\", 3, \"FR\", 2, \"SA\", 1).get(\"SUN\".substring(0, 2)));", "code_tokens": ["<0>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Map", ".", "of", "(", "\"SU\"", ",", "7", ",", "\"MO\"", ",", "6", ",", "\"TU\"", ",", "5", ",", "\"WE\"", ",", "4", ",", "\"TH\"", ",", "3", ",", "\"FR\"", ",", "2", ",", "\"SA\"", ",", "1", ")", ".", "get", "(", "\"SUN\"", ".", "substring", "(", "0", ",", "2", ")", ")", ")", ";"], "trace": [{"line": 0, "state": []}], "slices": {"0": [[0]]}}
{"id": 737, "code": "int K = 101;\nint x = 7;\nint c = 1;\nHashSet<Integer> visited = new HashSet<>();visited.add(7);\nwhile (x % K != 0) {\nx *= 10;\nx += 7;\nx %= K;\nc += 1;\nint z = x % K;\nif (visited.contains(z)) {\nSystem.out.println(-1);\nSystem.exit(0);}\nvisited.add(x % K);}\nSystem.out.println(c);", "code_tokens": ["<0>", "int", "K", "=", "101", ";", "<1>", "int", "x", "=", "7", ";", "<2>", "int", "c", "=", "1", ";", "<3>", "HashSet", "<", "Integer", ">", "visited", "=", "new", "HashSet", "<", ">", "(", ")", ";", "visited", ".", "add", "(", "7", ")", ";", "<4>", "while", "(", "x", "%", "K", "!=", "0", ")", "{", "<5>", "x", "*=", "10", ";", "<6>", "x", "+=", "7", ";", "<7>", "x", "%=", "K", ";", "<8>", "c", "+=", "1", ";", "<9>", "int", "z", "=", "x", "%", "K", ";", "<10>", "if", "(", "visited", ".", "contains", "(", "z", ")", ")", "{", "<11>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "<12>", "System", ".", "exit", "(", "0", ")", ";", "}", "<13>", "visited", ".", "add", "(", "x", "%", "K", ")", ";", "}", "<14>", "System", ".", "out", ".", "println", "(", "c", ")", ";"], "trace": [{"line": 0, "state": [["K", "101"]]}, {"line": 1, "state": [["K", "101"], ["x", "7"]]}, {"line": 2, "state": [["K", "101"], ["x", "7"], ["c", "1"]]}, {"line": 3, "state": [["K", "101"], ["x", "7"], ["c", "1"], ["visited", "{ 7 }"]]}, {"line": 4, "state": [["K", "101"], ["x", "7"], ["c", "1"], ["visited", "{ 7 }"]]}, {"line": 5, "state": [["K", "101"], ["x", "70"], ["c", "1"], ["visited", "{ 7 }"]]}, {"line": 6, "state": [["K", "101"], ["x", "77"], ["c", "1"], ["visited", "{ 7 }"]]}, {"line": 7, "state": [["K", "101"], ["x", "77"], ["c", "1"], ["visited", "{ 7 }"]]}, {"line": 8, "state": [["K", "101"], ["x", "77"], ["c", "2"], ["visited", "{ 7 }"]]}, {"line": 9, "state": [["K", "101"], ["x", "77"], ["c", "2"], ["visited", "{ 7 }"], ["z", "77"]]}, {"line": 10, "state": [["K", "101"], ["x", "77"], ["c", "2"], ["visited", "{ 7 }"], ["z", "77"]]}, {"line": 13, "state": [["K", "101"], ["x", "77"], ["c", "2"], ["visited", "{ 77 , 7 }"], ["z", "77"]]}, {"line": 4, "state": [["K", "101"], ["x", "77"], ["c", "2"], ["visited", "{ 77 , 7 }"], ["z", "77"]]}, {"line": 5, "state": [["K", "101"], ["x", "770"], ["c", "2"], ["visited", "{ 77 , 7 }"], ["z", "77"]]}, {"line": 6, "state": [["K", "101"], ["x", "777"], ["c", "2"], ["visited", "{ 77 , 7 }"], ["z", "77"]]}, {"line": 7, "state": [["K", "101"], ["x", "70"], ["c", "2"], ["visited", "{ 77 , 7 }"], ["z", "77"]]}, {"line": 8, "state": [["K", "101"], ["x", "70"], ["c", "3"], ["visited", "{ 77 , 7 }"], ["z", "77"]]}, {"line": 9, "state": [["K", "101"], ["x", "70"], ["c", "3"], ["visited", "{ 77 , 7 }"], ["z", "70"]]}, {"line": 10, "state": [["K", "101"], ["x", "70"], ["c", "3"], ["visited", "{ 77 , 7 }"], ["z", "70"]]}, {"line": 13, "state": [["K", "101"], ["x", "70"], ["c", "3"], ["visited", "{ 77 , 70 , 7 }"], ["z", "70"]]}, {"line": 4, "state": [["K", "101"], ["x", "70"], ["c", "3"], ["visited", "{ 77 , 70 , 7 }"], ["z", "70"]]}, {"line": 5, "state": [["K", "101"], ["x", "700"], ["c", "3"], ["visited", "{ 77 , 70 , 7 }"], ["z", "70"]]}, {"line": 6, "state": [["K", "101"], ["x", "707"], ["c", "3"], ["visited", "{ 77 , 70 , 7 }"], ["z", "70"]]}, {"line": 7, "state": [["K", "101"], ["x", "0"], ["c", "3"], ["visited", "{ 77 , 70 , 7 }"], ["z", "70"]]}, {"line": 8, "state": [["K", "101"], ["x", "0"], ["c", "4"], ["visited", "{ 77 , 70 , 7 }"], ["z", "70"]]}, {"line": 9, "state": [["K", "101"], ["x", "0"], ["c", "4"], ["visited", "{ 77 , 70 , 7 }"], ["z", "0"]]}, {"line": 10, "state": [["K", "101"], ["x", "0"], ["c", "4"], ["visited", "{ 77 , 70 , 7 }"], ["z", "0"]]}, {"line": 13, "state": [["K", "101"], ["x", "0"], ["c", "4"], ["visited", "{ 0 , 77 , 70 , 7 }"], ["z", "0"]]}, {"line": 4, "state": [["K", "101"], ["x", "0"], ["c", "4"], ["visited", "{ 0 , 77 , 70 , 7 }"], ["z", "0"]]}, {"line": 14, "state": [["K", "101"], ["x", "0"], ["c", "4"], ["visited", "{ 0 , 77 , 70 , 7 }"], ["z", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3]], "4": [[4, 1, 0], [4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "5": [[5, 4, 1, 0], [5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "6": [[6, 5, 4, 1, 0], [6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "7": [[7, 6, 5, 4, 1, 0], [7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "8": [[8, 2], [8, 2], [8, 2]], "9": [[9, 7, 6, 5, 4, 1, 0], [9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "10": [[10, 9, 7, 6, 5, 4, 1, 0], [10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "13": [[13, 10, 9, 7, 6, 5, 4, 1, 0], [13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0], [13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 13, 10, 9, 7, 6, 5, 4, 1, 0]], "14": [[14, 8, 2]]}}
{"id": 12905, "code": "String X = \"6\";\nif (X.indexOf(\"753\") != -1) {\nSystem.out.println(\"YES\");\n} else {\nSystem.out.println(\"NO\");}", "code_tokens": ["<0>", "String", "X", "=", "\"6\"", ";", "<1>", "if", "(", "X", ".", "indexOf", "(", "\"753\"", ")", "!=", "-", "1", ")", "{", "<2>", "System", ".", "out", ".", "println", "(", "\"YES\"", ")", ";", "<3>", "}", "else", "{", "<4>", "System", ".", "out", ".", "println", "(", "\"NO\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["X", "6"]]}, {"line": 1, "state": [["X", "6"]]}, {"line": 4, "state": [["X", "6"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "4": [[4]]}}
{"id": 9988, "code": "int N = 3;\nString S = \"())\";\nwhile (true) {\nint lv = 0;\nint lmin = S.length();\nfor (int i = 0; i < S.length(); i++) {\nif (S.charAt(i) == '(') {\nlv += 1;}\nelse {\nlv -= 1;}\nlmin = Math.min(lmin, lv);}\nif (lmin < 0) {\nS = \"(\".repeat(-lmin) + S;}\nelse break;}\nint lv = 0;\nfor (int i = 0; i < S.length(); i++) {\nif (S.charAt(i) == '(') {\nlv += 1;}\nelse {\nlv -= 1;}}\nif (lv > 0) {\nS = S + \")\".repeat(lv);}\nSystem.out.println(S);", "code_tokens": ["<0>", "int", "N", "=", "3", ";", "<1>", "String", "S", "=", "\"())\"", ";", "<2>", "while", "(", "true", ")", "{", "<3>", "int", "lv", "=", "0", ";", "<4>", "int", "lmin", "=", "S", ".", "length", "(", ")", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<6>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<7>", "lv", "+=", "1", ";", "}", "<8>", "else", "{", "<9>", "lv", "-=", "1", ";", "}", "<10>", "lmin", "=", "Math", ".", "min", "(", "lmin", ",", "lv", ")", ";", "}", "<11>", "if", "(", "lmin", "<", "0", ")", "{", "<12>", "S", "=", "\"(\"", ".", "repeat", "(", "-", "lmin", ")", "+", "S", ";", "}", "<13>", "else", "break", ";", "}", "<14>", "int", "lv", "=", "0", ";", "<15>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", ";", "i", "++", ")", "{", "<16>", "if", "(", "S", ".", "charAt", "(", "i", ")", "==", "'('", ")", "{", "<17>", "lv", "+=", "1", ";", "}", "<18>", "else", "{", "<19>", "lv", "-=", "1", ";", "}", "}", "<20>", "if", "(", "lv", ">", "0", ")", "{", "<21>", "S", "=", "S", "+", "\")\"", ".", "repeat", "(", "lv", ")", ";", "}", "<22>", "System", ".", "out", ".", "println", "(", "S", ")", ";"], "trace": [{"line": 0, "state": [["N", "3"]]}, {"line": 1, "state": [["N", "3"], ["S", "())"]]}, {"line": 2, "state": [["N", "3"], ["S", "())"]]}, {"line": 3, "state": [["N", "3"], ["S", "())"], ["lv", "0"]]}, {"line": 4, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "3"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "3"], ["i", "0"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "3"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["S", "())"], ["lv", "1"], ["lmin", "3"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["lv", "1"], ["lmin", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["lv", "1"], ["lmin", "1"], ["i", "1"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["lv", "1"], ["lmin", "1"], ["i", "1"]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "1"], ["i", "1"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "0"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "0"], ["i", "2"]]}, {"line": 6, "state": [["N", "3"], ["S", "())"], ["lv", "0"], ["lmin", "0"], ["i", "2"]]}, {"line": 9, "state": [["N", "3"], ["S", "())"], ["lv", "-1"], ["lmin", "0"], ["i", "2"]]}, {"line": 10, "state": [["N", "3"], ["S", "())"], ["lv", "-1"], ["lmin", "-1"], ["i", "2"]]}, {"line": 5, "state": [["N", "3"], ["S", "())"], ["lv", "-1"], ["lmin", "-1"], ["i", "2"]]}, {"line": 11, "state": [["N", "3"], ["S", "())"], ["lv", "-1"], ["lmin", "-1"], ["i", "2"]]}, {"line": 12, "state": [["N", "3"], ["S", "()"], ["lv", "-1"], ["lmin", "-1"], ["i", "2"]]}, {"line": 3, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "-1"], ["i", "2"]]}, {"line": 4, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "4"], ["i", "2"]]}, {"line": 5, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "4"], ["i", "0"]]}, {"line": 6, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "4"], ["i", "0"]]}, {"line": 7, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "4"], ["i", "0"]]}, {"line": 10, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "0"]]}, {"line": 5, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "1"]]}, {"line": 6, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "1"]]}, {"line": 7, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "1"], ["i", "1"]]}, {"line": 10, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "1"], ["i", "1"]]}, {"line": 5, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "1"], ["i", "2"]]}, {"line": 6, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "1"], ["i", "2"]]}, {"line": 9, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "2"]]}, {"line": 10, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "2"]]}, {"line": 5, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "3"]]}, {"line": 6, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "1"], ["i", "3"]]}, {"line": 9, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "1"], ["i", "3"]]}, {"line": 10, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 5, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 11, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 13, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 14, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 15, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "0"]]}, {"line": 16, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "0"]]}, {"line": 17, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "0"], ["i", "0"]]}, {"line": 15, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "0"], ["i", "1"]]}, {"line": 16, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "0"], ["i", "1"]]}, {"line": 17, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "0"], ["i", "1"]]}, {"line": 15, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "0"], ["i", "2"]]}, {"line": 16, "state": [["N", "3"], ["S", "()"], ["lv", "2"], ["lmin", "0"], ["i", "2"]]}, {"line": 19, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "0"], ["i", "2"]]}, {"line": 15, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "0"], ["i", "3"]]}, {"line": 16, "state": [["N", "3"], ["S", "()"], ["lv", "1"], ["lmin", "0"], ["i", "3"]]}, {"line": 19, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 15, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 20, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}, {"line": 22, "state": [["N", "3"], ["S", "()"], ["lv", "0"], ["lmin", "0"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3, 10, 9, 10, 9, 10, 7, 3]], "4": [[4, 1], [4, 12, 11, 10, 9, 10, 9, 10, 7, 3]], "5": [[5, 4, 1], [5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 4, 1], [5, 6, 5, 6, 5, 6, 5, 4, 1], [5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3]], "6": [[6, 5, 4, 1], [6, 5, 6, 5, 4, 1], [6, 5, 6, 5, 6, 5, 4, 1], [6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3]], "7": [[7, 3], [7, 3, 10, 9, 10, 9, 10, 7, 3], [7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "9": [[9, 10, 7, 3], [9, 10, 9, 10, 7, 3], [9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3], [9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "10": [[10, 7, 3], [10, 9, 10, 7, 3], [10, 9, 10, 9, 10, 7, 3], [10, 7, 3, 10, 9, 10, 9, 10, 7, 3], [10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3], [10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3], [10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "11": [[11, 10, 9, 10, 9, 10, 7, 3], [11, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "12": [[12, 11, 10, 9, 10, 9, 10, 7, 3]], "13": [[13]], "14": [[14, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "15": [[15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3]], "16": [[16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3], [16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3]], "17": [[17, 14, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3], [17, 14, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "19": [[19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3], [19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "20": [[20, 19, 17, 14, 10, 9, 10, 9, 10, 7, 10, 7, 3, 10, 9, 10, 9, 10, 7, 3]], "22": [[22, 15, 16, 15, 16, 15, 16, 15, 16, 15, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 12, 11, 10, 9, 10, 9, 10, 7, 3]]}}
{"id": 4807, "code": "String s = \"internationalization\";\nint mojisuu = s.length();\nint tyuukanmojisuu = s.length() - 2;\nchar[] s_list = s.toCharArray();\nSystem.out.printf(\"%c%d%c%n\", s_list[0], tyuukanmojisuu, s_list[mojisuu - 1]);", "code_tokens": ["<0>", "String", "s", "=", "\"internationalization\"", ";", "<1>", "int", "mojisuu", "=", "s", ".", "length", "(", ")", ";", "<2>", "int", "tyuukanmojisuu", "=", "s", ".", "length", "(", ")", "-", "2", ";", "<3>", "char", "[", "]", "s_list", "=", "s", ".", "toCharArray", "(", ")", ";", "<4>", "System", ".", "out", ".", "printf", "(", "\"%c%d%c%n\"", ",", "s_list", "[", "0", "]", ",", "tyuukanmojisuu", ",", "s_list", "[", "mojisuu", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "internationalization"]]}, {"line": 1, "state": [["s", "internationalization"], ["mojisuu", "20"]]}, {"line": 2, "state": [["s", "internationalization"], ["mojisuu", "20"], ["tyuukanmojisuu", "18"]]}, {"line": 3, "state": [["s", "internationalization"], ["mojisuu", "20"], ["tyuukanmojisuu", "18"], ["s_list", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}, {"line": 4, "state": [["s", "internationalization"], ["mojisuu", "20"], ["tyuukanmojisuu", "18"], ["s_list", "[ i , n , t , e , r , n , a , t , i , o , n , a , l , i , z , a , t , i , o , n ]"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 4557, "code": "char[] s = {'x', 'y', 'z'};\nString t = Integer.toString(s.length - 2);\nSystem.out.println(s[0] + t + s[s.length - 1]);", "code_tokens": ["<0>", "char", "[", "]", "s", "=", "{", "'x'", ",", "'y'", ",", "'z'", "}", ";", "<1>", "String", "t", "=", "Integer", ".", "toString", "(", "s", ".", "length", "-", "2", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", "[", "0", "]", "+", "t", "+", "s", "[", "s", ".", "length", "-", "1", "]", ")", ";"], "trace": [{"line": 0, "state": [["s", "[ x , y , z ]"]]}, {"line": 1, "state": [["s", "[ x , y , z ]"], ["t", "1"]]}, {"line": 2, "state": [["s", "[ x , y , z ]"], ["t", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 2128, "code": "int n = 10, a = 3, b = 5;\nint max_ = Math.min(a, b);\nint min_ = Math.max(a + b - n, 0);\nSystem.out.println(max_ + \" \" + min_);", "code_tokens": ["<0>", "int", "n", "=", "10", ",", "a", "=", "3", ",", "b", "=", "5", ";", "<1>", "int", "max_", "=", "Math", ".", "min", "(", "a", ",", "b", ")", ";", "<2>", "int", "min_", "=", "Math", ".", "max", "(", "a", "+", "b", "-", "n", ",", "0", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "max_", "+", "\" \"", "+", "min_", ")", ";"], "trace": [{"line": 0, "state": [["n", "10"], ["a", "3"], ["b", "5"]]}, {"line": 1, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["max_", "3"]]}, {"line": 2, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["max_", "3"], ["min_", "0"]]}, {"line": 3, "state": [["n", "10"], ["a", "3"], ["b", "5"], ["max_", "3"], ["min_", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 817, "code": "int k = 101;\nint a = 7;\nint cnt = 1;\nwhile (cnt <= k + 2) {\nif (a % k == 0) {\nSystem.out.println(cnt);\nboolean flag = true;\nbreak;}\nelse {\nboolean flag = false;\ncnt++;\na = (10 * a + 7) % k;}}\nif (!flag) {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "k", "=", "101", ";", "<1>", "int", "a", "=", "7", ";", "<2>", "int", "cnt", "=", "1", ";", "<3>", "while", "(", "cnt", "<=", "k", "+", "2", ")", "{", "<4>", "if", "(", "a", "%", "k", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";", "<6>", "boolean", "flag", "=", "true", ";", "<7>", "break", ";", "}", "<8>", "else", "{", "<9>", "boolean", "flag", "=", "false", ";", "<10>", "cnt", "++", ";", "<11>", "a", "=", "(", "10", "*", "a", "+", "7", ")", "%", "k", ";", "}", "}", "<12>", "if", "(", "!", "flag", ")", "{", "<13>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["k", "101"]]}, {"line": 1, "state": [["k", "101"], ["a", "7"]]}, {"line": 2, "state": [["k", "101"], ["a", "7"], ["cnt", "1"]]}, {"line": 3, "state": [["k", "101"], ["a", "7"], ["cnt", "1"]]}, {"line": 4, "state": [["k", "101"], ["a", "7"], ["cnt", "1"]]}, {"line": 9, "state": [["k", "101"], ["a", "7"], ["cnt", "1"], ["flag", "False"]]}, {"line": 10, "state": [["k", "101"], ["a", "7"], ["cnt", "2"], ["flag", "False"]]}, {"line": 11, "state": [["k", "101"], ["a", "77"], ["cnt", "2"], ["flag", "False"]]}, {"line": 3, "state": [["k", "101"], ["a", "77"], ["cnt", "2"], ["flag", "False"]]}, {"line": 4, "state": [["k", "101"], ["a", "77"], ["cnt", "2"], ["flag", "False"]]}, {"line": 9, "state": [["k", "101"], ["a", "77"], ["cnt", "2"], ["flag", "False"]]}, {"line": 10, "state": [["k", "101"], ["a", "77"], ["cnt", "3"], ["flag", "False"]]}, {"line": 11, "state": [["k", "101"], ["a", "70"], ["cnt", "3"], ["flag", "False"]]}, {"line": 3, "state": [["k", "101"], ["a", "70"], ["cnt", "3"], ["flag", "False"]]}, {"line": 4, "state": [["k", "101"], ["a", "70"], ["cnt", "3"], ["flag", "False"]]}, {"line": 9, "state": [["k", "101"], ["a", "70"], ["cnt", "3"], ["flag", "False"]]}, {"line": 10, "state": [["k", "101"], ["a", "70"], ["cnt", "4"], ["flag", "False"]]}, {"line": 11, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "False"]]}, {"line": 3, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "False"]]}, {"line": 4, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "False"]]}, {"line": 5, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "False"]]}, {"line": 6, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "True"]]}, {"line": 7, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "True"]]}, {"line": 12, "state": [["k", "101"], ["a", "0"], ["cnt", "4"], ["flag", "True"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2, 0], [3, 11, 4, 3, 2, 0], [3, 11, 4, 3, 11, 4, 3, 2, 0], [3, 11, 4, 3, 11, 4, 3, 11, 4, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 11, 4, 3, 2, 0], [4, 3, 11, 4, 3, 11, 4, 3, 2, 0], [4, 3, 11, 4, 3, 11, 4, 3, 11, 4, 3, 2, 0]], "5": [[5, 3, 11, 4, 3, 11, 4, 3, 11, 4, 3, 2, 0]], "6": [[6, 9, 9, 9]], "7": [[7]], "9": [[9], [9], [9]], "10": [[10, 3, 2, 0], [10, 3, 11, 4, 3, 2, 0], [10, 3, 11, 4, 3, 11, 4, 3, 2, 0]], "11": [[11, 4, 3, 2, 0], [11, 4, 3, 11, 4, 3, 2, 0], [11, 4, 3, 11, 4, 3, 11, 4, 3, 2, 0]], "12": [[12, 6, 9, 9, 9]]}}
{"id": 872, "code": "int K = 101;\nint mm = 7;\nint cnt = 1;\nfor (int i = 0; i < Math.pow(10, 7); i++) {\nif (mm % K == 0) {\nSystem.out.println(cnt);\nbreak;}\nelse {\nmm = mm * 10 + 7;\nmm %= K;\ncnt += 1;}}\nelse {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "K", "=", "101", ";", "<1>", "int", "mm", "=", "7", ";", "<2>", "int", "cnt", "=", "1", ";", "<3>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "Math", ".", "pow", "(", "10", ",", "7", ")", ";", "i", "++", ")", "{", "<4>", "if", "(", "mm", "%", "K", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "cnt", ")", ";", "<6>", "break", ";", "}", "<7>", "else", "{", "<8>", "mm", "=", "mm", "*", "10", "+", "7", ";", "<9>", "mm", "%=", "K", ";", "<10>", "cnt", "+=", "1", ";", "}", "}", "<11>", "else", "{", "<12>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["K", "101"]]}, {"line": 1, "state": [["K", "101"], ["mm", "7"]]}, {"line": 2, "state": [["K", "101"], ["mm", "7"], ["cnt", "1"]]}, {"line": 3, "state": [["K", "101"], ["mm", "7"], ["cnt", "1"], ["i", "0"]]}, {"line": 4, "state": [["K", "101"], ["mm", "7"], ["cnt", "1"], ["i", "0"]]}, {"line": 8, "state": [["K", "101"], ["mm", "77"], ["cnt", "1"], ["i", "0"]]}, {"line": 9, "state": [["K", "101"], ["mm", "77"], ["cnt", "1"], ["i", "0"]]}, {"line": 10, "state": [["K", "101"], ["mm", "77"], ["cnt", "2"], ["i", "0"]]}, {"line": 3, "state": [["K", "101"], ["mm", "77"], ["cnt", "2"], ["i", "1"]]}, {"line": 4, "state": [["K", "101"], ["mm", "77"], ["cnt", "2"], ["i", "1"]]}, {"line": 8, "state": [["K", "101"], ["mm", "777"], ["cnt", "2"], ["i", "1"]]}, {"line": 9, "state": [["K", "101"], ["mm", "70"], ["cnt", "2"], ["i", "1"]]}, {"line": 10, "state": [["K", "101"], ["mm", "70"], ["cnt", "3"], ["i", "1"]]}, {"line": 3, "state": [["K", "101"], ["mm", "70"], ["cnt", "3"], ["i", "2"]]}, {"line": 4, "state": [["K", "101"], ["mm", "70"], ["cnt", "3"], ["i", "2"]]}, {"line": 8, "state": [["K", "101"], ["mm", "707"], ["cnt", "3"], ["i", "2"]]}, {"line": 9, "state": [["K", "101"], ["mm", "0"], ["cnt", "3"], ["i", "2"]]}, {"line": 10, "state": [["K", "101"], ["mm", "0"], ["cnt", "4"], ["i", "2"]]}, {"line": 3, "state": [["K", "101"], ["mm", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 4, "state": [["K", "101"], ["mm", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 5, "state": [["K", "101"], ["mm", "0"], ["cnt", "4"], ["i", "3"]]}, {"line": 6, "state": [["K", "101"], ["mm", "0"], ["cnt", "4"], ["i", "3"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3], [3], [3], [3]], "4": [[4, 1, 0], [4, 9, 8, 4, 1, 0], [4, 9, 8, 4, 9, 8, 4, 1, 0], [4, 9, 8, 4, 9, 8, 4, 9, 8, 4, 1, 0]], "5": [[5, 10, 2]], "6": [[6]], "8": [[8, 4, 1, 0], [8, 4, 9, 8, 4, 1, 0], [8, 4, 9, 8, 4, 9, 8, 4, 1, 0]], "9": [[9, 8, 4, 1, 0], [9, 8, 4, 9, 8, 4, 1, 0], [9, 8, 4, 9, 8, 4, 9, 8, 4, 1, 0]], "10": [[10, 2], [10, 2], [10, 2]]}}
{"id": 8407, "code": "int N = 7;\nint[] A1 = {3, 3, 4, 5, 4, 5, 3};\nint[] A2 = {5, 3, 4, 4, 2, 3, 2};\nint[] ans = new int[N];\nint i = 0;\nwhile (i < N) {\nfor (int j = 0; j <= i; j++) {ans[i] += A1[j];}\nfor (int j = i; j < N; j++) {ans[i] += A2[j];}\ni++;}\nint maxAns = ans[0];for (int j = 1; j < ans.length; j++) {if (ans[j] > maxAns) {maxAns = ans[j];}}System.out.println(maxAns);", "code_tokens": ["<0>", "int", "N", "=", "7", ";", "<1>", "int", "[", "]", "A1", "=", "{", "3", ",", "3", ",", "4", ",", "5", ",", "4", ",", "5", ",", "3", "}", ";", "<2>", "int", "[", "]", "A2", "=", "{", "5", ",", "3", ",", "4", ",", "4", ",", "2", ",", "3", ",", "2", "}", ";", "<3>", "int", "[", "]", "ans", "=", "new", "int", "[", "N", "]", ";", "<4>", "int", "i", "=", "0", ";", "<5>", "while", "(", "i", "<", "N", ")", "{", "<6>", "for", "(", "int", "j", "=", "0", ";", "j", "<=", "i", ";", "j", "++", ")", "{", "ans", "[", "i", "]", "+=", "A1", "[", "j", "]", ";", "}", "<7>", "for", "(", "int", "j", "=", "i", ";", "j", "<", "N", ";", "j", "++", ")", "{", "ans", "[", "i", "]", "+=", "A2", "[", "j", "]", ";", "}", "<8>", "i", "++", ";", "}", "<9>", "int", "maxAns", "=", "ans", "[", "0", "]", ";", "for", "(", "int", "j", "=", "1", ";", "j", "<", "ans", ".", "length", ";", "j", "++", ")", "{", "if", "(", "ans", "[", "j", "]", ">", "maxAns", ")", "{", "maxAns", "=", "ans", "[", "j", "]", ";", "}", "}", "System", ".", "out", ".", "println", "(", "maxAns", ")", ";"], "trace": [{"line": 0, "state": [["N", "7"]]}, {"line": 1, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"]]}, {"line": 2, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"]]}, {"line": 3, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"]]}, {"line": 4, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 0 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 3 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "0"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "1"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 0 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "1"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 6 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "1"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "1"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "2"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 0 , 0 , 0 , 0 , 0 ]"], ["i", "2"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 10 , 0 , 0 , 0 , 0 ]"], ["i", "2"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 0 , 0 , 0 , 0 ]"], ["i", "2"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 0 , 0 , 0 , 0 ]"], ["i", "3"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 0 , 0 , 0 , 0 ]"], ["i", "3"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 15 , 0 , 0 , 0 ]"], ["i", "3"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 0 , 0 , 0 ]"], ["i", "3"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 0 , 0 , 0 ]"], ["i", "4"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 0 , 0 , 0 ]"], ["i", "4"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 19 , 0 , 0 ]"], ["i", "4"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 0 , 0 ]"], ["i", "4"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 0 , 0 ]"], ["i", "5"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 0 , 0 ]"], ["i", "5"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 24 , 0 ]"], ["i", "5"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 0 ]"], ["i", "5"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 0 ]"], ["i", "6"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 0 ]"], ["i", "6"]]}, {"line": 6, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 27 ]"], ["i", "6"]]}, {"line": 7, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 29 ]"], ["i", "6"]]}, {"line": 8, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 29 ]"], ["i", "7"]]}, {"line": 5, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 29 ]"], ["i", "7"]]}, {"line": 9, "state": [["N", "7"], ["A1", "[ 3 , 3 , 4 , 5 , 4 , 5 , 3 ]"], ["A2", "[ 5 , 3 , 4 , 4 , 2 , 3 , 2 ]"], ["ans", "[ 26 , 24 , 25 , 26 , 26 , 29 , 29 ]"], ["i", "7"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4]], "5": [[5, 4, 3, 0], [5, 8, 7, 6, 5, 4, 3, 0], [5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0]], "6": [[6, 5, 4, 3, 0], [6, 5, 8, 7, 6, 5, 4, 3, 0], [6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0]], "7": [[7, 6, 5, 4, 3, 0], [7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0]], "8": [[8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0]], "9": [[9, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 8, 7, 6, 5, 4, 3, 0]]}}
{"id": 12415, "code": "String a = \"akasaka\";\nint b = a.length();\nint c = (b - 1) / 2;\nint d = (b + 3) / 2;\nif (a.substring(0, c).equals(a.substring(d - 1))) {\nSystem.out.println(\"Yes\");\n} else {\nSystem.out.println(\"No\");}", "code_tokens": ["<0>", "String", "a", "=", "\"akasaka\"", ";", "<1>", "int", "b", "=", "a", ".", "length", "(", ")", ";", "<2>", "int", "c", "=", "(", "b", "-", "1", ")", "/", "2", ";", "<3>", "int", "d", "=", "(", "b", "+", "3", ")", "/", "2", ";", "<4>", "if", "(", "a", ".", "substring", "(", "0", ",", "c", ")", ".", "equals", "(", "a", ".", "substring", "(", "d", "-", "1", ")", ")", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "\"Yes\"", ")", ";", "<6>", "}", "else", "{", "<7>", "System", ".", "out", ".", "println", "(", "\"No\"", ")", ";", "}"], "trace": [{"line": 0, "state": [["a", "akasaka"]]}, {"line": 1, "state": [["a", "akasaka"], ["b", "7"]]}, {"line": 2, "state": [["a", "akasaka"], ["b", "7"], ["c", "3"]]}, {"line": 3, "state": [["a", "akasaka"], ["b", "7"], ["c", "3"], ["d", "5"]]}, {"line": 4, "state": [["a", "akasaka"], ["b", "7"], ["c", "3"], ["d", "5"]]}, {"line": 5, "state": [["a", "akasaka"], ["b", "7"], ["c", "3"], ["d", "5"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]], "5": [[5]]}}
{"id": 2005, "code": "int N = 100, A = 100, B = 100;\nint X = (A < B) ? A : B;\nint Y = (N > A + B) ? 0 : (A + B - N);\nSystem.out.println(String.format(\"%d %d\", X, Y));", "code_tokens": ["<0>", "int", "N", "=", "100", ",", "A", "=", "100", ",", "B", "=", "100", ";", "<1>", "int", "X", "=", "(", "A", "<", "B", ")", "?", "A", ":", "B", ";", "<2>", "int", "Y", "=", "(", "N", ">", "A", "+", "B", ")", "?", "0", ":", "(", "A", "+", "B", "-", "N", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "X", ",", "Y", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "100"], ["A", "100"], ["B", "100"]]}, {"line": 1, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["X", "100"]]}, {"line": 2, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["X", "100"], ["Y", "100"]]}, {"line": 3, "state": [["N", "100"], ["A", "100"], ["B", "100"], ["X", "100"], ["Y", "100"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 11425, "code": "String S = \"SUN\";\njava.util.Map<String, Integer> week = new java.util.HashMap<>();week.put(\"SUN\", 0);week.put(\"MON\", 1);week.put(\"TUE\", 2);week.put(\"WED\", 3);\nweek.put(\"THU\", 4);week.put(\"FRI\", 5);week.put(\"SAT\", 6);\nif (S.equals(\"SUN\")) {\nSystem.out.println(7);}\nelse {\nSystem.out.println(7 - week.get(S));}", "code_tokens": ["<0>", "String", "S", "=", "\"SUN\"", ";", "<1>", "java", ".", "util", ".", "Map", "<", "String", ",", "Integer", ">", "week", "=", "new", "java", ".", "util", ".", "HashMap", "<", ">", "(", ")", ";", "week", ".", "put", "(", "\"SUN\"", ",", "0", ")", ";", "week", ".", "put", "(", "\"MON\"", ",", "1", ")", ";", "week", ".", "put", "(", "\"TUE\"", ",", "2", ")", ";", "week", ".", "put", "(", "\"WED\"", ",", "3", ")", ";", "<2>", "week", ".", "put", "(", "\"THU\"", ",", "4", ")", ";", "week", ".", "put", "(", "\"FRI\"", ",", "5", ")", ";", "week", ".", "put", "(", "\"SAT\"", ",", "6", ")", ";", "<3>", "if", "(", "S", ".", "equals", "(", "\"SUN\"", ")", ")", "{", "<4>", "System", ".", "out", ".", "println", "(", "7", ")", ";", "}", "<5>", "else", "{", "<6>", "System", ".", "out", ".", "println", "(", "7", "-", "week", ".", "get", "(", "S", ")", ")", ";", "}"], "trace": [{"line": 0, "state": [["S", "SUN"]]}, {"line": 1, "state": [["S", "SUN"]]}, {"line": 2, "state": [["S", "SUN"], ["week", "{ SUN"]]}, {"line": 3, "state": [["S", "SUN"], ["week", "{ SUN"]]}, {"line": 4, "state": [["S", "SUN"], ["week", "{ SUN"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0]], "4": [[4]]}}
{"id": 16302, "code": "int n = 2;\nint[] a = {100, 0};\nint nmax = a[0];for (int i = 1; i < n; i++) {if (a[i] > nmax) {nmax = a[i];}}\ndouble target = nmax / 2.0;\nint cur = a[0] != nmax ? a[0] : a[1];\ndouble curdiff = Math.abs(cur - target);\nfor (int i = 0; i < n; i++) {\nif (a[i] == nmax) {\ncontinue;}\ndouble diff = Math.abs(a[i] - target);\nif (diff < curdiff) {\ncurdiff = diff;\ncur = a[i];}}\nSystem.out.println(nmax + \" \" + cur);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "int", "nmax", "=", "a", "[", "0", "]", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "n", ";", "i", "++", ")", "{", "if", "(", "a", "[", "i", "]", ">", "nmax", ")", "{", "nmax", "=", "a", "[", "i", "]", ";", "}", "}", "<3>", "double", "target", "=", "nmax", "/", "2.0", ";", "<4>", "int", "cur", "=", "a", "[", "0", "]", "!=", "nmax", "?", "a", "[", "0", "]", ":", "a", "[", "1", "]", ";", "<5>", "double", "curdiff", "=", "Math", ".", "abs", "(", "cur", "-", "target", ")", ";", "<6>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "<7>", "if", "(", "a", "[", "i", "]", "==", "nmax", ")", "{", "<8>", "continue", ";", "}", "<9>", "double", "diff", "=", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "target", ")", ";", "<10>", "if", "(", "diff", "<", "curdiff", ")", "{", "<11>", "curdiff", "=", "diff", ";", "<12>", "cur", "=", "a", "[", "i", "]", ";", "}", "}", "<13>", "System", ".", "out", ".", "println", "(", "nmax", "+", "\" \"", "+", "cur", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "0"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "0"]]}, {"line": 8, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "1"]]}, {"line": 7, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "1"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "1"], ["diff", "50.0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "1"], ["diff", "50.0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "1"], ["diff", "50.0"]]}, {"line": 13, "state": [["n", "2"], ["a", "[ 100 , 0 ]"], ["nmax", "100"], ["target", "50.0"], ["cur", "0"], ["curdiff", "50.0"], ["i", "1"], ["diff", "50.0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]], "6": [[6, 0], [6, 7, 6, 0], [6, 9, 7, 6, 7, 6, 0]], "7": [[7, 6, 0], [7, 6, 7, 6, 0]], "8": [[8]], "9": [[9, 7, 6, 7, 6, 0]], "10": [[10, 9, 7, 6, 7, 6, 0]], "13": [[13, 7, 6, 7, 6, 0]]}}
{"id": 14943, "code": "int inp1 = 3, inp2 = 0;\nint[] c = {1, 1, 1};\nint add = 0;for (int num : c) {add += num;}\nint ans;if (add != 0) {\nans = (int) Math.pow(2, inp1 - 1);} else {\nans = (int) Math.pow(2, inp1) * (1 - inp2);}\nSystem.out.println(ans);", "code_tokens": ["<0>", "int", "inp1", "=", "3", ",", "inp2", "=", "0", ";", "<1>", "int", "[", "]", "c", "=", "{", "1", ",", "1", ",", "1", "}", ";", "<2>", "int", "add", "=", "0", ";", "for", "(", "int", "num", ":", "c", ")", "{", "add", "+=", "num", ";", "}", "<3>", "int", "ans", ";", "if", "(", "add", "!=", "0", ")", "{", "<4>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "inp1", "-", "1", ")", ";", "}", "else", "{", "<5>", "ans", "=", "(", "int", ")", "Math", ".", "pow", "(", "2", ",", "inp1", ")", "*", "(", "1", "-", "inp2", ")", ";", "}", "<6>", "System", ".", "out", ".", "println", "(", "ans", ")", ";"], "trace": [{"line": 0, "state": [["inp1", "3"], ["inp2", "0"]]}, {"line": 1, "state": [["inp1", "3"], ["inp2", "0"], ["c", "[ 1 , 1 , 1 ]"]]}, {"line": 2, "state": [["inp1", "3"], ["inp2", "0"], ["c", "[ 1 , 1 , 1 ]"], ["add", "3"]]}, {"line": 3, "state": [["inp1", "3"], ["inp2", "0"], ["c", "[ 1 , 1 , 1 ]"], ["add", "3"]]}, {"line": 4, "state": [["inp1", "3"], ["inp2", "0"], ["c", "[ 1 , 1 , 1 ]"], ["add", "3"], ["ans", "4"]]}, {"line": 7, "state": [["inp1", "3"], ["inp2", "0"], ["c", "[ 1 , 1 , 1 ]"], ["add", "3"], ["ans", "4"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 0]], "7": [[7, 4, 0]]}}
{"id": 2293, "code": "int N = 10, A = 3, B = 5;\nint ma = Math.min(A, B);\nint mi = Math.max(0, (A + B) - N);\nSystem.out.println(String.format(\"%d %d\", ma, mi));", "code_tokens": ["<0>", "int", "N", "=", "10", ",", "A", "=", "3", ",", "B", "=", "5", ";", "<1>", "int", "ma", "=", "Math", ".", "min", "(", "A", ",", "B", ")", ";", "<2>", "int", "mi", "=", "Math", ".", "max", "(", "0", ",", "(", "A", "+", "B", ")", "-", "N", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%d %d\"", ",", "ma", ",", "mi", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "10"], ["A", "3"], ["B", "5"]]}, {"line": 1, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["ma", "3"]]}, {"line": 2, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["ma", "3"], ["mi", "0"]]}, {"line": 3, "state": [["N", "10"], ["A", "3"], ["B", "5"], ["ma", "3"], ["mi", "0"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
{"id": 16205, "code": "int n = 2;\nint[] a = {100, 0};\nArrays.sort(a);\nint left = a[a.length - 1];a = Arrays.copyOf(a, a.length - 1); // Remove last element\ndouble yoi = left / 2.0;\nfor (int i = 0; i < n - 1; i++) {\nif (a[i] >= yoi) {\na[i] = Math.abs(a[i] - (int)yoi) * 1;}\nelse {\na[i] = Math.abs(a[i] - (int)yoi) * -1;}}\nArrays.sort(a);\nint right = Math.abs(a[0] + (a[0] >= 0 ? 1 : -1) * (int)yoi);\nSystem.out.println(left + \" \" + right);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "[", "]", "a", "=", "{", "100", ",", "0", "}", ";", "<2>", "Arrays", ".", "sort", "(", "a", ")", ";", "<3>", "int", "left", "=", "a", "[", "a", ".", "length", "-", "1", "]", ";", "a", "=", "Arrays", ".", "copyOf", "(", "a", ",", "a", ".", "length", "-", "1", ")", ";", "// Remove last element", "<4>", "double", "yoi", "=", "left", "/", "2.0", ";", "<5>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", "-", "1", ";", "i", "++", ")", "{", "<6>", "if", "(", "a", "[", "i", "]", ">=", "yoi", ")", "{", "<7>", "a", "[", "i", "]", "=", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "(", "int", ")", "yoi", ")", "*", "1", ";", "}", "<8>", "else", "{", "<9>", "a", "[", "i", "]", "=", "Math", ".", "abs", "(", "a", "[", "i", "]", "-", "(", "int", ")", "yoi", ")", "*", "-", "1", ";", "}", "}", "<10>", "Arrays", ".", "sort", "(", "a", ")", ";", "<11>", "int", "right", "=", "Math", ".", "abs", "(", "a", "[", "0", "]", "+", "(", "a", "[", "0", "]", ">=", "0", "?", "1", ":", "-", "1", ")", "*", "(", "int", ")", "yoi", ")", ";", "<12>", "System", ".", "out", ".", "println", "(", "left", "+", "\" \"", "+", "right", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["a", "[ 100 , 0 ]"]]}, {"line": 2, "state": [["n", "2"], ["a", "[ 0 , 100 ]"]]}, {"line": 3, "state": [["n", "2"], ["a", "[ 0 ]"], ["left", "100"]]}, {"line": 4, "state": [["n", "2"], ["a", "[ 0 ]"], ["left", "100"], ["yoi", "50.0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ 0 ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"]]}, {"line": 6, "state": [["n", "2"], ["a", "[ 0 ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"]]}, {"line": 9, "state": [["n", "2"], ["a", "[ (50.0 , -1) ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"]]}, {"line": 5, "state": [["n", "2"], ["a", "[ (50.0 , -1) ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"]]}, {"line": 10, "state": [["n", "2"], ["a", "[ (50.0 , -1) ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"]]}, {"line": 11, "state": [["n", "2"], ["a", "[ (50.0 , -1) ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"], ["right", "0"]]}, {"line": 12, "state": [["n", "2"], ["a", "[ (50.0 , -1) ]"], ["left", "100"], ["yoi", "50.0"], ["i", "0"], ["right", "0"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1]], "4": [[4, 3, 2, 1]], "5": [[5, 0], [5, 9, 6, 5, 0]], "6": [[6, 5, 0]], "9": [[9, 6, 5, 0]], "10": [[10, 9, 6, 5, 0]], "11": [[11, 10, 9, 6, 5, 0]], "12": [[12, 11, 10, 9, 6, 5, 0]]}}
{"id": 3066, "code": "String S = \"1111111111\";\nint num_len = 999;\nfor (int i = 0; i < S.length() - 2; i++) {\nint X = Integer.parseInt(S.substring(i, i + 3));\nnum_len = Math.min(num_len, Math.abs(753 - X));}\nSystem.out.println(num_len);", "code_tokens": ["<0>", "String", "S", "=", "\"1111111111\"", ";", "<1>", "int", "num_len", "=", "999", ";", "<2>", "for", "(", "int", "i", "=", "0", ";", "i", "<", "S", ".", "length", "(", ")", "-", "2", ";", "i", "++", ")", "{", "<3>", "int", "X", "=", "Integer", ".", "parseInt", "(", "S", ".", "substring", "(", "i", ",", "i", "+", "3", ")", ")", ";", "<4>", "num_len", "=", "Math", ".", "min", "(", "num_len", ",", "Math", ".", "abs", "(", "753", "-", "X", ")", ")", ";", "}", "<5>", "System", ".", "out", ".", "println", "(", "num_len", ")", ";"], "trace": [{"line": 0, "state": [["S", "1111111111"]]}, {"line": 1, "state": [["S", "1111111111"], ["num_len", "999"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "999"], ["i", "0"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "999"], ["i", "0"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "0"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "1"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "1"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "1"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "2"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "2"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "2"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "3"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "3"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "3"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "4"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "4"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "4"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "5"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "5"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "5"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "6"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "6"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "6"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "7"], ["X", "111"]]}, {"line": 3, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "7"], ["X", "111"]]}, {"line": 4, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "7"], ["X", "111"]]}, {"line": 2, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "7"], ["X", "111"]]}, {"line": 5, "state": [["S", "1111111111"], ["num_len", "642"], ["i", "7"], ["X", "111"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 0], [2, 3, 2, 0], [2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "3": [[3, 2, 0], [3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "4": [[4, 3, 2, 0], [4, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0], [4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]], "5": [[5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0]]}}
{"id": 4635, "code": "String s = \"xyz\";\nchar s1 = s.charAt(0);\nchar s2 = s.charAt(s.length() - 1);\nint l = s.substring(1, s.length() - 1).length();\nSystem.out.println(s1 + String.valueOf(l) + s2);", "code_tokens": ["<0>", "String", "s", "=", "\"xyz\"", ";", "<1>", "char", "s1", "=", "s", ".", "charAt", "(", "0", ")", ";", "<2>", "char", "s2", "=", "s", ".", "charAt", "(", "s", ".", "length", "(", ")", "-", "1", ")", ";", "<3>", "int", "l", "=", "s", ".", "substring", "(", "1", ",", "s", ".", "length", "(", ")", "-", "1", ")", ".", "length", "(", ")", ";", "<4>", "System", ".", "out", ".", "println", "(", "s1", "+", "String", ".", "valueOf", "(", "l", ")", "+", "s2", ")", ";"], "trace": [{"line": 0, "state": [["s", "xyz"]]}, {"line": 1, "state": [["s", "xyz"], ["s1", "x"]]}, {"line": 2, "state": [["s", "xyz"], ["s1", "x"], ["s2", "z"]]}, {"line": 3, "state": [["s", "xyz"], ["s1", "x"], ["s2", "z"], ["l", "1"]]}, {"line": 4, "state": [["s", "xyz"], ["s1", "x"], ["s2", "z"], ["l", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]], "4": [[4, 3, 2, 1, 0]]}}
{"id": 5017, "code": "import java.lang.Math; // Block 2:class Main {public static void main(String[] args) { // Block 3:String sam = \"internationalization\";System.out.println(sam.charAt(0) + String.valueOf(sam.length() - 2) + sam.charAt(sam.length() - 1)); // Block 4:", "code_tokens": ["<0>", "import", "java", ".", "lang", ".", "Math", ";", "// Block 2:class Main {public static void main(String[] args) { // Block 3:String sam = \"internationalization\";System.out.println(sam.charAt(0) + String.valueOf(sam.length() - 2) + sam.charAt(sam.length() - 1)); // Block 4:"], "trace": [{"line": 0, "state": []}, {"line": 1, "state": []}, {"line": 2, "state": [["sam", "internationalization"]]}, {"line": 3, "state": [["sam", "internationalization"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 2]]}}
{"id": 5591, "code": "int n = 2;\nint s = (int)(n / 2 + 0.9);\nSystem.out.println(s);", "code_tokens": ["<0>", "int", "n", "=", "2", ";", "<1>", "int", "s", "=", "(", "int", ")", "(", "n", "/", "2", "+", "0.9", ")", ";", "<2>", "System", ".", "out", ".", "println", "(", "s", ")", ";"], "trace": [{"line": 0, "state": [["n", "2"]]}, {"line": 1, "state": [["n", "2"], ["s", "1"]]}, {"line": 2, "state": [["n", "2"], ["s", "1"]]}], "slices": {"0": [[0]], "1": [[1, 0]], "2": [[2, 1, 0]]}}
{"id": 16316, "code": "int N = 5;\nint[] A = {6, 9, 4, 2, 11};\nint mx = Integer.MIN_VALUE;for (int num : A) {mx = Math.max(mx, num);}\nArrayList<Integer> list = new ArrayList<>();for (int a : A) {if (a < mx) {list.add(a);}}\nCollections.sort(list, (a, b) -> Double.compare(Math.abs(mx / 2.0 - a), Math.abs(mx / 2.0 - b)));\nSystem.out.println(mx + \" \" + list.get(0));", "code_tokens": ["<0>", "int", "N", "=", "5", ";", "<1>", "int", "[", "]", "A", "=", "{", "6", ",", "9", ",", "4", ",", "2", ",", "11", "}", ";", "<2>", "int", "mx", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "num", ":", "A", ")", "{", "mx", "=", "Math", ".", "max", "(", "mx", ",", "num", ")", ";", "}", "<3>", "ArrayList", "<", "Integer", ">", "list", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "int", "a", ":", "A", ")", "{", "if", "(", "a", "<", "mx", ")", "{", "list", ".", "add", "(", "a", ")", ";", "}", "}", "<4>", "Collections", ".", "sort", "(", "list", ",", "(", "a", ",", "b", ")", "->", "Double", ".", "compare", "(", "Math", ".", "abs", "(", "mx", "/", "2.0", "-", "a", ")", ",", "Math", ".", "abs", "(", "mx", "/", "2.0", "-", "b", ")", ")", ")", ";", "<5>", "System", ".", "out", ".", "println", "(", "mx", "+", "\" \"", "+", "list", ".", "get", "(", "0", ")", ")", ";"], "trace": [{"line": 0, "state": [["N", "5"]]}, {"line": 1, "state": [["N", "5"], ["A", "[ 6 , 9 , 4 , 2 , 11 ]"]]}, {"line": 2, "state": [["N", "5"], ["A", "[ 6 , 9 , 4 , 2 , 11 ]"], ["mx", "11"]]}, {"line": 3, "state": []}, {"line": 3, "state": []}, {"line": 3, "state": [["a", "6"]]}, {"line": 3, "state": [["a", "9"]]}, {"line": 3, "state": [["a", "4"]]}, {"line": 3, "state": [["a", "2"]]}, {"line": 3, "state": [["a", "11"]]}, {"line": 3, "state": [["a", "11"]]}, {"line": 3, "state": [["N", "5"], ["A", "[ 6 , 9 , 4 , 2 ]"], ["mx", "11"]]}, {"line": 4, "state": [["a", "6"]]}, {"line": 4, "state": [["a", "6"]]}, {"line": 4, "state": [["a", "6"]]}, {"line": 4, "state": [["a", "9"]]}, {"line": 4, "state": [["a", "9"]]}, {"line": 4, "state": [["a", "9"]]}, {"line": 4, "state": [["a", "4"]]}, {"line": 4, "state": [["a", "4"]]}, {"line": 4, "state": [["a", "4"]]}, {"line": 4, "state": [["a", "2"]]}, {"line": 4, "state": [["a", "2"]]}, {"line": 4, "state": [["a", "2"]]}, {"line": 4, "state": [["N", "5"], ["A", "[ 6 , 4 , 9 , 2 ]"], ["mx", "11"]]}, {"line": 5, "state": [["N", "5"], ["A", "[ 6 , 4 , 9 , 2 ]"], ["mx", "11"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2, 1]], "3": [[3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1], [3, 2, 1]], "4": [[4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2, 1]], "5": [[5, 4, 3, 2, 1]]}}
{"id": 691, "code": "int k = 2;\nint a = 7;\nint flag = 0;\nfor (int i = 1; i <= k; i++) {\nif (a % k == 0) {\nSystem.out.println(i);\nflag = 1;\nbreak;}\na = 10 * (a % k) + 7;}\nif (flag == 0) {\nSystem.out.println(-1);}", "code_tokens": ["<0>", "int", "k", "=", "2", ";", "<1>", "int", "a", "=", "7", ";", "<2>", "int", "flag", "=", "0", ";", "<3>", "for", "(", "int", "i", "=", "1", ";", "i", "<=", "k", ";", "i", "++", ")", "{", "<4>", "if", "(", "a", "%", "k", "==", "0", ")", "{", "<5>", "System", ".", "out", ".", "println", "(", "i", ")", ";", "<6>", "flag", "=", "1", ";", "<7>", "break", ";", "}", "<8>", "a", "=", "10", "*", "(", "a", "%", "k", ")", "+", "7", ";", "}", "<9>", "if", "(", "flag", "==", "0", ")", "{", "<10>", "System", ".", "out", ".", "println", "(", "-", "1", ")", ";", "}"], "trace": [{"line": 0, "state": [["k", "2"]]}, {"line": 1, "state": [["k", "2"], ["a", "7"]]}, {"line": 2, "state": [["k", "2"], ["a", "7"], ["flag", "0"]]}, {"line": 3, "state": [["k", "2"], ["a", "7"], ["flag", "0"], ["i", "1"]]}, {"line": 4, "state": [["k", "2"], ["a", "7"], ["flag", "0"], ["i", "1"]]}, {"line": 8, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "1"]]}, {"line": 3, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "2"]]}, {"line": 4, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "2"]]}, {"line": 8, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "2"]]}, {"line": 3, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "2"]]}, {"line": 9, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "2"]]}, {"line": 10, "state": [["k", "2"], ["a", "17"], ["flag", "0"], ["i", "2"]]}], "slices": {"0": [[0]], "1": [[1]], "2": [[2]], "3": [[3, 0], [3, 0], [3, 0]], "4": [[4, 3, 0], [4, 3, 0]], "8": [[8, 4, 3, 0], [8, 4, 3, 0]], "9": [[9, 2]], "10": [[10]]}}
{"id": 2481, "code": "String[] N = {\"9\", \"4\", \"0\", \"8\"};\nSystem.out.println(java.util.Arrays.equals(N, new String[]{\"1\", \"4\", \"7\", \"9\"}) ? \"YES\" : \"NO\");", "code_tokens": ["<0>", "String", "[", "]", "N", "=", "{", "\"9\"", ",", "\"4\"", ",", "\"0\"", ",", "\"8\"", "}", ";", "<1>", "System", ".", "out", ".", "println", "(", "java", ".", "util", ".", "Arrays", ".", "equals", "(", "N", ",", "new", "String", "[", "]", "{", "\"1\"", ",", "\"4\"", ",", "\"7\"", ",", "\"9\"", "}", ")", "?", "\"YES\"", ":", "\"NO\"", ")", ";"], "trace": [{"line": 0, "state": [["N", "{ 9 , 0 , 8 , 4 }"]]}, {"line": 1, "state": [["N", "{ 9 , 0 , 8 , 4 }"]]}], "slices": {"0": [[0]], "1": [[1, 0]]}}
{"id": 13697, "code": "String line_data = \"10 0 15 0 30\";\nString[] parts = line_data.split(\" \");int H1 = Integer.parseInt(parts[0]);int M1 = Integer.parseInt(parts[1]);int H2 = Integer.parseInt(parts[2]);int M2 = Integer.parseInt(parts[3]);int K = Integer.parseInt(parts[4]);\nint miniutes = (H2 - H1) * 60 + (M2 - M1);\nSystem.out.println(miniutes - K);", "code_tokens": ["<0>", "String", "line_data", "=", "\"10 0 15 0 30\"", ";", "<1>", "String", "[", "]", "parts", "=", "line_data", ".", "split", "(", "\" \"", ")", ";", "int", "H1", "=", "Integer", ".", "parseInt", "(", "parts", "[", "0", "]", ")", ";", "int", "M1", "=", "Integer", ".", "parseInt", "(", "parts", "[", "1", "]", ")", ";", "int", "H2", "=", "Integer", ".", "parseInt", "(", "parts", "[", "2", "]", ")", ";", "int", "M2", "=", "Integer", ".", "parseInt", "(", "parts", "[", "3", "]", ")", ";", "int", "K", "=", "Integer", ".", "parseInt", "(", "parts", "[", "4", "]", ")", ";", "<2>", "int", "miniutes", "=", "(", "H2", "-", "H1", ")", "*", "60", "+", "(", "M2", "-", "M1", ")", ";", "<3>", "System", ".", "out", ".", "println", "(", "miniutes", "-", "K", ")", ";"], "trace": [{"line": 0, "state": [["line_data", "10 0 15 0 30"]]}, {"line": 1, "state": [["x", "10"]]}, {"line": 1, "state": [["x", "10"]]}, {"line": 1, "state": [["x", "10"]]}, {"line": 1, "state": [["x", "0"]]}, {"line": 1, "state": [["x", "0"]]}, {"line": 1, "state": [["x", "0"]]}, {"line": 1, "state": [["x", "15"]]}, {"line": 1, "state": [["x", "15"]]}, {"line": 1, "state": [["x", "15"]]}, {"line": 1, "state": [["x", "0"]]}, {"line": 1, "state": [["x", "0"]]}, {"line": 1, "state": [["x", "0"]]}, {"line": 1, "state": [["x", "30"]]}, {"line": 1, "state": [["x", "30"]]}, {"line": 1, "state": [["x", "30"]]}, {"line": 1, "state": [["line_data", "10 0 15 0 30"], ["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"]]}, {"line": 2, "state": [["line_data", "10 0 15 0 30"], ["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["miniutes", "300"]]}, {"line": 3, "state": [["line_data", "10 0 15 0 30"], ["H1", "10"], ["M1", "0"], ["H2", "15"], ["M2", "0"], ["K", "30"], ["miniutes", "300"]]}], "slices": {"0": [[0]], "1": [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], "2": [[2, 1, 0]], "3": [[3, 2, 1, 0]]}}
