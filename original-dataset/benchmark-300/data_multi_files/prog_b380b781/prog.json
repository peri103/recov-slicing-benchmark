{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "DataProcessor.java": "import java.util.Random;\n\npublic class DataProcessor {\n    private Random random = new Random();\n\n    public int generateRandomValue() {\n        return random.nextInt(100);\n    }\n\n    public void processValue(int value) {\n        System.out.println(\"Processing value: \" + value);\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        DataProcessor dataProcessor = new DataProcessor();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the queue\n        Runnable writerTask = () -> {\n            try {\n                int value = dataProcessor.generateRandomValue();\n                System.out.println(\"Writing value: \" + value);\n                queueManager.writeValue(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Task to read from the queue\n        Runnable readerTask = () -> {\n            try {\n                int value = queueManager.readValue();\n                dataProcessor.processValue(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Execute the tasks\n        executor.submit(writerTask);\n        executor.submit(readerTask);\n\n        // Shutdown the executor\n        executor.shutdown();\n\n        // Additional unrelated code to make the program more complex\n        int[] numbers = new int[10];\n        for (int i = 0; i < numbers.length; i++) {\n            numbers[i] = dataProcessor.generateRandomValue();\n        }\n\n        System.out.println(\"Generated numbers:\");\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n        System.out.println();\n\n        // Calculate the sum of the numbers\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write to the queue\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the queue\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writer.start();\n        reader.start();\n\n        // Wait for both threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        Random random = new Random();\n\n        // Task to write to the queue\n        Runnable writerTask = () -> {\n            try {\n                int value = random.nextInt(100);\n                System.out.println(\"Writing value: \" + value);\n                /* write */ queue.put(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Task to read from the queue\n        Runnable readerTask = () -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Execute the tasks\n        executor.submit(writerTask);\n        executor.submit(readerTask);\n\n        // Shutdown the executor\n        executor.shutdown();\n\n        // Additional unrelated code to make the program more complex\n        int[] numbers = new int[10];\n        for (int i = 0; i < numbers.length; i++) {\n            numbers[i] = random.nextInt(100);\n        }\n\n        System.out.println(\"Generated numbers:\");\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n        System.out.println();\n\n        // Calculate the sum of the numbers\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n    }\n}"
}