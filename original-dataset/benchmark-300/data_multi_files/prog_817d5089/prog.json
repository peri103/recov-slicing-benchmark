{
    "files": {
        "MessageQueue.java": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class MessageQueue {\n    private ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();\n\n    public void addMessage(String message) {\n        /* write */ deque.addLast(message);\n    }\n\n    public String getLastMessage() {\n        return deque.peekLast();\n    }\n}\n",
        "MessageProcessor.java": "public class MessageProcessor {\n    private MessageQueue messageQueue;\n\n    public MessageProcessor(MessageQueue messageQueue) {\n        this.messageQueue = messageQueue;\n    }\n\n    public void processMessage(String message) {\n        messageQueue.addMessage(message);\n    }\n\n    public String retrieveLastMessage() {\n        return messageQueue.getLastMessage();\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        MessageQueue messageQueue = new MessageQueue();\n        MessageProcessor processor = new MessageProcessor(messageQueue);\n\n        // Adding some initial messages\n        processor.processMessage(\"Initial Message 1\");\n        processor.processMessage(\"Initial Message 2\");\n\n        // Processing the main message\n        processor.processMessage(\"Hello, World!\");\n\n        // Retrieving the last message\n        /* read */ String lastMessage = processor.retrieveLastMessage();\n        System.out.println(\"Last message: \" + lastMessage);\n\n        // Adding more messages\n        processor.processMessage(\"Additional Message 1\");\n        processor.processMessage(\"Additional Message 2\");\n\n        // Printing all messages\n        System.out.println(\"All messages:\");\n        System.out.println(lastMessage);\n        System.out.println(processor.retrieveLastMessage());\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "read_method": "peekLast"
    },
    "java_code_simple": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();\n        /* write */ deque.addLast(\"Hello, World!\");\n        /* read */ String value = deque.peekLast();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();\n        AtomicInteger counter = new AtomicInteger(0);\n\n        // Adding some initial elements to the deque\n        deque.addFirst(\"First Element\");\n        deque.addFirst(\"Second Element\");\n\n        // Incrementing the counter\n        counter.incrementAndGet();\n        counter.incrementAndGet();\n\n        // Performing the write operation\n        /* write */ deque.addLast(\"Hello, World!\");\n\n        // Performing some unrelated operations\n        int currentCount = counter.get();\n        System.out.println(\"Current counter value: \" + currentCount);\n\n        // Adding more elements to the deque\n        deque.addLast(\"Third Element\");\n        deque.addLast(\"Fourth Element\");\n\n        // Performing the read operation\n        /* read */ String value = deque.peekLast();\n        System.out.println(\"Last element in deque: \" + value);\n\n        // Printing all elements in the deque\n        System.out.println(\"All elements in deque:\");\n        for (String element : deque) {\n            System.out.println(element);\n        }\n\n        // Final counter value\n        System.out.println(\"Final counter value: \" + counter.get());\n    }\n}"
}