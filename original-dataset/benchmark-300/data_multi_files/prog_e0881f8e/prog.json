{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void putValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int takeValue() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        \n        // Create a student and course\n        Student student = new Student(\"Alice\", 20);\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(student);\n        \n        // Write thread\n        Thread writer = new Thread(() -> {\n            try {\n                queueManager.putValue(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start write thread\n        writer.start();\n        \n        // Additional complex code\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student s : course.getStudents()) {\n            System.out.println(\"Student: \" + s.getName() + \", Age: \" + s.getAge());\n        }\n        \n        // Read thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queueManager.takeValue();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start read thread\n        reader.start();\n        \n        // Wait for threads to finish\n        writer.join();\n        reader.join();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Write thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Read thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start threads\n        writer.start();\n        reader.start();\n        \n        // Wait for threads to finish\n        writer.join();\n        reader.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Write thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start write thread\n        writer.start();\n        \n        // Additional complex code\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        \n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List value: \" + list.get(i));\n        }\n        \n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList value: \" + linkedList.get(i));\n        }\n        \n        // Read thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start read thread\n        reader.start();\n        \n        // Wait for threads to finish\n        writer.join();\n        reader.join();\n    }\n}"
}