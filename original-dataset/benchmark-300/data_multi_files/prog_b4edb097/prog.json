{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private PriorityQueue<Integer> grades = new PriorityQueue<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(int grade) {\n        /* write */ grades.offer(grade);\n    }\n\n    public PriorityQueue<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.PriorityQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        Course mathCourse = new Course(\"Mathematics\");\n        Student alice = new Student(\"Alice\");\n        Student bob = new Student(\"Bob\");\n\n        mathCourse.enrollStudent(alice);\n        mathCourse.enrollStudent(bob);\n\n        alice.addGrade(85);\n        bob.addGrade(90);\n\n        // Perform some operations\n        for (Student student : mathCourse.getEnrolledStudents()) {\n            System.out.println(student.getName() + \" is enrolled in \" + mathCourse.getCourseName());\n        }\n\n        // Read from the priority queue\n        /* read */ int aliceGrade = alice.getGrades().peek();\n        System.out.println(\"Alice's grade: \" + aliceGrade);\n\n        // Additional unrelated code\n        int product = 1;\n        for (int i = 1; i <= 5; i++) {\n            product *= i;\n        }\n        System.out.println(\"Product of first 5 natural numbers: \" + product);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.PriorityQueue",
        "write_method": "offer",
        "read_class": "java.util.PriorityQueue",
        "read_method": "peek"
    },
    "java_code_simple": "import java.util.PriorityQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        /* write */ queue.offer(10);\n        /* read */ int value = queue.peek();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.PriorityQueue;\nimport java.util.Stack;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        Stack<Integer> stack = new Stack<>();\n        \n        // Add some elements to the stack\n        for (int i = 0; i < 5; i++) {\n            stack.push(i * 2);\n        }\n        \n        // Perform some operations on the stack\n        while (!stack.isEmpty()) {\n            System.out.println(\"Popped from stack: \" + stack.pop());\n        }\n        \n        // Write to the priority queue\n        /* write */ queue.offer(10);\n        \n        // Add more elements to the queue\n        queue.offer(20);\n        queue.offer(5);\n        \n        // Perform some operations on the queue\n        while (!queue.isEmpty()) {\n            System.out.println(\"Polled from queue: \" + queue.poll());\n        }\n        \n        // Read from the priority queue\n        /* read */ int value = queue.peek();\n        System.out.println(\"Peeked from queue: \" + value);\n        \n        // Additional unrelated code\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n    }\n}"
}