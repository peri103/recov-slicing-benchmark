{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    \n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n    \n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n    \n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n    \n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n    \n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n    \n    public DelayedElement takeElement() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n    \n    public Student(String name) {\n        this.name = name;\n    }\n    \n    public void addScore(int score) {\n        scores.add(score);\n    }\n    \n    public List<Integer> getScores() {\n        return scores;\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        \n        // Create a DelayedElement with a delay of 1 second\n        DelayedElement element = new DelayedElement(1000);\n        \n        queueManager.addElement(element);\n        \n        // Additional code to make the program more complex\n        Student student = new Student(\"Alice\");\n        student.addScore(85);\n        student.addScore(90);\n        student.addScore(95);\n        \n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Scores: \" + student.getScores());\n        \n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n        \n        list.add(10);\n        list.add(20);\n        list.add(30);\n        \n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n        linkedList.add(\"Third\");\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList element: \" + list.get(i));\n        }\n        \n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n        \n        // More complex operations\n        int sum = list.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of ArrayList elements: \" + sum);\n        \n        linkedList.removeFirst();\n        System.out.println(\"LinkedList after removing first element: \" + linkedList);\n        \n        DelayedElement takenElement = queueManager.takeElement();\n        \n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        \n        // Create a DelayedElement with a delay of 1 second\n        DelayedElement element = new DelayedElement(1000);\n        \n        /* write */ queue.put(element);\n        \n        /* read */ DelayedElement takenElement = queue.take();\n        \n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    \n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n    \n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n    \n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n    \n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        \n        // Create a DelayedElement with a delay of 1 second\n        DelayedElement element = new DelayedElement(1000);\n        \n        /* write */ queue.put(element);\n        \n        // Additional code to make the program more complex\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n        \n        list.add(10);\n        list.add(20);\n        list.add(30);\n        \n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n        linkedList.add(\"Third\");\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList element: \" + list.get(i));\n        }\n        \n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n        \n        // More complex operations\n        int sum = list.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of ArrayList elements: \" + sum);\n        \n        linkedList.removeFirst();\n        System.out.println(\"LinkedList after removing first element: \" + linkedList);\n        \n        /* read */ DelayedElement takenElement = queue.take();\n        \n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    \n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n    \n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n    \n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n    \n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}"
}