{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataGenerator.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataGenerator {\n    private SynchronousQueue<Integer> queue;\n\n    public DataGenerator(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void generateData() {\n        try {\n            /* write */ queue.put(42);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataGenerator generator = new DataGenerator(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        // Thread to generate data\n        executor.submit(() -> {\n            generator.generateData();\n        });\n\n        // Thread to process data\n        executor.submit(() -> {\n            processor.processData();\n        });\n\n        // Shutdown executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Thread to write a string\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read a string\n        executor.submit(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write data\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read data\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start threads\n        writer.start();\n        reader.start();\n\n        // Wait for threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Thread to write data\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read data\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Thread to write a string\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read a string\n        executor.submit(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}