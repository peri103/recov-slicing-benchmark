{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void putValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n        System.out.println(\"Value \" + value + \" has been put into the queue.\");\n    }\n\n    public int takeValue() throws InterruptedException {\n        /* read */ int value = queue.take();\n        System.out.println(\"Value \" + value + \" has been taken from the queue.\");\n        return value;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the queue\n        executor.submit(() -> {\n            try {\n                queueManager.putValue(42);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Task to read from the queue\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                int value = queueManager.takeValue();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"String 'Hello' has been put into the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                String message = stringQueue.take();\n                System.out.println(\"String '\" + message + \"' has been taken from the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the queue\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value 42 has been put into the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Task to read from the queue\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Value \" + value + \" has been taken from the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"String 'Hello' has been put into the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                String message = stringQueue.take();\n                System.out.println(\"String '\" + message + \"' has been taken from the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n    }\n}"
}