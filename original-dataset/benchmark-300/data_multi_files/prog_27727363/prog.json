{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private ConcurrentHashMap<String, Integer> scores = new ConcurrentHashMap<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(String subject, int score) {\n        scores.putIfAbsent(subject, score);\n    }\n\n    public ConcurrentHashMap<String, Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"Alice\");\n        Course course = new Course(\"Mathematics\");\n\n        course.addStudent(student);\n\n        /* write */ student.addScore(\"Math\", 95);\n\n        // Adding more students and scores\n        Student student2 = new Student(\"Bob\");\n        student2.addScore(\"Math\", 85);\n        course.addStudent(student2);\n\n        Student student3 = new Student(\"Charlie\");\n        student3.addScore(\"Math\", 90);\n        course.addStudent(student3);\n\n        // Retrieving the score for Alice\n        /* read */ Integer aliceScore = student.getScores().get(\"Math\");\n        System.out.println(\"Alice's Math score: \" + aliceScore);\n\n        // Printing all students and their scores\n        for (Student s : course.getStudents()) {\n            System.out.println(s.getScores());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentHashMap",
        "write_method": "putIfAbsent",
        "read_class": "java.util.concurrent.ConcurrentHashMap",
        "read_method": "get"
    },
    "java_code_simple": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        /* write */ map.putIfAbsent(\"key\", 123);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        list.add(10);\n        list.add(20);\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n\n        /* write */ map.putIfAbsent(\"key\", 123);\n\n        // Iterating over the ArrayList and printing elements\n        for (Integer num : list) {\n            System.out.println(\"ArrayList element: \" + num);\n        }\n\n        // Adding elements from ArrayList to the ConcurrentHashMap\n        for (int i = 0; i < list.size(); i++) {\n            map.putIfAbsent(\"listKey\" + i, list.get(i));\n        }\n\n        // Iterating over the LinkedList and printing elements\n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(\"Value from ConcurrentHashMap: \" + value);\n\n        // Adding more elements to the ArrayList and LinkedList\n        list.add(30);\n        linkedList.add(\"Third\");\n\n        // Printing the updated ArrayList and LinkedList\n        System.out.println(\"Updated ArrayList: \" + list);\n        System.out.println(\"Updated LinkedList: \" + linkedList);\n    }\n}"
}