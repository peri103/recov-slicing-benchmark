{
    "files": {
        "QueueManager.java": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class QueueManager {\n    private LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            QueueManager queueManager = new QueueManager();\n            ExecutorService executor = Executors.newFixedThreadPool(2);\n\n            // Task to write to the queue\n            executor.submit(() -> {\n                try {\n                    queueManager.writeValue(42);\n                    System.out.println(\"Value 42 written to the queue.\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            // Task to read from the queue\n            executor.submit(() -> {\n                try {\n                    TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                    int value = queueManager.readValue();\n                    System.out.println(\"Value \" + value + \" read from the queue.\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            executor.shutdown();\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n\n            // Additional unrelated code to make the program more complex\n            Student student = new Student(\"Alice\", 20);\n            System.out.println(\"Student Name: \" + student.getName());\n            System.out.println(\"Student Age: \" + student.getAge());\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            ExecutorService executor = Executors.newFixedThreadPool(2);\n\n            // Task to write to the queue\n            executor.submit(() -> {\n                try {\n                    /* write */ queue.put(42);\n                    System.out.println(\"Value 42 written to the queue.\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            // Task to read from the queue\n            executor.submit(() -> {\n                try {\n                    TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                    /* read */ int value = queue.take();\n                    System.out.println(\"Value \" + value + \" read from the queue.\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            executor.shutdown();\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n\n            // Additional unrelated code to make the program more complex\n            LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n\n            while (!stringQueue.isEmpty()) {\n                System.out.println(stringQueue.take());\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}