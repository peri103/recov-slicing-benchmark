{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int consumeData() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        try {\n            // Create a course and add students\n            Course course = new Course(\"Computer Science\");\n            course.addStudent(new Student(\"Alice\", 20));\n            course.addStudent(new Student(\"Bob\", 21));\n\n            // Process data\n            processor.processData(100);\n\n            // Consume data\n            int value = consumer.consumeData();\n            System.out.println(\"Consumed value: \" + value);\n\n            // Print course details\n            System.out.println(\"Course: \" + course.getCourseName());\n            for (Student student : course.getStudents()) {\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        try {\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        try {\n            /* write */ queue.put(1);\n\n            // Adding elements to the ArrayList\n            list.add(10);\n            list.add(20);\n            list.add(30);\n\n            // Adding elements to the LinkedList\n            linkedList.add(100);\n            linkedList.add(200);\n            linkedList.add(300);\n\n            // Processing ArrayList and LinkedList\n            for (Integer num : list) {\n                linkedList.add(num);\n            }\n\n            // Printing elements from the LinkedList\n            for (Integer num : linkedList) {\n                System.out.println(num);\n            }\n\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from SynchronousQueue: \" + value);\n\n            // More complex operations\n            ArrayList<Integer> newList = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                newList.add(i * 10);\n            }\n\n            for (Integer num : newList) {\n                linkedList.add(num);\n            }\n\n            for (Integer num : linkedList) {\n                System.out.println(\"Processed LinkedList: \" + num);\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}