{
    "files": {
        "MessageQueue.java": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class MessageQueue {\n    private BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void sendMessage(int message) throws InterruptedException {\n        /* write */ queue.put(message);\n    }\n\n    public int receiveMessage() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        MessageQueue messageQueue = new MessageQueue();\n        List<Student> students = new ArrayList<>();\n\n        // Adding students\n        students.add(new Student(\"Alice\", 20));\n        students.add(new Student(\"Bob\", 22));\n        students.add(new Student(\"Charlie\", 21));\n\n        try {\n            // Sending a message\n            messageQueue.sendMessage(100);\n\n            // Processing students\n            for (Student student : students) {\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n            }\n\n            // Simulating some delay\n            Thread.sleep(1000);\n\n            // Receiving the message\n            /* read */ int message = messageQueue.receiveMessage();\n            System.out.println(\"Received message: \" + message);\n\n            // More unrelated code\n            String info = \"This is a multi-file complex program!\";\n            System.out.println(info);\n\n            // Another loop for complexity\n            for (int i = 0; i < 5; i++) {\n                System.out.println(\"Loop iteration: \" + i);\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        List<Integer> list = new ArrayList<>();\n        \n        try {\n            /* write */ queue.put(42);\n            \n            // Adding some complexity\n            for (int i = 0; i < 10; i++) {\n                list.add(i * 2);\n            }\n            \n            // Processing the list\n            for (Integer num : list) {\n                System.out.println(\"List value: \" + num);\n            }\n            \n            // Simulating some delay\n            Thread.sleep(1000);\n            \n            /* read */ int value = queue.take();\n            System.out.println(\"Queue value: \" + value);\n            \n            // More unrelated code\n            String message = \"This is a complex program!\";\n            System.out.println(message);\n            \n            // Another loop for complexity\n            for (int i = 0; i < 5; i++) {\n                System.out.println(\"Loop iteration: \" + i);\n            }\n            \n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}