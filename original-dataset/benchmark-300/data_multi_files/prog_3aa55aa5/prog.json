{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(String data, long delayInMillis) {\n        this.data = data;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(String data, long delayInMillis) {\n        /* write */ queue.put(new DelayedElement(data, delayInMillis));\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        manager.addElement(\"Hello, World!\", 1000); // Delay of 1 second\n\n        // Additional complex code\n        DelayQueue<DelayedElement> queue = manager.getQueue();\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n\n        // Further processing\n        while (!queue.isEmpty()) {\n            DelayedElement nextElement = queue.take();\n            System.out.println(\"Next Element: \" + nextElement.getData());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(String data, long delayInMillis) {\n        this.data = data;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String data = \"Hello, World!\";\n        /* write */ queue.put(new DelayedElement(data, 1000)); // Delay of 1 second\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(String data, long delayInMillis) {\n        this.data = data;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String data = \"Hello, World!\";\n        /* write */ queue.put(new DelayedElement(data, 1000)); // Delay of 1 second\n\n        // Additional complex code\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n\n        for (int i = 0; i < 5; i++) {\n            DelayedElement element = new DelayedElement(\"Element \" + i, 1000 + i * 500);\n            list.add(element);\n            linkedList.add(element);\n        }\n\n        for (DelayedElement element : list) {\n            queue.put(element);\n        }\n\n        for (DelayedElement element : linkedList) {\n            queue.put(element);\n        }\n\n        // More unrelated code\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 10);\n        }\n\n        for (int number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n\n        // Further processing\n        while (!queue.isEmpty()) {\n            DelayedElement nextElement = queue.take();\n            System.out.println(\"Next Element: \" + nextElement.getData());\n        }\n    }\n}"
}