{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class DataProcessor {\n    private PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n\n    public void addData(int data) {\n        /* write */ queue.offer(data);\n    }\n\n    public PriorityBlockingQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addData(int data) {\n        dataProcessor.addData(data);\n    }\n\n    public PriorityBlockingQueue<Integer> getQueue() {\n        return dataProcessor.getQueue();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"Alice\");\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        Random random = new Random();\n\n        // Adding some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            stringQueue.offer(\"String \" + i);\n        }\n\n        // Performing some operations on stringQueue\n        for (int i = 0; i < 3; i++) {\n            System.out.println(stringQueue.poll());\n        }\n\n        // Adding more complexity\n        int randomNumber = random.nextInt(100);\n        System.out.println(\"Generated random number: \" + randomNumber);\n\n        // Writing to the PriorityBlockingQueue\n        student.addData(42);\n\n        // More unrelated operations\n        for (int i = 0; i < 5; i++) {\n            student.addData(random.nextInt(100));\n        }\n\n        // Reading from the PriorityBlockingQueue\n        PriorityBlockingQueue<Integer> queue = student.getQueue();\n        /* read */ Integer value = queue.poll();\n        System.out.println(\"Value read from queue: \" + value);\n\n        // Additional operations to make the program more complex\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Polling from queue: \" + queue.poll());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.PriorityBlockingQueue",
        "write_method": "offer",
        "read_class": "java.util.concurrent.PriorityBlockingQueue",
        "read_method": "poll"
    },
    "java_code_simple": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        /* write */ queue.offer(42);\n        /* read */ Integer value = queue.poll();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        Random random = new Random();\n\n        // Adding some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            stringQueue.offer(\"String \" + i);\n        }\n\n        // Performing some operations on stringQueue\n        for (int i = 0; i < 3; i++) {\n            System.out.println(stringQueue.poll());\n        }\n\n        // Adding more complexity\n        int randomNumber = random.nextInt(100);\n        System.out.println(\"Generated random number: \" + randomNumber);\n\n        // Writing to the PriorityBlockingQueue\n        /* write */ queue.offer(42);\n\n        // More unrelated operations\n        for (int i = 0; i < 5; i++) {\n            queue.offer(random.nextInt(100));\n        }\n\n        // Reading from the PriorityBlockingQueue\n        /* read */ Integer value = queue.poll();\n        System.out.println(\"Value read from queue: \" + value);\n\n        // Additional operations to make the program more complex\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Polling from queue: \" + queue.poll());\n        }\n    }\n}"
}