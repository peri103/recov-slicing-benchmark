{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class DataProcessor {\n    private LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public int retrieveData() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public List<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName, List<Student> students) {\n        this.courseName = courseName;\n        this.students = students;\n    }\n\n    public void printStudentGrades() {\n        for (Student student : students) {\n            System.out.println(\"Student: \" + student.getName() + \", Grades: \" + student.getGrades());\n        }\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        /* write */ processor.processData(100);\n\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"Alice\"));\n        students.add(new Student(\"Bob\"));\n\n        Course mathCourse = new Course(\"Mathematics\", students);\n        mathCourse.printStudentGrades();\n\n        /* read */ int data = processor.retrieveData();\n        System.out.println(\"Processed Data: \" + data);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        /* write */ queue.put(1);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        List<Integer> list = new ArrayList<>();\n        \n        // Adding some elements to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        \n        // Printing elements from the list\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n        \n        /* write */ queue.put(1);\n        \n        // Adding more elements to the list\n        list.add(100);\n        list.add(200);\n        \n        // Printing the new elements from the list\n        for (int i = 5; i < list.size(); i++) {\n            System.out.println(\"New list element: \" + list.get(i));\n        }\n        \n        /* read */ int value = queue.take();\n        System.out.println(\"Value from queue: \" + value);\n        \n        // Creating another queue and performing operations\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        stringQueue.put(\"Hello\");\n        stringQueue.put(\"World\");\n        \n        // Printing elements from the string queue\n        System.out.println(\"String from queue: \" + stringQueue.take());\n        System.out.println(\"String from queue: \" + stringQueue.take());\n    }\n}"
}