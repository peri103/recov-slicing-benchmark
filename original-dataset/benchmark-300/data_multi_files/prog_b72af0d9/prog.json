{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData(int data) {\n        try {\n            /* write */ queue.put(data);\n            System.out.println(\"Data processed and written to queue: \" + data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int data = queue.take();\n            System.out.println(\"Data consumed from queue: \" + data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public List<Integer> getGrades() {\n        return grades;\n    }\n\n    public double calculateAverageGrade() {\n        return grades.stream().mapToInt(Integer::intValue).average().orElse(0.0);\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n        Random random = new Random();\n\n        // Create a student and add grades\n        Student student = new Student(\"Alice\");\n        for (int i = 0; i < 5; i++) {\n            student.addGrade(random.nextInt(100));\n        }\n        System.out.println(\"Student grades: \" + student.getGrades());\n        System.out.println(\"Average grade: \" + student.calculateAverageGrade());\n\n        // Create a thread to process data\n        Thread processorThread = new Thread(() -> processor.processData(random.nextInt(100)));\n        processorThread.start();\n\n        // Consume the data\n        consumer.consumeData();\n\n        // Wait for the processor thread to finish\n        try {\n            processorThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value taken from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Wait for the writer thread to finish\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n        Random random = new Random();\n\n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                int value = random.nextInt(100);\n                /* write */ queue.put(value);\n                System.out.println(\"Value written to queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            list.add(random.nextInt(100));\n        }\n        System.out.println(\"List of random numbers: \" + list);\n\n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value taken from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Wait for the writer thread to finish\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform more unrelated operations\n        int sum = list.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of list elements: \" + sum);\n    }\n}"
}