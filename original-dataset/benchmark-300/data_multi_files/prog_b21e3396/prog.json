{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        if (this.startTime < ((DelayedElement) o).startTime) {\n            return -1;\n        }\n        if (this.startTime > ((DelayedElement) o).startTime) {\n            return 1;\n        }\n        return 0;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n",
        "Logger.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Logger {\n    private List<String> log = new ArrayList<>();\n\n    public void log(String message) {\n        log.add(message);\n    }\n\n    public List<String> getLog() {\n        return log;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        Logger logger = new Logger();\n        logger.log(\"Program started\");\n        \n        /* write */ queue.put(new DelayedElement(1000, \"Hello, World!\"));\n        logger.log(\"Element added to the queue\");\n        \n        for (int i = 0; i < 5; i++) {\n            logger.log(\"Processing step \" + i);\n            Thread.sleep(200);\n        }\n        \n        /* read */ DelayedElement element = queue.take();\n        logger.log(\"Element taken from the queue: \" + element.getData());\n        \n        for (String entry : logger.getLog()) {\n            System.out.println(entry);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        if (this.startTime < ((DelayedElement) o).startTime) {\n            return -1;\n        }\n        if (this.startTime > ((DelayedElement) o).startTime) {\n            return 1;\n        }\n        return 0;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000, \"Hello, World!\"));\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        if (this.startTime < ((DelayedElement) o).startTime) {\n            return -1;\n        }\n        if (this.startTime > ((DelayedElement) o).startTime) {\n            return 1;\n        }\n        return 0;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        List<String> log = new ArrayList<>();\n        log.add(\"Program started\");\n        \n        /* write */ queue.put(new DelayedElement(1000, \"Hello, World!\"));\n        \n        log.add(\"Element added to the queue\");\n        \n        for (int i = 0; i < 5; i++) {\n            log.add(\"Processing step \" + i);\n            Thread.sleep(200);\n        }\n        \n        /* read */ DelayedElement element = queue.take();\n        log.add(\"Element taken from the queue: \" + element.getData());\n        \n        for (String entry : log) {\n            System.out.println(entry);\n        }\n    }\n}"
}