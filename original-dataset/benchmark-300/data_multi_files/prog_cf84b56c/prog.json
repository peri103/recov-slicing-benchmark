{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayedElement takeElement() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        queueManager.addElement(element);\n\n        // Additional code to make the program more complex\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            list.add(i);\n        }\n        System.out.println(\"List contents: \" + list);\n\n        // Simulate some processing\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Processing element: \" + list.get(i));\n            Thread.sleep(100); // Simulate processing time\n        }\n\n        // Take the element from the queue after some processing\n        DelayedElement takenElement = queueManager.takeElement();\n        System.out.println(\"Element taken: \" + takenElement);\n\n        // More complex operations\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String str : stringList) {\n            System.out.println(\"String: \" + str);\n        }\n\n        // Simulate more processing\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Additional processing step: \" + i);\n            Thread.sleep(200); // Simulate processing time\n        }\n\n        // Final output\n        System.out.println(\"Program completed.\");\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken: \" + takenElement);\n    }\n\n    static class DelayedElement implements Delayed {\n        private final long delayTime;\n        private final long startTime;\n\n        public DelayedElement(long delayTime) {\n            this.delayTime = delayTime;\n            this.startTime = System.currentTimeMillis();\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long elapsedTime = System.currentTimeMillis() - startTime;\n            return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed o) {\n            return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n        }\n\n        @Override\n        public String toString() {\n            return \"DelayedElement{\" +\n                    \"delayTime=\" + delayTime +\n                    \", startTime=\" + startTime +\n                    '}';\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            list.add(i);\n        }\n        System.out.println(\"List contents: \" + list);\n\n        // Simulate some processing\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Processing element: \" + list.get(i));\n            Thread.sleep(100); // Simulate processing time\n        }\n\n        // Take the element from the queue after some processing\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken: \" + takenElement);\n\n        // More complex operations\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String str : stringList) {\n            System.out.println(\"String: \" + str);\n        }\n\n        // Simulate more processing\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Additional processing step: \" + i);\n            Thread.sleep(200); // Simulate processing time\n        }\n\n        // Final output\n        System.out.println(\"Program completed.\");\n    }\n\n    static class DelayedElement implements Delayed {\n        private final long delayTime;\n        private final long startTime;\n\n        public DelayedElement(long delayTime) {\n            this.delayTime = delayTime;\n            this.startTime = System.currentTimeMillis();\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long elapsedTime = System.currentTimeMillis() - startTime;\n            return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed o) {\n            return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n        }\n\n        @Override\n        public String toString() {\n            return \"DelayedElement{\" +\n                    \"delayTime=\" + delayTime +\n                    \", startTime=\" + startTime +\n                    '}';\n        }\n    }\n}"
}