{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform some unrelated operations\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n        \n        // Print the list and linkedList contents\n        System.out.println(\"ArrayList contents:\");\n        for (int num : list) {\n            System.out.println(num);\n        }\n        \n        System.out.println(\"LinkedList contents:\");\n        for (int num : linkedList) {\n            System.out.println(num);\n        }\n        \n        // Create a Course and add Students\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(new Student(\"Alice\", 20));\n        course.addStudent(new Student(\"Bob\", 21));\n        \n        // Print the students in the course\n        System.out.println(\"Students in the course:\");\n        for (Student student : course.getStudents()) {\n            System.out.println(student.getName() + \" - \" + student.getAge());\n        }\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value taken from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Ensure the writer thread completes\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Perform more unrelated operations\n        ArrayList<Integer> list2 = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            list2.add(i * 30);\n        }\n        \n        System.out.println(\"Second ArrayList contents:\");\n        for (int num : list2) {\n            System.out.println(num);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Ensure the writer thread completes\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform some unrelated operations\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n        \n        // Print the list and linkedList contents\n        System.out.println(\"ArrayList contents:\");\n        for (int num : list) {\n            System.out.println(num);\n        }\n        \n        System.out.println(\"LinkedList contents:\");\n        for (int num : linkedList) {\n            System.out.println(num);\n        }\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value taken from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Ensure the writer thread completes\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Perform more unrelated operations\n        ArrayList<Integer> list2 = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            list2.add(i * 30);\n        }\n        \n        System.out.println(\"Second ArrayList contents:\");\n        for (int num : list2) {\n            System.out.println(num);\n        }\n    }\n}"
}