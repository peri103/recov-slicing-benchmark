{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private final long expiryTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.expiryTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = expiryTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        long diff = this.expiryTime - ((DelayedElement) o).expiryTime;\n        return Long.compare(diff, 0);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"expiryTime=\" + expiryTime +\n                '}';\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayedElement takeElement() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        list.add(10);\n        list.add(20);\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n\n        // Creating a DelayedElement with a 1-second delay\n        DelayedElement element = new DelayedElement(1000);\n        queueManager.addElement(element);\n\n        // Processing the ArrayList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList element: \" + list.get(i));\n        }\n\n        // Processing the LinkedList\n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n\n        // Creating another DelayedElement with a 2-second delay\n        DelayedElement anotherElement = new DelayedElement(2000);\n        queueManager.addElement(anotherElement);\n\n        // Taking the first element from the DelayQueue\n        /* read */ DelayedElement takenElement = queueManager.takeElement();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        // Adding more elements to the ArrayList\n        list.add(30);\n        list.add(40);\n\n        // Processing the ArrayList again\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Updated ArrayList element: \" + list.get(i));\n        }\n\n        // Taking the second element from the DelayQueue\n        DelayedElement anotherTakenElement = queueManager.takeElement();\n        System.out.println(\"Another element taken from queue: \" + anotherTakenElement);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long expiryTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.expiryTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = expiryTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        long diff = this.expiryTime - ((DelayedElement) o).expiryTime;\n        return Long.compare(diff, 0);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"expiryTime=\" + expiryTime +\n                '}';\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        list.add(10);\n        list.add(20);\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n\n        // Creating a DelayedElement with a 1-second delay\n        DelayedElement element = new DelayedElement(1000);\n        /* write */ queue.put(element);\n\n        // Processing the ArrayList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList element: \" + list.get(i));\n        }\n\n        // Processing the LinkedList\n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n\n        // Creating another DelayedElement with a 2-second delay\n        DelayedElement anotherElement = new DelayedElement(2000);\n        queue.put(anotherElement);\n\n        // Taking the first element from the DelayQueue\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        // Adding more elements to the ArrayList\n        list.add(30);\n        list.add(40);\n\n        // Processing the ArrayList again\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Updated ArrayList element: \" + list.get(i));\n        }\n\n        // Taking the second element from the DelayQueue\n        DelayedElement anotherTakenElement = queue.take();\n        System.out.println(\"Another element taken from queue: \" + anotherTakenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long expiryTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.expiryTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = expiryTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        long diff = this.expiryTime - ((DelayedElement) o).expiryTime;\n        return Long.compare(diff, 0);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"expiryTime=\" + expiryTime +\n                '}';\n    }\n}"
}