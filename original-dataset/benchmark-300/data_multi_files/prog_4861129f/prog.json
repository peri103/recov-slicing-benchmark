{
    "files": {
        "DequeManager.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DequeManager {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addFirst(int value) {\n        /* write */ deque.addFirst(value);\n    }\n\n    public int takeFirst() throws InterruptedException {\n        return deque.takeFirst();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DequeManager dequeManager = new DequeManager();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        dequeManager.addFirst(score);\n    }\n\n    public int getScore() throws InterruptedException {\n        return dequeManager.takeFirst();\n    }\n}\n",
        "Main.java": "import java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            Student student = new Student(\"Alice\");\n            Random random = new Random();\n\n            // Add some unrelated code to make the program more complex\n            for (int i = 0; i < 5; i++) {\n                int randomValue = random.nextInt(100);\n                student.addScore(randomValue);\n            }\n\n            // Perform the write operation\n            student.addScore(42);\n\n            // Add more unrelated code\n            int sum = 0;\n            for (int i = 0; i < 5; i++) {\n                sum += random.nextInt(100);\n            }\n\n            // Perform the read operation\n            int value = student.getScore();\n            System.out.println(\"Value read from deque: \" + value);\n\n            // Print some additional information\n            System.out.println(\"Sum of random values: \" + sum);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeFirst"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n            /* write */ deque.addFirst(42);\n            /* read */ int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n            AtomicInteger counter = new AtomicInteger(0);\n            Random random = new Random();\n\n            // Initialize some variables\n            int initialValue = random.nextInt(100);\n            counter.set(initialValue);\n\n            // Add some unrelated code to make the program more complex\n            for (int i = 0; i < 5; i++) {\n                int randomValue = random.nextInt(100);\n                deque.addLast(randomValue);\n                counter.addAndGet(randomValue);\n            }\n\n            // Perform the write operation\n            /* write */ deque.addFirst(42);\n\n            // Add more unrelated code\n            int sum = 0;\n            for (int i = 0; i < deque.size(); i++) {\n                sum += deque.peekFirst();\n            }\n\n            // Perform the read operation\n            /* read */ int value = deque.takeFirst();\n            System.out.println(\"Value read from deque: \" + value);\n\n            // Print some additional information\n            System.out.println(\"Counter value: \" + counter.get());\n            System.out.println(\"Sum of deque elements: \" + sum);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}