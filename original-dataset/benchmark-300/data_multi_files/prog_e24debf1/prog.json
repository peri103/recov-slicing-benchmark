{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.BlockingQueue;\n\npublic class DataProcessor {\n    private BlockingQueue<Integer> queue;\n\n    public DataProcessor(BlockingQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataProducer.java": "import java.util.concurrent.BlockingQueue;\n\npublic class DataProducer {\n    private BlockingQueue<Integer> queue;\n\n    public DataProducer(BlockingQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void produceData() {\n        try {\n            /* write */ queue.put(1);\n            System.out.println(\"Produced value: 1\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        DataProducer producer = new DataProducer(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        producer.produceData();\n        processor.processData();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ArrayBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.ArrayBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        try {\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>(5);\n\n        try {\n            /* write */ queue.put(1);\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n\n            for (int i = 0; i < 5; i++) {\n                queue.put(i * 10);\n            }\n\n            while (!stringQueue.isEmpty()) {\n                System.out.println(stringQueue.take());\n            }\n\n            /* read */ int value = queue.take();\n            System.out.println(value);\n\n            for (int i = 0; i < queue.size(); i++) {\n                System.out.println(queue.take());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}