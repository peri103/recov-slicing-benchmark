{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class DataProcessor {\n    private LinkedTransferQueue<Integer> queue;\n\n    public DataProcessor(LinkedTransferQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() throws InterruptedException {\n        /* read */ int value = queue.take();\n        System.out.println(\"Processed value: \" + value);\n    }\n}\n",
        "DataGenerator.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class DataGenerator {\n    private LinkedTransferQueue<Integer> queue;\n\n    public DataGenerator(LinkedTransferQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void generateData() throws InterruptedException {\n        /* write */ queue.put(42);\n        System.out.println(\"Data generated and added to queue\");\n    }\n}\n",
        "Main.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        \n        DataGenerator generator = new DataGenerator(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        // Simulate some unrelated operations\n        System.out.println(\"Initializing system...\");\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Performing setup operation \" + (i + 1));\n        }\n\n        generator.generateData();\n\n        // More unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 numbers: \" + sum);\n\n        processor.processData();\n\n        // Final operations\n        System.out.println(\"System shutdown complete\");\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        BlockingQueue<Integer> anotherQueue = new ArrayBlockingQueue<>(10);\n        Random random = new Random();\n\n        // Insert some random values into anotherQueue\n        for (int i = 0; i < 5; i++) {\n            anotherQueue.put(random.nextInt(100));\n        }\n\n        /* write */ queue.put(42);\n\n        // Process values from anotherQueue\n        while (!anotherQueue.isEmpty()) {\n            int val = anotherQueue.take();\n            System.out.println(\"Processed value from anotherQueue: \" + val);\n        }\n\n        // Simulate some other operations\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Performing operation \" + (i + 1));\n        }\n\n        /* read */ int value = queue.take();\n        System.out.println(\"Value from queue: \" + value);\n\n        // More unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 numbers: \" + sum);\n    }\n}"
}