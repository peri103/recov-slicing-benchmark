{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int consumeData() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Perform the write operation in a separate thread\n        executor.submit(() -> processor.processData(42));\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n\n        // Perform the read operation in the main thread\n        int value = consumer.consumeData();\n        System.out.println(\"Consumed value: \" + value);\n\n        executor.shutdown();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Start a new thread to perform the write operation\n        Future<?> writeFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n\n        // Start another thread to perform the read operation\n        Future<Integer> readFuture = executor.submit(() -> {\n            try {\n                /* read */ return queue.take();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n\n        try {\n            int value = readFuture.get();\n            System.out.println(\"Read value: \" + value);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        executor.shutdown();\n        try {\n            if (!executor.awaitTermination(1, TimeUnit.SECONDS)) {\n                executor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executor.shutdownNow();\n        }\n    }\n}"
}