{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData() {\n        try {\n            /* write */ queue.put(42);\n            System.out.println(\"Data written: 42\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataWriter writer = new DataWriter(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        // Submit tasks to the executor\n        executor.submit(writer::writeData);\n        executor.submit(processor::processData);\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code to make the program more complex\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n\n        // More complex operations\n        String[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\n        for (String fruit : fruits) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write the value\n        Runnable writerTask = () -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written: 42\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Task to read the value\n        Runnable readerTask = () -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Submit tasks to the executor\n        executor.submit(writerTask);\n        executor.submit(readerTask);\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code to make the program more complex\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n\n        // More complex operations\n        String[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\n        for (String fruit : fruits) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n    }\n}"
}