{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(long delayTime) {\n        DelayedElement element = new DelayedElement(delayTime);\n        /* write */ queue.put(element);\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        manager.addElement(1000); // 1 second delay\n\n        // Additional complex code\n        QueueManager anotherManager = new QueueManager();\n        anotherManager.addElement(2000); // 2 seconds delay\n\n        // Simulate some other operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing operation \" + i);\n            Thread.sleep(500); // Simulate some delay\n        }\n\n        // Take element from the second queue\n        DelayQueue<DelayedElement> anotherQueue = anotherManager.getQueue();\n        DelayedElement takenAnotherElement = anotherQueue.take();\n        System.out.println(\"Element taken from the second queue\");\n\n        // Take element from the first queue\n        DelayQueue<DelayedElement> queue = manager.getQueue();\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from the first queue\");\n\n        // More complex operations\n        QueueManager thirdManager = new QueueManager();\n        for (int i = 0; i < 3; i++) {\n            thirdManager.addElement(500 * (i + 1)); // 0.5, 1, 1.5 seconds delay\n        }\n\n        DelayQueue<DelayedElement> thirdQueue = thirdManager.getQueue();\n        while (!thirdQueue.isEmpty()) {\n            DelayedElement e = thirdQueue.take();\n            System.out.println(\"Element with delay \" + e.getDelay(TimeUnit.MILLISECONDS) + \" ms taken from the third queue\");\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from the queue\");\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional complex code\n        DelayQueue<DelayedElement> anotherQueue = new DelayQueue<>();\n        DelayedElement anotherElement = new DelayedElement(2000); // 2 seconds delay\n        anotherQueue.put(anotherElement);\n\n        // Simulate some other operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing operation \" + i);\n            Thread.sleep(500); // Simulate some delay\n        }\n\n        // Take element from the second queue\n        DelayedElement takenAnotherElement = anotherQueue.take();\n        System.out.println(\"Element taken from the second queue\");\n\n        // Take element from the first queue\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from the first queue\");\n\n        // More complex operations\n        DelayQueue<DelayedElement> thirdQueue = new DelayQueue<>();\n        for (int i = 0; i < 3; i++) {\n            DelayedElement newElement = new DelayedElement(500 * (i + 1)); // 0.5, 1, 1.5 seconds delay\n            thirdQueue.put(newElement);\n        }\n\n        while (!thirdQueue.isEmpty()) {\n            DelayedElement e = thirdQueue.take();\n            System.out.println(\"Element with delay \" + e.getDelay(TimeUnit.MILLISECONDS) + \" ms taken from the third queue\");\n        }\n    }\n}"
}