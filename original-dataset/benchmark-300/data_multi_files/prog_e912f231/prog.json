{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataGenerator.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataGenerator {\n    private SynchronousQueue<Integer> queue;\n\n    public DataGenerator(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void generateData() {\n        try {\n            /* write */ queue.put(42);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataGenerator generator = new DataGenerator(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        executor.submit(generator::generateData);\n        executor.submit(processor::processData);\n\n        executor.shutdown();\n\n        // Additional complex code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(\"Read message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writer thread\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reader thread\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Writer task\n        Future<?> writerFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reader task\n        Future<?> readerFuture = executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Wait for tasks to complete\n        try {\n            writerFuture.get();\n            readerFuture.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Shutdown executor\n        executor.shutdown();\n\n        // Additional complex code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Another writer task\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Another reader task\n        executor.submit(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(\"Read message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown executor\n        executor.shutdown();\n    }\n}"
}