{
    "files": {
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData(int value) {\n        try {\n            /* write */ queue.put(value);\n            System.out.println(\"Value \" + value + \" has been written to the queue.\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataReader {\n    private SynchronousQueue<Integer> queue;\n\n    public DataReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void readData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value \" + value + \" has been read from the queue.\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataWriter writer = new DataWriter(queue);\n        DataReader reader = new DataReader(queue);\n\n        // Submit a task to write the value\n        executor.submit(() -> {\n            writer.writeData(42);\n        });\n\n        // Submit a task to read the value\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                reader.readData();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"String 'Hello' has been written to the stringQueue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                String value = stringQueue.take();\n                System.out.println(\"String '\" + value + \"' has been read from the stringQueue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to write the value\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Create a thread to read the value\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n        \n        // Wait for both threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Submit a task to write the value\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value 42 has been written to the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Submit a task to read the value\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Value \" + value + \" has been read from the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"String 'Hello' has been written to the stringQueue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                String value = stringQueue.take();\n                System.out.println(\"String '\" + value + \"' has been read from the stringQueue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}