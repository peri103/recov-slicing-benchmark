{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayMillis) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime + delayTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        manager.addElement(element);\n\n        // Simulate some other operations\n        for (int i = 0; i < 5; i++) {\n            DelayedElement newElement = new DelayedElement((i + 1) * 1000);\n            manager.addElement(newElement);\n        }\n\n        DelayQueue<DelayedElement> queue = manager.getQueue();\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue with delay: \" + takenElement.getDelay(TimeUnit.MILLISECONDS));\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayMillis) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime + delayTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue\");\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayMillis) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime + delayTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n\n        /* write */ queue.put(element);\n        list.add(element);\n        linkedList.add(element);\n\n        for (int i = 0; i < 5; i++) {\n            DelayedElement newElement = new DelayedElement((i + 1) * 1000);\n            queue.put(newElement);\n            list.add(newElement);\n            linkedList.add(newElement);\n        }\n\n        for (DelayedElement e : list) {\n            System.out.println(\"Element in list with delay: \" + e.getDelay(TimeUnit.MILLISECONDS));\n        }\n\n        for (DelayedElement e : linkedList) {\n            System.out.println(\"Element in linked list with delay: \" + e.getDelay(TimeUnit.MILLISECONDS));\n        }\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue with delay: \" + takenElement.getDelay(TimeUnit.MILLISECONDS));\n    }\n}"
}