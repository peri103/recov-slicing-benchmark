{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DataProcessor {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addData(int data) {\n        /* write */ deque.addLast(data);\n    }\n\n    public int getData() throws InterruptedException {\n        return deque.takeLast();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        dataProcessor.addData(score);\n    }\n\n    public int getScore() throws InterruptedException {\n        return dataProcessor.getData();\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Student student = new Student(\"Alice\");\n        List<Integer> scores = new ArrayList<>();\n        \n        // Add some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            scores.add(i * 10);\n        }\n        \n        // Perform the write operation\n        student.addScore(100);\n        \n        // Perform some unrelated operations\n        int sum = 0;\n        for (int score : scores) {\n            sum += score;\n        }\n        System.out.println(\"Sum of scores: \" + sum);\n        \n        // Perform the read operation\n        /* read */ int value = student.getScore();\n        System.out.println(\"Score read from student: \" + value);\n        \n        // Add more unrelated operations\n        List<String> messages = new ArrayList<>();\n        messages.add(\"Hello\");\n        messages.add(\"World\");\n        for (String message : messages) {\n            System.out.println(message);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeLast"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        /* read */ int value = deque.takeLast();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        List<Integer> list = new ArrayList<>();\n        \n        // Add some unrelated operations to make the program more complex\n        for (int i = 0; i < 10; i++) {\n            list.add(i * 2);\n        }\n        \n        // Perform the write operation\n        /* write */ deque.addLast(42);\n        \n        // Perform some unrelated operations\n        int sum = 0;\n        for (int num : list) {\n            sum += num;\n        }\n        System.out.println(\"Sum of list elements: \" + sum);\n        \n        // Perform the read operation\n        /* read */ int value = deque.takeLast();\n        System.out.println(\"Value read from deque: \" + value);\n        \n        // Add more unrelated operations\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n    }\n}"
}