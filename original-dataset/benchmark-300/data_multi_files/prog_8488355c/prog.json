{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long delayTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.delayTime, ((DelayedElement) o).delayTime);\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(long delayTime) {\n        /* write */ queue.put(new DelayedElement(delayTime));\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        manager.addElement(1000);\n        \n        // Additional complex code\n        for (int i = 0; i < 5; i++) {\n            manager.addElement(2000 + i * 500);\n        }\n        \n        System.out.println(\"Added multiple elements to the queue\");\n        \n        // Simulate some processing time\n        Thread.sleep(1500);\n        \n        // Take elements from the queue\n        DelayQueue<DelayedElement> queue = manager.getQueue();\n        while (!queue.isEmpty()) {\n            DelayedElement element = queue.take();\n            System.out.println(\"Element with delay \" + (element.getDelay(TimeUnit.MILLISECONDS)) + \"ms taken from queue\");\n        }\n        \n        // Final read\n        /* read */ DelayedElement finalElement = queue.take();\n        System.out.println(\"Final element taken from queue\");\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.delayTime, ((DelayedElement) o).delayTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000));\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from queue\");\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.delayTime, ((DelayedElement) o).delayTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000));\n        \n        // Additional complex code\n        for (int i = 0; i < 5; i++) {\n            queue.put(new DelayedElement(2000 + i * 500));\n        }\n        \n        System.out.println(\"Added multiple elements to the queue\");\n        \n        // Simulate some processing time\n        Thread.sleep(1500);\n        \n        // Take elements from the queue\n        while (!queue.isEmpty()) {\n            DelayedElement element = queue.take();\n            System.out.println(\"Element with delay \" + (element.getDelay(TimeUnit.MILLISECONDS)) + \"ms taken from queue\");\n        }\n        \n        // Final read\n        /* read */ DelayedElement finalElement = queue.take();\n        System.out.println(\"Final element taken from queue\");\n    }\n}"
}