{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Processed data: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataGenerator.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.Random;\n\npublic class DataGenerator {\n    private SynchronousQueue<Integer> queue;\n    private Random random;\n\n    public DataGenerator(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n        this.random = new Random();\n    }\n\n    public void generateData() {\n        try {\n            int value = random.nextInt(100);\n            /* write */ queue.put(value);\n            System.out.println(\"Generated data: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        DataGenerator generator = new DataGenerator(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        // Create a thread to generate data\n        Thread generatorThread = new Thread(generator::generateData);\n        generatorThread.start();\n\n        // Process the data in the main thread\n        processor.processData();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to perform the write operation\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writer.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> syncQueue = new SynchronousQueue<>();\n        BlockingQueue<Integer> blockingQueue = new LinkedBlockingQueue<>();\n        Random random = new Random();\n\n        // Create a thread to perform the write operation\n        Thread writer = new Thread(() -> {\n            try {\n                int value = random.nextInt(100);\n                /* write */ syncQueue.put(value);\n                System.out.println(\"Written to SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writer.start();\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            try {\n                blockingQueue.put(i * 10);\n                System.out.println(\"Added to BlockingQueue: \" + (i * 10));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = syncQueue.take();\n            System.out.println(\"Read from SynchronousQueue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform more unrelated operations\n        while (!blockingQueue.isEmpty()) {\n            try {\n                int value = blockingQueue.take();\n                System.out.println(\"Removed from BlockingQueue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
}