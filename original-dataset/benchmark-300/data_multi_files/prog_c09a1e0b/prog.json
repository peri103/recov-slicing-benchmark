{
    "files": {
        "TreeSetOperations.java": "import java.util.TreeSet;\n\npublic class TreeSetOperations {\n    private TreeSet<Integer> treeSet = new TreeSet<>();\n\n    public void addValue(int value) {\n        /* write */ treeSet.add(value);\n    }\n\n    public boolean containsValue(int value) {\n        return treeSet.contains(value);\n    }\n\n    public TreeSet<Integer> getTreeSet() {\n        return treeSet;\n    }\n}\n",
        "Main.java": "import java.util.TreeSet;\nimport java.util.HashSet;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeSetOperations treeSetOps = new TreeSetOperations();\n        HashSet<Integer> hashSet = new HashSet<>();\n        Random random = new Random();\n\n        // Adding random values to hashSet\n        for (int i = 0; i < 10; i++) {\n            int randomValue = random.nextInt(100);\n            hashSet.add(randomValue);\n        }\n\n        // Adding a specific value to treeSet\n        treeSetOps.addValue(42);\n\n        // Adding all values from hashSet to treeSet\n        treeSetOps.getTreeSet().addAll(hashSet);\n\n        // Printing the contents of treeSet\n        System.out.println(\"TreeSet contents: \" + treeSetOps.getTreeSet());\n\n        // Checking if the specific value is in treeSet\n        /* read */ boolean containsValue = treeSetOps.containsValue(42);\n        System.out.println(\"TreeSet contains 42: \" + containsValue);\n\n        // Additional operations to make the program more complex\n        TreeSet<Integer> anotherTreeSet = new TreeSet<>();\n        for (int i = 0; i < 5; i++) {\n            anotherTreeSet.add(random.nextInt(50));\n        }\n\n        // Union of two TreeSets\n        treeSetOps.getTreeSet().addAll(anotherTreeSet);\n        System.out.println(\"Union of TreeSets: \" + treeSetOps.getTreeSet());\n\n        // Checking if all elements of anotherTreeSet are in treeSet\n        boolean containsAll = treeSetOps.getTreeSet().containsAll(anotherTreeSet);\n        System.out.println(\"TreeSet contains all elements of anotherTreeSet: \" + containsAll);\n\n        // Removing elements from treeSet\n        treeSetOps.getTreeSet().removeAll(anotherTreeSet);\n        System.out.println(\"TreeSet after removal: \" + treeSetOps.getTreeSet());\n\n        // Checking if treeSet is empty\n        boolean isEmpty = treeSetOps.getTreeSet().isEmpty();\n        System.out.println(\"TreeSet is empty: \" + isEmpty);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.TreeSet",
        "write_method": "add",
        "read_class": "java.util.TreeSet",
        "read_method": "contains"
    },
    "java_code_simple": "import java.util.TreeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeSet<Integer> treeSet = new TreeSet<>();\n        /* write */ treeSet.add(42);\n        /* read */ boolean containsValue = treeSet.contains(42);\n        System.out.println(containsValue);\n    }\n}",
    "java_code_complex": "import java.util.TreeSet;\nimport java.util.HashSet;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeSet<Integer> treeSet = new TreeSet<>();\n        HashSet<Integer> hashSet = new HashSet<>();\n        Random random = new Random();\n\n        // Adding random values to hashSet\n        for (int i = 0; i < 10; i++) {\n            int randomValue = random.nextInt(100);\n            hashSet.add(randomValue);\n        }\n\n        // Adding a specific value to treeSet\n        /* write */ treeSet.add(42);\n\n        // Adding all values from hashSet to treeSet\n        treeSet.addAll(hashSet);\n\n        // Printing the contents of treeSet\n        System.out.println(\"TreeSet contents: \" + treeSet);\n\n        // Checking if the specific value is in treeSet\n        /* read */ boolean containsValue = treeSet.contains(42);\n        System.out.println(\"TreeSet contains 42: \" + containsValue);\n\n        // Additional operations to make the program more complex\n        TreeSet<Integer> anotherTreeSet = new TreeSet<>();\n        for (int i = 0; i < 5; i++) {\n            anotherTreeSet.add(random.nextInt(50));\n        }\n\n        // Union of two TreeSets\n        treeSet.addAll(anotherTreeSet);\n        System.out.println(\"Union of TreeSets: \" + treeSet);\n\n        // Checking if all elements of anotherTreeSet are in treeSet\n        boolean containsAll = treeSet.containsAll(anotherTreeSet);\n        System.out.println(\"TreeSet contains all elements of anotherTreeSet: \" + containsAll);\n\n        // Removing elements from treeSet\n        treeSet.removeAll(anotherTreeSet);\n        System.out.println(\"TreeSet after removal: \" + treeSet);\n\n        // Checking if treeSet is empty\n        boolean isEmpty = treeSet.isEmpty();\n        System.out.println(\"TreeSet is empty: \" + isEmpty);\n    }\n}"
}