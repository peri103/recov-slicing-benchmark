{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DataProcessor {\n    private BlockingQueue<Integer> dataQueue = new ArrayBlockingQueue<>(10);\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ dataQueue.put(data);\n    }\n\n    public BlockingQueue<Integer> getDataQueue() {\n        return dataQueue;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void processData(int data) throws InterruptedException {\n        dataProcessor.processData(data);\n    }\n\n    public DataProcessor getDataProcessor() {\n        return dataProcessor;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            Student student = new Student(\"Alice\");\n            student.processData(1);\n\n            // Adding some unrelated operations\n            BlockingQueue<String> messageQueue = new ArrayBlockingQueue<>(5);\n            messageQueue.put(\"Hello\");\n            messageQueue.put(\"World\");\n\n            // More unrelated operations\n            String firstMessage = messageQueue.take();\n            System.out.println(\"First message: \" + firstMessage);\n\n            /* read */ int processedData = student.getDataProcessor().getDataQueue().take();\n            System.out.println(\"Processed data: \" + processedData);\n\n            // Final operations\n            String secondMessage = messageQueue.take();\n            System.out.println(\"Second message: \" + secondMessage);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ArrayBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.ArrayBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BlockingQueue<Integer> queue1 = new ArrayBlockingQueue<>(10);\n            BlockingQueue<String> queue2 = new LinkedBlockingQueue<>(5);\n\n            // Adding some unrelated operations\n            queue2.put(\"Hello\");\n            queue2.put(\"World\");\n\n            /* write */ queue1.put(1);\n\n            // More unrelated operations\n            String firstString = queue2.take();\n            System.out.println(\"First string from queue2: \" + firstString);\n\n            // Additional operations\n            queue1.put(2);\n            queue1.put(3);\n\n            /* read */ int value = queue1.take();\n            System.out.println(\"Value from queue1: \" + value);\n\n            // More unrelated operations\n            String secondString = queue2.take();\n            System.out.println(\"Second string from queue2: \" + secondString);\n\n            // Final operations\n            int secondValue = queue1.take();\n            System.out.println(\"Second value from queue1: \" + secondValue);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}