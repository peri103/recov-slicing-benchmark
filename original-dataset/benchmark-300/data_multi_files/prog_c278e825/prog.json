{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "DataProcessor.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DataProcessor {\n    private List<Integer> processedData = new ArrayList<>();\n\n    public void processData(int value) {\n        processedData.add(value * 2);\n    }\n\n    public List<Integer> getProcessedData() {\n        return processedData;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        DataProcessor dataProcessor = new DataProcessor();\n\n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                queueManager.writeValue(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            dataProcessor.processData(i);\n        }\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                int value = queueManager.readValue();\n                dataProcessor.processData(value);\n                System.out.println(\"Processed value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the reader thread\n        readerThread.start();\n\n        // Wait for the threads to finish\n        writerThread.join();\n        readerThread.join();\n\n        // Print the processed data\n        System.out.println(\"Processed data: \" + dataProcessor.getProcessedData());\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n        \n        // Wait for the threads to finish\n        writerThread.join();\n        readerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Perform some unrelated operations\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n        \n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the reader thread\n        readerThread.start();\n        \n        // Wait for the threads to finish\n        writerThread.join();\n        readerThread.join();\n    }\n}"
}