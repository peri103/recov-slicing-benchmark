{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DataProcessor {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addData(int data) {\n        /* write */ deque.addFirst(data);\n        System.out.println(\"Data \" + data + \" added to the deque.\");\n    }\n\n    public int processData() throws InterruptedException {\n        /* read */ int data = deque.takeFirst();\n        System.out.println(\"Data \" + data + \" processed from the deque.\");\n        return data;\n    }\n}\n",
        "Worker.java": "public class Worker {\n    private String name;\n    private DataProcessor dataProcessor;\n\n    public Worker(String name, DataProcessor dataProcessor) {\n        this.name = name;\n        this.dataProcessor = dataProcessor;\n    }\n\n    public void addData(int data) {\n        dataProcessor.addData(data);\n    }\n\n    public int processData() throws InterruptedException {\n        return dataProcessor.processData();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor dataProcessor = new DataProcessor();\n        Worker worker1 = new Worker(\"Worker1\", dataProcessor);\n        Worker worker2 = new Worker(\"Worker2\", dataProcessor);\n\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to add data\n        executor.submit(() -> {\n            worker1.addData(42);\n        });\n\n        // Task to process data\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                int data = worker2.processData();\n                System.out.println(\"Processed data: \" + data);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n\n        // Additional unrelated code to make the program more complex\n        LinkedBlockingDeque<String> stringDeque = new LinkedBlockingDeque<>();\n        stringDeque.addLast(\"Hello\");\n        stringDeque.addLast(\"World\");\n\n        while (!stringDeque.isEmpty()) {\n            System.out.println(stringDeque.takeFirst());\n        }\n\n        // More unrelated code\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeFirst"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        /* read */ int value = deque.takeFirst();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the deque\n        executor.submit(() -> {\n            try {\n                /* write */ deque.addFirst(42);\n                System.out.println(\"Value 42 added to the deque.\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Task to read from the deque\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                /* read */ int value = deque.takeFirst();\n                System.out.println(\"Value \" + value + \" taken from the deque.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n\n        // Additional unrelated code to make the program more complex\n        LinkedBlockingDeque<String> stringDeque = new LinkedBlockingDeque<>();\n        stringDeque.addLast(\"Hello\");\n        stringDeque.addLast(\"World\");\n\n        while (!stringDeque.isEmpty()) {\n            System.out.println(stringDeque.takeFirst());\n        }\n\n        // More unrelated code\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n    }\n}"
}