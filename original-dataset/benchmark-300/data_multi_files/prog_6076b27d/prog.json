{
    "files": {
        "QueueManager.java": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class QueueManager {\n    private LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        List<Student> students = new ArrayList<>();\n        \n        try {\n            /* write */ queueManager.writeValue(42);\n            \n            // Adding unrelated code to make the program more complex\n            students.add(new Student(\"Alice\", 20));\n            students.add(new Student(\"Bob\", 22));\n            \n            for (Student student : students) {\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n            }\n            \n            /* read */ int value = queueManager.readValue();\n            System.out.println(\"Value from queue: \" + value);\n            \n            // More unrelated code\n            List<String> stringList = new ArrayList<>();\n            stringList.add(\"Hello\");\n            stringList.add(\"World\");\n            for (String str : stringList) {\n                System.out.println(str);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        List<Integer> list = new ArrayList<>();\n        \n        try {\n            /* write */ queue.put(42);\n            \n            // Adding unrelated code to make the program more complex\n            for (int i = 0; i < 10; i++) {\n                list.add(i * 2);\n            }\n            \n            // Another unrelated operation\n            int sum = 0;\n            for (int num : list) {\n                sum += num;\n            }\n            System.out.println(\"Sum of list elements: \" + sum);\n            \n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n            \n            // More unrelated code\n            List<String> stringList = new ArrayList<>();\n            stringList.add(\"Hello\");\n            stringList.add(\"World\");\n            for (String str : stringList) {\n                System.out.println(str);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}