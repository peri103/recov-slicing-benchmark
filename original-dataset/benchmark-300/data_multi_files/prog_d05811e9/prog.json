{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void putValue(int value) {\n        try {\n            /* write */ queue.put(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int takeValue() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        Student student = new Student(\"Alice\");\n\n        // Thread to write data to the queue\n        Thread writerThread = new Thread(() -> {\n            queueManager.putValue(42);\n        });\n\n        // Thread to read data from the queue\n        Thread readerThread = new Thread(() -> {\n            int value = queueManager.takeValue();\n            System.out.println(\"Value read from queue: \" + value);\n        });\n\n        // Start both threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to complete\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Adding some scores to the student\n        student.addScore(90);\n        student.addScore(85);\n        student.addScore(95);\n\n        // Printing student details\n        System.out.println(\"Student Name: \" + student.getName());\n        System.out.println(\"Student Scores:\");\n        for (int score : student.getScores()) {\n            System.out.println(score);\n        }\n\n        // Additional unrelated operations\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        System.out.println(\"String list contents:\");\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n\n        String concatenatedString = String.join(\" \", stringList);\n        System.out.println(\"Concatenated string: \" + concatenatedString);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write data to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read data from the queue\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start both threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to complete\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n        List<String> stringList = new ArrayList<>();\n\n        // Adding some unrelated data to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding some strings to the string list\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        // Thread to write data to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read data from the queue\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start both threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to complete\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Print the list and string list\n        System.out.println(\"List contents:\");\n        for (int num : list) {\n            System.out.println(num);\n        }\n\n        System.out.println(\"String list contents:\");\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n\n        // Additional unrelated operations\n        int sum = list.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of list elements: \" + sum);\n\n        String concatenatedString = String.join(\" \", stringList);\n        System.out.println(\"Concatenated string: \" + concatenatedString);\n    }\n}"
}