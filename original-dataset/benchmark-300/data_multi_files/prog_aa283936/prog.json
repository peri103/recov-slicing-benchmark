{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void processData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int getProcessedData() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1; // Return -1 in case of interruption\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName, List<Student> students) {\n        this.courseName = courseName;\n        this.students = students;\n    }\n\n    public void displayStudentScores() {\n        for (Student student : students) {\n            System.out.println(\"Student: \" + student.getName() + \", Scores: \" + student.getScores());\n        }\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        DataProcessor processor = new DataProcessor();\n        List<Student> students = new ArrayList<>();\n\n        // Create students and add scores\n        Student student1 = new Student(\"Alice\");\n        student1.addScore(90);\n        student1.addScore(85);\n\n        Student student2 = new Student(\"Bob\");\n        student2.addScore(78);\n        student2.addScore(92);\n\n        students.add(student1);\n        students.add(student2);\n\n        // Process data\n        processor.processData(100);\n\n        // Create a course and display student scores\n        Course course = new Course(\"Mathematics\", students);\n        course.displayStudentScores();\n\n        // Retrieve processed data\n        int processedData = processor.getProcessedData();\n        System.out.println(\"Processed Data: \" + processedData);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Thread to read the value\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        \n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Thread to write the value\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Add some unrelated operations\n        for (int i = 0; i < 10; i++) {\n            list.add(i);\n            linkedList.add(i * 2);\n        }\n\n        // Thread to read the value\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writer.start();\n        reader.start();\n\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // More unrelated operations\n        System.out.println(\"ArrayList contents:\");\n        for (int num : list) {\n            System.out.println(num);\n        }\n\n        System.out.println(\"LinkedList contents:\");\n        for (int num : linkedList) {\n            System.out.println(num);\n        }\n    }\n}"
}