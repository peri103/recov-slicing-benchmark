{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* write */ queue.put(42);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Consumed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        // Thread to process data\n        Thread processorThread = new Thread(processor::processData);\n\n        // Thread to consume data\n        Thread consumerThread = new Thread(consumer::consumeData);\n\n        // Start both threads\n        processorThread.start();\n        consumerThread.start();\n\n        // Wait for both threads to complete\n        try {\n            processorThread.join();\n            consumerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        System.out.println(\"List contents:\");\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n\n        // More complex code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Thread stringWriterThread = new Thread(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        Thread stringReaderThread = new Thread(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(\"Received message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        stringWriterThread.start();\n        stringReaderThread.start();\n\n        try {\n            stringWriterThread.join();\n            stringReaderThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start both threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to complete\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n        \n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n                list.add(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start both threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to complete\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        System.out.println(\"List contents:\");\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n\n        // More complex code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Thread stringWriterThread = new Thread(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        Thread stringReaderThread = new Thread(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(\"Received message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        stringWriterThread.start();\n        stringReaderThread.start();\n\n        try {\n            stringWriterThread.join();\n            stringReaderThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}