{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class DataProcessor {\n    private BlockingDeque<Integer> dataQueue = new LinkedBlockingDeque<>();\n\n    public void addData(int data) throws InterruptedException {\n        /* write */ dataQueue.addLast(data);\n    }\n\n    public BlockingDeque<Integer> getDataQueue() {\n        return dataQueue;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.BlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        Student student = new Student(\"John Doe\");\n\n        // Add some scores to the student\n        student.addScore(85);\n        student.addScore(90);\n\n        // Process the student's scores\n        for (int score : student.getScores()) {\n            processor.addData(score);\n        }\n\n        // Add a special data point\n        processor.addData(100);\n\n        // Retrieve and print the last data point\n        BlockingDeque<Integer> queue = processor.getDataQueue();\n        /* read */ int lastData = queue.takeLast();\n        System.out.println(\"Last data point: \" + lastData);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeLast"
    },
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        /* read */ int value = deque.takeLast();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 10);\n        }\n        for (int num : numbers) {\n            deque.addFirst(num);\n        }\n        /* write */ deque.addLast(42);\n        int sum = 0;\n        while (!deque.isEmpty()) {\n            sum += deque.takeFirst();\n        }\n        /* read */ int value = deque.takeLast();\n        System.out.println(\"Sum of deque elements: \" + sum);\n        System.out.println(\"Value read from deque: \" + value);\n    }\n}"
}