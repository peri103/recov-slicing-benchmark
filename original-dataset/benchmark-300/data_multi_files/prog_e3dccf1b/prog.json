{
    "files": {
        "QueueManager.java": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class QueueManager {\n    private BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void enqueue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int dequeue() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            QueueManager queueManager = new QueueManager();\n            Course course = new Course(\"Computer Science\");\n            course.addStudent(new Student(\"Alice\", 20));\n            course.addStudent(new Student(\"Bob\", 21));\n\n            // Enqueue a value\n            queueManager.enqueue(100);\n\n            // Process some unrelated data\n            for (Student student : course.getStudents()) {\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n            }\n\n            // Dequeue the value\n            /* read */ int value = queueManager.dequeue();\n            System.out.println(\"Dequeued value: \" + value);\n\n            // More unrelated operations\n            BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n            System.out.println(\"First string: \" + stringQueue.take());\n            System.out.println(\"Second string: \" + stringQueue.take());\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n            \n            // Additional code to make the program more complex\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n            \n            // Some unrelated operations\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of first 10 numbers: \" + sum);\n            \n            /* write */ queue.put(42);\n            \n            // More unrelated operations\n            String firstString = stringQueue.take();\n            String secondString = stringQueue.take();\n            System.out.println(\"Concatenated strings: \" + firstString + \" \" + secondString);\n            \n            // Simulate some delay\n            TimeUnit.SECONDS.sleep(1);\n            \n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n            \n            // Final unrelated operations\n            BlockingQueue<Double> doubleQueue = new LinkedBlockingQueue<>();\n            doubleQueue.put(3.14);\n            doubleQueue.put(2.71);\n            System.out.println(\"First double: \" + doubleQueue.take());\n            System.out.println(\"Second double: \" + doubleQueue.take());\n            \n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}