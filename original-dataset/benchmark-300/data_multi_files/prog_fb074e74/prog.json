{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int consumeData() throws InterruptedException {\n        return /* read */ queue.take();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        // Submit a task to process data\n        Future<?> processFuture = executor.submit(() -> {\n            try {\n                processor.processData(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n            Thread.sleep(100);\n        }\n\n        // Submit a task to consume data\n        Future<Integer> consumeFuture = executor.submit(() -> {\n            try {\n                return consumer.consumeData();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n\n        // Ensure the process operation completes\n        processFuture.get();\n\n        // Get the result of the consume operation\n        int value = consumeFuture.get();\n        System.out.println(\"Consumed value: \" + value);\n\n        // Shutdown the executor\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        \n        System.out.println(value);\n        \n        // Ensure the writer thread completes\n        writerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        \n        // Submit a task to perform the write operation\n        Future<?> writeFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n            Thread.sleep(100);\n        }\n        \n        // Submit a task to perform the read operation\n        Future<Integer> readFuture = executor.submit(() -> {\n            try {\n                return /* read */ queue.take();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n        \n        // Ensure the write operation completes\n        writeFuture.get();\n        \n        // Get the result of the read operation\n        int value = readFuture.get();\n        System.out.println(\"Read value: \" + value);\n        \n        // Shutdown the executor\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n    }\n}"
}