{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeValue(int value) {\n        try {\n            /* write */ queue.put(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int readValue() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1; // Return a default value in case of error\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        \n        // Use a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            queueManager.writeValue(42);\n        });\n        \n        writerThread.start();\n        \n        // Additional unrelated code to make the program more complex\n        Student student = new Student(\"Alice\");\n        student.addScore(90);\n        student.addScore(85);\n        \n        LinkedList<Integer> linkedList = new LinkedList<>();\n        for (int i = 0; i < 5; i++) {\n            linkedList.add(i * 10);\n        }\n        \n        for (int score : student.getScores()) {\n            System.out.println(\"Student \" + student.getName() + \" score: \" + score);\n        }\n        \n        for (int value : linkedList) {\n            System.out.println(\"LinkedList value: \" + value);\n        }\n        \n        int value = queueManager.readValue();\n        System.out.println(\"Value from SynchronousQueue: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Use a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Use a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Additional unrelated code to make the program more complex\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        \n        for (int i = 0; i < 10; i++) {\n            list.add(i * 2);\n            linkedList.add(i * 3);\n        }\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList value: \" + list.get(i));\n        }\n        \n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList value: \" + linkedList.get(i));\n        }\n        \n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from SynchronousQueue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}