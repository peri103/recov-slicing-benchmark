{
    "files": {
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData() {\n        try {\n            /* write */ queue.put(42);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataReader {\n    private SynchronousQueue<Integer> queue;\n\n    public DataReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int readData() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataWriter writer = new DataWriter(queue);\n        DataReader reader = new DataReader(queue);\n\n        // Create a student and course\n        Student student = new Student(\"Alice\", 20);\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(student);\n\n        // Perform the write operation\n        writer.writeData();\n\n        // Perform some unrelated operations\n        System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        System.out.println(\"Course: \" + course.getCourseName());\n        System.out.println(\"Number of students in course: \" + course.getStudents().size());\n\n        // Perform the read operation\n        int value = reader.readData();\n        System.out.println(\"Read value: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        BlockingQueue<String> logQueue = new LinkedBlockingQueue<>();\n\n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                logQueue.put(\"Write operation completed: 42\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform some unrelated operations\n        try {\n            TimeUnit.SECONDS.sleep(1); // Simulate some delay\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            logQueue.put(\"Read operation completed: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Process the log messages\n        while (!logQueue.isEmpty()) {\n            try {\n                System.out.println(logQueue.take());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Additional unrelated operations\n        BlockingQueue<Integer> anotherQueue = new LinkedBlockingQueue<>();\n        try {\n            anotherQueue.put(100);\n            System.out.println(\"Unrelated operation: Added 100 to another queue\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}