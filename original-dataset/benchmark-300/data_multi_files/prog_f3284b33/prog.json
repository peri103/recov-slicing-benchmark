{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Consumed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Adding some initial data to the list and linkedList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Writing to the queue in a separate thread\n        Thread writerThread = new Thread(() -> processor.processData(42));\n\n        // Reading from the queue in a separate thread\n        Thread readerThread = new Thread(consumer::consumeData);\n\n        writerThread.start();\n        readerThread.start();\n\n        // Performing some operations on the list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n\n        // Printing the contents of the linkedList\n        System.out.println(\"Contents of linkedList:\");\n        for (Integer num : linkedList) {\n            System.out.println(num);\n        }\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n        readerThread.start();\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Adding some initial data to the list and linkedList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Writing to the queue in a separate thread\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reading from the queue in a separate thread\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n\n        // Performing some operations on the list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n\n        // Printing the contents of the linkedList\n        System.out.println(\"Contents of linkedList:\");\n        for (Integer num : linkedList) {\n            System.out.println(num);\n        }\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}