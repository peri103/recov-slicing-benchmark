{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n    private final int value;\n\n    public DelayedElement(int delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis();\n        this.value = 42; // Example value\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(int delayInMillis) {\n        /* write */ queue.put(new DelayedElement(delayInMillis));\n    }\n\n    public int takeElement() throws InterruptedException {\n        /* read */ DelayedElement element = queue.take();\n        return element.getValue();\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        // Initialize the QueueManager\n        QueueManager queueManager = new QueueManager();\n\n        // Add some unrelated code to make the program more complex\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        System.out.println(\"List contents: \" + list);\n\n        // Write to the DelayQueue\n        queueManager.addElement(1000); // 1 second delay\n\n        // More unrelated code\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String s : stringList) {\n            System.out.println(s);\n        }\n\n        // Read from the DelayQueue\n        int value = queueManager.takeElement();\n        System.out.println(\"Element taken after delay: \" + value);\n\n        // Even more unrelated code\n        int sum = 0;\n        for (int num : list) {\n            sum += num;\n        }\n        System.out.println(\"Sum of list elements: \" + sum);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000)); // 1 second delay\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken after delay: \" + element.getValue());\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n    private final int value;\n\n    public DelayedElement(int delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis();\n        this.value = 42; // Example value\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        // Initialize the DelayQueue\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n        // Add some unrelated code to make the program more complex\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        System.out.println(\"List contents: \" + list);\n\n        // Write to the DelayQueue\n        /* write */ queue.put(new DelayedElement(1000)); // 1 second delay\n\n        // More unrelated code\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String s : stringList) {\n            System.out.println(s);\n        }\n\n        // Read from the DelayQueue\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken after delay: \" + element.getValue());\n\n        // Even more unrelated code\n        int sum = 0;\n        for (int num : list) {\n            sum += num;\n        }\n        System.out.println(\"Sum of list elements: \" + sum);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n    private final int value;\n\n    public DelayedElement(int delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis();\n        this.value = 42; // Example value\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}"
}