{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n    private final int id;\n\n    public DelayedElement(long delayMillis, int id) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis();\n        this.id = id;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsed = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsed, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{id=\" + id + \"}\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        Random random = new Random();\n        List<DelayedElement> elements = new ArrayList<>();\n\n        // Generate and add multiple delayed elements to the queue\n        for (int i = 0; i < 5; i++) {\n            long delay = random.nextInt(5000) + 1000; // Random delay between 1 and 6 seconds\n            DelayedElement element = new DelayedElement(delay, i);\n            elements.add(element);\n            queue.put(element);\n            System.out.println(\"Added element with id \" + i + \" and delay \" + delay + \" ms\");\n        }\n\n        // Perform some unrelated operations\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n        System.out.println(\"Generated random numbers: \" + numbers);\n\n        // Find the maximum number in the list\n        int max = numbers.stream().max(Integer::compare).orElse(0);\n        System.out.println(\"Maximum number in the list: \" + max);\n\n        // Write the first element to the queue\n        DelayedElement firstElement = elements.get(0);\n        /* write */ queue.put(firstElement);\n        System.out.println(\"Re-added first element to the queue: \" + firstElement);\n\n        // Perform some more unrelated operations\n        List<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        strings.add(\"Java\");\n        System.out.println(\"List of strings: \" + strings);\n\n        // Read the element from the queue\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        // Perform final unrelated operations\n        List<Double> doubles = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            doubles.add(random.nextDouble() * 100);\n        }\n        System.out.println(\"Generated random doubles: \" + doubles);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayMillis) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsed = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsed, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}