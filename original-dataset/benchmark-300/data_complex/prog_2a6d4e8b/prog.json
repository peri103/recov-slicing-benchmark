{
    "java_code": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        ArrayBlockingQueue<Integer> arrayQueue = new ArrayBlockingQueue<>(10);\n        Random random = new Random();\n\n        try {\n            // Initialize and manipulate arrayQueue\n            for (int i = 0; i < 5; i++) {\n                arrayQueue.put(random.nextInt(100));\n            }\n\n            // Perform some operations on arrayQueue\n            int sum = 0;\n            for (Integer num : arrayQueue) {\n                sum += num;\n            }\n            System.out.println(\"Sum of arrayQueue elements: \" + sum);\n\n            // Write to the LinkedBlockingQueue\n            /* write */ queue.put(42);\n\n            // Perform some unrelated operations\n            int randomNumber = random.nextInt(50);\n            System.out.println(\"Random number generated: \" + randomNumber);\n\n            // Read from the LinkedBlockingQueue\n            /* read */ int value = queue.take();\n            System.out.println(\"Value read from queue: \" + value);\n\n            // More unrelated operations\n            for (int i = 0; i < 3; i++) {\n                arrayQueue.put(random.nextInt(100));\n            }\n\n            // Print final state of arrayQueue\n            System.out.println(\"Final elements in arrayQueue: \" + arrayQueue);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    }
}