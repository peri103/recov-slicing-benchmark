{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write the value\n        Callable<Void> writerTask = () -> {\n            /* write */ queue.put(42);\n            return null;\n        };\n\n        // Task to read the value\n        Callable<Void> readerTask = () -> {\n            /* read */ int value = queue.take();\n            System.out.println(\"Read value: \" + value);\n            return null;\n        };\n\n        // Submit tasks to the executor\n        Future<Void> writerFuture = executor.submit(writerTask);\n        Future<Void> readerFuture = executor.submit(readerTask);\n\n        // Wait for both tasks to complete\n        try {\n            writerFuture.get();\n            readerFuture.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Shutdown the executor\n        executor.shutdown();\n\n        // Additional unrelated code to make the program more complex\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n\n        // Another unrelated task\n        SynchronousQueue<String> anotherQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        Callable<Void> anotherWriterTask = () -> {\n            anotherQueue.put(\"Hello\");\n            return null;\n        };\n\n        Callable<Void> anotherReaderTask = () -> {\n            String message = anotherQueue.take();\n            System.out.println(\"Read message: \" + message);\n            return null;\n        };\n\n        Future<Void> anotherWriterFuture = executor.submit(anotherWriterTask);\n        Future<Void> anotherReaderFuture = executor.submit(anotherReaderTask);\n\n        try {\n            anotherWriterFuture.get();\n            anotherReaderFuture.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        executor.shutdown();\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Thread to read the value\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start both threads\n        writer.start();\n        reader.start();\n        \n        // Wait for both threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}