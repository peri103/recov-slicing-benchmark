{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        List<Integer> list = new ArrayList<>();\n        List<String> stringList = new ArrayList<>();\n\n        // Adding elements to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding strings to the string list\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        stringList.add(\"Java\");\n\n        // Printing elements from the list\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n\n        // Printing strings from the string list\n        for (String str : stringList) {\n            System.out.println(\"String list element: \" + str);\n        }\n\n        /* write */ queue.put(new DelayedElement(1000)); // 1000 milliseconds delay\n\n        // Simulating some other operations\n        int sum = 0;\n        for (int num : list) {\n            sum += num;\n        }\n        System.out.println(\"Sum of list elements: \" + sum);\n\n        // Concatenating strings from the string list\n        StringBuilder concatenatedString = new StringBuilder();\n        for (String str : stringList) {\n            concatenatedString.append(str).append(\" \");\n        }\n        System.out.println(\"Concatenated string: \" + concatenatedString.toString().trim());\n\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken after delay: \" + element);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n\n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000)); // 1000 milliseconds delay\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken after delay: \" + element);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n\n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}