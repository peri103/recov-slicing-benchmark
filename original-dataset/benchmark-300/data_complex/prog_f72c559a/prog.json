{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writerThread.start();\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        linkedList.addAll(list);\n\n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Wait for the writer thread to finish\n        writerThread.join();\n\n        // More unrelated operations\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList element: \" + linkedList.get(i));\n        }\n\n        // Another unrelated operation\n        List<Integer> copiedList = new ArrayList<>(list);\n        copiedList.add(100);\n        System.out.println(\"Copied list size: \" + copiedList.size());\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(value);\n        \n        // Wait for the writer thread to finish\n        writerThread.join();\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}