{
    "java_code": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Submit a task to write to the queue\n        Future<?> writeFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Submit a task to read from the queue\n        Future<Integer> readFuture = executor.submit(() -> {\n            try {\n                return /* read */ queue.take();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return -1;\n            }\n        });\n\n        // Wait for the write to complete\n        writeFuture.get();\n\n        // Wait for the read to complete and print the value\n        int value = readFuture.get();\n        System.out.println(\"Read value: \" + value);\n\n        // Shutdown the executor\n        executor.shutdown();\n\n        // Additional unrelated code to make the program more complex\n        LinkedTransferQueue<String> stringQueue = new LinkedTransferQueue<>();\n        executor = Executors.newSingleThreadExecutor();\n        Future<?> stringWriteFuture = executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        Future<String> stringReadFuture = executor.submit(() -> {\n            try {\n                return stringQueue.take();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return null;\n            }\n        });\n\n        stringWriteFuture.get();\n        String stringValue = stringReadFuture.get();\n        System.out.println(\"Read string value: \" + stringValue);\n\n        executor.shutdown();\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "take"
    }
}