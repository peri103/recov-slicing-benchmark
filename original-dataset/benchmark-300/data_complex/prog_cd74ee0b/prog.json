{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n        Random random = new Random();\n\n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                int valueToWrite = random.nextInt(100);\n                /* write */ queue.put(valueToWrite);\n                System.out.println(\"Value written: \" + valueToWrite);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writerThread.start();\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 10; i++) {\n            list.add(random.nextInt(100));\n        }\n\n        System.out.println(\"List before read: \" + list);\n\n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value read: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform more unrelated operations\n        list.sort(Integer::compareTo);\n        System.out.println(\"List after read and sort: \" + list);\n\n        // Add more complexity\n        List<Integer> filteredList = new ArrayList<>();\n        for (int num : list) {\n            if (num % 2 == 0) {\n                filteredList.add(num);\n            }\n        }\n\n        System.out.println(\"Filtered list (even numbers): \" + filteredList);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value read: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}