{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Add some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        \n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n        \n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList value: \" + linkedList.get(i));\n        }\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Read value from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Wait for the writer thread to finish\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // More unrelated operations\n        ArrayList<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        \n        for (String str : stringList) {\n            System.out.println(\"String list value: \" + str);\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Read value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Wait for the writer thread to finish\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}