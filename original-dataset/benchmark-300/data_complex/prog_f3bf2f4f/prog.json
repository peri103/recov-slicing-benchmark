{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n        \n        // Adding some unrelated code to make the program more complex\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n        \n        System.out.println(\"Numbers list before processing: \" + numbers);\n        \n        /* write */ queue.put(new DelayedElement(1000)); // 1 second delay\n        \n        // More unrelated code\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int num : numbers) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n        \n        System.out.println(\"Even numbers from the list: \" + evenNumbers);\n        \n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from queue\");\n        \n        // Final unrelated code\n        int sum = 0;\n        for (int num : evenNumbers) {\n            sum += num;\n        }\n        \n        System.out.println(\"Sum of even numbers: \" + sum);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000)); // 1 second delay\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from queue\");\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}