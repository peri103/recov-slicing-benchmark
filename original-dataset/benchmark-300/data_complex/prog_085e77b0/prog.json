{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000, \"Hello, World!\");\n        \n        /* write */ queue.put(element);\n        \n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n        \n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(\"Item \" + i);\n        }\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List item: \" + list.get(i));\n        }\n        \n        for (String item : linkedList) {\n            System.out.println(\"Linked List item: \" + item);\n        }\n        \n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Taken element: \" + takenElement.getData());\n        \n        ArrayList<String> newList = new ArrayList<>();\n        newList.add(\"New Item 1\");\n        newList.add(\"New Item 2\");\n        \n        for (String item : newList) {\n            System.out.println(\"New List item: \" + item);\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000, \"Hello, World!\");\n        \n        /* write */ queue.put(element);\n        \n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(takenElement.getData());\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}