{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n\n        // Generate a list of random numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n\n        // Thread to write to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(numbers.get(0));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the queue\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional code to make the program more complex\n        List<Integer> sortedNumbers = new ArrayList<>(numbers);\n        sortedNumbers.sort(Integer::compareTo);\n\n        System.out.println(\"Original numbers: \" + numbers);\n        System.out.println(\"Sorted numbers: \" + sortedNumbers);\n\n        int sum = sortedNumbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of sorted numbers: \" + sum);\n\n        int max = sortedNumbers.stream().max(Integer::compareTo).orElse(0);\n        System.out.println(\"Max number: \" + max);\n\n        int min = sortedNumbers.stream().min(Integer::compareTo).orElse(0);\n        System.out.println(\"Min number: \" + min);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the queue\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}