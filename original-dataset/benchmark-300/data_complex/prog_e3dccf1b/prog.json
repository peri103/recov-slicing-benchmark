{
    "java_code": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n            \n            // Additional code to make the program more complex\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n            \n            // Some unrelated operations\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of first 10 numbers: \" + sum);\n            \n            /* write */ queue.put(42);\n            \n            // More unrelated operations\n            String firstString = stringQueue.take();\n            String secondString = stringQueue.take();\n            System.out.println(\"Concatenated strings: \" + firstString + \" \" + secondString);\n            \n            // Simulate some delay\n            TimeUnit.SECONDS.sleep(1);\n            \n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n            \n            // Final unrelated operations\n            BlockingQueue<Double> doubleQueue = new LinkedBlockingQueue<>();\n            doubleQueue.put(3.14);\n            doubleQueue.put(2.71);\n            System.out.println(\"First double: \" + doubleQueue.take());\n            System.out.println(\"Second double: \" + doubleQueue.take());\n            \n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    }
}