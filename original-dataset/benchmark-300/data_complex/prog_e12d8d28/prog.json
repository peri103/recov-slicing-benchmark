{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Start a new thread to perform the write operation\n        Future<?> writerFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n\n        // Start a new thread to perform the read operation\n        Future<Integer> readerFuture = executor.submit(() -> {\n            try {\n                /* read */ return queue.take();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n\n        try {\n            // Wait for the write operation to complete\n            writerFuture.get(1, TimeUnit.SECONDS);\n\n            // Wait for the read operation to complete\n            Integer value = readerFuture.get(1, TimeUnit.SECONDS);\n            System.out.println(\"Read value: \" + value);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            executor.shutdown();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        try {\n            // Wait for the write operation to complete\n            writerThread.join();\n            \n            // Perform the read operation\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}