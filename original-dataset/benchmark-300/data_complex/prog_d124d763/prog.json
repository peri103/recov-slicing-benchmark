{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        Random random = new Random();\n        List<DelayedElement> elements = new ArrayList<>();\n\n        // Generate and add multiple delayed elements to the queue\n        for (int i = 0; i < 5; i++) {\n            long delay = random.nextInt(5000) + 1000; // Random delay between 1 and 6 seconds\n            DelayedElement element = new DelayedElement(delay);\n            elements.add(element);\n            queue.put(element);\n            System.out.println(\"Added element with delay: \" + delay + \" ms\");\n        }\n\n        // Perform some unrelated operations\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n        System.out.println(\"Generated numbers: \" + numbers);\n\n        // Write the specific element to the queue\n        DelayedElement specificElement = new DelayedElement(3000); // 3 seconds delay\n        /* write */ queue.put(specificElement);\n        System.out.println(\"Added specific element with delay: 3000 ms\");\n\n        // More unrelated operations\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Read the specific element from the queue\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        // Additional operations\n        System.out.println(\"Remaining elements in queue: \" + queue.size());\n        for (DelayedElement element : elements) {\n            if (queue.contains(element)) {\n                System.out.println(\"Element with delay \" + element.getDelay(TimeUnit.MILLISECONDS) + \" ms is still in queue\");\n            }\n        }\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}