{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n        linkedList.add(\"Third\");\n\n        for (String str : linkedList) {\n            list.add(str.length());\n        }\n\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Length of \" + linkedList.get(i) + \" is \" + list.get(i));\n        }\n\n        ArrayList<DelayedElement> delayedList = new ArrayList<>();\n        delayedList.add(new DelayedElement(2000));\n        delayedList.add(new DelayedElement(3000));\n\n        for (DelayedElement delayedElement : delayedList) {\n            queue.put(delayedElement);\n        }\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        for (int i = 0; i < delayedList.size(); i++) {\n            System.out.println(\"Remaining delay for element \" + i + \": \" + delayedList.get(i).getDelay(TimeUnit.MILLISECONDS) + \" ms\");\n        }\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private long delay;\n\n    public DelayedElement(long delay) {\n        this.startTime = System.currentTimeMillis();\n        this.delay = delay;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsed = System.currentTimeMillis() - startTime;\n        long remaining = delay - elapsed;\n        return unit.convert(remaining, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        long diff = this.getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS);\n        return Long.compare(diff, 0);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                \", delay=\" + delay +\n                '}';\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private long delay;\n\n    public DelayedElement(long delay) {\n        this.startTime = System.currentTimeMillis();\n        this.delay = delay;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsed = System.currentTimeMillis() - startTime;\n        long remaining = delay - elapsed;\n        return unit.convert(remaining, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        long diff = this.getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS);\n        return Long.compare(diff, 0);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                \", delay=\" + delay +\n                '}';\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}