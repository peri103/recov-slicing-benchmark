{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n\n        // Adding some unrelated code\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n\n        // Writing to the original queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n\n        // Using another SynchronousQueue for a different purpose\n        Thread stringWriterThread = new Thread(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        stringWriterThread.start();\n\n        // Reading from the original queue\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Reading from the string queue\n        try {\n            String message = stringQueue.take();\n            System.out.println(\"Message from stringQueue: \" + message);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // More unrelated code\n        System.out.println(\"Numbers list:\");\n        for (int num : numbers) {\n            System.out.println(num);\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}