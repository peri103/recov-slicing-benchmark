{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        BlockingQueue<String> logQueue = new LinkedBlockingQueue<>();\n\n        // Thread to write to the queue\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                logQueue.put(\"Value 42 written to SynchronousQueue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the queue\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                logQueue.put(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to log messages\n        Thread logger = new Thread(() -> {\n            try {\n                while (true) {\n                    String log = logQueue.take();\n                    System.out.println(log);\n                    if (log.contains(\"Read value\")) {\n                        break;\n                    }\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start all threads\n        writer.start();\n        reader.start();\n        logger.start();\n\n        // Wait for all threads to finish\n        try {\n            writer.join();\n            reader.join();\n            logger.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write to the queue\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the queue\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start both threads\n        writer.start();\n        reader.start();\n\n        // Wait for both threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}