{
    "java_code": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the deque\n        executor.submit(() -> {\n            try {\n                /* write */ deque.addFirst(42);\n                System.out.println(\"Value 42 added to the deque.\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Task to read from the deque\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate some delay\n                /* read */ int value = deque.takeFirst();\n                System.out.println(\"Value \" + value + \" taken from the deque.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n\n        // Additional unrelated code to make the program more complex\n        LinkedBlockingDeque<String> stringDeque = new LinkedBlockingDeque<>();\n        stringDeque.addLast(\"Hello\");\n        stringDeque.addLast(\"World\");\n\n        while (!stringDeque.isEmpty()) {\n            System.out.println(stringDeque.takeFirst());\n        }\n\n        // More unrelated code\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        /* read */ int value = deque.takeFirst();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeFirst"
    }
}