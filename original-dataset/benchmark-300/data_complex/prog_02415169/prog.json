{
    "java_code": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        List<Integer> list = new ArrayList<>();\n        \n        // Adding some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        \n        /* write */ deque.addLast(42);\n        \n        // More unrelated operations\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n        \n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Deque value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Additional unrelated operations\n        BlockingDeque<String> stringDeque = new LinkedBlockingDeque<>();\n        stringDeque.addLast(\"Hello\");\n        stringDeque.addLast(\"World\");\n        \n        try {\n            System.out.println(\"String Deque: \" + stringDeque.takeLast());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeLast"
    }
}