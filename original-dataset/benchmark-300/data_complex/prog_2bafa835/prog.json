{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Writer task\n        Runnable writerTask = () -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written to queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Reader task\n        Runnable readerTask = () -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Submit tasks to executor\n        executor.submit(writerTask);\n        executor.submit(readerTask);\n\n        // Shutdown executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {\n                executor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executor.shutdownNow();\n        }\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Runnable stringWriterTask = () -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"String written to queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        Runnable stringReaderTask = () -> {\n            try {\n                String str = stringQueue.take();\n                System.out.println(\"String read from queue: \" + str);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        ExecutorService stringExecutor = Executors.newFixedThreadPool(2);\n        stringExecutor.submit(stringWriterTask);\n        stringExecutor.submit(stringReaderTask);\n\n        stringExecutor.shutdown();\n        try {\n            if (!stringExecutor.awaitTermination(5, TimeUnit.SECONDS)) {\n                stringExecutor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            stringExecutor.shutdownNow();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writer thread\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reader thread\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}