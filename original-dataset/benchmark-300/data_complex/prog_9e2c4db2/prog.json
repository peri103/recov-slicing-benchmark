{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n        Random random = new Random();\n        \n        // Start a new thread to write to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Simulate some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            list.add(random.nextInt(100));\n        }\n        \n        // Print the list\n        System.out.println(\"List contents: \" + list);\n        \n        // Wait for the writer thread to put the value\n        Thread.sleep(100);\n        \n        // Read the value from the queue\n        /* read */ int value = queue.take();\n        \n        System.out.println(\"Value read from queue: \" + value);\n        \n        // Perform some more unrelated operations\n        int sum = list.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of list elements: \" + sum);\n        \n        // Shuffle the list\n        java.util.Collections.shuffle(list);\n        System.out.println(\"Shuffled list: \" + list);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to write to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Wait for the writer thread to put the value\n        Thread.sleep(100);\n        \n        // Read the value from the queue\n        /* read */ int value = queue.take();\n        \n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}