{
    "java_code": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        AtomicInteger counter = new AtomicInteger(0);\n\n        // Initialize a counter and increment it\n        counter.set(10);\n        counter.incrementAndGet();\n\n        // Add some elements to the deque\n        deque.addLast(100);\n        deque.addLast(200);\n\n        /* write */ deque.addFirst(42);\n\n        // Perform some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 5 numbers: \" + sum);\n\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(\"Value read from deque: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform more unrelated operations\n        String message = \"Hello, World!\";\n        System.out.println(message);\n\n        // Check the counter value\n        System.out.println(\"Counter value: \" + counter.get());\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeFirst"
    }
}