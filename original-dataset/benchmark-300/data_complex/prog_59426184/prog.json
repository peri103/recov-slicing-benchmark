{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Submit a task to perform the write operation\n        Future<?> writerFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Submit a task to perform the read operation\n        Future<Integer> readerFuture = executor.submit(() -> {\n            try {\n                return /* read */ queue.take();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n\n        // Wait for the write operation to complete\n        writerFuture.get();\n\n        // Retrieve the value from the read operation\n        int value = readerFuture.get();\n\n        // Shutdown the executor\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n\n        System.out.println(value);\n\n        // Additional complex code\n        SynchronousQueue<String> anotherQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Submit a task to perform another write operation\n        Future<?> anotherWriterFuture = executor.submit(() -> {\n            try {\n                anotherQueue.put(\"Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Submit a task to perform another read operation\n        Future<String> anotherReaderFuture = executor.submit(() -> {\n            try {\n                return anotherQueue.take();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n\n        // Wait for the write operation to complete\n        anotherWriterFuture.get();\n\n        // Retrieve the value from the read operation\n        String anotherValue = anotherReaderFuture.get();\n\n        // Shutdown the executor\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n\n        System.out.println(anotherValue);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        \n        // Wait for the writer thread to finish\n        writerThread.join();\n        \n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}