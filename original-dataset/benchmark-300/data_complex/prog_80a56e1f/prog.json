{
    "java_code": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n\n        // Generate some random numbers and add them to the list\n        for (int i = 0; i < 5; i++) {\n            numbers.add(random.nextInt(100));\n        }\n\n        // Print the generated numbers\n        System.out.println(\"Generated numbers: \" + numbers);\n\n        try {\n            // Write the first number from the list to the queue\n            /* write */ queue.put(numbers.get(0));\n\n            // Perform some operations with the list\n            for (int i = 1; i < numbers.size(); i++) {\n                queue.put(numbers.get(i));\n            }\n\n            // Read the first number from the queue\n            /* read */ int value = queue.take();\n            System.out.println(\"Value read from queue: \" + value);\n\n            // Print the remaining numbers in the queue\n            System.out.println(\"Remaining numbers in queue:\");\n            while (!queue.isEmpty()) {\n                System.out.println(queue.take());\n            }\n\n            // Add some more numbers to the list\n            for (int i = 0; i < 3; i++) {\n                numbers.add(random.nextInt(100));\n            }\n\n            // Print the updated list\n            System.out.println(\"Updated numbers: \" + numbers);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    }
}