{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create an ExecutorService to manage threads\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        \n        // Submit a task to perform the write operation\n        Future<?> writeFuture = executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Write operation completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Submit a task to perform the read operation\n        Future<?> readFuture = executor.submit(() -> {\n            try {\n                // Introduce a delay to ensure the write operation happens first\n                TimeUnit.SECONDS.sleep(1);\n                /* read */ int value = queue.take();\n                System.out.println(\"Read operation completed. Value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Shutdown the executor service after tasks are completed\n        executor.shutdown();\n        \n        // Wait for all tasks to complete\n        try {\n            executor.awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}