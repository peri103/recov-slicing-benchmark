{
    "java_code": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            ArrayBlockingQueue<String> stringQueue = new ArrayBlockingQueue<>(10);\n            List<Integer> numbers = new ArrayList<>();\n\n            // Adding some elements to the list\n            for (int i = 0; i < 5; i++) {\n                numbers.add(i * 10);\n            }\n\n            // Adding elements to the string queue\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n\n            // Writing to the LinkedBlockingQueue\n            /* write */ queue.put(42);\n\n            // Processing the list\n            for (int num : numbers) {\n                System.out.println(\"Number: \" + num);\n            }\n\n            // Taking elements from the string queue\n            String firstString = stringQueue.take();\n            String secondString = stringQueue.take();\n            System.out.println(\"First String: \" + firstString);\n            System.out.println(\"Second String: \" + secondString);\n\n            // Reading from the LinkedBlockingQueue\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n\n            // More unrelated operations\n            int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n            System.out.println(\"Sum of numbers: \" + sum);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    }
}