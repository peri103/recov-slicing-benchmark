{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n\n        System.out.println(\"Generated numbers: \" + numbers);\n\n        List<Integer> sortedNumbers = new ArrayList<>(numbers);\n        sortedNumbers.sort(Integer::compareTo);\n\n        System.out.println(\"Sorted numbers: \" + sortedNumbers);\n\n        int sum = sortedNumbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of sorted numbers: \" + sum);\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        // More additional code\n        List<String> words = List.of(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\");\n        words.stream()\n             .filter(word -> word.startsWith(\"b\"))\n             .forEach(System.out::println);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        long remainingTime = delayTime - elapsedTime;\n        return unit.convert(remainingTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.delayTime = delayInMillis;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        long remainingTime = delayTime - elapsedTime;\n        return unit.convert(remainingTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}