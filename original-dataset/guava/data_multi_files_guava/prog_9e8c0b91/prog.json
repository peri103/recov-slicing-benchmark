{
    "files": {
        "AtomicDoubleHandler.java": "import com.google.common.util.concurrent.AtomicDouble;\n\npublic class AtomicDoubleHandler {\n    private AtomicDouble atomicDouble = new AtomicDouble(0.0);\n\n    public void addValue(double value) {\n        /* write */ atomicDouble.addAndGet(value);\n    }\n\n    public double getValue() {\n        return atomicDouble.get();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Double> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(double grade) {\n        grades.add(grade);\n    }\n\n    public List<Double> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        AtomicDoubleHandler atomicDoubleHandler = new AtomicDoubleHandler();\n        atomicDoubleHandler.addValue(5.0);\n\n        Course course = new Course(\"Mathematics\");\n        Student student = new Student(\"Alice\");\n        student.addGrade(90.0);\n        student.addGrade(85.5);\n        course.enrollStudent(student);\n\n        // Print enrolled students\n        System.out.println(\"Enrolled Students in \" + course.getCourseName() + \":\");\n        for (Student enrolledStudent : course.getStudents()) {\n            System.out.println(\"Student Name: \" + enrolledStudent.getName());\n        }\n\n        /* read */ double value = atomicDoubleHandler.getValue();\n        System.out.println(\"Read Value from AtomicDouble: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.util.concurrent.AtomicDouble",
        "write_method": "addAndGet",
        "read_class": "com.google.common.util.concurrent.AtomicDouble",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.util.concurrent.AtomicDouble;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDouble atomicDouble = new AtomicDouble(0.0);\n        /* write */ double newValue = atomicDouble.addAndGet(5.0);\n        /* read */ double value = atomicDouble.get();\n        System.out.println(\"Written Value: \" + newValue);\n        System.out.println(\"Read Value: \" + value);\n    }\n}",
    "java_code_complex": "import com.google.common.util.concurrent.AtomicDouble;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDouble atomicDouble = new AtomicDouble(0.0);\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"initial\", 10);\n        map.put(\"increment\", 5);\n        \n        /* write */ double newValue = atomicDouble.addAndGet(5.0);\n        \n        int incrementValue = map.get(\"increment\");\n        int initialValue = map.get(\"initial\");\n        int finalValue = initialValue + incrementValue;\n\n        System.out.println(\"Final Value after increment: \" + finalValue);\n        \n        // Additional unrelated code for complexity\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Loop iteration: \" + (i + 1));\n        }\n\n        /* read */ double value = atomicDouble.get();\n        System.out.println(\"Written Value: \" + newValue);\n        System.out.println(\"Read Value: \" + value);\n        \n        // More unrelated complexity\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n    }\n}"
}