prog_type,prog_id,slicing_criteria,ground_truth,numbered_solution
compute,prog_b0ae56cf,23,15,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         int seed = 1234 * 4321 + 777 + 888 + 999;
6:         int bitToSet = (seed % 128) + 5; 
7:         for (int i = 0; i < 32; i++) {
8:             bitSet.set(i, (i % 2 == 0)); 
9:         }
10:         if ((bitToSet & 1) == 1) {
11:             bitSet.set(10);
12:             bitSet.clear(15);
13:             int temp = bitSet.cardinality(); 
14:         }
15:          bitSet.set(bitToSet);
16:         if (bitSet.cardinality() > 16) {
17:             bitSet.clear(20);
18:         } else {
19:             bitSet.set(25);
20:         }
21:         System.out.println(""Bit 5 set: "" + bitSet.get(5));
22:         System.out.println(""Bit 15 set: "" + bitSet.get(15));
23:          boolean ret = bitSet.get(bitToSet); 
24:         System.out.println(""Read bit "" + bitToSet + "": "" + ret);
25:     }
26: }
27: "
compute,prog_0c0fd017,20,13,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         deque.add(10);
6:         deque.add(20);
7:         if (Math.random() > 0.5) {
8:             deque.addFirst(5);
9:         } else {
10:             deque.addLast(15);
11:         }
12:         deque.removeFirst();
13:         if (deque.peekFirst() % 2 == 0) {
14:             deque.addLast(25);
15:         } else {
16:             deque.addLast(30);
17:         }
18:         int check = (int) (Math.random() * 100);
19:         deque.removeLast();
20:         int ret = deque.peekFirst();
21:         System.out.println(""Retrieved value: "" + ret);
22:     }
23: }
24: "
compute,prog_51f881a7,21,10,"1: import java.util.EnumMap;
2: import java.util.Random;
3: public class Main {
4:     enum Operation { A, B, C, D, E }
5:     public static void main(String[] args) {
6:         EnumMap<Operation, Integer> map = new EnumMap<>(Operation.class);
7:         map.put(Operation.A, 10);
8:         /* other operations */
9:         int misleadingFactor = new Random().nextInt();
10:          if (misleadingFactor % 2 == 0) {
11:             map.put(Operation.B, 20);
12:         } else {
13:             map.put(Operation.C, 30);
14:         }
15:         /* other operations */
16:         for (Operation op : Operation.values()) {
17:             map.put(op, map.getOrDefault(op, 0) + 1);
18:         }
19:         /* other unrelated operations */
20:         map.put(Operation.D, 50);
21:          int ret = map.get(Operation.B);
22:         System.out.println(""Retrieved value: "" + ret);
23:     }
24: }"
compute,prog_3ff60155,25,17,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<Integer, String> map = new TreeMap<>();
5:         map.put(10, ""A"");
6:         map.put(20, ""B"");
7:         map.put(30, ""C"");
8:         int conditionValue = 1024;
9:         int misleadingKey = 15;
10:         if (conditionValue % 2 == 0) {
11:             map.put(25, ""X"");
12:         } else {
13:             map.put(5, ""Y"");
14:         }
15:         map.put(misleadingKey, ""M"");
16:         if (conditionValue > 1000) {
17:             map.put(20, ""Z"");
18:         } else {
19:             map.put(20, ""W"");
20:         }
21:         map.remove(15);
22:         map.containsKey(10);
23:         String[] distractions = {""Don"", ""John"", ""Ron""};
24:         String unused = distractions[1];
25:         String ret = map.get(20);
26:         System.out.println(ret);
27:     }
28: }"
compute,prog_1ccb18ed,27,18,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         set.add(10);
6:         set.add(20);
7:         set.add(30);
8:         for (int i = 0; i < 3; i++) {
9:             set.add(i * 10 + 5);
10:             if (i % 2 == 0) {
11:                 set.remove(i * 10);
12:             }
13:         }
14:         int trigger = (int) (Math.random() * 10);
15:         if (trigger % 3 == 0) {
16:             set.add(trigger);
17:         }
18:         set.add(42);
19:         for (int i = 0; i < 5; i++) {
20:             set.add(i * 2 + 3);
21:             set.remove(i);
22:         }
23:         boolean found = false;
24:         int ret = -1;
25:         for (Integer val : set) {
26:             if (val == 42) {
27:                 ret = val;
28:                 found = true;
29:                 break;
30:             }
31:         }
32:         if (found) {
33:             System.out.println(""Value found: "" + ret);
34:         } else {
35:             System.out.println(""Value not found."");
36:         }
37:     }
38: }
39: "
compute,prog_42d24bbc,30,18,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
5:         /* other operations */
6:         int initialValue = 100, misleadingValue = 200;
7:         map.put(""initial"", initialValue);
8:         map.put(""misleading"", misleadingValue);
9:         /* other operations */
10:         String keyToRead = ""correctKey"", altKey = ""altKey"";
11:         map.put(keyToRead, 42);
12:         /* misleading computations */
13:         for (int i = 0; i < 5; i++) {
14:             map.put(""loopKey"" + i, i * i);
15:         }
16:         if (keyToRead.length() < 10) { 
17:             if (initialValue < misleadingValue) {
18:                  map.put(""correctKey"", 123);
19:             }
20:         } else {
21:             map.put(""fallback"", 789);
22:         }
23:         /* other operations */
24:         map.remove(""initial"");
25:         map.put(""dummy"", 555);
26:         map.put(altKey, map.get(""misleading"") * 3);
27:         if (map.containsKey(""dummy"")) {
28:             map.replace(""dummy"", 111);
29:         }
30:          int ret = map.get(""correctKey"");
31:         System.out.println(""Value at read point: "" + ret);
32:     }
33: }
34: "
compute,prog_b1efcbec,38,28,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         list.add(10);
6:         list.add(20);
7:         list.add(30);
8:         list.add(40);
9:         int complexVar = 987654321;
10:         /* other operations */
11:         complexVar = complexVar / 2 - list.size();
12:         list.add(complexVar % 100);
13:         if (complexVar % 5 == 0) {
14:             list.add(50);
15:         }
16:         /* Intermediate unrelated logic */
17:         for (int i = 0; i < list.size(); i++) {
18:             if (list.get(i) % 2 == 0) {
19:                 list.set(i, list.get(i) + 1);
20:             }
21:         }
22:         int misleadingIndex = (complexVar + 5) % 3;
23:         /* Modify but irrelevant to read */
24:         if (misleadingIndex < list.size()) {
25:             list.remove(misleadingIndex);
26:         }
27:         
28:         list.add(1, 99);
29:         String dummyString = ""test"";
30:         for (int i = 0; i < dummyString.length(); i++) {
31:             dummyString += i;
32:         }
33:         dummyString = dummyString.replace(""e"", ""a"");
34:         /* other operations */
35:         int m = 7;
36:         int n = 3;
37:         int p = m * n + misleadingIndex; 
38:          int ret = list.get(1);
39:         System.out.println(""Retrieved value: "" + ret); 
40:     }
41: }
42: "
compute,prog_a5b7f745,36,24,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
5:         list.add(0);
6:         list.add(3);
7:         list.add(6);
8:         list.add(9);
9:         list.add(12);
10:         int index = 2;
11:         int misleadingIndex = 1;
12:         int falseSign = misleadingIndex * 5 - 3;
13:         for (int i = 0; i < list.size(); i++) {
14:             if (i == falseSign) {
15:                 list.add(i * 2);
16:             }
17:         }
18:         if ((index + list.size()) % 3 == 0) {
19:             list.add(15);
20:         }
21:         int computation = falseSign * index;
22:         list.add(18);
23:         if (computation % 2 == 1) {
24:              list.set(index, 999);
25:         } else {
26:             list.set(index + 1, 888);
27:         }
28:         if (list.contains(999)) {
29:             list.remove((Integer) 15);
30:         }
31:         list.addAll(list);
32:         list.clear();
33:         list.add(21);
34:         list.add(22);
35:         list.add(23);
36:          int ret = list.get(0);
37:         System.out.println(""Read value: "" + ret);
38:     }
39: }"
compute,prog_b1250a55,28,23,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         list.add(10);
6:         list.add(20);
7:         list.add(30);
8:         int a = 42;
9:         int b = a * 2;
10:         list.add(b % list.size()); 
11:         int c = b / 2;
12:         if (c > 20) {
13:             list.removeFirst(); 
14:         }
15:         list.add(1, 100);
16:         int d = list.size();
17:         if (d % 2 == 0) {
18:             list.addLast(d);
19:         } else {
20:             list.addFirst(d);
21:         }
22:         if (d > 3) {
23:              list.add(1, 200);
24:         } else {
25:             list.set(1, 1000);
26:         }
27:         list.add(400);
28:          int ret = list.get(1);
29:         System.out.println(""The value at the read point is: "" + ret);
30:     }
31: }
32: "
compute,prog_c963282f,20,15,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> pq = new PriorityQueue<>();
5:         pq.add(100);
6:         pq.add(50);
7:         pq.add(150);
8:         if (Math.random() > 0.5) {
9:             pq.remove(50);  
10:         } else {
11:             pq.peek();  
12:         }
13:         int result = (int)(Math.pow(5, 3) + 42);
14:         result = result % 5;
15:          pq.add(25);  
16:         pq.add(200); 
17:         pq.add(75); 
18:         pq.poll();  
19:         pq.peek();  
20:          int ret = pq.peek();  
21:         System.out.println(""The read value is: "" + ret);
22:     }
23: }"
compute,prog_1b8fc575,21,12,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
5:         int unrelatedCalculation = 9999;
6:         list.add(unrelatedCalculation);
7:         for (int i = 0; i < 5; i++) {
8:             list.add(i * 100);
9:         }
10:         unrelatedCalculation += 12345;
11:         if (unrelatedCalculation % 2 == 0) {
12:             list.add(4242);
13:         } else {
14:             list.add(2424);
15:         }
16:         list.add(list.size(), 12345);
17:         unrelatedCalculation *= 2;
18:         if (list.contains(4242)) {
19:             unrelatedCalculation -= 5000;
20:         }
21:         int ret = list.get(5);
22:         System.out.println(""The value at the read point is: "" + ret);
23:     }
24: }"
compute,prog_42b2e5d3,23,12,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         list.add(42);
6:         list.add(96);
7:         list.add(33);
8:         int unrelatedCalculation = (list.getFirst() + list.size()) * 3;
9:         boolean flag = unrelatedCalculation % 2 == 0;
10:         int conditionValue = flag ? 5 : 7;
11:         if (conditionValue > 4) {
12:              list.add(11);
13:         } else {
14:             list.add(22);
15:         }
16:         list.addFirst(19);
17:         list.addLast(27);
18:         list.removeLast();
19:         list.add(3, 99);
20:         int misleadingIndex = unrelatedCalculation % list.size();
21:         list.set(misleadingIndex, 100);
22:         list.add(misleadingIndex, 101);
23:          int ret = list.get(conditionValue - 4);
24:     }
25: }
26: "
compute,prog_14349d63,34,20,"1: import java.util.WeakHashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, String> map = new WeakHashMap<>();
6:         map.put(1, ""One"");
7:         map.put(2, ""Two"");
8:         int a = 1234 * 4321;
9:         int b = a % 5;
10:         if (b == 0) {
11:             map.put(3, ""Three"");
12:         } else {
13:             map.remove(3);
14:             if (b % 2 == 0) {
15:                 map.put(4, ""Four"");
16:             }
17:         }
18:         map.put(5, ""Five"");
19:         map.remove(5);
20:          map.put(6, ""Six"");
21:         if (b > 2) {
22:             map.put(7, ""Seven"");
23:         } else {
24:             map.remove(1);
25:             map.put(1, ""OneUpdated"");
26:         }
27:         map.put(8, ""Eight"");
28:         String temp = map.get(2);
29:         map.remove(8);
30:         if (b < 3) {
31:             map.put(9, ""Nine"");
32:             map.remove(9);
33:         }
34:          String ret = map.containsKey(6) ? map.get(6) : ""Default"";
35:         System.out.println(ret); 
36:     }
37: }"
compute,prog_3bf54cd6,22,17,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
5:         map.put(10, ""Apple"");
6:         map.put(20, ""Banana"");
7:         map.put(30, ""Cherry"");
8:         int sum = map.entrySet().stream().mapToInt(e -> e.getKey()).sum();
9:         int oddKey = (sum % 2 == 1) ? 30 : 20;
10:         map.put(40, ""Date"");
11:         map.remove(10);
12:         map.replace(20, ""Elderberry"");
13:         int modifier = 5 * oddKey - sum + map.size();
14:         if (modifier > 400) {
15:             map.put(30, ""Fig"");
16:         } else {
17:             map.put(30, ""Grape"");
18:         }
19:         map.put(50, ""Honeydew"");
20:         map.merge(20, ""Iced Tea"", (oldValue, newValue) -> oldValue + "" & "" + newValue);
21:         map.computeIfPresent(60, (k, v) -> v.concat(""Jambul""));
22:         String ret = map.get(30);
23:         System.out.println(""Retrieved value: "" + ret);
24:     }
25: }
26: "
compute,prog_f85bb410,30,21,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         list.add(100);
6:         list.add(200);
7:         list.add(300);
8:         int x = 10;
9:         int y = 20;
10:         int z = x * y + 50;
11:         if (z % 2 == 0) {
12:             list.add(400);
13:         } else {
14:             list.add(500);
15:         }
16:         int temp = z / 2 - 5;
17:         for (int i = 0; i < 3; i++) {
18:             list.add(i + 10);
19:         }
20:         if (temp > 10) {
21:              list.set(1, 250); 
22:         }
23:         list.add(600);
24:         list.add(700);
25:         list.remove(0);
26:         list.set(0, 1234);
27:         list.add(800);
28:         list.add(900);
29:         list.remove(list.size() - 1);
30:          int ret = list.get(1);
31:         System.out.println(""Read value: "" + ret);
32:     }
33: }"
compute,prog_691a7580,27,13,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         int x = 2023;
6:         int y = x * 5;
7:         int z = y - 1000;
8:         stack.push(42);
9:         stack.push(27);
10:         if (z % 2 == 0) {
11:             stack.push(99); 
12:         } else {
13:              stack.push(13); 
14:         }
15:         int sum = 0;
16:         for (int i = 0; i < stack.size(); i++) {
17:             sum += stack.get(i);
18:         }
19:         stack.push(sum % 10);
20:         int a = 50;
21:         int b = a / 2;
22:         int c = b + 3;
23:         stack.push(3);
24:         stack.push(7);
25:         stack.push(21);
26:         stack.pop();
27:          int ret = stack.get(2);
28:         System.out.println(""Retrieved value: "" + ret);  
29:     }
30: }"
compute,prog_f555c0fd,25,18,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>();
5:         /* other operations */
6:         int rand1 = 123;
7:         int rand2 = 456;
8:         int temp = rand1 + rand2 * 2;
9:         /* misleading operations that do not affect read point */
10:         for (int i = 0; i < 5; i++) {
11:             map.put(i, i * i);
12:         }
13:         /* other operations with the same API as the read point */
14:         map.get(0);
15:         map.get(4);
16:         /* complex conditional logic */
17:         if (temp % 2 == 0) {
18:              map.put(1, 99); 
19:         } else {
20:             map.put(1, 50);
21:         }
22:         /* unrelated write operations */
23:         map.put(2, 100);
24:         map.put(3, 200);
25:          int ret = map.get(1);
26:         System.out.println(""The retrieved value is "" + ret);
27:     }
28: }"
compute,prog_ee639018,26,10,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<String, Integer> table = new Hashtable<>();
5:         table.put(""A"", 10);
6:         table.put(""B"", 20);
7:         int x = 100;
8:         x += 200;
9:         if (x > 50) {
10:              table.put(""C"", 30);
11:         } else {
12:             table.put(""D"", 40);
13:         }
14:         table.put(""E"", 50);
15:         table.computeIfPresent(""A"", (key, val) -> val + 5);
16:         table.remove(""B"");
17:         int sum = 0;
18:         for (Integer value : table.values()) {
19:             sum += value;
20:         }
21:         if (x % 2 == 0) {
22:             table.put(""F"", sum);
23:         } else {
24:             table.put(""G"", sum / 2);
25:         }
26:          int ret = table.get(""C"");
27:         System.out.println(""Retrieved value: "" + ret);
28:     }
29: }"
compute,prog_324bff48,19,13,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet(5);
5:         int rand = 13579;
6:         int calculation = rand * 2 / 3 + 7;
7:         for (int i = 0; i < 5; i++) {
8:             bitSet.set(i, i % 2 == 0);
9:         }
10:         if (calculation % 2 == 0) {
11:             bitSet.set(1, false); 
12:         } else {
13:              bitSet.set(2);
14:         }
15:         if (bitSet.cardinality() > 2) {
16:             bitSet.clear(3);
17:         }
18:         bitSet.flip(4);
19:          boolean ret = bitSet.get(2);
20:         System.out.println(""Value at bit 2: "" + ret);
21:     }
22: }
23: "
compute,prog_19596589,23,16,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<Integer, Integer> map = new TreeMap<>();
5:         map.put(1, 1000);
6:         map.put(2, 2000);
7:         map.put(3, 3000);
8:         int rand = (int) (Math.random() * 100);
9:         if (rand % 2 == 0) {
10:             map.put(4, 4000);
11:         } else {
12:             map.put(5, 5000);
13:         }
14:         map.put(6, 6000);
15:         if (rand % 3 == 0) {
16:              map.put(2, 2100);
17:         } else {
18:             map.put(3, 3100);
19:         }
20:         map.put(7, 7000);
21:         map.remove(5);
22:         map.put(8, 8000);
23:          int ret = map.get(2);
24:         System.out.println(""Value retrieved: "" + ret);
25:     }
26: }
27: "
compute,prog_0cb23a4c,24,12,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         for (int i = 0; i < 10; i++) {
6:             vector.add(i * i);
7:         }
8:         int x = complexCalculation();
9:         if (x % 2 == 0) {
10:             vector.add(100);
11:         } else {
12:             vector.add(200);
13:         }
14:         vector.add(300);
15:         if (vector.size() > 5) {
16:             vector.set(5, vector.get(5) * 2);
17:         }
18:         int dummy = vector.get(3);
19:         dummy *= 10;
20:         vector.add(42);
21:         vector.remove(2);
22:         vector.set(1, vector.get(1) + 5);
23:         vector.add(500);
24:         int ret = vector.get(10);
25:         System.out.println(""Retrieved value: "" + ret);
26:     }
27:     private static int complexCalculation() {
28:         return (int) (Math.random() * 100) + 1;
29:     }
30: }"
compute,prog_fe6f5029,27,17,"1: import java.util.EnumMap;
2: enum Color {
3:     RED, GREEN, BLUE, YELLOW
4: }
5: public class Main {
6:     public static void main(String[] args) {
7:         EnumMap<Color, Integer> colorMap = new EnumMap<>(Color.class);
8:         colorMap.put(Color.RED, 10);
9:         colorMap.put(Color.GREEN, 20);
10:         int computation = (int) (Math.random() * 1000);
11:         if (computation % 2 == 0) {
12:             colorMap.put(Color.BLUE, 30);
13:         } else {
14:             colorMap.put(Color.YELLOW, 40);
15:         }
16:         
17:         if (computation < 500) {
18:             colorMap.put(Color.RED, 100);
19:         }
20:         computation += 50;
21:         if (computation > 1030) {
22:             colorMap.put(Color.GREEN, 200);
23:         } else if (computation > 1050) {
24:             colorMap.put(Color.YELLOW, 300);
25:         }
26:         
27:         int ret = colorMap.get(Color.RED);
28:         System.out.println(""Retrieved value: "" + ret);
29:     }
30: }"
compute,prog_27602ad5,30,18,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         set.add(10);
6:         set.add(20);
7:         set.add(30);
8:         set.add(40);
9:         int flag = (int) (Math.random() * 2);
10:         for (int i = 5; i < 10; i++) {
11:             set.add(i * 10 + flag);
12:         }
13:         int unrelatedVar = set.size() * 3 + 7;
14:         if (unrelatedVar % 2 == 0) {
15:             set.add(50);
16:         }
17:         if (flag == 1) {
18:              set.add(25);
19:         } else {
20:             set.add(35);
21:         }
22:         /* Simulate many operations that don't affect the relevant outcome */
23:         for (int num : set) {
24:             int tempVar = num * 5 - unrelatedVar;
25:             if (tempVar % 3 == 0) {
26:                 set.remove(num);
27:                 set.add(tempVar);
28:             }
29:         }
30:          boolean contains25 = set.contains(25);
31:         System.out.println(""Contains 25: "" + contains25);
32:     }
33: }
34: "
compute,prog_8529ce91,27,22,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
5:         /* other operations */
6:         String key1 = new String(""A"");
7:         String key2 = new String(""B"");
8:         map.put(key1, 10);
9:         map.put(key2, 20);
10:         /* other operations */
11:         for (String key : map.keySet()) {
12:             int temp = map.get(key);
13:             temp *= 2; 
14:         }
15:         /* other operations */
16:         int x = map.containsKey(new String(""A"")) ? 1 : 2;
17:         if (x == 1) {
18:             map.put(new String(""C""), 30);
19:         } else {
20:             map.put(new String(""D""), 40);
21:         }
22:          map.put(key1, 100);
23:         /* other operations */
24:         map.put(new String(""E""), 50);
25:         map.put(new String(""F""), 60);
26:         /* other operations */
27:          int ret = map.get(key1);
28:         System.out.println(""Read value: "" + ret);
29:     }
30: }"
compute,prog_cc518f05,23,10,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         set.add(10); 
6:         set.add(20);
7:         set.add(30);
8:         int misleadingVar = 42;
9:         if (misleadingVar % 2 == 0) {
10:              set.add(25);
11:         }
12:         misleadingVar += 1;
13:         set.remove(20); 
14:         set.add(35); 
15:         int unrelatedSum = 0;
16:         for (int i = 0; i < 10; i++) {
17:             unrelatedSum += i;
18:             set.add(i); 
19:         }
20:         if (unrelatedSum > 20) {
21:             set.add(40);
22:         }
23:          boolean exists = set.contains(25);
24:         System.out.println(""Does 25 exist in the set? "" + exists);
25:     }
26: }
27: "
compute,prog_e519ec0f,30,22,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         set.add(10);
6:         set.add(20);
7:         int rand = (int) (Math.random() * 100);
8:         int bamboozle = 0;
9:         for (int i = 0; i < rand; i++) {
10:             set.add(i % 100);
11:             if ((i & 1) == 0) {
12:                 bamboozle += i;
13:             }
14:         }
15:         if (bamboozle % 2 == 0) {
16:             set.add(30);
17:         } else {
18:             set.add(40);
19:         }
20:         set.add(50);
21:         set.add(60);
22:          set.add(70);
23:         int trap = 3 * rand;
24:         if (trap > 150) {
25:             set.add(80);
26:             set.remove(30); 
27:         }
28:         System.out.println(set);
29:         Integer[] array = set.toArray(new Integer[0]);
30:          int ret = array[3];
31:         System.out.println(""Retrieved Value: "" + ret);
32:     }
33: }
34: "
compute,prog_1067a074,25,15,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, String> table = new Hashtable<>();
5:         /* unrelated operations */
6:         for (int i = 0; i < 5; i++) {
7:             table.put(i, ""Value"" + i);
8:         }
9:         /* unrelated operations */
10:         int trigger = 42;
11:         if (table.size() > 3) {
12:             trigger += 1; 
13:         }
14:         if (trigger % 2 == 1) {
15:              table.put(99, ""CorrectValue"");
16:         } else {
17:             table.put(99, ""WrongValue"");
18:         }
19:         /* unrelated operations */
20:         table.put(6, ""AnotherValue6"");
21:         table.remove(2); 
22:         /* unrelated operations */
23:         String mislead1 = table.get(3);
24:         String mislead2 = table.get(6);
25:          String ret = table.get(99);
26:         System.out.println(""Retrieved Value: "" + ret);
27:     }
28: }"
compute,prog_f4b6a9d8,21,15,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         bitSet.set(3);
6:         bitSet.set(5);
7:         /* other operations */
8:         int x = 1929 * 3 + 4567;
9:         /* other operations */
10:         int index = (x / 2) % 10;
11:         /* other operations */
12:         if (index % 2 == 0) {
13:             bitSet.set(2);
14:         } else {
15:              bitSet.set(1);
16:         }
17:         /* other operations */
18:         bitSet.flip(4); 
19:         bitSet.set(6);
20:         bitSet.clear(3); 
21:          boolean ret = bitSet.get(1);
22:         System.out.println(ret);
23:     }
24: }"
compute,prog_ce8458e4,34,20,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         /* other operations */
6:         int rand = 5435 * 3456 + 123 + 456 + 789;
7:         /* other operations */
8:         int index = (rand % 100);
9:         /* other operations */
10:         boolean confusingFlag = (index % 2 == 0);
11:         if (confusingFlag) {
12:             for (int i = 0; i < index; i++) {
13:                 if (i % 2 == 0) {
14:                     bitSet.set(i, false);
15:                 }
16:             }
17:         } else {
18:             bitSet.set(index - 1, false);
19:         }
20:          bitSet.set(index, true);
21:         /* other operations */
22:         bitSet.and(BitSet.valueOf(new long[] {12312L, 123123L}));
23:         if (confusingFlag && rand % 5 == 0) {
24:             bitSet.flip(index);
25:         }
26:         bitSet.clear();
27:         bitSet.set(0);
28:         boolean checkPoint = rand % 10 > 5;
29:         if (checkPoint) {
30:             bitSet.set(index - 2, true);
31:         } else {
32:             bitSet.set(index + 2, false);
33:         }
34:          boolean ret = bitSet.get(index);
35:         System.out.println(""The retrieved value is: "" + ret);
36:     }
37: }
38: "
compute,prog_d19bfac5,19,16,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         /* other operations */
6:         int rand = 1234 * 4321 + 777 + 888 + 999;
7:         /* other operations */
8:         int index = (rand / 100) % 10; 
9:         /* other operations */
10:         bitSet.set(0, false);  
11:         bitSet.set(1, true);   
12:         /* conditional execution */
13:         if (index % 2 == 0) {
14:             /* obfuscation */ bitSet.flip(index % 10);  
15:         } else {
16:              bitSet.set(1);
17:         }
18:         /* other operations */
19:          boolean ret = bitSet.get(1);
20:     }
21: }
22: "
compute,prog_08362709,24,14,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> set = new TreeSet<>();
5:         set.add(100);
6:         set.add(200);
7:         set.add(300);
8:         /* other operations */
9:         int a = 50, b = 100;
10:         /* other operations */
11:         boolean decision = (a + b) % 2 == 0;
12:         /* misleading write */ set.add(400);
13:         /* Internal check */ if (decision) {
14:              set.add(150);
15:         } else {
16:             set.add(250);
17:         }
18:         /* other operations */
19:         set.add(50);
20:         set.remove(50);
21:         set.remove(400);
22:         set.add(200);  
23:         set.add(300);  
24:          Integer ret = set.ceiling(150);
25:         System.out.println(""Value retrieved: "" + ret);
26:     }
27: }
28: "
compute,prog_aca26c03,27,19,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         for (int i = 0; i < 10; i++) {
6:             set.add(i * 10);
7:         }
8:         int x = 42;
9:         int y = x * 2 + 1;
10:         if (y % 3 == 0) {
11:             set.add(30);
12:         } else {
13:             set.add(25);
14:         }
15:         set.add(999);
16:         set.remove(999);
17:         boolean shouldWrite = (y % 2 == 0) || set.contains(25);
18:         if (shouldWrite) {
19:              set.add(15);
20:         }
21:         set.remove(20);
22:         set.add(50);
23:         Integer ret = null;
24:         int index = 0;
25:         for (Integer val : set) {
26:             if (index == 1) {
27:                  ret = val;
28:                 break;
29:             }
30:             index++;
31:         }
32:         System.out.println(""Retrieved value: "" + ret);
33:     }
34: }"
compute,prog_f7dc7df5,29,20,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<Integer, String> map = new HashMap<>();
5:         int secretKey = 42;
6:         for (int i = 0; i < 100; i++) {
7:             map.put(i, ""Value"" + i);
8:         }
9:         int decoyKey = 99;
10:         if ((long)secretKey * 3 % 10 < 7) {
11:             map.put(secretKey, ""TargetValue"");
12:         } else {
13:             map.put(secretKey, ""WrongValue"");
14:         }
15:         int throwaway = secretKey * 7 + decoyKey;
16:         map.remove(decoyKey);
17:         map.put(decoyKey, ""Decoy"");
18:         map.put(77, ""Irrelevant"");
19:         if ((throwaway % 5 == 3) || (decoyKey < 50)) {
20:              map.put(secretKey, ""CorrectValue"");
21:         } else {
22:             map.put(88, ""Dummy"");
23:         }
24:         map.putIfAbsent(200, ""NewValue"");
25:         if (map.containsKey(50)) {
26:             map.remove(50);
27:         }
28:         map.forEach((k, v) -> System.out.println(k + "": "" + v));
29:          String ret = map.get(secretKey);
30:         System.out.println(""Retrieved: "" + ret);
31:     }
32: }
33: "
compute,prog_8e851a77,30,19,"1: import java.util.TreeSet;
2: import java.util.Set;
3: public class Main {
4:     public static void main(String[] args) {
5:         Set<Integer> set = new TreeSet<>();
6:         set.add(5);
7:         set.add(10);
8:         set.add(15);
9:         int rand = 1234 * 4321 + 777 + 888 + 999;
10:         int k = (rand % 10) + 5;
11:         if (k > 11500) {
12:             set.add(20);
13:         } else {
14:             set.add(25);
15:         }
16:         set.remove(15);
17:         set.add(30);
18:         if (k % 2 == 1) {
19:              set.add(17);
20:         } else {
21:             set.add(18);
22:         }
23:         set.add(22);
24:         set.add(33);
25:         if (set.contains(33)) {
26:             set.add(44);
27:         } else {
28:             set.add(55);
29:         }
30:          Integer ret = set.higher(15);
31:         System.out.println(""Read value: "" + ret);
32:     }
33: }"
compute,prog_c52691b2,26,23,"1: import java.util.ArrayList;
2: import java.util.List;
3: import java.util.Random;
4: public class Main {
5:     public static void main(String[] args) {
6:         List<Integer> list = new ArrayList<>();
7:         Random rand = new Random();
8:         /* Initial population of the list with random elements */
9:         for (int i = 0; i < 10; i++) {
10:             list.add(rand.nextInt(100));
11:         }
12:         for (int i = 0; i < 5; i++) {
13:             list.add(i * 2);
14:         }
15:         /* Other operations to confuse static analysis */
16:         int indexToWrite = rand.nextInt(100) % list.size();
17:         int irrelevantIndex = indexToWrite;
18:         if (indexToWrite % 3 == 0) {
19:             list.add(1, 1001);
20:         } else {
21:             list.add(2, 2002);
22:         }
23:          list.set(1, 123);
24:         int temporaryValue = list.get(indexToWrite);
25:         list.add(rand.nextInt(100));
26:          int ret = list.get(1); 
27:         System.out.println(""Value of ret: "" + ret);
28:     }
29: }"
compute,prog_8c2b4510,24,18,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         int seed = 1234 * 4321 + 777 + 888 + 999;
6:         int ambiguousNumber = seed % 10; 
7:         set.add(5); 
8:         set.add(10);
9:         set.add(15);
10:         for (int i = 0; i < ambiguousNumber; i++) {
11:             set.add(i * 3); 
12:         }
13:         if (set.size() > 20) { 
14:             set.add(20);
15:         }
16:         ambiguousNumber += 1; 
17:         if (ambiguousNumber == 5) {
18:              set.add(25); 
19:         } else {
20:             set.add(30);
21:         }
22:         set.add(10); 
23:         set.remove(10); 
24:          Integer ret = null;
25:         for (Integer num : set) {
26:             if (num == 25) {
27:                 ret = num;
28:                 break;
29:             }
30:         }
31:         System.out.println(""Retrieved value: "" + ret); 
32:     }
33: }
34: "
compute,prog_1de047df,15,10,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
5:         int seed = 1234 * 4321 + 777 + 888 + 999;
6:         int keySelector = seed % 10;
7:         map.put(""initial"", 0);
8:         map.put(""dummy"", 42);
9:         if (keySelector % 2 == 0) {
10:             map.put(""target"", 100);
11:         } else if (keySelector % 5 == 0) {
12:             map.put(""target"", 999);
13:         }
14:         map.put(""extra"", 33);
15:         int ret = map.get(""target"");
16:         System.out.println(""Result: "" + ret);
17:     }
18: }
19: "
compute,prog_cc5ad98c,29,22,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> set = new TreeSet<>();
5:         set.add(5);
6:         set.add(10);
7:         set.add(15);
8:         int result = set.first();
9:         /* other operations */
10:         int random1 = 123;
11:         double random2 = 456.78;
12:         /* other operations */
13:         boolean condition = random1 > 100 && random2 < 500.0;
14:         /* misleading modification */
15:         random1 = random1 * 2 - 50;
16:         /* misleading modification */
17:         set.add(random1 % 10);
18:         /* misleading modification */
19:         set.remove(5);
20:         /* condition affects whether write point executes */
21:         if (condition) {
22:              set.add(8);
23:         } else {
24:             set.add(2);
25:         }
26:         /* other operations */
27:         set.remove(15);
28:         /* other operations */
29:          result = set.first();
30:         System.out.println(""The result is: "" + result);
31:     }
32: }
33: "
compute,prog_b9e8e505,19,12,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<String, Integer> table = new Hashtable<>();
5:         table.put(""one"", 1);
6:         table.put(""two"", 2);
7:         table.put(""three"", 3);
8:         int someNumber = 5;
9:         table.put(""four"", 4 + someNumber); 
10:         someNumber *= 2; 
11:         if (someNumber % 2 == 0) {
12:              table.put(""readKey"", 42); 
13:         } else {
14:             table.put(""randomKey"", 100); 
15:         }
16:         int anotherCalculation = (someNumber / 2) * 3; 
17:         table.put(""five"", 5);
18:         table.put(""superfluous"", someNumber + anotherCalculation);
19:          int ret = table.get(""readKey"");
20:         System.out.println(""Retrieved Value: "" + ret);
21:     }
22: }
23: "
compute,prog_72c23724,19,10,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         for (int i = 0; i < 5; i++) {
6:             stack.push(i);
7:         }
8:         int conditionVar = calculateConditionValue(stack);
9:         if (conditionVar > 10) {
10:              stack.push(-1);
11:         } else {
12:             stack.push(9999);
13:         }
14:         stack.push(100);
15:         stack.pop();
16:         stack.push(200);
17:         stack.push(300);
18:         Integer auxiliary = stack.get(3);
19:          int ret = stack.get(5);
20:         System.out.println(""Value at read point: "" + ret);
21:     }
22:     public static int calculateConditionValue(Stack<Integer> stack) {
23:         int sum = 0;
24:         for (int value : stack) {
25:             sum += value;
26:         }
27:         return sum % 15;
28:     }
29: }
30: "
compute,prog_7cbd724a,28,19,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<String, Integer> map = new TreeMap<>();
5:         map.put(""one"", 1);
6:         map.put(""two"", 2);
7:         map.put(""three"", 3);
8:         map.put(""four"", 4);
9:         /* operations unrelated to read point */
10:         int calculation = (123 * 3) - (500 / 2) + 1234;
11:         boolean condition = calculation % 4 == 0;
12:         /* unrelated operations */
13:         map.put(""five"", 5);
14:         /* misleading modification that does not affect read point */
15:         if (!condition) {
16:             map.put(""two"", 10);  
17:         }
18:         if (condition) {
19:              map.put(""special"", 7); 
20:         } else {
21:             map.put(""special"", 9); 
22:         }
23:         /* further non-relevant operations */
24:         int sum = 0;
25:         for (String key : map.keySet()) {
26:             sum += map.get(key);
27:         }
28:          int ret = map.get(""special"");
29:         System.out.println(""Read value: "" + ret); 
30:     }
31: }
32: "
compute,prog_638f1f8f,28,19,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         set.add(10);
6:         set.add(20);
7:         for (int i = 0; i < 5; i++) {
8:             set.add(i);
9:         }
10:         boolean condition = (Math.random() > 0.5);
11:         int temp = 0;
12:         if (condition) {
13:             temp = 5;
14:         } else {
15:             temp = 10;
16:         }
17:         set.add(30);
18:         if (temp + 10 > 15) {
19:              set.add(25);
20:         }
21:         int sum = 0;
22:         for (Integer num : set) {
23:             sum += num;
24:         }
25:         set.add(40);
26:         int index = 0;
27:         Integer[] array = set.toArray(new Integer[0]);
28:          int ret = array[2];
29:         System.out.println(""Read value: "" + ret);
30:     }
31: }"
compute,prog_019ffb10,22,10,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         stack.push(5);
6:         stack.push(10);
7:         stack.push(15);
8:         int temp = stack.pop();
9:         stack.push(temp * 2);
10:          stack.push(20);
11:         if (temp > 8) {
12:             for(int i = 0; i < 3; i++) {
13:                 stack.push(i);
14:             }
15:         } else {
16:             stack.pop();
17:         }
18:         stack.push(100);
19:         stack.push(200);
20:         stack.pop();
21:         stack.push(300);
22:          int ret = stack.get(stack.indexOf(20));
23:         System.out.println(ret);
24:     }
25: }"
compute,prog_9f268cea,23,17,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<Integer, String> map = new HashMap<>();
5:         map.put(0, ""zero"");
6:         map.put(1, ""one"");
7:         map.put(2, ""two"");
8:         map.put(3, ""three"");
9:         map.put(4, ""four"");
10:         int magicNumber = (int) (Math.random() * 10);
11:         for (int i = 0; i < magicNumber; i++) {
12:             map.put(i + 10, ""extra"");
13:         }
14:         if (magicNumber % 2 == 0) {
15:             map.put(5, ""five"");
16:         } else {
17:              map.put(6, ""six"");
18:         }
19:         map.remove(0);
20:         map.remove(magicNumber);
21:         map.put(100, ""hundred""); 
22:         map.put(101, ""hundred_one"");
23:          String ret = map.get(6);
24:         System.out.println(""Retrieved value: "" + ret);
25:     }
26: }
27: "
compute,prog_04b018c0,39,13,"1: import java.util.ArrayDeque;
2: import java.util.Deque;
3: public class Main {
4:     public static void main(String[] args) {
5:         Deque<Integer> deque = new ArrayDeque<>();
6:         deque.offer(42);
7:         deque.offer(25);
8:         deque.addLast(7);
9:         deque.offer(30);
10:         int mysteryNumber = 3;
11:         boolean flag = false;
12:         deque.poll();
13:         deque.offer(19);
14:         if (mysteryNumber * 2 == 6) {
15:             deque.poll();
16:             flag = true;
17:         }
18:         for (int i = 0; i < 3; i++) {
19:             if (i == 2) {
20:                 deque.offer(10);
21:             } else {
22:                 deque.poll();
23:             }
24:         }
25:         if (flag || mysteryNumber > 5) {
26:             deque.addLast(5);
27:         } else {
28:             deque.addLast(99);
29:         }
30:         deque.offerFirst(6);
31:         deque.addLast(11);
32:         deque.pollFirst();
33:         deque.offer(18);
34:         deque.addFirst(21);
35:         deque.pollLast();
36:         if (deque.size() > 4) {
37:             deque.poll();
38:         }
39:         int ret = deque.peek();
40:         System.out.println(""Retrieved value: "" + ret);
41:     }
42: }
43: "
compute,prog_f65f8ac8,22,13,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
5:         map.put(3, ""three"");
6:         map.put(5, ""five"");
7:         /* unrelated operations */
8:         int x = 10;
9:         int y = 20;
10:         int z = x + y;
11:         boolean condition = (z % 2 == 0);
12:         if (condition) {
13:              map.put(1, ""one"");
14:         } else {
15:             map.put(2, ""two"");
16:         }
17:         map.put(4, ""four"");
18:         map.remove(5);
19:         map.put(5, ""five-reinsert"");
20:         map.put(6, ""six"");
21:         String temp = map.get(4);
22:          String ret = map.get(1);
23:         System.out.println(ret); 
24:     }
25: }"
compute,prog_7ed51e78,31,24,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         for (int i = 0; i < 10; i++) {
6:             set.add(i);
7:         }
8:         set.remove(5);
9:         set.add(15);
10:         set.contains(8);
11:         int mysteryNumber = (17 * 4 * 22) % 9;
12:         if (mysteryNumber > 5) {
13:             set.add(20);
14:         }
15:         if (set.contains(3)) {
16:             set.remove(3);
17:             set.add(16);
18:         }
19:         int importantValue = 22 - (3 * 7);
20:         if (importantValue % 4 == 0) {
21:             set.add(25);
22:         }
23:         if (set.contains(15)) {
24:              set.add(12); 
25:         }
26:         set.remove(16);
27:         set.add(35);
28:         set.remove(20);
29:         int key = 12; 
30:         if (set.contains(35) && !set.contains(22)) {
31:             boolean ret = set.contains(key); 
32:             System.out.println(""Contains 12: "" + ret);
33:         }
34:     }
35: }"
compute,prog_497fbe94,42,20,"1: import java.util.LinkedHashSet;
2: import java.util.Iterator;
3: public class Main {
4:     public static void main(String[] args) {
5:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
6:         for (int i = 1; i <= 10; i++) {
7:             set.add(i);
8:         }
9:         set.remove(5);
10:         set.add(6);
11:         set.remove(7);
12:         set.add(7);
13:         int mysteryIndex = 0;
14:         for (Integer num : set) {
15:             if (num == 2) {
16:                 mysteryIndex = num * 3;
17:             }
18:         }
19:         if (mysteryIndex % 2 == 0) {
20:              set.add(11);
21:         } else {
22:             set.add(12);
23:         }
24:         set.add(15);
25:         set.remove(3);
26:         set.add(14);
27:         set.remove(14);
28:         int readIndex = -1;
29:         for (Iterator<Integer> it = set.iterator(); it.hasNext(); ) {
30:             readIndex++;
31:             int val = it.next();
32:             if (val == 11) break;
33:         }
34:         int value = -1, currentIndex = -1;
35:         for (Integer num : set) {
36:             currentIndex++;
37:             if (currentIndex == readIndex) {
38:                 value = num;
39:                 break;
40:             }
41:         }
42:          int ret = value;
43:         System.out.println(ret);
44:     }
45: }"
compute,prog_982d2f9d,30,22,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         for (int i = 0; i < 10; i++) {
6:             deque.add(i);
7:         }
8:         int misleadingVar = 0;
9:         for (int i = 0; i < 5; i++) {
10:             misleadingVar += i;
11:         }
12:         if (misleadingVar > 10) {
13:             deque.addFirst(99);
14:         }
15:         int operation = (misleadingVar * 5) / 10;
16:         boolean flag = (operation % 2 == 0);
17:         if (flag) {
18:             deque.addLast(100);
19:         } else {
20:             deque.addFirst(101);
21:         }
22:          deque.add(42);
23:         for (int i = 0; i < 3; i++) {
24:             deque.poll();
25:             deque.offer(50 + i);
26:         }
27:         for (int num : deque) {
28:             System.out.println(""Intermediate Value: "" + num);
29:         }
30:          int ret = deque.peek();
31:         System.out.println(""Read Value: "" + ret);
32:     }
33: }"
compute,prog_2ac2db19,29,14,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         stack.push(100);
6:         stack.push(200);
7:         stack.push(300);
8:         int x = (int) Math.pow(2, 3);
9:         int y = 55;
10:         int z = x * 3 + y - 200;
11:         if (z % 2 == 0) {
12:             stack.push(400);
13:         } else {
14:             stack.push(500);
15:         }
16:         stack.push(600);
17:         int temp = stack.peek() + 1000;
18:         stack.pop();
19:         stack.push(temp);
20:         stack.push(700);
21:         stack.pop();
22:         if (temp > 1500) {
23:             stack.push(800);
24:             stack.pop();
25:         } else {
26:             stack.push(900);
27:             stack.pop();
28:         }
29:         int ret = stack.get(3);
30:         System.out.println(""Retrieved value: "" + ret);
31:     }
32: }"
compute,prog_882c601a,23,15,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<Integer, String> map = new HashMap<>();
5:         map.put(1, ""one"");
6:         map.put(2, ""two"");
7:         map.put(3, ""three"");
8:         int irrelevantCalculation = (100 + 200) * 3;
9:         map.put(4, ""four"");
10:         if (irrelevantCalculation % 2 == 0) {
11:             map.put(5, ""five"");
12:         }
13:         String confusingValue = map.get(3);
14:         boolean randomCondition = confusingValue.equals(""three"");
15:          if (randomCondition) {
16:             map.put(6, ""six"");
17:         }
18:         map.put(7, ""seven"");
19:         map.put(8, ""eight"");
20:         if (map.containsKey(7)) {
21:             map.put(9, ""nine"");
22:         }
23:          String ret = map.get(6);
24:         System.out.println(""The retrieved value is: "" + ret);
25:     }
26: }"
compute,prog_46f03bac,23,13,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, String> table = new Hashtable<>();
5:         int misleadingCondition = 42;
6:         int bogusIndex = (misleadingCondition * 3) % 2;
7:         table.put(0, ""apple"");
8:         table.put(1, ""banana"");
9:         table.put(2, ""cherry"");
10:         for(int i = 0; i < 5; i++) {
11:             table.put(i + 3, ""fruit"" + i);
12:         }
13:          table.put(bogusIndex, ""date""); 
14:         boolean flag = misleadingCondition > 50;
15:         if (!flag) {
16:             table.put(0, ""elderberry"");
17:         } else {
18:             table.replace(2, ""fig"");
19:         }
20:         if (flag) {
21:             System.out.println(""Correct logic path executed"");
22:         }
23:          String ret = table.get(0); 
24:         System.out.println(""Value fetched: "" + ret);
25:     }
26: }
27: "
compute,prog_974a66a4,23,19,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
5:         /* other operations */
6:         int magicNumber = 1234 * 4321 + 777 + 888 + 999;
7:         /* other operations */
8:         int index = (magicNumber % 10) + 1;
9:         /* other operations */
10:         map.put(0, ""zero"");
11:         map.put(1, ""one"");
12:         map.put(2, ""two"");
13:         /* misleading operations */
14:         if (index % 2 == 0) {
15:             map.put(1, ""two"") /* this does not affect ret */;
16:         } else {
17:             map.put(3, ""three"") /* this does not affect ret */;
18:         }
19:          map.put(4, ""four""); 
20:         /* other operations */
21:         int irrelevantIndex = (magicNumber * 3) % 5;
22:         map.put(irrelevantIndex, ""not affecting ret"");
23:          String ret = map.get(4);
24:         System.out.println(ret);
25:     }
26: }"
compute,prog_3818d5b3,20,10,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         int x = 5;
6:         for (int i = 0; i < 10; i++) {
7:             set.add(i * 2);
8:         }
9:         int conditionalValue = (x > 3) ? 10 : 20;
10:          set.add(42);
11:         if (conditionalValue == 10) {
12:             set.remove(42);
13:             set.add(42);
14:         }
15:         set.remove(21);
16:         set.add(84);
17:         if (set.contains(84)) {
18:             set.add(21);
19:         }
20:          boolean ret = set.contains(42);
21:         System.out.println(""Does set contain 42? "" + ret);
22:     }
23: }
24: "
compute,prog_a764114b,20,15,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, String> table = new Hashtable<>();
5:         table.put(10, ""Hello"");
6:         table.put(20, ""World"");
7:         table.put(30, ""Java"");
8:         int index = (10 * 5) - 40 + 2; 
9:         if (index % 2 == 0) {
10:             table.put(15, ""NotAffectingValue""); 
11:             table.put(12, ""ConfusingValue""); 
12:         } else {
13:             table.put(25, ""StillDoesNotAffect"");
14:         }
15:          table.put(12, ""AffectingValue"");
16:         table.put(13, ""AnotherValue"");
17:         table.remove(30); 
18:         String unrelatedRead = table.get(15);
19:         table.put(14, unrelatedRead);
20:          String ret = table.get(12);
21:         System.out.println(""Retrieved value: "" + ret);
22:     }
23: }
24: "
compute,prog_9681d392,29,19,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         list.add(10);
6:         list.add(20);
7:         list.add(30);
8:         list.add(40);
9:         int magicNumber = 42;
10:         int complicatedCalculation = (magicNumber * 3 - 6) / 3;
11:         int index = (complicatedCalculation % 4 + list.size() + 7 * 2) % 4;
12:         list.remove(0);
13:         if (index != 0) {
14:             list.add(1, 50);
15:         } else {
16:             list.add(1, 60);
17:         }
18:         list.removeLast();
19:          list.add(1, 99);
20:         list.removeFirst();
21:         list.addLast(80);
22:         list.pollFirst();
23:         if (list.getFirst() % 2 == 0) {
24:             list.addLast(5);
25:         } else {
26:             list.addLast(6);
27:         }
28:         /* other operations */
29:          int ret = list.get(1);
30:         System.out.println(""Read value: "" + ret);
31:     }
32: }"
compute,prog_8f4ac030,23,21,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<String, Integer> map = new HashMap<>();
5:         map.put(""a"", 100);  
6:         map.put(""b"", 200);
7:         map.put(""c"", 300);
8:         /* misleading modifications */
9:         map.put(""d"", 400);
10:         map.remove(""a"");
11:         map.put(""e"", 500);
12:         map.remove(""e"");
13:         int unused = map.get(""b""); 
14:         String key = ""writeKey"";
15:         boolean flag = true;
16:         if (flag) {
17:             map.put(key, 999); 
18:         } else {
19:             map.put(""a"", 1000); 
20:         }
21:          map.put(""target"", 789);
22:         map.replace(""f"", 600); 
23:          int ret = map.get(""target"");
24:     }
25: }"
compute,prog_8ff494f9,23,13,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         /* other operations */
6:         int rand = (int) (Math.random() * 10);
7:         /* other operations */
8:         list.add(10); 
9:         list.add(20); 
10:         list.add(30); 
11:         list.add(40); 
12:         /* other operations */
13:          if (rand % 2 == 0) {
14:             list.set(1, 99); 
15:         } else {
16:             list.set(2, 77); 
17:         }
18:         /* other operations */
19:         list.addFirst(5); 
20:         list.removeLast(); 
21:         list.add(2, 15); 
22:         /* other operations */
23:          int ret = list.get(1); 
24:         System.out.println(ret);
25:     }
26: }
27: "
compute,prog_abbfc735,24,13,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         /* other operations */
6:         int total = 1000 + 2000;
7:         /* other operations */
8:         stack.push(total);
9:         /* other operations */
10:         int secret = (total % 2 == 0) ? 5 : 7;
11:         stack.push(secret);
12:         stack.pop();  
13:          stack.push(42);
14:         stack.push(100);  
15:         if (secret > 10) {
16:             stack.push(12);
17:         } else {
18:             stack.push(15);
19:         }
20:         stack.peek();
21:         stack.pop();
22:         stack.push(-1);
23:         stack.push(secret + total);
24:          int ret = stack.get(stack.size() - 3);
25:     }
26: }
27: "
compute,prog_ccc35b38,21,11,"1: import java.util.Map;
2: import java.util.TreeMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, String> map = new TreeMap<>();
6:         map.put(10, ""ten"");
7:         map.put(20, ""twenty"");
8:         map.put(30, ""thirty"");
9:         int unknown = 3 * 3 + 4 / 2; 
10:         boolean condition = (unknown % 3 == 0);
11:          if (condition) {
12:             map.put(15, ""fifteen"");
13:         } else {
14:             map.put(25, ""twenty-five"");
15:         }
16:         map.remove(10); 
17:         map.put(35, ""thirty-five"");
18:         map.put(5, ""five"");
19:         map.get(20); 
20:         String misleadingValue = map.get(unknown); 
21:          String ret = map.get(15);
22:         System.out.println(ret);
23:     }
24: }
25: "
compute,prog_7b28e436,26,21,"1: import java.util.LinkedHashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<String, Integer> map = new LinkedHashMap<>();
6:         map.put(""a"", 100);
7:         map.put(""b"", 200);
8:         map.put(""c"", 300);
9:         map.put(""d"", 400);
10:         int controlVariable = 7; 
11:         int misleadingSum = map.get(""a"") + map.get(""b"") + controlVariable;
12:         map.put(""b"", map.get(""b"") + 50);
13:         map.put(""d"", map.get(""d"") - 50);
14:         if (misleadingSum % 3 == 1) {
15:             map.put(""e"", 500);
16:         }
17:         map.remove(""c"");
18:         map.put(""f"", 600);
19:         map.put(""d"", 450);  
20:         if (controlVariable < 10) {
21:              map.put(""c"", 350);
22:         }
23:         map.put(""g"", 700);
24:         map.get(""b"");
25:         map.containsKey(""d"");
26:          int ret = map.get(""c"");
27:         System.out.println(""Retrieved value: "" + ret);
28:     }
29: }"
compute,prog_7c44d6e2,24,15,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         /* other operations */
6:         int multiplier = 7;
7:         String placeholder = ""Hello, World!"";
8:         /* misleading operation */
9:         set.add(5);
10:         set.remove(5);
11:         set.add(multiplier * 2);
12:         /* potential write operation */
13:         set.add(14);
14:         
15:         set.add(10);
16:         /* other operations */
17:         if ((placeholder.length() * multiplier) % 3 == 1) {
18:             set.add(21);
19:         } else {
20:             set.add(42);
21:         }
22:         /* other operations */
23:         
24:         boolean containsTen = set.contains(10);
25:         System.out.println(""Value found: "" + containsTen);
26:     }
27: }"
compute,prog_d113e3d9,27,20,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         deque.addFirst(100);
6:         deque.addLast(200);
7:         int x = 42;
8:         if (x % 2 == 0) {
9:             x = x / 2;
10:         }
11:         deque.addFirst(x);
12:         deque.addFirst(300);
13:         int toggle = 1;
14:         int decisionPoint = x * toggle - 20;
15:         if (decisionPoint < 0) {
16:             deque.addLast(400);
17:         } else {
18:             deque.addFirst(500);
19:         }
20:          if (decisionPoint > 0) {
21:             deque.add(0, 10); 
22:         } else {
23:             deque.addLast(50); 
24:         }
25:         deque.offerLast(600);
26:         deque.offer(700);
27:          int ret = deque.getFirst();
28:         System.out.println(""Retrieved value: "" + ret);
29:     }
30: }
31: "
compute,prog_11be4c13,32,26,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         list.add(10);
6:         list.add(20);
7:         list.add(30);
8:         int complexNumber = (int)((Math.random() * 1000) % 12);
9:         if (complexNumber % 2 == 0) {
10:             list.add(5);
11:         } else {
12:             list.add(15);
13:         }
14:         list.add(complexNumber);
15:         list.remove(new Integer(10));
16:         list.set(0, 50);
17:         int misleadingIndex = (complexNumber + 5) % 3;
18:         list.add(misleadingIndex, 40);
19:         boolean dummyCondition = list.contains(15);
20:         if (dummyCondition) {
21:             list.add(25);
22:         } else {
23:             list.add(35);
24:         }
25:         list.remove(1);
26:          list.add(2, 99);
27:         if (complexNumber % 3 == 0) {
28:             list.add(1, 45);
29:         } else {
30:             list.add(1, 55);
31:         }
32:          int ret = list.get(2);
33:         System.out.println(""The retrieved value is: "" + ret);
34:     }
35: }
36: "
compute,prog_3a80c04c,22,7,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<String, Integer> map = new HashMap<>();
5:         map.put(""A"", 10);
6:         map.put(""B"", 20);
7:         map.put(""C"", 30);
8:         int computedKeyIndex = 1;
9:         int baseValue = 5;
10:         String[] keys = {""A"", ""B"", ""C"", ""D""};
11:         int unrelatedCalculation = baseValue * 2;
12:         map.put(keys[unrelatedCalculation % 2], unrelatedCalculation);
13:         map.put(""D"", 40);
14:         map.put(""E"", 50);
15:         map.remove(""E"");
16:         map.put(""B"", map.get(""B"") + 5);
17:         if (baseValue % 2 == 0) {
18:             map.put(""C"", 35);
19:         } else {
20:             map.put(""B"", 35);
21:         }
22:         int ret = map.get(""C"");
23:         System.out.println(""Read value: "" + ret);
24:     }
25: }
26: "
compute,prog_5bc3dd5e,17,11,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>();
5:         int[] keys = {5, 10, 15, 20};
6:         for (int key : keys) {
7:             map.put(key, key * 2);
8:         }
9:         int param = (int) (Math.random() * 10);
10:         if (param < 5) {
11:             map.put(5, 99);
12:         }
13:         map.put(10, 40);
14:         map.put(30, 60);
15:         map.remove(15);
16:         int searchKey = param < 5 ? 5 : 10;
17:         int ret = map.get(searchKey);
18:         System.out.println(""Value retrieved: "" + ret);
19:     }
20: }
21: "
compute,prog_6943d738,38,31,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> dataSet = new CopyOnWriteArraySet<>();
5:         dataSet.add(10); 
6:         int x = 10;
7:         int y = 20;
8:         for (int i = 0; i < 5; i++) {
9:             dataSet.add(i); 
10:         }
11:         x = (x + y) % 3;
12:         for (int i = 3; i < 8; i++) {
13:             if (i % 2 == 0) 
14:                 dataSet.add(i * (y % 2));
15:             else
16:                 dataSet.add(i / x);
17:         }
18:         dataSet.add(100);
19:         if (dataSet.contains(1)) {
20:             x *= 2;
21:         } else {
22:             y *= 2;
23:         }
24:         int complexValue = x * y + 100;
25:         for (int element : dataSet) {
26:             if (element % complexValue == 0) {
27:                 dataSet.add(element / y);
28:             }
29:         }
30:         if (complexValue % 3 == 0) {
31:              dataSet.add(999);
32:         } else {
33:             dataSet.add(888);
34:         }
35:         dataSet.add(dataSet.size());
36:         int check = complexValue % 5;
37:         Integer[] array = dataSet.toArray(new Integer[0]);
38:          int ret = array[array.length - 2];
39:         System.out.println(""Read value: "" + ret);
40:     }
41: }"
compute,prog_8268818b,29,14,"1: import java.util.HashSet;
2: import java.util.Iterator;
3: public class Main {
4:     public static void main(String[] args) {
5:         HashSet<Integer> set = new HashSet<>();
6:         for (int i = 1; i <= 10; i++) {
7:            set.add(i);
8:         }
9:         int controlFlag = 15;
10:         int misleadingVal = 100;
11:         if (controlFlag % 2 == 0) {
12:             set.remove(5);
13:         } else {
14:              set.add(11);
15:         }
16:         for (int i = 20; i < 25; i++) {
17:             set.add(i);
18:             set.remove(i - 10);
19:         }
20:         Iterator<Integer> iterator = set.iterator();
21:         while(iterator.hasNext()){
22:             int value = iterator.next();
23:             if(value % 5 == 0) {
24:                 misleadingVal += value;
25:             }
26:         }
27:         set.add(100);
28:         set.add(200);
29:          boolean isElevenInSet = set.contains(11);
30:         System.out.println(""The value of check if 11 is in set: "" + isElevenInSet);
31:     }
32: }"
compute,prog_ddf0ebf7,26,11,"1: import java.util.IdentityHashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, Integer> identityMap = new IdentityHashMap<>();
6:         identityMap.put(System.identityHashCode(new Integer(1)), 10);
7:         identityMap.put(System.identityHashCode(new Integer(2)), 20);
8:         identityMap.put(System.identityHashCode(new Integer(3)), 30);
9:         int randomFactor = (int) (Math.random() * 100);
10:         /* other operations */
11:          identityMap.put(System.identityHashCode(new Integer(4)), 40);
12:         if (randomFactor % 2 == 0) {
13:             identityMap.put(System.identityHashCode(new Integer(5)), 50);
14:             /* other operations */
15:         } else {
16:             identityMap.put(System.identityHashCode(new Integer(6)), 60);
17:             /* other operations */
18:         }
19:         int misleadingCalculation = randomFactor * 5;
20:         identityMap.put(System.identityHashCode(new Integer(misleadingCalculation)), misleadingCalculation);
21:         /* other operations */
22:         identityMap.put(System.identityHashCode(new Integer(7)), 70);
23:         int keyToRetrieve = System.identityHashCode(new Integer(1));
24:         int unusedKey = System.identityHashCode(new Integer(misleadingCalculation));
25:         /* other operations */
26:          int ret = identityMap.get(keyToRetrieve);
27:         System.out.println(""Retrieved value: "" + ret);
28:     }
29: }
30: "
compute,prog_8400e6e6,33,26,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         /* other operations */
6:         int rand = 5678 * 8765 + 101 + 111 + 121;
7:         /* other operations */
8:         int index = rand % 3;
9:         /* misleading operations */
10:         stack.push(5);
11:         stack.push(10);
12:         if (index == 1) {
13:             stack.pop();
14:         } else {
15:             stack.push(15);
16:         }
17:         stack.push(20);
18:         /* misleading operations */
19:         for(int i = 0; i < 2; i++) {
20:             stack.push(i * 100);
21:             stack.pop();
22:         }
23:         if (index != 1) {
24:             stack.pop();
25:         }
26:          stack.push(30);
27:         /* other operations */
28:         if(stack.size() > 3) {
29:             stack.push(40);
30:         } else {
31:             stack.pop();
32:         }
33:          int ret = stack.get(stack.indexOf(30));
34:     }
35: }
36: "
compute,prog_6ad59c95,16,0,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<String, Integer> map = new HashMap<>();
5:         map.put(""key1"", 0);
6:         map.put(""key2"", 1);
7:         map.put(""key3"", 2);
8:         int x = calculateX();
9:         processMap(map, x);
10:         map.put(""key2"", 42);
11:         reverseMapOperations(map);
12:         if (x > 1000) {
13:             map.put(""key1"", 42);
14:         }
15:         irrelevantComputation(map);
16:         int ret = map.get(""key3"");
17:         System.out.println(""Read value: "" + ret);
18:     }
19:     private static int calculateX() {
20:         int base = 123;
21:         return base * 8;
22:     }
23:     private static void processMap(HashMap<String, Integer> map, int x) {
24:         if (x < 200) {
25:             map.remove(""key3"");
26:         } else {
27:             map.put(""key3"", 100);
28:         }
29:     }
30:     private static void reverseMapOperations(HashMap<String, Integer> map) {
31:         if (map.containsKey(""key2"") && map.get(""key2"") == 42) {
32:             map.put(""key2"", -1);
33:         }
34:     }
35:     private static void irrelevantComputation(HashMap<String, Integer> map) {
36:         for(String key : map.keySet()) {
37:             map.put(key, map.get(key) + 1);
38:         }
39:         map.put(""key4"", 0);
40:         map.remove(""key4"");
41:     }
42: }
43: "
compute,prog_da6d0e6f,20,16,"1: import java.util.EnumMap;
2: import java.util.Map;
3: public class Main {
4:     enum Day {
5:         MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
6:     }
7:     public static void main(String[] args) {
8:         Map<Day, Integer> weekMap = new EnumMap<>(Day.class);
9:         for (Day day : Day.values()) {
10:             weekMap.put(day, 0);
11:         }
12:         int misleadingVal = complexCalculation();
13:         if (misleadingVal % 2 == 0) {
14:             /* other write */ weekMap.put(Day.MONDAY, 100);
15:         } else {
16:              weekMap.put(Day.WEDNESDAY, 25);
17:         }
18:         misleadingModifications(weekMap);
19:         weekMap.put(Day.FRIDAY, 1000); 
20:          int ret = weekMap.get(Day.WEDNESDAY);
21:         System.out.println(""The value retrieved is: "" + ret);
22:     }
23:     private static int complexCalculation() {
24:         int result = 0;
25:         for (int i = 0; i < 100; i++) {
26:             result += (i * i - i) % 7; 
27:         }
28:         return result;
29:     }
30:     private static void misleadingModifications(Map<Day, Integer> map) {
31:         map.put(Day.TUESDAY, 200); 
32:         map.put(Day.THURSDAY, 300); 
33:         map.remove(Day.SATURDAY); 
34:         map.put(Day.SUNDAY, 500);
35:         map.remove(Day.SUNDAY);
36:     }
37: }"
compute,prog_0656ccf3,23,15,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, String> table = new Hashtable<>();
5:         table.put(0, ""Initial"");
6:         table.put(1, ""Value1"");
7:         table.put(2, ""Value2"");
8:         table.put(3, ""Value3"");
9:         int x = (int) (Math.random() * 10);
10:         int y = x * 3 + 2;
11:         for (int i = 4; i < 10; i++) {
12:             table.put(i, ""Misleading"" + i);
13:         }
14:         
15:         if (y % 2 == 0) {
16:             table.put(1, ""Correct Write"");  
17:         } else {
18:             table.put(1, ""Wrong Write"");
19:         }
20:         table.put(11, ""Other Write"");
21:         table.remove(0);
22:         table.put(x + 10, ""Confusion"" + y);
23:          String ret = table.get(1);  
24:         System.out.println(""Retrieved: "" + ret);
25:     }
26: }"
compute,prog_b83f18ed,26,20,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitset = new BitSet();
5:         bitset.set(2);
6:         bitset.set(5);
7:         bitset.set(10);
8:         /* other operations */
9:         int magicNumber = (int) System.currentTimeMillis() % 100;
10:         int justNoise = magicNumber * 42 + 101;
11:         boolean keyDecision = (justNoise % 3 == 0);
12:         /* other operations */
13:         int misleadingCondition = magicNumber * 3;
14:         if (misleadingCondition % 5 == 0) {
15:             bitset.clear(2);
16:         } else {
17:             bitset.set(20);
18:         }
19:         if (keyDecision) {
20:              bitset.set(7);
21:         }
22:         bitset.flip(3);
23:         bitset.set(22);
24:         bitset.clear(5);
25:         bitset.set(15);
26:          boolean ret = bitset.get(7);
27:         System.out.println(""Read value: "" + ret);
28:     }
29: }
30: "
compute,prog_fbfa0103,24,15,"1: import java.util.PriorityQueue;
2: import java.util.Queue;
3: public class Main {
4:     public static void main(String[] args) {
5:         Queue<Integer> queue = new PriorityQueue<>();
6:         queue.add(3);
7:         queue.add(5);
8:         queue.add(7);
9:         queue.add(9);
10:         queue.add(11);
11:         boolean flag = Math.random() > 0.5;
12:         /* other operations */
13:         queue.poll(); 
14:         /* other operations */
15:          queue.offer(2);
16:         if (flag) {
17:             queue.offer(4); 
18:         }
19:         queue.poll(); 
20:         /* other operations */
21:         queue.offer(6); 
22:         queue.add(8); 
23:         queue.remove(11); 
24:          int ret = queue.peek();
25:         System.out.println(""Retrieved value: "" + ret);
26:     }
27: }
28: "
compute,prog_20c8f17d,23,16,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         set.add(5);
6:         set.add(10);
7:         int sum = 0;
8:         for (int i = 0; i < 5; i++) { 
9:             sum += i;
10:         }
11:         if (sum % 2 == 0) { 
12:             set.add(15); 
13:         } else {
14:             set.add(20);
15:         }
16:          set.add(sum + 25); 
17:         int misleadingValue = set.contains(10) ? 100 : 200; 
18:         for (int i : set) { 
19:             misleadingValue += i;
20:         }
21:         int uselessVar = misleadingValue / 5; 
22:         uselessVar *= 2;
23:          int ret = set.stream().filter(x -> x > 29).findFirst().orElse(0);
24:         System.out.println(ret);
25:     }
26: }
27: "
compute,prog_5d093eb2,26,18,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         set.add(10);
6:         set.add(20);
7:         set.add(30);
8:         int flag = complexCalculation();
9:         if (Math.random() > 0.5) {
10:             set.remove(30);
11:             set.add(40);
12:         } else {
13:             set.add(50);
14:         }
15:         int fakeRead = set.size();
16:         int unrelatedComputation = 5 * 10;
17:         if (flag > 100) {
18:             set.add(70);
19:         }
20:         boolean decision = decide(unrelatedComputation);
21:         if (decision) {
22:             set.add(80);
23:         } else {
24:             set.remove(10);
25:         }
26:         boolean ret = set.contains(70);
27:         System.out.println(""Result of read: "" + ret);
28:     }
29:     private static int complexCalculation() {
30:         return (int)(Math.random() * 200);
31:     }
32:     private static boolean decide(int val) {
33:         return val % 2 == 0;
34:     }
35: }"
compute,prog_852db7ee,24,9,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         int control = 0;
6:         stack.push(5);
7:         stack.push(10);
8:         if (control == 0) {
9:              stack.push(20);
10:         } else {
11:             stack.push(30);
12:         }
13:         stack.push(15);
14:         stack.push(25);
15:         int m = stack.size();
16:         int n = (control * m + 2) / 2;
17:         if (n % 2 == 0) {
18:             stack.pop();
19:             stack.push(40);
20:         }
21:         if (m - control == 5) {
22:             stack.pop();
23:         }
24:          int ret = stack.get(2);
25:         System.out.println(ret);
26:     }
27: }
28: "
compute,prog_aaa0be00,12,23,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
5:         /* other operations */
6:         map.put(100, ""Initial"");
7:         map.put(200, ""Unrelated"");
8:         map.put(300, ""Irrelevant"");
9:         /* confusing operations */
10:         String result = complexLogic(map);
11:         /* more operations */
12:          String ret = map.get(150);
13:         System.out.println(ret);
14:     }
15:     public static String complexLogic(ConcurrentHashMap<Integer, String> map) {
16:         int a = 5 * 5 + 20;
17:         int b = 50;
18:         /* unrelated computations */
19:         String temp = ""Temporary"";
20:         if ((a + b) % 2 == 0) {
21:             map.put(400, ""Dummy"");
22:         } else {
23:              map.put(150, ""Correct"" + temp);
24:         }
25:         map.put(500, ""Fake"");
26:         map.remove(200);
27:         return map.getOrDefault(300, ""Default"");
28:     }
29: }
30: "
compute,prog_78cc668b,28,27,"1: import java.util.Map;
2: import java.util.TreeMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, String> map = new TreeMap<>();
6:         for (int i = 0; i < 10; i++) {
7:             map.put(i, ""Value"" + i);
8:         }
9:         for (int i = 0; i < 5; i++) {
10:             map.put(-i, ""Negative"" + i);
11:         }
12:         int x = 20;
13:         if (x * 2 == 40) {
14:             x = x - 10;
15:         } else {
16:             x = x + 10;
17:         }
18:         /* misleading write */
19:         map.put(1, ""WrongValue"");  
20:         boolean toggle = true;
21:         String manipulation = """";
22:         for (int i = 0; i < 3; i++) {
23:             manipulation += toggle ? ""A"" : ""B"";
24:             toggle = !toggle;
25:         }
26:         map.remove(3);
27:          map.put(2, ""DesiredValue"");  
28:          String retrieved = map.get(2);  
29:         System.out.println(""Retrieved value: "" + retrieved);
30:     }
31: }
32: "
compute,prog_d8fd0169,26,17,"1: import java.util.ArrayDeque;
2: import java.util.Deque;
3: public class Main {
4:     public static void main(String[] args) {
5:         Deque<Integer> deque = new ArrayDeque<>();
6:         for (int i = 0; i < 5; i++) {
7:             deque.add(i + 10);
8:         }
9:         int x = (int)Math.pow(2, 3);
10:         int y = (x * 3 + 15) % 4;
11:         /* misleading operation */
12:         if (y == 1) {
13:             deque.addLast(100);
14:         } else {
15:             deque.removeFirst(); 
16:         }
17:          deque.addFirst(20); 
18:         if (x > 5) {
19:             deque.add(30);
20:         } else {
21:             deque.add(40);
22:         }
23:         deque.addLast(60);
24:         /* misleading operation */
25:         deque.pollFirst();
26:          int ret = deque.getFirst();
27:         System.out.println(""Retrieved: "" + ret);
28:     }
29: }"
compute,prog_2d2d003a,19,7,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         vector.add(0);
6:         vector.add(1);
7:         vector.add(2);
8:         int seed = (int) (Math.random() * 1000);
9:         int index = seed % 2 + 1;
10:         int v = vector.get(index);
11:         if (v == 0) {
12:             vector.set(2, 10);
13:         }
14:         vector.set(1, 42);
15:         vector.add(index, misleadingValue + 5);
16:         if (index != 1) {
17:             vector.remove(0); 
18:         }
19:         int ret = vector.get(2);
20:         System.out.println(""Retrieved: "" + ret);
21:     }
22: }"
compute,prog_9bab4257,28,22,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: import java.util.Iterator;
3: public class Main {
4:     public static void main(String[] args) {
5:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
6:         set.add(10);
7:         set.add(20);
8:         set.add(30);
9:         Iterator<Integer> iterator = set.iterator();
10:         while (iterator.hasNext()) {
11:             System.out.println(""Unrelated iteration: "" + iterator.next());
12:         }
13:         int unrelated = 50 * 2 + 3;
14:         if (unrelated % 5 == 0) {
15:             set.add(25);
16:         } else {
17:             set.add(15);
18:         }
19:         set.add(40);
20:         set.remove(10);
21:         if (unrelated % 10 == 0) {
22:              set.add(60);
23:         }
24:         set.remove(20);
25:         set.add(50);
26:         int counter = 0;
27:         int result = -1;
28:          for (Integer value : set) {
29:             if (counter == 2) {
30:                 result = value;
31:                 break;
32:             }
33:             counter++;
34:         }
35:         System.out.println(""Value at read point: "" + result);
36:     }
37: }"
compute,prog_f04270b5,23,18,"1: import java.util.EnumMap;
2: import java.util.Map;
3: public class Main {
4:     enum Day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY; }
5:     public static void main(String[] args) {
6:         EnumMap<Day, Integer> map = new EnumMap<>(Day.class);
7:         map.put(Day.MONDAY, 0);
8:         map.put(Day.TUESDAY, 2);
9:         map.put(Day.WEDNESDAY, 4);
10:         map.put(Day.THURSDAY, 6);
11:         int randomFactor = 1234 * 4321 + 777 + 888 + 999;
12:         Day selectedDay = (randomFactor % 2 == 0) ? Day.FRIDAY : Day.SUNDAY;
13:         if (randomFactor % 2 == 0) {
14:             map.put(Day.FRIDAY, 10);
15:         }
16:         map.put(Day.WEDNESDAY, 0);  
17:         map.put(Day.THURSDAY, 0);   
18:          map.put(selectedDay, 20);
19:         if (map.containsKey(Day.MONDAY)) {
20:             map.put(Day.MONDAY, 100);
21:         }
22:         map.put(Day.SATURDAY, 30);
23:          int ret = map.get(selectedDay);
24:         System.out.println(""Value read: "" + ret);
25:     }
26: }"
compute,prog_875d0455,30,26,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         for (int i = 0; i < 10; i++) {
6:             set.add(i);
7:         }
8:         if (set.size() > 5) {
9:             set.add(100);
10:         }
11:         set.add(-1);
12:         set.remove(-1);
13:         int misleadingValue = set.size() == 10 ? 5 : 20;
14:         set.add(misleadingValue);
15:         int keyValue = 42;
16:         set.add(keyValue);
17:         if (set.contains(58)) {
18:             set.add(300);
19:         } else {
20:             set.remove(1);
21:         }
22:         set.add(101);
23:         if (set.size() == 13) {
24:             set.remove(100);
25:         } else {
26:              set.add(7);
27:         }
28:         set.add(11);
29:         set.remove(5);
30:          boolean ret = set.contains(7);
31:         System.out.println(""The value at read point is: "" + ret);
32:     }
33: }
34: "
compute,prog_5990841e,38,0,"1: import java.util.NavigableMap;
2: import java.util.TreeMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         NavigableMap<Integer, String> map = new TreeMap<>();
6:         map.put(1, ""A"");
7:         map.put(2, ""B"");
8:         map.put(3, ""C"");
9:         /* other operations */
10:         int someCalculation = (int) Math.pow(2, 3) + 5 * 3 - 1; 
11:         boolean condition = someCalculation % 2 == 0;
12:         /* other operations */
13:         map.put(4, ""D"");
14:         map.remove(1);
15:         /* misleading modification */
16:         if (condition) {
17:             map.put(5, ""E"");
18:         } else {
19:             map.put(6, ""F"");
20:         }
21:         int keyForWrite;
22:         if (map.containsKey(2)) {
23:             keyForWrite = 7;
24:         } else {
25:             keyForWrite = 8;
26:         }
27:         /* write point - intentionally complex and obscured logic */
28:         Map<Integer, String> subMap = map.headMap(keyForWrite);
29:         if (!subMap.isEmpty() && subMap.firstKey() < 5) {
30:             map.put(5, ""G"");
31:         }
32:         /* confusing additional operations */
33:         map.put(9, ""H"");
34:         map.remove(3);
35:         if (someCalculation > 20) {
36:             map.put(10, ""I"");
37:         }
38:          String ret = map.get(5);
39:     }
40: }"
compute,prog_e409d671,18,10,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         for (int i = 0; i < 5; i++) {
6:             deque.add(i);
7:         }
8:         int mystery = 42 * 42 - 42;
9:         if (mystery % 2 == 0) {
10:              deque.addFirst(10);
11:         } else {
12:             deque.addLast(20);
13:         }
14:         deque.remove();
15:         deque.add(30);
16:         deque.removeLast();
17:         deque.addFirst(40);
18:          int ret = deque.peekLast();
19:         System.out.println(ret);
20:     }
21: }"
compute,prog_b0be781c,23,15,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         set.add(3); 
6:         set.add(5);
7:         set.add(7);
8:         set.add(9);
9:         int toggle = 10;
10:         int sum = 0;
11:         for (int i = 0; i < toggle; i++) {
12:             sum += i;
13:         }
14:         if (sum % 2 == 0) {
15:              set.add(14);
16:         } else {
17:             set.add(15);
18:         }
19:         if (toggle > 5) set.add(21); else set.add(18);
20:         set.remove(3);
21:         set.remove(5);
22:         Integer[] array = set.toArray(new Integer[0]);
23:          int ret = array[2];
24:         System.out.println(ret);
25:     }
26: }"
compute,prog_a19f6af3,17,10,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
5:         int rand = 1234 * 4321 + 777 + 888 + 999;
6:         int k = rand % 2;
7:         map.put(System.identityHashCode(""key1""), ""value1"");
8:         map.put(System.identityHashCode(""key2""), ""value2"");
9:         if (k == 1) {
10:              map.put(System.identityHashCode(""targetKey""), ""importantValue"");
11:         } else {
12:             map.put(System.identityHashCode(""anotherKey""), ""otherValue"");
13:         }
14:         for (int i = 0; i < 5; i++) {
15:             map.put(System.identityHashCode(""loopKey"" + i), ""loopValue"" + i);
16:         }
17:          String ret = map.get(System.identityHashCode(""targetKey""));
18:         System.out.println(ret);
19:     }
20: }"
compute,prog_ed82a855,39,23,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         for (int i = 0; i < 5; i++) {
6:             deque.addLast(i + 10);
7:         }
8:         deque.addFirst(100);
9:         deque.addLast(200);
10:         deque.offerFirst(300);
11:         deque.offerLast(400);
12:         int x = 5 * 42 / 3 + 19;
13:         if (x % 5 == 0) {
14:             deque.removeFirst();
15:             deque.addLast(500);
16:         } else {
17:             deque.pollFirst();
18:             deque.offerLast(600);
19:         }
20:         /* other operations */
21:         int y = x * 2 - 99;
22:         if (y % 2 == 0) {
23:              deque.addFirst(1);
24:         } else {
25:             deque.addLast(700);
26:         }
27:         deque.removeLast();
28:         deque.addFirst(800);
29:         int z = y + x - 73;
30:         int indexOfInterest = 0;
31:         while (!deque.isEmpty() && indexOfInterest < 3) {
32:             Integer temp = deque.poll();
33:             if (temp == null || temp == 1) { 
34:                 deque.addFirst(temp);
35:                 break;
36:             }
37:             indexOfInterest++;
38:         }
39:          int ret = deque.peekFirst();
40:         System.out.println(""Retrieved value: "" + ret);
41:     }
42: }
43: "
compute,prog_9adf4ea8,24,14,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<Integer, String> treeMap = new TreeMap<>();
5:         /* other operations */
6:         int a = 103 * 42 + 7;
7:         int b = a * 31 - 103;
8:         treeMap.put(3, ""Three"");
9:         treeMap.put(1, ""One"");
10:         treeMap.put(2, ""Two"");
11:         treeMap.put(5, ""Five"");
12:         if ((b % 5) != 0) {
13:             treeMap.put(7, ""Seven"");
14:              treeMap.put(4, ""Four"");
15:         } else {
16:             treeMap.put(8, ""Eight"");
17:             treeMap.put(6, ""Six"");
18:         }
19:         int u = b % 3;
20:         treeMap.remove(5);
21:         treeMap.put(9, ""Nine"");
22:         treeMap.put(u, ""MysteryElement"");
23:         /* other operations */
24:          String ret = treeMap.get(4);
25:         System.out.println(""Retrieved Value: "" + ret);
26:     }
27: }"
compute,prog_af022c7f,33,24,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         stack.push(10);
6:         stack.push(20);
7:         stack.push(30);
8:         int x = 42; 
9:         for (int i = 0; i < 3; i++) {
10:             x += i;
11:             stack.pop(); 
12:         }
13:         int condition = x % 3;
14:         /* misleading operations */
15:         if (condition == 0) {
16:             stack.push(40);
17:             stack.push(50);
18:             stack.pop();
19:         } else {
20:             stack.push(60);
21:             stack.push(70);
22:             stack.pop();
23:         }
24:          stack.push(100);
25:         /* operations irrelevant to the read point */
26:         stack.push(200);
27:         stack.push(300);
28:         stack.pop(); 
29:         stack.push(400);
30:         stack.pop(); 
31:         x = x * 100 + Math.abs(x - 200);
32:         stack.push(x % 99);
33:          int ret = stack.peek();
34:         System.out.println(""The value retrieved is: "" + ret); 
35:     }
36: }"
compute,prog_6ed8ed1d,24,15,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         int t = 7676; 
6:         int flag = t % 3; 
7:         /* unrelated add operations */
8:         set.add(10);
9:         set.add(20);
10:         if (flag < 2) {
11:             set.add(30);
12:         }
13:         set.add(40);
14:         
15:         if (t % 2 == 0) { 
16:             set.add(50);
17:         } else {
18:             set.add(60);
19:         }
20:         set.add(70);
21:         set.add(80);
22:         set.remove(10); 
23:         set.add(90);
24:          int ret = 0;
25:         int count = 0;
26:         for (int num : set) {
27:             if (count == 2) { 
28:                 ret = num;
29:                 break;
30:             }
31:             count++;
32:         }
33:         System.out.println(""Retrieved value: "" + ret);
34:     }
35: }
36: "
compute,prog_609065a5,22,18,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
5:         map.put(1, ""One"");
6:         map.put(2, ""Two"");
7:         map.put(3, ""Three"");
8:         int rand = 1234 * 4321 + 777 + 888 + 999;
9:         int placeholder = rand / 2;
10:         map.put(4, ""Four""); 
11:         map.remove(1);
12:         map.put(1, ""Uno"");
13:         if (placeholder % 3 == 0) {
14:             map.put(5, ""Five"");
15:         } else {
16:             map.remove(2);
17:         }
18:          map.put(2, ""Deux""); 
19:         map.put(6, ""Six""); 
20:         map.put(null, ""Null"");
21:         String intermediary = map.get(3); 
22:          String ret = map.get(2);
23:         System.out.println(ret);
24:     }
25: }
26: "
compute,prog_ad257f18,28,23,"1: import java.util.EnumMap;
2: public class Main {
3:     enum TrafficLight {
4:         RED, GREEN, YELLOW
5:     }
6:     public static void main(String[] args) {
7:         EnumMap<TrafficLight, String> map = new EnumMap<>(TrafficLight.class);
8:         map.put(TrafficLight.RED, ""Stop"");
9:         map.put(TrafficLight.GREEN, ""Go"");
10:         map.put(TrafficLight.YELLOW, ""Caution"");
11:         int computation = 42 * 19 + 7; 
12:         boolean condition = computation % 5 == 0; 
13:         if (condition) {
14:             map.remove(TrafficLight.RED);
15:             map.put(TrafficLight.RED, ""Halt"");
16:         } else {
17:             map.remove(TrafficLight.GREEN);
18:             map.put(TrafficLight.GREEN, ""GoSteady"");
19:         }
20:         String temp = map.get(TrafficLight.YELLOW);
21:         map.put(TrafficLight.YELLOW, temp + ""!"");
22:         if (map.containsKey(TrafficLight.RED)) {
23:              map.put(TrafficLight.YELLOW, ""SlowDown"");
24:         }
25:         for (TrafficLight light : TrafficLight.values()) {
26:             map.put(light, map.get(light) + "" Alert"");
27:         }
28:          String ret = map.get(TrafficLight.YELLOW);
29:         System.out.println(""Output: "" + ret);
30:     }
31: }
32: "
compute,prog_f101395f,27,15,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, Integer> map = new ConcurrentHashMap<>();
5:         /* Initial operations */
6:         map.put(0, 10);
7:         map.put(1, 20);
8:         int complexCalculation = (int)(Math.pow(23, 2) + Math.sin(2.0) * 50);
9:         /* Misleading write */
10:         map.put(2, complexCalculation);
11:         /* Intermediate operations */
12:         for (int i = 0; i < 5; i++) {
13:             map.put(i + 3, i * 10);
14:         }
15:          map.put(1, 99);
16:         /* More intermediate operations */
17:         if (complexCalculation % 2 == 0) {
18:             map.put(4, 100);
19:         } else {
20:             map.put(5, 200);
21:         }
22:         /* Misleading read */
23:         int misleading = map.get(6);
24:         if (map.contains(4) || map.containsValue(50)) {
25:             map.put(7, 300);
26:         }
27:          int ret = map.get(1);
28:         System.out.println(""Read value: "" + ret);
29:     }
30: }
31: "
compute,prog_7d06a45e,27,13,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         bitSet.set(0);
6:         bitSet.set(2);
7:         bitSet.clear(1);
8:         int importantValue = computeImportantValue();
9:         int misleadingValue = (importantValue * 3) % 5;
10:         if (misleadingValue == 0) {
11:             bitSet.set(4); 
12:         } else {
13:              bitSet.set(3); 
14:         }
15:         bitSet.clear(2); 
16:         bitSet.set(5); 
17:         boolean flag = (bitSet.cardinality() > 2);
18:         if (flag) {
19:             bitSet.set(7);
20:         } else {
21:             bitSet.clear(3);
22:         }
23:         bitSet.flip(6);
24:         bitSet.set(8);
25:         bitSet.clear(8); 
26:         int anotherRead = bitSet.get(0) ? 1 : 0;
27:          boolean ret = bitSet.get(3);
28:         System.out.println(""Read value at index 3: "" + ret);
29:     }
30:     private static int computeImportantValue() {
31:         int a = 100;
32:         int b = 50;
33:         int c = 25;
34:         return a - b + c;
35:     }
36: }
37: "
compute,prog_83f088cb,33,16,"1: import java.util.WeakHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         WeakHashMap<String, Integer> weakMap = new WeakHashMap<>();
5:         String key1 = ""Element1"";
6:         String key2 = ""Element2"";
7:         String misleadingKey = ""Mislead"";
8:         /* other operations */
9:         weakMap.put(misleadingKey, 999);
10:         /* other operations */
11:         int randomCalculation = 5678 * 1234 + 888;
12:         /* other operations */
13:         if (randomCalculation % 2 == 0) {
14:             weakMap.put(key1, 5);
15:         } else {
16:              weakMap.put(key1, 10);
17:         }
18:         /* other operations */
19:         weakMap.put(key2, 20);
20:         weakMap.remove(misleadingKey);
21:         /* other operations */
22:         boolean condition = randomCalculation < 10000;
23:         if (condition) {
24:             weakMap.put(""Extra"", 30);
25:         }
26:         /* other operations */
27:         System.gc();
28:         try {
29:             Thread.sleep(100);
30:         } catch (InterruptedException e) {
31:             e.printStackTrace();
32:         }
33:          Integer ret = weakMap.get(key1);
34:         System.out.println(""Retrieved value: "" + ret);
35:     }
36: }
37: "
compute,prog_46d72ab7,27,18,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> set = new TreeSet<>();
5:         set.add(10);
6:         set.add(20);
7:         set.add(30);
8:         set.add(40);
9:         int alpha = 15;
10:         int beta = 25;
11:         if (alpha > 10 && beta < 30) {
12:             set.add(50);
13:             set.remove(20);
14:         }
15:         set.add(5);
16:         set.remove(30);
17:         if (alpha < beta) {
18:              set.add(25);
19:         } else {
20:             set.add(35);
21:         }
22:         set.add(15);
23:         set.remove(10);
24:         int setSize = set.size();
25:         System.out.println(""Intermediate Size of Set: "" + setSize);
26:         int nthElement = set.headSet(35).size();
27:          int ret = (Integer) set.toArray()[nthElement];
28:         System.out.println(""Read Value: "" + ret);
29:     }
30: }"
compute,prog_c6b9d957,17,14,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
5:         map.put(1, ""One"");
6:         map.put(2, ""Two"");
7:         map.put(3, ""Three"");
8:         int bitmap = 0xABCD;
9:         int index = calculateIndex(bitmap);
10:         map.put(index, ""Random"");
11:         if (bitmap % 2 == 0) {
12:             map.put(10, ""Ten"");
13:         } else {
14:              map.put(4, ""Four"");
15:         }
16:         randomManipulation(map);
17:          String ret = map.get(4);
18:         System.out.println(ret);
19:     }
20:     private static int calculateIndex(int value) {
21:         return (value & 0xFFF) >> 1;
22:     }
23:     private static void randomManipulation(LinkedHashMap<Integer, String> map) {
24:         map.put(5, ""Five"");
25:         if (map.containsKey(5)) {
26:             map.remove(1);
27:             map.put(2, ""Dos"");
28:         }
29:         map.put(6, ""Six"");
30:     }
31: }"
compute,prog_ce7165ce,26,9,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> queue = new PriorityQueue<>();
5:         queue.add(10);
6:         queue.add(20);
7:         queue.add(30);
8:          
9:         boolean condition = (100 - 50) > 49;
10:         if (condition) {
11:             queue.add(15);
12:         } else {
13:             queue.add(25);
14:         }
15:         queue.remove(30);
16:         queue.offer(40);
17:         int dummy = (int) Math.pow(2, 3);
18:         queue.offer(dummy);
19:         queue.poll();
20:         queue.add(5);
21:         condition = false;
22:         if (condition) {
23:             queue.add(50);
24:         }
25:          
26:         int ret = queue.peek(); 
27:         System.out.println(""Retrieved: "" + ret);
28:     }
29: }
30: "
compute,prog_ef2b1836,19,12,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         vector.add(10);
6:         vector.add(20);
7:         vector.add(30);
8:         int rand = (int) (Math.random() * 100);
9:         int x = rand * 2;
10:         int k = x % vector.size();
11:         if (rand % 2 == 0) {
12:              vector.set(1, rand + 5);
13:         } else {
14:             vector.set(1, 50);
15:         }
16:         vector.set(0, vector.get(0) + 5);
17:         vector.remove(2);
18:         vector.add(40);
19:          int ret = vector.get(1);
20:         System.out.println(""Retrieved value: "" + ret);
21:     }
22: }"
compute,prog_5a043f4b,34,23,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: import java.util.List;
3: import java.util.Random;
4: public class Main {
5:     public static void main(String[] args) {
6:         List<Integer> list = new CopyOnWriteArrayList<>();
7:         list.add(0);
8:         list.add(10);
9:         Random random = new Random();
10:         int rand = random.nextInt(50) + 1;
11:         if (rand > 25) {
12:             list.add(rand);
13:         } else {
14:             list.remove((Integer) 10);
15:             list.add(25);
16:         }
17:         list.add(88);
18:         list.add(99);
19:         for (int i = 0; i < rand % 10; i++) {
20:             list.add(random.nextInt(100));
21:         }
22:         System.out.println(""Element at index 0 before write: "" + list.get(0));
23:         list.set(0, 42);
24:         for (int i = 0; i < rand % 5; i++) {
25:             list.add(7);
26:         }
27:         if (rand % 2 == 0) {
28:             list.add(100);
29:         } else {
30:             list.add(200);
31:         }
32:         System.out.println(""Element at index 0 now: "" + list.get(0));
33:         System.out.println(""Element at index 1: "" + list.get(1));
34:         int ret = list.get(0);
35:         System.out.println(""Read value: "" + ret);
36:     }
37: }
38: "
compute,prog_f05564ca,29,18,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         vector.add(10);
6:         vector.add(20);
7:         vector.add(30);
8:         vector.add(40);
9:         vector.add(50);
10:         int indexToRead = (int) Math.sqrt(49);  
11:         int falseCondition = indexToRead % 2;  
12:         if (falseCondition == 0) {
13:             vector.set(0, 100);  
14:         } else {
15:             vector.set(1, 200);  
16:         }
17:         if (indexToRead > 5) {
18:              vector.add(1, 99); 
19:         } else {
20:             vector.add(0, 88);  
21:         }
22:         vector.add(2);  
23:         vector.add(3);  
24:         vector.remove(0); 
25:         int check = vector.indexOf(200); 
26:         if (check < 0) {
27:             vector.set(3, 250);
28:         }
29:          int ret = vector.get(1);
30:         System.out.println(ret);
31:     }
32: }
33: "
compute,prog_02245069,19,10,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         for (int i = 0; i < 5; i++) {
6:             list.add(i * 2);
7:         }
8:         int misleadingIndex = calculateMisleadingIndex();
9:         list.add(misleadingIndex, 42);
10:          list.add(100 + calculateOffset());
11:         if (Math.random() > 0.5) {
12:             list.remove(0);
13:         } else {
14:             list.add(50);
15:         }
16:         for (int i = 0; i < list.size(); i++) {
17:             if (list.get(i) % 2 == 0) list.set(i, list.get(i) + 1);
18:         }
19:          int ret = list.get(5);
20:         System.out.println(""Read value: "" + ret);
21:     }
22:     private static int calculateMisleadingIndex() {
23:         int a = 2351;
24:         int b = 4223;
25:         int calc = (a * b) % 7;
26:         return calc;
27:     }
28:     private static int calculateOffset() {
29:         int c = 127;
30:         int d = 9;
31:         int calc = (c * d + d * d) / 17;
32:         return calc;
33:     }
34: }
35: "
compute,prog_0d6452c3,31,9,"1: import java.util.ArrayDeque;
2: import java.util.Random;
3: public class Main {
4:     public static void main(String[] args) {
5:         ArrayDeque<Integer> deque = new ArrayDeque<>();
6:         deque.add(5);
7:         deque.add(10);
8:         deque.add(15);
9:         deque.add(20);
10:         Random random = new Random();
11:         int x = random.nextInt(100);
12:         if (x % 3 == 0) {
13:             deque.addFirst(25);
14:         } else if (x % 3 == 1) {
15:             deque.addFirst(30);
16:         }
17:         deque.add(100);
18:         x = random.nextInt(100);
19:         if (x % 5 == 0) {
20:             deque.pollLast();
21:         } else if (x % 5 == 1) {
22:             deque.pollFirst();
23:         }
24:         deque.add(50);
25:         deque.add(60);
26:         x = random.nextInt(100);
27:         if (x % 2 == 0) {
28:             int temp = deque.remove();
29:             deque.addLast(temp + x);
30:         }
31:         int ret = deque.toArray(new Integer[0])[4];
32:         System.out.println(""Retrieved value: "" + ret); 
33:     }
34: }"
compute,prog_25046779,26,17,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         vector.add(10);
6:         vector.add(20);
7:         vector.add(30);
8:         /* Complex logic */
9:         int mysteryNumber = 42;
10:         boolean condition = ((mysteryNumber * 37) % 3 == 0);
11:         if (condition) {
12:             vector.add(5); 
13:         }
14:         vector.add(25); 
15:         int dummy = vector.get(2) * 10;
16:         dummy += mysteryNumber;
17:          if (mysteryNumber % 2 == 0) {
18:             vector.set(1, 99);  
19:         } else {
20:             vector.add(100); 
21:         }
22:         vector.add(35); 
23:         for (int i = 0; i < vector.size(); i++) {
24:             dummy += vector.get(i);
25:         }
26:          int ret = vector.get(1);
27:         System.out.println(""Retrieved value: "" + ret);
28:     }
29: }
30: "
compute,prog_a05872df,22,14,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         set.add(3);
6:         set.add(5);
7:         set.add(7);
8:         int hash = 0;
9:         for (int i = 0; i < 100; i++) {
10:             hash += i;
11:         }
12:         boolean condition = (hash % 2 == 0);
13:         if (condition) {
14:              set.add(42); 
15:         } else {
16:             set.add(100);
17:         }
18:         set.add(99);
19:         set.add(101);
20:         set.remove(3);
21:         set.remove(5);
22:          boolean exists = set.contains(42);
23:         System.out.println(""Read value: "" + exists);
24:     }
25: }
26: "
compute,prog_0d29e909,25,12,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         int initVal = (int) Math.pow(3, 3);
6:         boolean halfDecision = (initVal % 3 == 0);
7:         if (halfDecision) {
8:             deque.addFirst(10);
9:         } else {
10:             deque.addLast(20);
11:         }
12:         deque.add(15);
13:         deque.add(25);
14:         deque.addLast(35);
15:         deque.removeFirst();
16:         deque.offer(40);
17:         if (deque.size() > 2) {
18:             deque.addFirst(5);
19:         }
20:         deque.add(50);
21:         deque.addLast(deque.removeLast());
22:         if (!deque.isEmpty()) {
23:             deque.remove();
24:         }
25:         int ret = deque.peekFirst();
26:         System.out.println(ret);
27:     }
28: }"
compute,prog_dfe21009,37,17,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> cowList = new CopyOnWriteArrayList<>();
5:         int initialCapacity = 5;
6:         for (int i = 0; i < initialCapacity; i++) {
7:             cowList.add(i * 10);
8:         }
9:         /* Complex block that obfuscates write */
10:         boolean toggle = true;
11:         if (toggle) {
12:             cowList.add(55); 
13:         }
14:         toggle = !toggle;
15:         cowList.remove((Integer) 10); 
16:         if (!toggle) {
17:              cowList.add(42);
18:         }
19:         int dummyValue = 1000; 
20:         for (int i = 0; i < cowList.size(); i++) {
21:             if (i == 2) {
22:                 dummyValue = cowList.get(i);
23:             }
24:         }
25:         cowList.addFirst(17); 
26:         cowList.addLast(33);  
27:         int index = 1;
28:         cowList.add(index, 12); 
29:         /* Several operations that do not affect the read point */
30:         cowList.clear(); 
31:         cowList.add(100);
32:         cowList.add(200);
33:         cowList.add(300);
34:         /* Ensure the read point executes after all potential changes */
35:         cowList.add(index, 25); 
36:         cowList.add(index + 2, 15); 
37:          int ret = cowList.get(1);
38:         System.out.println(""Retrieved value: "" + ret);
39:     }
40: }"
compute,prog_2c3b1f44,20,15,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         for (int i = 0; i < 5; i++) {
6:             list.add(i * 2);
7:         }
8:         int sum = 0;
9:         for (int i = 0; i < list.size(); i++) {
10:             sum += list.get(i);
11:         }
12:         if (sum % 10 > 5) {
13:             list.add(42);
14:         } else {
15:             list.add(24);
16:         }
17:         list.set(2, 100);
18:         list.add(200);
19:         System.out.println(""Current state of list: "" + list);
20:         int ret = list.get(5);
21:         System.out.println(""Retrieved value: "" + ret);
22:     }
23: }
24: "
compute,prog_c2d364dc,22,18,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
5:         map.put(1, ""One"");
6:         map.put(2, ""Two"");
7:         map.put(3, ""Three"");
8:         int x = (int) (Math.random() * 100);
9:         int y = x % 5;
10:         map.remove(2);
11:         map.put(4, ""Four"");
12:         map.put(5, ""Five"");
13:         if (y < 2) {
14:             map.put(6, ""Six"");
15:         }
16:         map.remove(4);
17:         map.put(7, ""Seven"");
18:          map.put(2, ""Two Updated"");
19:         map.put(8, ""Eight"");
20:         y += 3;
21:         if (y >= 3) {
22:              String ret = map.get(2);
23:             System.out.println(""Retrieved: "" + ret);
24:         } else {
25:             System.out.println(""Condition not met."");
26:         }
27:     }
28: }
29: "
compute,prog_376114af,33,23,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         vector.add(42);
6:         vector.add(56);
7:         vector.add(78);
8:         int intermediate = vector.size() * 3;
9:         if (intermediate % 2 == 0) {
10:             vector.add(99);
11:         } else {
12:             vector.add(100);
13:         }
14:         if (vector.contains(56)) {
15:             vector.remove(1);
16:             vector.add(88);
17:         }
18:         vector.add(12);
19:         intermediate += 12;
20:         if (intermediate > 10) {
21:             vector.add(18);
22:         }
23:          vector.set(1, 123);
24:         vector.add(77);
25:         vector.remove(new Integer(18));
26:         vector.add(56);
27:         if (vector.size() > 5) {
28:             vector.add(34);
29:         }
30:         intermediate -= vector.size();
31:         intermediate *= 2;
32:         int dummy = vector.get(0);
33:          int ret = vector.get(1);
34:         System.out.println(""Read value: "" + ret);
35:     }
36: }"
compute,prog_3aa3e7d9,25,11,"1: import java.util.WeakHashMap;
2: import java.util.Random;
3: public class Main {
4:     public static void main(String[] args) {
5:         WeakHashMap<String, Integer> map = new WeakHashMap<>();
6:         String key1 = new String(""key1"");
7:         String key2 = new String(""key3"");
8:         String key3 = new String(""key2"");
9:         map.put(key1, 100);
10:         map.put(key2, 200);
11:         map.put(key3, 300);
12:         int unrelatedCalc = key1.length() * key2.length();
13:         double randomFactor = Math.random() * 1000;
14:         unrelatedCalc += (int)randomFactor;
15:         Random rand = new Random();
16:         if (rand.nextInt(10) > 5) {
17:             map.put(key3, 300);
18:         }
19:         if (unrelatedCalc % 2 == 1) {
20:             map.remove(key3);
21:         }
22:         map.put(key2, 400);
23:         map.put(""key4"", 500);
24:         map.replace(key1, 101);
25:         int ret = map.get(""key2"");
26:         System.out.println(""Retrieved value: "" + ret);
27:     }
28: }"
compute,prog_fd6977ab,28,17,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         /* other operations */
6:         int rand = 5678 * 8765 + 4444 + 5555 + 6666;
7:         /* other operations */
8:         int factor = (rand % 10 + 5) * 3;
9:         /* other operations */
10:         if (factor % 3 == 0) {
11:             set.add(10);
12:         }
13:         /* other operations */
14:         if (factor % 2 == 0) {
15:             set.add(5);
16:         } else {
17:              set.add(15);
18:         }
19:         /* misleading operations */
20:         if (set.contains(10)) {
21:             set.add(20);
22:         }
23:         set.add(25);
24:         set.remove(20);
25:         if (!set.contains(15)) {
26:             set.add(30);
27:         }
28:          boolean exists = set.contains(15);
29:         System.out.println(""Element 15 exists: "" + exists);
30:     }
31: }"
compute,prog_f4e026cb,19,12,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
5:         String key1 = new String(""key1"");
6:         String key2 = new String(""key2"");
7:         String key3 = new String(""key3"");
8:         map.put(key1, 10);
9:         map.put(key2, 20);
10:         int hash = key1.hashCode() + key2.hashCode();
11:         int condition = hash % 10;
12:          if (condition < 5) {
13:             map.put(key1, 15);
14:         }
15:         map.put(""unrelatedKey"", 99); 
16:         map.put(key3, 30);          
17:         map.remove(""unrelatedKey"");   
18:         int temp = map.get(key2);    
19:          int ret = map.get(key1);
20:         System.out.println(""Retrieved Value: "" + ret);
21:     }
22: }
23: "
compute,prog_48b803cf,24,11,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: import java.util.Arrays;
3: public class Main {
4:     public static void main(String[] args) {
5:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
6:         list.addAll(Arrays.asList(10, 20, 30, 40));
7:         /* misleading operations */
8:         list.set(2, 35); 
9:         /* other operations */
10:         int randomProduct = (5 * list.size()) + (list.get(0) * 2);
11:          list.add(randomProduct % 10 == 0 ? 50 : 45);
12:         /* other operations */
13:         if (randomProduct % 5 != 0) {
14:             list.add(randomProduct / 2);
15:         } else {
16:             list.add(0, randomProduct + 1);
17:         }
18:         /* misleading operations */
19:         list.removeIf(x -> x % 15 == 0);
20:         /* already added operations but still misleading */
21:         if (list.contains(42)) {
22:             list.add(randomProduct % 6);
23:         }
24:          int ret = list.get(4);  
25:         System.out.println(""Read value: "" + ret);
26:     }
27: }"
compute,prog_c03023a3,24,15,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> arrayList = new ArrayList<>();
5:         arrayList.add(10);
6:         arrayList.add(20);
7:         arrayList.add(30);
8:         int x = 5;
9:         int y = 15;
10:         if (x + y > 20) {
11:             arrayList.add(40); 
12:         }
13:         arrayList.add(50); 
14:         if ((x * 2 + y) % 5 == 0) {
15:              arrayList.set(1, 25);
16:         }
17:         y = y - x + arrayList.get(0) * 2;
18:         if (y % 3 == 0) {
19:             arrayList.add(60); 
20:         }
21:         arrayList.add(70); 
22:         arrayList.remove(2); 
23:         int index = (x + y > 50) ? 0 : 1;
24:          int ret = arrayList.get(index + 1);
25:         System.out.println(ret);
26:     }
27: }
28: "
compute,prog_376cefea,21,13,"1: import java.util.EnumMap;
2: public class Main {
3:     public enum Key {
4:         A, B, C, D
5:     }
6:     public static void main(String[] args) {
7:         EnumMap<Key, Integer> map = new EnumMap<>(Key.class);
8:         map.put(Key.C, 30);
9:         map.put(Key.A, 10);
10:         int controlValue = (int) (Math.random() * 10);
11:         boolean shouldWrite = controlValue % 3 == 0;
12:         if (shouldWrite) {
13:              map.put(Key.B, 20);
14:         } else {
15:             map.put(Key.D, 40);
16:         }
17:         map.put(Key.A, map.get(Key.A) + 5);
18:         map.put(Key.C, map.getOrDefault(Key.D, 0) + 15);
19:         controlValue = controlValue * 2;
20:         int unusedRead = map.getOrDefault(Key.D, 0);
21:          int ret = map.getOrDefault(Key.B, 0);
22:         System.out.println(""Read value: "" + ret);
23:     }
24: }"
compute,prog_d2e3e88e,25,15,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> treeSet = new TreeSet<>();
5:         treeSet.add(10);
6:         treeSet.add(20);
7:         treeSet.add(30);
8:         treeSet.add(40);
9:         treeSet.remove(10);
10:         int a = 5 * 8 + 12;
11:         int b = a % 3;
12:         int c = 100 / (b + 1);
13:         int writeValue = 25; 
14:         if (c < 40) {
15:              treeSet.add(15); 
16:         }
17:         treeSet.add(35);
18:         if (b == 0) {
19:             treeSet.add(writeValue); 
20:         } else {
21:             treeSet.add(45);
22:         }
23:         treeSet.remove(20);
24:         int target = c - b + 10;
25:          int ret = treeSet.higher(14); 
26:         System.out.println(""The retrieved value is: "" + ret);
27:     }
28: }"
compute,prog_e75f87fc,28,16,"1: import java.util.HashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, String> map = new HashMap<>();
6:         map.put(1, ""One"");
7:         map.put(2, ""Two"");
8:         map.put(3, ""Three"");
9:         int pseudoRandom = 5432;
10:         boolean condition = (pseudoRandom % 2 == 0);
11:         map.put(4, ""Four"");
12:         if (!condition) {
13:             map.put(1, ""Uno"");
14:         }
15:         if (condition) {
16:              map.put(2, ""TwoAndAHalf"");
17:         }
18:         map.remove(3);
19:         map.put(pseudoRandom, ""Random"");
20:         String value = """";
21:         for (int i = 0; i < 5; i++) {
22:             if (map.containsKey(i)) {
23:                 value += map.get(i);
24:             }
25:         }
26:         map.get(5);
27:         map.get(-1);
28:          String ret = map.get(2);
29:         System.out.println(ret); 
30:     }
31: }
32: "
compute,prog_bd0d383a,24,18,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         list.add(10);  
6:         list.add(20);  
7:         list.add(30);  
8:         list.add(40);  
9:         int x = list.size() * 10 - 5;
10:         if (x > 30 && list.get(0) < 50) {
11:             list.set(1, x + 1);
12:         } else {
13:             list.set(2, x - 3);
14:         }
15:         list.removeFirst();
16:         boolean conditionalVar = list.get(1) == 20; 
17:         if (conditionalVar || x < 50) {
18:              list.add(1, 99);  
19:         } else {
20:             list.addLast(50);
21:         }
22:         list.add(5);  
23:         list.addAll(list);  
24:          int ret = list.get(1);  
25:         System.out.println(""Value of ret: "" + ret);
26:     }
27: }"
compute,prog_713a97da,26,16,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<Integer, String> map = new HashMap<>();
5:         map.put(0, ""Zero"");
6:         map.put(1, ""One"");
7:         map.put(2, ""Two"");
8:         map.put(3, ""Three"");
9:         int cond = 5;
10:         /* other operations */
11:         int misleadingKey = cond - 4;
12:         map.put(misleadingKey, ""Four""); 
13:         /* other operations */
14:         int controlVariable = cond * 2 / 3 + 1;
15:         if (controlVariable % 3 == 0) {
16:              map.put(1, ""Write Point!"");
17:         } else {
18:             map.put(1, ""Alternative!"");
19:         }
20:         /* other operations */
21:         String randomAccessValue = map.get(3);
22:         map.remove(3); 
23:         map.put(3, randomAccessValue); 
24:         /* other operations */
25:         map.put(10, ""Ten""); 
26:          String ret = map.get(1);
27:         System.out.println(""Retrieved Value: "" + ret);
28:     }
29: }"
compute,prog_72af71a7,24,8,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         /* other operations */
6:         int rand = 1234 % 12 * 4321 + 777 - 888 + 999;
7:         int mysterious = rand / 10;
8:          if (mysterious < 300) {
9:             set.add(42);
10:         }
11:         /* other operations */
12:         set.add(43);
13:         set.remove(43);
14:         set.add(44);
15:         /* other operations */
16:         if (set.contains(42)) {
17:             set.remove(42);
18:             set.add(45);
19:         } else {
20:             set.add(46);
21:         }
22:         /* other operations */
23:         set.add(47);
24:          boolean ret = set.contains(45);
25:         System.out.println(""Value at read point: "" + ret);
26:     }
27: }"
compute,prog_ce996503,23,15,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<Integer, String> map = new TreeMap<>();
5:         map.put(1, ""one"");
6:         map.put(3, ""three"");
7:         map.put(5, ""five"");
8:         int condition = (int) (Math.random() * 100);
9:         map.put(7, ""seven"");
10:         if (condition % 2 == 0) {
11:             map.put(2, ""incorrect"");
12:         } else {
13:             map.remove(3);
14:         }
15:          map.put(2, ""two"");  
16:         map.put(4, ""four"");
17:         map.put(6, ""six"");
18:         if (condition < 50) {
19:             map.replace(5, ""five_new"");
20:         } else {
21:             map.remove(1);
22:         }
23:          String ret = map.get(2);
24:         System.out.println(""Retrieved value: "" + ret);
25:     }
26: }"
compute,prog_ef76fdb7,19,13,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         stack.push(100);
6:         stack.push(200);
7:         stack.push(300);
8:         int randomComputation = (int) (Math.random() * 10);
9:         int conditionalVar = randomComputation > 5 ? 1 : 0;
10:         stack.push(conditionalVar);
11:         stack.pop();
12:         if (randomComputation % 2 == 0) {
13:              stack.push(500);
14:         } else {
15:             stack.push(600);
16:         }
17:         stack.push(999);
18:         stack.pop();
19:          int ret = stack.get(stack.size() - 1);
20:         System.out.println(""Value read from stack: "" + ret);
21:     }
22: }
23: "
compute,prog_c288eea2,35,6,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<Integer, String> map = new TreeMap<>();
5:         map.put(10, ""ten"");
6:          map.put(20, ""twenty"");
7:         map.put(30, ""thirty"");
8:         map.put(40, ""forty"");
9:         int rand = (int) System.currentTimeMillis() % 4;
10:         String operation = ""unknown"";
11:         switch (rand) {
12:             case 0:
13:                 operation = map.get(10);
14:                 break;
15:             case 1:
16:                 operation = map.get(30);
17:                 break;
18:             case 2:
19:                 operation = map.remove(10);
20:                 break;
21:             case 3:
22:                 map.put(50, ""fifty"");
23:                 break;
24:             default:
25:                 map.put(60, ""sixty"");
26:         }
27:         map.put(70, ""seventy"");
28:         /* Misleading operations that don't affect the read value */
29:         if (rand % 2 == 0) {
30:             map.put(80, ""eighty"");
31:         } else {
32:             map.put(90, ""ninety"");
33:         }
34:         map.remove(30);
35:          String ret = map.get(20);
36:         System.out.println(""Value retrieved: "" + ret);
37:     }
38: }
39: "
compute,prog_a623f428,22,16,"1: import java.util.ArrayDeque;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayDeque<Integer> deque = new ArrayDeque<>();
5:         deque.offer(0);
6:         deque.offer(10);
7:         deque.offer(20);
8:         deque.offer(30);
9:         int toggle = 42;
10:         if (toggle % 2 == 0) {
11:             deque.offer(99); 
12:         } else {
13:             deque.offer(100); 
14:         }
15:         deque.poll(); 
16:          deque.offerFirst(42); 
17:         deque.offerFirst(50); 
18:         int dummy = deque.peek(); 
19:         if (dummy % 7 == 0) {
20:             deque.poll(); 
21:         }
22:          int ret = deque.pollLast();
23:         System.out.println(""Read value: "" + ret);
24:     }
25: }
26: "
compute,prog_8e20b7d7,28,13,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         list.add(0);
6:         list.add(1);
7:         list.add(2);
8:         /* other operations */
9:         int misleadingIndex = 999 % 3; 
10:         list.remove(misleadingIndex); 
11:         int k = list.size(); 
12:         if ((k * 3) % 5 == 1) {
13:              list.add(3);
14:         } else {
15:             list.add(4);
16:         }
17:         list.add(5); 
18:         /* other operations */
19:         for (int i = 0; i < 2; i++) {
20:             list.add(i + 6);
21:         }
22:         /* other operations */
23:         boolean shouldDoMoreAdditions = list.get(3) > 5; 
24:         if (shouldDoMoreAdditions) {
25:             list.add(15);
26:             list.add(20);
27:         }
28:          int ret = list.get(2); 
29:         System.out.println(""Retrieved value: "" + ret); 
30:     }
31: }"
compute,prog_d9ab8eb7,21,9,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
5:         map.put(""initial"", 0);
6:         boolean criticalCondition = (5 * 7 % 3 == 1);
7:         int misleadingVariable = criticalCondition ? 42 : 24;
8:         
9:         if (criticalCondition) {
10:             map.put(""keyToRead"", 99);
11:         } else {
12:             map.put(""keyToWrite"", 1);
13:         }
14:         map.put(""confuser"", misleadingVariable);
15:         for (int i = 0; i < 5; i++) {
16:             map.put(""key"" + i, i);
17:         }
18:         map.put(""dummy"", map.getOrDefault(""dummy"", 57));
19:         map.remove(""nonExistentKey"");
20:         map.computeIfAbsent(""key4"", k -> map.get(""key3"") + 1);
21:          int ret = map.get(""keyToRead"");
22:         System.out.println(""Retrieved value: "" + ret);
23:     }
24: }"
compute,prog_eb0b9abb,31,12,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         for (int i = 0; i < 10; i++) {
6:             vector.add(i * 10);
7:         }
8:         int a = 10;
9:         int b = 20;
10:         int c = a * b;
11:         if (c % 2 == 0) {
12:              vector.add(42); 
13:         } else {
14:             vector.add(99); 
15:         }
16:         for (int j = 0; j < 5; j++) {
17:             vector.set(j, vector.get(j) + 3);
18:         }
19:         vector.remove(0); 
20:         vector.insertElementAt(85, 1); 
21:         int x = c + 100;
22:         int y = x - 50;
23:         vector.add(0, 200); 
24:         if (y > 125) {
25:             vector.add(500);
26:         } else {
27:             vector.add(600);
28:         }
29:         int dummy = vector.get(3);
30:         dummy = vector.get(2);
31:          int ret = vector.get(11); 
32:         System.out.println(""Read value: "" + ret); 
33:     }
34: }"
compute,prog_93a52509,24,19,"1: import java.util.EnumMap;
2: import java.util.Map;
3: public class Main {
4:     enum Day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }
5:     public static void main(String[] args) {
6:         EnumMap<Day, Integer> map = new EnumMap<>(Day.class);
7:         for (Day day : Day.values()) {
8:             map.put(day, day.ordinal());
9:         }
10:         int control = (int)(Math.random() * 10);
11:         Day targetDay = Day.MONDAY; 
12:         if (control % 2 == 0) {
13:             targetDay = Day.WEDNESDAY;
14:         }
15:         /* misleading writes */
16:         map.put(Day.FRIDAY, 100);
17:         map.remove(Day.SATURDAY);
18:         map.put(Day.SUNDAY, -3);
19:          map.put(Day.WEDNESDAY, 42);
20:         System.out.println(map.get(Day.THURSDAY));
21:         System.out.println(map.getOrDefault(Day.SATURDAY, -1));
22:         map.put(Day.MONDAY, map.get(Day.MONDAY) + 10);
23:         map.put(Day.TUESDAY, 999);
24:          int ret = map.get(targetDay);
25:         System.out.println(""Retrieved value: "" + ret);
26:     }
27: }
28: "
compute,prog_29d0d6ea,27,14,"1: import java.util.Map;
2: import java.util.WeakHashMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<String, Integer> map = new WeakHashMap<>();
6:         String[] keys = {""one"", ""two"", ""three"", ""four"", ""five""};
7:         for (int i = 0; i < keys.length; i++) {
8:             map.put(keys[i], i * i);
9:         }
10:         map.put(""six"", 36);
11:         map.remove(""three"");
12:         boolean condition = (keys.length > 4);
13:         if (condition) {
14:              map.put(""target"", 42);
15:         } else {
16:             map.put(""target"", 24);
17:         }
18:         map.put(""seven"", 49);
19:         map.put(""eight"", 64);
20:         keys[2] = ""updated"";
21:         map.remove(""two"");
22:         if (!map.containsKey(""nine"")) {
23:             map.put(""nine"", 81);
24:         }
25:         String distractingKey = ""six"";
26:         int unrelated = map.get(distractingKey) + 10;
27:          int ret = map.get(""target"");
28:         System.out.println(""Value read: "" + ret);
29:     }
30: }"
compute,prog_25f559e4,31,19,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         vector.add(10);
6:         vector.add(20);
7:         vector.add(30);
8:         int seed = 5;
9:         for (int i = 0; i < 3; i++) {
10:             vector.add(seed * i);
11:         }
12:         int index = vector.size() % 3; 
13:         int shift = seed << 1;
14:         vector.remove(index);
15:         vector.add(index, shift);
16:         boolean flag = (vector.elementAt(index) > 10);
17:         vector.add(index, 100);
18:         if (flag) {
19:              vector.add(index + 1, 99);
20:         }
21:         vector.set(0, 111);
22:         vector.set(1, 222);
23:         for (int i = vector.size() - 1; i >= 0; i--) {
24:             vector.add(vector.firstElement() + i);
25:         }
26:         int sum = 0;
27:         for (int i = 0; i < 2; i++) {
28:             sum += vector.get(i);
29:         }
30:         vector.add(400);
31:          int ret = vector.get(index + 1);
32:         System.out.println(""Read value: "" + ret);
33:     }
34: }"
compute,prog_d83b2e3b,30,24,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
5:         /* other operations */
6:         for (int i = 0; i < 5; i++) {
7:             map.put(i, ""Value"" + i);
8:         }
9:         int magicNumber = 4 * 11 + 7 - 35;
10:         String misleadingValue = ""Misleading"";
11:         map.put(10, misleadingValue);
12:         /* other operations */
13:         int condition = 0;
14:         if (magicNumber % 3 == 0) {
15:             condition = 1;
16:         }
17:         /* misleading write point */
18:         if (condition == 0) {
19:             map.put(2, ""UpdatedValue"");
20:         }
21:         /* other operations */
22:         int keyToRead = magicNumber % 5;
23:         if (condition == 1) {
24:              map.put(keyToRead, ""CorrectValue"");
25:         }
26:         /* other operations */
27:         String otherGet = map.get(10);
28:         System.out.println(""Other get operation: "" + otherGet);
29:         /* other operations */
30:          String ret = map.get(keyToRead);
31:         System.out.println(""Read value: "" + ret);
32:     }
33: }"
compute,prog_b0f37420,28,15,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         set.add(5);
6:         set.add(10);
7:         int computation = (int)Math.pow(2, 3) + 5 - 10;
8:         boolean misleadingCondition = computation < 0;
9:         set.add(15);
10:         set.remove(10);
11:         set.add(20);
12:         if (misleadingCondition) {
13:             set.add(25);
14:         } else {
15:              set.add(30);
16:         }
17:         set.add(35);
18:         set.add(computation);
19:         int sum = 0;
20:         for (Integer num : set) {
21:             sum += num;
22:         }
23:         set.add(sum);
24:         int check = sum % 2;
25:         if (check == 1) {
26:             set.add(40);
27:         }
28:          int ret = (set.contains(30)) ? 30 : 0;
29:         System.out.println(""Retrieved value: "" + ret);
30:     }
31: }"
compute,prog_13c21edb,23,11,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<Integer, Integer> map = new HashMap<>();
5:         /* other operations */
6:         map.put(10, 100);
7:         map.put(20, 200);
8:         int x = 5;
9:         if (x < 10) {
10:             int computation = x * 42 - 17;
11:              map.put(30, 300);
12:         }
13:         map.put(40, 400);
14:         map.remove(10);
15:         /* other operations */
16:         if (x % 2 == 0) {
17:             map.put(30, 310);
18:         } else {
19:             map.put(30, 320);
20:         }
21:         map.put(50, 500);
22:         map.put(60, 600);
23:          int ret = map.get(30);
24:         System.out.println(ret);
25:     }
26: }"
compute,prog_7a199cef,20,16,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, String> hashtable = new Hashtable<>();
5:         hashtable.put(1, ""One"");
6:         hashtable.put(2, ""Two"");
7:         hashtable.put(3, ""Three"");
8:         int x = 45 * 2;
9:         if (x % 2 == 0) {
10:             hashtable.put(4, ""Four"");
11:         } else {
12:             hashtable.put(5, ""Five"");
13:         }
14:         hashtable.remove(4);
15:         hashtable.remove(2);
16:          hashtable.put(2, ""Twenty""); 
17:         for (int i = 6; i <= 10; i++) {
18:             hashtable.put(i, ""Number "" + i);
19:         }
20:          String ret = hashtable.get(2); 
21:         System.out.println(ret);
22:     }
23: }
24: "
compute,prog_f2deb746,26,21,"1: import java.util.LinkedList;
2: import java.util.List;
3: public class Main {
4:     public static void main(String[] args) {
5:         List<Integer> list = new LinkedList<>();
6:         list.add(0); 
7:         list.add(1);
8:         int a = 5, b = 10;
9:         int resultA = computeSomething(a);
10:         int resultB = computeSomethingElse(b);
11:         boolean shouldWrite = (resultA + resultB) % 2 == 0;
12:         /* misleading write */
13:         for (int i = 0; i < 3; i++) {
14:             list.add(i + 3);
15:         }
16:         if (shouldWrite) {
17:             list.add(42); 
18:         }
19:         /* obfuscating computations */
20:         if (resultA < resultB) {
21:              list.set(1, 99);
22:         }
23:         list.removeLast(); 
24:         list.add(3, 8); 
25:         list.add(4, 9); 
26:          int ret = list.get(1);
27:         System.out.println(""The retrieved value is: "" + ret);
28:     }
29:     private static int computeSomething(int value) {
30:         return value * value + 2 * value + 1;
31:     }
32:     private static int computeSomethingElse(int value) {
33:         return value - 3 + value / 3;
34:     }
35: }
36: "
compute,prog_53016b83,30,24,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> queue = new PriorityQueue<>();
5:         /* other operations */
6:         int obfuscator = 500 * 2 + 77;
7:         /* other operations */
8:         int decisionFactor = obfuscator % 3;
9:         queue.add(10);
10:         queue.add(5);
11:         queue.add(20);
12:         /* misleading write */
13:         if (decisionFactor == 2) {
14:             queue.add(30);
15:         }
16:         /* other operations */
17:         queue.offer(3);
18:         queue.offer(15);
19:         int dummyOperation = 0;
20:         for (int i = 0; i < 3; i++) {
21:             dummyOperation += queue.poll();
22:             queue.offer(dummyOperation + i);
23:         }
24:          queue.add(8);
25:         /* other operations */
26:         dummyOperation = queue.size();
27:         for (Integer val : queue) {
28:             dummyOperation += val;
29:         }
30:          int ret = queue.peek();
31:         System.out.println(ret);
32:     }
33: }
34: "
compute,prog_8c4eabcf,29,25,"1: import java.util.List;
2: import java.util.concurrent.CopyOnWriteArrayList;
3: public class Main {
4:     public static void main(String[] args) {
5:         List<Integer> list = new CopyOnWriteArrayList<>();
6:         list.add(10);
7:         list.add(20);
8:         list.add(30);
9:         int index = 0;
10:         int temp = 5 * 5 - 10; 
11:         if (temp == 15) {
12:             list.add(40);
13:         } else {
14:             list.remove((Integer)20);
15:             list.add(50);
16:             list.add(60);
17:             temp = list.size();
18:         }
19:         int compValue = (int)Math.pow(2, 3) + 7;
20:         if (compValue > 10) {
21:             index = 1;
22:         } else {
23:             index = 2;
24:         }
25:          list.add(index, 99);
26:         int unrelatedValue = list.get(3); 
27:         list.add(70);
28:         list.remove((Integer)30);
29:          int ret = list.get(1);
30:         System.out.println(""Returned value: "" + ret);
31:     }
32: }
33: "
compute,prog_8dc0be06,23,19,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<Integer, String> map = new HashMap<>();
5:         map.put(1, ""Initial""); 
6:         int conditionValue = (int) (Math.random() * 10) % 2;
7:         String unrelatedString = ""Nothing here"";
8:         int unrelatedComputation = conditionValue * 100 + 50;
9:         if (conditionValue == 1) {
10:             map.put(2, ""FakeEntry"");
11:             map.put(3, ""Mislead"");
12:         } else {
13:             map.put(4, ""Diversion"");
14:         }
15:         manipulateData(map);
16:         map.get(2);
17:         map.get(3);
18:         map.put(5, unrelatedString + unrelatedComputation);
19:          if (unrelatedString.length() > 5) {
20:             map.put(1, ""Value at 1"");
21:         }
22:         System.out.println(""Before Read"");
23:          String ret = map.get(1);
24:         System.out.println(""Read value: "" + ret);
25:     }
26:     private static void manipulateData(HashMap<Integer, String> map) {
27:         map.put(6, ""ManipulateMe"");
28:         map.put(7, ""AnotherOne"");
29:         String temp = map.get(7);
30:         if (temp != null) {
31:             map.put(8, ""IgnoreMe"");
32:         }
33:         map.remove(6);
34:     }
35: }"
compute,prog_c710e909,26,16,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         bitSet.set(10);
6:         bitSet.set(20);
7:         bitSet.set(30);
8:         if (bitSet.get(15)) {
9:             bitSet.clear(10);
10:         } else {
11:             bitSet.set(19);
12:         }
13:         bitSet.flip(30);
14:         int hiddenTrigger = (5 * 3) % 2;
15:         if (hiddenTrigger == 1) {
16:              bitSet.set(5);
17:         } else {
18:             bitSet.set(25);
19:         }
20:         BitSet anotherSet = new BitSet();
21:         anotherSet.set(5);
22:         bitSet.or(anotherSet);
23:         anotherSet.set(24, 28);
24:         int mask = 2 * 2 * 2;
25:         anotherSet.and(bitSet);
26:          boolean value = bitSet.get(5);
27:         System.out.println(""Read value from BitSet at index 5: "" + value);
28:     }
29: }
30: "
compute,prog_b4b10bce,21,8,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
5:         map.put(1, ""One"");
6:         map.put(2, ""Two"");
7:         int magic = computeMagicNumber();
8:          if (magic % 2 == 0) {
9:             map.put(3, ""Three"");
10:         } else {
11:             map.put(4, ""Four"");
12:         }
13:         map.put(5, ""Five"");
14:         map.remove(2);
15:         map.put(2, ""Deuce"");
16:         String s = ""Unrelated"";
17:         if (s.length() > 5) {
18:             map.put(1, ""Uno"");
19:         }
20:         String randomAccess = map.get(4);
21:          String ret = map.get(3);
22:         System.out.println(""Value at read point: "" + ret);
23:     }
24:     private static int computeMagicNumber() {
25:         int x = 7;
26:         for (int i = 0; i < 5; i++) {
27:             x *= 2;
28:         }
29:         return x;
30:     }
31: }"
compute,prog_6da5ffe7,0,0,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         int interimCalc = 42; 
6:         boolean toggle = false;
7:         /* Write point */
8:         if (interimCalc % 2 == 0) {
9:             set.add(100); 
10:             toggle = true;
11:         }
12:         set.add(200);
13:         set.add(300);
14:         set.remove(200); 
15:         if (toggle) {
16:             set.add(400); 
17:         } else {
18:             set.add(500);
19:         }
20:         Integer[] orderedSet = set.toArray(new Integer[0]);
21:         /* Read */
22:         int ret = orderedSet[0];
23:         System.out.println(""Read value: "" + ret);
24:     }
25: }"
compute,prog_5320f974,30,20,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, Integer> table = new Hashtable<>();
5:         /* other operations */
6:         int rand = 1234 * 4321 + 777;
7:         /* other operations */
8:         int k = rand % 100;
9:         /* other operations */
10:         table.put(1, 100);
11:         /* other operations */
12:         table.put(2, 200);
13:         table.put(3, 300);
14:         /* misleading modification */
15:         if (table.containsKey(1)) {
16:             table.put(10, 500);
17:         } else {
18:             table.put(11, 600);
19:         }
20:          if (k < 50) {
21:             table.put(2, 42);
22:         } else {
23:             table.put(3, 43);
24:         }
25:         /* unrelated computations */
26:         int dummy = table.hashCode() * 2 - 777;
27:         if (dummy > 1000) {
28:             dummy += rand;
29:         }
30:          int ret = table.get(2);
31:     }
32: }"
compute,prog_154af219,24,19,"1: import java.util.Map;
2: import java.util.WeakHashMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<String, Integer> map = new WeakHashMap<>();
6:         /* other operations */
7:         String key1 = new String(""key1"");
8:         String key2 = new String(""key2"");
9:         map.put(key1, 10);
10:         map.put(key2, 20);
11:         /* other operations */
12:         int rand = 1234 * 4321 + 777 + 888 + 999;
13:         /* other operations */
14:         int control = rand % 4;
15:         /* other operations */
16:         map.put(""misleading"", 0);
17:         /* other operations */
18:         if (control % 2 == 0) {
19:              map.put(""indirect"", 40);
20:         }
21:         /* other operations */
22:         String chosenKey = (control % 2 == 0) ? ""key1"" : ""key2"";
23:         /* other operations */
24:          int ret = map.get(chosenKey);
25:         System.out.println(""Retrieved value: "" + ret);
26:     }
27: }"
compute,prog_1c3ff1aa,21,18,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
5:         for (int i = 0; i < 10; i++) {
6:             list.add(i);
7:         }
8:         int unrelated = list.size() * 3 + 7;
9:         boolean flag = (unrelated % 4 == 0);
10:         if (flag) {
11:             list.remove(2);
12:         } else {
13:             list.add(10);
14:         }
15:         list.set(5, unrelated);
16:         list.add(unrelated % 5);
17:         list.remove(new Integer(1));
18:         list.set(1, 99);
19:         list.add(flag ? 75 : 57);
20:         list.set(3, list.get(3) + 3);
21:         int ret = list.get(1);
22:         System.out.println(""Retrieved value: "" + ret);
23:     }
24: }"
compute,prog_e48ad0e0,24,10,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
5:         map.put(5, ""five"");
6:         map.put(10, ""ten"");
7:         map.put(15, ""fifteen"");
8:         int x = 24;
9:         int y = 42;
10:          map.put(20, ""twenty"");
11:         if (x * y % 3 == 0) {
12:             map.put(25, ""twenty-five"");
13:         } else {
14:             map.remove(5);
15:         }
16:         map.remove(10);
17:         map.put(5, ""dodge""); 
18:         if (map.containsKey(15)) {
19:             map.remove(15);
20:             map.put(30, ""thirty"");
21:         } else {
22:             map.put(10, ""ten again"");
23:         }
24:          String ret = map.get(20);
25:     }
26: }
27: "
compute,prog_065dc1ab,32,25,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> treeSet = new TreeSet<>();
5:         /* other operations */
6:         int randomNumber = 1024 * 2048 % 77777;
7:         /* other operations */
8:         int divider = randomNumber % 1000;
9:         /* other operations */
10:         treeSet.add(42);
11:         treeSet.add(56);
12:         treeSet.add(75);
13:         /* other operations */
14:         boolean complexCondition = (divider % 2 == 0);
15:         for (int i = 0; i < 5; i++) {
16:             int candidate = randomNumber + i;
17:             if (candidate > 100) {
18:                 treeSet.add(candidate);
19:             } else {
20:                 treeSet.add(-candidate);
21:             }
22:         }
23:         /* misleading operations */
24:         if (complexCondition) {
25:              treeSet.add(60);
26:         } else {
27:             treeSet.add(90);
28:         }
29:         treeSet.remove(75);
30:         treeSet.add(100);
31:         treeSet.remove(100);
32:          int ret = treeSet.ceiling(55);
33:         System.out.println(""Read value: "" + ret);
34:     }
35: }
36: "
compute,prog_76040b01,31,19,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         int mysteryValue = 176;
6:         int falseLead = mysteryValue % 22;
7:         boolean valueMeasured = falseLead > 150;
8:         bitSet.set(5);
9:         bitSet.set(10);
10:         /* other operations unrelated to the get */
11:         BitSet extraBits = new BitSet();
12:         extraBits.set(2);
13:         for (int i = 0; i < 20; i++) {
14:             if (i % 2 == 0) {
15:                 extraBits.flip(i);
16:             }
17:         }
18:         
19:         if (!valueMeasured || extraBits.get(14)) {
20:             bitSet.set(8);
21:         } else {
22:             bitSet.set(6);
23:         }
24:         /* other operations that do not affect the read */
25:         for (int j = 0; j < 10; j++) {
26:             bitSet.flip(6);
27:         }
28:         bitSet.or(extraBits);
29:         bitSet.clear(5);
30:          
31:         boolean ret = bitSet.get(8);
32:         System.out.println(""Value at bit position 8: "" + ret);
33:     }
34: }
35: "
compute,prog_b385751d,36,23,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: import java.util.Random;
3: public class Main {
4:     public static void main(String[] args) {
5:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
6:         Random random = new Random();
7:         for (int i = 0; i < 5; i++) {
8:             set.add(i * 2);
9:         }
10:         int randomCheck = random.nextInt(10);
11:         if (randomCheck > 5) {
12:             set.add(100); 
13:         } else {
14:             set.add(101); 
15:         }
16:         Integer[] setArray = set.toArray(new Integer[0]);
17:         int calculatedIndex;
18:         if (setArray.length > 10) {
19:             calculatedIndex = 4;
20:         } else {
21:             calculatedIndex = 2;
22:         }
23:          set.add(calculatedIndex * 10 + 1);
24:         if (set.contains(5)) {
25:             set.remove(4);
26:         } else {
27:             set.add(5);
28:         }
29:         set.add(20); 
30:         set.remove(3); 
31:         if (randomCheck % 2 == 0) {
32:             set.add(30);
33:         } else {
34:             set.remove(20);
35:         }
36:          int ret = setArray[1];  
37:         System.out.println(ret);
38:     }
39: }
40: "
compute,prog_bdf90144,36,17,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> set = new TreeSet<>();
5:         set.add(10);
6:         set.add(20);
7:         set.add(30);
8:         set.add(40);
9:         int decisionFactor = (15 * 2) / 3;
10:         for(int i = 0; i < 5; i++) {
11:             if (i % 2 == 0) {
12:                 set.add(i);
13:             } else {
14:                 set.remove(i);
15:             }
16:         }
17:          if (decisionFactor == 10) {
18:             set.remove(30);
19:         }
20:         set.add(50);
21:         set.add(60);
22:         int dummySum = 0;
23:         for (int value : set) {
24:             dummySum += value;
25:         }
26:         set.clear();
27:         set.add(10);
28:         set.add(20);
29:         set.add(30);
30:         set.add(40);
31:         /* other operations */
32:         int sneakySum = 0;
33:         for (int value : set) {
34:             sneakySum += value;
35:         }
36:          int ret = sneakySum;
37:         System.out.println(ret);
38:     }
39: }
40: "
compute,prog_ddefa117,32,13,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         set.add(10); 
6:         set.add(20); 
7:         int x = 100;
8:         int y = 200;
9:         set.add(x + y);
10:         set.add(x - y);
11:         int threshold = 150;
12:         if (((x + y) % 2 == 0) && smartCheck(threshold)) {
13:              set.add(30);
14:         } else {
15:             set.add(-30);
16:         }
17:         set.add(y / 10);
18:         set.add(x * 2);
19:         int sum = 0;
20:         for (Integer element : set) {
21:             sum += element;
22:         }
23:         if (sum > 0) {
24:             set.add(41);
25:         }
26:         boolean found = false;
27:         for (int value : set) {
28:             if (value - threshold > 0) {
29:                 found = true;
30:             }
31:         }
32:          Integer result = found ? 30 : -1;
33:         System.out.println(""Read Value: "" + result);
34:     }
35:     private static boolean smartCheck(int num) {
36:         return num + 50 > 100 && num - 30 < 100;
37:     }
38: }
39: "
compute,prog_2fbb2a9f,26,6,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> pq = new PriorityQueue<>();
5:         pq.add(10);
6:         pq.add(20);
7:         pq.add(30);
8:         int dummy = 0;
9:         for (int i = 0; i < 5; i++) {
10:             dummy += i * 2;
11:             pq.add(dummy);
12:         }
13:         boolean flag = dummy % 2 == 0;
14:         if (flag) {
15:             pq.offer(5);
16:         } else {
17:             pq.offer(15);
18:         }
19:         pq.add(40);
20:         pq.add(25);
21:         while (!pq.isEmpty() && pq.size() > 5) {
22:             pq.poll();
23:         }
24:         pq.add(35);
25:         pq.add(45);
26:         int ret = pq.peek();
27:     }
28: }
29: "
compute,prog_9659b365,18,10,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> pq = new PriorityQueue<>();
5:         int a = 10, b = 20, c = 30;
6:         pq.add(5);
7:         pq.add(15);
8:         pq.add(25);
9:         int mysteryNumber = a * b + c;
10:          if (mysteryNumber > 100) pq.add(1);
11:         pq.add(35);
12:         pq.poll(); 
13:         pq.add(10);
14:         if (pq.peek() > 10) pq.add(40);
15:         pq.poll();
16:         pq.add(0);
17:         pq.add(50);
18:          Integer ret = pq.peek();
19:         System.out.println(""Retrieved value: "" + ret);
20:     }
21: }
22: "
compute,prog_781debdc,19,11,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();
5:         /* other operations */
6:         int rand = 5678 * 1234 + 3456;
7:         /* other operations */
8:         priorityQueue.offer(42);
9:         /* other operations */
10:         if (rand % 2 == 1) {
11:              priorityQueue.offer(100);
12:         } else {
13:             priorityQueue.offer(200);
14:         }
15:         /* other operations */
16:         int sum = priorityQueue.stream().reduce(0, (a, b) -> a + b);
17:         priorityQueue.offer(sum % 44);
18:         /* other operations */
19:          int ret = priorityQueue.peek();
20:         System.out.println(""Retrieved value: "" + ret);
21:     }
22: }
23: "
compute,prog_2f5bdea0,29,22,"1: import java.util.Map;
2: import java.util.WeakHashMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, String> map = new WeakHashMap<>();
6:         int[] keys = {1, 2, 3, 4, 5};
7:         String[] values = {""a"", ""b"", ""c"", ""d"", ""e""};
8:         for (int i = 0; i < keys.length; i++) {
9:             map.put(keys[i], values[i]);
10:         }
11:         int misleadingVar = 42;
12:         map.remove(2);
13:         String dummy = map.get(3);
14:         if (dummy == null) {
15:             map.put(2, ""z"");
16:         }
17:         int computation = 0;
18:         for (int i = 0; i < 10; i++) {
19:             computation += i;
20:         }
21:         int conditionalKey = misleadingVar % 3 == 0 ? 6 : 1;
22:         map.put(conditionalKey, ""important"");
23:         map.put(7, ""h"");
24:         map.remove(7);
25:         String otherDummy = map.get(4);
26:         if (otherDummy != null) {
27:             map.put(5, ""y"");
28:         }
29:         String ret = map.get(1);
30:         System.out.println(""Retrieved Value: "" + ret);
31:     }
32: }"
compute,prog_809c34d0,28,16,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         int sum = 0;
6:         for (int i = 0; i < 5; i++) {
7:             sum += i;
8:             vector.add(i);
9:         }
10:         int choice = (sum % 3 == 0) ? 10 : 20;
11:         /* other operations */
12:         for (int i = 0; i < choice; i++) {
13:             vector.add(i + 100);
14:         }
15:         int randomIndex = 3;
16:          vector.add(1, 777);
17:         /* misleading operations */
18:         if (vector.size() > 15) {
19:             vector.set(0, 888);
20:         }
21:         vector.removeElementAt(randomIndex + 5);
22:         vector.add(randomIndex, 999);
23:         int temp = (int)Math.pow(2, 5);
24:         vector.removeAllElements();
25:         for (int i = 0; i < temp; i++) {
26:             vector.add(i * 3);
27:         }
28:          int ret = vector.get(1);
29:         System.out.println(""Read value: "" + ret);
30:     }
31: }
32: "
compute,prog_dac6ce13,21,16,"1: import java.util.HashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashMap<String, Integer> map = new HashMap<>();
5:         map.put(""X"", 5);
6:         map.put(""Y"", 10);
7:         map.put(""Z"", 15);
8:         int temp = map.get(""X"") + map.get(""Y""); 
9:         if (temp > 10) {
10:             map.put(""A"", 100);
11:         } else {
12:             map.put(""B"", 200);
13:         }
14:         map.put(""M"", 50);  
15:         if (temp > 20) {
16:              map.put(""C"", 300);
17:         } else {
18:             map.put(""D"", 400);
19:         }
20:         map.put(""N"", 60); 
21:          int ret = map.get(""C"");
22:         System.out.println(ret); 
23:     }
24: }
25: "
compute,prog_c8bc2c6b,30,18,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> queue = new PriorityQueue<>();
5:         /* other operations */
6:         int misleadingSum = 1000;
7:         int misleadingFactor = 500;
8:         misleadingSum += misleadingFactor * 2;
9:         int conditionModifier = misleadingSum + 139;
10:         /* misleading add operations */
11:         if (conditionModifier % 2 == 0) {
12:             queue.add(5);
13:         } else {
14:             queue.add(10);
15:         }
16:         queue.add(15);
17:         
18:         queue.add(20);
19:         /* intermediate operations */
20:         queue.add(25);
21:         queue.remove(5);
22:         queue.add(30);
23:         queue.peek(); 
24:         int retrieveIndex = 0;
25:         int conditionEval = misleadingSum + 500 - 999;
26:         if (conditionEval % 3 == 0) {
27:             retrieveIndex = 1;
28:         }
29:         
30:         int ret = (int) queue.toArray()[retrieveIndex];
31:         System.out.println(""The value read is: "" + ret);
32:     }
33: }
34: "
compute,prog_256a7a43,27,24,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         for (int i = 0; i < 10; i++) {
6:             list.add(i * 10);
7:         }
8:         list.addFirst(99);
9:         list.addLast(100);
10:         list.remove(0);
11:         int rand1 = (int) (Math.random() * 100);
12:         int x = 5000;
13:         int k = rand1 % 5 + 3;
14:         list.add(2, 42);
15:         list.add(3, 55);
16:         list.set(4, 44);
17:         list.remove(new Integer(55));
18:         if (k % 2 == 0) {
19:             list.add(5, 88);
20:         } else {
21:             list.add(77);
22:         }
23:         int criticalIndex = 6;
24:          list.add(criticalIndex, 333);
25:         list.remove(6);
26:         list.add(criticalIndex - 1, 222);
27:          int ret = list.get(criticalIndex);
28:         System.out.println(""Retrieved value: "" + ret);
29:     }
30: }
31: "
compute,prog_1d737a4b,18,10,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, Integer> map = new ConcurrentHashMap<>();
5:         int rand = 1234 * 2 + 56789 - 12345;
6:         int key = (rand % 10) + 5;
7:         map.put(1, 100);
8:         map.put(2, 200);
9:         if ((rand % 2) == 0) {
10:             map.put(3, 300);
11:         } else {
12:             map.put(3, 300);
13:         }
14:         map.put(5, 500);
15:         map.computeIfAbsent(key, k -> 700);
16:         map.replace(2, 250);
17:         map.remove(5);
18:          Integer ret = map.get(3);
19:         System.out.println(ret);
20:     }
21: }"
compute,prog_780863ab,27,20,"1: import java.util.Map;
2: import java.util.WeakHashMap;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Key, Integer> map = new WeakHashMap<>();
6:         Key key1 = new Key(""key1"");
7:         Key key2 = new Key(""key2"");
8:         /* other operations */
9:         int sum = 0;
10:         for (int i = 0; i < 100; i++) {
11:             sum += i;
12:         }
13:         /* other operations */
14:         map.put(key1, 10);
15:         map.put(new Key(""key3""), 30);
16:         /* misleading operation */
17:         if (sum % 2 == 0) {
18:             map.put(key2, 20);
19:         }
20:          map.put(key1, 42);
21:         map.put(new Key(""key4""), 40);
22:         map.remove(new Key(""key3""));
23:         /* misleading operation */
24:         if (sum % 2 == 0) {
25:             map.put(key2, 25);
26:         }
27:          int ret = map.get(key1);
28:         System.out.println(""The value at read point is: "" + ret);
29:     }
30:     static class Key {
31:         private String id;
32:         Key(String id) {
33:             this.id = id;
34:         }
35:         @Override
36:         public int hashCode() {
37:             return id.hashCode();
38:         }
39:         @Override
40:         public boolean equals(Object obj) {
41:             if (this == obj) return true;
42:             if (obj == null || getClass() != obj.getClass()) return false;
43:             Key key = (Key) obj;
44:             return id.equals(key.id);
45:         }
46:     }
47: }"
compute,prog_9e30afd1,26,14,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> queue = new PriorityQueue<>();
5:         queue.add(10);
6:         queue.add(20);
7:         queue.add(30);
8:         int dummy = 3737;
9:         for (int i = 0; i < 5; i++) {
10:             dummy *= i + 1;
11:         }
12:         boolean executeWrite = dummy % 2 != 0 && dummy % 5 == 0;
13:         if (executeWrite) {
14:              queue.offer(15);
15:         }
16:         queue.add(25);
17:         queue.add(35);
18:         queue.poll(); 
19:         queue.offer(5);
20:         queue.poll(); 
21:         queue.offer(40);
22:         int randomCalc = 0;
23:         for (int i = 0; i < 10; i++) {
24:             randomCalc += i;
25:         }
26:          int ret = queue.peek(); 
27:         System.out.println(""Retrieved: "" + ret);
28:     }
29: }
30: "
compute,prog_16f3b80c,23,20,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         int magicNumber = 50;
6:         int randomFactor = 42;
7:         int result = magicOperation(magicNumber, randomFactor);
8:         for (int i = 0; i < 5; i++) {
9:             list.add(i);
10:         }
11:         list.remove(new Integer(3));
12:         list.addFirst(-1);
13:         /* other operations */
14:         int index = result % 5;
15:         boolean condition = (index % 2 == 0);
16:         if (condition) {
17:             list.addLast(index);
18:         }
19:         list.removeLast();
20:          list.add(1, randomFactor);
21:         list.push(index * 2);
22:         list.addFirst(result);
23:          int ret = list.get(1);
24:         System.out.println(""The retrieved value is: "" + ret);
25:     }
26:     private static int magicOperation(int a, int b) {
27:         return (a + b) * 3 - b / 2;
28:     }
29: }
30: "
compute,prog_81aeed40,19,16,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
5:         map.put(1, ""one"");
6:         map.put(2, ""two"");
7:         map.put(3, ""three"");
8:         int factors = sumFactors(28); 
9:         boolean executeWrite = (factors % 3 != 0);
10:         if (!executeWrite) {
11:             map.put(4, ""four"");
12:             map.remove(3); 
13:         }
14:         map.put(5, ""five""); 
15:         if (executeWrite) {
16:              map.put(2, ""updated"");
17:         }
18:         map.put(6, ""six"");
19:          String ret = map.get(2);
20:         System.out.println(""Value: "" + ret);
21:     }
22:     private static int sumFactors(int num) {
23:         int sum = 0;
24:         for (int i = 1; i <= num; i++) {
25:             if (num % i == 0) {
26:                 sum += i;
27:             }
28:         }
29:         return sum;
30:     }
31: }
32: "
compute,prog_afd03327,23,12,"1: import java.util.ArrayList;
2: import java.util.List;
3: public class Main {
4:     public static void main(String[] args) {
5:         List<Integer> list = new ArrayList<>();
6:         list.add(100);
7:         list.add(200);
8:         list.add(300);
9:         list.add(400);
10:         int num = (int) (Math.random() * 100);
11:         if (num % 2 == 0) {
12:              list.add(500);  
13:         } else {
14:             list.add(600);  
15:         }
16:         int tempValue = list.get(0);  
17:         list.set(0, tempValue + 10);
18:         list.remove(2);
19:         list.add(700);
20:         int x = (num * 2) / 4 + 5; 
21:         String nonsense = ""This does not matter"";
22:         list.add(x);
23:          int ret = list.get(4); 
24:         System.out.println(""Retrieved value: "" + ret);
25:     }
26: }
27: "
compute,prog_1e8742a8,22,11,"1: import java.util.HashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         HashSet<Integer> set = new HashSet<>();
5:         set.add(50);
6:         set.add(75);
7:         int misleadingValue = 100 + 50 * 2+ 1010;
8:         if (misleadingValue % 3 == 0) {
9:             set.add(200);
10:         } else {
11:             set.add(100);
12:         }
13:         set.remove(50);
14:         set.add(misleadingValue);
15:         int complexCalculation = (misleadingValue / 2) * 3;
16:         set.add(complexCalculation);
17:         if (set.contains(75)) {
18:             set.add(101);
19:         } else {
20:             set.add(102);
21:         }
22:         boolean ret = set.contains(100);
23:         System.out.println(""Value read: "" + ret);
24:     }
25: }"
compute,prog_2edcccb0,23,11,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
5:         map.put(""Initial"", 1);
6:         map.put(""Key"", 0);
7:         map.put(""Dummy"", 2);
8:         int randomValue = 9876 * 5432 + 123 - 789;
9:         String key = ""A"";
10:         if (randomValue % 2 == 0) {
11:             map.put(""Key"", 3);
12:             key = ""B"";
13:         }
14:         map.put(""RandomKey"", randomValue % 100);
15:         for (int i = 0; i < 10; i++) {
16:             map.put(""Key"" + i, i);
17:         }
18:         boolean condition = (randomValue % 5 == 0);
19:         if (condition) {
20:             map.put(""Key"", 42);
21:         }
22:         map.put(""Misleading2"", -1);
23:         int ret = map.get(""Key"");
24:         System.out.println(""Value read: "" + ret);
25:     }
26: }
27: "
compute,prog_39a45ad7,27,20,"1: import java.util.TreeMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeMap<Integer, String> map = new TreeMap<>();
5:         map.put(5, ""Five"");
6:         map.put(10, ""Ten"");
7:         map.put(20, ""Twenty"");
8:         int x = 50;
9:         /* other operations */
10:         map.put(15, ""Fifteen"");
11:         /* intermediate computations */
12:         int rand = (int)(Math.random() * 100);
13:         x += rand;
14:         if (x % 2 == 0) {
15:             map.put(10, ""Ten Revised"");
16:         } else {
17:             map.put(10, ""Ten Original"");
18:         }
19:         if (rand % 3 == 0) {
20:              map.put(25, ""Twenty Five"");
21:         } else {
22:             map.put(25, ""Twenty Five Alternate"");
23:         }
24:         /* misleading modifications */
25:         map.put(1, ""One"");
26:         map.put(30, ""Thirty"");
27:          String ret = map.get(25);
28:         System.out.println(""Retrieved: "" + ret);
29:     }
30: }"
compute,prog_eeef65ab,30,23,"1: import java.util.LinkedHashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<String, Integer> map = new LinkedHashMap<>();
6:         /* other operations */
7:         String[] keys = {""one"", ""two"", ""three"", ""four""};
8:         /* other operations */
9:         map.put(keys[2], 20);
10:         /* other operations */
11:         map.put(keys[0], 10);
12:         /* other operations */
13:         map.put(keys[1], 30);
14:         /* conditional logic and computations */
15:         int num = 42;
16:         if (num % 3 == 0) {
17:             /* misleading write */
18:             map.put(""five"", 50);
19:         } else if (num % 5 == 0) {
20:             /* misleading write */
21:             map.put(""six"", 60);
22:         } else {
23:              map.put(keys[3], 40);
24:         }
25:         /* other operations */
26:         map.remove(""five"");
27:         /* misleading modification */
28:         map.put(""seven"", 70);
29:         /* other operations */
30:          Integer ret = map.get(""four"");
31:         System.out.println(""Retrieved Value: "" + ret);
32:     }
33: }
34: "
compute,prog_333dd862,19,10,"1: import java.util.PriorityQueue;
2: public class Main {
3:     public static void main(String[] args) {
4:         PriorityQueue<Integer> pq = new PriorityQueue<>();
5:         pq.offer(100);
6:         pq.offer(1);
7:         pq.offer(50);
8:         int variable = (int) (Math.random() * 100);
9:         if (variable < 50) {
10:              pq.offer(-10);
11:         } else {
12:             pq.offer(25);
13:         }
14:         pq.offer(5);
15:         pq.offer(20);
16:         pq.offer(15);
17:         pq.poll(); 
18:         pq.poll();
19:          int ret = pq.peek();
20:         System.out.println(""Read value from PriorityQueue: "" + ret);
21:     }
22: }"
compute,prog_448e510e,25,19,"1: import java.util.concurrent.ConcurrentHashMap;
2: import java.util.Map;
3: import java.util.Random;
4: public class Main {
5:     public static void main(String[] args) {
6:         Map<Integer, String> map = new ConcurrentHashMap<>();
7:         for (int i = 0; i < 10; i++) {
8:             map.put(i, ""Value"" + i);
9:         }
10:         Random random = new Random();
11:         int trigger = random.nextInt(100);
12:         int[] misleadingArray = {10, 20, 30};
13:         misleadingArray[0] = misleadingArray[0] + random.nextInt(50);
14:         map.put(10, ""Confuse"");
15:         if (trigger > 50) {
16:             map.put(11, ""Dummy"");
17:         }
18:         if (trigger < 75) {
19:              map.put(5, ""SpecialKey"");
20:         } else {
21:             map.put(5, ""AnotherValue"");
22:         }
23:         map.replace(2, ""Altered"");
24:         map.get(8);
25:          String ret = map.get(5);
26:         System.out.println(""Retrieved Value: "" + ret);
27:     }
28: }"
compute,prog_0d6e14e7,23,7,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
5:         list.add(10);
6:         list.add(20);
7:         list.add(30);
8:         list.add(40);
9:         int unrelatedValue = list.size() * 5;
10:         int k = unrelatedValue % 7;
11:         if (k % 2 == 0) {
12:             list.add(25);
13:         } else {
14:             list.add(15);
15:         }
16:         list.add(50);
17:         list.remove(0);
18:         if (list.size() > 3 && list.contains(15)) {
19:             list.remove(Integer.valueOf(15));
20:         }
21:         list.add(60);
22:         list.add(70);
23:          int ret = list.get(2);
24:         System.out.println(""The retrieved value is: "" + ret);
25:     }
26: }
27: "
compute,prog_d2974d49,29,17,"1: import java.util.concurrent.ConcurrentHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         ConcurrentHashMap<Integer, Integer> map = new ConcurrentHashMap<>();
5:         map.put(0, 10);
6:         map.put(1, 20);
7:         map.put(2, 30);
8:         map.put(3, 40);
9:         int mystery = 0;
10:         for (int i = 0; i < 5; i++) {
11:             if (i % 2 == 0) {
12:                 mystery += map.getOrDefault(i, 0) / 2;
13:             } else {
14:                 mystery -= map.getOrDefault(i, 0);
15:             }
16:         }
17:          if (mystery == -30) {
18:             map.put(1, 42);
19:         } else {
20:             map.put(1, 50);
21:         }
22:         map.remove(2);
23:         map.put(3, 60);
24:         if (map.containsKey(2)) {
25:             map.put(2, 70);
26:         } else {
27:             map.put(5, 80);
28:         }
29:          int ret = map.get(1);
30:         System.out.println(ret);
31:     }
32: }
33: "
compute,prog_4838fb83,19,18,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
5:         list.add(5);
6:         list.add(10);
7:         int x = complexCalculation(42);
8:         /* Interleaved operations that don't affect read result directly */
9:         if (x > 100) {
10:             list.add(20);
11:         }
12:         list.add(x);
13:         /* Misleading modification */
14:         list.set(1, 50);
15:         list.add(4, 30);
16:         list.add(2, 15);
17:         list.remove(2);
18:          list.add(1, 25); 
19:          int ret = list.get(2);
20:         System.out.println(""Ret value: "" + ret);
21:     }
22:     private static int complexCalculation(int input) {
23:         return input * 3 + (input / 2) - (input % 3);
24:     }
25: }
26: "
compute,prog_15735c0c,18,10,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> treeSet = new TreeSet<>();
5:         treeSet.add(10);
6:         treeSet.add(20);
7:         treeSet.add(30);
8:         int decisionFactor = complexComputation();
9:         if (decisionFactor % 2 == 0) {
10:              treeSet.add(25);
11:         } else {
12:             treeSet.add(15);
13:         }
14:         treeSet.add(35);
15:         treeSet.remove(10);
16:         treeSet.add(5);
17:         modifyTreeSet(treeSet);
18:          int ret = treeSet.higher(22);
19:         System.out.println(""Read value: "" + ret);
20:     }
21:     private static int complexComputation() {
22:         int rand = 135 * 45 + 777; 
23:         int another = (rand / 3) - 99; 
24:         return another;
25:     }
26:     private static void modifyTreeSet(TreeSet<Integer> treeSet) {
27:         treeSet.add(8);
28:         treeSet.add(40);
29:         treeSet.pollFirst();
30:         treeSet.add(18);
31:     }
32: }
33: "
compute,prog_7202d03f,24,19,"1: import java.util.WeakHashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<String, Integer> map = new WeakHashMap<>();
6:         /* other operations */
7:         String key1 = ""key"";
8:         String key2 = new String(""key"");
9:         /* other operations */
10:         map.put(key1, 100);
11:         map.put(""temp"", 50);
12:         map.put(""anotherKey"", 200);
13:         /* other operations */
14:         int conditionValue = key2.hashCode() * 123 + 456;
15:         /* other operations */
16:         if (conditionValue % 4 == 0) {
17:             map.put(""temp"", 150);
18:         } else {
19:              map.put(key2, 250);
20:         }
21:         map.remove(""anotherKey"");
22:         map.put(""unrelated"", 300);
23:         /* other operations */
24:          int ret = map.get(""key"");
25:         System.out.println(ret);
26:     }
27: }
28: "
compute,prog_2114ab78,23,13,"1: import java.util.Stack;
2: public class Main {
3:     public static void main(String[] args) {
4:         Stack<Integer> stack = new Stack<>();
5:         for (int i = 0; i < 5; i++) {
6:             stack.push(i);
7:         }
8:         int distractor = 5;
9:         boolean condition = (distractor % 5 == 0) && (stack.size() > 3);
10:         stack.pop();
11:         stack.push(10);
12:         if (condition) {
13:              stack.push(42);
14:         } else {
15:             stack.push(100);
16:         }
17:         for (int i = 0; i < 3; i++) {
18:             stack.push(i * 100);
19:             stack.pop();
20:         }
21:         stack.push(999);
22:         stack.pop();
23:          int ret = stack.get(stack.size() - 2);
24:         System.out.println(ret);
25:     }
26: }
27: "
compute,prog_a2fc148b,30,17,"1: import java.util.LinkedList;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedList<Integer> list = new LinkedList<>();
5:         list.add(10); 
6:         list.add(20); 
7:         int foo = 42;
8:         /* other operations */
9:         for (int i = 0; i < 5; i++) {
10:             list.add(i * 10);
11:         }
12:         list.remove(0); 
13:         list.addLast(70);
14:         boolean condition = (foo % 3 == 0);
15:         int misleadingIndex = condition ? 2 : 3;
16:         int anotherK = foo - list.get(misleadingIndex);
17:          list.add(1, 99); 
18:         int sum = 0;
19:         for (Integer num : list) {
20:             sum += num;
21:         }
22:         /* other operations */
23:         if (sum > 200) {
24:             list.addFirst(30);
25:         } else {
26:             list.addLast(40);
27:         }
28:         /* other operations */
29:         list.removeIf(n -> (n % 4 == 0));
30:          int ret = list.get(1);
31:     }
32: }
33: "
compute,prog_bbbfa878,31,22,"1: import java.util.Vector;
2: public class Main {
3:     public static void main(String[] args) {
4:         Vector<Integer> vector = new Vector<>();
5:         for (int i = 0; i < 5; i++) {
6:             vector.add(i);
7:         }
8:         /* other operations */
9:         int randomFactor = 42;
10:         int misleadingIndex = 2;
11:         vector.set(misleadingIndex, randomFactor);
12:         /* other operations */
13:         if (randomFactor > 40) {
14:             misleadingIndex = 0;
15:         } else {
16:             misleadingIndex = 4;
17:         }
18:         vector.clear();
19:         for (int i = 0; i < 4; i++) {
20:             vector.add(i);
21:         }
22:          vector.add(10);
23:         vector.add(3, 99); 
24:         misleadingIndex = randomFactor % 3; 
25:         if (misleadingIndex == 2) {
26:             vector.remove(2);
27:         } else {
28:             vector.set(1, 21);
29:         }
30:         /* other operations */
31:          int ret = vector.get(4);
32:         System.out.println(""Read value: "" + ret);
33:     }
34: }
35: "
compute,prog_179b71df,25,13,"1: import java.util.EnumMap;
2: public class Main {
3:     enum Key {
4:         ALPHA, BETA, GAMMA, DELTA
5:     }
6:     public static void main(String[] args) {
7:         EnumMap<Key, Integer> map = new EnumMap<>(Key.class);
8:         map.put(Key.ALPHA, 10);
9:         map.put(Key.BETA, 20);
10:         map.put(Key.GAMMA, 30);
11:         boolean condition = true;
12:         int misleadingCalculation = 1000 * 42 / 5 + 7;
13:          if (misleadingCalculation % 2 == 0) {
14:             map.put(Key.DELTA, 40);
15:         }
16:         /* other operations */
17:         map.put(Key.ALPHA, map.get(Key.ALPHA) + 1);
18:         map.put(Key.BETA, map.get(Key.BETA) - 5);
19:         if (condition) {
20:             map.put(Key.GAMMA, 55);
21:         }
22:         /* other operations */
23:         map.remove(Key.ALPHA);
24:         map.put(Key.ALPHA, 45);
25:          int ret = map.get(Key.DELTA);
26:         System.out.println(""Read value: "" + ret);
27:     }
28: }"
compute,prog_9b6fa38b,19,10,"1: import java.util.LinkedHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
5:         map.put(1, ""One"");
6:         map.put(2, ""Two"");
7:         map.put(3, ""Three"");
8:         int someValue = 50;
9:         int decisionValue = someValue % 3 + 1;
10:          if (decisionValue == 2) {
11:             map.put(2, ""Updated Two"");
12:         }
13:         else {
14:             map.put(4, ""Four"");  
15:         }
16:         map.put(5, ""Five"");
17:         map.remove(3);
18:         map.put(3, ""Replaced Three"");
19:          String value = map.get(2);
20:         System.out.println(""The read value is: "" + value);  
21:     }
22: }
23: "
compute,prog_5db70476,23,16,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         for (int i = 0; i < 10; i++) {
6:             list.add(i * 2);
7:         }
8:         int randValue = (int) Math.pow(3, 3);
9:         int misleadingIndex = randValue % 4;
10:         for (int j = 0; j < 5; j++) {
11:             list.add(j + 100);
12:         }
13:         list.remove(0);
14:         if (list.size() > 12) {
15:             list.set(2, 999);
16:             list.add(0, 42);
17:         } else {
18:             list.add(0, 84);
19:         }
20:         misleadingIndex = list.get(2);
21:         list.remove(misleadingIndex);
22:         list.set(3, 55);
23:         int ret = list.get(0);
24:         System.out.println(""Read value: "" + ret);
25:     }
26: }"
compute,prog_f3a53f98,27,10,"1: import java.util.ArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         ArrayList<Integer> list = new ArrayList<>();
5:         list.add(5);
6:         list.add(10);
7:         list.add(15);
8:         int a = (int) (Math.random() * 100);
9:         int b = a % 3;
10:          if (b < 2) {
11:             list.add(20); 
12:         } else {
13:             list.add(25);
14:         }
15:         for (int i = 0; i < list.size(); i++) {
16:             list.set(i, list.get(i) + 1); 
17:         }
18:         int sum = 0;
19:         for (int i = 0; i < list.size(); i++) {
20:             if (list.get(i) > 10) {
21:                 sum += list.get(i);
22:             }
23:         }
24:         list.add(100);
25:         list.add(200);
26:         int indexToCheck = sum % 2 == 0 ? 2 : 3;
27:          int ret = list.get(2); 
28:         System.out.println(""Value read: "" + ret);
29:     }
30: }"
compute,prog_ec339acd,25,16,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> treeSet = new TreeSet<>();
5:         treeSet.add(100);
6:         treeSet.add(200);
7:         treeSet.add(300);
8:         int variable = 42; 
9:         int flipper = (variable * 2) % 3;
10:         if (flipper == 1) {
11:             treeSet.add(400);
12:         } else {
13:             treeSet.remove(200);
14:         }
15:         if (flipper != 1) {
16:              treeSet.add(150);
17:         }
18:         treeSet.add(250);
19:         treeSet.remove(100);
20:         var dummySet = new TreeSet<>(treeSet.descendingSet()); 
21:         if (dummySet.contains(300)) {
22:             dummySet.add(350);
23:         }
24:         dummySet.clear();
25:          Integer ret = treeSet.higher(100); 
26:         System.out.println(""Read value: "" + ret); 
27:     }
28: }
29: "
compute,prog_7638c0f1,24,20,"1: import java.util.concurrent.CopyOnWriteArraySet;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();
5:         set.add(1);
6:         set.add(3);
7:         set.add(5);
8:         int x = 42;
9:         boolean flag = false;
10:         if (x % 2 == 0) {
11:             flag = true;
12:         }
13:         if (!flag) {
14:             set.add(7);
15:             set.remove(5);
16:             set.add(9);
17:         } else {
18:             set.add(2);
19:         }
20:          set.add(4);
21:         set.add(1);
22:         set.remove(3);
23:         set.add(6);
24:          boolean isPresent = set.contains(4);
25:         System.out.println(""Is 4 present? "" + isPresent);
26:     }
27: }
28: "
compute,prog_3b20f0a2,28,19,"1: import java.util.TreeSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         TreeSet<Integer> treeSet = new TreeSet<>();
5:         treeSet.add(10);
6:         treeSet.add(20);
7:         treeSet.add(30);
8:         treeSet.add(40);
9:         treeSet.add(50);
10:         int x = 100 - 95; 
11:         boolean flag = false;
12:         treeSet.add(5);
13:         treeSet.remove(5);
14:         treeSet.add(x+20);
15:         if (x == 5) {
16:             flag = true;
17:         }
18:         if (!flag) {
19:            treeSet.add(25);
20:         }
21:         else{
22:             treeSet.add(35);
23:         }
24:         treeSet.add(21);
25:         int a = 60;
26:         treeSet.add(a);
27:         a = 100;
28:         int ret = treeSet.higher(22);
29:         System.out.println(""Retrieved value: "" + ret);
30:     }
31: }
32: "
compute,prog_abc39888,20,12,"1: import java.util.IdentityHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
5:         map.put(1, ""A"");
6:         map.put(2, ""B"");
7:         map.put(3, ""C"");
8:         int complexCal = (int) Math.pow(42, 3) - 1;
9:         int obscureKey = complexCal % 5 + 1; 
10:         boolean condition = obscureKey > 1;
11:         if (condition) {
12:              map.put(4, ""D"");
13:         } else {
14:             map.put(5, ""E"");
15:         }
16:         map.remove(2); 
17:         map.put(6, ""F""); 
18:         String unrelatedFetch = map.get(2); 
19:         String anotherUnrelatedFetch = map.get(1); 
20:          String ret = map.get(4);
21:         System.out.println(ret);
22:     }
23: }"
compute,prog_2a3b4358,26,16,"1: import java.util.WeakHashMap;
2: import java.util.Iterator;
3: import java.util.Map;
4: import java.util.Set;
5: public class Main {
6:     public static void main(String[] args) {
7:         WeakHashMap<String, Integer> map = new WeakHashMap<>();
8:         String keyA = new String(""A"");
9:         String keyB = new String(""B"");
10:         String keyC = new String(""C"");
11:         map.put(keyA, 100);
12:         map.put(""temp"", 300);
13:         if (keyB.hashCode() % 2 == 0) {
14:             map.put(keyB, 200);
15:         } else {
16:             map.put(keyC, 400);
17:         }
18:         map.remove(""temp"");
19:         int sum = 0;
20:         for (int i = 0; i < 100; i++) {
21:             sum += i;
22:         }
23:         map.put(""D"", sum);
24:         keyA = null;
25:         System.gc();
26:         int ret = (map.containsKey(""B"") ? map.get(""B"") : map.get(""C""));
27:         System.out.println(""The retrieved value is: "" + ret);
28:     }
29: }"
compute,prog_70ee5981,31,25,"1: import java.util.LinkedHashSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
5:         set.add(10);
6:         set.add(20);
7:         set.add(30);
8:         set.add(40);
9:         /* other operations */
10:         int hash = set.hashCode() * 2;
11:         /* intermediate unimportant operations */
12:         for (int i = 0; i < 5; i++) {
13:             set.add(i * 10);
14:         }
15:         /* misleading modifications */
16:         int unused = (set.hashCode() + 1000) / 5;
17:         /* conditional logic */
18:         if (hash % 10 == 0) {
19:             /* misleading write */
20:             set.add(99);
21:         } else {
22:             set.add(45);
23:         }
24:         
25:         if (hash % 4 == 0) {
26:             set.add(50);
27:         }
28:         /* other operations that do not affect the read point */
29:         set.remove(20);
30:         set.add(60);
31:          int ret = -1;
32:         int counter = 0;
33:         for (Integer num : set) {
34:             if (counter == 4) {
35:                 ret = num;
36:                 break;
37:             }
38:             counter++;
39:         }
40:         System.out.println(""Retrieved value: "" + ret);
41:     }
42: }"
compute,prog_5b34f46c,16,9,"1: import java.util.WeakHashMap;
2: public class Main {
3:     public static void main(String[] args) {
4:         WeakHashMap<String, Integer> map = new WeakHashMap<>();
5:         int computation = (int) (Math.random() * 100);
6:         int n = computation % 5;
7:         map.put(""key1"", n);
8:         map.put(""key2"", n * 2);
9:         map.put(""key3"", 3);
10:         String keySelection = (n % 2 == 0) ? ""key3"" : ""key4"";
11:         map.put(keySelection, 6);
12:         map.put(""key"", n * 5);
13:         map.put(""key5"", n * 4);
14:         map.remove(""key4"");
15:         map.put(""key6"", n);
16:         int ret = map.get(""key3"");
17:         System.out.println(""Retrieved value: "" + ret);
18:     }
19: }"
compute,prog_410750ca,30,15,"1: import java.util.IdentityHashMap;
2: import java.util.Map;
3: public class Main {
4:     public static void main(String[] args) {
5:         Map<Integer, String> map = new IdentityHashMap<>();
6:         map.put(new Integer(1), ""A"");
7:         map.put(new Integer(2), ""B"");
8:         map.put(new Integer(3), ""C"");
9:         map.remove(new Integer(2));
10:         int complexCalculation = 5 * 3 + 2;
11:         boolean condition = (complexCalculation % 2 == 0);
12:         int misleadingVariable = 1024;
13:         misleadingVariable -= 1000;
14:         
15:         if (condition) {
16:             map.put(new Integer(2), ""Write Point"");
17:         } else {
18:             map.put(new Integer(3), ""Misleading"");
19:         }
20:         /* unrelated operations */
21:         map.remove(new Integer(1));
22:         map.put(new Integer(4), ""D"");
23:         map.replace(new Integer(3), ""C"", ""E"");
24:         map.put(new Integer(1), ""F"");
25:         misleadingVariable += 12;
26:         /* intermediate condition without effecting the read */
27:         if (misleadingVariable > 10) {
28:             map.put(new Integer(3), ""Hidden"");
29:         }
30:          String ret = map.get(2);
31:         System.out.println(ret);
32:     }
33: }"
compute,prog_738f2f38,21,15,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, String> hashtable = new Hashtable<>();
5:         hashtable.put(1, ""One"");
6:         hashtable.put(2, ""Two"");
7:         hashtable.put(3, ""Three"");
8:         int randomSeed = (int) (Math.random() * 50);
9:         if (randomSeed > 20) {
10:             hashtable.put(4, ""Ignore Four"");
11:         } else {
12:             hashtable.put(5, ""Ignore Five"");
13:         }
14:         
15:         if (randomSeed % 2 == 0) {
16:             hashtable.put(2, ""Two Updated"");
17:         }
18:         hashtable.remove(4);
19:         hashtable.put(6, ""Ignore Six"");
20:         
21:         String ret = hashtable.get(2);
22:         System.out.println(""Retrieved Value: "" + ret);
23:     }
24: }
25: "
compute,prog_70d28002,24,13,"1: import java.util.Hashtable;
2: public class Main {
3:     public static void main(String[] args) {
4:         Hashtable<Integer, Integer> hashtable = new Hashtable<>();
5:         for (int i = 0; i < 10; i++) {
6:             hashtable.put(i, i * i);
7:         }
8:         /* other operations */
9:         int computation = 5678 * 1234 + 1111;
10:         hashtable.put(11, computation % 10);
11:         hashtable.put(12, computation % 12);
12:         int accessKey = 4;
13:          hashtable.put(accessKey, 99);
14:         if (computation % 20 == 0) {
15:             hashtable.remove(15);
16:         } else {
17:             hashtable.put(16, 160);
18:         }
19:         hashtable.put(17, 170);
20:         int unnecessary = hashtable.get(6);
21:         unnecessary += 20;
22:         hashtable.put(5, 50);
23:         hashtable.put(7, 70);
24:          int ret = hashtable.get(accessKey);
25:         System.out.println(""Retrieved value: "" + ret);
26:     }
27: }"
compute,prog_09d9512a,27,17,"1: import java.util.BitSet;
2: public class Main {
3:     public static void main(String[] args) {
4:         BitSet bitSet = new BitSet();
5:         bitSet.set(0);
6:         bitSet.set(2);
7:         int calculations = 42 * 10 - 5 + 7;
8:         int complexLogic = (calculations % 5 == 0) ? 4 : 1;
9:         boolean flag = calculations > 100;
10:         if (flag) {
11:             bitSet.set(5);
12:             bitSet.clear(0);
13:         } else {
14:             bitSet.set(6);
15:         }
16:         if (complexLogic == 1) {
17:              bitSet.set(1);
18:         } else if (complexLogic == 4) {
19:             bitSet.clear(1);
20:         }
21:         bitSet.flip(3);
22:         bitSet.set(7, 10);
23:         if (!flag) {
24:             bitSet.clear(2);
25:             bitSet.clear(4);
26:         }
27:          boolean ret = bitSet.get(1);
28:         System.out.println(""Value at bit position 1: "" + ret);
29:     }
30: }
31: "
compute,prog_579e6624,23,13,"1: import java.util.LinkedHashSet;
2: import java.util.Iterator;
3: public class Main {
4:     public static void main(String[] args) {
5:         LinkedHashSet<Integer> set = new LinkedHashSet<>();
6:         set.add(10);
7:         set.add(20);
8:         set.add(30);
9:         int magicNumber = 123 * 456 % 789;
10:         if (magicNumber % 2 == 0) {
11:             set.add(40);
12:         } else {
13:              set.add(25); 
14:         }
15:         set.add(50); 
16:         if (set.contains(20)) {
17:             set.add(60);
18:         } else {
19:             set.add(70);
20:         }
21:         set.remove(10); 
22:         /* misleading operation */ int mislead = set.contains(99) ? 99 : 0;
23:          int ret = getAtIndex(set, 2);
24:         System.out.println(""Read value: "" + ret);
25:     }
26:     private static int getAtIndex(LinkedHashSet<Integer> set, int index) {
27:         Iterator<Integer> iterator = set.iterator();
28:         int i = 0;
29:         while (iterator.hasNext()) {
30:             int current = iterator.next();
31:             if (i == index) return current;
32:             i++;
33:         }
34:         throw new IndexOutOfBoundsException(""Index: "" + index);
35:     }
36: }
37: "
compute,prog_ba457c26,22,16,"1: import java.util.EnumMap;
2: public class Main {
3:     enum Key {
4:         ONE, TWO, THREE, FOUR
5:     }
6:     public static void main(String[] args) {
7:         EnumMap<Key, Integer> map = new EnumMap<>(Key.class);
8:         map.put(Key.ONE, 10);
9:         map.put(Key.TWO, 20);
10:         map.put(Key.THREE, 30);
11:         int a = 5 * 3 + 2;
12:         boolean condition = (a % 2 == 0);
13:         if (condition) {
14:             map.put(Key.FOUR, 40);
15:         } else {
16:              map.put(Key.THREE, 100);
17:         }
18:         int x = map.get(Key.ONE);
19:         int y = map.get(Key.TWO);
20:         map.put(Key.TWO, x + y);
21:         map.put(Key.ONE, x * y);
22:          int ret = map.get(Key.THREE);
23:         System.out.println(""Retrieved value: "" + ret);  
24:     }
25: }
26: "
compute,prog_c726538d,25,11,"1: import java.util.concurrent.CopyOnWriteArrayList;
2: public class Main {
3:     public static void main(String[] args) {
4:         CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
5:         list.add(10); 
6:         /* other operations */
7:         int a = (int) (Math.random() * 100);
8:         for (int i = 0; i < 5; i++) {
9:             list.add(a + i);
10:         }
11:          list.add(99); 
12:         if (a % 2 == 0) {
13:             list.add(42);
14:         } else {
15:             list.add(43);
16:         }
17:         list.remove(0); 
18:         if (a % 3 == 0) {
19:             list.add(50);
20:             list.set(1, 200); 
21:         }
22:         list.add(500); 
23:         list.remove(2);
24:         /* other operations */
25:          int ret = list.get(1); 
26:         System.out.println(""Retrieved value: "" + ret);
27:     }
28: }
29: "
