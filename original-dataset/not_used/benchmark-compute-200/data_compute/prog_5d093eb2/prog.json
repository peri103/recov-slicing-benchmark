{
  "Code": "import java.util.HashSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashSet<Integer> set = new HashSet<>();\n\n        // Initialize other elements in the set\n        set.add(10);\n        set.add(20);\n        set.add(30);\n\n        // Variables that don't really matter at the end\n        int flag = complexCalculation();\n\n        // Misleading modification\n        // This does not affect the read point as the read is on a different value\n        if (Math.random() > 0.5) {\n            set.remove(30);\n            set.add(40);\n        } else {\n            set.add(50);\n        }\n\n        // This is the misleading read\n        int fakeRead = set.size();\n\n        // Compute some values\n        int unrelatedComputation = 5 * 10;\n\n        // Conditional write point, actually influences the read value indirectly\n        if (flag > 100) {\n            /* write */ set.add(70);\n        }\n\n        // Yet another unrelated computation\n        boolean decision = decide(unrelatedComputation);\n\n        // Another unrelated modification\n        if (decision) {\n            set.add(80);\n        } else {\n            set.remove(10);\n        }\n\n        // Read operation\n        // The actual value being pulled out of set here seems hidden by all the preceding operations:\n        /* read */ boolean ret = set.contains(70);\n\n        // Output the value to prevent dead code elimination\n        System.out.println(\"Result of read: \" + ret);\n    }\n\n    private static int complexCalculation() {\n        return (int)(Math.random() * 200);\n    }\n\n    private static boolean decide(int val) {\n        return val % 2 == 0;\n    }\n}",
  "Internal Variable": "backing array or table of HashSet"
}