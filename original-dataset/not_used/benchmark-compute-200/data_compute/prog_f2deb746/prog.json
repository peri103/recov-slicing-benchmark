{
  "Code": "import java.util.LinkedList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = new LinkedList<>();\n        list.add(0); // Initializing with a value\n        list.add(1);\n\n        int a = 5, b = 10;\n        int resultA = computeSomething(a);\n        int resultB = computeSomethingElse(b);\n\n        boolean shouldWrite = (resultA + resultB) % 2 == 0;\n\n        /* misleading write */\n        for (int i = 0; i < 3; i++) {\n            list.add(i + 3);\n        }\n\n        if (shouldWrite) {\n            list.add(42); // This won't affect ret directly\n        }\n\n        /* obfuscating computations */\n        if (resultA < resultB) {\n            /* write */ list.set(1, 99);\n        }\n\n        list.removeLast(); // Remove the last item\n        list.add(3, 8); // Add a new element at position 3, shifting elements\n        list.add(4, 9); // More shifting\n\n        /* read */ int ret = list.get(1);\n        System.out.println(\"The retrieved value is: \" + ret);\n    }\n\n    private static int computeSomething(int value) {\n        return value * value + 2 * value + 1;\n    }\n\n    private static int computeSomethingElse(int value) {\n        return value - 3 + value / 3;\n    }\n}\n",
  "Internal Variable": "node1.value"
}