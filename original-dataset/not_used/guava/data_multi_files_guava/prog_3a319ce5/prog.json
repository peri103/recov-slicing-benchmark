{
    "files": {
        "RangeMapUtil.java": "import com.google.common.collect.HashRangeMap;\nimport com.google.common.collect.Range;\n\npublic class RangeMapUtil {\n    private HashRangeMap<Integer, String> rangeMap = HashRangeMap.create();\n\n    public void addRange(int start, int end, String value) {\n        /* write */ rangeMap.put(Range.closed(start, end), value);\n    }\n\n    public String getValue(int key) {\n        return rangeMap.get(key);\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        RangeMapUtil rangeMapUtil = new RangeMapUtil();\n        rangeMapUtil.addRange(1, 10, \"Value in range 1-10\");\n\n        // Create a course and add students\n        Course course = new Course(\"Mathematics\");\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        // Display course details\n        System.out.println(\"Course: \" + course.getStudents().size() + \" students enrolled.\");\n\n        /* read */ String value = rangeMapUtil.getValue(5); // This value is retrieved from the range\n        System.out.println(value);\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.collect.HashRangeMap",
        "write_method": "put",
        "read_class": "com.google.common.collect.HashRangeMap",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.collect.HashRangeMap;\nimport com.google.common.collect.Range;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashRangeMap<Integer, String> rangeMap = HashRangeMap.create();\n        /* write */ rangeMap.put(Range.closed(1, 10), \"Value in range 1-10\");\n        /* read */ String value = rangeMap.get(5); // This value is retrieved from the range\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import com.google.common.collect.HashRangeMap;\nimport com.google.common.collect.Range;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashRangeMap<Integer, String> rangeMap = HashRangeMap.create();\n        /* write */ rangeMap.put(Range.closed(1, 10), \"Value in range 1-10\");\n        \n        // Additional unrelated complexity\n        List<String> stringList = new ArrayList<>();\n        HashMap<Integer, String> hashMap = new HashMap<>();\n        \n        for (int i = 0; i < 5; i++) {\n            stringList.add(\"String \" + i);\n            hashMap.put(i, \"Value \" + i);\n        }\n        \n        // Process the string list\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n        \n        // Process the hash map\n        for (int key : hashMap.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + hashMap.get(key));\n        }\n        \n        /* read */ String value = rangeMap.get(5); // This value is retrieved from the range\n        System.out.println(value);\n        \n        // Further unrelated complexity\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n        for (Integer number : numbers) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}"
}