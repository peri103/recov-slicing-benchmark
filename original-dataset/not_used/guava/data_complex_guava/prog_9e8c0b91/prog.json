{
    "java_code": "import com.google.common.util.concurrent.AtomicDouble;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDouble atomicDouble = new AtomicDouble(0.0);\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"initial\", 10);\n        map.put(\"increment\", 5);\n        \n        /* write */ double newValue = atomicDouble.addAndGet(5.0);\n        \n        int incrementValue = map.get(\"increment\");\n        int initialValue = map.get(\"initial\");\n        int finalValue = initialValue + incrementValue;\n\n        System.out.println(\"Final Value after increment: \" + finalValue);\n        \n        // Additional unrelated code for complexity\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Loop iteration: \" + (i + 1));\n        }\n\n        /* read */ double value = atomicDouble.get();\n        System.out.println(\"Written Value: \" + newValue);\n        System.out.println(\"Read Value: \" + value);\n        \n        // More unrelated complexity\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import com.google.common.util.concurrent.AtomicDouble;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDouble atomicDouble = new AtomicDouble(0.0);\n        /* write */ double newValue = atomicDouble.addAndGet(5.0);\n        /* read */ double value = atomicDouble.get();\n        System.out.println(\"Written Value: \" + newValue);\n        System.out.println(\"Read Value: \" + value);\n    }\n}",
    "pair": {
        "write_class": "com.google.common.util.concurrent.AtomicDouble",
        "write_method": "addAndGet",
        "read_class": "com.google.common.util.concurrent.AtomicDouble",
        "read_method": "get"
    }
}