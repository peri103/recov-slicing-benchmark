{
  "Code": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();\n        map.put(10, \"Apple\");\n        map.put(20, \"Banana\");\n        map.put(30, \"Cherry\");\n\n        int sum = map.entrySet().stream().mapToInt(e -> e.getKey()).sum();\n        int oddKey = (sum % 2 == 1) ? 30 : 20;\n\n        // Intermediate misleading operations\n        map.put(40, \"Date\");\n        map.remove(10);\n        map.replace(20, \"Elderberry\");\n\n        int modifier = 5 * oddKey - sum + map.size();\n\n        // Conditional operation ensuring obfuscation\n        if (modifier > 400) {\n            /* write */ map.put(30, \"Fig\");\n        } else {\n            map.put(30, \"Grape\");\n        }\n\n        map.put(50, \"Honeydew\");\n        map.merge(20, \"Iced Tea\", (oldValue, newValue) -> oldValue + \" & \" + newValue);\n\n        // Final operation related to read point\n        map.computeIfPresent(60, (k, v) -> v.concat(\"Jambul\"));\n\n        /* read */ String ret = map.get(30);\n        System.out.println(\"Retrieved value: \" + ret);\n    }\n}\n",
  "Internal Variable": "map[30]"
}