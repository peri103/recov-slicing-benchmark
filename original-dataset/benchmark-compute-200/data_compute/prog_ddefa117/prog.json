{
  "Code": "import java.util.LinkedHashSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashSet<Integer> set = new LinkedHashSet<>();\n        set.add(10); // initial element\n        set.add(20); // initial element\n        int x = 100;\n        int y = 200;\n        set.add(x + y);\n        set.add(x - y);\n        int threshold = 150;\n        if (((x + y) % 2 == 0) && smartCheck(threshold)) {\n            /* write */ set.add(30);\n        } else {\n            set.add(-30);\n        }\n        set.add(y / 10);\n        set.add(x * 2);\n        int sum = 0;\n        for (Integer element : set) {\n            sum += element;\n        }\n        if (sum > 0) {\n            set.add(41);\n        }\n        boolean found = false;\n        for (int value : set) {\n            if (value - threshold > 0) {\n                found = true;\n            }\n        }\n        // The condition has already been executed\n        /* read */ Integer result = found ? 30 : -1;\n        System.out.println(\"Read Value: \" + result);\n    }\n\n    private static boolean smartCheck(int num) {\n        return num + 50 > 100 && num - 30 < 100;\n    }\n}\n",
  "Internal Variable": "LinkedHashSet's internal capacity array, specific internal state not exposed directly but differs in link ordering."
}