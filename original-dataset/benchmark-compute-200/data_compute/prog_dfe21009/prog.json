{
  "Code": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        CopyOnWriteArrayList<Integer> cowList = new CopyOnWriteArrayList<>();\n        \n        int initialCapacity = 5;\n        for (int i = 0; i < initialCapacity; i++) {\n            cowList.add(i * 10);\n        }\n\n        /* Complex block that obfuscates write */\n        boolean toggle = true;\n        if (toggle) {\n            cowList.add(55); // misleading write\n        }\n        toggle = !toggle;\n        cowList.remove((Integer) 10); // unrelated removal\n        if (!toggle) {\n            /* write */ cowList.add(42);\n        }\n\n        int dummyValue = 1000; // unrelated computation\n        for (int i = 0; i < cowList.size(); i++) {\n            if (i == 2) {\n                dummyValue = cowList.get(i);\n            }\n        }\n\n        cowList.addFirst(17); // misleading write\n        cowList.addLast(33);  // misleading write\n\n        int index = 1;\n        cowList.add(index, 12); // another misleading write\n\n        /* Several operations that do not affect the read point */\n        cowList.clear(); // unrelated clear\n        cowList.add(100);\n        cowList.add(200);\n        cowList.add(300);\n\n        /* Ensure the read point executes after all potential changes */\n\n        cowList.add(index, 25); // add misleading element\n        cowList.add(index + 2, 15); \n\n        /* read */ int ret = cowList.get(1);\n        \n        System.out.println(\"Retrieved value: \" + ret);\n    }\n}",
  "Internal Variable": "elementData[1]"
}