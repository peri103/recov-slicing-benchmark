{
  "Code": "import java.util.EnumMap;\n\npublic class Main {\n    enum TrafficLight {\n        RED, GREEN, YELLOW\n    }\n\n    public static void main(String[] args) {\n        EnumMap<TrafficLight, String> map = new EnumMap<>(TrafficLight.class);\n        // Initialize map with some values\n        map.put(TrafficLight.RED, \"Stop\");\n        map.put(TrafficLight.GREEN, \"Go\");\n        map.put(TrafficLight.YELLOW, \"Caution\");\n\n        // Complex calculations and misleading changes\n        int computation = 42 * 19 + 7; // Arbitrary computations\n        boolean condition = computation % 5 == 0; // Determine which ops to execute\n\n        // Confusing manipulations\n        if (condition) {\n            map.remove(TrafficLight.RED);\n            map.put(TrafficLight.RED, \"Halt\");\n        } else {\n            map.remove(TrafficLight.GREEN);\n            map.put(TrafficLight.GREEN, \"GoSteady\");\n        }\n\n        // Further operations\n        String temp = map.get(TrafficLight.YELLOW);\n        map.put(TrafficLight.YELLOW, temp + \"!\");\n\n        // Final determination for write\n        if (map.containsKey(TrafficLight.RED)) {\n            /* write */ map.put(TrafficLight.YELLOW, \"SlowDown\");\n        }\n\n        // Ensuring unrelated complexity\n        for (TrafficLight light : TrafficLight.values()) {\n            map.put(light, map.get(light) + \" Alert\");\n        }\n\n        // Read point\n        /* read */ String ret = map.get(TrafficLight.YELLOW);\n        System.out.println(\"Output: \" + ret);\n    }\n}\n",
  "Internal Variable": "values[TafficLight.YELLOW.ordinal()]"
}