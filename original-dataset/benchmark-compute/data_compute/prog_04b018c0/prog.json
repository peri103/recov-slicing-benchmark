{
  "Code": "import java.util.ArrayDeque;\nimport java.util.Deque;\n\npublic class Main {\n    public static void main(String[] args) {\n        Deque<Integer> deque = new ArrayDeque<>();\n        /* some unrelated initial actions */\n        deque.offer(42);\n        deque.offer(25);\n        deque.addLast(7);\n        deque.offer(30);\n        int mysteryNumber = 3;\n        boolean flag = false;\n        \n        /* misleading operations */\n        deque.poll(); // Removes 42, doesn't affect ret\n        deque.offer(19);\n        if (mysteryNumber * 2 == 6) {\n            deque.poll(); // Removes 25 if executed\n            flag = true;\n        }\n        \n        /* intermediate and misleading logic */\n        for (int i = 0; i < 3; i++) {\n            if (i == 2) {\n                deque.offer(10);\n            } else {\n                deque.poll();\n            }\n        }\n        \n        /* conditional mimicking ambiguity */\n        if (flag || mysteryNumber > 5) {\n            deque.addLast(5);\n        } else {\n            /* write */ deque.addLast(99); // This should execute, affecting the read point.\n        }\n        deque.offerFirst(6);\n        deque.addLast(11);\n        deque.pollFirst();\n        deque.offer(18);\n        deque.addFirst(21);\n        deque.pollLast();\n        \n        /* misleading operation that seems to mimic `read` logic */\n        if (deque.size() > 4) {\n            deque.poll();\n        }\n        \n        /* read */ int ret = deque.peek(); // Should retrieve the value influenced by the correct write point (99)\n        System.out.println(\"Retrieved value: \" + ret);\n    }\n}\n",
  "Internal Variable": "array[1]"
}