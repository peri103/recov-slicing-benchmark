{
    "files": {
        "PriorityQueueHandler.java": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class PriorityQueueHandler {\n    private PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n\n    public void addNumber(int number) {\n        /* write */ queue.offer(number);\n    }\n\n    public Integer retrieveNumber() {\n        return queue.poll();\n    }\n}\n",
        "Student.java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Student {\n    private String name;\n    private HashMap<String, Integer> grades = new HashMap<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(String course, int grade) {\n        grades.put(course, grade);\n    }\n\n    public void printGrades() {\n        for (Map.Entry<String, Integer> entry : grades.entrySet()) {\n            System.out.println(\"Course: \" + entry.getKey() + \", Grade: \" + entry.getValue());\n        }\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public void listStudents() {\n        System.out.println(\"Students enrolled in \" + courseName + \":\");\n        for (Student student : students) {\n            System.out.println(student.getName());\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        PriorityQueueHandler queueHandler = new PriorityQueueHandler();\n        queueHandler.addNumber(42);\n        queueHandler.addNumber(15);\n        queueHandler.addNumber(30);\n\n        Student student1 = new Student(\"Alice\");\n        student1.addGrade(\"Math\", 85);\n        student1.addGrade(\"Science\", 90);\n\n        Student student2 = new Student(\"Bob\");\n        student2.addGrade(\"Math\", 78);\n        student2.addGrade(\"Science\", 88);\n\n        Course mathCourse = new Course(\"Math\");\n        mathCourse.enrollStudent(student1);\n        mathCourse.enrollStudent(student2);\n\n        mathCourse.listStudents();\n\n        student1.printGrades();\n        student2.printGrades();\n\n        /* read */ Integer value = queueHandler.retrieveNumber();\n        System.out.println(\"Retrieved from priority queue: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.PriorityBlockingQueue",
        "write_method": "offer",
        "read_class": "java.util.concurrent.PriorityBlockingQueue",
        "read_method": "poll"
    },
    "java_code_simple": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        \n        /* write */ queue.offer(42);\n        \n        /* read */ Integer value = queue.poll();\n        \n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        ArrayBlockingQueue<String> stringQueue = new ArrayBlockingQueue<>(10);\n        HashMap<String, Integer> map = new HashMap<>();\n\n        /* write */ queue.offer(42);\n        stringQueue.offer(\"Hello\");\n        stringQueue.offer(\"World\");\n        map.put(\"Key1\", 100);\n        map.put(\"Key2\", 200);\n\n        // Perform some operations on the map\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Process the string queue\n        while (!stringQueue.isEmpty()) {\n            String str = stringQueue.poll();\n            System.out.println(\"String from queue: \" + str);\n        }\n\n        // Add more integers to the priority queue\n        for (int i = 1; i <= 5; i++) {\n            queue.offer(i * 10);\n        }\n\n        // Perform operations on the priority queue\n        while (!queue.isEmpty()) {\n            /* read */ Integer value = queue.poll();\n            System.out.println(\"Integer from priority queue: \" + value);\n        }\n    }\n}"
}