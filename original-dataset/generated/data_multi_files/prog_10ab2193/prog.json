{
    "files": {
        "QueueManager.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class QueueManager {\n    private LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n\n    public void offerToQueue(int value) {\n        /* write */ queue.offer(value);\n    }\n\n    public LinkedTransferQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private ArrayList<Integer> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public ArrayList<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.HashMap;\n\npublic class Course {\n    private String courseName;\n    private HashMap<String, Student> enrolledStudents = new HashMap<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.put(student.getName(), student);\n    }\n\n    public Student getStudent(String name) {\n        return enrolledStudents.get(name);\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        queueManager.offerToQueue(42);\n\n        Course course = new Course(\"Computer Science\");\n        Student student = new Student(\"Alice\");\n        student.addGrade(95);\n        student.addGrade(85);\n        course.enrollStudent(student);\n\n        Student retrievedStudent = course.getStudent(\"Alice\");\n        System.out.println(\"Grades for \" + retrievedStudent.getName() + \": \" + retrievedStudent.getGrades());\n\n        Integer polledValue = queueManager.getQueue().poll();\n        /* read */ System.out.println(\"Polled from queue: \" + polledValue);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "offer",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "poll"
    },
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        /* write */ queue.offer(42);\n        /* read */ Integer value = queue.poll();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n        \n        // Adding elements to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        \n        // Adding key-value pairs to the map\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        \n        // Offer a number to the queue\n        /* write */ queue.offer(42);\n        \n        // Process elements in the list\n        for (Integer num : list) {\n            System.out.println(\"List item: \" + num);\n        }\n        \n        // Retrieve a value from the map\n        Integer mapValue = map.get(\"two\");\n        System.out.println(\"Value from map: \" + mapValue);\n        \n        // Perform some operations with the map and list\n        map.put(\"four\", list.get(2));\n        \n        // Poll a number from the queue\n        /* read */ Integer value = queue.poll();\n        System.out.println(\"Polled from queue: \" + value);\n        \n        // Print updated map entries\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Map entry: \" + entry.getKey() + \" -> \" + entry.getValue());\n        }\n    }\n}"
}