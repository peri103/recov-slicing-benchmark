{
    "files": {
        "SynchronousQueueWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class SynchronousQueueWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public SynchronousQueueWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeValue(int value) {\n        try {\n            /* write */ queue.put(value);\n            System.out.println(\"Value written to SynchronousQueue: \" + value);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n",
        "SynchronousQueueReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class SynchronousQueueReader {\n    private SynchronousQueue<Integer> queue;\n\n    public SynchronousQueueReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int readValue() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value read from SynchronousQueue: \" + value);\n            return value;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            return -1; // Return an error value\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores;\n\n    public Student(String name) {\n        this.name = name;\n        this.scores = new ArrayList<>();\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize SynchronousQueue\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        // Initialize writer and reader for SynchronousQueue\n        SynchronousQueueWriter writer = new SynchronousQueueWriter(queue);\n        SynchronousQueueReader reader = new SynchronousQueueReader(queue);\n\n        // Writer thread\n        Thread writerThread = new Thread(() -> {\n            writer.writeValue(42);\n        });\n\n        // Reader thread\n        Thread readerThread = new Thread(() -> {\n            int value = reader.readValue();\n        });\n\n        writerThread.start();\n        readerThread.start();\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        // Create a course and add students\n        Course course = new Course(\"Mathematics\");\n        Student alice = new Student(\"Alice\");\n        Student bob = new Student(\"Bob\");\n\n        alice.addScore(85);\n        bob.addScore(90);\n\n        course.addStudent(alice);\n        course.addStudent(bob);\n\n        // Print course details\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Scores: \" + student.getScores());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written: 42\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n        \n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n\n        // Writer Thread for SynchronousQueue\n        executorService.execute(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written to SynchronousQueue: 42\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Reader Thread for SynchronousQueue\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(100); // Simulate some processing delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Writer Thread for LinkedBlockingQueue\n        executorService.execute(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                stringQueue.put(\"World\");\n                System.out.println(\"Values written to LinkedBlockingQueue: Hello, World\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Reader Thread for LinkedBlockingQueue\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(200); // Simulate some processing delay\n                while (!stringQueue.isEmpty()) {\n                    String str = stringQueue.take();\n                    System.out.println(\"Value read from LinkedBlockingQueue: \" + str);\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executorService.shutdown();\n    }\n}"
}