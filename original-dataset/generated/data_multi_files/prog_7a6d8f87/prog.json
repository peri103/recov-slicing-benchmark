{
    "files": {
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n",
        "DataReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataReader {\n    private SynchronousQueue<Integer> queue;\n\n    public DataReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void readData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"SynchronousQueue value: \" + value);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataWriter writer = new DataWriter(queue);\n        DataReader reader = new DataReader(queue);\n\n        Thread writerThread = new Thread(() -> writer.writeData(42));\n        Thread readerThread = new Thread(() -> reader.readData());\n\n        writerThread.start();\n        readerThread.start();\n\n        Course course = new Course(\"Computer Science\");\n        course.addStudent(new Student(\"Alice\", 1));\n        course.addStudent(new Student(\"Bob\", 2));\n\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", ID: \" + student.getId() + \", Course: \" + course.getCourseName());\n        }\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n        \n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        Map<Integer, String> map = new HashMap<>();\n\n        // Start writer thread for SynchronousQueue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Start reader thread for SynchronousQueue\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"SynchronousQueue value: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Additional writer thread for stringQueue\n        Thread stringWriterThread = new Thread(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                stringQueue.put(\"World\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Additional reader thread for stringQueue\n        Thread stringReaderThread = new Thread(() -> {\n            try {\n                while (true) {\n                    String message = stringQueue.take();\n                    System.out.println(\"StringQueue message: \" + message);\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Populate map with some data\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n\n        // Start all threads\n        writerThread.start();\n        readerThread.start();\n        stringWriterThread.start();\n        stringReaderThread.start();\n\n        // Iterate through the map and print values\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(\"Map entry: \" + entry.getKey() + \" = \" + entry.getValue());\n        }\n\n        try {\n            writerThread.join();\n            readerThread.join();\n            stringWriterThread.join();\n            stringReaderThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}"
}