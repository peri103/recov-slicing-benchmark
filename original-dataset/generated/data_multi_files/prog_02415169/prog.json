{
    "files": {
        "DequeOperations.java": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class DequeOperations {\n    private BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addValue(int value) {\n        /* write */ deque.addLast(value);\n    }\n\n    public int retrieveLastValue() throws InterruptedException {\n        return /* read */ deque.takeLast();\n    }\n\n    public BlockingDeque<Integer> getDeque() {\n        return deque;\n    }\n}\n",
        "Student.java": "import java.util.List;\nimport java.util.LinkedList;\n\npublic class Student {\n    private String name;\n    private List<Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new LinkedList<>();\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public List<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        DequeOperations dequeOps = new DequeOperations();\n        dequeOps.addValue(42);\n        dequeOps.addValue(100);\n        dequeOps.addValue(200);\n\n        Course javaCourse = new Course(\"Java Programming\");\n        Student student1 = new Student(\"Alice\");\n        student1.addGrade(85);\n        student1.addGrade(90);\n        javaCourse.addStudent(student1);\n\n        Student student2 = new Student(\"Bob\");\n        student2.addGrade(78);\n        student2.addGrade(82);\n        javaCourse.addStudent(student2);\n\n        System.out.println(\"Course: \" + javaCourse.getCourseName());\n        for (Student student : javaCourse.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Grades: \" + student.getGrades());\n        }\n\n        try {\n            int lastDequeValue = dequeOps.retrieveLastValue();\n            System.out.println(\"Last deque value: \" + lastDequeValue);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeLast"
    },
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        LinkedList<String> stringList = new LinkedList<>();\n        List<Double> doubleList = new LinkedList<>();\n\n        // Adding some elements to the stringList\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        // Adding some elements to the doubleList\n        doubleList.add(3.14);\n        doubleList.add(2.718);\n\n        // Manipulate stringList\n        for (String str : stringList) {\n            System.out.println(\"StringList item: \" + str);\n        }\n\n        // Manipulate doubleList\n        double sum = 0;\n        for (Double d : doubleList) {\n            sum += d;\n        }\n        System.out.println(\"Sum of doubleList: \" + sum);\n\n        // Original write operation\n        /* write */ deque.addLast(42);\n\n        // Adding more elements to deque\n        deque.addLast(100);\n        deque.addLast(200);\n\n        // Perform operations on deque\n        try {\n            int firstValue = deque.takeFirst();\n            System.out.println(\"First value taken: \" + firstValue);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // More operations on doubleList\n        doubleList.add(1.414);\n        doubleList.add(1.732);\n        double average = sum / doubleList.size();\n        System.out.println(\"Average of doubleList: \" + average);\n\n        // Original read operation\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Last value taken: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Add more elements and print them\n        deque.addLast(300);\n        deque.addLast(400);\n        try {\n            while (!deque.isEmpty()) {\n                int dequeValue = deque.takeFirst();\n                System.out.println(\"Deque value: \" + dequeValue);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}