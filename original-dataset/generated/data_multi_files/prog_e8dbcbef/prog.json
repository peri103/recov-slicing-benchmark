{
    "files": {
        "StackOperations.java": "import java.util.Stack;\n\npublic class StackOperations {\n    private Stack<Integer> stack = new Stack<>();\n\n    public void pushValue(int value) {\n        /* write */ stack.push(value);\n    }\n\n    public int popValue() {\n        return stack.pop();\n    }\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> grades = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public List<Integer> getGrades() {\n        return grades;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        StackOperations stackOps = new StackOperations();\n        stackOps.pushValue(42);\n\n        Course course = new Course(\"Mathematics\");\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n\n        student1.addGrade(85);\n        student1.addGrade(90);\n        student2.addGrade(78);\n        student2.addGrade(82);\n\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName());\n            System.out.println(\"Grades: \" + student.getGrades());\n        }\n\n        // Simulate some operations on the stack\n        stackOps.pushValue(100);\n        stackOps.pushValue(200);\n\n        int sum = 0;\n        while (!stackOps.isEmpty()) {\n            sum += stackOps.popValue();\n        }\n        System.out.println(\"Sum of stack values: \" + sum);\n\n        // Finally read the value\n        stackOps.pushValue(300);\n        /* read */ int value = stackOps.popValue();\n        System.out.println(\"Popped value: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.Stack",
        "write_method": "push",
        "read_class": "java.util.Stack",
        "read_method": "pop"
    },
    "java_code_simple": "import java.util.Stack;\n\npublic class Main {\n    public static void main(String[] args) {\n        Stack<Integer> stack = new Stack<>();\n        /* write */ stack.push(42);\n        /* read */ int value = stack.pop();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.Stack;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Stack<Integer> stack = new Stack<>();\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Add elements to the arrayList\n        for (int i = 0; i < 5; i++) {\n            arrayList.add(i * 5);\n        }\n\n        // Add elements to the linkedList\n        for (int i = 0; i < 3; i++) {\n            linkedList.add(i * 10);\n        }\n\n        // Process arrayList\n        for (int value : arrayList) {\n            stack.push(value);\n        }\n\n        // Process linkedList\n        for (int value : linkedList) {\n            stack.push(value * 2);\n        }\n\n        // Adding a new element to stack\n        /* write */ stack.push(42);\n\n        // Perform additional operations\n        int sum = 0;\n        while (!stack.isEmpty()) {\n            sum += stack.pop();\n        }\n        System.out.println(\"Sum of all elements: \" + sum);\n\n        // Repopulate stack for demonstration\n        for (int i = 1; i <= 5; i++) {\n            stack.push(i);\n        }\n\n        // Further operations\n        int max = Integer.MIN_VALUE;\n        while (!stack.isEmpty()) {\n            int current = stack.pop();\n            if (current > max) {\n                max = current;\n            }\n        }\n        System.out.println(\"Maximum value: \" + max);\n\n        // Repopulate stack to demonstrate original read\n        stack.push(100);\n        stack.push(200);\n        stack.push(300);\n\n        // Finally read the value\n        /* read */ int value = stack.pop();\n        System.out.println(\"Popped value: \" + value);\n    }\n}"
}