{
    "files": {
        "CustomSet.java": "import java.util.concurrent.CopyOnWriteArraySet;\n\npublic class CustomSet {\n    private CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();\n\n    public void addValue(int value) {\n        /* write */ set.add(value);\n    }\n\n    public boolean containsValue(int value) {\n        return set.contains(value);\n    }\n}",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public ArrayList<Student> getStudents() {\n        return students;\n    }\n}",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        CustomSet customSet = new CustomSet();\n        customSet.addValue(42);\n\n        Student student1 = new Student(\"Alice\", 101);\n        Student student2 = new Student(\"Bob\", 102);\n\n        Course course = new Course(\"Computer Science\");\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student Name: \" + student.getName() + \", ID: \" + student.getId());\n        }\n\n        /* read */ boolean containsValue = customSet.containsValue(42);\n        System.out.println(\"CustomSet contains 42: \" + containsValue);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.CopyOnWriteArraySet",
        "write_method": "add",
        "read_class": "java.util.concurrent.CopyOnWriteArraySet",
        "read_method": "contains"
    },
    "java_code_simple": "import java.util.concurrent.CopyOnWriteArraySet;\n\npublic class Main {\n    public static void main(String[] args) {\n        CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();\n        /* write */ set.add(42);\n        /* read */ boolean containsValue = set.contains(42);\n        System.out.println(containsValue);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.HashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>();\n        HashMap<String, Integer> map = new HashMap<>();\n        ExecutorService executor = Executors.newFixedThreadPool(3);\n\n        // Adding elements to the map\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Using executor to simulate complex operations\n        executor.submit(() -> {\n            for (int i = 0; i < 5; i++) {\n                set.add(i * 10); // Adding multiple elements to the set\n            }\n        });\n\n        executor.submit(() -> {\n            for (String key : map.keySet()) {\n                System.out.println(\"Map value for \" + key + \": \" + map.get(key));\n            }\n        });\n\n        // Main thread adding a value to the set\n        /* write */ set.add(42);\n\n        executor.submit(() -> {\n            try {\n                Thread.sleep(100); // Simulate some delay\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            // Check if the set contains specific values\n            System.out.println(\"Set contains 20: \" + set.contains(20));\n        });\n\n        // Shutdown the executor service\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Final check for the original write-read pair\n        /* read */ boolean containsValue = set.contains(42);\n        System.out.println(\"Set contains 42: \" + containsValue);\n    }\n}"
}