{
    "files": {
        "DequeManager.java": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class DequeManager {\n    private BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addValue(int value) {\n        /* write */\n        deque.addFirst(value);\n    }\n\n    public BlockingDeque<Integer> getDeque() {\n        return deque;\n    }\n}\n",
        "ComplexOperations.java": "import java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class ComplexOperations {\n    private ArrayList<String> stringList = new ArrayList<>();\n    private HashMap<String, Integer> map = new HashMap<>();\n\n    public ComplexOperations() {\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        map.put(\"One\", 1);\n        map.put(\"Two\", 2);\n    }\n\n    public void printStringList() {\n        for (String str : stringList) {\n            System.out.println(\"ArrayList element: \" + str);\n        }\n    }\n\n    public void printMap() {\n        for (String key : map.keySet()) {\n            System.out.println(\"HashMap element: \" + key + \" -> \" + map.get(key));\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        DequeManager dequeManager = new DequeManager();\n        ComplexOperations complexOperations = new ComplexOperations();\n\n        // Perform complex operations\n        complexOperations.printStringList();\n        complexOperations.printMap();\n\n        // Add value to the deque\n        dequeManager.addValue(42);\n\n        try {\n            // Take the first element from the deque\n            /* read */\n            int value = dequeManager.getDeque().takeFirst();\n            System.out.println(\"Deque value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional operations on the deque\n        dequeManager.addValue(84);\n        dequeManager.addValue(168);\n\n        try {\n            System.out.println(\"Deque first value: \" + dequeManager.getDeque().takeFirst());\n            System.out.println(\"Deque last value: \" + dequeManager.getDeque().takeLast());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeFirst"
    },
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        \n        /* write */ \n        deque.addFirst(42);\n        \n        try {\n            /* read */ \n            int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the BlockingDeque\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n        // Initialize an ArrayList and a HashMap for additional complexity\n        ArrayList<String> stringList = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n\n        // Add elements to the ArrayList\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        // Add elements to the HashMap\n        map.put(\"One\", 1);\n        map.put(\"Two\", 2);\n\n        // Add first element to the deque\n        /* write */\n        deque.addFirst(42);\n\n        // Perform operations on ArrayList\n        for (String str : stringList) {\n            System.out.println(\"ArrayList element: \" + str);\n        }\n\n        // Perform operations on HashMap\n        for (String key : map.keySet()) {\n            System.out.println(\"HashMap element: \" + key + \" -> \" + map.get(key));\n        }\n\n        try {\n            // Take first element from the deque\n            /* read */\n            int value = deque.takeFirst();\n            System.out.println(\"Deque value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional operations on the deque\n        deque.addFirst(84);\n        deque.addLast(168);\n\n        try {\n            System.out.println(\"Deque first value: \" + deque.takeFirst());\n            System.out.println(\"Deque last value: \" + deque.takeLast());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex logic\n        for (int i = 0; i < 5; i++) {\n            deque.addFirst(i * 10);\n        }\n\n        try {\n            while (!deque.isEmpty()) {\n                System.out.println(\"Deque element: \" + deque.takeFirst());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}