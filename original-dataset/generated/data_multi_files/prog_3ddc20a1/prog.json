{
    "files": {
        "DequeOperations.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DequeOperations {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addElement(int element) {\n        /* write */ deque.addLast(element);\n    }\n\n    public int removeLastElement() throws InterruptedException {\n        return deque.takeLast();\n    }\n\n    public boolean isEmpty() {\n        return deque.isEmpty();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<String> courses = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void enrollCourse(String course) {\n        courses.add(course);\n    }\n\n    public List<String> getCourses() {\n        return courses;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        DequeOperations dequeOps = new DequeOperations();\n        dequeOps.addElement(42);\n\n        Course mathCourse = new Course(\"Mathematics\");\n        Student alice = new Student(\"Alice\");\n        alice.enrollCourse(\"Mathematics\");\n        mathCourse.enrollStudent(alice);\n\n        System.out.println(\"Course: \" + mathCourse.getCourseName());\n        for (Student student : mathCourse.getEnrolledStudents()) {\n            System.out.println(\"Student: \" + student.getName());\n            System.out.println(\"Enrolled Courses: \" + student.getCourses());\n        }\n\n        try {\n            /* read */ int lastElement = dequeOps.removeLastElement();\n            System.out.println(\"Last element removed from deque: \" + lastElement);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        if (!dequeOps.isEmpty()) {\n            System.out.println(\"Deque is not empty\");\n        } else {\n            System.out.println(\"Deque is empty\");\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeLast"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        ArrayList<String> stringList = new ArrayList<>();\n        HashMap<Integer, String> map = new HashMap<>();\n\n        // Adding some initial values to the map\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n\n        // Adding elements to the string list\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        \n        // Performing operations on the deque\n        deque.addFirst(10);\n        deque.addFirst(20);\n        /* write */ deque.addLast(42);\n        \n        // Iterating over the map\n        for (Integer key : map.keySet()) {\n            System.out.println(\"Key: \" + key + \", Value: \" + map.get(key));\n        }\n        \n        // Adding more elements to the deque\n        deque.addFirst(30);\n        deque.addLast(50);\n        \n        // Performing operations on the string list\n        for (String s : stringList) {\n            System.out.println(\"String List Element: \" + s);\n        }\n        \n        // Reading from the deque\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Deque Last Value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Additional logic to make the program more complex\n        int sum = 0;\n        for (int i = 0; i < 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 5 numbers: \" + sum);\n        \n        // Working with the map\n        map.put(4, \"Four\");\n        System.out.println(\"Map Size: \" + map.size());\n        \n        // Final operations\n        if (!deque.isEmpty()) {\n            System.out.println(\"Deque is not empty\");\n        }\n    }\n}"
}