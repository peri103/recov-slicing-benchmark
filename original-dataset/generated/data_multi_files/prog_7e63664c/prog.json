{
    "files": {
        "DequeManager.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DequeManager {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addElement(int element) {\n        /* write */ deque.addLast(element);\n    }\n\n    public int retrieveLastElement() throws InterruptedException {\n        return /* read */ deque.takeLast();\n    }\n\n    public boolean isEmpty() {\n        return deque.isEmpty();\n    }\n\n    public void addMultipleElements(int[] elements) {\n        for (int element : elements) {\n            deque.addLast(element);\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> grades;\n\n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n\n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n\n    public List<Integer> getGrades() {\n        return new ArrayList<>(grades);\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return new ArrayList<>(students);\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        DequeManager dequeManager = new DequeManager();\n\n        // Add elements to the deque\n        dequeManager.addElement(42);\n        dequeManager.addMultipleElements(new int[]{10, 20, 30, 40});\n\n        try {\n            // Retrieve and print the last element added\n            int lastElement = dequeManager.retrieveLastElement();\n            System.out.println(\"Last Element from Deque: \" + lastElement);\n\n            // Work with student and course data\n            Student student1 = new Student(\"Alice\");\n            student1.addGrade(85);\n            student1.addGrade(90);\n\n            Student student2 = new Student(\"Bob\");\n            student2.addGrade(78);\n            student2.addGrade(82);\n\n            Course course = new Course(\"Mathematics\");\n            course.enrollStudent(student1);\n            course.enrollStudent(student2);\n\n            for (Student student : course.getEnrolledStudents()) {\n                System.out.println(\"Student: \" + student.getName() + \", Grades: \" + student.getGrades());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeLast"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        try {\n            /* write */ deque.addLast(42);\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.Stack;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        Stack<Integer> stack = new Stack<>();\n        Queue<Integer> queue = new LinkedList<>();\n\n        try {\n            // Adding elements to stack\n            for (int i = 0; i < 5; i++) {\n                stack.push(i * 10);\n            }\n\n            // Adding elements to queue\n            for (int i = 5; i < 10; i++) {\n                queue.add(i * 10);\n            }\n\n            // Processing stack elements\n            while (!stack.isEmpty()) {\n                int stackValue = stack.pop();\n                System.out.println(\"Stack Value: \" + stackValue);\n                deque.addLast(stackValue);\n            }\n\n            // Processing queue elements\n            while (!queue.isEmpty()) {\n                int queueValue = queue.poll();\n                System.out.println(\"Queue Value: \" + queueValue);\n                deque.addLast(queueValue);\n            }\n\n            /* write */ deque.addLast(42);\n\n            // Additional operations\n            for (int i = 0; i < 3; i++) {\n                deque.addLast(i * 100);\n            }\n\n            // Simulating delay\n            Thread.sleep(1000);\n\n            // Retrieve and print the last element added\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Deque Last Value: \" + value);\n\n            // Further processing of deque elements\n            while (!deque.isEmpty()) {\n                int dequeValue = deque.takeLast();\n                System.out.println(\"Processed Deque Value: \" + dequeValue);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}