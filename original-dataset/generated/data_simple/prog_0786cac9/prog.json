{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a DelayQueue instance\n        DelayQueue<DelayedElement> delayQueue = new DelayQueue<>();\n\n        // Create a DelayedElement with a delay of 1 second\n        DelayedElement element = new DelayedElement(\"Hello, World!\", 1000);\n\n        // Write the element to the DelayQueue\n        /* write */ delayQueue.put(element);\n\n        try {\n            // Read the element from the DelayQueue\n            /* read */ DelayedElement readElement = delayQueue.take();\n\n            // Print the value of the read element\n            System.out.println(readElement.getValue());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Define a DelayedElement class that implements Delayed\n    static class DelayedElement implements Delayed {\n        private final String value;\n        private final long startTime;\n\n        public DelayedElement(String value, long delay) {\n            this.value = value;\n            this.startTime = System.currentTimeMillis() + delay;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long delay = startTime - System.currentTimeMillis();\n            return unit.convert(delay, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed other) {\n            if (this.startTime < ((DelayedElement) other).startTime) {\n                return -1;\n            }\n            if (this.startTime > ((DelayedElement) other).startTime) {\n                return 1;\n            }\n            return 0;\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}