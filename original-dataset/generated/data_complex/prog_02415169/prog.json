{
    "java_code": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        LinkedList<String> stringList = new LinkedList<>();\n        List<Double> doubleList = new LinkedList<>();\n\n        // Adding some elements to the stringList\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        // Adding some elements to the doubleList\n        doubleList.add(3.14);\n        doubleList.add(2.718);\n\n        // Manipulate stringList\n        for (String str : stringList) {\n            System.out.println(\"StringList item: \" + str);\n        }\n\n        // Manipulate doubleList\n        double sum = 0;\n        for (Double d : doubleList) {\n            sum += d;\n        }\n        System.out.println(\"Sum of doubleList: \" + sum);\n\n        // Original write operation\n        /* write */ deque.addLast(42);\n\n        // Adding more elements to deque\n        deque.addLast(100);\n        deque.addLast(200);\n\n        // Perform operations on deque\n        try {\n            int firstValue = deque.takeFirst();\n            System.out.println(\"First value taken: \" + firstValue);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // More operations on doubleList\n        doubleList.add(1.414);\n        doubleList.add(1.732);\n        double average = sum / doubleList.size();\n        System.out.println(\"Average of doubleList: \" + average);\n\n        // Original read operation\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Last value taken: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Add more elements and print them\n        deque.addLast(300);\n        deque.addLast(400);\n        try {\n            while (!deque.isEmpty()) {\n                int dequeValue = deque.takeFirst();\n                System.out.println(\"Deque value: \" + dequeValue);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeLast"
    }
}