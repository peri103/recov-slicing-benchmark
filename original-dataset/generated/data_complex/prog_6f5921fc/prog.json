{
    "java_code": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n        List<String> stringList = new ArrayList<>();\n\n        // Using another BlockingQueue to add complexity\n        try {\n            queue.put(\"Hello\");\n            queue.put(\"World\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Adding elements to an ArrayList\n        stringList.add(\"First\");\n        stringList.add(\"Second\");\n\n        // Adding a delay to simulate complex processing\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Processing elements from the queue\n        while (!queue.isEmpty()) {\n            try {\n                String element = queue.take();\n                System.out.println(\"Queue Element: \" + element);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Adding elements to the deque\n        /* write */ \n        deque.addLast(42);\n        \n        // Processing elements from the ArrayList\n        for (String s : stringList) {\n            System.out.println(\"List Element: \" + s);\n        }\n\n        // More complex logic before reading from the deque\n        for (int i = 0; i < 3; i++) {\n            try {\n                deque.addLast(i * 10);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Adding a delay to simulate further processing\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Reading from the deque\n        try {\n            /* read */ \n            int value = deque.takeLast();\n            System.out.println(\"Deque Value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n        /* write */ \n        deque.addLast(42);\n\n        try {\n            /* read */ \n            int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeLast"
    }
}