{
    "files": {
        "ExecutorServiceManager.java": "import com.google.common.util.concurrent.MoreExecutors;\nimport java.util.concurrent.ExecutorService;\n\npublic class ExecutorServiceManager {\n    private ExecutorService executorService;\n\n    public void createExecutorService() {\n        /* write */ executorService = MoreExecutors.newDirectExecutorService();\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n}\n",
        "Task.java": "public class Task {\n    private String taskName;\n\n    public Task(String taskName) {\n        this.taskName = taskName;\n    }\n\n    public void execute() {\n        System.out.println(\"Executing task: \" + taskName);\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        ExecutorServiceManager executorServiceManager = new ExecutorServiceManager();\n        executorServiceManager.createExecutorService();\n\n        List<Task> tasks = new ArrayList<>();\n        tasks.add(new Task(\"Task 1\"));\n        tasks.add(new Task(\"Task 2\"));\n\n        for (Task task : tasks) {\n            task.execute();\n        }\n\n        /* read */ ExecutorService retrievedService = executorServiceManager.getExecutorService();\n        System.out.println(\"Executor Service retrieved successfully: \" + (retrievedService != null));\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.util.concurrent.MoreExecutors",
        "write_method": "newDirectExecutorService",
        "read_class": "com.google.common.util.concurrent.MoreExecutors",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.util.concurrent.MoreExecutors;\nimport java.util.concurrent.ExecutorService;\n\npublic class Main {\n    public static void main(String[] args) {\n        /* write */ ExecutorService executorService = MoreExecutors.newDirectExecutorService();\n        /* read */ ExecutorService retrievedService = MoreExecutors.get(executorService);\n        System.out.println(\"Executor Service retrieved successfully: \" + (retrievedService != null));\n    }\n}",
    "java_code_complex": "import com.google.common.util.concurrent.MoreExecutors;\nimport java.util.concurrent.ExecutorService;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        /* write */ ExecutorService executorService = MoreExecutors.newDirectExecutorService();\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 2);\n        }\n        \n        for (Integer num : numbers) {\n            System.out.println(\"Number: \" + num);\n        }\n\n        // Simulating some task submission to the executor service\n        executorService.submit(() -> System.out.println(\"Task executed in executor service\"));\n\n        // Unrelated code to add complexity\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String str : stringList) {\n            System.out.println(\"String: \" + str);\n        }\n\n        /* read */ ExecutorService retrievedService = MoreExecutors.get(executorService);\n        System.out.println(\"Executor Service retrieved successfully: \" + (retrievedService != null));\n    }\n}"
}