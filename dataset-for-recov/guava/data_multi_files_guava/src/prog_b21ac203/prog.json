{
    "files": {
        "AtomicDoubleManager.java": "import com.google.common.util.concurrent.AtomicDouble;\n\npublic class AtomicDoubleManager {\n    private AtomicDouble atomicDouble = new AtomicDouble(0.0);\n    \n    public void addValue(double value) {\n        /* write */ atomicDouble.addAndGet(value);\n    }\n\n    public double getValue() {\n        return atomicDouble.get();\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Main.java": "import java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDoubleManager atomicDoubleManager = new AtomicDoubleManager();\n        Student student = new Student(\"Alice\");\n        student.addScore(90);\n        \n        // Adding a score to the atomic double manager\n        atomicDoubleManager.addValue(5.0);\n        \n        // Creating a course and adding a student\n        Course course = new Course(\"Mathematics\");\n        course.addStudent(student);\n\n        /* read */ double value = atomicDoubleManager.getValue();\n        List<Integer> scores = student.getScores();\n        System.out.println(\"Value after write: \" + value);\n        System.out.println(\"Student: \" + student.name + \", Score: \" + scores.get(0));\n    }\n}"
    },
    "pair": {
        "write_class": "com.google.common.util.concurrent.AtomicDouble",
        "write_method": "addAndGet",
        "read_class": "com.google.common.util.concurrent.AtomicDouble",
        "read_method": "get"
    },
    "java_code_simple": "import com.google.common.util.concurrent.AtomicDouble;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDouble atomicDouble = new AtomicDouble(0.0);\n        /* write */ double newValue = atomicDouble.addAndGet(5.0);\n        /* read */ double value = atomicDouble.get();\n        System.out.println(\"Value after write: \" + newValue);\n        System.out.println(\"Value read: \" + value);\n    }\n}",
    "java_code_complex": "import com.google.common.util.concurrent.AtomicDouble;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        AtomicDouble atomicDouble = new AtomicDouble(0.0);\n        Map<String, Integer> map = new HashMap<>();\n        \n        // Adding some values to the map\n        map.put(\"A\", 1);\n        map.put(\"B\", 2);\n        map.put(\"C\", 3);\n        \n        // Modifying the map\n        for (String key : map.keySet()) {\n            map.put(key, map.get(key) * 2);\n        }\n        \n        /* write */ double newValue = atomicDouble.addAndGet(5.0);\n        \n        // Using the map after writing\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        \n        // Performing some unrelated calculations\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 10 natural numbers: \" + sum);\n        \n        /* read */ double value = atomicDouble.get();\n        System.out.println(\"Value after write: \" + newValue);\n        System.out.println(\"Value read: \" + value);\n    }\n}"
}