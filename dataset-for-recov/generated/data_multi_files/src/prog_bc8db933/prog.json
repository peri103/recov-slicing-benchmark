{
    "files": {
        "DequeOperations.java": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class DequeOperations {\n    private ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n\n    public void addElement(int element) {\n        /* write */ deque.addLast(element);\n    }\n\n    public Integer peekLastElement() {\n        return deque.peekLast();\n    }\n\n    public void addFirstElement(int element) {\n        deque.addFirst(element);\n    }\n\n    public void printAndClearDeque() {\n        while (!deque.isEmpty()) {\n            System.out.println(\"Removed from deque: \" + deque.pollFirst());\n        }\n    }\n}\n",
        "DataStructures.java": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class DataStructures {\n    private ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n    private LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void populateQueue() {\n        for (int i = 0; i < 5; i++) {\n            queue.add(i * 10);\n        }\n    }\n\n    public void transferQueueToDeque(DequeOperations dequeOps) {\n        while (!queue.isEmpty()) {\n            dequeOps.addElement(queue.poll());\n        }\n    }\n\n    public void populateMap() {\n        map.put(\"first\", 1);\n        map.put(\"second\", 2);\n        map.computeIfPresent(\"first\", (key, val) -> val + 10);\n        map.computeIfAbsent(\"third\", key -> 3);\n    }\n\n    public void displayMapContents() {\n        map.forEach((key, val) -> System.out.println(key + \": \" + val));\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        DequeOperations dequeOps = new DequeOperations();\n        DataStructures dataStructs = new DataStructures();\n\n        dataStructs.populateQueue();\n        dataStructs.transferQueueToDeque(dequeOps);\n        dataStructs.populateMap();\n        dataStructs.displayMapContents();\n\n        dequeOps.addFirstElement(100);\n        dequeOps.addElement(200);\n\n        // Read the last element of the deque\n        /* read */ Integer value = dequeOps.peekLastElement();\n        System.out.println(\"Peek Last: \" + value);\n\n        dequeOps.addElement(300);\n        dequeOps.addElement(400);\n\n        dequeOps.printAndClearDeque();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "read_method": "peekLast"
    },
    "java_code_simple": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        /* write */ deque.addLast(42);\n        /* read */ Integer value = deque.peekLast();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ConcurrentLinkedDeque\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        \n        // Initialize a ConcurrentHashMap\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        \n        // Initialize a LinkedBlockingQueue\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        \n        // Add some elements to the queue\n        for (int i = 0; i < 5; i++) {\n            queue.add(i * 10);\n        }\n        \n        // Add elements from the queue to the deque\n        while (!queue.isEmpty()) {\n            /* write */ deque.addLast(queue.poll());\n        }\n        \n        // Add elements to the map\n        map.put(\"first\", 1);\n        map.put(\"second\", 2);\n        \n        // Perform some operations on the map\n        map.computeIfPresent(\"first\", (key, val) -> val + 10);\n        map.computeIfAbsent(\"third\", key -> 3);\n        \n        // Display map contents\n        map.forEach((key, val) -> System.out.println(key + \": \" + val));\n        \n        // Perform some operations on the deque\n        deque.addFirst(100);\n        deque.addLast(200);\n        \n        // Iterate over the deque and print each element\n        for (Integer num : deque) {\n            System.out.println(\"Deque element: \" + num);\n        }\n        \n        // Read the last element of the deque\n        /* read */ Integer value = deque.peekLast();\n        System.out.println(\"Peek Last: \" + value);\n        \n        // Add more elements to the deque\n        deque.addLast(300);\n        deque.addLast(400);\n        \n        // Remove and print each element from the deque\n        while (!deque.isEmpty()) {\n            System.out.println(\"Removed from deque: \" + deque.pollFirst());\n        }\n    }\n}"
}