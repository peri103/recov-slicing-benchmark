{
    "files": {
        "QueueManager.java": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class QueueManager {\n    private LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void addToQueue(int value) {\n        try {\n            /* write */ queue.put(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public LinkedBlockingQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "Student.java": "import java.util.List;\nimport java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        queueManager.addToQueue(42);\n\n        Course course = new Course(\"Computer Science\");\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n\n        student1.addScore(85);\n        student2.addScore(90);\n\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.name);\n            for (int score : student.getScores()) {\n                System.out.println(\"Score: \" + score);\n            }\n        }\n\n        try {\n            /* read */ int value = queueManager.getQueue().take();\n            System.out.println(\"Value from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        Queue<String> stringQueue = new LinkedList<>();\n\n        try {\n            /* write */ queue.put(42);\n            stringQueue.add(\"Hello\");\n            stringQueue.add(\"World\");\n\n            for (String str : stringQueue) {\n                System.out.println(\"String from stringQueue: \" + str);\n            }\n\n            int sum = 0;\n            for (int i = 0; i < 5; i++) {\n                queue.put(i * 10);\n                sum += i * 10;\n            }\n\n            System.out.println(\"Sum of added integers: \" + sum);\n\n            int anotherValue = queue.take();\n            System.out.println(\"Another value from queue: \" + anotherValue);\n\n            /* read */ int value = queue.take();\n            System.out.println(\"Original value from queue: \" + value);\n\n            LinkedBlockingQueue<Double> doubleQueue = new LinkedBlockingQueue<>();\n            for (int i = 0; i < 3; i++) {\n                doubleQueue.put(i * 1.5);\n            }\n\n            while (!doubleQueue.isEmpty()) {\n                System.out.println(\"Double value: \" + doubleQueue.take());\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}