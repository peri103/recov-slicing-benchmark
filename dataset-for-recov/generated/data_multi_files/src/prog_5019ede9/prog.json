{
    "files": {
        "SynchronousQueueWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class SynchronousQueueWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public SynchronousQueueWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeValue(int value) {\n        new Thread(() -> {\n            try {\n                /* write */ queue.put(value);\n                System.out.println(\"Value written to the SynchronousQueue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Write operation interrupted.\");\n            }\n        }).start();\n    }\n}\n",
        "SynchronousQueueReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class SynchronousQueueReader {\n    private SynchronousQueue<Integer> queue;\n\n    public SynchronousQueueReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void readValue() {\n        new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from the SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Read operation interrupted.\");\n            }\n        }).start();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        SynchronousQueueWriter writer = new SynchronousQueueWriter(queue);\n        SynchronousQueueReader reader = new SynchronousQueueReader(queue);\n\n        writer.writeValue(42);\n        reader.readValue();\n\n        Student student = new Student(\"Alice\");\n        student.addScore(85);\n        student.addScore(90);\n\n        Course course = new Course(\"Mathematics\");\n        course.enrollStudent(student);\n\n        for (Student enrolledStudent : course.getStudents()) {\n            System.out.println(\"Student: \" + enrolledStudent.getName());\n            System.out.println(\"Scores: \" + enrolledStudent.getScores());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        // Create a new thread to perform the write operation\n        new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written to the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Write operation interrupted.\");\n            }\n        }).start();\n\n        // Create a new thread to perform the read operation\n        new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from the queue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Read operation interrupted.\");\n            }\n        }).start();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> synchronousQueue = new SynchronousQueue<>();\n        ArrayBlockingQueue<Integer> arrayBlockingQueue = new ArrayBlockingQueue<>(10);\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Create a new thread to perform the write operation on the SynchronousQueue\n        new Thread(() -> {\n            try {\n                /* write */ synchronousQueue.put(42);\n                System.out.println(\"Value written to the SynchronousQueue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Write operation interrupted.\");\n            }\n        }).start();\n\n        // Create another thread to perform operations on ArrayBlockingQueue\n        new Thread(() -> {\n            try {\n                arrayBlockingQueue.put(100);\n                System.out.println(\"Value written to the ArrayBlockingQueue.\");\n                int value = arrayBlockingQueue.take();\n                System.out.println(\"Value read from the ArrayBlockingQueue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"ArrayBlockingQueue operation interrupted.\");\n            }\n        }).start();\n\n        // Create another thread to perform operations on LinkedList\n        new Thread(() -> {\n            linkedList.add(200);\n            linkedList.add(300);\n            System.out.println(\"Values written to the LinkedList.\");\n            int value = linkedList.remove();\n            System.out.println(\"Value read from the LinkedList: \" + value);\n        }).start();\n\n        // Create a new thread to perform the read operation on the SynchronousQueue\n        new Thread(() -> {\n            try {\n                /* read */ int value = synchronousQueue.take();\n                System.out.println(\"Value read from the SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Read operation interrupted.\");\n            }\n        }).start();\n    }\n}"
}