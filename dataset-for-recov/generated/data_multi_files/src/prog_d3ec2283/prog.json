{
    "files": {
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n    private Course course;\n\n    public Student(String name, int age, Course course) {\n        this.name = name;\n        this.age = age;\n        this.course = course;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n}\n",
        "Course.java": "import java.util.concurrent.ConcurrentSkipListMap;\n\npublic class Course {\n    private String courseName;\n    private ConcurrentSkipListMap<String, Integer> studentScores = new ConcurrentSkipListMap<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addScore(String studentName, int score) {\n        /* write */ studentScores.put(studentName, score);\n    }\n\n    public Integer getScore(String studentName) {\n        return studentScores.get(studentName);\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Course mathCourse = new Course(\"Mathematics\");\n        Student student = new Student(\"Alice\", 20, mathCourse);\n\n        mathCourse.addScore(student.getName(), 95);\n\n        // Additional operations\n        System.out.println(\"Student Name: \" + student.getName());\n        System.out.println(\"Student Age: \" + student.getAge());\n        System.out.println(\"Course Name: \" + student.getCourse().getCourseName());\n\n        // Check scores\n        Integer score = student.getCourse().getScore(student.getName());\n        /* read */ System.out.println(\"Score for \" + student.getName() + \": \" + score);\n\n        // Further operations\n        mathCourse.addScore(\"Bob\", 85);\n        System.out.println(\"Score for Bob: \" + mathCourse.getScore(\"Bob\"));\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentSkipListMap",
        "write_method": "put",
        "read_class": "java.util.concurrent.ConcurrentSkipListMap",
        "read_method": "get"
    },
    "java_code_simple": "import java.util.concurrent.ConcurrentSkipListMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentSkipListMap<String, Integer> map = new ConcurrentSkipListMap<>();\n        /* write */ map.put(\"key\", 42);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.HashMap;\nimport java.util.TreeSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentSkipListMap<String, Integer> map = new ConcurrentSkipListMap<>();\n        HashMap<String, String> hashMap = new HashMap<>();\n        TreeSet<Integer> treeSet = new TreeSet<>();\n\n        // Adding elements to TreeSet\n        for (int i = 0; i < 5; i++) {\n            treeSet.add(i * 10);\n        }\n\n        // Adding elements to HashMap\n        hashMap.put(\"first\", \"Hello\");\n        hashMap.put(\"second\", \"World\");\n\n        // Processing TreeSet elements\n        for (Integer num : treeSet) {\n            System.out.println(\"TreeSet element: \" + num);\n        }\n\n        // Processing HashMap elements\n        for (String key : hashMap.keySet()) {\n            System.out.println(\"HashMap key: \" + key + \", value: \" + hashMap.get(key));\n        }\n\n        /* write */ map.put(\"key\", 42);\n\n        // Additional processing before reading\n        if (map.containsKey(\"key\")) {\n            System.out.println(\"Key exists in map.\");\n        }\n\n        // More operations\n        map.put(\"anotherKey\", 100);\n        map.put(\"yetAnotherKey\", 200);\n\n        // Check map size\n        System.out.println(\"Map size before read: \" + map.size());\n\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(\"Read value: \" + value);\n\n        // Further operations\n        map.remove(\"anotherKey\");\n        System.out.println(\"Map size after removal: \" + map.size());\n\n        // Final output of all map values\n        for (String key : map.keySet()) {\n            System.out.println(\"Final Map key: \" + key + \", value: \" + map.get(key));\n        }\n    }\n}"
}