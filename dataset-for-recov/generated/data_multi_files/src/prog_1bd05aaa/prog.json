{
    "files": {
        "QueueWriter.java": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class QueueWriter {\n    private ArrayBlockingQueue<Integer> queue;\n\n    public QueueWriter(ArrayBlockingQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n}\n",
        "QueueReader.java": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class QueueReader {\n    private ArrayBlockingQueue<Integer> queue;\n\n    public QueueReader(ArrayBlockingQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int readValue() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int id;\n\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\n\npublic class Course {\n    private String courseName;\n    private ArrayList<Student> enrolledStudents;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.enrolledStudents = new ArrayList<>();\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public ArrayList<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ArrayBlockingQueue with a capacity of 10\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n\n        // Initialize the writer and reader\n        QueueWriter writer = new QueueWriter(queue);\n        QueueReader reader = new QueueReader(queue);\n\n        // Create a Course and Students\n        Course course = new Course(\"Computer Science\");\n        Student student1 = new Student(\"Alice\", 1);\n        Student student2 = new Student(\"Bob\", 2);\n\n        // Enroll students in the course\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        try {\n            // Write a value to the queue\n            writer.writeValue(42);\n\n            // Simulate some unrelated operations with course and students\n            for (Student student : course.getEnrolledStudents()) {\n                System.out.println(\"Enrolled Student: \" + student.getName() + \", ID: \" + student.getId());\n            }\n\n            // Read the value from the queue\n            int value = reader.readValue();\n\n            // Print the value to ensure it is the one written\n            System.out.println(\"Value from ArrayBlockingQueue: \" + value);\n        } catch (InterruptedException e) {\n            // Handle the exception if the thread is interrupted\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ArrayBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.ArrayBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ArrayBlockingQueue with a capacity of 10\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        \n        try {\n            // Write a value to the queue\n            /* write */ queue.put(42);\n            \n            // Read the value from the queue\n            /* read */ int value = queue.take();\n            \n            // Print the value to ensure it is the one written\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            // Handle the exception if the thread is interrupted\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ArrayBlockingQueue with a capacity of 10\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        \n        // Initialize a LinkedBlockingQueue with a capacity of 5\n        LinkedBlockingQueue<String> linkedQueue = new LinkedBlockingQueue<>(5);\n        \n        // Initialize a HashMap to store some data\n        HashMap<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        \n        try {\n            // Write a value to the queue\n            /* write */ queue.put(42);\n            \n            // Simulate some unrelated operations\n            linkedQueue.put(\"Hello\");\n            linkedQueue.put(\"World\");\n            \n            // Perform operations with the map\n            for (String key : map.keySet()) {\n                System.out.println(\"Map Key: \" + key + \", Value: \" + map.get(key));\n            }\n            \n            // More unrelated operations\n            String firstElement = linkedQueue.take();\n            System.out.println(\"First element from linkedQueue: \" + firstElement);\n            \n            // Final unrelated operation\n            linkedQueue.put(\"Java\");\n            System.out.println(\"Another element added to linkedQueue: Java\");\n            \n            // Read the value from the queue\n            /* read */ int value = queue.take();\n            \n            // Print the value to ensure it is the one written\n            System.out.println(\"Value from ArrayBlockingQueue: \" + value);\n        } catch (InterruptedException e) {\n            // Handle the exception if the thread is interrupted\n            e.printStackTrace();\n        }\n    }\n}"
}