{
    "java_code": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.Stack;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        Stack<Integer> stack = new Stack<>();\n        Queue<Integer> queue = new LinkedList<>();\n\n        try {\n            // Adding elements to stack\n            for (int i = 0; i < 5; i++) {\n                stack.push(i * 10);\n            }\n\n            // Adding elements to queue\n            for (int i = 5; i < 10; i++) {\n                queue.add(i * 10);\n            }\n\n            // Processing stack elements\n            while (!stack.isEmpty()) {\n                int stackValue = stack.pop();\n                System.out.println(\"Stack Value: \" + stackValue);\n                deque.addLast(stackValue);\n            }\n\n            // Processing queue elements\n            while (!queue.isEmpty()) {\n                int queueValue = queue.poll();\n                System.out.println(\"Queue Value: \" + queueValue);\n                deque.addLast(queueValue);\n            }\n\n            /* write */ deque.addLast(42);\n\n            // Additional operations\n            for (int i = 0; i < 3; i++) {\n                deque.addLast(i * 100);\n            }\n\n            // Simulating delay\n            Thread.sleep(1000);\n\n            // Retrieve and print the last element added\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Deque Last Value: \" + value);\n\n            // Further processing of deque elements\n            while (!deque.isEmpty()) {\n                int dequeValue = deque.takeLast();\n                System.out.println(\"Processed Deque Value: \" + dequeValue);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        try {\n            /* write */ deque.addLast(42);\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeLast"
    }
}