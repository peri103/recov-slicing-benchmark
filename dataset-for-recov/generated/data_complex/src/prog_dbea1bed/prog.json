{
    "java_code": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the BlockingQueue\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        \n        // Initialize another BlockingQueue for demonstration\n        BlockingQueue<String> stringQueue = new ArrayBlockingQueue<>(10);\n        \n        // Initialize a list to store processed elements\n        List<Integer> processedList = new ArrayList<>();\n        \n        try {\n            // Write value to the queue\n            /* write */ queue.put(42);\n\n            // Add some strings to the stringQueue\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n\n            // Use an executor service to demonstrate concurrent processing\n            ExecutorService executor = Executors.newFixedThreadPool(2);\n\n            executor.submit(() -> {\n                try {\n                    // Process the stringQueue\n                    while (!stringQueue.isEmpty()) {\n                        String str = stringQueue.take();\n                        System.out.println(\"Processed: \" + str);\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            executor.submit(() -> {\n                try {\n                    // Process the integer queue\n                    while (!queue.isEmpty()) {\n                        int number = queue.take();\n                        processedList.add(number * 2); // Multiply by 2 for demonstration\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            // Shutdown the executor and wait for tasks to finish\n            executor.shutdown();\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n\n            // Read value from the queue\n            /* read */ int value = processedList.get(0);\n\n            // Print the value\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the BlockingQueue\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        \n        try {\n            // Write value to the queue\n            /* write */ queue.put(42);\n\n            // Read value from the queue\n            /* read */ int value = queue.take();\n\n            // Print the value\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    }
}