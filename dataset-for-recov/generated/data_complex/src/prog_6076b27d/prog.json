{
    "java_code": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        Queue<String> stringQueue = new LinkedList<>();\n\n        try {\n            /* write */ queue.put(42);\n            stringQueue.add(\"Hello\");\n            stringQueue.add(\"World\");\n\n            for (String str : stringQueue) {\n                System.out.println(\"String from stringQueue: \" + str);\n            }\n\n            int sum = 0;\n            for (int i = 0; i < 5; i++) {\n                queue.put(i * 10);\n                sum += i * 10;\n            }\n\n            System.out.println(\"Sum of added integers: \" + sum);\n\n            int anotherValue = queue.take();\n            System.out.println(\"Another value from queue: \" + anotherValue);\n\n            /* read */ int value = queue.take();\n            System.out.println(\"Original value from queue: \" + value);\n\n            LinkedBlockingQueue<Double> doubleQueue = new LinkedBlockingQueue<>();\n            for (int i = 0; i < 3; i++) {\n                doubleQueue.put(i * 1.5);\n            }\n\n            while (!doubleQueue.isEmpty()) {\n                System.out.println(\"Double value: \" + doubleQueue.take());\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    }
}