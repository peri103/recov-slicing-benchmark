{
    "java_code": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ArrayBlockingQueue with a capacity of 10\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        \n        // Initialize a LinkedBlockingQueue with a capacity of 5\n        LinkedBlockingQueue<String> linkedQueue = new LinkedBlockingQueue<>(5);\n        \n        // Initialize a HashMap to store some data\n        HashMap<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        \n        try {\n            // Write a value to the queue\n            /* write */ queue.put(42);\n            \n            // Simulate some unrelated operations\n            linkedQueue.put(\"Hello\");\n            linkedQueue.put(\"World\");\n            \n            // Perform operations with the map\n            for (String key : map.keySet()) {\n                System.out.println(\"Map Key: \" + key + \", Value: \" + map.get(key));\n            }\n            \n            // More unrelated operations\n            String firstElement = linkedQueue.take();\n            System.out.println(\"First element from linkedQueue: \" + firstElement);\n            \n            // Final unrelated operation\n            linkedQueue.put(\"Java\");\n            System.out.println(\"Another element added to linkedQueue: Java\");\n            \n            // Read the value from the queue\n            /* read */ int value = queue.take();\n            \n            // Print the value to ensure it is the one written\n            System.out.println(\"Value from ArrayBlockingQueue: \" + value);\n        } catch (InterruptedException e) {\n            // Handle the exception if the thread is interrupted\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize the ArrayBlockingQueue with a capacity of 10\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        \n        try {\n            // Write a value to the queue\n            /* write */ queue.put(42);\n            \n            // Read the value from the queue\n            /* read */ int value = queue.take();\n            \n            // Print the value to ensure it is the one written\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            // Handle the exception if the thread is interrupted\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.ArrayBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.ArrayBlockingQueue",
        "read_method": "take"
    }
}