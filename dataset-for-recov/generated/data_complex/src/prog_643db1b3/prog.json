{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n\n        // Writer Thread for SynchronousQueue\n        executorService.execute(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written to SynchronousQueue: 42\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Reader Thread for SynchronousQueue\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(100); // Simulate some processing delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Writer Thread for LinkedBlockingQueue\n        executorService.execute(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                stringQueue.put(\"World\");\n                System.out.println(\"Values written to LinkedBlockingQueue: Hello, World\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Reader Thread for LinkedBlockingQueue\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(200); // Simulate some processing delay\n                while (!stringQueue.isEmpty()) {\n                    String str = stringQueue.take();\n                    System.out.println(\"Value read from LinkedBlockingQueue: \" + str);\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executorService.shutdown();\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written: 42\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n        \n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}