{
    "java_code": "import java.util.Deque;\nimport java.util.LinkedList;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Deque<Integer> deque = new LinkedList<>();\n        ArrayList<String> list = new ArrayList<>();\n        HashMap<Integer, String> map = new HashMap<>();\n\n        // Populate the map with some values\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n\n        // Add elements to the list\n        list.add(\"Hello\");\n        list.add(\"World\");\n\n        // Perform some operations on the list\n        for (String s : list) {\n            System.out.println(\"List item: \" + s);\n        }\n\n        // Add an element to the deque\n        /* write */ deque.addFirst(42);\n\n        // Perform some operations on the map\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Add more elements to the deque\n        deque.addFirst(84);\n        deque.addLast(168);\n\n        // Perform some operations on the deque\n        while (!deque.isEmpty()) {\n            System.out.println(\"Deque item: \" + deque.removeLast());\n        }\n\n        // Insert a delay to simulate complex processing\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Retrieve the first element from the deque\n        /* read */ int value = deque.getFirst();\n        System.out.println(\"First value in deque: \" + value);\n    }\n}",
    "java_code_simple": "import java.util.Deque;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Deque<Integer> deque = new LinkedList<>();\n        /* write */ deque.addFirst(42);\n        /* read */ int value = deque.getFirst();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.Deque",
        "write_method": "addFirst",
        "read_class": "java.util.Deque",
        "read_method": "getFirst"
    }
}