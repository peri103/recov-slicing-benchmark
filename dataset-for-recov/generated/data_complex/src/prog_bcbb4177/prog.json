{
    "java_code": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Original write-read pair\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        \n        // New code using BlockingQueue\n        BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n        queue.add(\"Hello\");\n        queue.add(\"World\");\n        \n        // Processing queue elements\n        List<String> processedStrings = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            try {\n                String element = queue.take();\n                processedStrings.add(element.toUpperCase());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        \n        // Unrelated computations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        \n        // Print results of unrelated computations\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n        \n        // Print processed queue elements\n        System.out.println(\"Processed Strings: \" + processedStrings);\n        \n        // Read operation from original deque\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(\"Value from deque: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Additional logic\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 5);\n        }\n        \n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        \n        System.out.println(\"Product of numbers: \" + product);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeFirst"
    }
}