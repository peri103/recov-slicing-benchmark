{
    "java_code": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.HashSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        HashSet<String> keys = new HashSet<>();\n        \n        keys.add(\"key1\");\n        keys.add(\"key2\");\n        \n        // Adding some initial values to the map\n        map.put(\"key1\", 10);\n        map.put(\"key2\", 20);\n        \n        // Adding a new key-value pair\n        map.put(\"key3\", 30);\n        \n        // Performing operations on the HashSet\n        if (keys.contains(\"key1\")) {\n            System.out.println(\"key1 is present.\");\n        }\n        \n        // Iterating over the keys\n        for (String key : keys) {\n            System.out.println(\"Value for \" + key + \": \" + map.get(key));\n        }\n        \n        /* write */ map.put(\"key\", 42);\n        \n        // Some unrelated computation\n        int sum = 0;\n        for (int i = 0; i < 5; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum from 0 to 4 is: \" + sum);\n        \n        // More operations on the map\n        map.put(\"key4\", 40);\n        map.put(\"key5\", 50);\n        \n        // Checking if the map contains a specific key\n        if (map.containsKey(\"key3\")) {\n            System.out.println(\"key3 is present in the map.\");\n        }\n        \n        // Performing a complex operation\n        int totalSum = 0;\n        for (String key : map.keySet()) {\n            totalSum += map.get(key);\n        }\n        System.out.println(\"Total sum of all values in the map: \" + totalSum);\n        \n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(\"Value for 'key': \" + value);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        /* write */ map.put(\"key\", 42);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentHashMap",
        "write_method": "put",
        "read_class": "java.util.concurrent.ConcurrentHashMap",
        "read_method": "get"
    }
}