{
    "java_code": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        HashMap<String, Integer> map = new HashMap<>();\n        \n        // Adding elements to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        \n        // Adding key-value pairs to the map\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        \n        // Offer a number to the queue\n        /* write */ queue.offer(42);\n        \n        // Process elements in the list\n        for (Integer num : list) {\n            System.out.println(\"List item: \" + num);\n        }\n        \n        // Retrieve a value from the map\n        Integer mapValue = map.get(\"two\");\n        System.out.println(\"Value from map: \" + mapValue);\n        \n        // Perform some operations with the map and list\n        map.put(\"four\", list.get(2));\n        \n        // Poll a number from the queue\n        /* read */ Integer value = queue.poll();\n        System.out.println(\"Polled from queue: \" + value);\n        \n        // Print updated map entries\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Map entry: \" + entry.getKey() + \" -> \" + entry.getValue());\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        /* write */ queue.offer(42);\n        /* read */ Integer value = queue.poll();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "offer",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "poll"
    }
}