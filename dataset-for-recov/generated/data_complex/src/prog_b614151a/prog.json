{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<String> stringList = new ArrayList<>();\n        HashMap<Integer, String> numberMap = new HashMap<>();\n\n        // Adding some elements to stringList\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        // Adding some key-value pairs to numberMap\n        numberMap.put(1, \"One\");\n        numberMap.put(2, \"Two\");\n\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written to the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Writer thread interrupted.\");\n            }\n        });\n\n        // Additional processing on stringList\n        for (String str : stringList) {\n            System.out.println(\"String from list: \" + str);\n        }\n\n        // Additional processing on numberMap\n        for (Map.Entry<Integer, String> entry : numberMap.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        Thread readerThread = new Thread(() -> {\n            try {\n                // Simulate some delay before reading\n                Thread.sleep(1000);\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from the queue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Reader thread interrupted.\");\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            System.out.println(\"Main thread interrupted.\");\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written to the queue.\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Writer thread interrupted.\");\n            }\n        });\n\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from the queue: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                System.out.println(\"Reader thread interrupted.\");\n            }\n        });\n\n        writerThread.start();\n        readerThread.start();\n\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            System.out.println(\"Main thread interrupted.\");\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}