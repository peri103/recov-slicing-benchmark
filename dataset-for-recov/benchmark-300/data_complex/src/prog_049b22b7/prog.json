{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Random;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n    private int id;\n\n    public DelayedElement(long delayTime, int id) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n        this.id = id;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement with id: \" + id + \" and delay: \" + delayTime;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        Random random = new Random();\n\n        // Adding multiple elements with different delays\n        for (int i = 0; i < 5; i++) {\n            long delay = random.nextInt(5000) + 1000; // Random delay between 1 and 6 seconds\n            DelayedElement element = new DelayedElement(delay, i);\n            queue.put(element);\n            System.out.println(\"Added: \" + element);\n        }\n\n        // Performing some unrelated operations\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += random.nextInt(100);\n        }\n        System.out.println(\"Sum of random numbers: \" + sum);\n\n        // Taking the first element from the queue\n        /* write */ queue.put(new DelayedElement(1000, 99)); // Adding one more element with a fixed delay\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken: \" + takenElement);\n\n        // Processing remaining elements in the queue\n        while (!queue.isEmpty()) {\n            DelayedElement element = queue.take();\n            System.out.println(\"Processed: \" + element);\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement with delay: \" + delayTime;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n\n        System.out.println(\"Element taken: \" + takenElement);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}