{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        for (int i = 0; i < 5; i++) {\n            DelayedElement element = new DelayedElement(1000 * (i + 1));\n            list.add(element);\n            linkedList.add(element);\n        }\n\n        // Writing to the DelayQueue\n        /* write */ queue.put(new DelayedElement(1000)); // 1 second delay\n\n        // Reading from the DelayQueue\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken after delay: \" + element);\n\n        // Adding elements from ArrayList to LinkedList\n        for (DelayedElement e : list) {\n            linkedList.add(e);\n        }\n\n        // Printing elements from LinkedList\n        for (DelayedElement e : linkedList) {\n            System.out.println(\"LinkedList element: \" + e);\n        }\n\n        // Creating another DelayQueue and adding elements\n        DelayQueue<DelayedElement> anotherQueue = new DelayQueue<>();\n        for (int i = 0; i < 3; i++) {\n            anotherQueue.put(new DelayedElement(2000 * (i + 1)));\n        }\n\n        // Taking elements from the second DelayQueue\n        while (!anotherQueue.isEmpty()) {\n            DelayedElement e = anotherQueue.take();\n            System.out.println(\"Another queue element taken: \" + e);\n        }\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    \n    public DelayedElement(long delayInMillis) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000)); // 1 second delay\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken after delay: \" + element);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    \n    public DelayedElement(long delayInMillis) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                '}';\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}