{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        BlockingQueue<String> messageQueue = new ArrayBlockingQueue<>(10);\n        \n        // Writer thread for SynchronousQueue\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                messageQueue.put(\"Value 42 written to SynchronousQueue\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reader thread for SynchronousQueue\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n                messageQueue.put(\"Value \" + value + \" read from SynchronousQueue\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Additional thread to process messages from messageQueue\n        Thread messageProcessor = new Thread(() -> {\n            try {\n                String message = messageQueue.take();\n                System.out.println(\"Message: \" + message);\n                message = messageQueue.take();\n                System.out.println(\"Message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        messageProcessor.start();\n        \n        try {\n            writer.join();\n            reader.join();\n            messageProcessor.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writer thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reader thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        \n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}