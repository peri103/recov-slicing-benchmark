{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        Random random = new Random();\n\n        // Thread to write data\n        executor.submit(() -> {\n            try {\n                int value = random.nextInt(100);\n                System.out.println(\"Generated value: \" + value);\n                /* write */ queue.put(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read data\n        executor.submit(() -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(500); // Simulate some delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Received value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Additional unrelated code to make the program more complex\n        executor.submit(() -> {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    System.out.println(\"Doing some unrelated work: \" + i);\n                    TimeUnit.MILLISECONDS.sleep(200);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write data\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read data\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writer.start();\n        reader.start();\n\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}