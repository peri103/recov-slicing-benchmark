{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayMillis) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis() + delayMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n\n        /* write */ queue.put(element);\n\n        // Additional complex code\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            list.add(i * 10);\n        }\n\n        List<String> stringList = new ArrayList<>();\n        for (Integer num : list) {\n            stringList.add(\"Number: \" + num);\n        }\n\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n\n        // Simulate some delay\n        Thread.sleep(1500);\n\n        /* read */ DelayedElement takenElement = queue.take();\n\n        System.out.println(\"Element taken: \" + takenElement);\n\n        // More complex code\n        List<DelayedElement> delayedElements = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            delayedElements.add(new DelayedElement(2000 + i * 500));\n        }\n\n        for (DelayedElement delayedElement : delayedElements) {\n            queue.put(delayedElement);\n        }\n\n        while (!queue.isEmpty()) {\n            DelayedElement elem = queue.take();\n            System.out.println(\"Processed: \" + elem);\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayMillis) {\n        this.delayTime = delayMillis;\n        this.startTime = System.currentTimeMillis() + delayMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n\n        System.out.println(\"Element taken: \" + takenElement);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}