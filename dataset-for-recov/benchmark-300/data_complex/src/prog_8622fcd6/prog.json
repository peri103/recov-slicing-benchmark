{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        Random random = new Random();\n\n        // Create a separate thread to perform the write operation\n        executor.submit(() -> {\n            try {\n                int valueToWrite = random.nextInt(100);\n                System.out.println(\"Generated value to write: \" + valueToWrite);\n                /* write */ queue.put(valueToWrite);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Simulate some unrelated computation\n        int sum = 0;\n        for (int i = 0; i < 1000; i++) {\n            sum += random.nextInt(10);\n        }\n        System.out.println(\"Unrelated computation result: \" + sum);\n\n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(\"Value read from the queue: \" + value);\n\n        // Shutdown the executor service\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n\n        // Additional unrelated code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        String message = stringQueue.take();\n        System.out.println(\"Message from another queue: \" + message);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(value);\n        \n        // Ensure the writer thread completes\n        writerThread.join();\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}