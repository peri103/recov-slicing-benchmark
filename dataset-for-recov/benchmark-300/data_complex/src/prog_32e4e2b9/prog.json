{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            list.add(i * 10);\n        }\n        System.out.println(\"List contents:\");\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n\n        // Simulate some processing time\n        Thread.sleep(500);\n\n        // More additional code\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        System.out.println(\"String list contents:\");\n        for (String s : stringList) {\n            System.out.println(s);\n        }\n\n        // Simulate some more processing time\n        Thread.sleep(500);\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken: \" + takenElement.getDelay(TimeUnit.MILLISECONDS) + \" ms\");\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n\n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken: \" + takenElement.getDelay(TimeUnit.MILLISECONDS) + \" ms\");\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n\n    public DelayedElement(long delayInMilliseconds) {\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}