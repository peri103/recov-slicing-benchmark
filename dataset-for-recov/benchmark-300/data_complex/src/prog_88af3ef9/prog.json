{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n\n        // Generate a list of random numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n\n        // Print the generated numbers\n        System.out.println(\"Generated numbers: \" + numbers);\n\n        // Write thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(numbers.get(0));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Read thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start threads\n        writer.start();\n        reader.start();\n\n        // Wait for threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional operations on the list\n        numbers.sort(Integer::compareTo);\n        System.out.println(\"Sorted numbers: \" + numbers);\n\n        // Calculate the sum of the numbers\n        int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Find the maximum number\n        int max = numbers.stream().max(Integer::compareTo).orElse(0);\n        System.out.println(\"Maximum number: \" + max);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Write thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Read thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start threads\n        writer.start();\n        reader.start();\n\n        // Wait for threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}