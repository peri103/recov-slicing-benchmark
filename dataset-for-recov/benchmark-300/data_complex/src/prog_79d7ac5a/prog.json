{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private long triggerTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.triggerTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(triggerTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed other) {\n        return Long.compare(this.triggerTime, ((DelayedElement) other).triggerTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding elements to the LinkedList\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n        linkedList.add(\"Third\");\n\n        /* write */ queue.put(new DelayedElement(1000));\n\n        // Iterating through the ArrayList and printing elements\n        for (Integer num : list) {\n            System.out.println(\"ArrayList element: \" + num);\n        }\n\n        // Iterating through the LinkedList and printing elements\n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from the queue\");\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long triggerTime;\n\n    public DelayedElement(long delayInMillis) {\n        this.triggerTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(triggerTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed other) {\n        return Long.compare(this.triggerTime, ((DelayedElement) other).triggerTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000));\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from the queue\");\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}