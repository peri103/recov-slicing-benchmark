{
    "java_code": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        List<Integer> list = new ArrayList<>();\n        Random random = new Random();\n\n        // Adding some random numbers to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(random.nextInt(100));\n        }\n\n        // Printing the list\n        System.out.println(\"List before operations: \" + list);\n\n        // Performing some operations on the list\n        for (int i = 0; i < list.size(); i++) {\n            list.set(i, list.get(i) * 2);\n        }\n\n        // Printing the modified list\n        System.out.println(\"List after doubling values: \" + list);\n\n        // Writing a value to the queue\n        /* write */ queue.put(42);\n\n        // Performing some more operations on the list\n        list.removeIf(n -> n < 50);\n\n        // Printing the list after filtering\n        System.out.println(\"List after filtering values less than 50: \" + list);\n\n        // Reading the value from the queue\n        /* read */ int value = queue.take();\n\n        // Printing the value read from the queue\n        System.out.println(\"Value read from the queue: \" + value);\n\n        // Adding more elements to the list\n        for (int i = 0; i < 3; i++) {\n            list.add(random.nextInt(100));\n        }\n\n        // Printing the final list\n        System.out.println(\"Final list: \" + list);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        /* write */ queue.put(1);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "take"
    }
}