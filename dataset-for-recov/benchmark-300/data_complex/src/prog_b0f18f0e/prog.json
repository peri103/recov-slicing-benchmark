{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        \n        // Create a thread to perform the write operation\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value 42 has been written to the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Create a thread to perform the read operation\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Additional unrelated code to make the program more complex\n        System.out.println(\"Performing some unrelated operations...\");\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Unrelated operation \" + (i + 1));\n        }\n        \n        // More complex operations\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n        \n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"String 'Hello' has been written to the stringQueue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        executor.submit(() -> {\n            try {\n                String str = stringQueue.take();\n                System.out.println(\"Read string: \" + str);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        System.out.println(\"All operations completed.\");\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Create a thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n        \n        // Wait for both threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}