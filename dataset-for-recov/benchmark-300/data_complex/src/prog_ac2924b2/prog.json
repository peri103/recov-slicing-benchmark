{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        BlockingQueue<String> logQueue = new LinkedBlockingQueue<>();\n\n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n                logQueue.put(\"Write operation completed: 42\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform some unrelated operations\n        try {\n            TimeUnit.SECONDS.sleep(1); // Simulate some delay\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            logQueue.put(\"Read operation completed: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Process the log messages\n        while (!logQueue.isEmpty()) {\n            try {\n                System.out.println(logQueue.take());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Additional unrelated operations\n        BlockingQueue<Integer> anotherQueue = new LinkedBlockingQueue<>();\n        try {\n            anotherQueue.put(100);\n            System.out.println(\"Unrelated operation: Added 100 to another queue\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}