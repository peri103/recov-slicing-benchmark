{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        AtomicInteger counter = new AtomicInteger(0);\n\n        // Thread to write the value\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                counter.incrementAndGet();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n                counter.incrementAndGet();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.MINUTES);\n\n        // Additional unrelated code to make the program more complex\n        System.out.println(\"Counter value: \" + counter.get());\n\n        // Simulate some other operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing operation \" + i);\n        }\n\n        // Simulate a delay\n        Thread.sleep(1000);\n\n        // Final output\n        System.out.println(\"Program completed.\");\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for the threads to finish\n        writerThread.join();\n        readerThread.join();\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}