{
    "java_code": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the queue\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Task to read from the queue\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Additional complexity: Adding more elements to the queue\n        for (int i = 0; i < 5; i++) {\n            executor.submit(() -> {\n                try {\n                    queue.put(i * 10);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            });\n        }\n\n        // Additional complexity: Reading more elements from the queue\n        for (int i = 0; i < 5; i++) {\n            executor.submit(() -> {\n                try {\n                    int val = queue.take();\n                    System.out.println(\"Additional read: \" + val);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            });\n        }\n\n        executor.shutdown();\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    }
}