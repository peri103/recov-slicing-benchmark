{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Create a Callable task for the write operation\n        Callable<Void> writerTask = () -> {\n            /* write */ queue.put(42);\n            return null;\n        };\n\n        // Create a Callable task for the read operation\n        Callable<Void> readerTask = () -> {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value read: \" + value);\n            return null;\n        };\n\n        // Submit the tasks to the executor\n        Future<Void> writerFuture = executor.submit(writerTask);\n        Future<Void> readerFuture = executor.submit(readerTask);\n\n        // Wait for the tasks to complete\n        try {\n            writerFuture.get();\n            readerFuture.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Shutdown the executor\n        executor.shutdown();\n\n        // Additional complex code\n        SynchronousQueue<String> anotherQueue = new SynchronousQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Create a Callable task for the write operation\n        Callable<Void> anotherWriterTask = () -> {\n            anotherQueue.put(\"Hello\");\n            return null;\n        };\n\n        // Create a Callable task for the read operation\n        Callable<Void> anotherReaderTask = () -> {\n            String message = anotherQueue.take();\n            System.out.println(\"Message read: \" + message);\n            return null;\n        };\n\n        // Submit the tasks to the executor\n        Future<Void> anotherWriterFuture = executor.submit(anotherWriterTask);\n        Future<Void> anotherReaderFuture = executor.submit(anotherReaderTask);\n\n        // Wait for the tasks to complete\n        try {\n            anotherWriterFuture.get();\n            anotherReaderFuture.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        // Shutdown the executor\n        executor.shutdown();\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Create a thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n        \n        // Wait for the threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}