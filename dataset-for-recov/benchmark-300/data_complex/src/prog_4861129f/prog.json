{
    "java_code": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            // Initialize the deque and a random number generator\n            LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n            BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n            Random random = new Random();\n\n            // Add some random numbers to the queue\n            for (int i = 0; i < 5; i++) {\n                queue.put(random.nextInt(100));\n            }\n\n            // Perform some operations on the queue\n            while (!queue.isEmpty()) {\n                int num = queue.take();\n                System.out.println(\"Processing number: \" + num);\n            }\n\n            // Write to the deque\n            /* write */ deque.addFirst(42);\n\n            // Perform some unrelated operations\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n                sum += i;\n            }\n            System.out.println(\"Sum of first 10 integers: \" + sum);\n\n            // Read from the deque\n            /* read */ int value = deque.takeFirst();\n            System.out.println(\"Value read from deque: \" + value);\n\n            // More unrelated operations\n            String[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\n            for (String fruit : fruits) {\n                System.out.println(\"Fruit: \" + fruit);\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n            /* write */ deque.addFirst(42);\n            /* read */ int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeFirst"
    }
}