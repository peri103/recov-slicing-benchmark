{
    "java_code": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        BlockingQueue<Integer> blockingQueue = new ArrayBlockingQueue<>(10);\n\n        try {\n            // Adding elements to the blocking queue\n            blockingQueue.put(10);\n            blockingQueue.put(20);\n            blockingQueue.put(30);\n\n            /* write */ queue.put(42);\n\n            // Taking elements from the blocking queue\n            int value1 = blockingQueue.take();\n            int value2 = blockingQueue.take();\n            int value3 = blockingQueue.take();\n\n            System.out.println(\"Values from blocking queue: \" + value1 + \", \" + value2 + \", \" + value3);\n\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from LinkedTransferQueue: \" + value);\n\n            // Adding more elements to the blocking queue\n            blockingQueue.put(40);\n            blockingQueue.put(50);\n\n            // Taking more elements from the blocking queue\n            int value4 = blockingQueue.take();\n            int value5 = blockingQueue.take();\n\n            System.out.println(\"More values from blocking queue: \" + value4 + \", \" + value5);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "take"
    }
}