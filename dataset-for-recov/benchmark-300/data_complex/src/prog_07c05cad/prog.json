{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delayInMillis, String data) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String data = \"Hello, World!\";\n        /* write */ queue.put(new DelayedElement(1000, data));\n\n        // Additional complex code\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n\n        List<String> messages = new ArrayList<>();\n        for (int num : numbers) {\n            messages.add(\"Number: \" + num);\n        }\n\n        for (String message : messages) {\n            System.out.println(message);\n        }\n\n        // Simulate some delay\n        Thread.sleep(1500);\n\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n\n        // More complex code\n        List<DelayedElement> delayedElements = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            delayedElements.add(new DelayedElement(i * 500, \"Delayed \" + i));\n        }\n\n        for (DelayedElement delayedElement : delayedElements) {\n            queue.put(delayedElement);\n        }\n\n        while (!queue.isEmpty()) {\n            DelayedElement e = queue.take();\n            System.out.println(e.getData());\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delayInMillis, String data) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String data = \"Hello, World!\";\n        /* write */ queue.put(new DelayedElement(1000, data));\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}