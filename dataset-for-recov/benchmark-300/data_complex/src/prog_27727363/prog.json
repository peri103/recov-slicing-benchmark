{
    "java_code": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        list.add(10);\n        list.add(20);\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n\n        /* write */ map.putIfAbsent(\"key\", 123);\n\n        // Iterating over the ArrayList and printing elements\n        for (Integer num : list) {\n            System.out.println(\"ArrayList element: \" + num);\n        }\n\n        // Adding elements from ArrayList to the ConcurrentHashMap\n        for (int i = 0; i < list.size(); i++) {\n            map.putIfAbsent(\"listKey\" + i, list.get(i));\n        }\n\n        // Iterating over the LinkedList and printing elements\n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(\"Value from ConcurrentHashMap: \" + value);\n\n        // Adding more elements to the ArrayList and LinkedList\n        list.add(30);\n        linkedList.add(\"Third\");\n\n        // Printing the updated ArrayList and LinkedList\n        System.out.println(\"Updated ArrayList: \" + list);\n        System.out.println(\"Updated LinkedList: \" + linkedList);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        /* write */ map.putIfAbsent(\"key\", 123);\n        /* read */ Integer value = map.get(\"key\");\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentHashMap",
        "write_method": "putIfAbsent",
        "read_class": "java.util.concurrent.ConcurrentHashMap",
        "read_method": "get"
    }
}