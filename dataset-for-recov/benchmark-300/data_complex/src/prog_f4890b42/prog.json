{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n        System.out.println(\"List contents: \" + list);\n\n        // Simulate some processing time\n        Thread.sleep(500);\n\n        // Another DelayQueue operation\n        DelayQueue<DelayedElement> anotherQueue = new DelayQueue<>();\n        DelayedElement anotherElement = new DelayedElement(2000); // 2 seconds delay\n        anotherQueue.put(anotherElement);\n\n        // More processing\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Processing list item: \" + list.get(i));\n        }\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue with delay: \" + takenElement.getDelay(TimeUnit.MILLISECONDS) + \" ms\");\n\n        // Final processing\n        DelayedElement anotherTakenElement = anotherQueue.take();\n        System.out.println(\"Another element taken from queue with delay: \" + anotherTakenElement.getDelay(TimeUnit.MILLISECONDS) + \" ms\");\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue with delay: \" + takenElement.getDelay(TimeUnit.MILLISECONDS) + \" ms\");\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}