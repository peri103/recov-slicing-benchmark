{
    "java_code": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        List<Integer> list = new ArrayList<>();\n        List<String> stringList = new ArrayList<>();\n\n        // Adding some elements to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding some strings to the stringList\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n\n        /* write */ deque.addFirst(42);\n\n        // Processing the list\n        for (int num : list) {\n            System.out.println(\"List element: \" + num);\n        }\n\n        // Processing the stringList\n        for (String str : stringList) {\n            System.out.println(\"String list element: \" + str);\n        }\n\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(\"Value from deque: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Adding more elements to the deque\n        deque.addLast(100);\n        deque.addLast(200);\n\n        // Taking elements from the deque\n        try {\n            int first = deque.takeFirst();\n            int second = deque.takeFirst();\n            System.out.println(\"First element: \" + first);\n            System.out.println(\"Second element: \" + second);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeFirst"
    }
}