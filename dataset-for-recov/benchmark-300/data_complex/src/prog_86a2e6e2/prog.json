{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private int value;\n\n    public DelayedElement(int value, long delayInMillis) {\n        this.value = value;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        for (int i = 0; i < 5; i++) {\n            DelayedElement delayedElement = new DelayedElement(i * 10, 1000);\n            list.add(delayedElement);\n            linkedList.add(delayedElement);\n        }\n\n        // Adding elements from the ArrayList to the DelayQueue\n        for (DelayedElement element : list) {\n            queue.put(element);\n        }\n\n        // Adding elements from the LinkedList to the DelayQueue\n        for (DelayedElement element : linkedList) {\n            queue.put(element);\n        }\n\n        /* write */ queue.put(new DelayedElement(42, 1000)); // 1000 milliseconds delay\n\n        // Processing elements from the DelayQueue\n        while (!queue.isEmpty()) {\n            DelayedElement element = queue.take();\n            System.out.println(\"Processed element: \" + element.getValue());\n        }\n\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Final element: \" + element.getValue());\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private int value;\n\n    public DelayedElement(int value, long delayInMillis) {\n        this.value = value;\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(42, 1000)); // 1000 milliseconds delay\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getValue());\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}