{
    "java_code": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Producer task\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(1);\n                System.out.println(\"Produced: 1\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Consumer task\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Consumed: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code\n        BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Producer task for stringQueue\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"Produced: Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Consumer task for stringQueue\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate delay\n                String message = stringQueue.take();\n                System.out.println(\"Consumed: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    }
}