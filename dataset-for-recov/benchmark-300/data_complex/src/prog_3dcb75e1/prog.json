{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 10);\n        }\n\n        System.out.println(\"Numbers list:\");\n        for (int num : numbers) {\n            System.out.println(num);\n        }\n\n        // Simulate some processing time\n        Thread.sleep(500);\n\n        // More complex operations\n        List<String> strings = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            strings.add(\"String \" + i);\n        }\n\n        System.out.println(\"Strings list:\");\n        for (String str : strings) {\n            System.out.println(str);\n        }\n\n        // Simulate more processing time\n        Thread.sleep(500);\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n\n    static class DelayedElement implements Delayed {\n        private long startTime;\n\n        public DelayedElement(long delayInMillis) {\n            this.startTime = System.currentTimeMillis() + delayInMillis;\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long diff = startTime - System.currentTimeMillis();\n            return unit.convert(diff, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed o) {\n            return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n        }\n\n        @Override\n        public String toString() {\n            return \"DelayedElement{\" +\n                    \"startTime=\" + startTime +\n                    '}';\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n\n    static class DelayedElement implements Delayed {\n        private long startTime;\n\n        public DelayedElement(long delayInMillis) {\n            this.startTime = System.currentTimeMillis() + delayInMillis;\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long diff = startTime - System.currentTimeMillis();\n            return unit.convert(diff, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed o) {\n            return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n        }\n\n        @Override\n        public String toString() {\n            return \"DelayedElement{\" +\n                    \"startTime=\" + startTime +\n                    '}';\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}