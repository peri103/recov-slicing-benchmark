{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        BlockingQueue<Integer> buffer = new ArrayBlockingQueue<>(10);\n        Random random = new Random();\n\n        // Thread to write the value to the SynchronousQueue\n        Thread writer = new Thread(() -> {\n            try {\n                int value = random.nextInt(100);\n                /* write */ queue.put(value);\n                System.out.println(\"Written to SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value from the SynchronousQueue\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read from SynchronousQueue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to write random values to the buffer\n        Thread bufferWriter = new Thread(() -> {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    int value = random.nextInt(100);\n                    buffer.put(value);\n                    System.out.println(\"Written to buffer: \" + value);\n                    Thread.sleep(200); // Simulate some delay\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read values from the buffer\n        Thread bufferReader = new Thread(() -> {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    int value = buffer.take();\n                    System.out.println(\"Read from buffer: \" + value);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start all threads\n        writer.start();\n        reader.start();\n        bufferWriter.start();\n        bufferReader.start();\n\n        // Wait for all threads to finish\n        try {\n            writer.join();\n            reader.join();\n            bufferWriter.join();\n            bufferReader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Thread to read the value\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the threads\n        writer.start();\n        reader.start();\n        \n        // Wait for the threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}