{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n\n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writerThread.start();\n\n        // Add some unrelated operations to make the program more complex\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(\"Value read from queue: \" + value);\n\n        writerThread.join(); // Ensure the writer thread completes\n\n        // More unrelated operations\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n\n        // Another unrelated operation\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Thread stringWriterThread = new Thread(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        stringWriterThread.start();\n        String stringValue = stringQueue.take();\n        System.out.println(\"String value read from queue: \" + stringValue);\n\n        stringWriterThread.join();\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(value);\n        \n        writerThread.join(); // Ensure the writer thread completes\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}