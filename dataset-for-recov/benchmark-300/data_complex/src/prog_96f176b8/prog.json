{
    "java_code": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding elements to the LinkedList\n        for (int i = 0; i < 5; i++) {\n            linkedList.add(i * 5);\n        }\n\n        /* write */ queue.put(42);\n\n        // Processing the ArrayList\n        for (Integer num : list) {\n            System.out.println(\"ArrayList value: \" + num);\n        }\n\n        // Processing the LinkedList\n        for (Integer num : linkedList) {\n            System.out.println(\"LinkedList value: \" + num);\n        }\n\n        /* read */ int value = queue.take();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Adding more elements to the ArrayList\n        for (int i = 5; i < 10; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding more elements to the LinkedList\n        for (int i = 5; i < 10; i++) {\n            linkedList.add(i * 5);\n        }\n\n        // Processing the updated ArrayList\n        for (Integer num : list) {\n            System.out.println(\"Updated ArrayList value: \" + num);\n        }\n\n        // Processing the updated LinkedList\n        for (Integer num : linkedList) {\n            System.out.println(\"Updated LinkedList value: \" + num);\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    }
}