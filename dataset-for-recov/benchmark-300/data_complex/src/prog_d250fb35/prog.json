{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n\n        // Populate the list with random numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n\n        // Thread to write the value\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writer.start();\n        reader.start();\n\n        // Print the list of random numbers\n        System.out.println(\"Random numbers:\");\n        for (int num : numbers) {\n            System.out.println(num);\n        }\n\n        // Wait for threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code\n        int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of random numbers: \" + sum);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Thread to read the value\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the threads\n        writer.start();\n        reader.start();\n        \n        // Wait for threads to finish\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}