{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        AtomicInteger counter = new AtomicInteger(0);\n\n        // Simulate some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            counter.incrementAndGet();\n            System.out.println(\"Counter value: \" + counter.get());\n        }\n\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // More unrelated operations\n        System.out.println(\"Waiting for the delay to expire...\");\n        Thread.sleep(1500); // Wait for the delay to expire\n\n        // Simulate some more unrelated operations\n        for (int i = 0; i < 3; i++) {\n            counter.decrementAndGet();\n            System.out.println(\"Counter value: \" + counter.get());\n        }\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue\");\n\n        // Final unrelated operations\n        System.out.println(\"Final counter value: \" + counter.get());\n    }\n\n    static class DelayedElement implements Delayed {\n        private final long delayTime;\n        private final long startTime;\n\n        public DelayedElement(long delayTime) {\n            this.delayTime = delayTime;\n            this.startTime = System.currentTimeMillis();\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long elapsedTime = System.currentTimeMillis() - startTime;\n            return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed o) {\n            return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue\");\n    }\n\n    static class DelayedElement implements Delayed {\n        private final long delayTime;\n        private final long startTime;\n\n        public DelayedElement(long delayTime) {\n            this.delayTime = delayTime;\n            this.startTime = System.currentTimeMillis();\n        }\n\n        @Override\n        public long getDelay(TimeUnit unit) {\n            long elapsedTime = System.currentTimeMillis() - startTime;\n            return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        public int compareTo(Delayed o) {\n            return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}