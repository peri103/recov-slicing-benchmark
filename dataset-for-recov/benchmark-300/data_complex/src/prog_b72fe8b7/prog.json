{
    "java_code": "import java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Adding elements to the LinkedList\n        linkedList.add(\"Hello\");\n        linkedList.add(\"World\");\n\n        // Performing operations on the ArrayList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList element: \" + list.get(i));\n        }\n\n        // Performing operations on the LinkedList\n        for (String str : linkedList) {\n            System.out.println(\"LinkedList element: \" + str);\n        }\n\n        /* write */ deque.addFirst(42);\n\n        // Adding more elements to the deque\n        deque.addLast(100);\n        deque.addLast(200);\n\n        // Performing operations on the deque\n        for (Integer num : deque) {\n            System.out.println(\"Deque element: \" + num);\n        }\n\n        /* read */ Integer value = deque.peekFirst();\n        System.out.println(\"Peeked value from deque: \" + value);\n\n        // Adding more elements to the ArrayList\n        list.add(50);\n        list.add(60);\n\n        // Performing final operations on the ArrayList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Final ArrayList element: \" + list.get(i));\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        /* write */ deque.addFirst(42);\n        /* read */ Integer value = deque.peekFirst();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "read_method": "peekFirst"
    }
}