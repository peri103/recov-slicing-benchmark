{
    "java_code": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task to write to the deque\n        executor.submit(() -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(500); // Simulate some delay\n                /* write */ deque.addFirst(42);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        // Task to read from the deque\n        executor.submit(() -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(1000); // Simulate some delay\n                /* read */ int value = deque.takeFirst();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(2, TimeUnit.SECONDS);\n\n        // Additional unrelated code to make the program more complex\n        BlockingDeque<String> stringDeque = new LinkedBlockingDeque<>();\n        stringDeque.addFirst(\"Hello\");\n        stringDeque.addFirst(\"World\");\n        System.out.println(\"String Deque contents:\");\n        while (!stringDeque.isEmpty()) {\n            System.out.println(stringDeque.takeFirst());\n        }\n\n        // More unrelated code\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 0 to 9: \" + sum);\n    }\n}",
    "java_code_simple": "import java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        /* read */ int value = deque.takeFirst();\n        System.out.println(value);\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.BlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.BlockingDeque",
        "read_method": "takeFirst"
    }
}