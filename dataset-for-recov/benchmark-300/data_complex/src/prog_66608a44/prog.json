{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = delayTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.delayTime, ((DelayedElement) o).delayTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Adding more complexity\n        DelayQueue<DelayedElement> anotherQueue = new DelayQueue<>();\n        DelayedElement anotherElement = new DelayedElement(2000); // 2 seconds delay\n        anotherQueue.put(anotherElement);\n\n        // Unrelated code\n        System.out.println(\"Waiting for elements to be taken...\");\n        Thread.sleep(1500); // Sleep for 1.5 seconds\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from the queue\");\n\n        // More unrelated code\n        DelayedElement takenAnotherElement = anotherQueue.take();\n        System.out.println(\"Another element taken from the queue\");\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = delayTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.delayTime, ((DelayedElement) o).delayTime);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from the queue\");\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}