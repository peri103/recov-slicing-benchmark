{
    "java_code": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        // Initialize the DelayQueue\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n        // Add some unrelated code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n        System.out.println(\"Numbers list: \" + numbers);\n\n        // Perform the write operation\n        /* write */ queue.put(new DelayedElement(2000)); // 2000 milliseconds delay\n\n        // Add more unrelated code\n        List<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        System.out.println(\"Strings list: \" + strings);\n\n        // Perform some intermediate operations\n        int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(\"Sum of numbers: \" + sum);\n\n        // Perform the read operation\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken: \" + element);\n\n        // Add more unrelated code\n        strings.forEach(System.out::println);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000)); // 1000 milliseconds delay\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken: \" + element);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        return unit.convert(delayTime - elapsedTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    }
}