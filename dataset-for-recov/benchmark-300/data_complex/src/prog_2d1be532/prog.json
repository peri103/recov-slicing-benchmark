{
    "java_code": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Additional complex code\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Starting writer thread...\");\n                /* write */ queue.put(42);\n                System.out.println(\"Writer thread completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // More unrelated code\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Starting reader thread...\");\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n                System.out.println(\"Reader thread completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Additional complex code\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Starting another thread for unrelated task...\");\n                for (int i = 0; i < 5; i++) {\n                    System.out.println(\"Unrelated task iteration: \" + i);\n                    TimeUnit.MILLISECONDS.sleep(100);\n                }\n                System.out.println(\"Unrelated task completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writer.start();\n        reader.start();\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    }
}