{
    "files": {
        "MessageQueue.java": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class MessageQueue {\n    private BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void sendMessage(int message) throws InterruptedException {\n        /* write */ queue.put(message);\n    }\n\n    public int receiveMessage() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "MessageProcessor.java": "public class MessageProcessor {\n    private MessageQueue messageQueue;\n\n    public MessageProcessor(MessageQueue messageQueue) {\n        this.messageQueue = messageQueue;\n    }\n\n    public void processMessage() throws InterruptedException {\n        int message = messageQueue.receiveMessage();\n        System.out.println(\"Processed Message: \" + message);\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        MessageQueue messageQueue = new MessageQueue();\n        MessageProcessor processor = new MessageProcessor(messageQueue);\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Sender task\n        executor.submit(() -> {\n            try {\n                messageQueue.sendMessage(1);\n                System.out.println(\"Sent Message: 1\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Processor task\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate delay\n                processor.processMessage();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code\n        ExecutorService anotherExecutor = Executors.newFixedThreadPool(2);\n\n        // Another sender task\n        anotherExecutor.submit(() -> {\n            try {\n                messageQueue.sendMessage(2);\n                System.out.println(\"Sent Message: 2\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Another processor task\n        anotherExecutor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate delay\n                processor.processMessage();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        anotherExecutor.shutdown();\n        try {\n            anotherExecutor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        try {\n            /* write */ queue.put(1);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Producer task\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(1);\n                System.out.println(\"Produced: 1\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Consumer task\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate delay\n                /* read */ int value = queue.take();\n                System.out.println(\"Consumed: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated code\n        BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        executor = Executors.newFixedThreadPool(2);\n\n        // Producer task for stringQueue\n        executor.submit(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n                System.out.println(\"Produced: Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Consumer task for stringQueue\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1); // Simulate delay\n                String message = stringQueue.take();\n                System.out.println(\"Consumed: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}