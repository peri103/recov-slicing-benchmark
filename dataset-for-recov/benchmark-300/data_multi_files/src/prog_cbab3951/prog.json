{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        if (this.startTime < ((DelayedElement) o).startTime) {\n            return -1;\n        }\n        if (this.startTime > ((DelayedElement) o).startTime) {\n            return 1;\n        }\n        return 0;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        DelayedElement element = new DelayedElement(1000, \"Delayed Data\");\n        \n        queueManager.addElement(element);\n        \n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"First Element\");\n        list.add(\"Second Element\");\n        \n        LinkedList<Integer> linkedList = new LinkedList<>();\n        linkedList.add(10);\n        linkedList.add(20);\n        \n        for (String str : list) {\n            System.out.println(str);\n        }\n        \n        for (Integer num : linkedList) {\n            System.out.println(num);\n        }\n        \n        DelayQueue<DelayedElement> queue = queueManager.getQueue();\n        /* read */ DelayedElement takenElement = queue.take();\n        \n        System.out.println(takenElement.getData());\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        if (this.startTime < ((DelayedElement) o).startTime) {\n            return -1;\n        }\n        if (this.startTime > ((DelayedElement) o).startTime) {\n            return 1;\n        }\n        return 0;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000, \"Delayed Data\");\n        \n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        \n        System.out.println(takenElement.getData());\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        if (this.startTime < ((DelayedElement) o).startTime) {\n            return -1;\n        }\n        if (this.startTime > ((DelayedElement) o).startTime) {\n            return 1;\n        }\n        return 0;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000, \"Delayed Data\");\n        \n        /* write */ queue.put(element);\n        \n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"First Element\");\n        list.add(\"Second Element\");\n        \n        LinkedList<Integer> linkedList = new LinkedList<>();\n        linkedList.add(10);\n        linkedList.add(20);\n        \n        for (String str : list) {\n            System.out.println(str);\n        }\n        \n        for (Integer num : linkedList) {\n            System.out.println(num);\n        }\n        \n        /* read */ DelayedElement takenElement = queue.take();\n        \n        System.out.println(takenElement.getData());\n    }\n}"
}