{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        manager.addElement(element);\n\n        // Additional code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i);\n        }\n\n        System.out.println(\"Numbers list:\");\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n        System.out.println();\n\n        // Simulate some processing time\n        Thread.sleep(500);\n\n        // Add more elements to the queue\n        manager.addElement(new DelayedElement(500));\n        manager.addElement(new DelayedElement(1500));\n\n        // Simulate some more processing time\n        Thread.sleep(200);\n\n        /* read */ DelayedElement takenElement = manager.getQueue().take();\n        System.out.println(\"Taken element: \" + takenElement);\n\n        // Additional processing after the read\n        System.out.println(\"Remaining elements in the queue:\");\n        while (!manager.getQueue().isEmpty()) {\n            DelayedElement remainingElement = manager.getQueue().take();\n            System.out.println(remainingElement);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Taken element: \" + takenElement);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DelayedElement implements Delayed {\n    private long delayTime;\n    private long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis() + delayTime;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i);\n        }\n\n        System.out.println(\"Numbers list:\");\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n        System.out.println();\n\n        // Simulate some processing time\n        Thread.sleep(500);\n\n        // Add more elements to the queue\n        queue.put(new DelayedElement(500));\n        queue.put(new DelayedElement(1500));\n\n        // Simulate some more processing time\n        Thread.sleep(200);\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Taken element: \" + takenElement);\n\n        // Additional processing after the read\n        System.out.println(\"Remaining elements in the queue:\");\n        while (!queue.isEmpty()) {\n            DelayedElement remainingElement = queue.take();\n            System.out.println(remainingElement);\n        }\n    }\n}"
}