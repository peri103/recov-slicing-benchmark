{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void putValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int takeValue() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        Student student = new Student(\"Alice\");\n\n        // Thread to write the value\n        Thread writerThread = new Thread(() -> {\n            try {\n                queueManager.putValue(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        Thread readerThread = new Thread(() -> {\n            try {\n                int value = queueManager.takeValue();\n                System.out.println(\"Value read from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for the threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional operations to make the program more complex\n        student.addScore(95);\n        student.addScore(88);\n        student.addScore(92);\n\n        System.out.println(\"Student scores:\");\n        for (int score : student.getScores()) {\n            System.out.println(score);\n        }\n\n        // Another unrelated operation\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        for (int i = 0; i < 5; i++) {\n            linkedList.add(i * 10);\n        }\n\n        System.out.println(\"Linked List elements:\");\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(linkedList.get(i));\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write the value\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for the threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Adding some initial values to the list and linkedList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Thread to write the value\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read the value\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for the threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional operations to make the program more complex\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n\n        System.out.println(\"Linked List after adding elements from ArrayList:\");\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(linkedList.get(i));\n        }\n\n        // Another unrelated operation\n        int sum = 0;\n        for (int num : linkedList) {\n            sum += num;\n        }\n        System.out.println(\"Sum of all elements in the linked list: \" + sum);\n    }\n}"
}