{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* write */ queue.put(42);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Consumed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        // Start the consumer in a separate thread\n        Thread consumerThread = new Thread(consumer::consumeData);\n        consumerThread.start();\n\n        // Process data\n        processor.processData();\n\n        // Wait for the consumer thread to finish\n        try {\n            consumerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n            BlockingQueue<Integer> buffer = new ArrayBlockingQueue<>(10);\n            Random random = new Random();\n\n            // Producer thread for the buffer\n            Thread producer = new Thread(() -> {\n                try {\n                    for (int i = 0; i < 5; i++) {\n                        int num = random.nextInt(100);\n                        buffer.put(num);\n                        System.out.println(\"Produced: \" + num);\n                        Thread.sleep(200);\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            // Consumer thread for the buffer\n            Thread consumer = new Thread(() -> {\n                try {\n                    for (int i = 0; i < 5; i++) {\n                        int num = buffer.take();\n                        System.out.println(\"Consumed: \" + num);\n                        Thread.sleep(300);\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            producer.start();\n            consumer.start();\n\n            // Write to the SynchronousQueue\n            /* write */ queue.put(42);\n\n            // Simulate some other operations\n            for (int i = 0; i < 3; i++) {\n                System.out.println(\"Performing operation \" + (i + 1));\n                Thread.sleep(500);\n            }\n\n            // Read from the SynchronousQueue\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from SynchronousQueue: \" + value);\n\n            // Wait for threads to finish\n            producer.join();\n            consumer.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}