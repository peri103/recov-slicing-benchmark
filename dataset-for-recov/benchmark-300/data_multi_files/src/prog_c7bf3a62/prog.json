{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int readData() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void writeScore(int score) {\n        dataProcessor.writeData(score);\n    }\n\n    public int readScore() {\n        return dataProcessor.readData();\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"Alice\");\n        \n        // Writing thread\n        Thread writer = new Thread(() -> {\n            student.writeScore(95);\n        });\n        \n        // Reading thread\n        Thread reader = new Thread(() -> {\n            int score = student.readScore();\n            System.out.println(\"Student \" + student.getName() + \" scored: \" + score);\n        });\n        \n        writer.start();\n        reader.start();\n        \n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writing thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reading thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        \n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writing thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reading thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        \n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Additional complex code\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        \n        for (int i = 0; i < 10; i++) {\n            list.add(i);\n            linkedList.add(i * 2);\n        }\n        \n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList value: \" + list.get(i));\n            System.out.println(\"LinkedList value: \" + linkedList.get(i));\n        }\n        \n        // More complex operations\n        list.forEach(item -> {\n            if (item % 2 == 0) {\n                System.out.println(\"Even number in ArrayList: \" + item);\n            }\n        });\n        \n        linkedList.stream()\n                  .filter(item -> item > 5)\n                  .forEach(item -> System.out.println(\"LinkedList value greater than 5: \" + item));\n    }\n}"
}