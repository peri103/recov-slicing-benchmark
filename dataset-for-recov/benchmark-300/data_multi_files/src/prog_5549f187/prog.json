{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* write */ queue.put(42);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Consumed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Initialize some data\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Perform some operations on the list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n\n        // Create and start the data processor\n        DataProcessor processor = new DataProcessor(queue);\n        processor.processData();\n\n        // Perform more operations\n        for (int i = 0; i < linkedList.size(); i++) {\n            list.add(linkedList.get(i));\n        }\n\n        // Create and start the data consumer\n        DataConsumer consumer = new DataConsumer(queue);\n        consumer.consumeData();\n\n        // Print the final state of the list\n        System.out.println(\"Final list contents:\");\n        for (int i : list) {\n            System.out.println(i);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        try {\n            // Initialize some data\n            for (int i = 0; i < 5; i++) {\n                list.add(i * 10);\n                linkedList.add(i * 20);\n            }\n\n            // Perform some operations on the list and linkedList\n            for (int i = 0; i < list.size(); i++) {\n                linkedList.add(list.get(i));\n            }\n\n            // Write to the SynchronousQueue\n            /* write */ queue.put(42);\n\n            // Perform more operations\n            for (int i = 0; i < linkedList.size(); i++) {\n                list.add(linkedList.get(i));\n            }\n\n            // Read from the SynchronousQueue\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n\n            // Print the final state of the list\n            System.out.println(\"Final list contents:\");\n            for (int i : list) {\n                System.out.println(i);\n            }\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}