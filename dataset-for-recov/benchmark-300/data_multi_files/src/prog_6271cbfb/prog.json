{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class DataProcessor {\n    private BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public BlockingQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.BlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        Course course = new Course(\"Computer Science\");\n\n        // Adding students to the course\n        course.addStudent(new Student(\"Alice\", 20));\n        course.addStudent(new Student(\"Bob\", 22));\n        course.addStudent(new Student(\"Charlie\", 21));\n\n        // Processing data\n        processor.processData(100);\n\n        // Retrieving data\n        BlockingQueue<Integer> queue = processor.getQueue();\n        /* read */ int value = queue.take();\n        System.out.println(\"Processed value: \" + value);\n\n        // Displaying course information\n        System.out.println(\"Course: \" + course.getCourseName());\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        /* write */ queue.put(1);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        BlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n\n        // Adding some numbers to the list\n        for (int i = 0; i < 5; i++) {\n            numbers.add(i * 10);\n        }\n\n        // Adding numbers to the string queue\n        for (Integer num : numbers) {\n            stringQueue.put(\"Number: \" + num);\n        }\n\n        // Writing to the original queue\n        /* write */ queue.put(1);\n\n        // Reading from the string queue\n        for (int i = 0; i < 5; i++) {\n            String str = stringQueue.take();\n            System.out.println(str);\n        }\n\n        // Reading from the original queue\n        /* read */ int value = queue.take();\n        System.out.println(\"Value from original queue: \" + value);\n\n        // Additional unrelated code\n        List<String> names = new ArrayList<>();\n        names.add(\"Alice\");\n        names.add(\"Bob\");\n        names.add(\"Charlie\");\n\n        for (String name : names) {\n            System.out.println(\"Hello, \" + name);\n        }\n    }\n}"
}