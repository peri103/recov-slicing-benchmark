{
    "files": {
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n        System.out.println(\"Data written: \" + data);\n    }\n}\n",
        "DataReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataReader {\n    private SynchronousQueue<Integer> queue;\n\n    public DataReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int readData() throws InterruptedException {\n        /* read */ int data = queue.take();\n        System.out.println(\"Data read: \" + data);\n        return data;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataWriter writer = new DataWriter(queue);\n        DataReader reader = new DataReader(queue);\n\n        // Writer task\n        executor.submit(() -> {\n            try {\n                writer.writeData(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Some unrelated code to make the program more complex\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n\n        // Reader task\n        executor.submit(() -> {\n            try {\n                int data = reader.readData();\n                System.out.println(\"Received data: \" + data);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.MINUTES);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writer thread\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reader thread\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        readerThread.start();\n        \n        writerThread.join();\n        readerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Writer task\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value written: 42\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Some unrelated code to make the program more complex\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n\n        // Reader task\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value read: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.MINUTES);\n    }\n}"
}