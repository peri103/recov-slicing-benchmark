{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long expireTime;\n    private final String message;\n\n    public DelayedElement(long delayTime, String message) {\n        this.delayTime = delayTime;\n        this.expireTime = System.currentTimeMillis() + delayTime;\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(expireTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.expireTime, ((DelayedElement) o).expireTime);\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        list.add(new DelayedElement(500, \"First\"));\n        linkedList.add(new DelayedElement(1000, \"Second\"));\n\n        // Adding elements from ArrayList to the DelayQueue\n        for (DelayedElement element : list) {\n            queueManager.addElement(element);\n        }\n\n        // Adding elements from LinkedList to the DelayQueue\n        for (DelayedElement element : linkedList) {\n            queueManager.addElement(element);\n        }\n\n        // Writing the main element to the DelayQueue\n        queueManager.addElement(new DelayedElement(2000, \"Main Element\"));\n\n        // Performing some unrelated operations\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 10);\n        }\n\n        // Printing numbers\n        for (int number : numbers) {\n            System.out.println(number);\n        }\n\n        // Reading the main element from the DelayQueue\n        /* read */ DelayedElement mainElement = queueManager.getQueue().take();\n        System.out.println(mainElement.getMessage());\n\n        // Adding more elements to the DelayQueue\n        queueManager.addElement(new DelayedElement(3000, \"Third\"));\n        queueManager.addElement(new DelayedElement(4000, \"Fourth\"));\n\n        // Reading another element from the DelayQueue\n        DelayedElement anotherElement = queueManager.getQueue().take();\n        System.out.println(anotherElement.getMessage());\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000, \"Hello\"));\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getMessage());\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long expireTime;\n    private final String message;\n\n    public DelayedElement(long delayTime, String message) {\n        this.delayTime = delayTime;\n        this.expireTime = System.currentTimeMillis() + delayTime;\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(expireTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.expireTime, ((DelayedElement) o).expireTime);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList and LinkedList\n        list.add(new DelayedElement(500, \"First\"));\n        linkedList.add(new DelayedElement(1000, \"Second\"));\n\n        // Adding elements from ArrayList to the DelayQueue\n        for (DelayedElement element : list) {\n            queue.put(element);\n        }\n\n        // Adding elements from LinkedList to the DelayQueue\n        for (DelayedElement element : linkedList) {\n            queue.put(element);\n        }\n\n        // Writing the main element to the DelayQueue\n        /* write */ queue.put(new DelayedElement(2000, \"Main Element\"));\n\n        // Performing some unrelated operations\n        ArrayList<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 10);\n        }\n\n        // Printing numbers\n        for (int number : numbers) {\n            System.out.println(number);\n        }\n\n        // Reading the main element from the DelayQueue\n        /* read */ DelayedElement mainElement = queue.take();\n        System.out.println(mainElement.getMessage());\n\n        // Adding more elements to the DelayQueue\n        queue.put(new DelayedElement(3000, \"Third\"));\n        queue.put(new DelayedElement(4000, \"Fourth\"));\n\n        // Reading another element from the DelayQueue\n        DelayedElement anotherElement = queue.take();\n        System.out.println(anotherElement.getMessage());\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long expireTime;\n    private final String message;\n\n    public DelayedElement(long delayTime, String message) {\n        this.delayTime = delayTime;\n        this.expireTime = System.currentTimeMillis() + delayTime;\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(expireTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.expireTime, ((DelayedElement) o).expireTime);\n    }\n}"
}