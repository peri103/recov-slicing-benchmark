{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public int retrieveData() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int studentId;\n\n    public Student(String name, int studentId) {\n        this.name = name;\n        this.studentId = studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getStudentId() {\n        return studentId;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        DataProcessor dataProcessor = new DataProcessor();\n        Course course = new Course(\"Computer Science\");\n        Student student = new Student(\"Alice\", 101);\n        course.enrollStudent(student);\n\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Processing data...\");\n                /* write */ dataProcessor.processData(99);\n                System.out.println(\"Data processed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Retrieving data...\");\n                /* read */ int value = dataProcessor.retrieveData();\n                System.out.println(\"Retrieved value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Course: \" + course.getCourseName());\n        System.out.println(\"Enrolled Students:\");\n        for (Student s : course.getEnrolledStudents()) {\n            System.out.println(s.getName() + \" (ID: \" + s.getStudentId() + \")\");\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writer.start();\n        reader.start();\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Additional complex code\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Starting writer thread...\");\n                /* write */ queue.put(42);\n                System.out.println(\"Writer thread completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // More unrelated code\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Starting reader thread...\");\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n                System.out.println(\"Reader thread completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Additional complex code\n        executor.submit(() -> {\n            try {\n                System.out.println(\"Starting another thread for unrelated task...\");\n                for (int i = 0; i < 5; i++) {\n                    System.out.println(\"Unrelated task iteration: \" + i);\n                    TimeUnit.MILLISECONDS.sleep(100);\n                }\n                System.out.println(\"Unrelated task completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}