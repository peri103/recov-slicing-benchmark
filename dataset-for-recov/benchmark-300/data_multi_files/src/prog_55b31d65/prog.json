{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataGenerator.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataGenerator {\n    private SynchronousQueue<Integer> queue;\n\n    public DataGenerator(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void generateData() {\n        try {\n            /* write */ queue.put(42);\n            System.out.println(\"Data generated and written to queue.\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataGenerator generator = new DataGenerator(queue);\n        DataProcessor processor = new DataProcessor(queue);\n\n        executor.submit(generator::generateData);\n        executor.submit(processor::processData);\n\n        executor.shutdown();\n        try {\n            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {\n                executor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executor.shutdownNow();\n        }\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Runnable stringWriterTask = () -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n                System.out.println(\"String write operation completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        Runnable stringReaderTask = () -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(\"String read operation completed. Message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        ExecutorService stringExecutor = Executors.newFixedThreadPool(2);\n        stringExecutor.submit(stringWriterTask);\n        stringExecutor.submit(stringReaderTask);\n\n        stringExecutor.shutdown();\n        try {\n            if (!stringExecutor.awaitTermination(10, TimeUnit.SECONDS)) {\n                stringExecutor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            stringExecutor.shutdownNow();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Ensure the writer thread completes\n        try {\n            writerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Task for writing to the queue\n        Runnable writerTask = () -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Write operation completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Task for reading from the queue\n        Runnable readerTask = () -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read operation completed. Value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        // Submit tasks to the executor\n        executor.submit(writerTask);\n        executor.submit(readerTask);\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {\n                executor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executor.shutdownNow();\n        }\n\n        // Additional unrelated code to make the program more complex\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Runnable stringWriterTask = () -> {\n            try {\n                stringQueue.put(\"Hello, World!\");\n                System.out.println(\"String write operation completed.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        Runnable stringReaderTask = () -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(\"String read operation completed. Message: \" + message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        ExecutorService stringExecutor = Executors.newFixedThreadPool(2);\n        stringExecutor.submit(stringWriterTask);\n        stringExecutor.submit(stringReaderTask);\n\n        stringExecutor.shutdown();\n        try {\n            if (!stringExecutor.awaitTermination(10, TimeUnit.SECONDS)) {\n                stringExecutor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            stringExecutor.shutdownNow();\n        }\n    }\n}"
}