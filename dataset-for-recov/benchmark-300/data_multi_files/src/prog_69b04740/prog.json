{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class DataProcessor {\n    private LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public int retrieveData() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void submitData(int data) throws InterruptedException {\n        dataProcessor.processData(data);\n    }\n\n    public int getData() throws InterruptedException {\n        return dataProcessor.retrieveData();\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n}\n",
        "Main.java": "import java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Course course = new Course(\"Advanced Java Programming\");\n        Student student1 = new Student(\"Alice\");\n        Student student2 = new Student(\"Bob\");\n\n        course.addStudent(student1);\n        course.addStudent(student2);\n\n        Random random = new Random();\n        int data = random.nextInt(100);\n\n        // Student 1 submits data\n        student1.submitData(data);\n\n        // Student 2 retrieves data\n        int retrievedData = student2.getData();\n\n        System.out.println(\"Course: \" + course.getCourseName());\n        System.out.println(\"Student \" + student1.getName() + \" submitted data: \" + data);\n        System.out.println(\"Student \" + student2.getName() + \" retrieved data: \" + retrievedData);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        /* write */ queue.put(1);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        List<Integer> list = new ArrayList<>();\n        Random random = new Random();\n\n        // Adding some random numbers to the list\n        for (int i = 0; i < 5; i++) {\n            list.add(random.nextInt(100));\n        }\n\n        // Printing the list\n        System.out.println(\"List before operations: \" + list);\n\n        // Performing some operations on the list\n        for (int i = 0; i < list.size(); i++) {\n            list.set(i, list.get(i) * 2);\n        }\n\n        // Printing the modified list\n        System.out.println(\"List after doubling values: \" + list);\n\n        // Writing a value to the queue\n        /* write */ queue.put(42);\n\n        // Performing some more operations on the list\n        list.removeIf(n -> n < 50);\n\n        // Printing the list after filtering\n        System.out.println(\"List after filtering values less than 50: \" + list);\n\n        // Reading the value from the queue\n        /* read */ int value = queue.take();\n\n        // Printing the value read from the queue\n        System.out.println(\"Value read from the queue: \" + value);\n\n        // Adding more elements to the list\n        for (int i = 0; i < 3; i++) {\n            list.add(random.nextInt(100));\n        }\n\n        // Printing the final list\n        System.out.println(\"Final list: \" + list);\n    }\n}"
}