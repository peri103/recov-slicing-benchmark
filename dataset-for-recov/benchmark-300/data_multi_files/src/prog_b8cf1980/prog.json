{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int score;\n\n    public Student(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getScore() {\n        return score;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Create a student object\n        Student student = new Student(\"Alice\", 95);\n\n        // Submit a task to write the student's score to the queue\n        executor.submit(() -> {\n            try {\n                queueManager.writeValue(student.getScore());\n                System.out.println(\"Student \" + student.getName() + \"'s score has been written to the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Submit a task to read the value from the queue\n        executor.submit(() -> {\n            try {\n                int score = queueManager.readValue();\n                System.out.println(\"Score \" + score + \" has been read from the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Additional unrelated tasks to make the program more complex\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n                System.out.println(\"Performing some unrelated task...\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n                System.out.println(\"Performing another unrelated task...\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(5, TimeUnit.SECONDS);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n\n        /* read */ int value = queue.take();\n        System.out.println(value);\n\n        writerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Additional code to make the program more complex\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n                System.out.println(\"Performing some unrelated task...\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value 42 has been written to the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Additional code to make the program more complex\n        executor.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n                System.out.println(\"Performing another unrelated task...\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value \" + value + \" has been read from the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n        executor.awaitTermination(5, TimeUnit.SECONDS);\n    }\n}"
}