{
    "files": {
        "MessageQueue.java": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class MessageQueue {\n    private ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();\n\n    public void addMessage(String message) {\n        /* write */ deque.addFirst(message);\n    }\n\n    public String getFirstMessage() {\n        return deque.peekFirst();\n    }\n}\n",
        "MessageProcessor.java": "public class MessageProcessor {\n    private MessageQueue messageQueue;\n\n    public MessageProcessor(MessageQueue messageQueue) {\n        this.messageQueue = messageQueue;\n    }\n\n    public void processMessage() {\n        String message = messageQueue.getFirstMessage();\n        System.out.println(\"Processed Message: \" + message);\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) {\n        MessageQueue messageQueue = new MessageQueue();\n        MessageProcessor processor = new MessageProcessor(messageQueue);\n\n        // Adding a message to the queue\n        messageQueue.addMessage(\"Hello, World!\");\n\n        // Processing the message\n        processor.processMessage();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "read_method": "peekFirst"
    },
    "java_code_simple": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();\n        /* write */ deque.addFirst(\"Hello, World!\");\n        /* read */ String value = deque.peekFirst();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();\n        ArrayList<String> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Adding elements to the ArrayList\n        list.add(\"Element1\");\n        list.add(\"Element2\");\n        list.add(\"Element3\");\n\n        // Adding elements to the LinkedList\n        linkedList.add(100);\n        linkedList.add(200);\n        linkedList.add(300);\n\n        /* write */ deque.addFirst(\"Hello, World!\");\n\n        // Iterating over the ArrayList and printing elements\n        for (String element : list) {\n            System.out.println(element);\n        }\n\n        // Iterating over the LinkedList and printing elements\n        for (Integer number : linkedList) {\n            System.out.println(number);\n        }\n\n        /* read */ String value = deque.peekFirst();\n        System.out.println(value);\n\n        // Adding more elements to the deque\n        deque.addLast(\"Another Element\");\n        deque.addLast(\"Yet Another Element\");\n\n        // Printing all elements in the deque\n        for (String element : deque) {\n            System.out.println(element);\n        }\n    }\n}"
}