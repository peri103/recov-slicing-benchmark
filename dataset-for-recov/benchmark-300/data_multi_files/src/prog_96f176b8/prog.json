{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class DataProcessor {\n    private LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public LinkedBlockingQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        Course course = new Course(\"Computer Science\");\n        \n        // Adding students to the course\n        course.addStudent(new Student(\"Alice\", 20));\n        course.addStudent(new Student(\"Bob\", 22));\n        \n        // Processing data\n        processor.processData(100);\n        \n        // Retrieving and printing student information\n        for (Student student : course.getStudents()) {\n            System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n        }\n        \n        // Reading the processed data\n        LinkedBlockingQueue<Integer> queue = processor.getQueue();\n        /* read */ int value = queue.take();\n        System.out.println(\"Processed Data: \" + value);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        \n        // Adding elements to the list and linkedList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n        \n        // Performing operations on the list\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n        \n        // Writing to the queue\n        /* write */ queue.put(42);\n        \n        // Performing more operations on the linkedList\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList value: \" + linkedList.get(i));\n        }\n        \n        // Reading from the queue\n        /* read */ int value = queue.take();\n        System.out.println(\"Queue value: \" + value);\n        \n        // Additional unrelated code to make the program more complex\n        ArrayList<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        for (String str : stringList) {\n            System.out.println(str);\n        }\n        \n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        stringQueue.put(\"Java\");\n        String strValue = stringQueue.take();\n        System.out.println(\"String Queue value: \" + strValue);\n    }\n}"
}