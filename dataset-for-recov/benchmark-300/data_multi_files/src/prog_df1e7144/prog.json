{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private long delay;\n\n    public DelayedElement(long delay) {\n        this.delay = delay;\n        this.startTime = System.currentTimeMillis() + delay;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                \", delay=\" + delay +\n                '}';\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue;\n\n    public QueueManager() {\n        this.queue = new DelayQueue<>();\n    }\n\n    public void addElement(long delay) {\n        /* write */ queue.put(new DelayedElement(delay));\n    }\n\n    public DelayedElement takeElement() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        \n        // Unrelated code: Generate and process a list of numbers\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 3);\n        }\n        System.out.println(\"Generated numbers: \" + numbers);\n\n        List<Integer> multiplesOfThree = new ArrayList<>();\n        for (int num : numbers) {\n            if (num % 3 == 0) {\n                multiplesOfThree.add(num);\n            }\n        }\n        System.out.println(\"Multiples of three: \" + multiplesOfThree);\n\n        // Write to the queue\n        queueManager.addElement(3000); // Delay of 3 seconds\n\n        // More unrelated code\n        int sum = 0;\n        for (int num : multiplesOfThree) {\n            sum += num;\n        }\n        System.out.println(\"Sum of multiples of three: \" + sum);\n\n        // Read from the queue\n        DelayedElement element = queueManager.takeElement();\n        System.out.println(\"Element taken from queue: \" + element);\n\n        // Additional complex code\n        List<String> messages = new ArrayList<>();\n        messages.add(\"Hello\");\n        messages.add(\"From\");\n        messages.add(\"Java\");\n        messages.add(\"Multi-file Program\");\n\n        for (String msg : messages) {\n            System.out.println(msg);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        /* write */ queue.put(new DelayedElement(1000)); // Delay of 1 second\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from queue: \" + element);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private long delay;\n\n    public DelayedElement(long delay) {\n        this.delay = delay;\n        this.startTime = System.currentTimeMillis() + delay;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                \", delay=\" + delay +\n                '}';\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        // Initialize the DelayQueue\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        \n        // Add some unrelated code to make the program more complex\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            numbers.add(i * 2);\n        }\n        System.out.println(\"Generated numbers: \" + numbers);\n\n        // Perform some operations on the list\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int num : numbers) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n        System.out.println(\"Even numbers: \" + evenNumbers);\n\n        // Write to the DelayQueue\n        /* write */ queue.put(new DelayedElement(2000)); // Delay of 2 seconds\n\n        // More unrelated code\n        int sum = 0;\n        for (int num : evenNumbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of even numbers: \" + sum);\n\n        // Read from the DelayQueue\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Element taken from queue: \" + element);\n\n        // Additional complex code\n        List<String> messages = new ArrayList<>();\n        messages.add(\"Hello\");\n        messages.add(\"World\");\n        messages.add(\"From\");\n        messages.add(\"Java\");\n\n        for (String msg : messages) {\n            System.out.println(msg);\n        }\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private long delay;\n\n    public DelayedElement(long delay) {\n        this.delay = delay;\n        this.startTime = System.currentTimeMillis() + delay;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"startTime=\" + startTime +\n                \", delay=\" + delay +\n                '}';\n    }\n}"
}