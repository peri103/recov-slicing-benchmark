{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class DataProcessor {\n    private ArrayBlockingQueue<Integer> dataQueue;\n\n    public DataProcessor(int capacity) {\n        dataQueue = new ArrayBlockingQueue<>(capacity);\n    }\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ dataQueue.put(data);\n    }\n\n    public int getProcessedData() throws InterruptedException {\n        return dataQueue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            DataProcessor processor = new DataProcessor(10);\n            processor.processData(42);\n\n            Course course = new Course(\"Computer Science\");\n            course.addStudent(new Student(\"Alice\", 20));\n            course.addStudent(new Student(\"Bob\", 22));\n\n            for (Student student : course.getStudents()) {\n                System.out.println(\"Student: \" + student.getName() + \", Age: \" + student.getAge());\n            }\n\n            int processedData = processor.getProcessedData();\n            System.out.println(\"Processed Data: \" + processedData);\n\n            ArrayBlockingQueue<String> stringQueue = new ArrayBlockingQueue<>(5);\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n\n            System.out.println(\"String from stringQueue: \" + stringQueue.take());\n            System.out.println(\"String from stringQueue: \" + stringQueue.take());\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ArrayBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.ArrayBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n            ArrayList<Integer> list = new ArrayList<>();\n            LinkedList<Integer> linkedList = new LinkedList<>();\n\n            /* write */ queue.put(42);\n\n            for (int i = 0; i < 5; i++) {\n                list.add(i * 10);\n            }\n\n            linkedList.addAll(list);\n\n            for (int i = 0; i < linkedList.size(); i++) {\n                System.out.println(\"LinkedList value: \" + linkedList.get(i));\n            }\n\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n\n            for (int i = 0; i < list.size(); i++) {\n                System.out.println(\"ArrayList value: \" + list.get(i));\n            }\n\n            ArrayBlockingQueue<String> stringQueue = new ArrayBlockingQueue<>(5);\n            stringQueue.put(\"Hello\");\n            stringQueue.put(\"World\");\n\n            System.out.println(\"String from stringQueue: \" + stringQueue.take());\n            System.out.println(\"String from stringQueue: \" + stringQueue.take());\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}