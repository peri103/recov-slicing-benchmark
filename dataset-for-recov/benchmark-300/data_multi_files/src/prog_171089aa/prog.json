{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class DataProcessor {\n    private PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n\n    public void addData(int value) {\n        /* write */ queue.offer(value);\n    }\n\n    public PriorityBlockingQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        dataProcessor.addData(score);\n    }\n\n    public DataProcessor getDataProcessor() {\n        return dataProcessor;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"Alice\");\n        student.addScore(10);\n\n        // Simulating other operations\n        System.out.println(\"Processing student data...\");\n\n        // Retrieving and processing the data\n        PriorityBlockingQueue<Integer> queue = student.getDataProcessor().getQueue();\n        /* read */ Integer value = queue.poll();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Adding more data\n        student.addScore(20);\n        student.addScore(30);\n\n        // Polling all elements from the queue\n        while (!queue.isEmpty()) {\n            System.out.println(\"Polled from queue: \" + queue.poll());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.PriorityBlockingQueue",
        "write_method": "offer",
        "read_class": "java.util.concurrent.PriorityBlockingQueue",
        "read_method": "poll"
    },
    "java_code_simple": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        /* write */ queue.offer(10);\n        /* read */ Integer value = queue.poll();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        List<Integer> numberList = new ArrayList<>();\n\n        // Adding elements to the stringQueue\n        stringQueue.offer(\"Hello\");\n        stringQueue.offer(\"World\");\n\n        // Adding elements to the numberList\n        numberList.add(5);\n        numberList.add(10);\n        numberList.add(15);\n\n        /* write */ queue.offer(10);\n\n        // Processing elements in the stringQueue\n        try {\n            String firstElement = stringQueue.take();\n            System.out.println(\"First element from stringQueue: \" + firstElement);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Processing elements in the numberList\n        for (Integer num : numberList) {\n            System.out.println(\"Number from numberList: \" + num);\n        }\n\n        /* read */ Integer value = queue.poll();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Adding more elements to the queue\n        queue.offer(20);\n        queue.offer(30);\n\n        // Polling elements from the queue\n        while (!queue.isEmpty()) {\n            System.out.println(\"Polled from queue: \" + queue.poll());\n        }\n    }\n}"
}