{
    "files": {
        "DequeOperations.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DequeOperations {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void addFirst(int value) {\n        /* write */ deque.addFirst(value);\n    }\n\n    public int takeFirst() throws InterruptedException {\n        return deque.takeFirst();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        DequeOperations dequeOps = new DequeOperations();\n        Random random = new Random();\n        int randomNumber = random.nextInt(100);\n        \n        // Adding some unrelated operations\n        LinkedBlockingDeque<Integer> tempDeque = new LinkedBlockingDeque<>();\n        for (int i = 0; i < 5; i++) {\n            tempDeque.addLast(i * 10);\n        }\n        \n        // Simulating some delay\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Performing the write operation\n        dequeOps.addFirst(randomNumber);\n        \n        // Adding more unrelated operations\n        for (int i = 0; i < 3; i++) {\n            tempDeque.addLast(i * 20);\n        }\n        \n        // Simulating some delay\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Performing the read operation\n        try {\n            /* read */ int value = dequeOps.takeFirst();\n            System.out.println(\"Value read from deque: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Adding more unrelated operations\n        for (int i = 0; i < tempDeque.size(); i++) {\n            System.out.println(\"Temp deque element at index \" + i + \": \" + tempDeque.pollFirst());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addFirst",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeFirst"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addFirst(42);\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        Random random = new Random();\n        int randomNumber = random.nextInt(100);\n        \n        // Adding some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            deque.addLast(i * 10);\n        }\n        \n        // Simulating some delay\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Performing the write operation\n        /* write */ deque.addFirst(randomNumber);\n        \n        // Adding more unrelated operations\n        for (int i = 0; i < 3; i++) {\n            deque.addLast(i * 20);\n        }\n        \n        // Simulating some delay\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Performing the read operation\n        try {\n            /* read */ int value = deque.takeFirst();\n            System.out.println(\"Value read from deque: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Adding more unrelated operations\n        for (int i = 0; i < deque.size(); i++) {\n            System.out.println(\"Deque element at index \" + i + \": \" + deque.pollFirst());\n        }\n    }\n}"
}