{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DataProcessor {\n    private BlockingQueue<Integer> dataQueue = new ArrayBlockingQueue<>(10);\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ dataQueue.put(data);\n    }\n\n    public BlockingQueue<Integer> getDataQueue() {\n        return dataQueue;\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.BlockingQueue;\n\npublic class DataConsumer {\n    private BlockingQueue<Integer> dataQueue;\n\n    public DataConsumer(BlockingQueue<Integer> dataQueue) {\n        this.dataQueue = dataQueue;\n    }\n\n    public int consumeData() throws InterruptedException {\n        /* read */ return dataQueue.take();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        DataConsumer consumer = new DataConsumer(processor.getDataQueue());\n\n        // Adding some initial data\n        for (int i = 0; i < 5; i++) {\n            processor.processData(i * 10);\n        }\n\n        // Consuming some data\n        for (int i = 0; i < 3; i++) {\n            int data = consumer.consumeData();\n            System.out.println(\"Consumed data: \" + data);\n        }\n\n        // Writing the main data\n        processor.processData(42);\n\n        // Consuming the main data\n        int mainData = consumer.consumeData();\n        System.out.println(\"Main data consumed: \" + mainData);\n\n        // Consuming remaining data\n        while (!processor.getDataQueue().isEmpty()) {\n            int data = consumer.consumeData();\n            System.out.println(\"Consumed remaining data: \" + data);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ArrayBlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.ArrayBlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue1 = new ArrayBlockingQueue<>(10);\n        BlockingQueue<String> queue2 = new LinkedBlockingQueue<>(5);\n        \n        // Adding elements to queue2\n        queue2.put(\"Hello\");\n        queue2.put(\"World\");\n        \n        // Performing some operations\n        for (int i = 0; i < 5; i++) {\n            queue1.put(i * 10);\n        }\n        \n        // Taking elements from queue2\n        String str1 = queue2.take();\n        String str2 = queue2.take();\n        \n        // Writing to the original queue\n        /* write */ queue1.put(42);\n        \n        // Performing more operations\n        for (int i = 0; i < 5; i++) {\n            int val = queue1.take();\n            System.out.println(\"Taken from queue1: \" + val);\n        }\n        \n        // Reading from the original queue\n        /* read */ int value = queue1.take();\n        System.out.println(\"Value from original queue: \" + value);\n        \n        // Final operations\n        queue2.put(\"Java\");\n        queue2.put(\"Programming\");\n        \n        while (!queue2.isEmpty()) {\n            System.out.println(\"Taken from queue2: \" + queue2.take());\n        }\n    }\n}"
}