{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void processData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int getProcessedData() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        DataProcessor processor = new DataProcessor();\n        Student student = new Student(\"Alice\");\n\n        // Writing thread\n        Thread writer = new Thread(() -> {\n            processor.processData(95);\n        });\n\n        // Reading thread\n        Thread reader = new Thread(() -> {\n            int processedData = processor.getProcessedData();\n            student.addScore(processedData);\n            System.out.println(\"Processed score: \" + processedData);\n        });\n\n        writer.start();\n        reader.start();\n\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code\n        System.out.println(\"Student \" + student.getName() + \"'s scores:\");\n        for (int score : student.getScores()) {\n            System.out.println(score);\n        }\n\n        // More unrelated code\n        SynchronousQueue<String> messageQueue = new SynchronousQueue<>();\n        Thread messageWriter = new Thread(() -> {\n            try {\n                messageQueue.put(\"Hello from message writer!\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        Thread messageReader = new Thread(() -> {\n            try {\n                String message = messageQueue.take();\n                System.out.println(message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        messageWriter.start();\n        messageReader.start();\n\n        try {\n            messageWriter.join();\n            messageReader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writing thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reading thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writer.start();\n        reader.start();\n\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> list = new ArrayList<>();\n\n        // Writing thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reading thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                list.add(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writer.start();\n        reader.start();\n\n        try {\n            writer.join();\n            reader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional complex code\n        for (int i = 0; i < 10; i++) {\n            list.add(i * 2);\n        }\n\n        System.out.println(\"List contents:\");\n        for (int num : list) {\n            System.out.println(num);\n        }\n\n        // More unrelated code\n        SynchronousQueue<String> stringQueue = new SynchronousQueue<>();\n        Thread stringWriter = new Thread(() -> {\n            try {\n                stringQueue.put(\"Hello\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        Thread stringReader = new Thread(() -> {\n            try {\n                String message = stringQueue.take();\n                System.out.println(message);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        stringWriter.start();\n        stringReader.start();\n\n        try {\n            stringWriter.join();\n            stringReader.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}