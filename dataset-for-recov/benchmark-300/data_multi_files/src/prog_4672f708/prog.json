{
    "files": {
        "QueueManager.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class QueueManager {\n    private LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private int studentId;\n\n    public Student(String name, int studentId) {\n        this.name = name;\n        this.studentId = studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getStudentId() {\n        return studentId;\n    }\n}\n",
        "Course.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> enrolledStudents = new ArrayList<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void enrollStudent(Student student) {\n        enrolledStudents.add(student);\n    }\n\n    public List<Student> getEnrolledStudents() {\n        return enrolledStudents;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n        Course course = new Course(\"Computer Science 101\");\n        Student student1 = new Student(\"Alice\", 1);\n        Student student2 = new Student(\"Bob\", 2);\n\n        course.enrollStudent(student1);\n        course.enrollStudent(student2);\n\n        try {\n            /* write */ queueManager.writeValue(42);\n\n            // Print enrolled students\n            for (Student student : course.getEnrolledStudents()) {\n                System.out.println(\"Enrolled Student: \" + student.getName() + \" (ID: \" + student.getStudentId() + \")\");\n            }\n\n            /* read */ int value = queueManager.readValue();\n            System.out.println(\"Value from QueueManager: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedTransferQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.LinkedTransferQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.LinkedTransferQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        try {\n            /* write */ queue.put(42);\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedTransferQueue<Integer> queue = new LinkedTransferQueue<>();\n        BlockingQueue<Integer> blockingQueue = new ArrayBlockingQueue<>(10);\n\n        try {\n            // Adding elements to the blocking queue\n            blockingQueue.put(10);\n            blockingQueue.put(20);\n            blockingQueue.put(30);\n\n            /* write */ queue.put(42);\n\n            // Taking elements from the blocking queue\n            int value1 = blockingQueue.take();\n            int value2 = blockingQueue.take();\n            int value3 = blockingQueue.take();\n\n            System.out.println(\"Values from blocking queue: \" + value1 + \", \" + value2 + \", \" + value3);\n\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from LinkedTransferQueue: \" + value);\n\n            // Adding more elements to the blocking queue\n            blockingQueue.put(40);\n            blockingQueue.put(50);\n\n            // Taking more elements from the blocking queue\n            int value4 = blockingQueue.take();\n            int value5 = blockingQueue.take();\n\n            System.out.println(\"More values from blocking queue: \" + value4 + \", \" + value5);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}