{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData(int data) {\n        try {\n            /* write */ queue.put(data);\n            System.out.println(\"Data processed and written to queue: \" + data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int data = queue.take();\n            System.out.println(\"Data consumed from queue: \" + data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        // Thread to process data\n        Thread processorThread = new Thread(() -> {\n            processor.processData(42);\n        });\n\n        // Thread to consume data\n        Thread consumerThread = new Thread(() -> {\n            consumer.consumeData();\n        });\n\n        // Start the threads\n        processorThread.start();\n        consumerThread.start();\n\n        // Wait for threads to finish\n        try {\n            processorThread.join();\n            consumerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to write to the queue\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the queue\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> syncQueue = new SynchronousQueue<>();\n        BlockingQueue<Integer> blockingQueue = new LinkedBlockingQueue<>();\n        Random random = new Random();\n\n        // Thread to write to the synchronous queue\n        Thread syncWriterThread = new Thread(() -> {\n            try {\n                int value = random.nextInt(100);\n                /* write */ syncQueue.put(value);\n                System.out.println(\"Written to sync queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the synchronous queue\n        Thread syncReaderThread = new Thread(() -> {\n            try {\n                /* read */ int value = syncQueue.take();\n                System.out.println(\"Read from sync queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to write to the blocking queue\n        Thread blockingWriterThread = new Thread(() -> {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    int value = random.nextInt(100);\n                    blockingQueue.put(value);\n                    System.out.println(\"Written to blocking queue: \" + value);\n                    Thread.sleep(100); // Simulate some delay\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to read from the blocking queue\n        Thread blockingReaderThread = new Thread(() -> {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    int value = blockingQueue.take();\n                    System.out.println(\"Read from blocking queue: \" + value);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start all threads\n        syncWriterThread.start();\n        syncReaderThread.start();\n        blockingWriterThread.start();\n        blockingReaderThread.start();\n\n        // Wait for all threads to finish\n        try {\n            syncWriterThread.join();\n            syncReaderThread.join();\n            blockingWriterThread.join();\n            blockingReaderThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
}