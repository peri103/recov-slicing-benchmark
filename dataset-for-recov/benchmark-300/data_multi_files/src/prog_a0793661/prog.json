{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        long remainingTime = delayTime - elapsedTime;\n        return unit.convert(remainingTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayedElement takeElement() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        queueManager.addElement(element);\n\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n        list.add(element);\n        linkedList.add(element);\n\n        for (int i = 0; i < 5; i++) {\n            DelayedElement newElement = new DelayedElement(1000 + i * 500);\n            queueManager.addElement(newElement);\n            list.add(newElement);\n            linkedList.add(newElement);\n        }\n\n        for (DelayedElement e : list) {\n            System.out.println(\"List element: \" + e);\n        }\n\n        for (DelayedElement e : linkedList) {\n            System.out.println(\"LinkedList element: \" + e);\n        }\n\n        /* read */ DelayedElement takenElement = queueManager.takeElement();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        ArrayList<Integer> intList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            intList.add(i * 10);\n        }\n\n        for (int i : intList) {\n            System.out.println(\"Integer list element: \" + i);\n        }\n\n        LinkedList<String> stringList = new LinkedList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        stringList.add(\"Java\");\n\n        for (String s : stringList) {\n            System.out.println(\"String list element: \" + s);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        long remainingTime = delayTime - elapsedTime;\n        return unit.convert(remainingTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000); // 1 second delay\n        /* write */ queue.put(element);\n\n        ArrayList<DelayedElement> list = new ArrayList<>();\n        LinkedList<DelayedElement> linkedList = new LinkedList<>();\n        list.add(element);\n        linkedList.add(element);\n\n        for (int i = 0; i < 5; i++) {\n            DelayedElement newElement = new DelayedElement(1000 + i * 500);\n            queue.put(newElement);\n            list.add(newElement);\n            linkedList.add(newElement);\n        }\n\n        for (DelayedElement e : list) {\n            System.out.println(\"List element: \" + e);\n        }\n\n        for (DelayedElement e : linkedList) {\n            System.out.println(\"LinkedList element: \" + e);\n        }\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(\"Element taken from queue: \" + takenElement);\n\n        ArrayList<Integer> intList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            intList.add(i * 10);\n        }\n\n        for (int i : intList) {\n            System.out.println(\"Integer list element: \" + i);\n        }\n\n        LinkedList<String> stringList = new LinkedList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"World\");\n        stringList.add(\"Java\");\n\n        for (String s : stringList) {\n            System.out.println(\"String list element: \" + s);\n        }\n    }\n}\n\nclass DelayedElement implements Delayed {\n    private final long delayTime;\n    private final long startTime;\n\n    public DelayedElement(long delayTime) {\n        this.delayTime = delayTime;\n        this.startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        long remainingTime = delayTime - elapsedTime;\n        return unit.convert(remainingTime, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));\n    }\n\n    @Override\n    public String toString() {\n        return \"DelayedElement{\" +\n                \"delayTime=\" + delayTime +\n                \", startTime=\" + startTime +\n                '}';\n    }\n}"
}