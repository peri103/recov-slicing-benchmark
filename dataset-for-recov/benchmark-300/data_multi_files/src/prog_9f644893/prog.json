{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delayInMillis, String data) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addToQueue(String data, long delayInMillis) {\n        /* write */ queue.put(new DelayedElement(delayInMillis, data));\n    }\n\n    public String takeFromQueue() throws InterruptedException {\n        /* read */ DelayedElement element = queue.take();\n        return element.getData();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        QueueManager queueManager = new QueueManager();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Write task\n        Future<?> writeFuture = executor.submit(() -> {\n            String testData = \"Hello, DelayQueue!\";\n            queueManager.addToQueue(testData, 1000); // Delay of 1 second\n            System.out.println(\"Data written to queue: \" + testData);\n        });\n\n        // Some unrelated computation\n        int sum = 0;\n        for (int i = 0; i < 100; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 100 numbers: \" + sum);\n\n        // Read task\n        Future<String> readFuture = executor.submit(() -> {\n            String data = queueManager.takeFromQueue();\n            System.out.println(\"Data read from queue: \" + data);\n            return data;\n        });\n\n        // Wait for both tasks to complete\n        writeFuture.get();\n        String finalData = readFuture.get();\n        System.out.println(\"Final read data: \" + finalData);\n\n        executor.shutdown();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delayInMillis, String data) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String testData = \"Hello, DelayQueue!\";\n        /* write */ queue.put(new DelayedElement(1000, testData)); // Delay of 1 second\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delayInMillis, String data) {\n        this.startTime = System.currentTimeMillis() + delayInMillis;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Write task\n        Future<?> writeFuture = executor.submit(() -> {\n            String testData = \"Hello, DelayQueue!\";\n            /* write */ queue.put(new DelayedElement(1000, testData)); // Delay of 1 second\n            System.out.println(\"Data written to queue: \" + testData);\n        });\n\n        // Some unrelated computation\n        int sum = 0;\n        for (int i = 0; i < 100; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of first 100 numbers: \" + sum);\n\n        // Read task\n        Future<DelayedElement> readFuture = executor.submit(() -> {\n            /* read */ DelayedElement element = queue.take();\n            System.out.println(\"Data read from queue: \" + element.getData());\n            return element;\n        });\n\n        // Wait for both tasks to complete\n        writeFuture.get();\n        DelayedElement element = readFuture.get();\n        System.out.println(\"Final read data: \" + element.getData());\n\n        executor.shutdown();\n    }\n}"
}