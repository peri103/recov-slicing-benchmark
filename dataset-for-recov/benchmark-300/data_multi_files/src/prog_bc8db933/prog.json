{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class DataProcessor {\n    private ConcurrentLinkedDeque<Integer> dataQueue = new ConcurrentLinkedDeque<>();\n\n    public void processData(int value) {\n        /* write */ dataQueue.addLast(value);\n    }\n\n    public ConcurrentLinkedDeque<Integer> getDataQueue() {\n        return dataQueue;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private DataProcessor dataProcessor = new DataProcessor();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void processData(int value) {\n        dataProcessor.processData(value);\n    }\n\n    public ConcurrentLinkedDeque<Integer> getDataQueue() {\n        return dataProcessor.getDataQueue();\n    }\n}\n",
        "Course.java": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Course {\n    private String courseName;\n    private ConcurrentLinkedDeque<Student> students = new ConcurrentLinkedDeque<>();\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void addStudent(Student student) {\n        students.addLast(student);\n    }\n\n    public ConcurrentLinkedDeque<Student> getStudents() {\n        return students;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        Course course = new Course(\"Computer Science\");\n        Student student = new Student(\"Alice\");\n        course.addStudent(student);\n\n        student.processData(42);\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            Student newStudent = new Student(\"Student\" + i);\n            course.addStudent(newStudent);\n            newStudent.processData(i * 10);\n        }\n\n        /* read */ Integer value = student.getDataQueue().peekLast();\n        System.out.println(value);\n\n        // More unrelated operations\n        for (Student s : course.getStudents()) {\n            System.out.println(s.getDataQueue().peekLast());\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.ConcurrentLinkedDeque",
        "read_method": "peekLast"
    },
    "java_code_simple": "import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        /* write */ deque.addLast(42);\n        /* read */ Integer value = deque.peekLast();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        Random random = new Random();\n        int randomNumber = random.nextInt(100);\n        \n        // Add some unrelated operations to make the program more complex\n        for (int i = 0; i < 10; i++) {\n            deque.addFirst(i * randomNumber);\n        }\n        \n        /* write */ deque.addLast(42);\n        \n        // Perform some additional operations\n        for (int i = 0; i < 5; i++) {\n            deque.pollFirst();\n        }\n        \n        // Add more unrelated code\n        ConcurrentLinkedDeque<String> stringDeque = new ConcurrentLinkedDeque<>();\n        stringDeque.addLast(\"Hello\");\n        stringDeque.addLast(\"World\");\n        \n        /* read */ Integer value = deque.peekLast();\n        System.out.println(value);\n        \n        // More unrelated operations\n        for (String str : stringDeque) {\n            System.out.println(str);\n        }\n        \n        // Final operations\n        while (!deque.isEmpty()) {\n            System.out.println(deque.pollLast());\n        }\n    }\n}"
}