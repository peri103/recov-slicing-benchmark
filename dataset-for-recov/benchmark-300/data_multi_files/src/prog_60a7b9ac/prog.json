{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class DataProcessor {\n    private BlockingQueue<Integer> queue;\n\n    public DataProcessor() {\n        this.queue = new ArrayBlockingQueue<>(10);\n    }\n\n    public void processData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public BlockingQueue<Integer> getQueue() {\n        return queue;\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.BlockingQueue;\n\npublic class DataConsumer {\n    private BlockingQueue<Integer> queue;\n\n    public DataConsumer(BlockingQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int consumeData() throws InterruptedException {\n        /* read */ int data = queue.take();\n        return data;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        DataConsumer consumer = new DataConsumer(processor.getQueue());\n\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Initialize some data\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Perform some operations on the list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n\n        // Process data\n        processor.processData(42);\n\n        // Perform more operations\n        for (int i = 0; i < linkedList.size(); i++) {\n            list.add(linkedList.get(i));\n        }\n\n        // Consume data\n        int value = consumer.consumeData();\n        System.out.println(value);\n\n        // Print the final state of the list\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.BlockingQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.BlockingQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        /* write */ queue.put(42);\n        /* read */ int value = queue.take();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Initialize some data\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Perform some operations on the list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            linkedList.add(list.get(i));\n        }\n\n        // Write to the BlockingQueue\n        /* write */ queue.put(42);\n\n        // Perform more operations\n        for (int i = 0; i < linkedList.size(); i++) {\n            list.add(linkedList.get(i));\n        }\n\n        // Read from the BlockingQueue\n        /* read */ int value = queue.take();\n        System.out.println(value);\n\n        // Print the final state of the list\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"
}