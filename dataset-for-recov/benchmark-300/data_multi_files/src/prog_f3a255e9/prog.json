{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(long delay, String data) {\n        /* write */ queue.put(new DelayedElement(delay, data));\n    }\n\n    public DelayQueue<DelayedElement> getQueue() {\n        return queue;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        manager.addElement(1000, \"Hello, World!\");\n\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n        linkedList.add(\"Third\");\n\n        for (String item : linkedList) {\n            list.add(item.length());\n        }\n\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List item \" + i + \": \" + list.get(i));\n        }\n\n        DelayQueue<DelayedElement> queue = manager.getQueue();\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Delayed element data: \" + element.getData());\n\n        ArrayList<String> anotherList = new ArrayList<>();\n        anotherList.add(\"Another\");\n        anotherList.add(\"List\");\n        anotherList.add(\"Items\");\n\n        for (String item : anotherList) {\n            System.out.println(\"Another list item: \" + item);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String data = \"Hello, World!\";\n        /* write */ queue.put(new DelayedElement(1000, data));\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(element.getData());\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        String data = \"Hello, World!\";\n        /* write */ queue.put(new DelayedElement(1000, data));\n\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n        linkedList.add(\"First\");\n        linkedList.add(\"Second\");\n        linkedList.add(\"Third\");\n\n        for (String item : linkedList) {\n            list.add(item.length());\n        }\n\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List item \" + i + \": \" + list.get(i));\n        }\n\n        /* read */ DelayedElement element = queue.take();\n        System.out.println(\"Delayed element data: \" + element.getData());\n\n        ArrayList<String> anotherList = new ArrayList<>();\n        anotherList.add(\"Another\");\n        anotherList.add(\"List\");\n        anotherList.add(\"Items\");\n\n        for (String item : anotherList) {\n            System.out.println(\"Another list item: \" + item);\n        }\n    }\n}"
}