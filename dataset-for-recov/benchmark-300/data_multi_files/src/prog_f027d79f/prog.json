{
    "files": {
        "Course.java": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class Course {\n    private PriorityBlockingQueue<Integer> studentScores = new PriorityBlockingQueue<>();\n\n    public void addScore(int score) {\n        /* write */ studentScores.offer(score);\n    }\n\n    public PriorityBlockingQueue<Integer> getScores() {\n        return studentScores;\n    }\n}\n",
        "Student.java": "public class Student {\n    private String name;\n    private Course course;\n\n    public Student(String name, Course course) {\n        this.name = name;\n        this.course = course;\n    }\n\n    public void addScore(int score) {\n        course.addScore(score);\n    }\n\n    public PriorityBlockingQueue<Integer> getScores() {\n        return course.getScores();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.PriorityBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        Course course = new Course();\n        Student student = new Student(\"Alice\", course);\n        Random random = new Random();\n\n        // Adding some random scores\n        for (int i = 0; i < 10; i++) {\n            student.addScore(random.nextInt(100));\n        }\n\n        // Reading the first score\n        PriorityBlockingQueue<Integer> scores = student.getScores();\n        /* read */ Integer score = scores.poll();\n        System.out.println(\"Read score: \" + score);\n\n        // Polling the rest of the scores\n        while (!scores.isEmpty()) {\n            Integer s = scores.poll();\n            System.out.println(\"Polled score: \" + s);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.PriorityBlockingQueue",
        "write_method": "offer",
        "read_class": "java.util.concurrent.PriorityBlockingQueue",
        "read_method": "poll"
    },
    "java_code_simple": "import java.util.concurrent.PriorityBlockingQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        /* write */ queue.offer(1);\n        /* read */ Integer value = queue.poll();\n        System.out.println(value);\n    }\n}",
    "java_code_complex": "import java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>();\n        LinkedBlockingQueue<String> stringQueue = new LinkedBlockingQueue<>();\n        Random random = new Random();\n\n        // Adding some random numbers to the string queue\n        for (int i = 0; i < 5; i++) {\n            stringQueue.offer(\"Number: \" + random.nextInt(100));\n        }\n\n        // Performing some operations on the string queue\n        while (!stringQueue.isEmpty()) {\n            System.out.println(stringQueue.poll());\n        }\n\n        // Writing to the priority queue\n        /* write */ queue.offer(1);\n\n        // Adding more elements to the priority queue\n        for (int i = 0; i < 10; i++) {\n            queue.offer(random.nextInt(100));\n        }\n\n        // Performing some operations on the priority queue\n        while (!queue.isEmpty()) {\n            Integer value = queue.poll();\n            System.out.println(\"Polled value: \" + value);\n        }\n\n        // Reading from the priority queue\n        /* read */ Integer readValue = queue.poll();\n        System.out.println(\"Read value: \" + readValue);\n\n        // Adding more elements to the priority queue\n        for (int i = 0; i < 5; i++) {\n            queue.offer(random.nextInt(50));\n        }\n\n        // Performing some operations on the priority queue\n        while (!queue.isEmpty()) {\n            Integer value = queue.poll();\n            System.out.println(\"Polled value: \" + value);\n        }\n    }\n}"
}