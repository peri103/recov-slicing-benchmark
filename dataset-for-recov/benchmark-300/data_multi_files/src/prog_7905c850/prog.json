{
    "files": {
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData(int data) {\n        try {\n            /* write */ queue.put(data); // Write the data to the queue\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataReader {\n    private SynchronousQueue<Integer> queue;\n\n    public DataReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int readData() {\n        try {\n            /* read */ return queue.take(); // Read the data from the queue\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1; // Return -1 in case of error\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataWriter writer = new DataWriter(queue);\n        DataReader reader = new DataReader(queue);\n\n        // Start a new thread to perform the write operation\n        executor.submit(() -> {\n            writer.writeData(42); // Write the value 42 to the queue\n        });\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n\n        // Start a new thread to perform the read operation\n        executor.submit(() -> {\n            int value = reader.readData(); // Read the value from the queue\n            System.out.println(\"Read value: \" + value); // Print the read value\n        });\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform more unrelated operations\n        System.out.println(\"All tasks completed.\");\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42); // Write the value 42 to the queue\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Start the writer thread\n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        try {\n            /* read */ int value = queue.take(); // Read the value from the queue\n            System.out.println(value); // Print the read value\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        \n        // Start a new thread to perform the write operation\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42); // Write the value 42 to the queue\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Performing unrelated task \" + i);\n        }\n        \n        // Start a new thread to perform the read operation\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take(); // Read the value from the queue\n                System.out.println(\"Read value: \" + value); // Print the read value\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        // Perform more unrelated operations\n        System.out.println(\"All tasks completed.\");\n    }\n}"
}