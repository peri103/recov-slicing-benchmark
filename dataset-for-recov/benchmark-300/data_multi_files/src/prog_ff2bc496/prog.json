{
    "files": {
        "DelayedElement.java": "import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\npublic class DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n",
        "QueueManager.java": "import java.util.concurrent.DelayQueue;\n\npublic class QueueManager {\n    private DelayQueue<DelayedElement> queue = new DelayQueue<>();\n\n    public void addElement(DelayedElement element) {\n        /* write */ queue.put(element);\n    }\n\n    public DelayedElement takeElement() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.DelayQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager manager = new QueueManager();\n        DelayedElement element = new DelayedElement(1000, \"Test Data\");\n\n        manager.addElement(element);\n\n        // Additional code to make the program more complex\n        DelayQueue<DelayedElement> anotherQueue = new DelayQueue<>();\n        DelayedElement anotherElement = new DelayedElement(2000, \"Another Data\");\n        anotherQueue.put(anotherElement);\n\n        // Simulate some processing\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Processing...\");\n            Thread.sleep(500);\n        }\n\n        /* read */ DelayedElement takenElement = manager.takeElement();\n        System.out.println(takenElement.getData());\n\n        // More additional code\n        DelayedElement yetAnotherElement = new DelayedElement(1500, \"Yet Another Data\");\n        manager.addElement(yetAnotherElement);\n\n        // Simulate more processing\n        for (int i = 0; i < 2; i++) {\n            System.out.println(\"More Processing...\");\n            Thread.sleep(500);\n        }\n\n        DelayedElement takenAnotherElement = anotherQueue.take();\n        System.out.println(takenAnotherElement.getData());\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.DelayQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.DelayQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000, \"Test Data\");\n\n        /* write */ queue.put(element);\n        /* read */ DelayedElement takenElement = queue.take();\n\n        System.out.println(takenElement.getData());\n    }\n}",
    "java_code_complex": "import java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\n\nclass DelayedElement implements Delayed {\n    private long startTime;\n    private String data;\n\n    public DelayedElement(long delay, String data) {\n        this.startTime = System.currentTimeMillis() + delay;\n        this.data = data;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        long diff = startTime - System.currentTimeMillis();\n        return unit.convert(diff, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.startTime, ((DelayedElement) o).startTime);\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue<DelayedElement> queue = new DelayQueue<>();\n        DelayedElement element = new DelayedElement(1000, \"Test Data\");\n\n        /* write */ queue.put(element);\n\n        // Additional code to make the program more complex\n        DelayQueue<DelayedElement> anotherQueue = new DelayQueue<>();\n        DelayedElement anotherElement = new DelayedElement(2000, \"Another Data\");\n        anotherQueue.put(anotherElement);\n\n        // Simulate some processing\n        for (int i = 0; i < 3; i++) {\n            System.out.println(\"Processing...\");\n            Thread.sleep(500);\n        }\n\n        /* read */ DelayedElement takenElement = queue.take();\n        System.out.println(takenElement.getData());\n\n        // More additional code\n        DelayedElement yetAnotherElement = new DelayedElement(1500, \"Yet Another Data\");\n        queue.put(yetAnotherElement);\n\n        // Simulate more processing\n        for (int i = 0; i < 2; i++) {\n            System.out.println(\"More Processing...\");\n            Thread.sleep(500);\n        }\n\n        DelayedElement takenAnotherElement = anotherQueue.take();\n        System.out.println(takenAnotherElement.getData());\n    }\n}"
}