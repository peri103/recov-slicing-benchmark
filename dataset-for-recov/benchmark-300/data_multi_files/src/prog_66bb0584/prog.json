{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void putValue(int value) {\n        try {\n            /* write */ queue.put(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int takeValue() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Course.java": "import java.util.List;\n\npublic class Course {\n    private String courseName;\n    private List<Student> students;\n\n    public Course(String courseName, List<Student> students) {\n        this.courseName = courseName;\n        this.students = students;\n    }\n\n    public void printStudentScores() {\n        for (Student student : students) {\n            System.out.println(\"Student: \" + student.getName() + \", Scores: \" + student.getScores());\n        }\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        QueueManager queueManager = new QueueManager();\n\n        // Create a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            queueManager.putValue(42);\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Create some students and add scores\n        Student student1 = new Student(\"Alice\");\n        student1.addScore(90);\n        student1.addScore(85);\n\n        Student student2 = new Student(\"Bob\");\n        student2.addScore(78);\n        student2.addScore(88);\n\n        List<Student> students = new ArrayList<>();\n        students.add(student1);\n        students.add(student2);\n\n        // Create a course and print student scores\n        Course course = new Course(\"Math\", students);\n        course.printStudentScores();\n\n        // Perform the read operation\n        int value = queueManager.takeValue();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Perform some additional operations\n        int totalScores = 0;\n        for (Student student : students) {\n            for (int score : student.getScores()) {\n                totalScores += score;\n            }\n        }\n        System.out.println(\"Total scores of all students: \" + totalScores);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Create a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Add some elements to the ArrayList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n        }\n\n        // Add some elements to the LinkedList\n        for (int i = 0; i < 5; i++) {\n            linkedList.add(i * 20);\n        }\n\n        // Print elements from the ArrayList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"ArrayList element: \" + list.get(i));\n        }\n\n        // Print elements from the LinkedList\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList element: \" + linkedList.get(i));\n        }\n\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Value from queue: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Perform some additional operations\n        int sum = 0;\n        for (int num : list) {\n            sum += num;\n        }\n        System.out.println(\"Sum of ArrayList elements: \" + sum);\n\n        int product = 1;\n        for (int num : linkedList) {\n            product *= num;\n        }\n        System.out.println(\"Product of LinkedList elements: \" + product);\n    }\n}"
}