{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() throws InterruptedException {\n        /* write */ queue.put(42);\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int consumeData() throws InterruptedException {\n        /* read */ return queue.take();\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                processor.processData();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n\n        // Perform the read operation in the main thread\n        int value = consumer.consumeData();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Ensure the writer thread completes\n        writerThread.join();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n        \n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(value);\n        \n        // Ensure the writer thread completes\n        writerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Start a new thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        writerThread.start();\n\n        // Add some unrelated operations\n        list.add(10);\n        list.add(20);\n        linkedList.add(30);\n        linkedList.add(40);\n\n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Ensure the writer thread completes\n        writerThread.join();\n\n        // Print elements from the ArrayList and LinkedList\n        System.out.println(\"ArrayList elements:\");\n        for (Integer num : list) {\n            System.out.println(num);\n        }\n\n        System.out.println(\"LinkedList elements:\");\n        for (Integer num : linkedList) {\n            System.out.println(num);\n        }\n    }\n}"
}