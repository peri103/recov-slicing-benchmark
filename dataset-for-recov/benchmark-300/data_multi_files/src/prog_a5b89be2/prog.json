{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeData(int data) {\n        try {\n            /* write */ queue.put(data);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int readData() {\n        try {\n            /* read */ return queue.take();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1; // Return -1 in case of interruption\n        }\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        DataProcessor dataProcessor = new DataProcessor();\n        Student student = new Student(\"Alice\");\n\n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            dataProcessor.writeData(42);\n        });\n\n        // Adding some scores to the student\n        student.addScore(90);\n        student.addScore(85);\n        student.addScore(95);\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            int value = dataProcessor.readData();\n            System.out.println(\"Read value from queue: \" + value);\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Printing student details\n        System.out.println(\"Student Name: \" + student.getName());\n        System.out.println(\"Student Scores:\");\n        for (int score : student.getScores()) {\n            System.out.println(score);\n        }\n\n        // Additional operations to make the program more complex\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        for (int i = 0; i < student.getScores().size(); i++) {\n            linkedList.add(student.getScores().get(i) + 5);\n        }\n\n        System.out.println(\"Adjusted Scores in LinkedList:\");\n        for (int score : linkedList) {\n            System.out.println(score);\n        }\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n\n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Adding some elements to the ArrayList and LinkedList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for both threads to finish\n        try {\n            writerThread.join();\n            readerThread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Printing elements from the ArrayList and LinkedList\n        System.out.println(\"Elements in ArrayList:\");\n        for (int num : list) {\n            System.out.println(num);\n        }\n\n        System.out.println(\"Elements in LinkedList:\");\n        for (int num : linkedList) {\n            System.out.println(num);\n        }\n\n        // Additional operations to make the program more complex\n        ArrayList<Integer> newList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            newList.add(list.get(i) + linkedList.get(i));\n        }\n\n        System.out.println(\"Combined elements in newList:\");\n        for (int num : newList) {\n            System.out.println(num);\n        }\n    }\n}"
}