{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue;\n\n    public DataProcessor(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void processData() {\n        try {\n            /* write */ queue.put(42);\n            System.out.println(\"Value 42 written to the queue.\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "DataConsumer.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataConsumer {\n    private SynchronousQueue<Integer> queue;\n\n    public DataConsumer(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void consumeData() {\n        try {\n            /* read */ int value = queue.take();\n            System.out.println(\"Read value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
        "Main.java": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        DataProcessor processor = new DataProcessor(queue);\n        DataConsumer consumer = new DataConsumer(queue);\n\n        // Submit tasks to the executor\n        executor.submit(processor::processData);\n\n        // Simulate some unrelated operations\n        for (int i = 0; i < 3; i++) {\n            executor.submit(() -> {\n                try {\n                    System.out.println(\"Performing unrelated task...\");\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n\n        executor.submit(consumer::consumeData);\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        executor.awaitTermination(5, TimeUnit.SECONDS);\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Thread to perform the read operation\n        Thread readerThread = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the threads\n        writerThread.start();\n        readerThread.start();\n\n        // Wait for the threads to finish\n        writerThread.join();\n        readerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        // Thread to perform the write operation\n        executor.submit(() -> {\n            try {\n                /* write */ queue.put(42);\n                System.out.println(\"Value 42 written to the queue.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Simulate some unrelated operations\n        for (int i = 0; i < 3; i++) {\n            executor.submit(() -> {\n                try {\n                    System.out.println(\"Performing unrelated task...\");\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n\n        // Thread to perform the read operation\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read value: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Shutdown the executor and wait for tasks to complete\n        executor.shutdown();\n        executor.awaitTermination(5, TimeUnit.SECONDS);\n    }\n}"
}