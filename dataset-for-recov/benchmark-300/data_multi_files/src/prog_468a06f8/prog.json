{
    "files": {
        "QueueManager.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class QueueManager {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeValue(int value) throws InterruptedException {\n        /* write */ queue.put(value);\n    }\n\n    public int readValue() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "DataProcessor.java": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class DataProcessor {\n    private ArrayList<Integer> list = new ArrayList<>();\n    private LinkedList<Integer> linkedList = new LinkedList<>();\n\n    public void addToList(int value) {\n        list.add(value);\n    }\n\n    public void addToLinkedList(int value) {\n        linkedList.add(value);\n    }\n\n    public void processData() {\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n\n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList element: \" + linkedList.get(i));\n        }\n    }\n}\n",
        "Main.java": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        QueueManager queueManager = new QueueManager();\n        DataProcessor dataProcessor = new DataProcessor();\n\n        // Adding initial data\n        for (int i = 0; i < 5; i++) {\n            dataProcessor.addToList(i * 10);\n            dataProcessor.addToLinkedList(i * 20);\n        }\n\n        // Writer thread\n        Thread writer = new Thread(() -> {\n            try {\n                queueManager.writeValue(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Reader thread\n        Thread reader = new Thread(() -> {\n            try {\n                int value = queueManager.readValue();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        writer.start();\n        reader.start();\n\n        // Process initial data\n        dataProcessor.processData();\n\n        writer.join();\n        reader.join();\n\n        // Add more data\n        dataProcessor.addToList(100);\n        dataProcessor.addToLinkedList(200);\n\n        // Process updated data\n        dataProcessor.processData();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Writer thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reader thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        \n        writer.join();\n        reader.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        \n        // Adding some initial elements to the list and linkedList\n        for (int i = 0; i < 5; i++) {\n            list.add(i * 10);\n            linkedList.add(i * 20);\n        }\n        \n        // Writer thread\n        Thread writer = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        // Reader thread\n        Thread reader = new Thread(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Value from queue: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writer.start();\n        reader.start();\n        \n        // Perform some operations on the list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List element: \" + list.get(i));\n        }\n        \n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"LinkedList element: \" + linkedList.get(i));\n        }\n        \n        writer.join();\n        reader.join();\n        \n        // Add more elements to the list and linkedList\n        list.add(100);\n        linkedList.add(200);\n        \n        // Print the updated list and linkedList\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Updated List element: \" + list.get(i));\n        }\n        \n        for (int i = 0; i < linkedList.size(); i++) {\n            System.out.println(\"Updated LinkedList element: \" + linkedList.get(i));\n        }\n    }\n}"
}