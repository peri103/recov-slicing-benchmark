{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class DataProcessor {\n    private LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n\n    public void processData(int value) {\n        /* write */ deque.addLast(value);\n    }\n\n    public LinkedBlockingDeque<Integer> getDeque() {\n        return deque;\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        DataProcessor processor = new DataProcessor();\n        Student student = new Student(\"Alice\");\n\n        // Add some scores for the student\n        student.addScore(85);\n        student.addScore(90);\n        student.addScore(95);\n\n        // Process the data\n        processor.processData(42);\n\n        // Retrieve the processed data\n        LinkedBlockingDeque<Integer> deque = processor.getDeque();\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Processed value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Print student information\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Scores: \" + student.getScores());\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.LinkedBlockingDeque",
        "write_method": "addLast",
        "read_class": "java.util.concurrent.LinkedBlockingDeque",
        "read_method": "takeLast"
    },
    "java_code_simple": "import java.util.concurrent.LinkedBlockingDeque;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        /* write */ deque.addLast(42);\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.LinkedBlockingDeque;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedBlockingDeque<Integer> deque = new LinkedBlockingDeque<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        LinkedList<String> linkedList = new LinkedList<>();\n\n        // Add some unrelated operations\n        list.add(10);\n        list.add(20);\n        linkedList.add(\"Hello\");\n        linkedList.add(\"World\");\n\n        // Original write operation\n        /* write */ deque.addLast(42);\n\n        // More unrelated operations\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"List value: \" + list.get(i));\n        }\n        for (String s : linkedList) {\n            System.out.println(\"LinkedList value: \" + s);\n        }\n\n        // Original read operation\n        try {\n            /* read */ int value = deque.takeLast();\n            System.out.println(\"Deque value: \" + value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Additional unrelated operations\n        list.add(30);\n        linkedList.add(\"Java\");\n        System.out.println(\"Final List size: \" + list.size());\n        System.out.println(\"Final LinkedList size: \" + linkedList.size());\n    }\n}"
}