{
    "files": {
        "DataWriter.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataWriter {\n    private SynchronousQueue<Integer> queue;\n\n    public DataWriter(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public void writeData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n        System.out.println(\"Data written: \" + data);\n    }\n}\n",
        "DataReader.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataReader {\n    private SynchronousQueue<Integer> queue;\n\n    public DataReader(SynchronousQueue<Integer> queue) {\n        this.queue = queue;\n    }\n\n    public int readData() throws InterruptedException {\n        /* read */ int data = queue.take();\n        System.out.println(\"Data read: \" + data);\n        return data;\n    }\n}\n",
        "Main.java": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        Random random = new Random();\n\n        DataWriter writer = new DataWriter(queue);\n        DataReader reader = new DataReader(queue);\n\n        // Create a separate thread to perform the write operation\n        executor.submit(() -> {\n            try {\n                int number = random.nextInt(100);\n                writer.writeData(number);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            executor.submit(() -> {\n                int randomNumber = random.nextInt(50);\n                System.out.println(\"Generated random number: \" + randomNumber);\n            });\n        }\n\n        // Perform the read operation in a separate thread\n        executor.submit(() -> {\n            try {\n                reader.readData();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a separate thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        writerThread.start();\n        \n        try {\n            // Perform the read operation in the main thread\n            /* read */ int value = queue.take();\n            System.out.println(value);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        Random random = new Random();\n\n        // Create a separate thread to perform the write operation\n        executor.submit(() -> {\n            try {\n                int number = random.nextInt(100);\n                /* write */ queue.put(number);\n                System.out.println(\"Wrote: \" + number);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Perform some unrelated operations\n        for (int i = 0; i < 5; i++) {\n            executor.submit(() -> {\n                int randomNumber = random.nextInt(50);\n                System.out.println(\"Generated random number: \" + randomNumber);\n            });\n        }\n\n        // Perform the read operation in a separate thread\n        executor.submit(() -> {\n            try {\n                /* read */ int value = queue.take();\n                System.out.println(\"Read: \" + value);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        executor.shutdown();\n    }\n}"
}