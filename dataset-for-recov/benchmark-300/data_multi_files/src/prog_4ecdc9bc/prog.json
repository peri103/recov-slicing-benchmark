{
    "files": {
        "DataProcessor.java": "import java.util.concurrent.SynchronousQueue;\n\npublic class DataProcessor {\n    private SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n\n    public void writeData(int data) throws InterruptedException {\n        /* write */ queue.put(data);\n    }\n\n    public int readData() throws InterruptedException {\n        return queue.take();\n    }\n}\n",
        "Student.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private List<Integer> scores = new ArrayList<>();\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public void addScore(int score) {\n        scores.add(score);\n    }\n\n    public List<Integer> getScores() {\n        return scores;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n",
        "Main.java": "import java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        DataProcessor processor = new DataProcessor();\n        Student student = new Student(\"Alice\");\n\n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                processor.writeData(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Add some scores to the student\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            student.addScore(random.nextInt(100));\n        }\n\n        // Perform the read operation in the main thread\n        int value = processor.readData();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Print student details\n        System.out.println(\"Student: \" + student.getName());\n        System.out.println(\"Scores:\");\n        for (int score : student.getScores()) {\n            System.out.println(score);\n        }\n\n        // Wait for the writer thread to finish\n        writerThread.join();\n    }\n}"
    },
    "pair": {
        "write_class": "java.util.concurrent.SynchronousQueue",
        "write_method": "put",
        "read_class": "java.util.concurrent.SynchronousQueue",
        "read_method": "take"
    },
    "java_code_simple": "import java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        \n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(value);\n\n        // Wait for the writer thread to finish\n        writerThread.join();\n    }\n}",
    "java_code_complex": "import java.util.concurrent.SynchronousQueue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronousQueue<Integer> queue = new SynchronousQueue<>();\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n\n        // Populate the list with random numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100));\n        }\n\n        // Create a thread to perform the write operation\n        Thread writerThread = new Thread(() -> {\n            try {\n                /* write */ queue.put(42);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        // Start the writer thread\n        writerThread.start();\n\n        // Perform some operations on the list\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int num : numbers) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n\n        // Perform the read operation in the main thread\n        /* read */ int value = queue.take();\n        System.out.println(\"Value from queue: \" + value);\n\n        // Print even numbers\n        System.out.println(\"Even numbers:\");\n        for (int num : evenNumbers) {\n            System.out.println(num);\n        }\n\n        // Wait for the writer thread to finish\n        writerThread.join();\n    }\n}"
}